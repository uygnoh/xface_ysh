
STM32F103ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e30  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003014  08003014  00013014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b0  080030b0  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  080030b0  080030b0  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b0  080030b0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080030b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000094  0800314c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  0800314c  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a34  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002011  00000000  00000000  00029af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002bb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  0002c330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa21  00000000  00000000  0002ca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a442  00000000  00000000  00047491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e94  00000000  00000000  000518d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5767  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b8  00000000  00000000  000e57bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000094 	.word	0x20000094
 8000200:	00000000 	.word	0x00000000
 8000204:	08002ffc 	.word	0x08002ffc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000098 	.word	0x20000098
 8000220:	08002ffc 	.word	0x08002ffc

08000224 <bsp_led>:
led_struct_t LED = {
        bsp_led
};

void bsp_led(led_enum_t led_number, void (*callback_fun)(led_enum_t))
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	71fb      	strb	r3, [r7, #7]
        (*callback_fun)(led_number);
 8000230:	79fa      	ldrb	r2, [r7, #7]
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	4610      	mov	r0, r2
 8000236:	4798      	blx	r3
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <led_on>:

void led_on(led_enum_t led_number)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
        switch (led_number) {
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	2b03      	cmp	r3, #3
 800024e:	d012      	beq.n	8000276 <led_on+0x36>
 8000250:	2b03      	cmp	r3, #3
 8000252:	dc16      	bgt.n	8000282 <led_on+0x42>
 8000254:	2b01      	cmp	r3, #1
 8000256:	d002      	beq.n	800025e <led_on+0x1e>
 8000258:	2b02      	cmp	r3, #2
 800025a:	d006      	beq.n	800026a <led_on+0x2a>
        case LED_01: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); break;
        case LED_02: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); break;
        case LED_03: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); break;
        default: break;
 800025c:	e011      	b.n	8000282 <led_on+0x42>
        case LED_01: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); break;
 800025e:	2201      	movs	r2, #1
 8000260:	2102      	movs	r1, #2
 8000262:	480a      	ldr	r0, [pc, #40]	; (800028c <led_on+0x4c>)
 8000264:	f000 ff7c 	bl	8001160 <HAL_GPIO_WritePin>
 8000268:	e00c      	b.n	8000284 <led_on+0x44>
        case LED_02: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); break;
 800026a:	2201      	movs	r2, #1
 800026c:	2104      	movs	r1, #4
 800026e:	4807      	ldr	r0, [pc, #28]	; (800028c <led_on+0x4c>)
 8000270:	f000 ff76 	bl	8001160 <HAL_GPIO_WritePin>
 8000274:	e006      	b.n	8000284 <led_on+0x44>
        case LED_03: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); break;
 8000276:	2201      	movs	r2, #1
 8000278:	2108      	movs	r1, #8
 800027a:	4804      	ldr	r0, [pc, #16]	; (800028c <led_on+0x4c>)
 800027c:	f000 ff70 	bl	8001160 <HAL_GPIO_WritePin>
 8000280:	e000      	b.n	8000284 <led_on+0x44>
        default: break;
 8000282:	bf00      	nop
        }
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40010800 	.word	0x40010800

08000290 <led_off>:

void led_off(led_enum_t led_number)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
        switch (led_number) {
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	2b03      	cmp	r3, #3
 800029e:	d012      	beq.n	80002c6 <led_off+0x36>
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	dc16      	bgt.n	80002d2 <led_off+0x42>
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d002      	beq.n	80002ae <led_off+0x1e>
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	d006      	beq.n	80002ba <led_off+0x2a>
        case LED_01: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); break;
        case LED_02: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); break;
        case LED_03: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); break;
        default: break;
 80002ac:	e011      	b.n	80002d2 <led_off+0x42>
        case LED_01: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); break;
 80002ae:	2200      	movs	r2, #0
 80002b0:	2102      	movs	r1, #2
 80002b2:	480a      	ldr	r0, [pc, #40]	; (80002dc <led_off+0x4c>)
 80002b4:	f000 ff54 	bl	8001160 <HAL_GPIO_WritePin>
 80002b8:	e00c      	b.n	80002d4 <led_off+0x44>
        case LED_02: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); break;
 80002ba:	2200      	movs	r2, #0
 80002bc:	2104      	movs	r1, #4
 80002be:	4807      	ldr	r0, [pc, #28]	; (80002dc <led_off+0x4c>)
 80002c0:	f000 ff4e 	bl	8001160 <HAL_GPIO_WritePin>
 80002c4:	e006      	b.n	80002d4 <led_off+0x44>
        case LED_03: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); break;
 80002c6:	2200      	movs	r2, #0
 80002c8:	2108      	movs	r1, #8
 80002ca:	4804      	ldr	r0, [pc, #16]	; (80002dc <led_off+0x4c>)
 80002cc:	f000 ff48 	bl	8001160 <HAL_GPIO_WritePin>
 80002d0:	e000      	b.n	80002d4 <led_off+0x44>
        default: break;
 80002d2:	bf00      	nop
        }
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40010800 	.word	0x40010800

080002e0 <test>:
__IO ITStatus                   uart_ready;
uint8_t                         tx_buffer[] = " ****UART_TwoBoards_ComIT**** ";
uint8_t                         rx_buffer[RX_BUFFER_SIZE];

void test(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
        if (HAL_UART_Transmit_IT(&huart1, (uint8_t *)tx_buffer, TX_BUFFER_SIZE) != HAL_OK) {
 80002e4:	221e      	movs	r2, #30
 80002e6:	491b      	ldr	r1, [pc, #108]	; (8000354 <test+0x74>)
 80002e8:	481b      	ldr	r0, [pc, #108]	; (8000358 <test+0x78>)
 80002ea:	f001 fc71 	bl	8001bd0 <HAL_UART_Transmit_IT>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d009      	beq.n	8000308 <test+0x28>
                Error_Handler();
 80002f4:	f000 f917 	bl	8000526 <Error_Handler>
        }
        while (uart_ready != SET) {
 80002f8:	e006      	b.n	8000308 <test+0x28>
                LED_01();
 80002fa:	2104      	movs	r1, #4
 80002fc:	4817      	ldr	r0, [pc, #92]	; (800035c <test+0x7c>)
 80002fe:	f000 ff47 	bl	8001190 <HAL_GPIO_TogglePin>
                HAL_Delay(100);
 8000302:	2064      	movs	r0, #100	; 0x64
 8000304:	f000 fb24 	bl	8000950 <HAL_Delay>
        while (uart_ready != SET) {
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <test+0x80>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b01      	cmp	r3, #1
 8000310:	d1f3      	bne.n	80002fa <test+0x1a>
        }
        //Reset transmission flag
        uart_ready = RESET;
 8000312:	4b13      	ldr	r3, [pc, #76]	; (8000360 <test+0x80>)
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]


        if (HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_buffer, RX_BUFFER_SIZE) != HAL_OK) {
 8000318:	221e      	movs	r2, #30
 800031a:	4912      	ldr	r1, [pc, #72]	; (8000364 <test+0x84>)
 800031c:	480e      	ldr	r0, [pc, #56]	; (8000358 <test+0x78>)
 800031e:	f001 fc9b 	bl	8001c58 <HAL_UART_Receive_IT>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d00a      	beq.n	800033e <test+0x5e>
                Error_Handler();
 8000328:	f000 f8fd 	bl	8000526 <Error_Handler>
        }
        while (uart_ready != SET) {
 800032c:	e007      	b.n	800033e <test+0x5e>
                LED_01();
 800032e:	2104      	movs	r1, #4
 8000330:	480a      	ldr	r0, [pc, #40]	; (800035c <test+0x7c>)
 8000332:	f000 ff2d 	bl	8001190 <HAL_GPIO_TogglePin>
                HAL_Delay(100);
 8000336:	2064      	movs	r0, #100	; 0x64
 8000338:	f000 fb0a 	bl	8000950 <HAL_Delay>
                break;
 800033c:	e005      	b.n	800034a <test+0x6a>
        while (uart_ready != SET) {
 800033e:	bf00      	nop
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <test+0x80>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b01      	cmp	r3, #1
 8000348:	d1f1      	bne.n	800032e <test+0x4e>
        }
        //Reset transmission flag
        uart_ready = RESET;
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <test+0x80>)
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000004 	.word	0x20000004
 8000358:	200000dc 	.word	0x200000dc
 800035c:	40010800 	.word	0x40010800
 8000360:	200000da 	.word	0x200000da
 8000364:	200000bc 	.word	0x200000bc

08000368 <HAL_UART_TxCpltCallback>:
/*****************************************************************************/
/*      => STM32F103__回调函数__                                              */
/*****************************************************************************/
//UART__发送完成（中断）回调函数
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
        uart_ready = SET;      //设置传输完成标志位（SET传输完成）
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <HAL_UART_TxCpltCallback+0x18>)
 8000372:	2201      	movs	r2, #1
 8000374:	701a      	strb	r2, [r3, #0]
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	200000da 	.word	0x200000da

08000384 <HAL_UART_RxCpltCallback>:
//UART__接收完成（中断）回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
        uart_ready = SET;      //设置传输完成标志位（SET传输完成）
 800038c:	4b03      	ldr	r3, [pc, #12]	; (800039c <HAL_UART_RxCpltCallback+0x18>)
 800038e:	2201      	movs	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	200000da 	.word	0x200000da

080003a0 <HAL_UART_ErrorCallback>:
//UART__出错（中断）回调函数
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart1)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
	...

080003b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <MX_GPIO_Init+0x74>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a16      	ldr	r2, [pc, #88]	; (8000428 <MX_GPIO_Init+0x74>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <MX_GPIO_Init+0x74>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_GPIO_Init+0x74>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a10      	ldr	r2, [pc, #64]	; (8000428 <MX_GPIO_Init+0x74>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_GPIO_Init+0x74>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	603b      	str	r3, [r7, #0]
 80003f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2104      	movs	r1, #4
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <MX_GPIO_Init+0x78>)
 80003fe:	f000 feaf 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000402:	2304      	movs	r3, #4
 8000404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800040e:	2301      	movs	r3, #1
 8000410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000412:	f107 0308 	add.w	r3, r7, #8
 8000416:	4619      	mov	r1, r3
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <MX_GPIO_Init+0x78>)
 800041a:	f000 fd0d 	bl	8000e38 <HAL_GPIO_Init>

}
 800041e:	bf00      	nop
 8000420:	3718      	adds	r7, #24
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000
 800042c:	40010800 	.word	0x40010800

08000430 <__io_putchar>:
                }
                return len;
        }
#else
        #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
        PUTCHAR_PROTOTYPE {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
        //第一个参数是串口（全局结构体huart1）
        //第二个参数是串口（）
        //第三个参数是串口（）
        //第四个参数是串口（最大延时时间）
        HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000438:	1d39      	adds	r1, r7, #4
 800043a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800043e:	2201      	movs	r2, #1
 8000440:	4803      	ldr	r0, [pc, #12]	; (8000450 <__io_putchar+0x20>)
 8000442:	f001 fb33 	bl	8001aac <HAL_UART_Transmit>
        return ch;
 8000446:	687b      	ldr	r3, [r7, #4]
        }
 8000448:	4618      	mov	r0, r3
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	200000dc 	.word	0x200000dc

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 fa18 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f828 	bl	80004b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f7ff ffa8 	bl	80003b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000464:	f000 f96e 	bl	8000744 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

test();
 8000468:	f7ff ff3a 	bl	80002e0 <test>
while (1) {
        LED.bsp_led(LED_02, led_on);
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <main+0x4c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	490c      	ldr	r1, [pc, #48]	; (80004a4 <main+0x50>)
 8000472:	2002      	movs	r0, #2
 8000474:	4798      	blx	r3
        HAL_Delay(500);
 8000476:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800047a:	f000 fa69 	bl	8000950 <HAL_Delay>
        LED.bsp_led(LED_02, led_off);
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <main+0x4c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4909      	ldr	r1, [pc, #36]	; (80004a8 <main+0x54>)
 8000484:	2002      	movs	r0, #2
 8000486:	4798      	blx	r3
        HAL_Delay(500);
 8000488:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800048c:	f000 fa60 	bl	8000950 <HAL_Delay>
        printf("hello, world!\n");
 8000490:	4806      	ldr	r0, [pc, #24]	; (80004ac <main+0x58>)
 8000492:	f002 f95f 	bl	8002754 <puts>
        __delay_us(100);
 8000496:	2064      	movs	r0, #100	; 0x64
 8000498:	f002 f892 	bl	80025c0 <__delay_us>
        LED.bsp_led(LED_02, led_on);
 800049c:	e7e6      	b.n	800046c <main+0x18>
 800049e:	bf00      	nop
 80004a0:	20000000 	.word	0x20000000
 80004a4:	08000241 	.word	0x08000241
 80004a8:	08000291 	.word	0x08000291
 80004ac:	08003014 	.word	0x08003014

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b090      	sub	sp, #64	; 0x40
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	f107 0318 	add.w	r3, r7, #24
 80004ba:	2228      	movs	r2, #40	; 0x28
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f002 f8d2 	bl	8002668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d2:	2302      	movs	r3, #2
 80004d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d6:	2301      	movs	r3, #1
 80004d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004da:	2310      	movs	r3, #16
 80004dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004de:	2300      	movs	r3, #0
 80004e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e2:	f107 0318 	add.w	r3, r7, #24
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 fe6c 	bl	80011c4 <HAL_RCC_OscConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004f2:	f000 f818 	bl	8000526 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f6:	230f      	movs	r3, #15
 80004f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f001 f8d8 	bl	80016c4 <HAL_RCC_ClockConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800051a:	f000 f804 	bl	8000526 <Error_Handler>
  }
}
 800051e:	bf00      	nop
 8000520:	3740      	adds	r7, #64	; 0x40
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052a:	b672      	cpsid	i
}
 800052c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052e:	e7fe      	b.n	800052e <Error_Handler+0x8>

08000530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <HAL_MspInit+0x5c>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4a14      	ldr	r2, [pc, #80]	; (800058c <HAL_MspInit+0x5c>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6193      	str	r3, [r2, #24]
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_MspInit+0x5c>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <HAL_MspInit+0x5c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a0e      	ldr	r2, [pc, #56]	; (800058c <HAL_MspInit+0x5c>)
 8000554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000558:	61d3      	str	r3, [r2, #28]
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <HAL_MspInit+0x5c>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <HAL_MspInit+0x60>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_MspInit+0x60>)
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000
 8000590:	40010000 	.word	0x40010000

08000594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <NMI_Handler+0x4>

0800059a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <HardFault_Handler+0x4>

080005a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <MemManage_Handler+0x4>

080005a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005aa:	e7fe      	b.n	80005aa <BusFault_Handler+0x4>

080005ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <UsageFault_Handler+0x4>

080005b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr

080005ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr

080005d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005da:	f000 f99d 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <USART1_IRQHandler+0x10>)
 80005ea:	f001 fb65 	bl	8001cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200000dc 	.word	0x200000dc

080005f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	e00a      	b.n	8000620 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800060a:	f3af 8000 	nop.w
 800060e:	4601      	mov	r1, r0
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	60ba      	str	r2, [r7, #8]
 8000616:	b2ca      	uxtb	r2, r1
 8000618:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	3301      	adds	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	dbf0      	blt.n	800060a <_read+0x12>
	}

return len;
 8000628:	687b      	ldr	r3, [r7, #4]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b086      	sub	sp, #24
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	e009      	b.n	8000658 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	60ba      	str	r2, [r7, #8]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff feef 	bl	8000430 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	3301      	adds	r3, #1
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	dbf1      	blt.n	8000644 <_write+0x12>
	}
	return len;
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <_close>:

int _close(int file)
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
	return -1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000690:	605a      	str	r2, [r3, #4]
	return 0;
 8000692:	2300      	movs	r3, #0
}
 8000694:	4618      	mov	r0, r3
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <_isatty>:

int _isatty(int file)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
	return 1;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006b2:	b480      	push	{r7}
 80006b4:	b085      	sub	sp, #20
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
	return 0;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
	...

080006cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <_sbrk+0x5c>)
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <_sbrk+0x60>)
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <_sbrk+0x64>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <_sbrk+0x64>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <_sbrk+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d207      	bcs.n	800070c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006fc:	f001 ff8a 	bl	8002614 <__errno>
 8000700:	4603      	mov	r3, r0
 8000702:	220c      	movs	r2, #12
 8000704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800070a:	e009      	b.n	8000720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <_sbrk+0x64>)
 800071c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800071e:	68fb      	ldr	r3, [r7, #12]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20010000 	.word	0x20010000
 800072c:	00000400 	.word	0x00000400
 8000730:	200000b0 	.word	0x200000b0
 8000734:	20000168 	.word	0x20000168

08000738 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART1_UART_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_USART1_UART_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_USART1_UART_Init+0x4c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART1_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART1_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART1_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART1_UART_Init+0x4c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART1_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART1_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART1_UART_Init+0x4c>)
 800077c:	f001 f93c 	bl	80019f8 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000786:	f7ff fece 	bl	8000526 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000dc 	.word	0x200000dc
 8000794:	40013800 	.word	0x40013800

08000798 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a20      	ldr	r2, [pc, #128]	; (8000834 <HAL_UART_MspInit+0x9c>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d139      	bne.n	800082c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <HAL_UART_MspInit+0xa0>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <HAL_UART_MspInit+0xa0>)
 80007be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <HAL_UART_MspInit+0xa0>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <HAL_UART_MspInit+0xa0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a18      	ldr	r2, [pc, #96]	; (8000838 <HAL_UART_MspInit+0xa0>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <HAL_UART_MspInit+0xa0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	4619      	mov	r1, r3
 80007fc:	480f      	ldr	r0, [pc, #60]	; (800083c <HAL_UART_MspInit+0xa4>)
 80007fe:	f000 fb1b 	bl	8000e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <HAL_UART_MspInit+0xa4>)
 8000818:	f000 fb0e 	bl	8000e38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	210e      	movs	r1, #14
 8000820:	2025      	movs	r0, #37	; 0x25
 8000822:	f000 f990 	bl	8000b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000826:	2025      	movs	r0, #37	; 0x25
 8000828:	f000 f9a9 	bl	8000b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800082c:	bf00      	nop
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40013800 	.word	0x40013800
 8000838:	40021000 	.word	0x40021000
 800083c:	40010800 	.word	0x40010800

08000840 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000842:	490d      	ldr	r1, [pc, #52]	; (8000878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000858:	4c0a      	ldr	r4, [pc, #40]	; (8000884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000866:	f7ff ff67 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086a:	f001 fed9 	bl	8002620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086e:	f7ff fdf1 	bl	8000454 <main>
  bx lr
 8000872:	4770      	bx	lr
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800087c:	080030b8 	.word	0x080030b8
  ldr r2, =_sbss
 8000880:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000884:	20000164 	.word	0x20000164

08000888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_2_IRQHandler>
	...

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_Init+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_Init+0x28>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f947 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a2:	200f      	movs	r0, #15
 80008a4:	f000 f808 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a8:	f7ff fe42 	bl	8000530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x54>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x58>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f95f 	bl	8000b9a <HAL_SYSTICK_Config>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00e      	b.n	8000904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	d80a      	bhi.n	8000902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f4:	f000 f927 	bl	8000b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f8:	4a06      	ldr	r2, [pc, #24]	; (8000914 <HAL_InitTick+0x5c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000024 	.word	0x20000024
 8000910:	2000002c 	.word	0x2000002c
 8000914:	20000028 	.word	0x20000028

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x1c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x20>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	4a03      	ldr	r2, [pc, #12]	; (8000938 <HAL_IncTick+0x20>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	2000002c 	.word	0x2000002c
 8000938:	20000150 	.word	0x20000150

0800093c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b02      	ldr	r3, [pc, #8]	; (800094c <HAL_GetTick+0x10>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	20000150 	.word	0x20000150

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff fff0 	bl	800093c <HAL_GetTick>
 800095c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000976:	bf00      	nop
 8000978:	f7ff ffe0 	bl	800093c <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000002c 	.word	0x2000002c

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4906      	ldr	r1, [pc, #24]	; (8000a30 <__NVIC_EnableIRQ+0x34>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	; (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	; (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	; 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b10:	f7ff ff90 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff2d 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff42 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff90 	bl	8000a88 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5f 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff35 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffa2 	bl	8000aec <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b085      	sub	sp, #20
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d008      	beq.n	8000bda <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2204      	movs	r2, #4
 8000bcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e020      	b.n	8000c1c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 020e 	bic.w	r2, r2, #14
 8000be8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0201 	bic.w	r2, r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c02:	2101      	movs	r1, #1
 8000c04:	fa01 f202 	lsl.w	r2, r1, r2
 8000c08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
	...

08000c28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d005      	beq.n	8000c4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2204      	movs	r2, #4
 8000c42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e0d6      	b.n	8000df8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 020e 	bic.w	r2, r2, #14
 8000c58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 0201 	bic.w	r2, r2, #1
 8000c68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b64      	ldr	r3, [pc, #400]	; (8000e04 <HAL_DMA_Abort_IT+0x1dc>)
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d958      	bls.n	8000d28 <HAL_DMA_Abort_IT+0x100>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a63      	ldr	r2, [pc, #396]	; (8000e08 <HAL_DMA_Abort_IT+0x1e0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d04f      	beq.n	8000d20 <HAL_DMA_Abort_IT+0xf8>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a61      	ldr	r2, [pc, #388]	; (8000e0c <HAL_DMA_Abort_IT+0x1e4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d048      	beq.n	8000d1c <HAL_DMA_Abort_IT+0xf4>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a60      	ldr	r2, [pc, #384]	; (8000e10 <HAL_DMA_Abort_IT+0x1e8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d040      	beq.n	8000d16 <HAL_DMA_Abort_IT+0xee>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a5e      	ldr	r2, [pc, #376]	; (8000e14 <HAL_DMA_Abort_IT+0x1ec>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d038      	beq.n	8000d10 <HAL_DMA_Abort_IT+0xe8>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a5d      	ldr	r2, [pc, #372]	; (8000e18 <HAL_DMA_Abort_IT+0x1f0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d030      	beq.n	8000d0a <HAL_DMA_Abort_IT+0xe2>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a5b      	ldr	r2, [pc, #364]	; (8000e1c <HAL_DMA_Abort_IT+0x1f4>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d028      	beq.n	8000d04 <HAL_DMA_Abort_IT+0xdc>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a53      	ldr	r2, [pc, #332]	; (8000e04 <HAL_DMA_Abort_IT+0x1dc>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d020      	beq.n	8000cfe <HAL_DMA_Abort_IT+0xd6>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a57      	ldr	r2, [pc, #348]	; (8000e20 <HAL_DMA_Abort_IT+0x1f8>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d019      	beq.n	8000cfa <HAL_DMA_Abort_IT+0xd2>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a56      	ldr	r2, [pc, #344]	; (8000e24 <HAL_DMA_Abort_IT+0x1fc>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d012      	beq.n	8000cf6 <HAL_DMA_Abort_IT+0xce>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a54      	ldr	r2, [pc, #336]	; (8000e28 <HAL_DMA_Abort_IT+0x200>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d00a      	beq.n	8000cf0 <HAL_DMA_Abort_IT+0xc8>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a53      	ldr	r2, [pc, #332]	; (8000e2c <HAL_DMA_Abort_IT+0x204>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d102      	bne.n	8000cea <HAL_DMA_Abort_IT+0xc2>
 8000ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce8:	e01b      	b.n	8000d22 <HAL_DMA_Abort_IT+0xfa>
 8000cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cee:	e018      	b.n	8000d22 <HAL_DMA_Abort_IT+0xfa>
 8000cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf4:	e015      	b.n	8000d22 <HAL_DMA_Abort_IT+0xfa>
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	e013      	b.n	8000d22 <HAL_DMA_Abort_IT+0xfa>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e011      	b.n	8000d22 <HAL_DMA_Abort_IT+0xfa>
 8000cfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d02:	e00e      	b.n	8000d22 <HAL_DMA_Abort_IT+0xfa>
 8000d04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d08:	e00b      	b.n	8000d22 <HAL_DMA_Abort_IT+0xfa>
 8000d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0e:	e008      	b.n	8000d22 <HAL_DMA_Abort_IT+0xfa>
 8000d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d14:	e005      	b.n	8000d22 <HAL_DMA_Abort_IT+0xfa>
 8000d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1a:	e002      	b.n	8000d22 <HAL_DMA_Abort_IT+0xfa>
 8000d1c:	2310      	movs	r3, #16
 8000d1e:	e000      	b.n	8000d22 <HAL_DMA_Abort_IT+0xfa>
 8000d20:	2301      	movs	r3, #1
 8000d22:	4a43      	ldr	r2, [pc, #268]	; (8000e30 <HAL_DMA_Abort_IT+0x208>)
 8000d24:	6053      	str	r3, [r2, #4]
 8000d26:	e057      	b.n	8000dd8 <HAL_DMA_Abort_IT+0x1b0>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a36      	ldr	r2, [pc, #216]	; (8000e08 <HAL_DMA_Abort_IT+0x1e0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d04f      	beq.n	8000dd2 <HAL_DMA_Abort_IT+0x1aa>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a35      	ldr	r2, [pc, #212]	; (8000e0c <HAL_DMA_Abort_IT+0x1e4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d048      	beq.n	8000dce <HAL_DMA_Abort_IT+0x1a6>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a33      	ldr	r2, [pc, #204]	; (8000e10 <HAL_DMA_Abort_IT+0x1e8>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d040      	beq.n	8000dc8 <HAL_DMA_Abort_IT+0x1a0>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <HAL_DMA_Abort_IT+0x1ec>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d038      	beq.n	8000dc2 <HAL_DMA_Abort_IT+0x19a>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a30      	ldr	r2, [pc, #192]	; (8000e18 <HAL_DMA_Abort_IT+0x1f0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d030      	beq.n	8000dbc <HAL_DMA_Abort_IT+0x194>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a2f      	ldr	r2, [pc, #188]	; (8000e1c <HAL_DMA_Abort_IT+0x1f4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d028      	beq.n	8000db6 <HAL_DMA_Abort_IT+0x18e>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a26      	ldr	r2, [pc, #152]	; (8000e04 <HAL_DMA_Abort_IT+0x1dc>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d020      	beq.n	8000db0 <HAL_DMA_Abort_IT+0x188>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a2b      	ldr	r2, [pc, #172]	; (8000e20 <HAL_DMA_Abort_IT+0x1f8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d019      	beq.n	8000dac <HAL_DMA_Abort_IT+0x184>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <HAL_DMA_Abort_IT+0x1fc>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d012      	beq.n	8000da8 <HAL_DMA_Abort_IT+0x180>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <HAL_DMA_Abort_IT+0x200>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d00a      	beq.n	8000da2 <HAL_DMA_Abort_IT+0x17a>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_DMA_Abort_IT+0x204>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d102      	bne.n	8000d9c <HAL_DMA_Abort_IT+0x174>
 8000d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9a:	e01b      	b.n	8000dd4 <HAL_DMA_Abort_IT+0x1ac>
 8000d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da0:	e018      	b.n	8000dd4 <HAL_DMA_Abort_IT+0x1ac>
 8000da2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da6:	e015      	b.n	8000dd4 <HAL_DMA_Abort_IT+0x1ac>
 8000da8:	2310      	movs	r3, #16
 8000daa:	e013      	b.n	8000dd4 <HAL_DMA_Abort_IT+0x1ac>
 8000dac:	2301      	movs	r3, #1
 8000dae:	e011      	b.n	8000dd4 <HAL_DMA_Abort_IT+0x1ac>
 8000db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000db4:	e00e      	b.n	8000dd4 <HAL_DMA_Abort_IT+0x1ac>
 8000db6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dba:	e00b      	b.n	8000dd4 <HAL_DMA_Abort_IT+0x1ac>
 8000dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc0:	e008      	b.n	8000dd4 <HAL_DMA_Abort_IT+0x1ac>
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	e005      	b.n	8000dd4 <HAL_DMA_Abort_IT+0x1ac>
 8000dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dcc:	e002      	b.n	8000dd4 <HAL_DMA_Abort_IT+0x1ac>
 8000dce:	2310      	movs	r3, #16
 8000dd0:	e000      	b.n	8000dd4 <HAL_DMA_Abort_IT+0x1ac>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_DMA_Abort_IT+0x20c>)
 8000dd6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	4798      	blx	r3
    } 
  }
  return status;
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40020080 	.word	0x40020080
 8000e08:	40020008 	.word	0x40020008
 8000e0c:	4002001c 	.word	0x4002001c
 8000e10:	40020030 	.word	0x40020030
 8000e14:	40020044 	.word	0x40020044
 8000e18:	40020058 	.word	0x40020058
 8000e1c:	4002006c 	.word	0x4002006c
 8000e20:	40020408 	.word	0x40020408
 8000e24:	4002041c 	.word	0x4002041c
 8000e28:	40020430 	.word	0x40020430
 8000e2c:	40020444 	.word	0x40020444
 8000e30:	40020400 	.word	0x40020400
 8000e34:	40020000 	.word	0x40020000

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b08b      	sub	sp, #44	; 0x2c
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4a:	e179      	b.n	8001140 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 8168 	bne.w	800113a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	4aa0      	ldr	r2, [pc, #640]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d05e      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000e74:	4a9e      	ldr	r2, [pc, #632]	; (80010f0 <HAL_GPIO_Init+0x2b8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d875      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000e7a:	4a9e      	ldr	r2, [pc, #632]	; (80010f4 <HAL_GPIO_Init+0x2bc>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d058      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000e80:	4a9c      	ldr	r2, [pc, #624]	; (80010f4 <HAL_GPIO_Init+0x2bc>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d86f      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000e86:	4a9c      	ldr	r2, [pc, #624]	; (80010f8 <HAL_GPIO_Init+0x2c0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d052      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000e8c:	4a9a      	ldr	r2, [pc, #616]	; (80010f8 <HAL_GPIO_Init+0x2c0>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d869      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000e92:	4a9a      	ldr	r2, [pc, #616]	; (80010fc <HAL_GPIO_Init+0x2c4>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d04c      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000e98:	4a98      	ldr	r2, [pc, #608]	; (80010fc <HAL_GPIO_Init+0x2c4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d863      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000e9e:	4a98      	ldr	r2, [pc, #608]	; (8001100 <HAL_GPIO_Init+0x2c8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d046      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000ea4:	4a96      	ldr	r2, [pc, #600]	; (8001100 <HAL_GPIO_Init+0x2c8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d85d      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000eaa:	2b12      	cmp	r3, #18
 8000eac:	d82a      	bhi.n	8000f04 <HAL_GPIO_Init+0xcc>
 8000eae:	2b12      	cmp	r3, #18
 8000eb0:	d859      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000eb2:	a201      	add	r2, pc, #4	; (adr r2, 8000eb8 <HAL_GPIO_Init+0x80>)
 8000eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb8:	08000f33 	.word	0x08000f33
 8000ebc:	08000f0d 	.word	0x08000f0d
 8000ec0:	08000f1f 	.word	0x08000f1f
 8000ec4:	08000f61 	.word	0x08000f61
 8000ec8:	08000f67 	.word	0x08000f67
 8000ecc:	08000f67 	.word	0x08000f67
 8000ed0:	08000f67 	.word	0x08000f67
 8000ed4:	08000f67 	.word	0x08000f67
 8000ed8:	08000f67 	.word	0x08000f67
 8000edc:	08000f67 	.word	0x08000f67
 8000ee0:	08000f67 	.word	0x08000f67
 8000ee4:	08000f67 	.word	0x08000f67
 8000ee8:	08000f67 	.word	0x08000f67
 8000eec:	08000f67 	.word	0x08000f67
 8000ef0:	08000f67 	.word	0x08000f67
 8000ef4:	08000f67 	.word	0x08000f67
 8000ef8:	08000f67 	.word	0x08000f67
 8000efc:	08000f15 	.word	0x08000f15
 8000f00:	08000f29 	.word	0x08000f29
 8000f04:	4a7f      	ldr	r2, [pc, #508]	; (8001104 <HAL_GPIO_Init+0x2cc>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d013      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f0a:	e02c      	b.n	8000f66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e029      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	623b      	str	r3, [r7, #32]
          break;
 8000f1c:	e024      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	3308      	adds	r3, #8
 8000f24:	623b      	str	r3, [r7, #32]
          break;
 8000f26:	e01f      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	330c      	adds	r3, #12
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e01a      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	623b      	str	r3, [r7, #32]
          break;
 8000f3e:	e013      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d105      	bne.n	8000f54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	611a      	str	r2, [r3, #16]
          break;
 8000f52:	e009      	b.n	8000f68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f54:	2308      	movs	r3, #8
 8000f56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	615a      	str	r2, [r3, #20]
          break;
 8000f5e:	e003      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	e000      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          break;
 8000f66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2bff      	cmp	r3, #255	; 0xff
 8000f6c:	d801      	bhi.n	8000f72 <HAL_GPIO_Init+0x13a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	e001      	b.n	8000f76 <HAL_GPIO_Init+0x13e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3304      	adds	r3, #4
 8000f76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	2bff      	cmp	r3, #255	; 0xff
 8000f7c:	d802      	bhi.n	8000f84 <HAL_GPIO_Init+0x14c>
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	e002      	b.n	8000f8a <HAL_GPIO_Init+0x152>
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	3b08      	subs	r3, #8
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	210f      	movs	r1, #15
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	6a39      	ldr	r1, [r7, #32]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 80c1 	beq.w	800113a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb8:	4b53      	ldr	r3, [pc, #332]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a52      	ldr	r2, [pc, #328]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b50      	ldr	r3, [pc, #320]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fd0:	4a4e      	ldr	r2, [pc, #312]	; (800110c <HAL_GPIO_Init+0x2d4>)
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a46      	ldr	r2, [pc, #280]	; (8001110 <HAL_GPIO_Init+0x2d8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d01f      	beq.n	800103c <HAL_GPIO_Init+0x204>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a45      	ldr	r2, [pc, #276]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d019      	beq.n	8001038 <HAL_GPIO_Init+0x200>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a44      	ldr	r2, [pc, #272]	; (8001118 <HAL_GPIO_Init+0x2e0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d013      	beq.n	8001034 <HAL_GPIO_Init+0x1fc>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a43      	ldr	r2, [pc, #268]	; (800111c <HAL_GPIO_Init+0x2e4>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d00d      	beq.n	8001030 <HAL_GPIO_Init+0x1f8>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a42      	ldr	r2, [pc, #264]	; (8001120 <HAL_GPIO_Init+0x2e8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d007      	beq.n	800102c <HAL_GPIO_Init+0x1f4>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a41      	ldr	r2, [pc, #260]	; (8001124 <HAL_GPIO_Init+0x2ec>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d101      	bne.n	8001028 <HAL_GPIO_Init+0x1f0>
 8001024:	2305      	movs	r3, #5
 8001026:	e00a      	b.n	800103e <HAL_GPIO_Init+0x206>
 8001028:	2306      	movs	r3, #6
 800102a:	e008      	b.n	800103e <HAL_GPIO_Init+0x206>
 800102c:	2304      	movs	r3, #4
 800102e:	e006      	b.n	800103e <HAL_GPIO_Init+0x206>
 8001030:	2303      	movs	r3, #3
 8001032:	e004      	b.n	800103e <HAL_GPIO_Init+0x206>
 8001034:	2302      	movs	r3, #2
 8001036:	e002      	b.n	800103e <HAL_GPIO_Init+0x206>
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <HAL_GPIO_Init+0x206>
 800103c:	2300      	movs	r3, #0
 800103e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001040:	f002 0203 	and.w	r2, r2, #3
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	4093      	lsls	r3, r2
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800104e:	492f      	ldr	r1, [pc, #188]	; (800110c <HAL_GPIO_Init+0x2d4>)
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001068:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	492e      	ldr	r1, [pc, #184]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	43db      	mvns	r3, r3
 800107e:	492a      	ldr	r1, [pc, #168]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 8001080:	4013      	ands	r3, r2
 8001082:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001090:	4b25      	ldr	r3, [pc, #148]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	4924      	ldr	r1, [pc, #144]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4920      	ldr	r1, [pc, #128]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	491a      	ldr	r1, [pc, #104]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	608b      	str	r3, [r1, #8]
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4916      	ldr	r1, [pc, #88]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d025      	beq.n	800112c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	4910      	ldr	r1, [pc, #64]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	60cb      	str	r3, [r1, #12]
 80010ec:	e025      	b.n	800113a <HAL_GPIO_Init+0x302>
 80010ee:	bf00      	nop
 80010f0:	10320000 	.word	0x10320000
 80010f4:	10310000 	.word	0x10310000
 80010f8:	10220000 	.word	0x10220000
 80010fc:	10210000 	.word	0x10210000
 8001100:	10120000 	.word	0x10120000
 8001104:	10110000 	.word	0x10110000
 8001108:	40021000 	.word	0x40021000
 800110c:	40010000 	.word	0x40010000
 8001110:	40010800 	.word	0x40010800
 8001114:	40010c00 	.word	0x40010c00
 8001118:	40011000 	.word	0x40011000
 800111c:	40011400 	.word	0x40011400
 8001120:	40011800 	.word	0x40011800
 8001124:	40011c00 	.word	0x40011c00
 8001128:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_GPIO_Init+0x324>)
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	43db      	mvns	r3, r3
 8001134:	4909      	ldr	r1, [pc, #36]	; (800115c <HAL_GPIO_Init+0x324>)
 8001136:	4013      	ands	r3, r2
 8001138:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	3301      	adds	r3, #1
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	fa22 f303 	lsr.w	r3, r2, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	f47f ae7e 	bne.w	8000e4c <HAL_GPIO_Init+0x14>
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	372c      	adds	r7, #44	; 0x2c
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40010400 	.word	0x40010400

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800117c:	e003      	b.n	8001186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	611a      	str	r2, [r3, #16]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4013      	ands	r3, r2
 80011a8:	041a      	lsls	r2, r3, #16
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	43d9      	mvns	r1, r3
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	400b      	ands	r3, r1
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	611a      	str	r2, [r3, #16]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e26c      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 8087 	beq.w	80012f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011e4:	4b92      	ldr	r3, [pc, #584]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d00c      	beq.n	800120a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011f0:	4b8f      	ldr	r3, [pc, #572]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 030c 	and.w	r3, r3, #12
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d112      	bne.n	8001222 <HAL_RCC_OscConfig+0x5e>
 80011fc:	4b8c      	ldr	r3, [pc, #560]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001208:	d10b      	bne.n	8001222 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120a:	4b89      	ldr	r3, [pc, #548]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d06c      	beq.n	80012f0 <HAL_RCC_OscConfig+0x12c>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d168      	bne.n	80012f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e246      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800122a:	d106      	bne.n	800123a <HAL_RCC_OscConfig+0x76>
 800122c:	4b80      	ldr	r3, [pc, #512]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a7f      	ldr	r2, [pc, #508]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	e02e      	b.n	8001298 <HAL_RCC_OscConfig+0xd4>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0x98>
 8001242:	4b7b      	ldr	r3, [pc, #492]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a7a      	ldr	r2, [pc, #488]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b78      	ldr	r3, [pc, #480]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a77      	ldr	r2, [pc, #476]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e01d      	b.n	8001298 <HAL_RCC_OscConfig+0xd4>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0xbc>
 8001266:	4b72      	ldr	r3, [pc, #456]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a71      	ldr	r2, [pc, #452]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 800126c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	4b6f      	ldr	r3, [pc, #444]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a6e      	ldr	r2, [pc, #440]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e00b      	b.n	8001298 <HAL_RCC_OscConfig+0xd4>
 8001280:	4b6b      	ldr	r3, [pc, #428]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a6a      	ldr	r2, [pc, #424]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b68      	ldr	r3, [pc, #416]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a67      	ldr	r2, [pc, #412]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001296:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d013      	beq.n	80012c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fb4c 	bl	800093c <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a8:	f7ff fb48 	bl	800093c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b64      	cmp	r3, #100	; 0x64
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e1fa      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	4b5d      	ldr	r3, [pc, #372]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0xe4>
 80012c6:	e014      	b.n	80012f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fb38 	bl	800093c <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fb34 	bl	800093c <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e1e6      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e2:	4b53      	ldr	r3, [pc, #332]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x10c>
 80012ee:	e000      	b.n	80012f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d063      	beq.n	80013c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012fe:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00b      	beq.n	8001322 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800130a:	4b49      	ldr	r3, [pc, #292]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b08      	cmp	r3, #8
 8001314:	d11c      	bne.n	8001350 <HAL_RCC_OscConfig+0x18c>
 8001316:	4b46      	ldr	r3, [pc, #280]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d116      	bne.n	8001350 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001322:	4b43      	ldr	r3, [pc, #268]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <HAL_RCC_OscConfig+0x176>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d001      	beq.n	800133a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e1ba      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133a:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4939      	ldr	r1, [pc, #228]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134e:	e03a      	b.n	80013c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d020      	beq.n	800139a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001358:	4b36      	ldr	r3, [pc, #216]	; (8001434 <HAL_RCC_OscConfig+0x270>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7ff faed 	bl	800093c <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff fae9 	bl	800093c <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e19b      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001378:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001384:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4927      	ldr	r1, [pc, #156]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
 8001398:	e015      	b.n	80013c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <HAL_RCC_OscConfig+0x270>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff facc 	bl	800093c <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a8:	f7ff fac8 	bl	800093c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e17a      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d03a      	beq.n	8001448 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d019      	beq.n	800140e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <HAL_RCC_OscConfig+0x274>)
 80013dc:	2201      	movs	r2, #1
 80013de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e0:	f7ff faac 	bl	800093c <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e8:	f7ff faa8 	bl	800093c <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e15a      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001406:	2001      	movs	r0, #1
 8001408:	f000 fad8 	bl	80019bc <RCC_Delay>
 800140c:	e01c      	b.n	8001448 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_RCC_OscConfig+0x274>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001414:	f7ff fa92 	bl	800093c <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141a:	e00f      	b.n	800143c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141c:	f7ff fa8e 	bl	800093c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d908      	bls.n	800143c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e140      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	42420000 	.word	0x42420000
 8001438:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143c:	4b9e      	ldr	r3, [pc, #632]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1e9      	bne.n	800141c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80a6 	beq.w	80015a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145a:	4b97      	ldr	r3, [pc, #604]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10d      	bne.n	8001482 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	4b94      	ldr	r3, [pc, #592]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a93      	ldr	r2, [pc, #588]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b91      	ldr	r3, [pc, #580]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800147e:	2301      	movs	r3, #1
 8001480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001482:	4b8e      	ldr	r3, [pc, #568]	; (80016bc <HAL_RCC_OscConfig+0x4f8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148a:	2b00      	cmp	r3, #0
 800148c:	d118      	bne.n	80014c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148e:	4b8b      	ldr	r3, [pc, #556]	; (80016bc <HAL_RCC_OscConfig+0x4f8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a8a      	ldr	r2, [pc, #552]	; (80016bc <HAL_RCC_OscConfig+0x4f8>)
 8001494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149a:	f7ff fa4f 	bl	800093c <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a2:	f7ff fa4b 	bl	800093c <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b64      	cmp	r3, #100	; 0x64
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e0fd      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	4b81      	ldr	r3, [pc, #516]	; (80016bc <HAL_RCC_OscConfig+0x4f8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x312>
 80014c8:	4b7b      	ldr	r3, [pc, #492]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4a7a      	ldr	r2, [pc, #488]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6213      	str	r3, [r2, #32]
 80014d4:	e02d      	b.n	8001532 <HAL_RCC_OscConfig+0x36e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x334>
 80014de:	4b76      	ldr	r3, [pc, #472]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4a75      	ldr	r2, [pc, #468]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	6213      	str	r3, [r2, #32]
 80014ea:	4b73      	ldr	r3, [pc, #460]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4a72      	ldr	r2, [pc, #456]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80014f0:	f023 0304 	bic.w	r3, r3, #4
 80014f4:	6213      	str	r3, [r2, #32]
 80014f6:	e01c      	b.n	8001532 <HAL_RCC_OscConfig+0x36e>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b05      	cmp	r3, #5
 80014fe:	d10c      	bne.n	800151a <HAL_RCC_OscConfig+0x356>
 8001500:	4b6d      	ldr	r3, [pc, #436]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4a6c      	ldr	r2, [pc, #432]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	6213      	str	r3, [r2, #32]
 800150c:	4b6a      	ldr	r3, [pc, #424]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4a69      	ldr	r2, [pc, #420]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6213      	str	r3, [r2, #32]
 8001518:	e00b      	b.n	8001532 <HAL_RCC_OscConfig+0x36e>
 800151a:	4b67      	ldr	r3, [pc, #412]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	4a66      	ldr	r2, [pc, #408]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	6213      	str	r3, [r2, #32]
 8001526:	4b64      	ldr	r3, [pc, #400]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4a63      	ldr	r2, [pc, #396]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800152c:	f023 0304 	bic.w	r3, r3, #4
 8001530:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d015      	beq.n	8001566 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153a:	f7ff f9ff 	bl	800093c <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001542:	f7ff f9fb 	bl	800093c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e0ab      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	4b57      	ldr	r3, [pc, #348]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0ee      	beq.n	8001542 <HAL_RCC_OscConfig+0x37e>
 8001564:	e014      	b.n	8001590 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7ff f9e9 	bl	800093c <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff f9e5 	bl	800093c <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4293      	cmp	r3, r2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e095      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001584:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ee      	bne.n	800156e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001590:	7dfb      	ldrb	r3, [r7, #23]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d105      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001596:	4b48      	ldr	r3, [pc, #288]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a47      	ldr	r2, [pc, #284]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800159c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 8081 	beq.w	80016ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d061      	beq.n	800167c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d146      	bne.n	800164e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c0:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <HAL_RCC_OscConfig+0x4fc>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff f9b9 	bl	800093c <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff f9b5 	bl	800093c <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e067      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d108      	bne.n	8001608 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015f6:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	492d      	ldr	r1, [pc, #180]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001608:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a19      	ldr	r1, [r3, #32]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	430b      	orrs	r3, r1
 800161a:	4927      	ldr	r1, [pc, #156]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HAL_RCC_OscConfig+0x4fc>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff f989 	bl	800093c <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162e:	f7ff f985 	bl	800093c <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e037      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x46a>
 800164c:	e02f      	b.n	80016ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <HAL_RCC_OscConfig+0x4fc>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff f972 	bl	800093c <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165c:	f7ff f96e 	bl	800093c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e020      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x498>
 800167a:	e018      	b.n	80016ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e013      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_OscConfig+0x4f4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	429a      	cmp	r2, r3
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40007000 	.word	0x40007000
 80016c0:	42420060 	.word	0x42420060

080016c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0d0      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d8:	4b6a      	ldr	r3, [pc, #424]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d910      	bls.n	8001708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b67      	ldr	r3, [pc, #412]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 0207 	bic.w	r2, r3, #7
 80016ee:	4965      	ldr	r1, [pc, #404]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0b8      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001720:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4a58      	ldr	r2, [pc, #352]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800172a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001742:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001744:	4b50      	ldr	r3, [pc, #320]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	494d      	ldr	r1, [pc, #308]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	4313      	orrs	r3, r2
 8001754:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d040      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d115      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e07f      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e073      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e06b      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f023 0203 	bic.w	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4936      	ldr	r1, [pc, #216]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b4:	f7ff f8c2 	bl	800093c <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017bc:	f7ff f8be 	bl	800093c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e053      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 020c 	and.w	r2, r3, #12
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d1eb      	bne.n	80017bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d210      	bcs.n	8001814 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 0207 	bic.w	r2, r3, #7
 80017fa:	4922      	ldr	r1, [pc, #136]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e032      	b.n	800187a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4916      	ldr	r1, [pc, #88]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	490e      	ldr	r1, [pc, #56]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001852:	f000 f821 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8001856:	4602      	mov	r2, r0
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	490a      	ldr	r1, [pc, #40]	; (800188c <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	5ccb      	ldrb	r3, [r1, r3]
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1cc>)
 800186c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1d0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f820 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40022000 	.word	0x40022000
 8001888:	40021000 	.word	0x40021000
 800188c:	08003034 	.word	0x08003034
 8001890:	20000024 	.word	0x20000024
 8001894:	20000028 	.word	0x20000028

08001898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001898:	b490      	push	{r4, r7}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018a0:	1d3c      	adds	r4, r7, #4
 80018a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018a8:	f240 2301 	movw	r3, #513	; 0x201
 80018ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_RCC_GetSysClockFreq+0xb4>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d002      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x40>
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d003      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x46>
 80018d6:	e02d      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018da:	623b      	str	r3, [r7, #32]
      break;
 80018dc:	e02d      	b.n	800193a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	0c9b      	lsrs	r3, r3, #18
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ea:	4413      	add	r3, r2
 80018ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_RCC_GetSysClockFreq+0xb4>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	0c5b      	lsrs	r3, r3, #17
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800190a:	4413      	add	r3, r2
 800190c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001910:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001916:	fb02 f203 	mul.w	r2, r2, r3
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
 8001922:	e004      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	623b      	str	r3, [r7, #32]
      break;
 8001932:	e002      	b.n	800193a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001936:	623b      	str	r3, [r7, #32]
      break;
 8001938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193a:	6a3b      	ldr	r3, [r7, #32]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3728      	adds	r7, #40	; 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bc90      	pop	{r4, r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	08003024 	.word	0x08003024
 800194c:	40021000 	.word	0x40021000
 8001950:	007a1200 	.word	0x007a1200
 8001954:	003d0900 	.word	0x003d0900

08001958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800195c:	4b02      	ldr	r3, [pc, #8]	; (8001968 <HAL_RCC_GetHCLKFreq+0x10>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	20000024 	.word	0x20000024

0800196c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001970:	f7ff fff2 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 8001974:	4602      	mov	r2, r0
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	4903      	ldr	r1, [pc, #12]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000
 8001990:	08003044 	.word	0x08003044

08001994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001998:	f7ff ffde 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	0adb      	lsrs	r3, r3, #11
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	4903      	ldr	r1, [pc, #12]	; (80019b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40021000 	.word	0x40021000
 80019b8:	08003044 	.word	0x08003044

080019bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <RCC_Delay+0x34>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <RCC_Delay+0x38>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0a5b      	lsrs	r3, r3, #9
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019d8:	bf00      	nop
  }
  while (Delay --);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1e5a      	subs	r2, r3, #1
 80019de:	60fa      	str	r2, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f9      	bne.n	80019d8 <RCC_Delay+0x1c>
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	20000024 	.word	0x20000024
 80019f4:	10624dd3 	.word	0x10624dd3

080019f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e04a      	b.n	8001aa0 <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d111      	bne.n	8001a3a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 fb32 	bl	8002088 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <HAL_UART_Init+0xb0>)
 8001a30:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2224      	movs	r2, #36	; 0x24
 8001a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a50:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fd26 	bl	80024a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a66:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a76:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a86:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2220      	movs	r2, #32
 8001a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	08000799 	.word	0x08000799

08001aac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b20      	cmp	r3, #32
 8001aca:	d17c      	bne.n	8001bc6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <HAL_UART_Transmit+0x2c>
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e075      	b.n	8001bc8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_UART_Transmit+0x3e>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e06e      	b.n	8001bc8 <HAL_UART_Transmit+0x11c>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2221      	movs	r2, #33	; 0x21
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b00:	f7fe ff1c 	bl	800093c <HAL_GetTick>
 8001b04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	88fa      	ldrh	r2, [r7, #6]
 8001b0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	88fa      	ldrh	r2, [r7, #6]
 8001b10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b1a:	d108      	bne.n	8001b2e <HAL_UART_Transmit+0x82>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d104      	bne.n	8001b2e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	e003      	b.n	8001b36 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b3e:	e02a      	b.n	8001b96 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2200      	movs	r2, #0
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fad2 	bl	80020f4 <UART_WaitOnFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e036      	b.n	8001bc8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10b      	bne.n	8001b78 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b6e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	3302      	adds	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	e007      	b.n	8001b88 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1cf      	bne.n	8001b40 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2140      	movs	r1, #64	; 0x40
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 faa2 	bl	80020f4 <UART_WaitOnFlagUntilTimeout>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e006      	b.n	8001bc8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bc6:	2302      	movs	r3, #2
  }
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d130      	bne.n	8001c4c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <HAL_UART_Transmit_IT+0x26>
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e029      	b.n	8001c4e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_UART_Transmit_IT+0x38>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e022      	b.n	8001c4e <HAL_UART_Transmit_IT+0x7e>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	88fa      	ldrh	r2, [r7, #6]
 8001c1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	88fa      	ldrh	r2, [r7, #6]
 8001c20:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2221      	movs	r2, #33	; 0x21
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c46:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e000      	b.n	8001c4e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001c4c:	2302      	movs	r3, #2
  }
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	4613      	mov	r3, r2
 8001c64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	d11d      	bne.n	8001cae <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <HAL_UART_Receive_IT+0x26>
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e016      	b.n	8001cb0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_UART_Receive_IT+0x38>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e00f      	b.n	8001cb0 <HAL_UART_Receive_IT+0x58>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 fa6f 	bl	8002188 <UART_Start_Receive_IT>
 8001caa:	4603      	mov	r3, r0
 8001cac:	e000      	b.n	8001cb0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001cae:	2302      	movs	r3, #2
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10d      	bne.n	8001d0a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_UART_IRQHandler+0x52>
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fb22 	bl	800234c <UART_Receive_IT>
      return;
 8001d08:	e180      	b.n	800200c <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80b4 	beq.w	8001e7a <HAL_UART_IRQHandler+0x1c2>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d105      	bne.n	8001d28 <HAL_UART_IRQHandler+0x70>
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80a9 	beq.w	8001e7a <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00a      	beq.n	8001d48 <HAL_UART_IRQHandler+0x90>
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f043 0201 	orr.w	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00a      	beq.n	8001d68 <HAL_UART_IRQHandler+0xb0>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f043 0202 	orr.w	r2, r3, #2
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <HAL_UART_IRQHandler+0xd0>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f043 0204 	orr.w	r2, r3, #4
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00f      	beq.n	8001db2 <HAL_UART_IRQHandler+0xfa>
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d104      	bne.n	8001da6 <HAL_UART_IRQHandler+0xee>
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f043 0208 	orr.w	r2, r3, #8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8123 	beq.w	8002002 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <HAL_UART_IRQHandler+0x11e>
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fabb 	bl	800234c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf14      	ite	ne
 8001de4:	2301      	movne	r3, #1
 8001de6:	2300      	moveq	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <HAL_UART_IRQHandler+0x146>
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d033      	beq.n	8001e66 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f9fb 	bl	80021fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d024      	beq.n	8001e5c <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e20:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d013      	beq.n	8001e52 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	4a79      	ldr	r2, [pc, #484]	; (8002014 <HAL_UART_IRQHandler+0x35c>)
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fef6 	bl	8000c28 <HAL_DMA_Abort_IT>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d019      	beq.n	8001e76 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e50:	e011      	b.n	8001e76 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e5a:	e00c      	b.n	8001e76 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e64:	e007      	b.n	8001e76 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001e74:	e0c5      	b.n	8002002 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e76:	bf00      	nop
    return;
 8001e78:	e0c3      	b.n	8002002 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	f040 80a3 	bne.w	8001fca <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 809d 	beq.w	8001fca <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8097 	beq.w	8001fca <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d04f      	beq.n	8001f60 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001eca:	8a3b      	ldrh	r3, [r7, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 809a 	beq.w	8002006 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001ed6:	8a3a      	ldrh	r2, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f080 8094 	bcs.w	8002006 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	8a3a      	ldrh	r2, [r7, #16]
 8001ee2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	d02b      	beq.n	8001f46 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001efc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f1c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2220      	movs	r2, #32
 8001f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0210 	bic.w	r2, r2, #16
 8001f3a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fe36 	bl	8000bb2 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8001f52:	b292      	uxth	r2, r2
 8001f54:	1a8a      	subs	r2, r1, r2
 8001f56:	b292      	uxth	r2, r2
 8001f58:	4611      	mov	r1, r2
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8001f5e:	e052      	b.n	8002006 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d048      	beq.n	800200a <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8001f78:	8a7b      	ldrh	r3, [r7, #18]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d045      	beq.n	800200a <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f8c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695a      	ldr	r2, [r3, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0201 	bic.w	r2, r2, #1
 8001f9c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0210 	bic.w	r2, r2, #16
 8001fba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fc0:	8a7a      	ldrh	r2, [r7, #18]
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8001fc8:	e01f      	b.n	800200a <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_UART_IRQHandler+0x32e>
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f94c 	bl	800227c <UART_Transmit_IT>
    return;
 8001fe4:	e012      	b.n	800200c <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00d      	beq.n	800200c <HAL_UART_IRQHandler+0x354>
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f98d 	bl	800231a <UART_EndTransmit_IT>
    return;
 8002000:	e004      	b.n	800200c <HAL_UART_IRQHandler+0x354>
    return;
 8002002:	bf00      	nop
 8002004:	e002      	b.n	800200c <HAL_UART_IRQHandler+0x354>
      return;
 8002006:	bf00      	nop
 8002008:	e000      	b.n	800200c <HAL_UART_IRQHandler+0x354>
      return;
 800200a:	bf00      	nop
  }
}
 800200c:	3728      	adds	r7, #40	; 0x28
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	08002253 	.word	0x08002253

08002018 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <UART_InitCallbacksToDefault+0x48>)
 8002094:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <UART_InitCallbacksToDefault+0x4c>)
 800209a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <UART_InitCallbacksToDefault+0x50>)
 80020a0:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <UART_InitCallbacksToDefault+0x54>)
 80020a6:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <UART_InitCallbacksToDefault+0x58>)
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <UART_InitCallbacksToDefault+0x5c>)
 80020b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <UART_InitCallbacksToDefault+0x60>)
 80020b8:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <UART_InitCallbacksToDefault+0x64>)
 80020be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <UART_InitCallbacksToDefault+0x68>)
 80020c4:	669a      	str	r2, [r3, #104]	; 0x68

}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	08002019 	.word	0x08002019
 80020d4:	08000369 	.word	0x08000369
 80020d8:	0800202b 	.word	0x0800202b
 80020dc:	08000385 	.word	0x08000385
 80020e0:	080003a1 	.word	0x080003a1
 80020e4:	0800203d 	.word	0x0800203d
 80020e8:	0800204f 	.word	0x0800204f
 80020ec:	08002061 	.word	0x08002061
 80020f0:	08002073 	.word	0x08002073

080020f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002104:	e02c      	b.n	8002160 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800210c:	d028      	beq.n	8002160 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <UART_WaitOnFlagUntilTimeout+0x30>
 8002114:	f7fe fc12 	bl	800093c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	429a      	cmp	r2, r3
 8002122:	d21d      	bcs.n	8002160 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002132:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e00f      	b.n	8002180 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4013      	ands	r3, r2
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	429a      	cmp	r2, r3
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	429a      	cmp	r2, r3
 800217c:	d0c3      	beq.n	8002106 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	4613      	mov	r3, r2
 8002194:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	88fa      	ldrh	r2, [r7, #6]
 80021a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	88fa      	ldrh	r2, [r7, #6]
 80021a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2222      	movs	r2, #34	; 0x22
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021cc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0201 	orr.w	r2, r2, #1
 80021dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0220 	orr.w	r2, r2, #32
 80021ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002210:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0201 	bic.w	r2, r2, #1
 8002220:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0210 	bic.w	r2, r2, #16
 8002238:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2220      	movs	r2, #32
 800223e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b21      	cmp	r3, #33	; 0x21
 800228e:	d13e      	bne.n	800230e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002298:	d114      	bne.n	80022c4 <UART_Transmit_IT+0x48>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d110      	bne.n	80022c4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	1c9a      	adds	r2, r3, #2
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	621a      	str	r2, [r3, #32]
 80022c2:	e008      	b.n	80022d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	1c59      	adds	r1, r3, #1
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6211      	str	r1, [r2, #32]
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29b      	uxth	r3, r3
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4619      	mov	r1, r3
 80022e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10f      	bne.n	800230a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002308:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800230e:	2302      	movs	r3, #2
  }
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002330:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b22      	cmp	r3, #34	; 0x22
 800235e:	f040 809b 	bne.w	8002498 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236a:	d117      	bne.n	800239c <UART_Receive_IT+0x50>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d113      	bne.n	800239c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238a:	b29a      	uxth	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	1c9a      	adds	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	629a      	str	r2, [r3, #40]	; 0x28
 800239a:	e026      	b.n	80023ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ae:	d007      	beq.n	80023c0 <UART_Receive_IT+0x74>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <UART_Receive_IT+0x82>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d106      	bne.n	80023ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	e008      	b.n	80023e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4619      	mov	r1, r3
 80023f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d14a      	bne.n	8002494 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0220 	bic.w	r2, r2, #32
 800240c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800241c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0201 	bic.w	r2, r2, #1
 800242c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	2b01      	cmp	r3, #1
 800243c:	d124      	bne.n	8002488 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0210 	bic.w	r2, r2, #16
 8002452:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b10      	cmp	r3, #16
 8002460:	d10a      	bne.n	8002478 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002480:	4611      	mov	r1, r2
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
 8002486:	e003      	b.n	8002490 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	e002      	b.n	800249a <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	e000      	b.n	800249a <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8002498:	2302      	movs	r3, #2
  }
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024de:	f023 030c 	bic.w	r3, r3, #12
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	430b      	orrs	r3, r1
 80024ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2c      	ldr	r2, [pc, #176]	; (80025b8 <UART_SetConfig+0x114>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d103      	bne.n	8002514 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800250c:	f7ff fa42 	bl	8001994 <HAL_RCC_GetPCLK2Freq>
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	e002      	b.n	800251a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002514:	f7ff fa2a 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 8002518:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	009a      	lsls	r2, r3, #2
 8002524:	441a      	add	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	4a22      	ldr	r2, [pc, #136]	; (80025bc <UART_SetConfig+0x118>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	0119      	lsls	r1, r3, #4
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	009a      	lsls	r2, r3, #2
 8002544:	441a      	add	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <UART_SetConfig+0x118>)
 8002552:	fba3 0302 	umull	r0, r3, r3, r2
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	2064      	movs	r0, #100	; 0x64
 800255a:	fb00 f303 	mul.w	r3, r0, r3
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	3332      	adds	r3, #50	; 0x32
 8002564:	4a15      	ldr	r2, [pc, #84]	; (80025bc <UART_SetConfig+0x118>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002570:	4419      	add	r1, r3
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	009a      	lsls	r2, r3, #2
 800257c:	441a      	add	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	fbb2 f2f3 	udiv	r2, r2, r3
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <UART_SetConfig+0x118>)
 800258a:	fba3 0302 	umull	r0, r3, r3, r2
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	2064      	movs	r0, #100	; 0x64
 8002592:	fb00 f303 	mul.w	r3, r0, r3
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	3332      	adds	r3, #50	; 0x32
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <UART_SetConfig+0x118>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	f003 020f 	and.w	r2, r3, #15
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	440a      	add	r2, r1
 80025ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40013800 	.word	0x40013800
 80025bc:	51eb851f 	.word	0x51eb851f

080025c0 <__delay_us>:
  函数功能: 延时1us
          设置系统时钟为72MHz, SysTick定时器时钟频率为“72MHz / 8 = 9MHz”
          SysTick是一个“24”位的递减计数器， SysTick->LOAD为自动重装载计数器
*******************************************************************************/
void __delay_us(uint32_t nus)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
        uint32_t status;
        SysTick->LOAD = 9 * nus;        //设置自动重装载寄存器的数值
 80025c8:	4911      	ldr	r1, [pc, #68]	; (8002610 <__delay_us+0x50>)
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
        SysTick->VAL  = 0x00;           //清空计数器，使用“/8”时钟源
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <__delay_us+0x50>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
        SysTick->CTRL = 0x01;           //打开SysTick定时器
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <__delay_us+0x50>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]
        do {                            //获取SysTick定时器的状态
                status = SysTick->CTRL;
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <__delay_us+0x50>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]
        } while ((status & 0x01) && (!(status & (1<<16))));
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <__delay_us+0x3a>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f2      	beq.n	80025e0 <__delay_us+0x20>
        SysTick->CTRL = 0x00;           //关闭SysTick定时器
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <__delay_us+0x50>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
        SysTick->VAL  = 0x00;           //清空计数器
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <__delay_us+0x50>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
}
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	e000e010 	.word	0xe000e010

08002614 <__errno>:
 8002614:	4b01      	ldr	r3, [pc, #4]	; (800261c <__errno+0x8>)
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000030 	.word	0x20000030

08002620 <__libc_init_array>:
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	2600      	movs	r6, #0
 8002624:	4d0c      	ldr	r5, [pc, #48]	; (8002658 <__libc_init_array+0x38>)
 8002626:	4c0d      	ldr	r4, [pc, #52]	; (800265c <__libc_init_array+0x3c>)
 8002628:	1b64      	subs	r4, r4, r5
 800262a:	10a4      	asrs	r4, r4, #2
 800262c:	42a6      	cmp	r6, r4
 800262e:	d109      	bne.n	8002644 <__libc_init_array+0x24>
 8002630:	f000 fce4 	bl	8002ffc <_init>
 8002634:	2600      	movs	r6, #0
 8002636:	4d0a      	ldr	r5, [pc, #40]	; (8002660 <__libc_init_array+0x40>)
 8002638:	4c0a      	ldr	r4, [pc, #40]	; (8002664 <__libc_init_array+0x44>)
 800263a:	1b64      	subs	r4, r4, r5
 800263c:	10a4      	asrs	r4, r4, #2
 800263e:	42a6      	cmp	r6, r4
 8002640:	d105      	bne.n	800264e <__libc_init_array+0x2e>
 8002642:	bd70      	pop	{r4, r5, r6, pc}
 8002644:	f855 3b04 	ldr.w	r3, [r5], #4
 8002648:	4798      	blx	r3
 800264a:	3601      	adds	r6, #1
 800264c:	e7ee      	b.n	800262c <__libc_init_array+0xc>
 800264e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002652:	4798      	blx	r3
 8002654:	3601      	adds	r6, #1
 8002656:	e7f2      	b.n	800263e <__libc_init_array+0x1e>
 8002658:	080030b0 	.word	0x080030b0
 800265c:	080030b0 	.word	0x080030b0
 8002660:	080030b0 	.word	0x080030b0
 8002664:	080030b4 	.word	0x080030b4

08002668 <memset>:
 8002668:	4603      	mov	r3, r0
 800266a:	4402      	add	r2, r0
 800266c:	4293      	cmp	r3, r2
 800266e:	d100      	bne.n	8002672 <memset+0xa>
 8002670:	4770      	bx	lr
 8002672:	f803 1b01 	strb.w	r1, [r3], #1
 8002676:	e7f9      	b.n	800266c <memset+0x4>

08002678 <_puts_r>:
 8002678:	b570      	push	{r4, r5, r6, lr}
 800267a:	460e      	mov	r6, r1
 800267c:	4605      	mov	r5, r0
 800267e:	b118      	cbz	r0, 8002688 <_puts_r+0x10>
 8002680:	6983      	ldr	r3, [r0, #24]
 8002682:	b90b      	cbnz	r3, 8002688 <_puts_r+0x10>
 8002684:	f000 fa48 	bl	8002b18 <__sinit>
 8002688:	69ab      	ldr	r3, [r5, #24]
 800268a:	68ac      	ldr	r4, [r5, #8]
 800268c:	b913      	cbnz	r3, 8002694 <_puts_r+0x1c>
 800268e:	4628      	mov	r0, r5
 8002690:	f000 fa42 	bl	8002b18 <__sinit>
 8002694:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <_puts_r+0xd0>)
 8002696:	429c      	cmp	r4, r3
 8002698:	d120      	bne.n	80026dc <_puts_r+0x64>
 800269a:	686c      	ldr	r4, [r5, #4]
 800269c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800269e:	07db      	lsls	r3, r3, #31
 80026a0:	d405      	bmi.n	80026ae <_puts_r+0x36>
 80026a2:	89a3      	ldrh	r3, [r4, #12]
 80026a4:	0598      	lsls	r0, r3, #22
 80026a6:	d402      	bmi.n	80026ae <_puts_r+0x36>
 80026a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026aa:	f000 fad3 	bl	8002c54 <__retarget_lock_acquire_recursive>
 80026ae:	89a3      	ldrh	r3, [r4, #12]
 80026b0:	0719      	lsls	r1, r3, #28
 80026b2:	d51d      	bpl.n	80026f0 <_puts_r+0x78>
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	b1db      	cbz	r3, 80026f0 <_puts_r+0x78>
 80026b8:	3e01      	subs	r6, #1
 80026ba:	68a3      	ldr	r3, [r4, #8]
 80026bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80026c0:	3b01      	subs	r3, #1
 80026c2:	60a3      	str	r3, [r4, #8]
 80026c4:	bb39      	cbnz	r1, 8002716 <_puts_r+0x9e>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da38      	bge.n	800273c <_puts_r+0xc4>
 80026ca:	4622      	mov	r2, r4
 80026cc:	210a      	movs	r1, #10
 80026ce:	4628      	mov	r0, r5
 80026d0:	f000 f848 	bl	8002764 <__swbuf_r>
 80026d4:	3001      	adds	r0, #1
 80026d6:	d011      	beq.n	80026fc <_puts_r+0x84>
 80026d8:	250a      	movs	r5, #10
 80026da:	e011      	b.n	8002700 <_puts_r+0x88>
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <_puts_r+0xd4>)
 80026de:	429c      	cmp	r4, r3
 80026e0:	d101      	bne.n	80026e6 <_puts_r+0x6e>
 80026e2:	68ac      	ldr	r4, [r5, #8]
 80026e4:	e7da      	b.n	800269c <_puts_r+0x24>
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <_puts_r+0xd8>)
 80026e8:	429c      	cmp	r4, r3
 80026ea:	bf08      	it	eq
 80026ec:	68ec      	ldreq	r4, [r5, #12]
 80026ee:	e7d5      	b.n	800269c <_puts_r+0x24>
 80026f0:	4621      	mov	r1, r4
 80026f2:	4628      	mov	r0, r5
 80026f4:	f000 f888 	bl	8002808 <__swsetup_r>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d0dd      	beq.n	80026b8 <_puts_r+0x40>
 80026fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002702:	07da      	lsls	r2, r3, #31
 8002704:	d405      	bmi.n	8002712 <_puts_r+0x9a>
 8002706:	89a3      	ldrh	r3, [r4, #12]
 8002708:	059b      	lsls	r3, r3, #22
 800270a:	d402      	bmi.n	8002712 <_puts_r+0x9a>
 800270c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800270e:	f000 faa2 	bl	8002c56 <__retarget_lock_release_recursive>
 8002712:	4628      	mov	r0, r5
 8002714:	bd70      	pop	{r4, r5, r6, pc}
 8002716:	2b00      	cmp	r3, #0
 8002718:	da04      	bge.n	8002724 <_puts_r+0xac>
 800271a:	69a2      	ldr	r2, [r4, #24]
 800271c:	429a      	cmp	r2, r3
 800271e:	dc06      	bgt.n	800272e <_puts_r+0xb6>
 8002720:	290a      	cmp	r1, #10
 8002722:	d004      	beq.n	800272e <_puts_r+0xb6>
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	6022      	str	r2, [r4, #0]
 800272a:	7019      	strb	r1, [r3, #0]
 800272c:	e7c5      	b.n	80026ba <_puts_r+0x42>
 800272e:	4622      	mov	r2, r4
 8002730:	4628      	mov	r0, r5
 8002732:	f000 f817 	bl	8002764 <__swbuf_r>
 8002736:	3001      	adds	r0, #1
 8002738:	d1bf      	bne.n	80026ba <_puts_r+0x42>
 800273a:	e7df      	b.n	80026fc <_puts_r+0x84>
 800273c:	250a      	movs	r5, #10
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	6022      	str	r2, [r4, #0]
 8002744:	701d      	strb	r5, [r3, #0]
 8002746:	e7db      	b.n	8002700 <_puts_r+0x88>
 8002748:	08003070 	.word	0x08003070
 800274c:	08003090 	.word	0x08003090
 8002750:	08003050 	.word	0x08003050

08002754 <puts>:
 8002754:	4b02      	ldr	r3, [pc, #8]	; (8002760 <puts+0xc>)
 8002756:	4601      	mov	r1, r0
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	f7ff bf8d 	b.w	8002678 <_puts_r>
 800275e:	bf00      	nop
 8002760:	20000030 	.word	0x20000030

08002764 <__swbuf_r>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	460e      	mov	r6, r1
 8002768:	4614      	mov	r4, r2
 800276a:	4605      	mov	r5, r0
 800276c:	b118      	cbz	r0, 8002776 <__swbuf_r+0x12>
 800276e:	6983      	ldr	r3, [r0, #24]
 8002770:	b90b      	cbnz	r3, 8002776 <__swbuf_r+0x12>
 8002772:	f000 f9d1 	bl	8002b18 <__sinit>
 8002776:	4b21      	ldr	r3, [pc, #132]	; (80027fc <__swbuf_r+0x98>)
 8002778:	429c      	cmp	r4, r3
 800277a:	d12b      	bne.n	80027d4 <__swbuf_r+0x70>
 800277c:	686c      	ldr	r4, [r5, #4]
 800277e:	69a3      	ldr	r3, [r4, #24]
 8002780:	60a3      	str	r3, [r4, #8]
 8002782:	89a3      	ldrh	r3, [r4, #12]
 8002784:	071a      	lsls	r2, r3, #28
 8002786:	d52f      	bpl.n	80027e8 <__swbuf_r+0x84>
 8002788:	6923      	ldr	r3, [r4, #16]
 800278a:	b36b      	cbz	r3, 80027e8 <__swbuf_r+0x84>
 800278c:	6923      	ldr	r3, [r4, #16]
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	b2f6      	uxtb	r6, r6
 8002792:	1ac0      	subs	r0, r0, r3
 8002794:	6963      	ldr	r3, [r4, #20]
 8002796:	4637      	mov	r7, r6
 8002798:	4283      	cmp	r3, r0
 800279a:	dc04      	bgt.n	80027a6 <__swbuf_r+0x42>
 800279c:	4621      	mov	r1, r4
 800279e:	4628      	mov	r0, r5
 80027a0:	f000 f926 	bl	80029f0 <_fflush_r>
 80027a4:	bb30      	cbnz	r0, 80027f4 <__swbuf_r+0x90>
 80027a6:	68a3      	ldr	r3, [r4, #8]
 80027a8:	3001      	adds	r0, #1
 80027aa:	3b01      	subs	r3, #1
 80027ac:	60a3      	str	r3, [r4, #8]
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	6022      	str	r2, [r4, #0]
 80027b4:	701e      	strb	r6, [r3, #0]
 80027b6:	6963      	ldr	r3, [r4, #20]
 80027b8:	4283      	cmp	r3, r0
 80027ba:	d004      	beq.n	80027c6 <__swbuf_r+0x62>
 80027bc:	89a3      	ldrh	r3, [r4, #12]
 80027be:	07db      	lsls	r3, r3, #31
 80027c0:	d506      	bpl.n	80027d0 <__swbuf_r+0x6c>
 80027c2:	2e0a      	cmp	r6, #10
 80027c4:	d104      	bne.n	80027d0 <__swbuf_r+0x6c>
 80027c6:	4621      	mov	r1, r4
 80027c8:	4628      	mov	r0, r5
 80027ca:	f000 f911 	bl	80029f0 <_fflush_r>
 80027ce:	b988      	cbnz	r0, 80027f4 <__swbuf_r+0x90>
 80027d0:	4638      	mov	r0, r7
 80027d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <__swbuf_r+0x9c>)
 80027d6:	429c      	cmp	r4, r3
 80027d8:	d101      	bne.n	80027de <__swbuf_r+0x7a>
 80027da:	68ac      	ldr	r4, [r5, #8]
 80027dc:	e7cf      	b.n	800277e <__swbuf_r+0x1a>
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <__swbuf_r+0xa0>)
 80027e0:	429c      	cmp	r4, r3
 80027e2:	bf08      	it	eq
 80027e4:	68ec      	ldreq	r4, [r5, #12]
 80027e6:	e7ca      	b.n	800277e <__swbuf_r+0x1a>
 80027e8:	4621      	mov	r1, r4
 80027ea:	4628      	mov	r0, r5
 80027ec:	f000 f80c 	bl	8002808 <__swsetup_r>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d0cb      	beq.n	800278c <__swbuf_r+0x28>
 80027f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80027f8:	e7ea      	b.n	80027d0 <__swbuf_r+0x6c>
 80027fa:	bf00      	nop
 80027fc:	08003070 	.word	0x08003070
 8002800:	08003090 	.word	0x08003090
 8002804:	08003050 	.word	0x08003050

08002808 <__swsetup_r>:
 8002808:	4b32      	ldr	r3, [pc, #200]	; (80028d4 <__swsetup_r+0xcc>)
 800280a:	b570      	push	{r4, r5, r6, lr}
 800280c:	681d      	ldr	r5, [r3, #0]
 800280e:	4606      	mov	r6, r0
 8002810:	460c      	mov	r4, r1
 8002812:	b125      	cbz	r5, 800281e <__swsetup_r+0x16>
 8002814:	69ab      	ldr	r3, [r5, #24]
 8002816:	b913      	cbnz	r3, 800281e <__swsetup_r+0x16>
 8002818:	4628      	mov	r0, r5
 800281a:	f000 f97d 	bl	8002b18 <__sinit>
 800281e:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <__swsetup_r+0xd0>)
 8002820:	429c      	cmp	r4, r3
 8002822:	d10f      	bne.n	8002844 <__swsetup_r+0x3c>
 8002824:	686c      	ldr	r4, [r5, #4]
 8002826:	89a3      	ldrh	r3, [r4, #12]
 8002828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800282c:	0719      	lsls	r1, r3, #28
 800282e:	d42c      	bmi.n	800288a <__swsetup_r+0x82>
 8002830:	06dd      	lsls	r5, r3, #27
 8002832:	d411      	bmi.n	8002858 <__swsetup_r+0x50>
 8002834:	2309      	movs	r3, #9
 8002836:	6033      	str	r3, [r6, #0]
 8002838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800283c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002840:	81a3      	strh	r3, [r4, #12]
 8002842:	e03e      	b.n	80028c2 <__swsetup_r+0xba>
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <__swsetup_r+0xd4>)
 8002846:	429c      	cmp	r4, r3
 8002848:	d101      	bne.n	800284e <__swsetup_r+0x46>
 800284a:	68ac      	ldr	r4, [r5, #8]
 800284c:	e7eb      	b.n	8002826 <__swsetup_r+0x1e>
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <__swsetup_r+0xd8>)
 8002850:	429c      	cmp	r4, r3
 8002852:	bf08      	it	eq
 8002854:	68ec      	ldreq	r4, [r5, #12]
 8002856:	e7e6      	b.n	8002826 <__swsetup_r+0x1e>
 8002858:	0758      	lsls	r0, r3, #29
 800285a:	d512      	bpl.n	8002882 <__swsetup_r+0x7a>
 800285c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800285e:	b141      	cbz	r1, 8002872 <__swsetup_r+0x6a>
 8002860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002864:	4299      	cmp	r1, r3
 8002866:	d002      	beq.n	800286e <__swsetup_r+0x66>
 8002868:	4630      	mov	r0, r6
 800286a:	f000 fa59 	bl	8002d20 <_free_r>
 800286e:	2300      	movs	r3, #0
 8002870:	6363      	str	r3, [r4, #52]	; 0x34
 8002872:	89a3      	ldrh	r3, [r4, #12]
 8002874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002878:	81a3      	strh	r3, [r4, #12]
 800287a:	2300      	movs	r3, #0
 800287c:	6063      	str	r3, [r4, #4]
 800287e:	6923      	ldr	r3, [r4, #16]
 8002880:	6023      	str	r3, [r4, #0]
 8002882:	89a3      	ldrh	r3, [r4, #12]
 8002884:	f043 0308 	orr.w	r3, r3, #8
 8002888:	81a3      	strh	r3, [r4, #12]
 800288a:	6923      	ldr	r3, [r4, #16]
 800288c:	b94b      	cbnz	r3, 80028a2 <__swsetup_r+0x9a>
 800288e:	89a3      	ldrh	r3, [r4, #12]
 8002890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002898:	d003      	beq.n	80028a2 <__swsetup_r+0x9a>
 800289a:	4621      	mov	r1, r4
 800289c:	4630      	mov	r0, r6
 800289e:	f000 f9ff 	bl	8002ca0 <__smakebuf_r>
 80028a2:	89a0      	ldrh	r0, [r4, #12]
 80028a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028a8:	f010 0301 	ands.w	r3, r0, #1
 80028ac:	d00a      	beq.n	80028c4 <__swsetup_r+0xbc>
 80028ae:	2300      	movs	r3, #0
 80028b0:	60a3      	str	r3, [r4, #8]
 80028b2:	6963      	ldr	r3, [r4, #20]
 80028b4:	425b      	negs	r3, r3
 80028b6:	61a3      	str	r3, [r4, #24]
 80028b8:	6923      	ldr	r3, [r4, #16]
 80028ba:	b943      	cbnz	r3, 80028ce <__swsetup_r+0xc6>
 80028bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80028c0:	d1ba      	bne.n	8002838 <__swsetup_r+0x30>
 80028c2:	bd70      	pop	{r4, r5, r6, pc}
 80028c4:	0781      	lsls	r1, r0, #30
 80028c6:	bf58      	it	pl
 80028c8:	6963      	ldrpl	r3, [r4, #20]
 80028ca:	60a3      	str	r3, [r4, #8]
 80028cc:	e7f4      	b.n	80028b8 <__swsetup_r+0xb0>
 80028ce:	2000      	movs	r0, #0
 80028d0:	e7f7      	b.n	80028c2 <__swsetup_r+0xba>
 80028d2:	bf00      	nop
 80028d4:	20000030 	.word	0x20000030
 80028d8:	08003070 	.word	0x08003070
 80028dc:	08003090 	.word	0x08003090
 80028e0:	08003050 	.word	0x08003050

080028e4 <__sflush_r>:
 80028e4:	898a      	ldrh	r2, [r1, #12]
 80028e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ea:	4605      	mov	r5, r0
 80028ec:	0710      	lsls	r0, r2, #28
 80028ee:	460c      	mov	r4, r1
 80028f0:	d458      	bmi.n	80029a4 <__sflush_r+0xc0>
 80028f2:	684b      	ldr	r3, [r1, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	dc05      	bgt.n	8002904 <__sflush_r+0x20>
 80028f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	dc02      	bgt.n	8002904 <__sflush_r+0x20>
 80028fe:	2000      	movs	r0, #0
 8002900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002906:	2e00      	cmp	r6, #0
 8002908:	d0f9      	beq.n	80028fe <__sflush_r+0x1a>
 800290a:	2300      	movs	r3, #0
 800290c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002910:	682f      	ldr	r7, [r5, #0]
 8002912:	602b      	str	r3, [r5, #0]
 8002914:	d032      	beq.n	800297c <__sflush_r+0x98>
 8002916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002918:	89a3      	ldrh	r3, [r4, #12]
 800291a:	075a      	lsls	r2, r3, #29
 800291c:	d505      	bpl.n	800292a <__sflush_r+0x46>
 800291e:	6863      	ldr	r3, [r4, #4]
 8002920:	1ac0      	subs	r0, r0, r3
 8002922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002924:	b10b      	cbz	r3, 800292a <__sflush_r+0x46>
 8002926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002928:	1ac0      	subs	r0, r0, r3
 800292a:	2300      	movs	r3, #0
 800292c:	4602      	mov	r2, r0
 800292e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002930:	4628      	mov	r0, r5
 8002932:	6a21      	ldr	r1, [r4, #32]
 8002934:	47b0      	blx	r6
 8002936:	1c43      	adds	r3, r0, #1
 8002938:	89a3      	ldrh	r3, [r4, #12]
 800293a:	d106      	bne.n	800294a <__sflush_r+0x66>
 800293c:	6829      	ldr	r1, [r5, #0]
 800293e:	291d      	cmp	r1, #29
 8002940:	d82c      	bhi.n	800299c <__sflush_r+0xb8>
 8002942:	4a2a      	ldr	r2, [pc, #168]	; (80029ec <__sflush_r+0x108>)
 8002944:	40ca      	lsrs	r2, r1
 8002946:	07d6      	lsls	r6, r2, #31
 8002948:	d528      	bpl.n	800299c <__sflush_r+0xb8>
 800294a:	2200      	movs	r2, #0
 800294c:	6062      	str	r2, [r4, #4]
 800294e:	6922      	ldr	r2, [r4, #16]
 8002950:	04d9      	lsls	r1, r3, #19
 8002952:	6022      	str	r2, [r4, #0]
 8002954:	d504      	bpl.n	8002960 <__sflush_r+0x7c>
 8002956:	1c42      	adds	r2, r0, #1
 8002958:	d101      	bne.n	800295e <__sflush_r+0x7a>
 800295a:	682b      	ldr	r3, [r5, #0]
 800295c:	b903      	cbnz	r3, 8002960 <__sflush_r+0x7c>
 800295e:	6560      	str	r0, [r4, #84]	; 0x54
 8002960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002962:	602f      	str	r7, [r5, #0]
 8002964:	2900      	cmp	r1, #0
 8002966:	d0ca      	beq.n	80028fe <__sflush_r+0x1a>
 8002968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800296c:	4299      	cmp	r1, r3
 800296e:	d002      	beq.n	8002976 <__sflush_r+0x92>
 8002970:	4628      	mov	r0, r5
 8002972:	f000 f9d5 	bl	8002d20 <_free_r>
 8002976:	2000      	movs	r0, #0
 8002978:	6360      	str	r0, [r4, #52]	; 0x34
 800297a:	e7c1      	b.n	8002900 <__sflush_r+0x1c>
 800297c:	6a21      	ldr	r1, [r4, #32]
 800297e:	2301      	movs	r3, #1
 8002980:	4628      	mov	r0, r5
 8002982:	47b0      	blx	r6
 8002984:	1c41      	adds	r1, r0, #1
 8002986:	d1c7      	bne.n	8002918 <__sflush_r+0x34>
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0c4      	beq.n	8002918 <__sflush_r+0x34>
 800298e:	2b1d      	cmp	r3, #29
 8002990:	d001      	beq.n	8002996 <__sflush_r+0xb2>
 8002992:	2b16      	cmp	r3, #22
 8002994:	d101      	bne.n	800299a <__sflush_r+0xb6>
 8002996:	602f      	str	r7, [r5, #0]
 8002998:	e7b1      	b.n	80028fe <__sflush_r+0x1a>
 800299a:	89a3      	ldrh	r3, [r4, #12]
 800299c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a0:	81a3      	strh	r3, [r4, #12]
 80029a2:	e7ad      	b.n	8002900 <__sflush_r+0x1c>
 80029a4:	690f      	ldr	r7, [r1, #16]
 80029a6:	2f00      	cmp	r7, #0
 80029a8:	d0a9      	beq.n	80028fe <__sflush_r+0x1a>
 80029aa:	0793      	lsls	r3, r2, #30
 80029ac:	bf18      	it	ne
 80029ae:	2300      	movne	r3, #0
 80029b0:	680e      	ldr	r6, [r1, #0]
 80029b2:	bf08      	it	eq
 80029b4:	694b      	ldreq	r3, [r1, #20]
 80029b6:	eba6 0807 	sub.w	r8, r6, r7
 80029ba:	600f      	str	r7, [r1, #0]
 80029bc:	608b      	str	r3, [r1, #8]
 80029be:	f1b8 0f00 	cmp.w	r8, #0
 80029c2:	dd9c      	ble.n	80028fe <__sflush_r+0x1a>
 80029c4:	4643      	mov	r3, r8
 80029c6:	463a      	mov	r2, r7
 80029c8:	4628      	mov	r0, r5
 80029ca:	6a21      	ldr	r1, [r4, #32]
 80029cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80029ce:	47b0      	blx	r6
 80029d0:	2800      	cmp	r0, #0
 80029d2:	dc06      	bgt.n	80029e2 <__sflush_r+0xfe>
 80029d4:	89a3      	ldrh	r3, [r4, #12]
 80029d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029de:	81a3      	strh	r3, [r4, #12]
 80029e0:	e78e      	b.n	8002900 <__sflush_r+0x1c>
 80029e2:	4407      	add	r7, r0
 80029e4:	eba8 0800 	sub.w	r8, r8, r0
 80029e8:	e7e9      	b.n	80029be <__sflush_r+0xda>
 80029ea:	bf00      	nop
 80029ec:	20400001 	.word	0x20400001

080029f0 <_fflush_r>:
 80029f0:	b538      	push	{r3, r4, r5, lr}
 80029f2:	690b      	ldr	r3, [r1, #16]
 80029f4:	4605      	mov	r5, r0
 80029f6:	460c      	mov	r4, r1
 80029f8:	b913      	cbnz	r3, 8002a00 <_fflush_r+0x10>
 80029fa:	2500      	movs	r5, #0
 80029fc:	4628      	mov	r0, r5
 80029fe:	bd38      	pop	{r3, r4, r5, pc}
 8002a00:	b118      	cbz	r0, 8002a0a <_fflush_r+0x1a>
 8002a02:	6983      	ldr	r3, [r0, #24]
 8002a04:	b90b      	cbnz	r3, 8002a0a <_fflush_r+0x1a>
 8002a06:	f000 f887 	bl	8002b18 <__sinit>
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <_fflush_r+0x6c>)
 8002a0c:	429c      	cmp	r4, r3
 8002a0e:	d11b      	bne.n	8002a48 <_fflush_r+0x58>
 8002a10:	686c      	ldr	r4, [r5, #4]
 8002a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0ef      	beq.n	80029fa <_fflush_r+0xa>
 8002a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a1c:	07d0      	lsls	r0, r2, #31
 8002a1e:	d404      	bmi.n	8002a2a <_fflush_r+0x3a>
 8002a20:	0599      	lsls	r1, r3, #22
 8002a22:	d402      	bmi.n	8002a2a <_fflush_r+0x3a>
 8002a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a26:	f000 f915 	bl	8002c54 <__retarget_lock_acquire_recursive>
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	f7ff ff59 	bl	80028e4 <__sflush_r>
 8002a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a34:	4605      	mov	r5, r0
 8002a36:	07da      	lsls	r2, r3, #31
 8002a38:	d4e0      	bmi.n	80029fc <_fflush_r+0xc>
 8002a3a:	89a3      	ldrh	r3, [r4, #12]
 8002a3c:	059b      	lsls	r3, r3, #22
 8002a3e:	d4dd      	bmi.n	80029fc <_fflush_r+0xc>
 8002a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a42:	f000 f908 	bl	8002c56 <__retarget_lock_release_recursive>
 8002a46:	e7d9      	b.n	80029fc <_fflush_r+0xc>
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <_fflush_r+0x70>)
 8002a4a:	429c      	cmp	r4, r3
 8002a4c:	d101      	bne.n	8002a52 <_fflush_r+0x62>
 8002a4e:	68ac      	ldr	r4, [r5, #8]
 8002a50:	e7df      	b.n	8002a12 <_fflush_r+0x22>
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <_fflush_r+0x74>)
 8002a54:	429c      	cmp	r4, r3
 8002a56:	bf08      	it	eq
 8002a58:	68ec      	ldreq	r4, [r5, #12]
 8002a5a:	e7da      	b.n	8002a12 <_fflush_r+0x22>
 8002a5c:	08003070 	.word	0x08003070
 8002a60:	08003090 	.word	0x08003090
 8002a64:	08003050 	.word	0x08003050

08002a68 <std>:
 8002a68:	2300      	movs	r3, #0
 8002a6a:	b510      	push	{r4, lr}
 8002a6c:	4604      	mov	r4, r0
 8002a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8002a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a76:	6083      	str	r3, [r0, #8]
 8002a78:	8181      	strh	r1, [r0, #12]
 8002a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8002a7c:	81c2      	strh	r2, [r0, #14]
 8002a7e:	6183      	str	r3, [r0, #24]
 8002a80:	4619      	mov	r1, r3
 8002a82:	2208      	movs	r2, #8
 8002a84:	305c      	adds	r0, #92	; 0x5c
 8002a86:	f7ff fdef 	bl	8002668 <memset>
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <std+0x38>)
 8002a8c:	6224      	str	r4, [r4, #32]
 8002a8e:	6263      	str	r3, [r4, #36]	; 0x24
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <std+0x3c>)
 8002a92:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <std+0x40>)
 8002a96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <std+0x44>)
 8002a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8002a9c:	bd10      	pop	{r4, pc}
 8002a9e:	bf00      	nop
 8002aa0:	08002e8d 	.word	0x08002e8d
 8002aa4:	08002eaf 	.word	0x08002eaf
 8002aa8:	08002ee7 	.word	0x08002ee7
 8002aac:	08002f0b 	.word	0x08002f0b

08002ab0 <_cleanup_r>:
 8002ab0:	4901      	ldr	r1, [pc, #4]	; (8002ab8 <_cleanup_r+0x8>)
 8002ab2:	f000 b8af 	b.w	8002c14 <_fwalk_reent>
 8002ab6:	bf00      	nop
 8002ab8:	080029f1 	.word	0x080029f1

08002abc <__sfmoreglue>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	2568      	movs	r5, #104	; 0x68
 8002ac0:	1e4a      	subs	r2, r1, #1
 8002ac2:	4355      	muls	r5, r2
 8002ac4:	460e      	mov	r6, r1
 8002ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002aca:	f000 f975 	bl	8002db8 <_malloc_r>
 8002ace:	4604      	mov	r4, r0
 8002ad0:	b140      	cbz	r0, 8002ae4 <__sfmoreglue+0x28>
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8002ad8:	300c      	adds	r0, #12
 8002ada:	60a0      	str	r0, [r4, #8]
 8002adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ae0:	f7ff fdc2 	bl	8002668 <memset>
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}

08002ae8 <__sfp_lock_acquire>:
 8002ae8:	4801      	ldr	r0, [pc, #4]	; (8002af0 <__sfp_lock_acquire+0x8>)
 8002aea:	f000 b8b3 	b.w	8002c54 <__retarget_lock_acquire_recursive>
 8002aee:	bf00      	nop
 8002af0:	2000015c 	.word	0x2000015c

08002af4 <__sfp_lock_release>:
 8002af4:	4801      	ldr	r0, [pc, #4]	; (8002afc <__sfp_lock_release+0x8>)
 8002af6:	f000 b8ae 	b.w	8002c56 <__retarget_lock_release_recursive>
 8002afa:	bf00      	nop
 8002afc:	2000015c 	.word	0x2000015c

08002b00 <__sinit_lock_acquire>:
 8002b00:	4801      	ldr	r0, [pc, #4]	; (8002b08 <__sinit_lock_acquire+0x8>)
 8002b02:	f000 b8a7 	b.w	8002c54 <__retarget_lock_acquire_recursive>
 8002b06:	bf00      	nop
 8002b08:	20000157 	.word	0x20000157

08002b0c <__sinit_lock_release>:
 8002b0c:	4801      	ldr	r0, [pc, #4]	; (8002b14 <__sinit_lock_release+0x8>)
 8002b0e:	f000 b8a2 	b.w	8002c56 <__retarget_lock_release_recursive>
 8002b12:	bf00      	nop
 8002b14:	20000157 	.word	0x20000157

08002b18 <__sinit>:
 8002b18:	b510      	push	{r4, lr}
 8002b1a:	4604      	mov	r4, r0
 8002b1c:	f7ff fff0 	bl	8002b00 <__sinit_lock_acquire>
 8002b20:	69a3      	ldr	r3, [r4, #24]
 8002b22:	b11b      	cbz	r3, 8002b2c <__sinit+0x14>
 8002b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b28:	f7ff bff0 	b.w	8002b0c <__sinit_lock_release>
 8002b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b30:	6523      	str	r3, [r4, #80]	; 0x50
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <__sinit+0x68>)
 8002b34:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <__sinit+0x6c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b3a:	42a3      	cmp	r3, r4
 8002b3c:	bf08      	it	eq
 8002b3e:	2301      	moveq	r3, #1
 8002b40:	4620      	mov	r0, r4
 8002b42:	bf08      	it	eq
 8002b44:	61a3      	streq	r3, [r4, #24]
 8002b46:	f000 f81f 	bl	8002b88 <__sfp>
 8002b4a:	6060      	str	r0, [r4, #4]
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f000 f81b 	bl	8002b88 <__sfp>
 8002b52:	60a0      	str	r0, [r4, #8]
 8002b54:	4620      	mov	r0, r4
 8002b56:	f000 f817 	bl	8002b88 <__sfp>
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2104      	movs	r1, #4
 8002b5e:	60e0      	str	r0, [r4, #12]
 8002b60:	6860      	ldr	r0, [r4, #4]
 8002b62:	f7ff ff81 	bl	8002a68 <std>
 8002b66:	2201      	movs	r2, #1
 8002b68:	2109      	movs	r1, #9
 8002b6a:	68a0      	ldr	r0, [r4, #8]
 8002b6c:	f7ff ff7c 	bl	8002a68 <std>
 8002b70:	2202      	movs	r2, #2
 8002b72:	2112      	movs	r1, #18
 8002b74:	68e0      	ldr	r0, [r4, #12]
 8002b76:	f7ff ff77 	bl	8002a68 <std>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61a3      	str	r3, [r4, #24]
 8002b7e:	e7d1      	b.n	8002b24 <__sinit+0xc>
 8002b80:	0800304c 	.word	0x0800304c
 8002b84:	08002ab1 	.word	0x08002ab1

08002b88 <__sfp>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	4607      	mov	r7, r0
 8002b8c:	f7ff ffac 	bl	8002ae8 <__sfp_lock_acquire>
 8002b90:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <__sfp+0x84>)
 8002b92:	681e      	ldr	r6, [r3, #0]
 8002b94:	69b3      	ldr	r3, [r6, #24]
 8002b96:	b913      	cbnz	r3, 8002b9e <__sfp+0x16>
 8002b98:	4630      	mov	r0, r6
 8002b9a:	f7ff ffbd 	bl	8002b18 <__sinit>
 8002b9e:	3648      	adds	r6, #72	; 0x48
 8002ba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	d503      	bpl.n	8002bb0 <__sfp+0x28>
 8002ba8:	6833      	ldr	r3, [r6, #0]
 8002baa:	b30b      	cbz	r3, 8002bf0 <__sfp+0x68>
 8002bac:	6836      	ldr	r6, [r6, #0]
 8002bae:	e7f7      	b.n	8002ba0 <__sfp+0x18>
 8002bb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002bb4:	b9d5      	cbnz	r5, 8002bec <__sfp+0x64>
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <__sfp+0x88>)
 8002bb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002bbc:	60e3      	str	r3, [r4, #12]
 8002bbe:	6665      	str	r5, [r4, #100]	; 0x64
 8002bc0:	f000 f847 	bl	8002c52 <__retarget_lock_init_recursive>
 8002bc4:	f7ff ff96 	bl	8002af4 <__sfp_lock_release>
 8002bc8:	2208      	movs	r2, #8
 8002bca:	4629      	mov	r1, r5
 8002bcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002bd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002bd4:	6025      	str	r5, [r4, #0]
 8002bd6:	61a5      	str	r5, [r4, #24]
 8002bd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002bdc:	f7ff fd44 	bl	8002668 <memset>
 8002be0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002be4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002be8:	4620      	mov	r0, r4
 8002bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bec:	3468      	adds	r4, #104	; 0x68
 8002bee:	e7d9      	b.n	8002ba4 <__sfp+0x1c>
 8002bf0:	2104      	movs	r1, #4
 8002bf2:	4638      	mov	r0, r7
 8002bf4:	f7ff ff62 	bl	8002abc <__sfmoreglue>
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	6030      	str	r0, [r6, #0]
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	d1d5      	bne.n	8002bac <__sfp+0x24>
 8002c00:	f7ff ff78 	bl	8002af4 <__sfp_lock_release>
 8002c04:	230c      	movs	r3, #12
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	e7ee      	b.n	8002be8 <__sfp+0x60>
 8002c0a:	bf00      	nop
 8002c0c:	0800304c 	.word	0x0800304c
 8002c10:	ffff0001 	.word	0xffff0001

08002c14 <_fwalk_reent>:
 8002c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c18:	4606      	mov	r6, r0
 8002c1a:	4688      	mov	r8, r1
 8002c1c:	2700      	movs	r7, #0
 8002c1e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c26:	f1b9 0901 	subs.w	r9, r9, #1
 8002c2a:	d505      	bpl.n	8002c38 <_fwalk_reent+0x24>
 8002c2c:	6824      	ldr	r4, [r4, #0]
 8002c2e:	2c00      	cmp	r4, #0
 8002c30:	d1f7      	bne.n	8002c22 <_fwalk_reent+0xe>
 8002c32:	4638      	mov	r0, r7
 8002c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c38:	89ab      	ldrh	r3, [r5, #12]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d907      	bls.n	8002c4e <_fwalk_reent+0x3a>
 8002c3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c42:	3301      	adds	r3, #1
 8002c44:	d003      	beq.n	8002c4e <_fwalk_reent+0x3a>
 8002c46:	4629      	mov	r1, r5
 8002c48:	4630      	mov	r0, r6
 8002c4a:	47c0      	blx	r8
 8002c4c:	4307      	orrs	r7, r0
 8002c4e:	3568      	adds	r5, #104	; 0x68
 8002c50:	e7e9      	b.n	8002c26 <_fwalk_reent+0x12>

08002c52 <__retarget_lock_init_recursive>:
 8002c52:	4770      	bx	lr

08002c54 <__retarget_lock_acquire_recursive>:
 8002c54:	4770      	bx	lr

08002c56 <__retarget_lock_release_recursive>:
 8002c56:	4770      	bx	lr

08002c58 <__swhatbuf_r>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	460e      	mov	r6, r1
 8002c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c60:	4614      	mov	r4, r2
 8002c62:	2900      	cmp	r1, #0
 8002c64:	461d      	mov	r5, r3
 8002c66:	b096      	sub	sp, #88	; 0x58
 8002c68:	da07      	bge.n	8002c7a <__swhatbuf_r+0x22>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	602b      	str	r3, [r5, #0]
 8002c6e:	89b3      	ldrh	r3, [r6, #12]
 8002c70:	061a      	lsls	r2, r3, #24
 8002c72:	d410      	bmi.n	8002c96 <__swhatbuf_r+0x3e>
 8002c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c78:	e00e      	b.n	8002c98 <__swhatbuf_r+0x40>
 8002c7a:	466a      	mov	r2, sp
 8002c7c:	f000 f96c 	bl	8002f58 <_fstat_r>
 8002c80:	2800      	cmp	r0, #0
 8002c82:	dbf2      	blt.n	8002c6a <__swhatbuf_r+0x12>
 8002c84:	9a01      	ldr	r2, [sp, #4]
 8002c86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c8e:	425a      	negs	r2, r3
 8002c90:	415a      	adcs	r2, r3
 8002c92:	602a      	str	r2, [r5, #0]
 8002c94:	e7ee      	b.n	8002c74 <__swhatbuf_r+0x1c>
 8002c96:	2340      	movs	r3, #64	; 0x40
 8002c98:	2000      	movs	r0, #0
 8002c9a:	6023      	str	r3, [r4, #0]
 8002c9c:	b016      	add	sp, #88	; 0x58
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}

08002ca0 <__smakebuf_r>:
 8002ca0:	898b      	ldrh	r3, [r1, #12]
 8002ca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ca4:	079d      	lsls	r5, r3, #30
 8002ca6:	4606      	mov	r6, r0
 8002ca8:	460c      	mov	r4, r1
 8002caa:	d507      	bpl.n	8002cbc <__smakebuf_r+0x1c>
 8002cac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002cb0:	6023      	str	r3, [r4, #0]
 8002cb2:	6123      	str	r3, [r4, #16]
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	6163      	str	r3, [r4, #20]
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	466a      	mov	r2, sp
 8002cbe:	ab01      	add	r3, sp, #4
 8002cc0:	f7ff ffca 	bl	8002c58 <__swhatbuf_r>
 8002cc4:	9900      	ldr	r1, [sp, #0]
 8002cc6:	4605      	mov	r5, r0
 8002cc8:	4630      	mov	r0, r6
 8002cca:	f000 f875 	bl	8002db8 <_malloc_r>
 8002cce:	b948      	cbnz	r0, 8002ce4 <__smakebuf_r+0x44>
 8002cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cd4:	059a      	lsls	r2, r3, #22
 8002cd6:	d4ef      	bmi.n	8002cb8 <__smakebuf_r+0x18>
 8002cd8:	f023 0303 	bic.w	r3, r3, #3
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	81a3      	strh	r3, [r4, #12]
 8002ce2:	e7e3      	b.n	8002cac <__smakebuf_r+0xc>
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <__smakebuf_r+0x7c>)
 8002ce6:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ce8:	89a3      	ldrh	r3, [r4, #12]
 8002cea:	6020      	str	r0, [r4, #0]
 8002cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf0:	81a3      	strh	r3, [r4, #12]
 8002cf2:	9b00      	ldr	r3, [sp, #0]
 8002cf4:	6120      	str	r0, [r4, #16]
 8002cf6:	6163      	str	r3, [r4, #20]
 8002cf8:	9b01      	ldr	r3, [sp, #4]
 8002cfa:	b15b      	cbz	r3, 8002d14 <__smakebuf_r+0x74>
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d02:	f000 f93b 	bl	8002f7c <_isatty_r>
 8002d06:	b128      	cbz	r0, 8002d14 <__smakebuf_r+0x74>
 8002d08:	89a3      	ldrh	r3, [r4, #12]
 8002d0a:	f023 0303 	bic.w	r3, r3, #3
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	81a3      	strh	r3, [r4, #12]
 8002d14:	89a0      	ldrh	r0, [r4, #12]
 8002d16:	4305      	orrs	r5, r0
 8002d18:	81a5      	strh	r5, [r4, #12]
 8002d1a:	e7cd      	b.n	8002cb8 <__smakebuf_r+0x18>
 8002d1c:	08002ab1 	.word	0x08002ab1

08002d20 <_free_r>:
 8002d20:	b538      	push	{r3, r4, r5, lr}
 8002d22:	4605      	mov	r5, r0
 8002d24:	2900      	cmp	r1, #0
 8002d26:	d043      	beq.n	8002db0 <_free_r+0x90>
 8002d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d2c:	1f0c      	subs	r4, r1, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bfb8      	it	lt
 8002d32:	18e4      	addlt	r4, r4, r3
 8002d34:	f000 f944 	bl	8002fc0 <__malloc_lock>
 8002d38:	4a1e      	ldr	r2, [pc, #120]	; (8002db4 <_free_r+0x94>)
 8002d3a:	6813      	ldr	r3, [r2, #0]
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	b933      	cbnz	r3, 8002d4e <_free_r+0x2e>
 8002d40:	6063      	str	r3, [r4, #4]
 8002d42:	6014      	str	r4, [r2, #0]
 8002d44:	4628      	mov	r0, r5
 8002d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d4a:	f000 b93f 	b.w	8002fcc <__malloc_unlock>
 8002d4e:	42a3      	cmp	r3, r4
 8002d50:	d90a      	bls.n	8002d68 <_free_r+0x48>
 8002d52:	6821      	ldr	r1, [r4, #0]
 8002d54:	1862      	adds	r2, r4, r1
 8002d56:	4293      	cmp	r3, r2
 8002d58:	bf01      	itttt	eq
 8002d5a:	681a      	ldreq	r2, [r3, #0]
 8002d5c:	685b      	ldreq	r3, [r3, #4]
 8002d5e:	1852      	addeq	r2, r2, r1
 8002d60:	6022      	streq	r2, [r4, #0]
 8002d62:	6063      	str	r3, [r4, #4]
 8002d64:	6004      	str	r4, [r0, #0]
 8002d66:	e7ed      	b.n	8002d44 <_free_r+0x24>
 8002d68:	461a      	mov	r2, r3
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	b10b      	cbz	r3, 8002d72 <_free_r+0x52>
 8002d6e:	42a3      	cmp	r3, r4
 8002d70:	d9fa      	bls.n	8002d68 <_free_r+0x48>
 8002d72:	6811      	ldr	r1, [r2, #0]
 8002d74:	1850      	adds	r0, r2, r1
 8002d76:	42a0      	cmp	r0, r4
 8002d78:	d10b      	bne.n	8002d92 <_free_r+0x72>
 8002d7a:	6820      	ldr	r0, [r4, #0]
 8002d7c:	4401      	add	r1, r0
 8002d7e:	1850      	adds	r0, r2, r1
 8002d80:	4283      	cmp	r3, r0
 8002d82:	6011      	str	r1, [r2, #0]
 8002d84:	d1de      	bne.n	8002d44 <_free_r+0x24>
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4401      	add	r1, r0
 8002d8c:	6011      	str	r1, [r2, #0]
 8002d8e:	6053      	str	r3, [r2, #4]
 8002d90:	e7d8      	b.n	8002d44 <_free_r+0x24>
 8002d92:	d902      	bls.n	8002d9a <_free_r+0x7a>
 8002d94:	230c      	movs	r3, #12
 8002d96:	602b      	str	r3, [r5, #0]
 8002d98:	e7d4      	b.n	8002d44 <_free_r+0x24>
 8002d9a:	6820      	ldr	r0, [r4, #0]
 8002d9c:	1821      	adds	r1, r4, r0
 8002d9e:	428b      	cmp	r3, r1
 8002da0:	bf01      	itttt	eq
 8002da2:	6819      	ldreq	r1, [r3, #0]
 8002da4:	685b      	ldreq	r3, [r3, #4]
 8002da6:	1809      	addeq	r1, r1, r0
 8002da8:	6021      	streq	r1, [r4, #0]
 8002daa:	6063      	str	r3, [r4, #4]
 8002dac:	6054      	str	r4, [r2, #4]
 8002dae:	e7c9      	b.n	8002d44 <_free_r+0x24>
 8002db0:	bd38      	pop	{r3, r4, r5, pc}
 8002db2:	bf00      	nop
 8002db4:	200000b4 	.word	0x200000b4

08002db8 <_malloc_r>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	1ccd      	adds	r5, r1, #3
 8002dbc:	f025 0503 	bic.w	r5, r5, #3
 8002dc0:	3508      	adds	r5, #8
 8002dc2:	2d0c      	cmp	r5, #12
 8002dc4:	bf38      	it	cc
 8002dc6:	250c      	movcc	r5, #12
 8002dc8:	2d00      	cmp	r5, #0
 8002dca:	4606      	mov	r6, r0
 8002dcc:	db01      	blt.n	8002dd2 <_malloc_r+0x1a>
 8002dce:	42a9      	cmp	r1, r5
 8002dd0:	d903      	bls.n	8002dda <_malloc_r+0x22>
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	6033      	str	r3, [r6, #0]
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dda:	f000 f8f1 	bl	8002fc0 <__malloc_lock>
 8002dde:	4921      	ldr	r1, [pc, #132]	; (8002e64 <_malloc_r+0xac>)
 8002de0:	680a      	ldr	r2, [r1, #0]
 8002de2:	4614      	mov	r4, r2
 8002de4:	b99c      	cbnz	r4, 8002e0e <_malloc_r+0x56>
 8002de6:	4f20      	ldr	r7, [pc, #128]	; (8002e68 <_malloc_r+0xb0>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	b923      	cbnz	r3, 8002df6 <_malloc_r+0x3e>
 8002dec:	4621      	mov	r1, r4
 8002dee:	4630      	mov	r0, r6
 8002df0:	f000 f83c 	bl	8002e6c <_sbrk_r>
 8002df4:	6038      	str	r0, [r7, #0]
 8002df6:	4629      	mov	r1, r5
 8002df8:	4630      	mov	r0, r6
 8002dfa:	f000 f837 	bl	8002e6c <_sbrk_r>
 8002dfe:	1c43      	adds	r3, r0, #1
 8002e00:	d123      	bne.n	8002e4a <_malloc_r+0x92>
 8002e02:	230c      	movs	r3, #12
 8002e04:	4630      	mov	r0, r6
 8002e06:	6033      	str	r3, [r6, #0]
 8002e08:	f000 f8e0 	bl	8002fcc <__malloc_unlock>
 8002e0c:	e7e3      	b.n	8002dd6 <_malloc_r+0x1e>
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	1b5b      	subs	r3, r3, r5
 8002e12:	d417      	bmi.n	8002e44 <_malloc_r+0x8c>
 8002e14:	2b0b      	cmp	r3, #11
 8002e16:	d903      	bls.n	8002e20 <_malloc_r+0x68>
 8002e18:	6023      	str	r3, [r4, #0]
 8002e1a:	441c      	add	r4, r3
 8002e1c:	6025      	str	r5, [r4, #0]
 8002e1e:	e004      	b.n	8002e2a <_malloc_r+0x72>
 8002e20:	6863      	ldr	r3, [r4, #4]
 8002e22:	42a2      	cmp	r2, r4
 8002e24:	bf0c      	ite	eq
 8002e26:	600b      	streq	r3, [r1, #0]
 8002e28:	6053      	strne	r3, [r2, #4]
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	f000 f8ce 	bl	8002fcc <__malloc_unlock>
 8002e30:	f104 000b 	add.w	r0, r4, #11
 8002e34:	1d23      	adds	r3, r4, #4
 8002e36:	f020 0007 	bic.w	r0, r0, #7
 8002e3a:	1ac2      	subs	r2, r0, r3
 8002e3c:	d0cc      	beq.n	8002dd8 <_malloc_r+0x20>
 8002e3e:	1a1b      	subs	r3, r3, r0
 8002e40:	50a3      	str	r3, [r4, r2]
 8002e42:	e7c9      	b.n	8002dd8 <_malloc_r+0x20>
 8002e44:	4622      	mov	r2, r4
 8002e46:	6864      	ldr	r4, [r4, #4]
 8002e48:	e7cc      	b.n	8002de4 <_malloc_r+0x2c>
 8002e4a:	1cc4      	adds	r4, r0, #3
 8002e4c:	f024 0403 	bic.w	r4, r4, #3
 8002e50:	42a0      	cmp	r0, r4
 8002e52:	d0e3      	beq.n	8002e1c <_malloc_r+0x64>
 8002e54:	1a21      	subs	r1, r4, r0
 8002e56:	4630      	mov	r0, r6
 8002e58:	f000 f808 	bl	8002e6c <_sbrk_r>
 8002e5c:	3001      	adds	r0, #1
 8002e5e:	d1dd      	bne.n	8002e1c <_malloc_r+0x64>
 8002e60:	e7cf      	b.n	8002e02 <_malloc_r+0x4a>
 8002e62:	bf00      	nop
 8002e64:	200000b4 	.word	0x200000b4
 8002e68:	200000b8 	.word	0x200000b8

08002e6c <_sbrk_r>:
 8002e6c:	b538      	push	{r3, r4, r5, lr}
 8002e6e:	2300      	movs	r3, #0
 8002e70:	4d05      	ldr	r5, [pc, #20]	; (8002e88 <_sbrk_r+0x1c>)
 8002e72:	4604      	mov	r4, r0
 8002e74:	4608      	mov	r0, r1
 8002e76:	602b      	str	r3, [r5, #0]
 8002e78:	f7fd fc28 	bl	80006cc <_sbrk>
 8002e7c:	1c43      	adds	r3, r0, #1
 8002e7e:	d102      	bne.n	8002e86 <_sbrk_r+0x1a>
 8002e80:	682b      	ldr	r3, [r5, #0]
 8002e82:	b103      	cbz	r3, 8002e86 <_sbrk_r+0x1a>
 8002e84:	6023      	str	r3, [r4, #0]
 8002e86:	bd38      	pop	{r3, r4, r5, pc}
 8002e88:	20000160 	.word	0x20000160

08002e8c <__sread>:
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	460c      	mov	r4, r1
 8002e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e94:	f000 f8a0 	bl	8002fd8 <_read_r>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	bfab      	itete	ge
 8002e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8002ea0:	181b      	addge	r3, r3, r0
 8002ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ea6:	bfac      	ite	ge
 8002ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002eaa:	81a3      	strhlt	r3, [r4, #12]
 8002eac:	bd10      	pop	{r4, pc}

08002eae <__swrite>:
 8002eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eb2:	461f      	mov	r7, r3
 8002eb4:	898b      	ldrh	r3, [r1, #12]
 8002eb6:	4605      	mov	r5, r0
 8002eb8:	05db      	lsls	r3, r3, #23
 8002eba:	460c      	mov	r4, r1
 8002ebc:	4616      	mov	r6, r2
 8002ebe:	d505      	bpl.n	8002ecc <__swrite+0x1e>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ec8:	f000 f868 	bl	8002f9c <_lseek_r>
 8002ecc:	89a3      	ldrh	r3, [r4, #12]
 8002ece:	4632      	mov	r2, r6
 8002ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ed4:	81a3      	strh	r3, [r4, #12]
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	463b      	mov	r3, r7
 8002eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee2:	f000 b817 	b.w	8002f14 <_write_r>

08002ee6 <__sseek>:
 8002ee6:	b510      	push	{r4, lr}
 8002ee8:	460c      	mov	r4, r1
 8002eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eee:	f000 f855 	bl	8002f9c <_lseek_r>
 8002ef2:	1c43      	adds	r3, r0, #1
 8002ef4:	89a3      	ldrh	r3, [r4, #12]
 8002ef6:	bf15      	itete	ne
 8002ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f02:	81a3      	strheq	r3, [r4, #12]
 8002f04:	bf18      	it	ne
 8002f06:	81a3      	strhne	r3, [r4, #12]
 8002f08:	bd10      	pop	{r4, pc}

08002f0a <__sclose>:
 8002f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f0e:	f000 b813 	b.w	8002f38 <_close_r>
	...

08002f14 <_write_r>:
 8002f14:	b538      	push	{r3, r4, r5, lr}
 8002f16:	4604      	mov	r4, r0
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4d05      	ldr	r5, [pc, #20]	; (8002f34 <_write_r+0x20>)
 8002f20:	602a      	str	r2, [r5, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	f7fd fb85 	bl	8000632 <_write>
 8002f28:	1c43      	adds	r3, r0, #1
 8002f2a:	d102      	bne.n	8002f32 <_write_r+0x1e>
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	b103      	cbz	r3, 8002f32 <_write_r+0x1e>
 8002f30:	6023      	str	r3, [r4, #0]
 8002f32:	bd38      	pop	{r3, r4, r5, pc}
 8002f34:	20000160 	.word	0x20000160

08002f38 <_close_r>:
 8002f38:	b538      	push	{r3, r4, r5, lr}
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	4d05      	ldr	r5, [pc, #20]	; (8002f54 <_close_r+0x1c>)
 8002f3e:	4604      	mov	r4, r0
 8002f40:	4608      	mov	r0, r1
 8002f42:	602b      	str	r3, [r5, #0]
 8002f44:	f7fd fb91 	bl	800066a <_close>
 8002f48:	1c43      	adds	r3, r0, #1
 8002f4a:	d102      	bne.n	8002f52 <_close_r+0x1a>
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	b103      	cbz	r3, 8002f52 <_close_r+0x1a>
 8002f50:	6023      	str	r3, [r4, #0]
 8002f52:	bd38      	pop	{r3, r4, r5, pc}
 8002f54:	20000160 	.word	0x20000160

08002f58 <_fstat_r>:
 8002f58:	b538      	push	{r3, r4, r5, lr}
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	4d06      	ldr	r5, [pc, #24]	; (8002f78 <_fstat_r+0x20>)
 8002f5e:	4604      	mov	r4, r0
 8002f60:	4608      	mov	r0, r1
 8002f62:	4611      	mov	r1, r2
 8002f64:	602b      	str	r3, [r5, #0]
 8002f66:	f7fd fb8b 	bl	8000680 <_fstat>
 8002f6a:	1c43      	adds	r3, r0, #1
 8002f6c:	d102      	bne.n	8002f74 <_fstat_r+0x1c>
 8002f6e:	682b      	ldr	r3, [r5, #0]
 8002f70:	b103      	cbz	r3, 8002f74 <_fstat_r+0x1c>
 8002f72:	6023      	str	r3, [r4, #0]
 8002f74:	bd38      	pop	{r3, r4, r5, pc}
 8002f76:	bf00      	nop
 8002f78:	20000160 	.word	0x20000160

08002f7c <_isatty_r>:
 8002f7c:	b538      	push	{r3, r4, r5, lr}
 8002f7e:	2300      	movs	r3, #0
 8002f80:	4d05      	ldr	r5, [pc, #20]	; (8002f98 <_isatty_r+0x1c>)
 8002f82:	4604      	mov	r4, r0
 8002f84:	4608      	mov	r0, r1
 8002f86:	602b      	str	r3, [r5, #0]
 8002f88:	f7fd fb89 	bl	800069e <_isatty>
 8002f8c:	1c43      	adds	r3, r0, #1
 8002f8e:	d102      	bne.n	8002f96 <_isatty_r+0x1a>
 8002f90:	682b      	ldr	r3, [r5, #0]
 8002f92:	b103      	cbz	r3, 8002f96 <_isatty_r+0x1a>
 8002f94:	6023      	str	r3, [r4, #0]
 8002f96:	bd38      	pop	{r3, r4, r5, pc}
 8002f98:	20000160 	.word	0x20000160

08002f9c <_lseek_r>:
 8002f9c:	b538      	push	{r3, r4, r5, lr}
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	4d05      	ldr	r5, [pc, #20]	; (8002fbc <_lseek_r+0x20>)
 8002fa8:	602a      	str	r2, [r5, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f7fd fb81 	bl	80006b2 <_lseek>
 8002fb0:	1c43      	adds	r3, r0, #1
 8002fb2:	d102      	bne.n	8002fba <_lseek_r+0x1e>
 8002fb4:	682b      	ldr	r3, [r5, #0]
 8002fb6:	b103      	cbz	r3, 8002fba <_lseek_r+0x1e>
 8002fb8:	6023      	str	r3, [r4, #0]
 8002fba:	bd38      	pop	{r3, r4, r5, pc}
 8002fbc:	20000160 	.word	0x20000160

08002fc0 <__malloc_lock>:
 8002fc0:	4801      	ldr	r0, [pc, #4]	; (8002fc8 <__malloc_lock+0x8>)
 8002fc2:	f7ff be47 	b.w	8002c54 <__retarget_lock_acquire_recursive>
 8002fc6:	bf00      	nop
 8002fc8:	20000158 	.word	0x20000158

08002fcc <__malloc_unlock>:
 8002fcc:	4801      	ldr	r0, [pc, #4]	; (8002fd4 <__malloc_unlock+0x8>)
 8002fce:	f7ff be42 	b.w	8002c56 <__retarget_lock_release_recursive>
 8002fd2:	bf00      	nop
 8002fd4:	20000158 	.word	0x20000158

08002fd8 <_read_r>:
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4d05      	ldr	r5, [pc, #20]	; (8002ff8 <_read_r+0x20>)
 8002fe4:	602a      	str	r2, [r5, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f7fd fb06 	bl	80005f8 <_read>
 8002fec:	1c43      	adds	r3, r0, #1
 8002fee:	d102      	bne.n	8002ff6 <_read_r+0x1e>
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	b103      	cbz	r3, 8002ff6 <_read_r+0x1e>
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	bd38      	pop	{r3, r4, r5, pc}
 8002ff8:	20000160 	.word	0x20000160

08002ffc <_init>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	bf00      	nop
 8003000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003002:	bc08      	pop	{r3}
 8003004:	469e      	mov	lr, r3
 8003006:	4770      	bx	lr

08003008 <_fini>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	bf00      	nop
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr
