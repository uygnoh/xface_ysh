
STM32F103ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002de0  08002de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e7c  08002e7c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002e7c  08002e7c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e7c  08002e7c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e80  08002e80  00012e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000090  08002f14  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002f14  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000882d  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf2  00000000  00000000  000288e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0002a4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  0002ac60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a205  00000000  00000000  0002b330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d2e  00000000  00000000  00045535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000927fd  00000000  00000000  0004e263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0a60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022e4  00000000  00000000  000e0ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000090 	.word	0x20000090
 8000200:	00000000 	.word	0x00000000
 8000204:	08002dc8 	.word	0x08002dc8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000094 	.word	0x20000094
 8000220:	08002dc8 	.word	0x08002dc8

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <MX_GPIO_Init+0x74>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a16      	ldr	r2, [pc, #88]	; (8000298 <MX_GPIO_Init+0x74>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <MX_GPIO_Init+0x74>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0304 	and.w	r3, r3, #4
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000250:	4b11      	ldr	r3, [pc, #68]	; (8000298 <MX_GPIO_Init+0x74>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a10      	ldr	r2, [pc, #64]	; (8000298 <MX_GPIO_Init+0x74>)
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <MX_GPIO_Init+0x74>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0308 	and.w	r3, r3, #8
 8000264:	603b      	str	r3, [r7, #0]
 8000266:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	2104      	movs	r1, #4
 800026c:	480b      	ldr	r0, [pc, #44]	; (800029c <MX_GPIO_Init+0x78>)
 800026e:	f000 ff01 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000272:	2304      	movs	r3, #4
 8000274:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	2301      	movs	r3, #1
 8000278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800027e:	2301      	movs	r3, #1
 8000280:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000282:	f107 0308 	add.w	r3, r7, #8
 8000286:	4619      	mov	r1, r3
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <MX_GPIO_Init+0x78>)
 800028a:	f000 fd5f 	bl	8000d4c <HAL_GPIO_Init>

}
 800028e:	bf00      	nop
 8000290:	3718      	adds	r7, #24
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000
 800029c:	40010800 	.word	0x40010800

080002a0 <__io_putchar>:
                }
                return len;
        }
  #else
        #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
        PUTCHAR_PROTOTYPE {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
        //注意下面第一个参数是&huart1，因为cubemx配置了串口1自动生成的
        HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80002a8:	1d39      	adds	r1, r7, #4
 80002aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002ae:	2201      	movs	r2, #1
 80002b0:	4803      	ldr	r0, [pc, #12]	; (80002c0 <__io_putchar+0x20>)
 80002b2:	f001 fb78 	bl	80019a6 <HAL_UART_Transmit>
        return ch;
 80002b6:	687b      	ldr	r3, [r7, #4]
        }
 80002b8:	4618      	mov	r0, r3
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	200000dc 	.word	0x200000dc

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c8:	f000 fa6a 	bl	80007a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002cc:	f000 f852 	bl	8000374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d0:	f7ff ffa8 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002d4:	f000 f9c0 	bl	8000658 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


/*****************************************************************************/
if (HAL_UART_Transmit_IT(&huart1, (uint8_t *)tx_buffer, TX_BUFFER_SIZE) != HAL_OK) {
 80002d8:	221e      	movs	r2, #30
 80002da:	4920      	ldr	r1, [pc, #128]	; (800035c <main+0x98>)
 80002dc:	4820      	ldr	r0, [pc, #128]	; (8000360 <main+0x9c>)
 80002de:	f001 fbf4 	bl	8001aca <HAL_UART_Transmit_IT>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d009      	beq.n	80002fc <main+0x38>
        Error_Handler();
 80002e8:	f000 f8a6 	bl	8000438 <Error_Handler>
}
while (uart_ready != SET) {
 80002ec:	e006      	b.n	80002fc <main+0x38>
        LED_01();
 80002ee:	2104      	movs	r1, #4
 80002f0:	481c      	ldr	r0, [pc, #112]	; (8000364 <main+0xa0>)
 80002f2:	f000 fed7 	bl	80010a4 <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 80002f6:	2064      	movs	r0, #100	; 0x64
 80002f8:	f000 fab4 	bl	8000864 <HAL_Delay>
while (uart_ready != SET) {
 80002fc:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <main+0xa4>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	2b01      	cmp	r3, #1
 8000304:	d1f3      	bne.n	80002ee <main+0x2a>
}
//Reset transmission flag
uart_ready = RESET;
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <main+0xa4>)
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]


if (HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_buffer, RX_BUFFER_SIZE) != HAL_OK) {
 800030c:	221e      	movs	r2, #30
 800030e:	4917      	ldr	r1, [pc, #92]	; (800036c <main+0xa8>)
 8000310:	4813      	ldr	r0, [pc, #76]	; (8000360 <main+0x9c>)
 8000312:	f001 fc1e 	bl	8001b52 <HAL_UART_Receive_IT>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d00a      	beq.n	8000332 <main+0x6e>
        Error_Handler();
 800031c:	f000 f88c 	bl	8000438 <Error_Handler>
}
while (uart_ready != SET) {
 8000320:	e007      	b.n	8000332 <main+0x6e>
        LED_01();
 8000322:	2104      	movs	r1, #4
 8000324:	480f      	ldr	r0, [pc, #60]	; (8000364 <main+0xa0>)
 8000326:	f000 febd 	bl	80010a4 <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 800032a:	2064      	movs	r0, #100	; 0x64
 800032c:	f000 fa9a 	bl	8000864 <HAL_Delay>
        break;
 8000330:	e005      	b.n	800033e <main+0x7a>
while (uart_ready != SET) {
 8000332:	bf00      	nop
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <main+0xa4>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	2b01      	cmp	r3, #1
 800033c:	d1f1      	bne.n	8000322 <main+0x5e>
}
//Reset transmission flag
uart_ready = RESET;
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <main+0xa4>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]

while (1) {
        LED_01();
 8000344:	2104      	movs	r1, #4
 8000346:	4807      	ldr	r0, [pc, #28]	; (8000364 <main+0xa0>)
 8000348:	f000 feac 	bl	80010a4 <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 800034c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000350:	f000 fa88 	bl	8000864 <HAL_Delay>
        printf("hello, world\n");
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <main+0xac>)
 8000356:	f002 f8e3 	bl	8002520 <puts>
        LED_01();
 800035a:	e7f3      	b.n	8000344 <main+0x80>
 800035c:	20000000 	.word	0x20000000
 8000360:	200000dc 	.word	0x200000dc
 8000364:	40010800 	.word	0x40010800
 8000368:	200000ac 	.word	0x200000ac
 800036c:	200000bc 	.word	0x200000bc
 8000370:	08002de0 	.word	0x08002de0

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b090      	sub	sp, #64	; 0x40
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0318 	add.w	r3, r7, #24
 800037e:	2228      	movs	r2, #40	; 0x28
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f002 f856 	bl	8002434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000396:	2302      	movs	r3, #2
 8000398:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039a:	2301      	movs	r3, #1
 800039c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039e:	2310      	movs	r3, #16
 80003a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003a2:	2300      	movs	r3, #0
 80003a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f107 0318 	add.w	r3, r7, #24
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fe94 	bl	80010d8 <HAL_RCC_OscConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003b6:	f000 f83f 	bl	8000438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	230f      	movs	r3, #15
 80003bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003be:	2300      	movs	r3, #0
 80003c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 f900 	bl	80015d8 <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003de:	f000 f82b 	bl	8000438 <Error_Handler>
  }
}
 80003e2:	bf00      	nop
 80003e4:	3740      	adds	r7, #64	; 0x40
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <HAL_UART_TxCpltCallback>:

//////////////////////////////// 用户自定义函数 ////////////////////////////////
/*****************************************************************************/
//UART__发送完成（中断）回调函数
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
        uart_ready = SET;      //设置传输完成标志位（SET传输完成）
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <HAL_UART_TxCpltCallback+0x18>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	701a      	strb	r2, [r3, #0]
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	200000ac 	.word	0x200000ac

08000408 <HAL_UART_RxCpltCallback>:
//UART__接收完成（中断）回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
        uart_ready = SET;      //设置传输完成标志位（SET传输完成）
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <HAL_UART_RxCpltCallback+0x18>)
 8000412:	2201      	movs	r2, #1
 8000414:	701a      	strb	r2, [r3, #0]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	200000ac 	.word	0x200000ac

08000424 <HAL_UART_ErrorCallback>:

//UART__出错（中断）回调函数
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart1)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
        Error_Handler();
 800042c:	f000 f804 	bl	8000438 <Error_Handler>
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
}
 800043e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000440:	e7fe      	b.n	8000440 <Error_Handler+0x8>
	...

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <HAL_MspInit+0x5c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <HAL_MspInit+0x5c>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6193      	str	r3, [r2, #24]
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <HAL_MspInit+0x5c>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <HAL_MspInit+0x5c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <HAL_MspInit+0x5c>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800046c:	61d3      	str	r3, [r2, #28]
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_MspInit+0x5c>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <HAL_MspInit+0x60>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <HAL_MspInit+0x60>)
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000496:	bf00      	nop
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010000 	.word	0x40010000

080004a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <NMI_Handler+0x4>

080004ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <HardFault_Handler+0x4>

080004b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <MemManage_Handler+0x4>

080004ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <BusFault_Handler+0x4>

080004c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <UsageFault_Handler+0x4>

080004c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ee:	f000 f99d 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <USART1_IRQHandler+0x10>)
 80004fe:	f001 fb59 	bl	8001bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200000dc 	.word	0x200000dc

0800050c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	e00a      	b.n	8000534 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800051e:	f3af 8000 	nop.w
 8000522:	4601      	mov	r1, r0
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	60ba      	str	r2, [r7, #8]
 800052a:	b2ca      	uxtb	r2, r1
 800052c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	3301      	adds	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	429a      	cmp	r2, r3
 800053a:	dbf0      	blt.n	800051e <_read+0x12>
	}

return len;
 800053c:	687b      	ldr	r3, [r7, #4]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3718      	adds	r7, #24
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b086      	sub	sp, #24
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	e009      	b.n	800056c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	60ba      	str	r2, [r7, #8]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe9d 	bl	80002a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	3301      	adds	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	429a      	cmp	r2, r3
 8000572:	dbf1      	blt.n	8000558 <_write+0x12>
	}
	return len;
 8000574:	687b      	ldr	r3, [r7, #4]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <_close>:

int _close(int file)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
	return -1;
 8000586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a4:	605a      	str	r2, [r3, #4]
	return 0;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <_isatty>:

int _isatty(int file)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
	return 1;
 80005ba:	2301      	movs	r3, #1
}
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b085      	sub	sp, #20
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	60b9      	str	r1, [r7, #8]
 80005d0:	607a      	str	r2, [r7, #4]
	return 0;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
	...

080005e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e8:	4a14      	ldr	r2, [pc, #80]	; (800063c <_sbrk+0x5c>)
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <_sbrk+0x60>)
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <_sbrk+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d102      	bne.n	8000602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <_sbrk+0x64>)
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <_sbrk+0x68>)
 8000600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	429a      	cmp	r2, r3
 800060e:	d207      	bcs.n	8000620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000610:	f001 fee6 	bl	80023e0 <__errno>
 8000614:	4603      	mov	r3, r0
 8000616:	220c      	movs	r2, #12
 8000618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800061e:	e009      	b.n	8000634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <_sbrk+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <_sbrk+0x64>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	4a05      	ldr	r2, [pc, #20]	; (8000644 <_sbrk+0x64>)
 8000630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000632:	68fb      	ldr	r3, [r7, #12]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20010000 	.word	0x20010000
 8000640:	00000400 	.word	0x00000400
 8000644:	200000b0 	.word	0x200000b0
 8000648:	20000138 	.word	0x20000138

0800064c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_USART1_UART_Init+0x50>)
 8000660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000690:	f001 f93c 	bl	800190c <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800069a:	f7ff fecd 	bl	8000438 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000dc 	.word	0x200000dc
 80006a8:	40013800 	.word	0x40013800

080006ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a20      	ldr	r2, [pc, #128]	; (8000748 <HAL_UART_MspInit+0x9c>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d139      	bne.n	8000740 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <HAL_UART_MspInit+0xa0>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a1e      	ldr	r2, [pc, #120]	; (800074c <HAL_UART_MspInit+0xa0>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <HAL_UART_MspInit+0xa0>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <HAL_UART_MspInit+0xa0>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a18      	ldr	r2, [pc, #96]	; (800074c <HAL_UART_MspInit+0xa0>)
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <HAL_UART_MspInit+0xa0>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000700:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	480f      	ldr	r0, [pc, #60]	; (8000750 <HAL_UART_MspInit+0xa4>)
 8000712:	f000 fb1b 	bl	8000d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4809      	ldr	r0, [pc, #36]	; (8000750 <HAL_UART_MspInit+0xa4>)
 800072c:	f000 fb0e 	bl	8000d4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	210e      	movs	r1, #14
 8000734:	2025      	movs	r0, #37	; 0x25
 8000736:	f000 f990 	bl	8000a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800073a:	2025      	movs	r0, #37	; 0x25
 800073c:	f000 f9a9 	bl	8000a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40013800 	.word	0x40013800
 800074c:	40021000 	.word	0x40021000
 8000750:	40010800 	.word	0x40010800

08000754 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000756:	490d      	ldr	r1, [pc, #52]	; (800078c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000758:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800076c:	4c0a      	ldr	r4, [pc, #40]	; (8000798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800077a:	f7ff ff67 	bl	800064c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800077e:	f001 fe35 	bl	80023ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000782:	f7ff fd9f 	bl	80002c4 <main>
  bx lr
 8000786:	4770      	bx	lr
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000790:	08002e84 	.word	0x08002e84
  ldr r2, =_sbss
 8000794:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000798:	20000134 	.word	0x20000134

0800079c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC1_2_IRQHandler>
	...

080007a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <HAL_Init+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <HAL_Init+0x28>)
 80007aa:	f043 0310 	orr.w	r3, r3, #16
 80007ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f000 f947 	bl	8000a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b6:	200f      	movs	r0, #15
 80007b8:	f000 f808 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007bc:	f7ff fe42 	bl	8000444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40022000 	.word	0x40022000

080007cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x54>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x58>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f95f 	bl	8000aae <HAL_SYSTICK_Config>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00e      	b.n	8000818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d80a      	bhi.n	8000816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000808:	f000 f927 	bl	8000a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <HAL_InitTick+0x5c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000020 	.word	0x20000020
 8000824:	20000028 	.word	0x20000028
 8000828:	20000024 	.word	0x20000024

0800082c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x1c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x20>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
 800083c:	4a03      	ldr	r2, [pc, #12]	; (800084c <HAL_IncTick+0x20>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	20000028 	.word	0x20000028
 800084c:	20000120 	.word	0x20000120

08000850 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b02      	ldr	r3, [pc, #8]	; (8000860 <HAL_GetTick+0x10>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	20000120 	.word	0x20000120

08000864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800086c:	f7ff fff0 	bl	8000850 <HAL_GetTick>
 8000870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800087c:	d005      	beq.n	800088a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <HAL_Delay+0x44>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800088a:	bf00      	nop
 800088c:	f7ff ffe0 	bl	8000850 <HAL_GetTick>
 8000890:	4602      	mov	r2, r0
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	429a      	cmp	r2, r3
 800089a:	d8f7      	bhi.n	800088c <HAL_Delay+0x28>
  {
  }
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000028 	.word	0x20000028

080008ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <__NVIC_SetPriorityGrouping+0x44>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c8:	4013      	ands	r3, r2
 80008ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008de:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <__NVIC_SetPriorityGrouping+0x44>)
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	60d3      	str	r3, [r2, #12]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <__NVIC_GetPriorityGrouping+0x18>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	0a1b      	lsrs	r3, r3, #8
 80008fe:	f003 0307 	and.w	r3, r3, #7
}
 8000902:	4618      	mov	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	2b00      	cmp	r3, #0
 8000920:	db0b      	blt.n	800093a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	f003 021f 	and.w	r2, r3, #31
 8000928:	4906      	ldr	r1, [pc, #24]	; (8000944 <__NVIC_EnableIRQ+0x34>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	095b      	lsrs	r3, r3, #5
 8000930:	2001      	movs	r0, #1
 8000932:	fa00 f202 	lsl.w	r2, r0, r2
 8000936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	; 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a10:	d301      	bcc.n	8000a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00f      	b.n	8000a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <SysTick_Config+0x40>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1e:	210f      	movs	r1, #15
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a24:	f7ff ff90 	bl	8000948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <SysTick_Config+0x40>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SysTick_Config+0x40>)
 8000a30:	2207      	movs	r2, #7
 8000a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff2d 	bl	80008ac <__NVIC_SetPriorityGrouping>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4603      	mov	r3, r0
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a6c:	f7ff ff42 	bl	80008f4 <__NVIC_GetPriorityGrouping>
 8000a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	68b9      	ldr	r1, [r7, #8]
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f7ff ff90 	bl	800099c <NVIC_EncodePriority>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff5f 	bl	8000948 <__NVIC_SetPriority>
}
 8000a8a:	bf00      	nop
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff35 	bl	8000910 <__NVIC_EnableIRQ>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ffa2 	bl	8000a00 <SysTick_Config>
 8000abc:	4603      	mov	r3, r0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d008      	beq.n	8000aee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2204      	movs	r2, #4
 8000ae0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e020      	b.n	8000b30 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f022 020e 	bic.w	r2, r2, #14
 8000afc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f022 0201 	bic.w	r2, r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b16:	2101      	movs	r1, #1
 8000b18:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2201      	movs	r2, #1
 8000b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
	...

08000b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d005      	beq.n	8000b5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2204      	movs	r2, #4
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e0d6      	b.n	8000d0c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f022 020e 	bic.w	r2, r2, #14
 8000b6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f022 0201 	bic.w	r2, r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b64      	ldr	r3, [pc, #400]	; (8000d18 <HAL_DMA_Abort_IT+0x1dc>)
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d958      	bls.n	8000c3c <HAL_DMA_Abort_IT+0x100>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a63      	ldr	r2, [pc, #396]	; (8000d1c <HAL_DMA_Abort_IT+0x1e0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d04f      	beq.n	8000c34 <HAL_DMA_Abort_IT+0xf8>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a61      	ldr	r2, [pc, #388]	; (8000d20 <HAL_DMA_Abort_IT+0x1e4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d048      	beq.n	8000c30 <HAL_DMA_Abort_IT+0xf4>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a60      	ldr	r2, [pc, #384]	; (8000d24 <HAL_DMA_Abort_IT+0x1e8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d040      	beq.n	8000c2a <HAL_DMA_Abort_IT+0xee>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a5e      	ldr	r2, [pc, #376]	; (8000d28 <HAL_DMA_Abort_IT+0x1ec>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d038      	beq.n	8000c24 <HAL_DMA_Abort_IT+0xe8>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a5d      	ldr	r2, [pc, #372]	; (8000d2c <HAL_DMA_Abort_IT+0x1f0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d030      	beq.n	8000c1e <HAL_DMA_Abort_IT+0xe2>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a5b      	ldr	r2, [pc, #364]	; (8000d30 <HAL_DMA_Abort_IT+0x1f4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d028      	beq.n	8000c18 <HAL_DMA_Abort_IT+0xdc>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a53      	ldr	r2, [pc, #332]	; (8000d18 <HAL_DMA_Abort_IT+0x1dc>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d020      	beq.n	8000c12 <HAL_DMA_Abort_IT+0xd6>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a57      	ldr	r2, [pc, #348]	; (8000d34 <HAL_DMA_Abort_IT+0x1f8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d019      	beq.n	8000c0e <HAL_DMA_Abort_IT+0xd2>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a56      	ldr	r2, [pc, #344]	; (8000d38 <HAL_DMA_Abort_IT+0x1fc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d012      	beq.n	8000c0a <HAL_DMA_Abort_IT+0xce>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a54      	ldr	r2, [pc, #336]	; (8000d3c <HAL_DMA_Abort_IT+0x200>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d00a      	beq.n	8000c04 <HAL_DMA_Abort_IT+0xc8>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a53      	ldr	r2, [pc, #332]	; (8000d40 <HAL_DMA_Abort_IT+0x204>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d102      	bne.n	8000bfe <HAL_DMA_Abort_IT+0xc2>
 8000bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfc:	e01b      	b.n	8000c36 <HAL_DMA_Abort_IT+0xfa>
 8000bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c02:	e018      	b.n	8000c36 <HAL_DMA_Abort_IT+0xfa>
 8000c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c08:	e015      	b.n	8000c36 <HAL_DMA_Abort_IT+0xfa>
 8000c0a:	2310      	movs	r3, #16
 8000c0c:	e013      	b.n	8000c36 <HAL_DMA_Abort_IT+0xfa>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e011      	b.n	8000c36 <HAL_DMA_Abort_IT+0xfa>
 8000c12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c16:	e00e      	b.n	8000c36 <HAL_DMA_Abort_IT+0xfa>
 8000c18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c1c:	e00b      	b.n	8000c36 <HAL_DMA_Abort_IT+0xfa>
 8000c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c22:	e008      	b.n	8000c36 <HAL_DMA_Abort_IT+0xfa>
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	e005      	b.n	8000c36 <HAL_DMA_Abort_IT+0xfa>
 8000c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2e:	e002      	b.n	8000c36 <HAL_DMA_Abort_IT+0xfa>
 8000c30:	2310      	movs	r3, #16
 8000c32:	e000      	b.n	8000c36 <HAL_DMA_Abort_IT+0xfa>
 8000c34:	2301      	movs	r3, #1
 8000c36:	4a43      	ldr	r2, [pc, #268]	; (8000d44 <HAL_DMA_Abort_IT+0x208>)
 8000c38:	6053      	str	r3, [r2, #4]
 8000c3a:	e057      	b.n	8000cec <HAL_DMA_Abort_IT+0x1b0>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a36      	ldr	r2, [pc, #216]	; (8000d1c <HAL_DMA_Abort_IT+0x1e0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d04f      	beq.n	8000ce6 <HAL_DMA_Abort_IT+0x1aa>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a35      	ldr	r2, [pc, #212]	; (8000d20 <HAL_DMA_Abort_IT+0x1e4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d048      	beq.n	8000ce2 <HAL_DMA_Abort_IT+0x1a6>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a33      	ldr	r2, [pc, #204]	; (8000d24 <HAL_DMA_Abort_IT+0x1e8>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d040      	beq.n	8000cdc <HAL_DMA_Abort_IT+0x1a0>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a32      	ldr	r2, [pc, #200]	; (8000d28 <HAL_DMA_Abort_IT+0x1ec>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d038      	beq.n	8000cd6 <HAL_DMA_Abort_IT+0x19a>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a30      	ldr	r2, [pc, #192]	; (8000d2c <HAL_DMA_Abort_IT+0x1f0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d030      	beq.n	8000cd0 <HAL_DMA_Abort_IT+0x194>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <HAL_DMA_Abort_IT+0x1f4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d028      	beq.n	8000cca <HAL_DMA_Abort_IT+0x18e>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a26      	ldr	r2, [pc, #152]	; (8000d18 <HAL_DMA_Abort_IT+0x1dc>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d020      	beq.n	8000cc4 <HAL_DMA_Abort_IT+0x188>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a2b      	ldr	r2, [pc, #172]	; (8000d34 <HAL_DMA_Abort_IT+0x1f8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d019      	beq.n	8000cc0 <HAL_DMA_Abort_IT+0x184>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a29      	ldr	r2, [pc, #164]	; (8000d38 <HAL_DMA_Abort_IT+0x1fc>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d012      	beq.n	8000cbc <HAL_DMA_Abort_IT+0x180>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <HAL_DMA_Abort_IT+0x200>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d00a      	beq.n	8000cb6 <HAL_DMA_Abort_IT+0x17a>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <HAL_DMA_Abort_IT+0x204>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d102      	bne.n	8000cb0 <HAL_DMA_Abort_IT+0x174>
 8000caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cae:	e01b      	b.n	8000ce8 <HAL_DMA_Abort_IT+0x1ac>
 8000cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb4:	e018      	b.n	8000ce8 <HAL_DMA_Abort_IT+0x1ac>
 8000cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cba:	e015      	b.n	8000ce8 <HAL_DMA_Abort_IT+0x1ac>
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	e013      	b.n	8000ce8 <HAL_DMA_Abort_IT+0x1ac>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e011      	b.n	8000ce8 <HAL_DMA_Abort_IT+0x1ac>
 8000cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cc8:	e00e      	b.n	8000ce8 <HAL_DMA_Abort_IT+0x1ac>
 8000cca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cce:	e00b      	b.n	8000ce8 <HAL_DMA_Abort_IT+0x1ac>
 8000cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd4:	e008      	b.n	8000ce8 <HAL_DMA_Abort_IT+0x1ac>
 8000cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cda:	e005      	b.n	8000ce8 <HAL_DMA_Abort_IT+0x1ac>
 8000cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce0:	e002      	b.n	8000ce8 <HAL_DMA_Abort_IT+0x1ac>
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	e000      	b.n	8000ce8 <HAL_DMA_Abort_IT+0x1ac>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <HAL_DMA_Abort_IT+0x20c>)
 8000cea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	4798      	blx	r3
    } 
  }
  return status;
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40020080 	.word	0x40020080
 8000d1c:	40020008 	.word	0x40020008
 8000d20:	4002001c 	.word	0x4002001c
 8000d24:	40020030 	.word	0x40020030
 8000d28:	40020044 	.word	0x40020044
 8000d2c:	40020058 	.word	0x40020058
 8000d30:	4002006c 	.word	0x4002006c
 8000d34:	40020408 	.word	0x40020408
 8000d38:	4002041c 	.word	0x4002041c
 8000d3c:	40020430 	.word	0x40020430
 8000d40:	40020444 	.word	0x40020444
 8000d44:	40020400 	.word	0x40020400
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b08b      	sub	sp, #44	; 0x2c
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5e:	e179      	b.n	8001054 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d60:	2201      	movs	r2, #1
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	f040 8168 	bne.w	800104e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	4aa0      	ldr	r2, [pc, #640]	; (8001004 <HAL_GPIO_Init+0x2b8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d05e      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000d88:	4a9e      	ldr	r2, [pc, #632]	; (8001004 <HAL_GPIO_Init+0x2b8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d875      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000d8e:	4a9e      	ldr	r2, [pc, #632]	; (8001008 <HAL_GPIO_Init+0x2bc>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d058      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000d94:	4a9c      	ldr	r2, [pc, #624]	; (8001008 <HAL_GPIO_Init+0x2bc>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d86f      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000d9a:	4a9c      	ldr	r2, [pc, #624]	; (800100c <HAL_GPIO_Init+0x2c0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d052      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000da0:	4a9a      	ldr	r2, [pc, #616]	; (800100c <HAL_GPIO_Init+0x2c0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d869      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000da6:	4a9a      	ldr	r2, [pc, #616]	; (8001010 <HAL_GPIO_Init+0x2c4>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d04c      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000dac:	4a98      	ldr	r2, [pc, #608]	; (8001010 <HAL_GPIO_Init+0x2c4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d863      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000db2:	4a98      	ldr	r2, [pc, #608]	; (8001014 <HAL_GPIO_Init+0x2c8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d046      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000db8:	4a96      	ldr	r2, [pc, #600]	; (8001014 <HAL_GPIO_Init+0x2c8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d85d      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000dbe:	2b12      	cmp	r3, #18
 8000dc0:	d82a      	bhi.n	8000e18 <HAL_GPIO_Init+0xcc>
 8000dc2:	2b12      	cmp	r3, #18
 8000dc4:	d859      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000dc6:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <HAL_GPIO_Init+0x80>)
 8000dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dcc:	08000e47 	.word	0x08000e47
 8000dd0:	08000e21 	.word	0x08000e21
 8000dd4:	08000e33 	.word	0x08000e33
 8000dd8:	08000e75 	.word	0x08000e75
 8000ddc:	08000e7b 	.word	0x08000e7b
 8000de0:	08000e7b 	.word	0x08000e7b
 8000de4:	08000e7b 	.word	0x08000e7b
 8000de8:	08000e7b 	.word	0x08000e7b
 8000dec:	08000e7b 	.word	0x08000e7b
 8000df0:	08000e7b 	.word	0x08000e7b
 8000df4:	08000e7b 	.word	0x08000e7b
 8000df8:	08000e7b 	.word	0x08000e7b
 8000dfc:	08000e7b 	.word	0x08000e7b
 8000e00:	08000e7b 	.word	0x08000e7b
 8000e04:	08000e7b 	.word	0x08000e7b
 8000e08:	08000e7b 	.word	0x08000e7b
 8000e0c:	08000e7b 	.word	0x08000e7b
 8000e10:	08000e29 	.word	0x08000e29
 8000e14:	08000e3d 	.word	0x08000e3d
 8000e18:	4a7f      	ldr	r2, [pc, #508]	; (8001018 <HAL_GPIO_Init+0x2cc>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d013      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e1e:	e02c      	b.n	8000e7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	623b      	str	r3, [r7, #32]
          break;
 8000e26:	e029      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	623b      	str	r3, [r7, #32]
          break;
 8000e30:	e024      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	3308      	adds	r3, #8
 8000e38:	623b      	str	r3, [r7, #32]
          break;
 8000e3a:	e01f      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	330c      	adds	r3, #12
 8000e42:	623b      	str	r3, [r7, #32]
          break;
 8000e44:	e01a      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	623b      	str	r3, [r7, #32]
          break;
 8000e52:	e013      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d105      	bne.n	8000e68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69fa      	ldr	r2, [r7, #28]
 8000e64:	611a      	str	r2, [r3, #16]
          break;
 8000e66:	e009      	b.n	8000e7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	615a      	str	r2, [r3, #20]
          break;
 8000e72:	e003      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
          break;
 8000e78:	e000      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          break;
 8000e7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2bff      	cmp	r3, #255	; 0xff
 8000e80:	d801      	bhi.n	8000e86 <HAL_GPIO_Init+0x13a>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	e001      	b.n	8000e8a <HAL_GPIO_Init+0x13e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2bff      	cmp	r3, #255	; 0xff
 8000e90:	d802      	bhi.n	8000e98 <HAL_GPIO_Init+0x14c>
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	e002      	b.n	8000e9e <HAL_GPIO_Init+0x152>
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	3b08      	subs	r3, #8
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	401a      	ands	r2, r3
 8000eb0:	6a39      	ldr	r1, [r7, #32]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 80c1 	beq.w	800104e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ecc:	4b53      	ldr	r3, [pc, #332]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a52      	ldr	r2, [pc, #328]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b50      	ldr	r3, [pc, #320]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ee4:	4a4e      	ldr	r2, [pc, #312]	; (8001020 <HAL_GPIO_Init+0x2d4>)
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	4013      	ands	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a46      	ldr	r2, [pc, #280]	; (8001024 <HAL_GPIO_Init+0x2d8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d01f      	beq.n	8000f50 <HAL_GPIO_Init+0x204>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a45      	ldr	r2, [pc, #276]	; (8001028 <HAL_GPIO_Init+0x2dc>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d019      	beq.n	8000f4c <HAL_GPIO_Init+0x200>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a44      	ldr	r2, [pc, #272]	; (800102c <HAL_GPIO_Init+0x2e0>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d013      	beq.n	8000f48 <HAL_GPIO_Init+0x1fc>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a43      	ldr	r2, [pc, #268]	; (8001030 <HAL_GPIO_Init+0x2e4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d00d      	beq.n	8000f44 <HAL_GPIO_Init+0x1f8>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a42      	ldr	r2, [pc, #264]	; (8001034 <HAL_GPIO_Init+0x2e8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d007      	beq.n	8000f40 <HAL_GPIO_Init+0x1f4>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a41      	ldr	r2, [pc, #260]	; (8001038 <HAL_GPIO_Init+0x2ec>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d101      	bne.n	8000f3c <HAL_GPIO_Init+0x1f0>
 8000f38:	2305      	movs	r3, #5
 8000f3a:	e00a      	b.n	8000f52 <HAL_GPIO_Init+0x206>
 8000f3c:	2306      	movs	r3, #6
 8000f3e:	e008      	b.n	8000f52 <HAL_GPIO_Init+0x206>
 8000f40:	2304      	movs	r3, #4
 8000f42:	e006      	b.n	8000f52 <HAL_GPIO_Init+0x206>
 8000f44:	2303      	movs	r3, #3
 8000f46:	e004      	b.n	8000f52 <HAL_GPIO_Init+0x206>
 8000f48:	2302      	movs	r3, #2
 8000f4a:	e002      	b.n	8000f52 <HAL_GPIO_Init+0x206>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e000      	b.n	8000f52 <HAL_GPIO_Init+0x206>
 8000f50:	2300      	movs	r3, #0
 8000f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f54:	f002 0203 	and.w	r2, r2, #3
 8000f58:	0092      	lsls	r2, r2, #2
 8000f5a:	4093      	lsls	r3, r2
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f62:	492f      	ldr	r1, [pc, #188]	; (8001020 <HAL_GPIO_Init+0x2d4>)
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	492e      	ldr	r1, [pc, #184]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	600b      	str	r3, [r1, #0]
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f8a:	4b2c      	ldr	r3, [pc, #176]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	492a      	ldr	r1, [pc, #168]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	4924      	ldr	r1, [pc, #144]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	4920      	ldr	r1, [pc, #128]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	491a      	ldr	r1, [pc, #104]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	608b      	str	r3, [r1, #8]
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4916      	ldr	r1, [pc, #88]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d025      	beq.n	8001040 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	4910      	ldr	r1, [pc, #64]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60cb      	str	r3, [r1, #12]
 8001000:	e025      	b.n	800104e <HAL_GPIO_Init+0x302>
 8001002:	bf00      	nop
 8001004:	10320000 	.word	0x10320000
 8001008:	10310000 	.word	0x10310000
 800100c:	10220000 	.word	0x10220000
 8001010:	10210000 	.word	0x10210000
 8001014:	10120000 	.word	0x10120000
 8001018:	10110000 	.word	0x10110000
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000
 8001024:	40010800 	.word	0x40010800
 8001028:	40010c00 	.word	0x40010c00
 800102c:	40011000 	.word	0x40011000
 8001030:	40011400 	.word	0x40011400
 8001034:	40011800 	.word	0x40011800
 8001038:	40011c00 	.word	0x40011c00
 800103c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_GPIO_Init+0x324>)
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	43db      	mvns	r3, r3
 8001048:	4909      	ldr	r1, [pc, #36]	; (8001070 <HAL_GPIO_Init+0x324>)
 800104a:	4013      	ands	r3, r2
 800104c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	3301      	adds	r3, #1
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	fa22 f303 	lsr.w	r3, r2, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	f47f ae7e 	bne.w	8000d60 <HAL_GPIO_Init+0x14>
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	372c      	adds	r7, #44	; 0x2c
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	40010400 	.word	0x40010400

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001090:	e003      	b.n	800109a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	041a      	lsls	r2, r3, #16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	611a      	str	r2, [r3, #16]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4013      	ands	r3, r2
 80010bc:	041a      	lsls	r2, r3, #16
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	43d9      	mvns	r1, r3
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	400b      	ands	r3, r1
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	611a      	str	r2, [r3, #16]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e26c      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8087 	beq.w	8001206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f8:	4b92      	ldr	r3, [pc, #584]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b04      	cmp	r3, #4
 8001102:	d00c      	beq.n	800111e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001104:	4b8f      	ldr	r3, [pc, #572]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b08      	cmp	r3, #8
 800110e:	d112      	bne.n	8001136 <HAL_RCC_OscConfig+0x5e>
 8001110:	4b8c      	ldr	r3, [pc, #560]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111c:	d10b      	bne.n	8001136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111e:	4b89      	ldr	r3, [pc, #548]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d06c      	beq.n	8001204 <HAL_RCC_OscConfig+0x12c>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d168      	bne.n	8001204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e246      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113e:	d106      	bne.n	800114e <HAL_RCC_OscConfig+0x76>
 8001140:	4b80      	ldr	r3, [pc, #512]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a7f      	ldr	r2, [pc, #508]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e02e      	b.n	80011ac <HAL_RCC_OscConfig+0xd4>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x98>
 8001156:	4b7b      	ldr	r3, [pc, #492]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a7a      	ldr	r2, [pc, #488]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800115c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b78      	ldr	r3, [pc, #480]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a77      	ldr	r2, [pc, #476]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e01d      	b.n	80011ac <HAL_RCC_OscConfig+0xd4>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0xbc>
 800117a:	4b72      	ldr	r3, [pc, #456]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a71      	ldr	r2, [pc, #452]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b6f      	ldr	r3, [pc, #444]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a6e      	ldr	r2, [pc, #440]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0xd4>
 8001194:	4b6b      	ldr	r3, [pc, #428]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a6a      	ldr	r2, [pc, #424]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b68      	ldr	r3, [pc, #416]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a67      	ldr	r2, [pc, #412]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fb4c 	bl	8000850 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fb48 	bl	8000850 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e1fa      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0xe4>
 80011da:	e014      	b.n	8001206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fb38 	bl	8000850 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fb34 	bl	8000850 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1e6      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x10c>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d063      	beq.n	80012da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001212:	4b4c      	ldr	r3, [pc, #304]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800121e:	4b49      	ldr	r3, [pc, #292]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b08      	cmp	r3, #8
 8001228:	d11c      	bne.n	8001264 <HAL_RCC_OscConfig+0x18c>
 800122a:	4b46      	ldr	r3, [pc, #280]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	4b43      	ldr	r3, [pc, #268]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x176>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e1ba      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4939      	ldr	r1, [pc, #228]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	e03a      	b.n	80012da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff faed 	bl	8000850 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fae9 	bl	8000850 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e19b      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4927      	ldr	r1, [pc, #156]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_RCC_OscConfig+0x270>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff facc 	bl	8000850 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fac8 	bl	8000850 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e17a      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d03a      	beq.n	800135c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d019      	beq.n	8001322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_RCC_OscConfig+0x274>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f4:	f7ff faac 	bl	8000850 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff faa8 	bl	8000850 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e15a      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f000 fad8 	bl	80018d0 <RCC_Delay>
 8001320:	e01c      	b.n	800135c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_RCC_OscConfig+0x274>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001328:	f7ff fa92 	bl	8000850 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132e:	e00f      	b.n	8001350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff fa8e 	bl	8000850 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d908      	bls.n	8001350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e140      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	42420000 	.word	0x42420000
 800134c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	4b9e      	ldr	r3, [pc, #632]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e9      	bne.n	8001330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80a6 	beq.w	80014b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136e:	4b97      	ldr	r3, [pc, #604]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10d      	bne.n	8001396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b94      	ldr	r3, [pc, #592]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a93      	ldr	r2, [pc, #588]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b91      	ldr	r3, [pc, #580]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001392:	2301      	movs	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	4b8e      	ldr	r3, [pc, #568]	; (80015d0 <HAL_RCC_OscConfig+0x4f8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d118      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a2:	4b8b      	ldr	r3, [pc, #556]	; (80015d0 <HAL_RCC_OscConfig+0x4f8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a8a      	ldr	r2, [pc, #552]	; (80015d0 <HAL_RCC_OscConfig+0x4f8>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fa4f 	bl	8000850 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b6:	f7ff fa4b 	bl	8000850 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b64      	cmp	r3, #100	; 0x64
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e0fd      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	4b81      	ldr	r3, [pc, #516]	; (80015d0 <HAL_RCC_OscConfig+0x4f8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x312>
 80013dc:	4b7b      	ldr	r3, [pc, #492]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a7a      	ldr	r2, [pc, #488]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	e02d      	b.n	8001446 <HAL_RCC_OscConfig+0x36e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x334>
 80013f2:	4b76      	ldr	r3, [pc, #472]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4a75      	ldr	r2, [pc, #468]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6213      	str	r3, [r2, #32]
 80013fe:	4b73      	ldr	r3, [pc, #460]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a72      	ldr	r2, [pc, #456]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001404:	f023 0304 	bic.w	r3, r3, #4
 8001408:	6213      	str	r3, [r2, #32]
 800140a:	e01c      	b.n	8001446 <HAL_RCC_OscConfig+0x36e>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b05      	cmp	r3, #5
 8001412:	d10c      	bne.n	800142e <HAL_RCC_OscConfig+0x356>
 8001414:	4b6d      	ldr	r3, [pc, #436]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4a6c      	ldr	r2, [pc, #432]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	6213      	str	r3, [r2, #32]
 8001420:	4b6a      	ldr	r3, [pc, #424]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4a69      	ldr	r2, [pc, #420]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6213      	str	r3, [r2, #32]
 800142c:	e00b      	b.n	8001446 <HAL_RCC_OscConfig+0x36e>
 800142e:	4b67      	ldr	r3, [pc, #412]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4a66      	ldr	r2, [pc, #408]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	6213      	str	r3, [r2, #32]
 800143a:	4b64      	ldr	r3, [pc, #400]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	4a63      	ldr	r2, [pc, #396]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001440:	f023 0304 	bic.w	r3, r3, #4
 8001444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d015      	beq.n	800147a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff f9ff 	bl	8000850 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff f9fb 	bl	8000850 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f241 3288 	movw	r2, #5000	; 0x1388
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e0ab      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146c:	4b57      	ldr	r3, [pc, #348]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0ee      	beq.n	8001456 <HAL_RCC_OscConfig+0x37e>
 8001478:	e014      	b.n	80014a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff f9e9 	bl	8000850 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001480:	e00a      	b.n	8001498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001482:	f7ff f9e5 	bl	8000850 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001490:	4293      	cmp	r3, r2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e095      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001498:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ee      	bne.n	8001482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d105      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014aa:	4b48      	ldr	r3, [pc, #288]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a47      	ldr	r2, [pc, #284]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8081 	beq.w	80015c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c0:	4b42      	ldr	r3, [pc, #264]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d061      	beq.n	8001590 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d146      	bne.n	8001562 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d4:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <HAL_RCC_OscConfig+0x4fc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff f9b9 	bl	8000850 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e2:	f7ff f9b5 	bl	8000850 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e067      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001508:	d108      	bne.n	800151c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	492d      	ldr	r1, [pc, #180]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a19      	ldr	r1, [r3, #32]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	430b      	orrs	r3, r1
 800152e:	4927      	ldr	r1, [pc, #156]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HAL_RCC_OscConfig+0x4fc>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff f989 	bl	8000850 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff f985 	bl	8000850 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e037      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x46a>
 8001560:	e02f      	b.n	80015c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <HAL_RCC_OscConfig+0x4fc>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff f972 	bl	8000850 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff f96e 	bl	8000850 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e020      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x498>
 800158e:	e018      	b.n	80015c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e013      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_OscConfig+0x4f4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d106      	bne.n	80015be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40007000 	.word	0x40007000
 80015d4:	42420060 	.word	0x42420060

080015d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0d0      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b6a      	ldr	r3, [pc, #424]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d910      	bls.n	800161c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b67      	ldr	r3, [pc, #412]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 0207 	bic.w	r2, r3, #7
 8001602:	4965      	ldr	r1, [pc, #404]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0b8      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001634:	4b59      	ldr	r3, [pc, #356]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4a58      	ldr	r2, [pc, #352]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800163e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001656:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001658:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	494d      	ldr	r1, [pc, #308]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d040      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d115      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e07f      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001696:	4b41      	ldr	r3, [pc, #260]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e073      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e06b      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b6:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f023 0203 	bic.w	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4936      	ldr	r1, [pc, #216]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c8:	f7ff f8c2 	bl	8000850 <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d0:	f7ff f8be 	bl	8000850 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e053      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 020c 	and.w	r2, r3, #12
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1eb      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d210      	bcs.n	8001728 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 0207 	bic.w	r2, r3, #7
 800170e:	4922      	ldr	r1, [pc, #136]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e032      	b.n	800178e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4916      	ldr	r1, [pc, #88]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	490e      	ldr	r1, [pc, #56]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001766:	f000 f821 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	490a      	ldr	r1, [pc, #40]	; (80017a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f820 	bl	80007cc <HAL_InitTick>

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40022000 	.word	0x40022000
 800179c:	40021000 	.word	0x40021000
 80017a0:	08002e00 	.word	0x08002e00
 80017a4:	20000020 	.word	0x20000020
 80017a8:	20000024 	.word	0x20000024

080017ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	b490      	push	{r4, r7}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_RCC_GetSysClockFreq+0xb0>)
 80017b4:	1d3c      	adds	r4, r7, #4
 80017b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017bc:	f240 2301 	movw	r3, #513	; 0x201
 80017c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d002      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x40>
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0x46>
 80017ea:	e02d      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ee:	623b      	str	r3, [r7, #32]
      break;
 80017f0:	e02d      	b.n	800184e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	0c9b      	lsrs	r3, r3, #18
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017fe:	4413      	add	r3, r2
 8001800:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001804:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	0c5b      	lsrs	r3, r3, #17
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800181e:	4413      	add	r3, r2
 8001820:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001824:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_RCC_GetSysClockFreq+0xb8>)
 800182a:	fb02 f203 	mul.w	r2, r2, r3
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
 8001836:	e004      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_RCC_GetSysClockFreq+0xbc>)
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	623b      	str	r3, [r7, #32]
      break;
 8001846:	e002      	b.n	800184e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_RCC_GetSysClockFreq+0xb8>)
 800184a:	623b      	str	r3, [r7, #32]
      break;
 800184c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800184e:	6a3b      	ldr	r3, [r7, #32]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3728      	adds	r7, #40	; 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bc90      	pop	{r4, r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	08002df0 	.word	0x08002df0
 8001860:	40021000 	.word	0x40021000
 8001864:	007a1200 	.word	0x007a1200
 8001868:	003d0900 	.word	0x003d0900

0800186c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <HAL_RCC_GetHCLKFreq+0x10>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	20000020 	.word	0x20000020

08001880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001884:	f7ff fff2 	bl	800186c <HAL_RCC_GetHCLKFreq>
 8001888:	4602      	mov	r2, r0
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	0a1b      	lsrs	r3, r3, #8
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	4903      	ldr	r1, [pc, #12]	; (80018a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001896:	5ccb      	ldrb	r3, [r1, r3]
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	08002e10 	.word	0x08002e10

080018a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018ac:	f7ff ffde 	bl	800186c <HAL_RCC_GetHCLKFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	0adb      	lsrs	r3, r3, #11
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	4903      	ldr	r1, [pc, #12]	; (80018cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000
 80018cc:	08002e10 	.word	0x08002e10

080018d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <RCC_Delay+0x34>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <RCC_Delay+0x38>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	0a5b      	lsrs	r3, r3, #9
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	fb02 f303 	mul.w	r3, r2, r3
 80018ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018ec:	bf00      	nop
  }
  while (Delay --);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1e5a      	subs	r2, r3, #1
 80018f2:	60fa      	str	r2, [r7, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f9      	bne.n	80018ec <RCC_Delay+0x1c>
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000020 	.word	0x20000020
 8001908:	10624dd3 	.word	0x10624dd3

0800190c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e03f      	b.n	800199e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d106      	bne.n	8001938 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7fe feba 	bl	80006ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2224      	movs	r2, #36	; 0x24
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800194e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fcb7 	bl	80022c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001974:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001984:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2220      	movs	r2, #32
 8001998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b08a      	sub	sp, #40	; 0x28
 80019aa:	af02      	add	r7, sp, #8
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4613      	mov	r3, r2
 80019b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	d17c      	bne.n	8001ac0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <HAL_UART_Transmit+0x2c>
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e075      	b.n	8001ac2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_UART_Transmit+0x3e>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e06e      	b.n	8001ac2 <HAL_UART_Transmit+0x11c>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2221      	movs	r2, #33	; 0x21
 80019f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019fa:	f7fe ff29 	bl	8000850 <HAL_GetTick>
 80019fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	88fa      	ldrh	r2, [r7, #6]
 8001a04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	88fa      	ldrh	r2, [r7, #6]
 8001a0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a14:	d108      	bne.n	8001a28 <HAL_UART_Transmit+0x82>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d104      	bne.n	8001a28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	e003      	b.n	8001a30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a38:	e02a      	b.n	8001a90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2200      	movs	r2, #0
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 fa6a 	bl	8001f1e <UART_WaitOnFlagUntilTimeout>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e036      	b.n	8001ac2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10b      	bne.n	8001a72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	e007      	b.n	8001a82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1cf      	bne.n	8001a3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2140      	movs	r1, #64	; 0x40
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 fa3a 	bl	8001f1e <UART_WaitOnFlagUntilTimeout>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e006      	b.n	8001ac2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e000      	b.n	8001ac2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ac0:	2302      	movs	r3, #2
  }
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3720      	adds	r7, #32
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b20      	cmp	r3, #32
 8001ae2:	d130      	bne.n	8001b46 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <HAL_UART_Transmit_IT+0x26>
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e029      	b.n	8001b48 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_UART_Transmit_IT+0x38>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e022      	b.n	8001b48 <HAL_UART_Transmit_IT+0x7e>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	88fa      	ldrh	r2, [r7, #6]
 8001b14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	88fa      	ldrh	r2, [r7, #6]
 8001b1a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2221      	movs	r2, #33	; 0x21
 8001b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b40:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001b46:	2302      	movs	r3, #2
  }
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d11d      	bne.n	8001ba8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <HAL_UART_Receive_IT+0x26>
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e016      	b.n	8001baa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_UART_Receive_IT+0x38>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e00f      	b.n	8001baa <HAL_UART_Receive_IT+0x58>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fa07 	bl	8001fb2 <UART_Start_Receive_IT>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	e000      	b.n	8001baa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10d      	bne.n	8001c06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_UART_IRQHandler+0x52>
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fab7 	bl	8002172 <UART_Receive_IT>
      return;
 8001c04:	e17b      	b.n	8001efe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80b1 	beq.w	8001d70 <HAL_UART_IRQHandler+0x1bc>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <HAL_UART_IRQHandler+0x70>
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80a6 	beq.w	8001d70 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00a      	beq.n	8001c44 <HAL_UART_IRQHandler+0x90>
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00a      	beq.n	8001c64 <HAL_UART_IRQHandler+0xb0>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f043 0202 	orr.w	r2, r3, #2
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <HAL_UART_IRQHandler+0xd0>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f043 0204 	orr.w	r2, r3, #4
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00f      	beq.n	8001cae <HAL_UART_IRQHandler+0xfa>
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d104      	bne.n	8001ca2 <HAL_UART_IRQHandler+0xee>
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f043 0208 	orr.w	r2, r3, #8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 811e 	beq.w	8001ef4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_UART_IRQHandler+0x11e>
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fa50 	bl	8002172 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf14      	ite	ne
 8001ce0:	2301      	movne	r3, #1
 8001ce2:	2300      	moveq	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <HAL_UART_IRQHandler+0x146>
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d031      	beq.n	8001d5e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f992 	bl	8002024 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d023      	beq.n	8001d56 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d1c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d013      	beq.n	8001d4e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	4a76      	ldr	r2, [pc, #472]	; (8001f04 <HAL_UART_IRQHandler+0x350>)
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe ff02 	bl	8000b3c <HAL_DMA_Abort_IT>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d016      	beq.n	8001d6c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d4c:	e00e      	b.n	8001d6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fb68 	bl	8000424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d54:	e00a      	b.n	8001d6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7fe fb64 	bl	8000424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d5c:	e006      	b.n	8001d6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe fb60 	bl	8000424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001d6a:	e0c3      	b.n	8001ef4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d6c:	bf00      	nop
    return;
 8001d6e:	e0c1      	b.n	8001ef4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	f040 80a1 	bne.w	8001ebc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 809b 	beq.w	8001ebc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8095 	beq.w	8001ebc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d04e      	beq.n	8001e54 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001dc0:	8a3b      	ldrh	r3, [r7, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8098 	beq.w	8001ef8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001dcc:	8a3a      	ldrh	r2, [r7, #16]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	f080 8092 	bcs.w	8001ef8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	8a3a      	ldrh	r2, [r7, #16]
 8001dd8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d02b      	beq.n	8001e3c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e12:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2220      	movs	r2, #32
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0210 	bic.w	r2, r2, #16
 8001e30:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fe45 	bl	8000ac6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f85b 	bl	8001f08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001e52:	e051      	b.n	8001ef8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d047      	beq.n	8001efc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001e6c:	8a7b      	ldrh	r3, [r7, #18]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d044      	beq.n	8001efc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e80:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0210 	bic.w	r2, r2, #16
 8001eae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001eb0:	8a7b      	ldrh	r3, [r7, #18]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f827 	bl	8001f08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001eba:	e01f      	b.n	8001efc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_UART_IRQHandler+0x324>
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f8e7 	bl	80020a4 <UART_Transmit_IT>
    return;
 8001ed6:	e012      	b.n	8001efe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00d      	beq.n	8001efe <HAL_UART_IRQHandler+0x34a>
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f928 	bl	8002142 <UART_EndTransmit_IT>
    return;
 8001ef2:	e004      	b.n	8001efe <HAL_UART_IRQHandler+0x34a>
    return;
 8001ef4:	bf00      	nop
 8001ef6:	e002      	b.n	8001efe <HAL_UART_IRQHandler+0x34a>
      return;
 8001ef8:	bf00      	nop
 8001efa:	e000      	b.n	8001efe <HAL_UART_IRQHandler+0x34a>
      return;
 8001efc:	bf00      	nop
  }
}
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	0800207d 	.word	0x0800207d

08001f08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f2e:	e02c      	b.n	8001f8a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f36:	d028      	beq.n	8001f8a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <UART_WaitOnFlagUntilTimeout+0x30>
 8001f3e:	f7fe fc87 	bl	8000850 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d21d      	bcs.n	8001f8a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f5c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695a      	ldr	r2, [r3, #20]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e00f      	b.n	8001faa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4013      	ands	r3, r2
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	bf0c      	ite	eq
 8001f9a:	2301      	moveq	r3, #1
 8001f9c:	2300      	movne	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d0c3      	beq.n	8001f30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b085      	sub	sp, #20
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	88fa      	ldrh	r2, [r7, #6]
 8001fca:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	88fa      	ldrh	r2, [r7, #6]
 8001fd0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2222      	movs	r2, #34	; 0x22
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ff6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0220 	orr.w	r2, r2, #32
 8002016:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800203a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	2b01      	cmp	r3, #1
 8002052:	d107      	bne.n	8002064 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0210 	bic.w	r2, r2, #16
 8002062:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f7fe f9c4 	bl	8000424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b21      	cmp	r3, #33	; 0x21
 80020b6:	d13e      	bne.n	8002136 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c0:	d114      	bne.n	80020ec <UART_Transmit_IT+0x48>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d110      	bne.n	80020ec <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	1c9a      	adds	r2, r3, #2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	621a      	str	r2, [r3, #32]
 80020ea:	e008      	b.n	80020fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	1c59      	adds	r1, r3, #1
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6211      	str	r1, [r2, #32]
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29b      	uxth	r3, r3
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4619      	mov	r1, r3
 800210c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10f      	bne.n	8002132 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002120:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002130:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002136:	2302      	movs	r3, #2
  }
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002158:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe f942 	bl	80003ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b22      	cmp	r3, #34	; 0x22
 8002184:	f040 8099 	bne.w	80022ba <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002190:	d117      	bne.n	80021c2 <UART_Receive_IT+0x50>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d113      	bne.n	80021c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	1c9a      	adds	r2, r3, #2
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
 80021c0:	e026      	b.n	8002210 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d4:	d007      	beq.n	80021e6 <UART_Receive_IT+0x74>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10a      	bne.n	80021f4 <UART_Receive_IT+0x82>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	701a      	strb	r2, [r3, #0]
 80021f2:	e008      	b.n	8002206 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002200:	b2da      	uxtb	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29b      	uxth	r3, r3
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4619      	mov	r1, r3
 800221e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002220:	2b00      	cmp	r3, #0
 8002222:	d148      	bne.n	80022b6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0220 	bic.w	r2, r2, #32
 8002232:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002242:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	2b01      	cmp	r3, #1
 8002262:	d123      	bne.n	80022ac <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0210 	bic.w	r2, r2, #16
 8002278:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b10      	cmp	r3, #16
 8002286:	d10a      	bne.n	800229e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022a2:	4619      	mov	r1, r3
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff fe2f 	bl	8001f08 <HAL_UARTEx_RxEventCallback>
 80022aa:	e002      	b.n	80022b2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7fe f8ab 	bl	8000408 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e002      	b.n	80022bc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80022ba:	2302      	movs	r3, #2
  }
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022fe:	f023 030c 	bic.w	r3, r3, #12
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	430b      	orrs	r3, r1
 800230a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a2c      	ldr	r2, [pc, #176]	; (80023d8 <UART_SetConfig+0x114>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d103      	bne.n	8002334 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800232c:	f7ff fabc 	bl	80018a8 <HAL_RCC_GetPCLK2Freq>
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	e002      	b.n	800233a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002334:	f7ff faa4 	bl	8001880 <HAL_RCC_GetPCLK1Freq>
 8002338:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	009a      	lsls	r2, r3, #2
 8002344:	441a      	add	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	4a22      	ldr	r2, [pc, #136]	; (80023dc <UART_SetConfig+0x118>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	0119      	lsls	r1, r3, #4
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	009a      	lsls	r2, r3, #2
 8002364:	441a      	add	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002370:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <UART_SetConfig+0x118>)
 8002372:	fba3 0302 	umull	r0, r3, r3, r2
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2064      	movs	r0, #100	; 0x64
 800237a:	fb00 f303 	mul.w	r3, r0, r3
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	3332      	adds	r3, #50	; 0x32
 8002384:	4a15      	ldr	r2, [pc, #84]	; (80023dc <UART_SetConfig+0x118>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002390:	4419      	add	r1, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	009a      	lsls	r2, r3, #2
 800239c:	441a      	add	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <UART_SetConfig+0x118>)
 80023aa:	fba3 0302 	umull	r0, r3, r3, r2
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2064      	movs	r0, #100	; 0x64
 80023b2:	fb00 f303 	mul.w	r3, r0, r3
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	3332      	adds	r3, #50	; 0x32
 80023bc:	4a07      	ldr	r2, [pc, #28]	; (80023dc <UART_SetConfig+0x118>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	f003 020f 	and.w	r2, r3, #15
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	440a      	add	r2, r1
 80023ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40013800 	.word	0x40013800
 80023dc:	51eb851f 	.word	0x51eb851f

080023e0 <__errno>:
 80023e0:	4b01      	ldr	r3, [pc, #4]	; (80023e8 <__errno+0x8>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	2000002c 	.word	0x2000002c

080023ec <__libc_init_array>:
 80023ec:	b570      	push	{r4, r5, r6, lr}
 80023ee:	2600      	movs	r6, #0
 80023f0:	4d0c      	ldr	r5, [pc, #48]	; (8002424 <__libc_init_array+0x38>)
 80023f2:	4c0d      	ldr	r4, [pc, #52]	; (8002428 <__libc_init_array+0x3c>)
 80023f4:	1b64      	subs	r4, r4, r5
 80023f6:	10a4      	asrs	r4, r4, #2
 80023f8:	42a6      	cmp	r6, r4
 80023fa:	d109      	bne.n	8002410 <__libc_init_array+0x24>
 80023fc:	f000 fce4 	bl	8002dc8 <_init>
 8002400:	2600      	movs	r6, #0
 8002402:	4d0a      	ldr	r5, [pc, #40]	; (800242c <__libc_init_array+0x40>)
 8002404:	4c0a      	ldr	r4, [pc, #40]	; (8002430 <__libc_init_array+0x44>)
 8002406:	1b64      	subs	r4, r4, r5
 8002408:	10a4      	asrs	r4, r4, #2
 800240a:	42a6      	cmp	r6, r4
 800240c:	d105      	bne.n	800241a <__libc_init_array+0x2e>
 800240e:	bd70      	pop	{r4, r5, r6, pc}
 8002410:	f855 3b04 	ldr.w	r3, [r5], #4
 8002414:	4798      	blx	r3
 8002416:	3601      	adds	r6, #1
 8002418:	e7ee      	b.n	80023f8 <__libc_init_array+0xc>
 800241a:	f855 3b04 	ldr.w	r3, [r5], #4
 800241e:	4798      	blx	r3
 8002420:	3601      	adds	r6, #1
 8002422:	e7f2      	b.n	800240a <__libc_init_array+0x1e>
 8002424:	08002e7c 	.word	0x08002e7c
 8002428:	08002e7c 	.word	0x08002e7c
 800242c:	08002e7c 	.word	0x08002e7c
 8002430:	08002e80 	.word	0x08002e80

08002434 <memset>:
 8002434:	4603      	mov	r3, r0
 8002436:	4402      	add	r2, r0
 8002438:	4293      	cmp	r3, r2
 800243a:	d100      	bne.n	800243e <memset+0xa>
 800243c:	4770      	bx	lr
 800243e:	f803 1b01 	strb.w	r1, [r3], #1
 8002442:	e7f9      	b.n	8002438 <memset+0x4>

08002444 <_puts_r>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	460e      	mov	r6, r1
 8002448:	4605      	mov	r5, r0
 800244a:	b118      	cbz	r0, 8002454 <_puts_r+0x10>
 800244c:	6983      	ldr	r3, [r0, #24]
 800244e:	b90b      	cbnz	r3, 8002454 <_puts_r+0x10>
 8002450:	f000 fa48 	bl	80028e4 <__sinit>
 8002454:	69ab      	ldr	r3, [r5, #24]
 8002456:	68ac      	ldr	r4, [r5, #8]
 8002458:	b913      	cbnz	r3, 8002460 <_puts_r+0x1c>
 800245a:	4628      	mov	r0, r5
 800245c:	f000 fa42 	bl	80028e4 <__sinit>
 8002460:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <_puts_r+0xd0>)
 8002462:	429c      	cmp	r4, r3
 8002464:	d120      	bne.n	80024a8 <_puts_r+0x64>
 8002466:	686c      	ldr	r4, [r5, #4]
 8002468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800246a:	07db      	lsls	r3, r3, #31
 800246c:	d405      	bmi.n	800247a <_puts_r+0x36>
 800246e:	89a3      	ldrh	r3, [r4, #12]
 8002470:	0598      	lsls	r0, r3, #22
 8002472:	d402      	bmi.n	800247a <_puts_r+0x36>
 8002474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002476:	f000 fad3 	bl	8002a20 <__retarget_lock_acquire_recursive>
 800247a:	89a3      	ldrh	r3, [r4, #12]
 800247c:	0719      	lsls	r1, r3, #28
 800247e:	d51d      	bpl.n	80024bc <_puts_r+0x78>
 8002480:	6923      	ldr	r3, [r4, #16]
 8002482:	b1db      	cbz	r3, 80024bc <_puts_r+0x78>
 8002484:	3e01      	subs	r6, #1
 8002486:	68a3      	ldr	r3, [r4, #8]
 8002488:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800248c:	3b01      	subs	r3, #1
 800248e:	60a3      	str	r3, [r4, #8]
 8002490:	bb39      	cbnz	r1, 80024e2 <_puts_r+0x9e>
 8002492:	2b00      	cmp	r3, #0
 8002494:	da38      	bge.n	8002508 <_puts_r+0xc4>
 8002496:	4622      	mov	r2, r4
 8002498:	210a      	movs	r1, #10
 800249a:	4628      	mov	r0, r5
 800249c:	f000 f848 	bl	8002530 <__swbuf_r>
 80024a0:	3001      	adds	r0, #1
 80024a2:	d011      	beq.n	80024c8 <_puts_r+0x84>
 80024a4:	250a      	movs	r5, #10
 80024a6:	e011      	b.n	80024cc <_puts_r+0x88>
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <_puts_r+0xd4>)
 80024aa:	429c      	cmp	r4, r3
 80024ac:	d101      	bne.n	80024b2 <_puts_r+0x6e>
 80024ae:	68ac      	ldr	r4, [r5, #8]
 80024b0:	e7da      	b.n	8002468 <_puts_r+0x24>
 80024b2:	4b1a      	ldr	r3, [pc, #104]	; (800251c <_puts_r+0xd8>)
 80024b4:	429c      	cmp	r4, r3
 80024b6:	bf08      	it	eq
 80024b8:	68ec      	ldreq	r4, [r5, #12]
 80024ba:	e7d5      	b.n	8002468 <_puts_r+0x24>
 80024bc:	4621      	mov	r1, r4
 80024be:	4628      	mov	r0, r5
 80024c0:	f000 f888 	bl	80025d4 <__swsetup_r>
 80024c4:	2800      	cmp	r0, #0
 80024c6:	d0dd      	beq.n	8002484 <_puts_r+0x40>
 80024c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80024cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024ce:	07da      	lsls	r2, r3, #31
 80024d0:	d405      	bmi.n	80024de <_puts_r+0x9a>
 80024d2:	89a3      	ldrh	r3, [r4, #12]
 80024d4:	059b      	lsls	r3, r3, #22
 80024d6:	d402      	bmi.n	80024de <_puts_r+0x9a>
 80024d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024da:	f000 faa2 	bl	8002a22 <__retarget_lock_release_recursive>
 80024de:	4628      	mov	r0, r5
 80024e0:	bd70      	pop	{r4, r5, r6, pc}
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	da04      	bge.n	80024f0 <_puts_r+0xac>
 80024e6:	69a2      	ldr	r2, [r4, #24]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	dc06      	bgt.n	80024fa <_puts_r+0xb6>
 80024ec:	290a      	cmp	r1, #10
 80024ee:	d004      	beq.n	80024fa <_puts_r+0xb6>
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	6022      	str	r2, [r4, #0]
 80024f6:	7019      	strb	r1, [r3, #0]
 80024f8:	e7c5      	b.n	8002486 <_puts_r+0x42>
 80024fa:	4622      	mov	r2, r4
 80024fc:	4628      	mov	r0, r5
 80024fe:	f000 f817 	bl	8002530 <__swbuf_r>
 8002502:	3001      	adds	r0, #1
 8002504:	d1bf      	bne.n	8002486 <_puts_r+0x42>
 8002506:	e7df      	b.n	80024c8 <_puts_r+0x84>
 8002508:	250a      	movs	r5, #10
 800250a:	6823      	ldr	r3, [r4, #0]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	6022      	str	r2, [r4, #0]
 8002510:	701d      	strb	r5, [r3, #0]
 8002512:	e7db      	b.n	80024cc <_puts_r+0x88>
 8002514:	08002e3c 	.word	0x08002e3c
 8002518:	08002e5c 	.word	0x08002e5c
 800251c:	08002e1c 	.word	0x08002e1c

08002520 <puts>:
 8002520:	4b02      	ldr	r3, [pc, #8]	; (800252c <puts+0xc>)
 8002522:	4601      	mov	r1, r0
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	f7ff bf8d 	b.w	8002444 <_puts_r>
 800252a:	bf00      	nop
 800252c:	2000002c 	.word	0x2000002c

08002530 <__swbuf_r>:
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	460e      	mov	r6, r1
 8002534:	4614      	mov	r4, r2
 8002536:	4605      	mov	r5, r0
 8002538:	b118      	cbz	r0, 8002542 <__swbuf_r+0x12>
 800253a:	6983      	ldr	r3, [r0, #24]
 800253c:	b90b      	cbnz	r3, 8002542 <__swbuf_r+0x12>
 800253e:	f000 f9d1 	bl	80028e4 <__sinit>
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <__swbuf_r+0x98>)
 8002544:	429c      	cmp	r4, r3
 8002546:	d12b      	bne.n	80025a0 <__swbuf_r+0x70>
 8002548:	686c      	ldr	r4, [r5, #4]
 800254a:	69a3      	ldr	r3, [r4, #24]
 800254c:	60a3      	str	r3, [r4, #8]
 800254e:	89a3      	ldrh	r3, [r4, #12]
 8002550:	071a      	lsls	r2, r3, #28
 8002552:	d52f      	bpl.n	80025b4 <__swbuf_r+0x84>
 8002554:	6923      	ldr	r3, [r4, #16]
 8002556:	b36b      	cbz	r3, 80025b4 <__swbuf_r+0x84>
 8002558:	6923      	ldr	r3, [r4, #16]
 800255a:	6820      	ldr	r0, [r4, #0]
 800255c:	b2f6      	uxtb	r6, r6
 800255e:	1ac0      	subs	r0, r0, r3
 8002560:	6963      	ldr	r3, [r4, #20]
 8002562:	4637      	mov	r7, r6
 8002564:	4283      	cmp	r3, r0
 8002566:	dc04      	bgt.n	8002572 <__swbuf_r+0x42>
 8002568:	4621      	mov	r1, r4
 800256a:	4628      	mov	r0, r5
 800256c:	f000 f926 	bl	80027bc <_fflush_r>
 8002570:	bb30      	cbnz	r0, 80025c0 <__swbuf_r+0x90>
 8002572:	68a3      	ldr	r3, [r4, #8]
 8002574:	3001      	adds	r0, #1
 8002576:	3b01      	subs	r3, #1
 8002578:	60a3      	str	r3, [r4, #8]
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	6022      	str	r2, [r4, #0]
 8002580:	701e      	strb	r6, [r3, #0]
 8002582:	6963      	ldr	r3, [r4, #20]
 8002584:	4283      	cmp	r3, r0
 8002586:	d004      	beq.n	8002592 <__swbuf_r+0x62>
 8002588:	89a3      	ldrh	r3, [r4, #12]
 800258a:	07db      	lsls	r3, r3, #31
 800258c:	d506      	bpl.n	800259c <__swbuf_r+0x6c>
 800258e:	2e0a      	cmp	r6, #10
 8002590:	d104      	bne.n	800259c <__swbuf_r+0x6c>
 8002592:	4621      	mov	r1, r4
 8002594:	4628      	mov	r0, r5
 8002596:	f000 f911 	bl	80027bc <_fflush_r>
 800259a:	b988      	cbnz	r0, 80025c0 <__swbuf_r+0x90>
 800259c:	4638      	mov	r0, r7
 800259e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <__swbuf_r+0x9c>)
 80025a2:	429c      	cmp	r4, r3
 80025a4:	d101      	bne.n	80025aa <__swbuf_r+0x7a>
 80025a6:	68ac      	ldr	r4, [r5, #8]
 80025a8:	e7cf      	b.n	800254a <__swbuf_r+0x1a>
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <__swbuf_r+0xa0>)
 80025ac:	429c      	cmp	r4, r3
 80025ae:	bf08      	it	eq
 80025b0:	68ec      	ldreq	r4, [r5, #12]
 80025b2:	e7ca      	b.n	800254a <__swbuf_r+0x1a>
 80025b4:	4621      	mov	r1, r4
 80025b6:	4628      	mov	r0, r5
 80025b8:	f000 f80c 	bl	80025d4 <__swsetup_r>
 80025bc:	2800      	cmp	r0, #0
 80025be:	d0cb      	beq.n	8002558 <__swbuf_r+0x28>
 80025c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80025c4:	e7ea      	b.n	800259c <__swbuf_r+0x6c>
 80025c6:	bf00      	nop
 80025c8:	08002e3c 	.word	0x08002e3c
 80025cc:	08002e5c 	.word	0x08002e5c
 80025d0:	08002e1c 	.word	0x08002e1c

080025d4 <__swsetup_r>:
 80025d4:	4b32      	ldr	r3, [pc, #200]	; (80026a0 <__swsetup_r+0xcc>)
 80025d6:	b570      	push	{r4, r5, r6, lr}
 80025d8:	681d      	ldr	r5, [r3, #0]
 80025da:	4606      	mov	r6, r0
 80025dc:	460c      	mov	r4, r1
 80025de:	b125      	cbz	r5, 80025ea <__swsetup_r+0x16>
 80025e0:	69ab      	ldr	r3, [r5, #24]
 80025e2:	b913      	cbnz	r3, 80025ea <__swsetup_r+0x16>
 80025e4:	4628      	mov	r0, r5
 80025e6:	f000 f97d 	bl	80028e4 <__sinit>
 80025ea:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <__swsetup_r+0xd0>)
 80025ec:	429c      	cmp	r4, r3
 80025ee:	d10f      	bne.n	8002610 <__swsetup_r+0x3c>
 80025f0:	686c      	ldr	r4, [r5, #4]
 80025f2:	89a3      	ldrh	r3, [r4, #12]
 80025f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025f8:	0719      	lsls	r1, r3, #28
 80025fa:	d42c      	bmi.n	8002656 <__swsetup_r+0x82>
 80025fc:	06dd      	lsls	r5, r3, #27
 80025fe:	d411      	bmi.n	8002624 <__swsetup_r+0x50>
 8002600:	2309      	movs	r3, #9
 8002602:	6033      	str	r3, [r6, #0]
 8002604:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800260c:	81a3      	strh	r3, [r4, #12]
 800260e:	e03e      	b.n	800268e <__swsetup_r+0xba>
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <__swsetup_r+0xd4>)
 8002612:	429c      	cmp	r4, r3
 8002614:	d101      	bne.n	800261a <__swsetup_r+0x46>
 8002616:	68ac      	ldr	r4, [r5, #8]
 8002618:	e7eb      	b.n	80025f2 <__swsetup_r+0x1e>
 800261a:	4b24      	ldr	r3, [pc, #144]	; (80026ac <__swsetup_r+0xd8>)
 800261c:	429c      	cmp	r4, r3
 800261e:	bf08      	it	eq
 8002620:	68ec      	ldreq	r4, [r5, #12]
 8002622:	e7e6      	b.n	80025f2 <__swsetup_r+0x1e>
 8002624:	0758      	lsls	r0, r3, #29
 8002626:	d512      	bpl.n	800264e <__swsetup_r+0x7a>
 8002628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800262a:	b141      	cbz	r1, 800263e <__swsetup_r+0x6a>
 800262c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002630:	4299      	cmp	r1, r3
 8002632:	d002      	beq.n	800263a <__swsetup_r+0x66>
 8002634:	4630      	mov	r0, r6
 8002636:	f000 fa59 	bl	8002aec <_free_r>
 800263a:	2300      	movs	r3, #0
 800263c:	6363      	str	r3, [r4, #52]	; 0x34
 800263e:	89a3      	ldrh	r3, [r4, #12]
 8002640:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002644:	81a3      	strh	r3, [r4, #12]
 8002646:	2300      	movs	r3, #0
 8002648:	6063      	str	r3, [r4, #4]
 800264a:	6923      	ldr	r3, [r4, #16]
 800264c:	6023      	str	r3, [r4, #0]
 800264e:	89a3      	ldrh	r3, [r4, #12]
 8002650:	f043 0308 	orr.w	r3, r3, #8
 8002654:	81a3      	strh	r3, [r4, #12]
 8002656:	6923      	ldr	r3, [r4, #16]
 8002658:	b94b      	cbnz	r3, 800266e <__swsetup_r+0x9a>
 800265a:	89a3      	ldrh	r3, [r4, #12]
 800265c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002664:	d003      	beq.n	800266e <__swsetup_r+0x9a>
 8002666:	4621      	mov	r1, r4
 8002668:	4630      	mov	r0, r6
 800266a:	f000 f9ff 	bl	8002a6c <__smakebuf_r>
 800266e:	89a0      	ldrh	r0, [r4, #12]
 8002670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002674:	f010 0301 	ands.w	r3, r0, #1
 8002678:	d00a      	beq.n	8002690 <__swsetup_r+0xbc>
 800267a:	2300      	movs	r3, #0
 800267c:	60a3      	str	r3, [r4, #8]
 800267e:	6963      	ldr	r3, [r4, #20]
 8002680:	425b      	negs	r3, r3
 8002682:	61a3      	str	r3, [r4, #24]
 8002684:	6923      	ldr	r3, [r4, #16]
 8002686:	b943      	cbnz	r3, 800269a <__swsetup_r+0xc6>
 8002688:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800268c:	d1ba      	bne.n	8002604 <__swsetup_r+0x30>
 800268e:	bd70      	pop	{r4, r5, r6, pc}
 8002690:	0781      	lsls	r1, r0, #30
 8002692:	bf58      	it	pl
 8002694:	6963      	ldrpl	r3, [r4, #20]
 8002696:	60a3      	str	r3, [r4, #8]
 8002698:	e7f4      	b.n	8002684 <__swsetup_r+0xb0>
 800269a:	2000      	movs	r0, #0
 800269c:	e7f7      	b.n	800268e <__swsetup_r+0xba>
 800269e:	bf00      	nop
 80026a0:	2000002c 	.word	0x2000002c
 80026a4:	08002e3c 	.word	0x08002e3c
 80026a8:	08002e5c 	.word	0x08002e5c
 80026ac:	08002e1c 	.word	0x08002e1c

080026b0 <__sflush_r>:
 80026b0:	898a      	ldrh	r2, [r1, #12]
 80026b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026b6:	4605      	mov	r5, r0
 80026b8:	0710      	lsls	r0, r2, #28
 80026ba:	460c      	mov	r4, r1
 80026bc:	d458      	bmi.n	8002770 <__sflush_r+0xc0>
 80026be:	684b      	ldr	r3, [r1, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	dc05      	bgt.n	80026d0 <__sflush_r+0x20>
 80026c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	dc02      	bgt.n	80026d0 <__sflush_r+0x20>
 80026ca:	2000      	movs	r0, #0
 80026cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026d2:	2e00      	cmp	r6, #0
 80026d4:	d0f9      	beq.n	80026ca <__sflush_r+0x1a>
 80026d6:	2300      	movs	r3, #0
 80026d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80026dc:	682f      	ldr	r7, [r5, #0]
 80026de:	602b      	str	r3, [r5, #0]
 80026e0:	d032      	beq.n	8002748 <__sflush_r+0x98>
 80026e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026e4:	89a3      	ldrh	r3, [r4, #12]
 80026e6:	075a      	lsls	r2, r3, #29
 80026e8:	d505      	bpl.n	80026f6 <__sflush_r+0x46>
 80026ea:	6863      	ldr	r3, [r4, #4]
 80026ec:	1ac0      	subs	r0, r0, r3
 80026ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026f0:	b10b      	cbz	r3, 80026f6 <__sflush_r+0x46>
 80026f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026f4:	1ac0      	subs	r0, r0, r3
 80026f6:	2300      	movs	r3, #0
 80026f8:	4602      	mov	r2, r0
 80026fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026fc:	4628      	mov	r0, r5
 80026fe:	6a21      	ldr	r1, [r4, #32]
 8002700:	47b0      	blx	r6
 8002702:	1c43      	adds	r3, r0, #1
 8002704:	89a3      	ldrh	r3, [r4, #12]
 8002706:	d106      	bne.n	8002716 <__sflush_r+0x66>
 8002708:	6829      	ldr	r1, [r5, #0]
 800270a:	291d      	cmp	r1, #29
 800270c:	d82c      	bhi.n	8002768 <__sflush_r+0xb8>
 800270e:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <__sflush_r+0x108>)
 8002710:	40ca      	lsrs	r2, r1
 8002712:	07d6      	lsls	r6, r2, #31
 8002714:	d528      	bpl.n	8002768 <__sflush_r+0xb8>
 8002716:	2200      	movs	r2, #0
 8002718:	6062      	str	r2, [r4, #4]
 800271a:	6922      	ldr	r2, [r4, #16]
 800271c:	04d9      	lsls	r1, r3, #19
 800271e:	6022      	str	r2, [r4, #0]
 8002720:	d504      	bpl.n	800272c <__sflush_r+0x7c>
 8002722:	1c42      	adds	r2, r0, #1
 8002724:	d101      	bne.n	800272a <__sflush_r+0x7a>
 8002726:	682b      	ldr	r3, [r5, #0]
 8002728:	b903      	cbnz	r3, 800272c <__sflush_r+0x7c>
 800272a:	6560      	str	r0, [r4, #84]	; 0x54
 800272c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800272e:	602f      	str	r7, [r5, #0]
 8002730:	2900      	cmp	r1, #0
 8002732:	d0ca      	beq.n	80026ca <__sflush_r+0x1a>
 8002734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002738:	4299      	cmp	r1, r3
 800273a:	d002      	beq.n	8002742 <__sflush_r+0x92>
 800273c:	4628      	mov	r0, r5
 800273e:	f000 f9d5 	bl	8002aec <_free_r>
 8002742:	2000      	movs	r0, #0
 8002744:	6360      	str	r0, [r4, #52]	; 0x34
 8002746:	e7c1      	b.n	80026cc <__sflush_r+0x1c>
 8002748:	6a21      	ldr	r1, [r4, #32]
 800274a:	2301      	movs	r3, #1
 800274c:	4628      	mov	r0, r5
 800274e:	47b0      	blx	r6
 8002750:	1c41      	adds	r1, r0, #1
 8002752:	d1c7      	bne.n	80026e4 <__sflush_r+0x34>
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0c4      	beq.n	80026e4 <__sflush_r+0x34>
 800275a:	2b1d      	cmp	r3, #29
 800275c:	d001      	beq.n	8002762 <__sflush_r+0xb2>
 800275e:	2b16      	cmp	r3, #22
 8002760:	d101      	bne.n	8002766 <__sflush_r+0xb6>
 8002762:	602f      	str	r7, [r5, #0]
 8002764:	e7b1      	b.n	80026ca <__sflush_r+0x1a>
 8002766:	89a3      	ldrh	r3, [r4, #12]
 8002768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800276c:	81a3      	strh	r3, [r4, #12]
 800276e:	e7ad      	b.n	80026cc <__sflush_r+0x1c>
 8002770:	690f      	ldr	r7, [r1, #16]
 8002772:	2f00      	cmp	r7, #0
 8002774:	d0a9      	beq.n	80026ca <__sflush_r+0x1a>
 8002776:	0793      	lsls	r3, r2, #30
 8002778:	bf18      	it	ne
 800277a:	2300      	movne	r3, #0
 800277c:	680e      	ldr	r6, [r1, #0]
 800277e:	bf08      	it	eq
 8002780:	694b      	ldreq	r3, [r1, #20]
 8002782:	eba6 0807 	sub.w	r8, r6, r7
 8002786:	600f      	str	r7, [r1, #0]
 8002788:	608b      	str	r3, [r1, #8]
 800278a:	f1b8 0f00 	cmp.w	r8, #0
 800278e:	dd9c      	ble.n	80026ca <__sflush_r+0x1a>
 8002790:	4643      	mov	r3, r8
 8002792:	463a      	mov	r2, r7
 8002794:	4628      	mov	r0, r5
 8002796:	6a21      	ldr	r1, [r4, #32]
 8002798:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800279a:	47b0      	blx	r6
 800279c:	2800      	cmp	r0, #0
 800279e:	dc06      	bgt.n	80027ae <__sflush_r+0xfe>
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027aa:	81a3      	strh	r3, [r4, #12]
 80027ac:	e78e      	b.n	80026cc <__sflush_r+0x1c>
 80027ae:	4407      	add	r7, r0
 80027b0:	eba8 0800 	sub.w	r8, r8, r0
 80027b4:	e7e9      	b.n	800278a <__sflush_r+0xda>
 80027b6:	bf00      	nop
 80027b8:	20400001 	.word	0x20400001

080027bc <_fflush_r>:
 80027bc:	b538      	push	{r3, r4, r5, lr}
 80027be:	690b      	ldr	r3, [r1, #16]
 80027c0:	4605      	mov	r5, r0
 80027c2:	460c      	mov	r4, r1
 80027c4:	b913      	cbnz	r3, 80027cc <_fflush_r+0x10>
 80027c6:	2500      	movs	r5, #0
 80027c8:	4628      	mov	r0, r5
 80027ca:	bd38      	pop	{r3, r4, r5, pc}
 80027cc:	b118      	cbz	r0, 80027d6 <_fflush_r+0x1a>
 80027ce:	6983      	ldr	r3, [r0, #24]
 80027d0:	b90b      	cbnz	r3, 80027d6 <_fflush_r+0x1a>
 80027d2:	f000 f887 	bl	80028e4 <__sinit>
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <_fflush_r+0x6c>)
 80027d8:	429c      	cmp	r4, r3
 80027da:	d11b      	bne.n	8002814 <_fflush_r+0x58>
 80027dc:	686c      	ldr	r4, [r5, #4]
 80027de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ef      	beq.n	80027c6 <_fflush_r+0xa>
 80027e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80027e8:	07d0      	lsls	r0, r2, #31
 80027ea:	d404      	bmi.n	80027f6 <_fflush_r+0x3a>
 80027ec:	0599      	lsls	r1, r3, #22
 80027ee:	d402      	bmi.n	80027f6 <_fflush_r+0x3a>
 80027f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027f2:	f000 f915 	bl	8002a20 <__retarget_lock_acquire_recursive>
 80027f6:	4628      	mov	r0, r5
 80027f8:	4621      	mov	r1, r4
 80027fa:	f7ff ff59 	bl	80026b0 <__sflush_r>
 80027fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002800:	4605      	mov	r5, r0
 8002802:	07da      	lsls	r2, r3, #31
 8002804:	d4e0      	bmi.n	80027c8 <_fflush_r+0xc>
 8002806:	89a3      	ldrh	r3, [r4, #12]
 8002808:	059b      	lsls	r3, r3, #22
 800280a:	d4dd      	bmi.n	80027c8 <_fflush_r+0xc>
 800280c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800280e:	f000 f908 	bl	8002a22 <__retarget_lock_release_recursive>
 8002812:	e7d9      	b.n	80027c8 <_fflush_r+0xc>
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <_fflush_r+0x70>)
 8002816:	429c      	cmp	r4, r3
 8002818:	d101      	bne.n	800281e <_fflush_r+0x62>
 800281a:	68ac      	ldr	r4, [r5, #8]
 800281c:	e7df      	b.n	80027de <_fflush_r+0x22>
 800281e:	4b04      	ldr	r3, [pc, #16]	; (8002830 <_fflush_r+0x74>)
 8002820:	429c      	cmp	r4, r3
 8002822:	bf08      	it	eq
 8002824:	68ec      	ldreq	r4, [r5, #12]
 8002826:	e7da      	b.n	80027de <_fflush_r+0x22>
 8002828:	08002e3c 	.word	0x08002e3c
 800282c:	08002e5c 	.word	0x08002e5c
 8002830:	08002e1c 	.word	0x08002e1c

08002834 <std>:
 8002834:	2300      	movs	r3, #0
 8002836:	b510      	push	{r4, lr}
 8002838:	4604      	mov	r4, r0
 800283a:	e9c0 3300 	strd	r3, r3, [r0]
 800283e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002842:	6083      	str	r3, [r0, #8]
 8002844:	8181      	strh	r1, [r0, #12]
 8002846:	6643      	str	r3, [r0, #100]	; 0x64
 8002848:	81c2      	strh	r2, [r0, #14]
 800284a:	6183      	str	r3, [r0, #24]
 800284c:	4619      	mov	r1, r3
 800284e:	2208      	movs	r2, #8
 8002850:	305c      	adds	r0, #92	; 0x5c
 8002852:	f7ff fdef 	bl	8002434 <memset>
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <std+0x38>)
 8002858:	6224      	str	r4, [r4, #32]
 800285a:	6263      	str	r3, [r4, #36]	; 0x24
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <std+0x3c>)
 800285e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <std+0x40>)
 8002862:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <std+0x44>)
 8002866:	6323      	str	r3, [r4, #48]	; 0x30
 8002868:	bd10      	pop	{r4, pc}
 800286a:	bf00      	nop
 800286c:	08002c59 	.word	0x08002c59
 8002870:	08002c7b 	.word	0x08002c7b
 8002874:	08002cb3 	.word	0x08002cb3
 8002878:	08002cd7 	.word	0x08002cd7

0800287c <_cleanup_r>:
 800287c:	4901      	ldr	r1, [pc, #4]	; (8002884 <_cleanup_r+0x8>)
 800287e:	f000 b8af 	b.w	80029e0 <_fwalk_reent>
 8002882:	bf00      	nop
 8002884:	080027bd 	.word	0x080027bd

08002888 <__sfmoreglue>:
 8002888:	b570      	push	{r4, r5, r6, lr}
 800288a:	2568      	movs	r5, #104	; 0x68
 800288c:	1e4a      	subs	r2, r1, #1
 800288e:	4355      	muls	r5, r2
 8002890:	460e      	mov	r6, r1
 8002892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002896:	f000 f975 	bl	8002b84 <_malloc_r>
 800289a:	4604      	mov	r4, r0
 800289c:	b140      	cbz	r0, 80028b0 <__sfmoreglue+0x28>
 800289e:	2100      	movs	r1, #0
 80028a0:	e9c0 1600 	strd	r1, r6, [r0]
 80028a4:	300c      	adds	r0, #12
 80028a6:	60a0      	str	r0, [r4, #8]
 80028a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80028ac:	f7ff fdc2 	bl	8002434 <memset>
 80028b0:	4620      	mov	r0, r4
 80028b2:	bd70      	pop	{r4, r5, r6, pc}

080028b4 <__sfp_lock_acquire>:
 80028b4:	4801      	ldr	r0, [pc, #4]	; (80028bc <__sfp_lock_acquire+0x8>)
 80028b6:	f000 b8b3 	b.w	8002a20 <__retarget_lock_acquire_recursive>
 80028ba:	bf00      	nop
 80028bc:	2000012c 	.word	0x2000012c

080028c0 <__sfp_lock_release>:
 80028c0:	4801      	ldr	r0, [pc, #4]	; (80028c8 <__sfp_lock_release+0x8>)
 80028c2:	f000 b8ae 	b.w	8002a22 <__retarget_lock_release_recursive>
 80028c6:	bf00      	nop
 80028c8:	2000012c 	.word	0x2000012c

080028cc <__sinit_lock_acquire>:
 80028cc:	4801      	ldr	r0, [pc, #4]	; (80028d4 <__sinit_lock_acquire+0x8>)
 80028ce:	f000 b8a7 	b.w	8002a20 <__retarget_lock_acquire_recursive>
 80028d2:	bf00      	nop
 80028d4:	20000127 	.word	0x20000127

080028d8 <__sinit_lock_release>:
 80028d8:	4801      	ldr	r0, [pc, #4]	; (80028e0 <__sinit_lock_release+0x8>)
 80028da:	f000 b8a2 	b.w	8002a22 <__retarget_lock_release_recursive>
 80028de:	bf00      	nop
 80028e0:	20000127 	.word	0x20000127

080028e4 <__sinit>:
 80028e4:	b510      	push	{r4, lr}
 80028e6:	4604      	mov	r4, r0
 80028e8:	f7ff fff0 	bl	80028cc <__sinit_lock_acquire>
 80028ec:	69a3      	ldr	r3, [r4, #24]
 80028ee:	b11b      	cbz	r3, 80028f8 <__sinit+0x14>
 80028f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028f4:	f7ff bff0 	b.w	80028d8 <__sinit_lock_release>
 80028f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80028fc:	6523      	str	r3, [r4, #80]	; 0x50
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <__sinit+0x68>)
 8002900:	4a13      	ldr	r2, [pc, #76]	; (8002950 <__sinit+0x6c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	62a2      	str	r2, [r4, #40]	; 0x28
 8002906:	42a3      	cmp	r3, r4
 8002908:	bf08      	it	eq
 800290a:	2301      	moveq	r3, #1
 800290c:	4620      	mov	r0, r4
 800290e:	bf08      	it	eq
 8002910:	61a3      	streq	r3, [r4, #24]
 8002912:	f000 f81f 	bl	8002954 <__sfp>
 8002916:	6060      	str	r0, [r4, #4]
 8002918:	4620      	mov	r0, r4
 800291a:	f000 f81b 	bl	8002954 <__sfp>
 800291e:	60a0      	str	r0, [r4, #8]
 8002920:	4620      	mov	r0, r4
 8002922:	f000 f817 	bl	8002954 <__sfp>
 8002926:	2200      	movs	r2, #0
 8002928:	2104      	movs	r1, #4
 800292a:	60e0      	str	r0, [r4, #12]
 800292c:	6860      	ldr	r0, [r4, #4]
 800292e:	f7ff ff81 	bl	8002834 <std>
 8002932:	2201      	movs	r2, #1
 8002934:	2109      	movs	r1, #9
 8002936:	68a0      	ldr	r0, [r4, #8]
 8002938:	f7ff ff7c 	bl	8002834 <std>
 800293c:	2202      	movs	r2, #2
 800293e:	2112      	movs	r1, #18
 8002940:	68e0      	ldr	r0, [r4, #12]
 8002942:	f7ff ff77 	bl	8002834 <std>
 8002946:	2301      	movs	r3, #1
 8002948:	61a3      	str	r3, [r4, #24]
 800294a:	e7d1      	b.n	80028f0 <__sinit+0xc>
 800294c:	08002e18 	.word	0x08002e18
 8002950:	0800287d 	.word	0x0800287d

08002954 <__sfp>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	4607      	mov	r7, r0
 8002958:	f7ff ffac 	bl	80028b4 <__sfp_lock_acquire>
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <__sfp+0x84>)
 800295e:	681e      	ldr	r6, [r3, #0]
 8002960:	69b3      	ldr	r3, [r6, #24]
 8002962:	b913      	cbnz	r3, 800296a <__sfp+0x16>
 8002964:	4630      	mov	r0, r6
 8002966:	f7ff ffbd 	bl	80028e4 <__sinit>
 800296a:	3648      	adds	r6, #72	; 0x48
 800296c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002970:	3b01      	subs	r3, #1
 8002972:	d503      	bpl.n	800297c <__sfp+0x28>
 8002974:	6833      	ldr	r3, [r6, #0]
 8002976:	b30b      	cbz	r3, 80029bc <__sfp+0x68>
 8002978:	6836      	ldr	r6, [r6, #0]
 800297a:	e7f7      	b.n	800296c <__sfp+0x18>
 800297c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002980:	b9d5      	cbnz	r5, 80029b8 <__sfp+0x64>
 8002982:	4b16      	ldr	r3, [pc, #88]	; (80029dc <__sfp+0x88>)
 8002984:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002988:	60e3      	str	r3, [r4, #12]
 800298a:	6665      	str	r5, [r4, #100]	; 0x64
 800298c:	f000 f847 	bl	8002a1e <__retarget_lock_init_recursive>
 8002990:	f7ff ff96 	bl	80028c0 <__sfp_lock_release>
 8002994:	2208      	movs	r2, #8
 8002996:	4629      	mov	r1, r5
 8002998:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800299c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80029a0:	6025      	str	r5, [r4, #0]
 80029a2:	61a5      	str	r5, [r4, #24]
 80029a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80029a8:	f7ff fd44 	bl	8002434 <memset>
 80029ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80029b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80029b4:	4620      	mov	r0, r4
 80029b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029b8:	3468      	adds	r4, #104	; 0x68
 80029ba:	e7d9      	b.n	8002970 <__sfp+0x1c>
 80029bc:	2104      	movs	r1, #4
 80029be:	4638      	mov	r0, r7
 80029c0:	f7ff ff62 	bl	8002888 <__sfmoreglue>
 80029c4:	4604      	mov	r4, r0
 80029c6:	6030      	str	r0, [r6, #0]
 80029c8:	2800      	cmp	r0, #0
 80029ca:	d1d5      	bne.n	8002978 <__sfp+0x24>
 80029cc:	f7ff ff78 	bl	80028c0 <__sfp_lock_release>
 80029d0:	230c      	movs	r3, #12
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	e7ee      	b.n	80029b4 <__sfp+0x60>
 80029d6:	bf00      	nop
 80029d8:	08002e18 	.word	0x08002e18
 80029dc:	ffff0001 	.word	0xffff0001

080029e0 <_fwalk_reent>:
 80029e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029e4:	4606      	mov	r6, r0
 80029e6:	4688      	mov	r8, r1
 80029e8:	2700      	movs	r7, #0
 80029ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80029ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029f2:	f1b9 0901 	subs.w	r9, r9, #1
 80029f6:	d505      	bpl.n	8002a04 <_fwalk_reent+0x24>
 80029f8:	6824      	ldr	r4, [r4, #0]
 80029fa:	2c00      	cmp	r4, #0
 80029fc:	d1f7      	bne.n	80029ee <_fwalk_reent+0xe>
 80029fe:	4638      	mov	r0, r7
 8002a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a04:	89ab      	ldrh	r3, [r5, #12]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d907      	bls.n	8002a1a <_fwalk_reent+0x3a>
 8002a0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	d003      	beq.n	8002a1a <_fwalk_reent+0x3a>
 8002a12:	4629      	mov	r1, r5
 8002a14:	4630      	mov	r0, r6
 8002a16:	47c0      	blx	r8
 8002a18:	4307      	orrs	r7, r0
 8002a1a:	3568      	adds	r5, #104	; 0x68
 8002a1c:	e7e9      	b.n	80029f2 <_fwalk_reent+0x12>

08002a1e <__retarget_lock_init_recursive>:
 8002a1e:	4770      	bx	lr

08002a20 <__retarget_lock_acquire_recursive>:
 8002a20:	4770      	bx	lr

08002a22 <__retarget_lock_release_recursive>:
 8002a22:	4770      	bx	lr

08002a24 <__swhatbuf_r>:
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	460e      	mov	r6, r1
 8002a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	2900      	cmp	r1, #0
 8002a30:	461d      	mov	r5, r3
 8002a32:	b096      	sub	sp, #88	; 0x58
 8002a34:	da07      	bge.n	8002a46 <__swhatbuf_r+0x22>
 8002a36:	2300      	movs	r3, #0
 8002a38:	602b      	str	r3, [r5, #0]
 8002a3a:	89b3      	ldrh	r3, [r6, #12]
 8002a3c:	061a      	lsls	r2, r3, #24
 8002a3e:	d410      	bmi.n	8002a62 <__swhatbuf_r+0x3e>
 8002a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a44:	e00e      	b.n	8002a64 <__swhatbuf_r+0x40>
 8002a46:	466a      	mov	r2, sp
 8002a48:	f000 f96c 	bl	8002d24 <_fstat_r>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	dbf2      	blt.n	8002a36 <__swhatbuf_r+0x12>
 8002a50:	9a01      	ldr	r2, [sp, #4]
 8002a52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002a56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002a5a:	425a      	negs	r2, r3
 8002a5c:	415a      	adcs	r2, r3
 8002a5e:	602a      	str	r2, [r5, #0]
 8002a60:	e7ee      	b.n	8002a40 <__swhatbuf_r+0x1c>
 8002a62:	2340      	movs	r3, #64	; 0x40
 8002a64:	2000      	movs	r0, #0
 8002a66:	6023      	str	r3, [r4, #0]
 8002a68:	b016      	add	sp, #88	; 0x58
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}

08002a6c <__smakebuf_r>:
 8002a6c:	898b      	ldrh	r3, [r1, #12]
 8002a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a70:	079d      	lsls	r5, r3, #30
 8002a72:	4606      	mov	r6, r0
 8002a74:	460c      	mov	r4, r1
 8002a76:	d507      	bpl.n	8002a88 <__smakebuf_r+0x1c>
 8002a78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a7c:	6023      	str	r3, [r4, #0]
 8002a7e:	6123      	str	r3, [r4, #16]
 8002a80:	2301      	movs	r3, #1
 8002a82:	6163      	str	r3, [r4, #20]
 8002a84:	b002      	add	sp, #8
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
 8002a88:	466a      	mov	r2, sp
 8002a8a:	ab01      	add	r3, sp, #4
 8002a8c:	f7ff ffca 	bl	8002a24 <__swhatbuf_r>
 8002a90:	9900      	ldr	r1, [sp, #0]
 8002a92:	4605      	mov	r5, r0
 8002a94:	4630      	mov	r0, r6
 8002a96:	f000 f875 	bl	8002b84 <_malloc_r>
 8002a9a:	b948      	cbnz	r0, 8002ab0 <__smakebuf_r+0x44>
 8002a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aa0:	059a      	lsls	r2, r3, #22
 8002aa2:	d4ef      	bmi.n	8002a84 <__smakebuf_r+0x18>
 8002aa4:	f023 0303 	bic.w	r3, r3, #3
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	81a3      	strh	r3, [r4, #12]
 8002aae:	e7e3      	b.n	8002a78 <__smakebuf_r+0xc>
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <__smakebuf_r+0x7c>)
 8002ab2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ab4:	89a3      	ldrh	r3, [r4, #12]
 8002ab6:	6020      	str	r0, [r4, #0]
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abc:	81a3      	strh	r3, [r4, #12]
 8002abe:	9b00      	ldr	r3, [sp, #0]
 8002ac0:	6120      	str	r0, [r4, #16]
 8002ac2:	6163      	str	r3, [r4, #20]
 8002ac4:	9b01      	ldr	r3, [sp, #4]
 8002ac6:	b15b      	cbz	r3, 8002ae0 <__smakebuf_r+0x74>
 8002ac8:	4630      	mov	r0, r6
 8002aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ace:	f000 f93b 	bl	8002d48 <_isatty_r>
 8002ad2:	b128      	cbz	r0, 8002ae0 <__smakebuf_r+0x74>
 8002ad4:	89a3      	ldrh	r3, [r4, #12]
 8002ad6:	f023 0303 	bic.w	r3, r3, #3
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	81a3      	strh	r3, [r4, #12]
 8002ae0:	89a0      	ldrh	r0, [r4, #12]
 8002ae2:	4305      	orrs	r5, r0
 8002ae4:	81a5      	strh	r5, [r4, #12]
 8002ae6:	e7cd      	b.n	8002a84 <__smakebuf_r+0x18>
 8002ae8:	0800287d 	.word	0x0800287d

08002aec <_free_r>:
 8002aec:	b538      	push	{r3, r4, r5, lr}
 8002aee:	4605      	mov	r5, r0
 8002af0:	2900      	cmp	r1, #0
 8002af2:	d043      	beq.n	8002b7c <_free_r+0x90>
 8002af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002af8:	1f0c      	subs	r4, r1, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bfb8      	it	lt
 8002afe:	18e4      	addlt	r4, r4, r3
 8002b00:	f000 f944 	bl	8002d8c <__malloc_lock>
 8002b04:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <_free_r+0x94>)
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	4610      	mov	r0, r2
 8002b0a:	b933      	cbnz	r3, 8002b1a <_free_r+0x2e>
 8002b0c:	6063      	str	r3, [r4, #4]
 8002b0e:	6014      	str	r4, [r2, #0]
 8002b10:	4628      	mov	r0, r5
 8002b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b16:	f000 b93f 	b.w	8002d98 <__malloc_unlock>
 8002b1a:	42a3      	cmp	r3, r4
 8002b1c:	d90a      	bls.n	8002b34 <_free_r+0x48>
 8002b1e:	6821      	ldr	r1, [r4, #0]
 8002b20:	1862      	adds	r2, r4, r1
 8002b22:	4293      	cmp	r3, r2
 8002b24:	bf01      	itttt	eq
 8002b26:	681a      	ldreq	r2, [r3, #0]
 8002b28:	685b      	ldreq	r3, [r3, #4]
 8002b2a:	1852      	addeq	r2, r2, r1
 8002b2c:	6022      	streq	r2, [r4, #0]
 8002b2e:	6063      	str	r3, [r4, #4]
 8002b30:	6004      	str	r4, [r0, #0]
 8002b32:	e7ed      	b.n	8002b10 <_free_r+0x24>
 8002b34:	461a      	mov	r2, r3
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	b10b      	cbz	r3, 8002b3e <_free_r+0x52>
 8002b3a:	42a3      	cmp	r3, r4
 8002b3c:	d9fa      	bls.n	8002b34 <_free_r+0x48>
 8002b3e:	6811      	ldr	r1, [r2, #0]
 8002b40:	1850      	adds	r0, r2, r1
 8002b42:	42a0      	cmp	r0, r4
 8002b44:	d10b      	bne.n	8002b5e <_free_r+0x72>
 8002b46:	6820      	ldr	r0, [r4, #0]
 8002b48:	4401      	add	r1, r0
 8002b4a:	1850      	adds	r0, r2, r1
 8002b4c:	4283      	cmp	r3, r0
 8002b4e:	6011      	str	r1, [r2, #0]
 8002b50:	d1de      	bne.n	8002b10 <_free_r+0x24>
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4401      	add	r1, r0
 8002b58:	6011      	str	r1, [r2, #0]
 8002b5a:	6053      	str	r3, [r2, #4]
 8002b5c:	e7d8      	b.n	8002b10 <_free_r+0x24>
 8002b5e:	d902      	bls.n	8002b66 <_free_r+0x7a>
 8002b60:	230c      	movs	r3, #12
 8002b62:	602b      	str	r3, [r5, #0]
 8002b64:	e7d4      	b.n	8002b10 <_free_r+0x24>
 8002b66:	6820      	ldr	r0, [r4, #0]
 8002b68:	1821      	adds	r1, r4, r0
 8002b6a:	428b      	cmp	r3, r1
 8002b6c:	bf01      	itttt	eq
 8002b6e:	6819      	ldreq	r1, [r3, #0]
 8002b70:	685b      	ldreq	r3, [r3, #4]
 8002b72:	1809      	addeq	r1, r1, r0
 8002b74:	6021      	streq	r1, [r4, #0]
 8002b76:	6063      	str	r3, [r4, #4]
 8002b78:	6054      	str	r4, [r2, #4]
 8002b7a:	e7c9      	b.n	8002b10 <_free_r+0x24>
 8002b7c:	bd38      	pop	{r3, r4, r5, pc}
 8002b7e:	bf00      	nop
 8002b80:	200000b4 	.word	0x200000b4

08002b84 <_malloc_r>:
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b86:	1ccd      	adds	r5, r1, #3
 8002b88:	f025 0503 	bic.w	r5, r5, #3
 8002b8c:	3508      	adds	r5, #8
 8002b8e:	2d0c      	cmp	r5, #12
 8002b90:	bf38      	it	cc
 8002b92:	250c      	movcc	r5, #12
 8002b94:	2d00      	cmp	r5, #0
 8002b96:	4606      	mov	r6, r0
 8002b98:	db01      	blt.n	8002b9e <_malloc_r+0x1a>
 8002b9a:	42a9      	cmp	r1, r5
 8002b9c:	d903      	bls.n	8002ba6 <_malloc_r+0x22>
 8002b9e:	230c      	movs	r3, #12
 8002ba0:	6033      	str	r3, [r6, #0]
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ba6:	f000 f8f1 	bl	8002d8c <__malloc_lock>
 8002baa:	4921      	ldr	r1, [pc, #132]	; (8002c30 <_malloc_r+0xac>)
 8002bac:	680a      	ldr	r2, [r1, #0]
 8002bae:	4614      	mov	r4, r2
 8002bb0:	b99c      	cbnz	r4, 8002bda <_malloc_r+0x56>
 8002bb2:	4f20      	ldr	r7, [pc, #128]	; (8002c34 <_malloc_r+0xb0>)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b923      	cbnz	r3, 8002bc2 <_malloc_r+0x3e>
 8002bb8:	4621      	mov	r1, r4
 8002bba:	4630      	mov	r0, r6
 8002bbc:	f000 f83c 	bl	8002c38 <_sbrk_r>
 8002bc0:	6038      	str	r0, [r7, #0]
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	4630      	mov	r0, r6
 8002bc6:	f000 f837 	bl	8002c38 <_sbrk_r>
 8002bca:	1c43      	adds	r3, r0, #1
 8002bcc:	d123      	bne.n	8002c16 <_malloc_r+0x92>
 8002bce:	230c      	movs	r3, #12
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	6033      	str	r3, [r6, #0]
 8002bd4:	f000 f8e0 	bl	8002d98 <__malloc_unlock>
 8002bd8:	e7e3      	b.n	8002ba2 <_malloc_r+0x1e>
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	1b5b      	subs	r3, r3, r5
 8002bde:	d417      	bmi.n	8002c10 <_malloc_r+0x8c>
 8002be0:	2b0b      	cmp	r3, #11
 8002be2:	d903      	bls.n	8002bec <_malloc_r+0x68>
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	441c      	add	r4, r3
 8002be8:	6025      	str	r5, [r4, #0]
 8002bea:	e004      	b.n	8002bf6 <_malloc_r+0x72>
 8002bec:	6863      	ldr	r3, [r4, #4]
 8002bee:	42a2      	cmp	r2, r4
 8002bf0:	bf0c      	ite	eq
 8002bf2:	600b      	streq	r3, [r1, #0]
 8002bf4:	6053      	strne	r3, [r2, #4]
 8002bf6:	4630      	mov	r0, r6
 8002bf8:	f000 f8ce 	bl	8002d98 <__malloc_unlock>
 8002bfc:	f104 000b 	add.w	r0, r4, #11
 8002c00:	1d23      	adds	r3, r4, #4
 8002c02:	f020 0007 	bic.w	r0, r0, #7
 8002c06:	1ac2      	subs	r2, r0, r3
 8002c08:	d0cc      	beq.n	8002ba4 <_malloc_r+0x20>
 8002c0a:	1a1b      	subs	r3, r3, r0
 8002c0c:	50a3      	str	r3, [r4, r2]
 8002c0e:	e7c9      	b.n	8002ba4 <_malloc_r+0x20>
 8002c10:	4622      	mov	r2, r4
 8002c12:	6864      	ldr	r4, [r4, #4]
 8002c14:	e7cc      	b.n	8002bb0 <_malloc_r+0x2c>
 8002c16:	1cc4      	adds	r4, r0, #3
 8002c18:	f024 0403 	bic.w	r4, r4, #3
 8002c1c:	42a0      	cmp	r0, r4
 8002c1e:	d0e3      	beq.n	8002be8 <_malloc_r+0x64>
 8002c20:	1a21      	subs	r1, r4, r0
 8002c22:	4630      	mov	r0, r6
 8002c24:	f000 f808 	bl	8002c38 <_sbrk_r>
 8002c28:	3001      	adds	r0, #1
 8002c2a:	d1dd      	bne.n	8002be8 <_malloc_r+0x64>
 8002c2c:	e7cf      	b.n	8002bce <_malloc_r+0x4a>
 8002c2e:	bf00      	nop
 8002c30:	200000b4 	.word	0x200000b4
 8002c34:	200000b8 	.word	0x200000b8

08002c38 <_sbrk_r>:
 8002c38:	b538      	push	{r3, r4, r5, lr}
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	4d05      	ldr	r5, [pc, #20]	; (8002c54 <_sbrk_r+0x1c>)
 8002c3e:	4604      	mov	r4, r0
 8002c40:	4608      	mov	r0, r1
 8002c42:	602b      	str	r3, [r5, #0]
 8002c44:	f7fd fccc 	bl	80005e0 <_sbrk>
 8002c48:	1c43      	adds	r3, r0, #1
 8002c4a:	d102      	bne.n	8002c52 <_sbrk_r+0x1a>
 8002c4c:	682b      	ldr	r3, [r5, #0]
 8002c4e:	b103      	cbz	r3, 8002c52 <_sbrk_r+0x1a>
 8002c50:	6023      	str	r3, [r4, #0]
 8002c52:	bd38      	pop	{r3, r4, r5, pc}
 8002c54:	20000130 	.word	0x20000130

08002c58 <__sread>:
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c60:	f000 f8a0 	bl	8002da4 <_read_r>
 8002c64:	2800      	cmp	r0, #0
 8002c66:	bfab      	itete	ge
 8002c68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c6a:	89a3      	ldrhlt	r3, [r4, #12]
 8002c6c:	181b      	addge	r3, r3, r0
 8002c6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c72:	bfac      	ite	ge
 8002c74:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c76:	81a3      	strhlt	r3, [r4, #12]
 8002c78:	bd10      	pop	{r4, pc}

08002c7a <__swrite>:
 8002c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c7e:	461f      	mov	r7, r3
 8002c80:	898b      	ldrh	r3, [r1, #12]
 8002c82:	4605      	mov	r5, r0
 8002c84:	05db      	lsls	r3, r3, #23
 8002c86:	460c      	mov	r4, r1
 8002c88:	4616      	mov	r6, r2
 8002c8a:	d505      	bpl.n	8002c98 <__swrite+0x1e>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c94:	f000 f868 	bl	8002d68 <_lseek_r>
 8002c98:	89a3      	ldrh	r3, [r4, #12]
 8002c9a:	4632      	mov	r2, r6
 8002c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ca0:	81a3      	strh	r3, [r4, #12]
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	463b      	mov	r3, r7
 8002ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cae:	f000 b817 	b.w	8002ce0 <_write_r>

08002cb2 <__sseek>:
 8002cb2:	b510      	push	{r4, lr}
 8002cb4:	460c      	mov	r4, r1
 8002cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cba:	f000 f855 	bl	8002d68 <_lseek_r>
 8002cbe:	1c43      	adds	r3, r0, #1
 8002cc0:	89a3      	ldrh	r3, [r4, #12]
 8002cc2:	bf15      	itete	ne
 8002cc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8002cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002cce:	81a3      	strheq	r3, [r4, #12]
 8002cd0:	bf18      	it	ne
 8002cd2:	81a3      	strhne	r3, [r4, #12]
 8002cd4:	bd10      	pop	{r4, pc}

08002cd6 <__sclose>:
 8002cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cda:	f000 b813 	b.w	8002d04 <_close_r>
	...

08002ce0 <_write_r>:
 8002ce0:	b538      	push	{r3, r4, r5, lr}
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4d05      	ldr	r5, [pc, #20]	; (8002d00 <_write_r+0x20>)
 8002cec:	602a      	str	r2, [r5, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f7fd fc29 	bl	8000546 <_write>
 8002cf4:	1c43      	adds	r3, r0, #1
 8002cf6:	d102      	bne.n	8002cfe <_write_r+0x1e>
 8002cf8:	682b      	ldr	r3, [r5, #0]
 8002cfa:	b103      	cbz	r3, 8002cfe <_write_r+0x1e>
 8002cfc:	6023      	str	r3, [r4, #0]
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}
 8002d00:	20000130 	.word	0x20000130

08002d04 <_close_r>:
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	2300      	movs	r3, #0
 8002d08:	4d05      	ldr	r5, [pc, #20]	; (8002d20 <_close_r+0x1c>)
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	602b      	str	r3, [r5, #0]
 8002d10:	f7fd fc35 	bl	800057e <_close>
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d102      	bne.n	8002d1e <_close_r+0x1a>
 8002d18:	682b      	ldr	r3, [r5, #0]
 8002d1a:	b103      	cbz	r3, 8002d1e <_close_r+0x1a>
 8002d1c:	6023      	str	r3, [r4, #0]
 8002d1e:	bd38      	pop	{r3, r4, r5, pc}
 8002d20:	20000130 	.word	0x20000130

08002d24 <_fstat_r>:
 8002d24:	b538      	push	{r3, r4, r5, lr}
 8002d26:	2300      	movs	r3, #0
 8002d28:	4d06      	ldr	r5, [pc, #24]	; (8002d44 <_fstat_r+0x20>)
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	4611      	mov	r1, r2
 8002d30:	602b      	str	r3, [r5, #0]
 8002d32:	f7fd fc2f 	bl	8000594 <_fstat>
 8002d36:	1c43      	adds	r3, r0, #1
 8002d38:	d102      	bne.n	8002d40 <_fstat_r+0x1c>
 8002d3a:	682b      	ldr	r3, [r5, #0]
 8002d3c:	b103      	cbz	r3, 8002d40 <_fstat_r+0x1c>
 8002d3e:	6023      	str	r3, [r4, #0]
 8002d40:	bd38      	pop	{r3, r4, r5, pc}
 8002d42:	bf00      	nop
 8002d44:	20000130 	.word	0x20000130

08002d48 <_isatty_r>:
 8002d48:	b538      	push	{r3, r4, r5, lr}
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	4d05      	ldr	r5, [pc, #20]	; (8002d64 <_isatty_r+0x1c>)
 8002d4e:	4604      	mov	r4, r0
 8002d50:	4608      	mov	r0, r1
 8002d52:	602b      	str	r3, [r5, #0]
 8002d54:	f7fd fc2d 	bl	80005b2 <_isatty>
 8002d58:	1c43      	adds	r3, r0, #1
 8002d5a:	d102      	bne.n	8002d62 <_isatty_r+0x1a>
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	b103      	cbz	r3, 8002d62 <_isatty_r+0x1a>
 8002d60:	6023      	str	r3, [r4, #0]
 8002d62:	bd38      	pop	{r3, r4, r5, pc}
 8002d64:	20000130 	.word	0x20000130

08002d68 <_lseek_r>:
 8002d68:	b538      	push	{r3, r4, r5, lr}
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	2200      	movs	r2, #0
 8002d72:	4d05      	ldr	r5, [pc, #20]	; (8002d88 <_lseek_r+0x20>)
 8002d74:	602a      	str	r2, [r5, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f7fd fc25 	bl	80005c6 <_lseek>
 8002d7c:	1c43      	adds	r3, r0, #1
 8002d7e:	d102      	bne.n	8002d86 <_lseek_r+0x1e>
 8002d80:	682b      	ldr	r3, [r5, #0]
 8002d82:	b103      	cbz	r3, 8002d86 <_lseek_r+0x1e>
 8002d84:	6023      	str	r3, [r4, #0]
 8002d86:	bd38      	pop	{r3, r4, r5, pc}
 8002d88:	20000130 	.word	0x20000130

08002d8c <__malloc_lock>:
 8002d8c:	4801      	ldr	r0, [pc, #4]	; (8002d94 <__malloc_lock+0x8>)
 8002d8e:	f7ff be47 	b.w	8002a20 <__retarget_lock_acquire_recursive>
 8002d92:	bf00      	nop
 8002d94:	20000128 	.word	0x20000128

08002d98 <__malloc_unlock>:
 8002d98:	4801      	ldr	r0, [pc, #4]	; (8002da0 <__malloc_unlock+0x8>)
 8002d9a:	f7ff be42 	b.w	8002a22 <__retarget_lock_release_recursive>
 8002d9e:	bf00      	nop
 8002da0:	20000128 	.word	0x20000128

08002da4 <_read_r>:
 8002da4:	b538      	push	{r3, r4, r5, lr}
 8002da6:	4604      	mov	r4, r0
 8002da8:	4608      	mov	r0, r1
 8002daa:	4611      	mov	r1, r2
 8002dac:	2200      	movs	r2, #0
 8002dae:	4d05      	ldr	r5, [pc, #20]	; (8002dc4 <_read_r+0x20>)
 8002db0:	602a      	str	r2, [r5, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	f7fd fbaa 	bl	800050c <_read>
 8002db8:	1c43      	adds	r3, r0, #1
 8002dba:	d102      	bne.n	8002dc2 <_read_r+0x1e>
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	b103      	cbz	r3, 8002dc2 <_read_r+0x1e>
 8002dc0:	6023      	str	r3, [r4, #0]
 8002dc2:	bd38      	pop	{r3, r4, r5, pc}
 8002dc4:	20000130 	.word	0x20000130

08002dc8 <_init>:
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	bf00      	nop
 8002dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dce:	bc08      	pop	{r3}
 8002dd0:	469e      	mov	lr, r3
 8002dd2:	4770      	bx	lr

08002dd4 <_fini>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	bf00      	nop
 8002dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dda:	bc08      	pop	{r3}
 8002ddc:	469e      	mov	lr, r3
 8002dde:	4770      	bx	lr
