
STM32F103ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d18  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f98  08002f98  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002f98  08002f98  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f98  08002f98  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000094  08003034  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003034  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008dab  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c35  00000000  00000000  00028e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0002aaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  0002b260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a20c  00000000  00000000  0002b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009003  00000000  00000000  00045b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092ad6  00000000  00000000  0004eb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e164d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e8  00000000  00000000  000e16a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000094 	.word	0x20000094
 8000200:	00000000 	.word	0x00000000
 8000204:	08002ee4 	.word	0x08002ee4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000098 	.word	0x20000098
 8000220:	08002ee4 	.word	0x08002ee4

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <MX_GPIO_Init+0x74>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a16      	ldr	r2, [pc, #88]	; (8000298 <MX_GPIO_Init+0x74>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <MX_GPIO_Init+0x74>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0304 	and.w	r3, r3, #4
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000250:	4b11      	ldr	r3, [pc, #68]	; (8000298 <MX_GPIO_Init+0x74>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a10      	ldr	r2, [pc, #64]	; (8000298 <MX_GPIO_Init+0x74>)
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <MX_GPIO_Init+0x74>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0308 	and.w	r3, r3, #8
 8000264:	603b      	str	r3, [r7, #0]
 8000266:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	2104      	movs	r1, #4
 800026c:	480b      	ldr	r0, [pc, #44]	; (800029c <MX_GPIO_Init+0x78>)
 800026e:	f000 ff15 	bl	800109c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000272:	2304      	movs	r3, #4
 8000274:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	2301      	movs	r3, #1
 8000278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800027e:	2301      	movs	r3, #1
 8000280:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000282:	f107 0308 	add.w	r3, r7, #8
 8000286:	4619      	mov	r1, r3
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <MX_GPIO_Init+0x78>)
 800028a:	f000 fd73 	bl	8000d74 <HAL_GPIO_Init>

}
 800028e:	bf00      	nop
 8000290:	3718      	adds	r7, #24
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000
 800029c:	40010800 	.word	0x40010800

080002a0 <__io_putchar>:
                }
                return len;
        }
  #else
        #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
        PUTCHAR_PROTOTYPE {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
        //注意下面第一个参数是&huart1，因为cubemx配置了串口1自动生成的
        HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80002a8:	1d39      	adds	r1, r7, #4
 80002aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002ae:	2201      	movs	r2, #1
 80002b0:	4803      	ldr	r0, [pc, #12]	; (80002c0 <__io_putchar+0x20>)
 80002b2:	f001 fb99 	bl	80019e8 <HAL_UART_Transmit>
        return ch;
 80002b6:	687b      	ldr	r3, [r7, #4]
        }
 80002b8:	4618      	mov	r0, r3
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	200000e0 	.word	0x200000e0

080002c4 <running>:
        running
};
void running(void);

void running(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
        HAL_Delay(100);
 80002c8:	2064      	movs	r0, #100	; 0x64
 80002ca:	f000 fadf 	bl	800088c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80002ce:	2201      	movs	r2, #1
 80002d0:	2104      	movs	r1, #4
 80002d2:	4806      	ldr	r0, [pc, #24]	; (80002ec <running+0x28>)
 80002d4:	f000 fee2 	bl	800109c <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80002d8:	2064      	movs	r0, #100	; 0x64
 80002da:	f000 fad7 	bl	800088c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2104      	movs	r1, #4
 80002e2:	4802      	ldr	r0, [pc, #8]	; (80002ec <running+0x28>)
 80002e4:	f000 feda 	bl	800109c <HAL_GPIO_WritePin>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40010800 	.word	0x40010800

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f000 fa68 	bl	80007c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f850 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f7ff ff92 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000300:	f000 f9be 	bl	8000680 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


/*****************************************************************************/
if (HAL_UART_Transmit_IT(&huart1, (uint8_t *)tx_buffer, TX_BUFFER_SIZE) != HAL_OK) {
 8000304:	221e      	movs	r2, #30
 8000306:	491e      	ldr	r1, [pc, #120]	; (8000380 <main+0x90>)
 8000308:	481e      	ldr	r0, [pc, #120]	; (8000384 <main+0x94>)
 800030a:	f001 fbff 	bl	8001b0c <HAL_UART_Transmit_IT>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d009      	beq.n	8000328 <main+0x38>
        Error_Handler();
 8000314:	f000 f8a4 	bl	8000460 <Error_Handler>
}
while (uart_ready != SET) {
 8000318:	e006      	b.n	8000328 <main+0x38>
        LED_01();
 800031a:	2104      	movs	r1, #4
 800031c:	481a      	ldr	r0, [pc, #104]	; (8000388 <main+0x98>)
 800031e:	f000 fed5 	bl	80010cc <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8000322:	2064      	movs	r0, #100	; 0x64
 8000324:	f000 fab2 	bl	800088c <HAL_Delay>
while (uart_ready != SET) {
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <main+0x9c>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b01      	cmp	r3, #1
 8000330:	d1f3      	bne.n	800031a <main+0x2a>
}
//Reset transmission flag
uart_ready = RESET;
 8000332:	4b16      	ldr	r3, [pc, #88]	; (800038c <main+0x9c>)
 8000334:	2200      	movs	r2, #0
 8000336:	701a      	strb	r2, [r3, #0]


if (HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_buffer, RX_BUFFER_SIZE) != HAL_OK) {
 8000338:	221e      	movs	r2, #30
 800033a:	4915      	ldr	r1, [pc, #84]	; (8000390 <main+0xa0>)
 800033c:	4811      	ldr	r0, [pc, #68]	; (8000384 <main+0x94>)
 800033e:	f001 fc29 	bl	8001b94 <HAL_UART_Receive_IT>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d00a      	beq.n	800035e <main+0x6e>
        Error_Handler();
 8000348:	f000 f88a 	bl	8000460 <Error_Handler>
}
while (uart_ready != SET) {
 800034c:	e007      	b.n	800035e <main+0x6e>
        LED_01();
 800034e:	2104      	movs	r1, #4
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <main+0x98>)
 8000352:	f000 febb 	bl	80010cc <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8000356:	2064      	movs	r0, #100	; 0x64
 8000358:	f000 fa98 	bl	800088c <HAL_Delay>
        break;
 800035c:	e005      	b.n	800036a <main+0x7a>
while (uart_ready != SET) {
 800035e:	bf00      	nop
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <main+0x9c>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	b2db      	uxtb	r3, r3
 8000366:	2b01      	cmp	r3, #1
 8000368:	d1f1      	bne.n	800034e <main+0x5e>
}
//Reset transmission flag
uart_ready = RESET;
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <main+0x9c>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]

while (1) {
        SYSTEM.running();
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <main+0xa4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4798      	blx	r3
        printf("hello, world\n");
 8000376:	4808      	ldr	r0, [pc, #32]	; (8000398 <main+0xa8>)
 8000378:	f002 f960 	bl	800263c <puts>
        SYSTEM.running();
 800037c:	e7f8      	b.n	8000370 <main+0x80>
 800037e:	bf00      	nop
 8000380:	20000000 	.word	0x20000000
 8000384:	200000e0 	.word	0x200000e0
 8000388:	40010800 	.word	0x40010800
 800038c:	200000b0 	.word	0x200000b0
 8000390:	200000c0 	.word	0x200000c0
 8000394:	20000020 	.word	0x20000020
 8000398:	08002efc 	.word	0x08002efc

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b090      	sub	sp, #64	; 0x40
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0318 	add.w	r3, r7, #24
 80003a6:	2228      	movs	r2, #40	; 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 f8d0 	bl	8002550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003be:	2302      	movs	r3, #2
 80003c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c2:	2301      	movs	r3, #1
 80003c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c6:	2310      	movs	r3, #16
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ce:	f107 0318 	add.w	r3, r7, #24
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 fe94 	bl	8001100 <HAL_RCC_OscConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003de:	f000 f83f 	bl	8000460 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	230f      	movs	r3, #15
 80003e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 f900 	bl	8001600 <HAL_RCC_ClockConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000406:	f000 f82b 	bl	8000460 <Error_Handler>
  }
}
 800040a:	bf00      	nop
 800040c:	3740      	adds	r7, #64	; 0x40
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <HAL_UART_TxCpltCallback>:

//////////////////////////////// 用户自定义函数 ////////////////////////////////
/*****************************************************************************/
//UART__发送完成（中断）回调函数
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
        uart_ready = SET;      //设置传输完成标志位（SET传输完成）
 800041c:	4b03      	ldr	r3, [pc, #12]	; (800042c <HAL_UART_TxCpltCallback+0x18>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	200000b0 	.word	0x200000b0

08000430 <HAL_UART_RxCpltCallback>:
//UART__接收完成（中断）回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
        uart_ready = SET;      //设置传输完成标志位（SET传输完成）
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <HAL_UART_RxCpltCallback+0x18>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	200000b0 	.word	0x200000b0

0800044c <HAL_UART_ErrorCallback>:

//UART__出错（中断）回调函数
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart1)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
        Error_Handler();
 8000454:	f000 f804 	bl	8000460 <Error_Handler>
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000468:	e7fe      	b.n	8000468 <Error_Handler+0x8>
	...

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <HAL_MspInit+0x5c>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <HAL_MspInit+0x5c>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <HAL_MspInit+0x5c>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x5c>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <HAL_MspInit+0x60>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <HAL_MspInit+0x60>)
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	bf00      	nop
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010000 	.word	0x40010000

080004d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <NMI_Handler+0x4>

080004d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <MemManage_Handler+0x4>

080004e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <BusFault_Handler+0x4>

080004e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <UsageFault_Handler+0x4>

080004ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr

08000512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000516:	f000 f99d 	bl	8000854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <USART1_IRQHandler+0x10>)
 8000526:	f001 fb65 	bl	8001bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000e0 	.word	0x200000e0

08000534 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	e00a      	b.n	800055c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000546:	f3af 8000 	nop.w
 800054a:	4601      	mov	r1, r0
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	1c5a      	adds	r2, r3, #1
 8000550:	60ba      	str	r2, [r7, #8]
 8000552:	b2ca      	uxtb	r2, r1
 8000554:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	3301      	adds	r3, #1
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	697a      	ldr	r2, [r7, #20]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	429a      	cmp	r2, r3
 8000562:	dbf0      	blt.n	8000546 <_read+0x12>
	}

return len;
 8000564:	687b      	ldr	r3, [r7, #4]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b086      	sub	sp, #24
 8000572:	af00      	add	r7, sp, #0
 8000574:	60f8      	str	r0, [r7, #12]
 8000576:	60b9      	str	r1, [r7, #8]
 8000578:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	e009      	b.n	8000594 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	60ba      	str	r2, [r7, #8]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fe89 	bl	80002a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	3301      	adds	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	429a      	cmp	r2, r3
 800059a:	dbf1      	blt.n	8000580 <_write+0x12>
	}
	return len;
 800059c:	687b      	ldr	r3, [r7, #4]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <_close>:

int _close(int file)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
	return -1;
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005cc:	605a      	str	r2, [r3, #4]
	return 0;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <_isatty>:

int _isatty(int file)
{
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
	return 1;
 80005e2:	2301      	movs	r3, #1
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b085      	sub	sp, #20
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
	return 0;
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
	...

08000608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000610:	4a14      	ldr	r2, [pc, #80]	; (8000664 <_sbrk+0x5c>)
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <_sbrk+0x60>)
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <_sbrk+0x64>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <_sbrk+0x68>)
 8000628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	693a      	ldr	r2, [r7, #16]
 8000634:	429a      	cmp	r2, r3
 8000636:	d207      	bcs.n	8000648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000638:	f001 ff60 	bl	80024fc <__errno>
 800063c:	4603      	mov	r3, r0
 800063e:	220c      	movs	r2, #12
 8000640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000646:	e009      	b.n	800065c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <_sbrk+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <_sbrk+0x64>)
 8000658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20010000 	.word	0x20010000
 8000668:	00000400 	.word	0x00000400
 800066c:	200000b4 	.word	0x200000b4
 8000670:	20000168 	.word	0x20000168

08000674 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_USART1_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006b8:	f001 f93c 	bl	8001934 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f7ff fecd 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000e0 	.word	0x200000e0
 80006d0:	40013800 	.word	0x40013800

080006d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a20      	ldr	r2, [pc, #128]	; (8000770 <HAL_UART_MspInit+0x9c>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d139      	bne.n	8000768 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <HAL_UART_MspInit+0xa0>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <HAL_UART_MspInit+0xa0>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <HAL_UART_MspInit+0xa0>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <HAL_UART_MspInit+0xa0>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a18      	ldr	r2, [pc, #96]	; (8000774 <HAL_UART_MspInit+0xa0>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_UART_MspInit+0xa0>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000728:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	480f      	ldr	r0, [pc, #60]	; (8000778 <HAL_UART_MspInit+0xa4>)
 800073a:	f000 fb1b 	bl	8000d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800073e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000742:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4619      	mov	r1, r3
 8000752:	4809      	ldr	r0, [pc, #36]	; (8000778 <HAL_UART_MspInit+0xa4>)
 8000754:	f000 fb0e 	bl	8000d74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	210e      	movs	r1, #14
 800075c:	2025      	movs	r0, #37	; 0x25
 800075e:	f000 f990 	bl	8000a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000762:	2025      	movs	r0, #37	; 0x25
 8000764:	f000 f9a9 	bl	8000aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40013800 	.word	0x40013800
 8000774:	40021000 	.word	0x40021000
 8000778:	40010800 	.word	0x40010800

0800077c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	; (80007b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	; (80007c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007a2:	f7ff ff67 	bl	8000674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007a6:	f001 feaf 	bl	8002508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007aa:	f7ff fda1 	bl	80002f0 <main>
  bx lr
 80007ae:	4770      	bx	lr
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80007b8:	08002fa0 	.word	0x08002fa0
  ldr r2, =_sbss
 80007bc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80007c0:	20000168 	.word	0x20000168

080007c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_2_IRQHandler>
	...

080007c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_Init+0x28>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_Init+0x28>)
 80007d2:	f043 0310 	orr.w	r3, r3, #16
 80007d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 f947 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007de:	200f      	movs	r0, #15
 80007e0:	f000 f808 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e4:	f7ff fe42 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40022000 	.word	0x40022000

080007f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_InitTick+0x54>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x58>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080a:	fbb3 f3f1 	udiv	r3, r3, r1
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f95f 	bl	8000ad6 <HAL_SYSTICK_Config>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e00e      	b.n	8000840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d80a      	bhi.n	800083e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000828:	2200      	movs	r2, #0
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000830:	f000 f927 	bl	8000a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_InitTick+0x5c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000024 	.word	0x20000024
 800084c:	2000002c 	.word	0x2000002c
 8000850:	20000028 	.word	0x20000028

08000854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_IncTick+0x1c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x20>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4413      	add	r3, r2
 8000864:	4a03      	ldr	r2, [pc, #12]	; (8000874 <HAL_IncTick+0x20>)
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	2000002c 	.word	0x2000002c
 8000874:	20000154 	.word	0x20000154

08000878 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b02      	ldr	r3, [pc, #8]	; (8000888 <HAL_GetTick+0x10>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	20000154 	.word	0x20000154

0800088c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000894:	f7ff fff0 	bl	8000878 <HAL_GetTick>
 8000898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008a4:	d005      	beq.n	80008b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_Delay+0x44>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008b2:	bf00      	nop
 80008b4:	f7ff ffe0 	bl	8000878 <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d8f7      	bhi.n	80008b4 <HAL_Delay+0x28>
  {
  }
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000002c 	.word	0x2000002c

080008d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000906:	4a04      	ldr	r2, [pc, #16]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60d3      	str	r3, [r2, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <__NVIC_GetPriorityGrouping+0x18>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	f003 0307 	and.w	r3, r3, #7
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	db0b      	blt.n	8000962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f003 021f 	and.w	r2, r3, #31
 8000950:	4906      	ldr	r1, [pc, #24]	; (800096c <__NVIC_EnableIRQ+0x34>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	095b      	lsrs	r3, r3, #5
 8000958:	2001      	movs	r0, #1
 800095a:	fa00 f202 	lsl.w	r2, r0, r2
 800095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db0a      	blt.n	800099a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	490c      	ldr	r1, [pc, #48]	; (80009bc <__NVIC_SetPriority+0x4c>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	0112      	lsls	r2, r2, #4
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	440b      	add	r3, r1
 8000994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000998:	e00a      	b.n	80009b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4908      	ldr	r1, [pc, #32]	; (80009c0 <__NVIC_SetPriority+0x50>)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	3b04      	subs	r3, #4
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	761a      	strb	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f1c3 0307 	rsb	r3, r3, #7
 80009de:	2b04      	cmp	r3, #4
 80009e0:	bf28      	it	cs
 80009e2:	2304      	movcs	r3, #4
 80009e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3304      	adds	r3, #4
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d902      	bls.n	80009f4 <NVIC_EncodePriority+0x30>
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3b03      	subs	r3, #3
 80009f2:	e000      	b.n	80009f6 <NVIC_EncodePriority+0x32>
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43da      	mvns	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	401a      	ands	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43d9      	mvns	r1, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	; 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a38:	d301      	bcc.n	8000a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00f      	b.n	8000a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <SysTick_Config+0x40>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a46:	210f      	movs	r1, #15
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a4c:	f7ff ff90 	bl	8000970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <SysTick_Config+0x40>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <SysTick_Config+0x40>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff2d 	bl	80008d4 <__NVIC_SetPriorityGrouping>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a94:	f7ff ff42 	bl	800091c <__NVIC_GetPriorityGrouping>
 8000a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ff90 	bl	80009c4 <NVIC_EncodePriority>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff5f 	bl	8000970 <__NVIC_SetPriority>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff35 	bl	8000938 <__NVIC_EnableIRQ>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffa2 	bl	8000a28 <SysTick_Config>
 8000ae4:	4603      	mov	r3, r0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b085      	sub	sp, #20
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d008      	beq.n	8000b16 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2204      	movs	r2, #4
 8000b08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e020      	b.n	8000b58 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f022 020e 	bic.w	r2, r2, #14
 8000b24:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f022 0201 	bic.w	r2, r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fa01 f202 	lsl.w	r2, r1, r2
 8000b44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
	...

08000b64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d005      	beq.n	8000b86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	e0d6      	b.n	8000d34 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 020e 	bic.w	r2, r2, #14
 8000b94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 0201 	bic.w	r2, r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b64      	ldr	r3, [pc, #400]	; (8000d40 <HAL_DMA_Abort_IT+0x1dc>)
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d958      	bls.n	8000c64 <HAL_DMA_Abort_IT+0x100>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a63      	ldr	r2, [pc, #396]	; (8000d44 <HAL_DMA_Abort_IT+0x1e0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d04f      	beq.n	8000c5c <HAL_DMA_Abort_IT+0xf8>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a61      	ldr	r2, [pc, #388]	; (8000d48 <HAL_DMA_Abort_IT+0x1e4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d048      	beq.n	8000c58 <HAL_DMA_Abort_IT+0xf4>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a60      	ldr	r2, [pc, #384]	; (8000d4c <HAL_DMA_Abort_IT+0x1e8>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d040      	beq.n	8000c52 <HAL_DMA_Abort_IT+0xee>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a5e      	ldr	r2, [pc, #376]	; (8000d50 <HAL_DMA_Abort_IT+0x1ec>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d038      	beq.n	8000c4c <HAL_DMA_Abort_IT+0xe8>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a5d      	ldr	r2, [pc, #372]	; (8000d54 <HAL_DMA_Abort_IT+0x1f0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d030      	beq.n	8000c46 <HAL_DMA_Abort_IT+0xe2>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a5b      	ldr	r2, [pc, #364]	; (8000d58 <HAL_DMA_Abort_IT+0x1f4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d028      	beq.n	8000c40 <HAL_DMA_Abort_IT+0xdc>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a53      	ldr	r2, [pc, #332]	; (8000d40 <HAL_DMA_Abort_IT+0x1dc>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d020      	beq.n	8000c3a <HAL_DMA_Abort_IT+0xd6>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a57      	ldr	r2, [pc, #348]	; (8000d5c <HAL_DMA_Abort_IT+0x1f8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d019      	beq.n	8000c36 <HAL_DMA_Abort_IT+0xd2>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a56      	ldr	r2, [pc, #344]	; (8000d60 <HAL_DMA_Abort_IT+0x1fc>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d012      	beq.n	8000c32 <HAL_DMA_Abort_IT+0xce>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a54      	ldr	r2, [pc, #336]	; (8000d64 <HAL_DMA_Abort_IT+0x200>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d00a      	beq.n	8000c2c <HAL_DMA_Abort_IT+0xc8>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a53      	ldr	r2, [pc, #332]	; (8000d68 <HAL_DMA_Abort_IT+0x204>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d102      	bne.n	8000c26 <HAL_DMA_Abort_IT+0xc2>
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	e01b      	b.n	8000c5e <HAL_DMA_Abort_IT+0xfa>
 8000c26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2a:	e018      	b.n	8000c5e <HAL_DMA_Abort_IT+0xfa>
 8000c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c30:	e015      	b.n	8000c5e <HAL_DMA_Abort_IT+0xfa>
 8000c32:	2310      	movs	r3, #16
 8000c34:	e013      	b.n	8000c5e <HAL_DMA_Abort_IT+0xfa>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e011      	b.n	8000c5e <HAL_DMA_Abort_IT+0xfa>
 8000c3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c3e:	e00e      	b.n	8000c5e <HAL_DMA_Abort_IT+0xfa>
 8000c40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c44:	e00b      	b.n	8000c5e <HAL_DMA_Abort_IT+0xfa>
 8000c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4a:	e008      	b.n	8000c5e <HAL_DMA_Abort_IT+0xfa>
 8000c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c50:	e005      	b.n	8000c5e <HAL_DMA_Abort_IT+0xfa>
 8000c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c56:	e002      	b.n	8000c5e <HAL_DMA_Abort_IT+0xfa>
 8000c58:	2310      	movs	r3, #16
 8000c5a:	e000      	b.n	8000c5e <HAL_DMA_Abort_IT+0xfa>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	4a43      	ldr	r2, [pc, #268]	; (8000d6c <HAL_DMA_Abort_IT+0x208>)
 8000c60:	6053      	str	r3, [r2, #4]
 8000c62:	e057      	b.n	8000d14 <HAL_DMA_Abort_IT+0x1b0>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a36      	ldr	r2, [pc, #216]	; (8000d44 <HAL_DMA_Abort_IT+0x1e0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d04f      	beq.n	8000d0e <HAL_DMA_Abort_IT+0x1aa>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a35      	ldr	r2, [pc, #212]	; (8000d48 <HAL_DMA_Abort_IT+0x1e4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d048      	beq.n	8000d0a <HAL_DMA_Abort_IT+0x1a6>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a33      	ldr	r2, [pc, #204]	; (8000d4c <HAL_DMA_Abort_IT+0x1e8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d040      	beq.n	8000d04 <HAL_DMA_Abort_IT+0x1a0>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a32      	ldr	r2, [pc, #200]	; (8000d50 <HAL_DMA_Abort_IT+0x1ec>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d038      	beq.n	8000cfe <HAL_DMA_Abort_IT+0x19a>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a30      	ldr	r2, [pc, #192]	; (8000d54 <HAL_DMA_Abort_IT+0x1f0>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d030      	beq.n	8000cf8 <HAL_DMA_Abort_IT+0x194>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a2f      	ldr	r2, [pc, #188]	; (8000d58 <HAL_DMA_Abort_IT+0x1f4>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d028      	beq.n	8000cf2 <HAL_DMA_Abort_IT+0x18e>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <HAL_DMA_Abort_IT+0x1dc>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d020      	beq.n	8000cec <HAL_DMA_Abort_IT+0x188>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a2b      	ldr	r2, [pc, #172]	; (8000d5c <HAL_DMA_Abort_IT+0x1f8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d019      	beq.n	8000ce8 <HAL_DMA_Abort_IT+0x184>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a29      	ldr	r2, [pc, #164]	; (8000d60 <HAL_DMA_Abort_IT+0x1fc>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d012      	beq.n	8000ce4 <HAL_DMA_Abort_IT+0x180>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <HAL_DMA_Abort_IT+0x200>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d00a      	beq.n	8000cde <HAL_DMA_Abort_IT+0x17a>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <HAL_DMA_Abort_IT+0x204>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d102      	bne.n	8000cd8 <HAL_DMA_Abort_IT+0x174>
 8000cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd6:	e01b      	b.n	8000d10 <HAL_DMA_Abort_IT+0x1ac>
 8000cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cdc:	e018      	b.n	8000d10 <HAL_DMA_Abort_IT+0x1ac>
 8000cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce2:	e015      	b.n	8000d10 <HAL_DMA_Abort_IT+0x1ac>
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	e013      	b.n	8000d10 <HAL_DMA_Abort_IT+0x1ac>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e011      	b.n	8000d10 <HAL_DMA_Abort_IT+0x1ac>
 8000cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cf0:	e00e      	b.n	8000d10 <HAL_DMA_Abort_IT+0x1ac>
 8000cf2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cf6:	e00b      	b.n	8000d10 <HAL_DMA_Abort_IT+0x1ac>
 8000cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cfc:	e008      	b.n	8000d10 <HAL_DMA_Abort_IT+0x1ac>
 8000cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d02:	e005      	b.n	8000d10 <HAL_DMA_Abort_IT+0x1ac>
 8000d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d08:	e002      	b.n	8000d10 <HAL_DMA_Abort_IT+0x1ac>
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	e000      	b.n	8000d10 <HAL_DMA_Abort_IT+0x1ac>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_DMA_Abort_IT+0x20c>)
 8000d12:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	4798      	blx	r3
    } 
  }
  return status;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40020080 	.word	0x40020080
 8000d44:	40020008 	.word	0x40020008
 8000d48:	4002001c 	.word	0x4002001c
 8000d4c:	40020030 	.word	0x40020030
 8000d50:	40020044 	.word	0x40020044
 8000d54:	40020058 	.word	0x40020058
 8000d58:	4002006c 	.word	0x4002006c
 8000d5c:	40020408 	.word	0x40020408
 8000d60:	4002041c 	.word	0x4002041c
 8000d64:	40020430 	.word	0x40020430
 8000d68:	40020444 	.word	0x40020444
 8000d6c:	40020400 	.word	0x40020400
 8000d70:	40020000 	.word	0x40020000

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b08b      	sub	sp, #44	; 0x2c
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d86:	e179      	b.n	800107c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	69fa      	ldr	r2, [r7, #28]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	f040 8168 	bne.w	8001076 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	4aa0      	ldr	r2, [pc, #640]	; (800102c <HAL_GPIO_Init+0x2b8>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d05e      	beq.n	8000e6e <HAL_GPIO_Init+0xfa>
 8000db0:	4a9e      	ldr	r2, [pc, #632]	; (800102c <HAL_GPIO_Init+0x2b8>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d875      	bhi.n	8000ea2 <HAL_GPIO_Init+0x12e>
 8000db6:	4a9e      	ldr	r2, [pc, #632]	; (8001030 <HAL_GPIO_Init+0x2bc>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d058      	beq.n	8000e6e <HAL_GPIO_Init+0xfa>
 8000dbc:	4a9c      	ldr	r2, [pc, #624]	; (8001030 <HAL_GPIO_Init+0x2bc>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d86f      	bhi.n	8000ea2 <HAL_GPIO_Init+0x12e>
 8000dc2:	4a9c      	ldr	r2, [pc, #624]	; (8001034 <HAL_GPIO_Init+0x2c0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d052      	beq.n	8000e6e <HAL_GPIO_Init+0xfa>
 8000dc8:	4a9a      	ldr	r2, [pc, #616]	; (8001034 <HAL_GPIO_Init+0x2c0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d869      	bhi.n	8000ea2 <HAL_GPIO_Init+0x12e>
 8000dce:	4a9a      	ldr	r2, [pc, #616]	; (8001038 <HAL_GPIO_Init+0x2c4>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d04c      	beq.n	8000e6e <HAL_GPIO_Init+0xfa>
 8000dd4:	4a98      	ldr	r2, [pc, #608]	; (8001038 <HAL_GPIO_Init+0x2c4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d863      	bhi.n	8000ea2 <HAL_GPIO_Init+0x12e>
 8000dda:	4a98      	ldr	r2, [pc, #608]	; (800103c <HAL_GPIO_Init+0x2c8>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d046      	beq.n	8000e6e <HAL_GPIO_Init+0xfa>
 8000de0:	4a96      	ldr	r2, [pc, #600]	; (800103c <HAL_GPIO_Init+0x2c8>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d85d      	bhi.n	8000ea2 <HAL_GPIO_Init+0x12e>
 8000de6:	2b12      	cmp	r3, #18
 8000de8:	d82a      	bhi.n	8000e40 <HAL_GPIO_Init+0xcc>
 8000dea:	2b12      	cmp	r3, #18
 8000dec:	d859      	bhi.n	8000ea2 <HAL_GPIO_Init+0x12e>
 8000dee:	a201      	add	r2, pc, #4	; (adr r2, 8000df4 <HAL_GPIO_Init+0x80>)
 8000df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df4:	08000e6f 	.word	0x08000e6f
 8000df8:	08000e49 	.word	0x08000e49
 8000dfc:	08000e5b 	.word	0x08000e5b
 8000e00:	08000e9d 	.word	0x08000e9d
 8000e04:	08000ea3 	.word	0x08000ea3
 8000e08:	08000ea3 	.word	0x08000ea3
 8000e0c:	08000ea3 	.word	0x08000ea3
 8000e10:	08000ea3 	.word	0x08000ea3
 8000e14:	08000ea3 	.word	0x08000ea3
 8000e18:	08000ea3 	.word	0x08000ea3
 8000e1c:	08000ea3 	.word	0x08000ea3
 8000e20:	08000ea3 	.word	0x08000ea3
 8000e24:	08000ea3 	.word	0x08000ea3
 8000e28:	08000ea3 	.word	0x08000ea3
 8000e2c:	08000ea3 	.word	0x08000ea3
 8000e30:	08000ea3 	.word	0x08000ea3
 8000e34:	08000ea3 	.word	0x08000ea3
 8000e38:	08000e51 	.word	0x08000e51
 8000e3c:	08000e65 	.word	0x08000e65
 8000e40:	4a7f      	ldr	r2, [pc, #508]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d013      	beq.n	8000e6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e46:	e02c      	b.n	8000ea2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	623b      	str	r3, [r7, #32]
          break;
 8000e4e:	e029      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	3304      	adds	r3, #4
 8000e56:	623b      	str	r3, [r7, #32]
          break;
 8000e58:	e024      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	3308      	adds	r3, #8
 8000e60:	623b      	str	r3, [r7, #32]
          break;
 8000e62:	e01f      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	330c      	adds	r3, #12
 8000e6a:	623b      	str	r3, [r7, #32]
          break;
 8000e6c:	e01a      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d102      	bne.n	8000e7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e76:	2304      	movs	r3, #4
 8000e78:	623b      	str	r3, [r7, #32]
          break;
 8000e7a:	e013      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d105      	bne.n	8000e90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e84:	2308      	movs	r3, #8
 8000e86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69fa      	ldr	r2, [r7, #28]
 8000e8c:	611a      	str	r2, [r3, #16]
          break;
 8000e8e:	e009      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e90:	2308      	movs	r3, #8
 8000e92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	615a      	str	r2, [r3, #20]
          break;
 8000e9a:	e003      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
          break;
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          break;
 8000ea2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	2bff      	cmp	r3, #255	; 0xff
 8000ea8:	d801      	bhi.n	8000eae <HAL_GPIO_Init+0x13a>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	e001      	b.n	8000eb2 <HAL_GPIO_Init+0x13e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	2bff      	cmp	r3, #255	; 0xff
 8000eb8:	d802      	bhi.n	8000ec0 <HAL_GPIO_Init+0x14c>
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	e002      	b.n	8000ec6 <HAL_GPIO_Init+0x152>
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	3b08      	subs	r3, #8
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	210f      	movs	r1, #15
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	6a39      	ldr	r1, [r7, #32]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 80c1 	beq.w	8001076 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ef4:	4b53      	ldr	r3, [pc, #332]	; (8001044 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a52      	ldr	r2, [pc, #328]	; (8001044 <HAL_GPIO_Init+0x2d0>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b50      	ldr	r3, [pc, #320]	; (8001044 <HAL_GPIO_Init+0x2d0>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f0c:	4a4e      	ldr	r2, [pc, #312]	; (8001048 <HAL_GPIO_Init+0x2d4>)
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3302      	adds	r3, #2
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a46      	ldr	r2, [pc, #280]	; (800104c <HAL_GPIO_Init+0x2d8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d01f      	beq.n	8000f78 <HAL_GPIO_Init+0x204>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a45      	ldr	r2, [pc, #276]	; (8001050 <HAL_GPIO_Init+0x2dc>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d019      	beq.n	8000f74 <HAL_GPIO_Init+0x200>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a44      	ldr	r2, [pc, #272]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d013      	beq.n	8000f70 <HAL_GPIO_Init+0x1fc>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a43      	ldr	r2, [pc, #268]	; (8001058 <HAL_GPIO_Init+0x2e4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d00d      	beq.n	8000f6c <HAL_GPIO_Init+0x1f8>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a42      	ldr	r2, [pc, #264]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d007      	beq.n	8000f68 <HAL_GPIO_Init+0x1f4>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a41      	ldr	r2, [pc, #260]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d101      	bne.n	8000f64 <HAL_GPIO_Init+0x1f0>
 8000f60:	2305      	movs	r3, #5
 8000f62:	e00a      	b.n	8000f7a <HAL_GPIO_Init+0x206>
 8000f64:	2306      	movs	r3, #6
 8000f66:	e008      	b.n	8000f7a <HAL_GPIO_Init+0x206>
 8000f68:	2304      	movs	r3, #4
 8000f6a:	e006      	b.n	8000f7a <HAL_GPIO_Init+0x206>
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e004      	b.n	8000f7a <HAL_GPIO_Init+0x206>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e002      	b.n	8000f7a <HAL_GPIO_Init+0x206>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <HAL_GPIO_Init+0x206>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f7c:	f002 0203 	and.w	r2, r2, #3
 8000f80:	0092      	lsls	r2, r2, #2
 8000f82:	4093      	lsls	r3, r2
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f8a:	492f      	ldr	r1, [pc, #188]	; (8001048 <HAL_GPIO_Init+0x2d4>)
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	492e      	ldr	r1, [pc, #184]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	492a      	ldr	r1, [pc, #168]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	4924      	ldr	r1, [pc, #144]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fda:	4b22      	ldr	r3, [pc, #136]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4920      	ldr	r1, [pc, #128]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	491a      	ldr	r1, [pc, #104]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	608b      	str	r3, [r1, #8]
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	43db      	mvns	r3, r3
 800100a:	4916      	ldr	r1, [pc, #88]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 800100c:	4013      	ands	r3, r2
 800100e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d025      	beq.n	8001068 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	4910      	ldr	r1, [pc, #64]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	60cb      	str	r3, [r1, #12]
 8001028:	e025      	b.n	8001076 <HAL_GPIO_Init+0x302>
 800102a:	bf00      	nop
 800102c:	10320000 	.word	0x10320000
 8001030:	10310000 	.word	0x10310000
 8001034:	10220000 	.word	0x10220000
 8001038:	10210000 	.word	0x10210000
 800103c:	10120000 	.word	0x10120000
 8001040:	10110000 	.word	0x10110000
 8001044:	40021000 	.word	0x40021000
 8001048:	40010000 	.word	0x40010000
 800104c:	40010800 	.word	0x40010800
 8001050:	40010c00 	.word	0x40010c00
 8001054:	40011000 	.word	0x40011000
 8001058:	40011400 	.word	0x40011400
 800105c:	40011800 	.word	0x40011800
 8001060:	40011c00 	.word	0x40011c00
 8001064:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_GPIO_Init+0x324>)
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	43db      	mvns	r3, r3
 8001070:	4909      	ldr	r1, [pc, #36]	; (8001098 <HAL_GPIO_Init+0x324>)
 8001072:	4013      	ands	r3, r2
 8001074:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	3301      	adds	r3, #1
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	fa22 f303 	lsr.w	r3, r2, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	f47f ae7e 	bne.w	8000d88 <HAL_GPIO_Init+0x14>
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	372c      	adds	r7, #44	; 0x2c
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	40010400 	.word	0x40010400

0800109c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
 80010a8:	4613      	mov	r3, r2
 80010aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010b8:	e003      	b.n	80010c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	041a      	lsls	r2, r3, #16
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	611a      	str	r2, [r3, #16]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4013      	ands	r3, r2
 80010e4:	041a      	lsls	r2, r3, #16
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43d9      	mvns	r1, r3
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	400b      	ands	r3, r1
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	611a      	str	r2, [r3, #16]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e26c      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8087 	beq.w	800122e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001120:	4b92      	ldr	r3, [pc, #584]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	2b04      	cmp	r3, #4
 800112a:	d00c      	beq.n	8001146 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800112c:	4b8f      	ldr	r3, [pc, #572]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b08      	cmp	r3, #8
 8001136:	d112      	bne.n	800115e <HAL_RCC_OscConfig+0x5e>
 8001138:	4b8c      	ldr	r3, [pc, #560]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001144:	d10b      	bne.n	800115e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001146:	4b89      	ldr	r3, [pc, #548]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d06c      	beq.n	800122c <HAL_RCC_OscConfig+0x12c>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d168      	bne.n	800122c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e246      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001166:	d106      	bne.n	8001176 <HAL_RCC_OscConfig+0x76>
 8001168:	4b80      	ldr	r3, [pc, #512]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a7f      	ldr	r2, [pc, #508]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 800116e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	e02e      	b.n	80011d4 <HAL_RCC_OscConfig+0xd4>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0x98>
 800117e:	4b7b      	ldr	r3, [pc, #492]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a7a      	ldr	r2, [pc, #488]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 8001184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b78      	ldr	r3, [pc, #480]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a77      	ldr	r2, [pc, #476]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 8001190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e01d      	b.n	80011d4 <HAL_RCC_OscConfig+0xd4>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0xbc>
 80011a2:	4b72      	ldr	r3, [pc, #456]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a71      	ldr	r2, [pc, #452]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b6f      	ldr	r3, [pc, #444]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a6e      	ldr	r2, [pc, #440]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e00b      	b.n	80011d4 <HAL_RCC_OscConfig+0xd4>
 80011bc:	4b6b      	ldr	r3, [pc, #428]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a6a      	ldr	r2, [pc, #424]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 80011c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b68      	ldr	r3, [pc, #416]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a67      	ldr	r2, [pc, #412]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 80011ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fb4c 	bl	8000878 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fb48 	bl	8000878 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1fa      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b5d      	ldr	r3, [pc, #372]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0xe4>
 8001202:	e014      	b.n	800122e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fb38 	bl	8000878 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fb34 	bl	8000878 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e1e6      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121e:	4b53      	ldr	r3, [pc, #332]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x10c>
 800122a:	e000      	b.n	800122e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d063      	beq.n	8001302 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800123a:	4b4c      	ldr	r3, [pc, #304]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001246:	4b49      	ldr	r3, [pc, #292]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b08      	cmp	r3, #8
 8001250:	d11c      	bne.n	800128c <HAL_RCC_OscConfig+0x18c>
 8001252:	4b46      	ldr	r3, [pc, #280]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d116      	bne.n	800128c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125e:	4b43      	ldr	r3, [pc, #268]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_RCC_OscConfig+0x176>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e1ba      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4939      	ldr	r1, [pc, #228]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	e03a      	b.n	8001302 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d020      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001294:	4b36      	ldr	r3, [pc, #216]	; (8001370 <HAL_RCC_OscConfig+0x270>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff faed 	bl	8000878 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fae9 	bl	8000878 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e19b      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4927      	ldr	r1, [pc, #156]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	600b      	str	r3, [r1, #0]
 80012d4:	e015      	b.n	8001302 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <HAL_RCC_OscConfig+0x270>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff facc 	bl	8000878 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fac8 	bl	8000878 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e17a      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d03a      	beq.n	8001384 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d019      	beq.n	800134a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_RCC_OscConfig+0x274>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131c:	f7ff faac 	bl	8000878 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff faa8 	bl	8000878 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e15a      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_RCC_OscConfig+0x26c>)
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001342:	2001      	movs	r0, #1
 8001344:	f000 fad8 	bl	80018f8 <RCC_Delay>
 8001348:	e01c      	b.n	8001384 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_RCC_OscConfig+0x274>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001350:	f7ff fa92 	bl	8000878 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001356:	e00f      	b.n	8001378 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff fa8e 	bl	8000878 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d908      	bls.n	8001378 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e140      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	42420000 	.word	0x42420000
 8001374:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001378:	4b9e      	ldr	r3, [pc, #632]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1e9      	bne.n	8001358 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80a6 	beq.w	80014de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001396:	4b97      	ldr	r3, [pc, #604]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10d      	bne.n	80013be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b94      	ldr	r3, [pc, #592]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4a93      	ldr	r2, [pc, #588]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	61d3      	str	r3, [r2, #28]
 80013ae:	4b91      	ldr	r3, [pc, #580]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ba:	2301      	movs	r3, #1
 80013bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013be:	4b8e      	ldr	r3, [pc, #568]	; (80015f8 <HAL_RCC_OscConfig+0x4f8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d118      	bne.n	80013fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ca:	4b8b      	ldr	r3, [pc, #556]	; (80015f8 <HAL_RCC_OscConfig+0x4f8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a8a      	ldr	r2, [pc, #552]	; (80015f8 <HAL_RCC_OscConfig+0x4f8>)
 80013d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fa4f 	bl	8000878 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013de:	f7ff fa4b 	bl	8000878 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b64      	cmp	r3, #100	; 0x64
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e0fd      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f0:	4b81      	ldr	r3, [pc, #516]	; (80015f8 <HAL_RCC_OscConfig+0x4f8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x312>
 8001404:	4b7b      	ldr	r3, [pc, #492]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4a7a      	ldr	r2, [pc, #488]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6213      	str	r3, [r2, #32]
 8001410:	e02d      	b.n	800146e <HAL_RCC_OscConfig+0x36e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x334>
 800141a:	4b76      	ldr	r3, [pc, #472]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	4a75      	ldr	r2, [pc, #468]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	f023 0301 	bic.w	r3, r3, #1
 8001424:	6213      	str	r3, [r2, #32]
 8001426:	4b73      	ldr	r3, [pc, #460]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4a72      	ldr	r2, [pc, #456]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 800142c:	f023 0304 	bic.w	r3, r3, #4
 8001430:	6213      	str	r3, [r2, #32]
 8001432:	e01c      	b.n	800146e <HAL_RCC_OscConfig+0x36e>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b05      	cmp	r3, #5
 800143a:	d10c      	bne.n	8001456 <HAL_RCC_OscConfig+0x356>
 800143c:	4b6d      	ldr	r3, [pc, #436]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4a6c      	ldr	r2, [pc, #432]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	6213      	str	r3, [r2, #32]
 8001448:	4b6a      	ldr	r3, [pc, #424]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4a69      	ldr	r2, [pc, #420]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6213      	str	r3, [r2, #32]
 8001454:	e00b      	b.n	800146e <HAL_RCC_OscConfig+0x36e>
 8001456:	4b67      	ldr	r3, [pc, #412]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	4a66      	ldr	r2, [pc, #408]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	f023 0301 	bic.w	r3, r3, #1
 8001460:	6213      	str	r3, [r2, #32]
 8001462:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4a63      	ldr	r2, [pc, #396]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 8001468:	f023 0304 	bic.w	r3, r3, #4
 800146c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d015      	beq.n	80014a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff f9ff 	bl	8000878 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147c:	e00a      	b.n	8001494 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147e:	f7ff f9fb 	bl	8000878 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	f241 3288 	movw	r2, #5000	; 0x1388
 800148c:	4293      	cmp	r3, r2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e0ab      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001494:	4b57      	ldr	r3, [pc, #348]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0ee      	beq.n	800147e <HAL_RCC_OscConfig+0x37e>
 80014a0:	e014      	b.n	80014cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff f9e9 	bl	8000878 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff f9e5 	bl	8000878 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e095      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c0:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1ee      	bne.n	80014aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d105      	bne.n	80014de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d2:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	4a47      	ldr	r2, [pc, #284]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8081 	beq.w	80015ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e8:	4b42      	ldr	r3, [pc, #264]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d061      	beq.n	80015b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d146      	bne.n	800158a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fc:	4b3f      	ldr	r3, [pc, #252]	; (80015fc <HAL_RCC_OscConfig+0x4fc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff f9b9 	bl	8000878 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff f9b5 	bl	8000878 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e067      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151c:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001530:	d108      	bne.n	8001544 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001532:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	492d      	ldr	r1, [pc, #180]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a19      	ldr	r1, [r3, #32]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	430b      	orrs	r3, r1
 8001556:	4927      	ldr	r1, [pc, #156]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <HAL_RCC_OscConfig+0x4fc>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff f989 	bl	8000878 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff f985 	bl	8000878 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e037      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800157c:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x46a>
 8001588:	e02f      	b.n	80015ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_RCC_OscConfig+0x4fc>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff f972 	bl	8000878 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff f96e 	bl	8000878 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e020      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x498>
 80015b6:	e018      	b.n	80015ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e013      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_RCC_OscConfig+0x4f4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d106      	bne.n	80015e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d001      	beq.n	80015ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40007000 	.word	0x40007000
 80015fc:	42420060 	.word	0x42420060

08001600 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0d0      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001614:	4b6a      	ldr	r3, [pc, #424]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d910      	bls.n	8001644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b67      	ldr	r3, [pc, #412]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 0207 	bic.w	r2, r3, #7
 800162a:	4965      	ldr	r1, [pc, #404]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0b8      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d020      	beq.n	8001692 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001666:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001674:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800167e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	494d      	ldr	r1, [pc, #308]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d040      	beq.n	8001720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d115      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e07f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016be:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e073      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ce:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e06b      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016de:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f023 0203 	bic.w	r2, r3, #3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4936      	ldr	r1, [pc, #216]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f0:	f7ff f8c2 	bl	8000878 <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f6:	e00a      	b.n	800170e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f8:	f7ff f8be 	bl	8000878 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e053      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 020c 	and.w	r2, r3, #12
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	429a      	cmp	r2, r3
 800171e:	d1eb      	bne.n	80016f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d210      	bcs.n	8001750 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 0207 	bic.w	r2, r3, #7
 8001736:	4922      	ldr	r1, [pc, #136]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e032      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4916      	ldr	r1, [pc, #88]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	490e      	ldr	r1, [pc, #56]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800178e:	f000 f821 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8001792:	4602      	mov	r2, r0
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	490a      	ldr	r1, [pc, #40]	; (80017c8 <HAL_RCC_ClockConfig+0x1c8>)
 80017a0:	5ccb      	ldrb	r3, [r1, r3]
 80017a2:	fa22 f303 	lsr.w	r3, r2, r3
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x1cc>)
 80017a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_RCC_ClockConfig+0x1d0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f820 	bl	80007f4 <HAL_InitTick>

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000
 80017c4:	40021000 	.word	0x40021000
 80017c8:	08002f1c 	.word	0x08002f1c
 80017cc:	20000024 	.word	0x20000024
 80017d0:	20000028 	.word	0x20000028

080017d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d4:	b490      	push	{r4, r7}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017dc:	1d3c      	adds	r4, r7, #4
 80017de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017e4:	f240 2301 	movw	r3, #513	; 0x201
 80017e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017fe:	4b22      	ldr	r3, [pc, #136]	; (8001888 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b04      	cmp	r3, #4
 800180c:	d002      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x40>
 800180e:	2b08      	cmp	r3, #8
 8001810:	d003      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x46>
 8001812:	e02d      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001816:	623b      	str	r3, [r7, #32]
      break;
 8001818:	e02d      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	0c9b      	lsrs	r3, r3, #18
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001826:	4413      	add	r3, r2
 8001828:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800182c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_RCC_GetSysClockFreq+0xb4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	0c5b      	lsrs	r3, r3, #17
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001846:	4413      	add	r3, r2
 8001848:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800184c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	4a0e      	ldr	r2, [pc, #56]	; (800188c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001852:	fb02 f203 	mul.w	r2, r2, r3
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	fbb2 f3f3 	udiv	r3, r2, r3
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
 800185e:	e004      	b.n	800186a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	623b      	str	r3, [r7, #32]
      break;
 800186e:	e002      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001872:	623b      	str	r3, [r7, #32]
      break;
 8001874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001876:	6a3b      	ldr	r3, [r7, #32]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bc90      	pop	{r4, r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	08002f0c 	.word	0x08002f0c
 8001888:	40021000 	.word	0x40021000
 800188c:	007a1200 	.word	0x007a1200
 8001890:	003d0900 	.word	0x003d0900

08001894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	20000024 	.word	0x20000024

080018a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018ac:	f7ff fff2 	bl	8001894 <HAL_RCC_GetHCLKFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	4903      	ldr	r1, [pc, #12]	; (80018cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000
 80018cc:	08002f2c 	.word	0x08002f2c

080018d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018d4:	f7ff ffde 	bl	8001894 <HAL_RCC_GetHCLKFreq>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	0adb      	lsrs	r3, r3, #11
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	4903      	ldr	r1, [pc, #12]	; (80018f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018e6:	5ccb      	ldrb	r3, [r1, r3]
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08002f2c 	.word	0x08002f2c

080018f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <RCC_Delay+0x34>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <RCC_Delay+0x38>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	0a5b      	lsrs	r3, r3, #9
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	fb02 f303 	mul.w	r3, r2, r3
 8001912:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001914:	bf00      	nop
  }
  while (Delay --);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1e5a      	subs	r2, r3, #1
 800191a:	60fa      	str	r2, [r7, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f9      	bne.n	8001914 <RCC_Delay+0x1c>
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	20000024 	.word	0x20000024
 8001930:	10624dd3 	.word	0x10624dd3

08001934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e04a      	b.n	80019dc <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d111      	bne.n	8001976 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 fb32 	bl	8001fc4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a1e      	ldr	r2, [pc, #120]	; (80019e4 <HAL_UART_Init+0xb0>)
 800196c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2224      	movs	r2, #36	; 0x24
 800197a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800198c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fd26 	bl	80023e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2220      	movs	r2, #32
 80019ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2220      	movs	r2, #32
 80019d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	080006d5 	.word	0x080006d5

080019e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	d17c      	bne.n	8001b02 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HAL_UART_Transmit+0x2c>
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e075      	b.n	8001b04 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_UART_Transmit+0x3e>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e06e      	b.n	8001b04 <HAL_UART_Transmit+0x11c>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2221      	movs	r2, #33	; 0x21
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a3c:	f7fe ff1c 	bl	8000878 <HAL_GetTick>
 8001a40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	88fa      	ldrh	r2, [r7, #6]
 8001a46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	88fa      	ldrh	r2, [r7, #6]
 8001a4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a56:	d108      	bne.n	8001a6a <HAL_UART_Transmit+0x82>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d104      	bne.n	8001a6a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	e003      	b.n	8001a72 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a7a:	e02a      	b.n	8001ad2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2200      	movs	r2, #0
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 fad2 	bl	8002030 <UART_WaitOnFlagUntilTimeout>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e036      	b.n	8001b04 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aaa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	e007      	b.n	8001ac4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1cf      	bne.n	8001a7c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2140      	movs	r1, #64	; 0x40
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 faa2 	bl	8002030 <UART_WaitOnFlagUntilTimeout>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e006      	b.n	8001b04 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b02:	2302      	movs	r3, #2
  }
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	4613      	mov	r3, r2
 8001b18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d130      	bne.n	8001b88 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <HAL_UART_Transmit_IT+0x26>
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e029      	b.n	8001b8a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_UART_Transmit_IT+0x38>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e022      	b.n	8001b8a <HAL_UART_Transmit_IT+0x7e>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	88fa      	ldrh	r2, [r7, #6]
 8001b56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2221      	movs	r2, #33	; 0x21
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b82:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e000      	b.n	8001b8a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001b88:	2302      	movs	r3, #2
  }
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d11d      	bne.n	8001bea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_UART_Receive_IT+0x26>
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e016      	b.n	8001bec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_UART_Receive_IT+0x38>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e00f      	b.n	8001bec <HAL_UART_Receive_IT+0x58>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 fa6f 	bl	80020c4 <UART_Start_Receive_IT>
 8001be6:	4603      	mov	r3, r0
 8001be8:	e000      	b.n	8001bec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001bea:	2302      	movs	r3, #2
  }
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10d      	bne.n	8001c46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	f003 0320 	and.w	r3, r3, #32
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_UART_IRQHandler+0x52>
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fb22 	bl	8002288 <UART_Receive_IT>
      return;
 8001c44:	e180      	b.n	8001f48 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80b4 	beq.w	8001db6 <HAL_UART_IRQHandler+0x1c2>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <HAL_UART_IRQHandler+0x70>
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80a9 	beq.w	8001db6 <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <HAL_UART_IRQHandler+0x90>
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_UART_IRQHandler+0xb0>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f043 0202 	orr.w	r2, r3, #2
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_UART_IRQHandler+0xd0>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f043 0204 	orr.w	r2, r3, #4
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00f      	beq.n	8001cee <HAL_UART_IRQHandler+0xfa>
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d104      	bne.n	8001ce2 <HAL_UART_IRQHandler+0xee>
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f043 0208 	orr.w	r2, r3, #8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 8123 	beq.w	8001f3e <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <HAL_UART_IRQHandler+0x11e>
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f003 0320 	and.w	r3, r3, #32
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fabb 	bl	8002288 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <HAL_UART_IRQHandler+0x146>
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d033      	beq.n	8001da2 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f9fb 	bl	8002136 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d024      	beq.n	8001d98 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695a      	ldr	r2, [r3, #20]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d5c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d013      	beq.n	8001d8e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6a:	4a79      	ldr	r2, [pc, #484]	; (8001f50 <HAL_UART_IRQHandler+0x35c>)
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fef6 	bl	8000b64 <HAL_DMA_Abort_IT>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d019      	beq.n	8001db2 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d8c:	e011      	b.n	8001db2 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d96:	e00c      	b.n	8001db2 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da0:	e007      	b.n	8001db2 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001db0:	e0c5      	b.n	8001f3e <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001db2:	bf00      	nop
    return;
 8001db4:	e0c3      	b.n	8001f3e <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	f040 80a3 	bne.w	8001f06 <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 809d 	beq.w	8001f06 <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8097 	beq.w	8001f06 <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d04f      	beq.n	8001e9c <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001e06:	8a3b      	ldrh	r3, [r7, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 809a 	beq.w	8001f42 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e12:	8a3a      	ldrh	r2, [r7, #16]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f080 8094 	bcs.w	8001f42 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	8a3a      	ldrh	r2, [r7, #16]
 8001e1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d02b      	beq.n	8001e82 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e38:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e58:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0210 	bic.w	r2, r2, #16
 8001e76:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fe36 	bl	8000aee <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	1a8a      	subs	r2, r1, r2
 8001e92:	b292      	uxth	r2, r2
 8001e94:	4611      	mov	r1, r2
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8001e9a:	e052      	b.n	8001f42 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d048      	beq.n	8001f46 <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8001eb4:	8a7b      	ldrh	r3, [r7, #18]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d045      	beq.n	8001f46 <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ec8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0210 	bic.w	r2, r2, #16
 8001ef6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001efc:	8a7a      	ldrh	r2, [r7, #18]
 8001efe:	4611      	mov	r1, r2
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8001f04:	e01f      	b.n	8001f46 <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_UART_IRQHandler+0x32e>
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f94c 	bl	80021b8 <UART_Transmit_IT>
    return;
 8001f20:	e012      	b.n	8001f48 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00d      	beq.n	8001f48 <HAL_UART_IRQHandler+0x354>
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f98d 	bl	8002256 <UART_EndTransmit_IT>
    return;
 8001f3c:	e004      	b.n	8001f48 <HAL_UART_IRQHandler+0x354>
    return;
 8001f3e:	bf00      	nop
 8001f40:	e002      	b.n	8001f48 <HAL_UART_IRQHandler+0x354>
      return;
 8001f42:	bf00      	nop
 8001f44:	e000      	b.n	8001f48 <HAL_UART_IRQHandler+0x354>
      return;
 8001f46:	bf00      	nop
  }
}
 8001f48:	3728      	adds	r7, #40	; 0x28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	0800218f 	.word	0x0800218f

08001f54 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a0f      	ldr	r2, [pc, #60]	; (800200c <UART_InitCallbacksToDefault+0x48>)
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <UART_InitCallbacksToDefault+0x4c>)
 8001fd6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <UART_InitCallbacksToDefault+0x50>)
 8001fdc:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <UART_InitCallbacksToDefault+0x54>)
 8001fe2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a0d      	ldr	r2, [pc, #52]	; (800201c <UART_InitCallbacksToDefault+0x58>)
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <UART_InitCallbacksToDefault+0x5c>)
 8001fee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a0c      	ldr	r2, [pc, #48]	; (8002024 <UART_InitCallbacksToDefault+0x60>)
 8001ff4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <UART_InitCallbacksToDefault+0x64>)
 8001ffa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <UART_InitCallbacksToDefault+0x68>)
 8002000:	669a      	str	r2, [r3, #104]	; 0x68

}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	08001f55 	.word	0x08001f55
 8002010:	08000415 	.word	0x08000415
 8002014:	08001f67 	.word	0x08001f67
 8002018:	08000431 	.word	0x08000431
 800201c:	0800044d 	.word	0x0800044d
 8002020:	08001f79 	.word	0x08001f79
 8002024:	08001f8b 	.word	0x08001f8b
 8002028:	08001f9d 	.word	0x08001f9d
 800202c:	08001faf 	.word	0x08001faf

08002030 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002040:	e02c      	b.n	800209c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002048:	d028      	beq.n	800209c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <UART_WaitOnFlagUntilTimeout+0x30>
 8002050:	f7fe fc12 	bl	8000878 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	429a      	cmp	r2, r3
 800205e:	d21d      	bcs.n	800209c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800206e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e00f      	b.n	80020bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	4013      	ands	r3, r2
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d0c3      	beq.n	8002042 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	88fa      	ldrh	r2, [r7, #6]
 80020dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	88fa      	ldrh	r2, [r7, #6]
 80020e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2222      	movs	r2, #34	; 0x22
 80020ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002108:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0201 	orr.w	r2, r2, #1
 8002118:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0220 	orr.w	r2, r2, #32
 8002128:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800214c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0210 	bic.w	r2, r2, #16
 8002174:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b21      	cmp	r3, #33	; 0x21
 80021ca:	d13e      	bne.n	800224a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d4:	d114      	bne.n	8002200 <UART_Transmit_IT+0x48>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d110      	bne.n	8002200 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	1c9a      	adds	r2, r3, #2
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	621a      	str	r2, [r3, #32]
 80021fe:	e008      	b.n	8002212 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	1c59      	adds	r1, r3, #1
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6211      	str	r1, [r2, #32]
 800220a:	781a      	ldrb	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29b      	uxth	r3, r3
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4619      	mov	r1, r3
 8002220:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002234:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002244:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e000      	b.n	800224c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800224a:	2302      	movs	r3, #2
  }
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800226c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2220      	movs	r2, #32
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b22      	cmp	r3, #34	; 0x22
 800229a:	f040 809b 	bne.w	80023d4 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a6:	d117      	bne.n	80022d8 <UART_Receive_IT+0x50>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d113      	bne.n	80022d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	1c9a      	adds	r2, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28
 80022d6:	e026      	b.n	8002326 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ea:	d007      	beq.n	80022fc <UART_Receive_IT+0x74>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10a      	bne.n	800230a <UART_Receive_IT+0x82>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d106      	bne.n	800230a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	e008      	b.n	800231c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002316:	b2da      	uxtb	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29b      	uxth	r3, r3
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4619      	mov	r1, r3
 8002334:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002336:	2b00      	cmp	r3, #0
 8002338:	d14a      	bne.n	80023d0 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0220 	bic.w	r2, r2, #32
 8002348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002358:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	2b01      	cmp	r3, #1
 8002378:	d124      	bne.n	80023c4 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0210 	bic.w	r2, r2, #16
 800238e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b10      	cmp	r3, #16
 800239c:	d10a      	bne.n	80023b4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80023bc:	4611      	mov	r1, r2
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
 80023c2:	e003      	b.n	80023cc <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	e002      	b.n	80023d6 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	e000      	b.n	80023d6 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80023d4:	2302      	movs	r3, #2
  }
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800241a:	f023 030c 	bic.w	r3, r3, #12
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	430b      	orrs	r3, r1
 8002426:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a2c      	ldr	r2, [pc, #176]	; (80024f4 <UART_SetConfig+0x114>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d103      	bne.n	8002450 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002448:	f7ff fa42 	bl	80018d0 <HAL_RCC_GetPCLK2Freq>
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	e002      	b.n	8002456 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002450:	f7ff fa2a 	bl	80018a8 <HAL_RCC_GetPCLK1Freq>
 8002454:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	009a      	lsls	r2, r3, #2
 8002460:	441a      	add	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <UART_SetConfig+0x118>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	0119      	lsls	r1, r3, #4
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	009a      	lsls	r2, r3, #2
 8002480:	441a      	add	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	fbb2 f2f3 	udiv	r2, r2, r3
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <UART_SetConfig+0x118>)
 800248e:	fba3 0302 	umull	r0, r3, r3, r2
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2064      	movs	r0, #100	; 0x64
 8002496:	fb00 f303 	mul.w	r3, r0, r3
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	3332      	adds	r3, #50	; 0x32
 80024a0:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <UART_SetConfig+0x118>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ac:	4419      	add	r1, r3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	009a      	lsls	r2, r3, #2
 80024b8:	441a      	add	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <UART_SetConfig+0x118>)
 80024c6:	fba3 0302 	umull	r0, r3, r3, r2
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	2064      	movs	r0, #100	; 0x64
 80024ce:	fb00 f303 	mul.w	r3, r0, r3
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	3332      	adds	r3, #50	; 0x32
 80024d8:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <UART_SetConfig+0x118>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	f003 020f 	and.w	r2, r3, #15
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	440a      	add	r2, r1
 80024ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40013800 	.word	0x40013800
 80024f8:	51eb851f 	.word	0x51eb851f

080024fc <__errno>:
 80024fc:	4b01      	ldr	r3, [pc, #4]	; (8002504 <__errno+0x8>)
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000030 	.word	0x20000030

08002508 <__libc_init_array>:
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	2600      	movs	r6, #0
 800250c:	4d0c      	ldr	r5, [pc, #48]	; (8002540 <__libc_init_array+0x38>)
 800250e:	4c0d      	ldr	r4, [pc, #52]	; (8002544 <__libc_init_array+0x3c>)
 8002510:	1b64      	subs	r4, r4, r5
 8002512:	10a4      	asrs	r4, r4, #2
 8002514:	42a6      	cmp	r6, r4
 8002516:	d109      	bne.n	800252c <__libc_init_array+0x24>
 8002518:	f000 fce4 	bl	8002ee4 <_init>
 800251c:	2600      	movs	r6, #0
 800251e:	4d0a      	ldr	r5, [pc, #40]	; (8002548 <__libc_init_array+0x40>)
 8002520:	4c0a      	ldr	r4, [pc, #40]	; (800254c <__libc_init_array+0x44>)
 8002522:	1b64      	subs	r4, r4, r5
 8002524:	10a4      	asrs	r4, r4, #2
 8002526:	42a6      	cmp	r6, r4
 8002528:	d105      	bne.n	8002536 <__libc_init_array+0x2e>
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002530:	4798      	blx	r3
 8002532:	3601      	adds	r6, #1
 8002534:	e7ee      	b.n	8002514 <__libc_init_array+0xc>
 8002536:	f855 3b04 	ldr.w	r3, [r5], #4
 800253a:	4798      	blx	r3
 800253c:	3601      	adds	r6, #1
 800253e:	e7f2      	b.n	8002526 <__libc_init_array+0x1e>
 8002540:	08002f98 	.word	0x08002f98
 8002544:	08002f98 	.word	0x08002f98
 8002548:	08002f98 	.word	0x08002f98
 800254c:	08002f9c 	.word	0x08002f9c

08002550 <memset>:
 8002550:	4603      	mov	r3, r0
 8002552:	4402      	add	r2, r0
 8002554:	4293      	cmp	r3, r2
 8002556:	d100      	bne.n	800255a <memset+0xa>
 8002558:	4770      	bx	lr
 800255a:	f803 1b01 	strb.w	r1, [r3], #1
 800255e:	e7f9      	b.n	8002554 <memset+0x4>

08002560 <_puts_r>:
 8002560:	b570      	push	{r4, r5, r6, lr}
 8002562:	460e      	mov	r6, r1
 8002564:	4605      	mov	r5, r0
 8002566:	b118      	cbz	r0, 8002570 <_puts_r+0x10>
 8002568:	6983      	ldr	r3, [r0, #24]
 800256a:	b90b      	cbnz	r3, 8002570 <_puts_r+0x10>
 800256c:	f000 fa48 	bl	8002a00 <__sinit>
 8002570:	69ab      	ldr	r3, [r5, #24]
 8002572:	68ac      	ldr	r4, [r5, #8]
 8002574:	b913      	cbnz	r3, 800257c <_puts_r+0x1c>
 8002576:	4628      	mov	r0, r5
 8002578:	f000 fa42 	bl	8002a00 <__sinit>
 800257c:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <_puts_r+0xd0>)
 800257e:	429c      	cmp	r4, r3
 8002580:	d120      	bne.n	80025c4 <_puts_r+0x64>
 8002582:	686c      	ldr	r4, [r5, #4]
 8002584:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002586:	07db      	lsls	r3, r3, #31
 8002588:	d405      	bmi.n	8002596 <_puts_r+0x36>
 800258a:	89a3      	ldrh	r3, [r4, #12]
 800258c:	0598      	lsls	r0, r3, #22
 800258e:	d402      	bmi.n	8002596 <_puts_r+0x36>
 8002590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002592:	f000 fad3 	bl	8002b3c <__retarget_lock_acquire_recursive>
 8002596:	89a3      	ldrh	r3, [r4, #12]
 8002598:	0719      	lsls	r1, r3, #28
 800259a:	d51d      	bpl.n	80025d8 <_puts_r+0x78>
 800259c:	6923      	ldr	r3, [r4, #16]
 800259e:	b1db      	cbz	r3, 80025d8 <_puts_r+0x78>
 80025a0:	3e01      	subs	r6, #1
 80025a2:	68a3      	ldr	r3, [r4, #8]
 80025a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60a3      	str	r3, [r4, #8]
 80025ac:	bb39      	cbnz	r1, 80025fe <_puts_r+0x9e>
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da38      	bge.n	8002624 <_puts_r+0xc4>
 80025b2:	4622      	mov	r2, r4
 80025b4:	210a      	movs	r1, #10
 80025b6:	4628      	mov	r0, r5
 80025b8:	f000 f848 	bl	800264c <__swbuf_r>
 80025bc:	3001      	adds	r0, #1
 80025be:	d011      	beq.n	80025e4 <_puts_r+0x84>
 80025c0:	250a      	movs	r5, #10
 80025c2:	e011      	b.n	80025e8 <_puts_r+0x88>
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <_puts_r+0xd4>)
 80025c6:	429c      	cmp	r4, r3
 80025c8:	d101      	bne.n	80025ce <_puts_r+0x6e>
 80025ca:	68ac      	ldr	r4, [r5, #8]
 80025cc:	e7da      	b.n	8002584 <_puts_r+0x24>
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <_puts_r+0xd8>)
 80025d0:	429c      	cmp	r4, r3
 80025d2:	bf08      	it	eq
 80025d4:	68ec      	ldreq	r4, [r5, #12]
 80025d6:	e7d5      	b.n	8002584 <_puts_r+0x24>
 80025d8:	4621      	mov	r1, r4
 80025da:	4628      	mov	r0, r5
 80025dc:	f000 f888 	bl	80026f0 <__swsetup_r>
 80025e0:	2800      	cmp	r0, #0
 80025e2:	d0dd      	beq.n	80025a0 <_puts_r+0x40>
 80025e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80025e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025ea:	07da      	lsls	r2, r3, #31
 80025ec:	d405      	bmi.n	80025fa <_puts_r+0x9a>
 80025ee:	89a3      	ldrh	r3, [r4, #12]
 80025f0:	059b      	lsls	r3, r3, #22
 80025f2:	d402      	bmi.n	80025fa <_puts_r+0x9a>
 80025f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025f6:	f000 faa2 	bl	8002b3e <__retarget_lock_release_recursive>
 80025fa:	4628      	mov	r0, r5
 80025fc:	bd70      	pop	{r4, r5, r6, pc}
 80025fe:	2b00      	cmp	r3, #0
 8002600:	da04      	bge.n	800260c <_puts_r+0xac>
 8002602:	69a2      	ldr	r2, [r4, #24]
 8002604:	429a      	cmp	r2, r3
 8002606:	dc06      	bgt.n	8002616 <_puts_r+0xb6>
 8002608:	290a      	cmp	r1, #10
 800260a:	d004      	beq.n	8002616 <_puts_r+0xb6>
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	6022      	str	r2, [r4, #0]
 8002612:	7019      	strb	r1, [r3, #0]
 8002614:	e7c5      	b.n	80025a2 <_puts_r+0x42>
 8002616:	4622      	mov	r2, r4
 8002618:	4628      	mov	r0, r5
 800261a:	f000 f817 	bl	800264c <__swbuf_r>
 800261e:	3001      	adds	r0, #1
 8002620:	d1bf      	bne.n	80025a2 <_puts_r+0x42>
 8002622:	e7df      	b.n	80025e4 <_puts_r+0x84>
 8002624:	250a      	movs	r5, #10
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	6022      	str	r2, [r4, #0]
 800262c:	701d      	strb	r5, [r3, #0]
 800262e:	e7db      	b.n	80025e8 <_puts_r+0x88>
 8002630:	08002f58 	.word	0x08002f58
 8002634:	08002f78 	.word	0x08002f78
 8002638:	08002f38 	.word	0x08002f38

0800263c <puts>:
 800263c:	4b02      	ldr	r3, [pc, #8]	; (8002648 <puts+0xc>)
 800263e:	4601      	mov	r1, r0
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	f7ff bf8d 	b.w	8002560 <_puts_r>
 8002646:	bf00      	nop
 8002648:	20000030 	.word	0x20000030

0800264c <__swbuf_r>:
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264e:	460e      	mov	r6, r1
 8002650:	4614      	mov	r4, r2
 8002652:	4605      	mov	r5, r0
 8002654:	b118      	cbz	r0, 800265e <__swbuf_r+0x12>
 8002656:	6983      	ldr	r3, [r0, #24]
 8002658:	b90b      	cbnz	r3, 800265e <__swbuf_r+0x12>
 800265a:	f000 f9d1 	bl	8002a00 <__sinit>
 800265e:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <__swbuf_r+0x98>)
 8002660:	429c      	cmp	r4, r3
 8002662:	d12b      	bne.n	80026bc <__swbuf_r+0x70>
 8002664:	686c      	ldr	r4, [r5, #4]
 8002666:	69a3      	ldr	r3, [r4, #24]
 8002668:	60a3      	str	r3, [r4, #8]
 800266a:	89a3      	ldrh	r3, [r4, #12]
 800266c:	071a      	lsls	r2, r3, #28
 800266e:	d52f      	bpl.n	80026d0 <__swbuf_r+0x84>
 8002670:	6923      	ldr	r3, [r4, #16]
 8002672:	b36b      	cbz	r3, 80026d0 <__swbuf_r+0x84>
 8002674:	6923      	ldr	r3, [r4, #16]
 8002676:	6820      	ldr	r0, [r4, #0]
 8002678:	b2f6      	uxtb	r6, r6
 800267a:	1ac0      	subs	r0, r0, r3
 800267c:	6963      	ldr	r3, [r4, #20]
 800267e:	4637      	mov	r7, r6
 8002680:	4283      	cmp	r3, r0
 8002682:	dc04      	bgt.n	800268e <__swbuf_r+0x42>
 8002684:	4621      	mov	r1, r4
 8002686:	4628      	mov	r0, r5
 8002688:	f000 f926 	bl	80028d8 <_fflush_r>
 800268c:	bb30      	cbnz	r0, 80026dc <__swbuf_r+0x90>
 800268e:	68a3      	ldr	r3, [r4, #8]
 8002690:	3001      	adds	r0, #1
 8002692:	3b01      	subs	r3, #1
 8002694:	60a3      	str	r3, [r4, #8]
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	6022      	str	r2, [r4, #0]
 800269c:	701e      	strb	r6, [r3, #0]
 800269e:	6963      	ldr	r3, [r4, #20]
 80026a0:	4283      	cmp	r3, r0
 80026a2:	d004      	beq.n	80026ae <__swbuf_r+0x62>
 80026a4:	89a3      	ldrh	r3, [r4, #12]
 80026a6:	07db      	lsls	r3, r3, #31
 80026a8:	d506      	bpl.n	80026b8 <__swbuf_r+0x6c>
 80026aa:	2e0a      	cmp	r6, #10
 80026ac:	d104      	bne.n	80026b8 <__swbuf_r+0x6c>
 80026ae:	4621      	mov	r1, r4
 80026b0:	4628      	mov	r0, r5
 80026b2:	f000 f911 	bl	80028d8 <_fflush_r>
 80026b6:	b988      	cbnz	r0, 80026dc <__swbuf_r+0x90>
 80026b8:	4638      	mov	r0, r7
 80026ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <__swbuf_r+0x9c>)
 80026be:	429c      	cmp	r4, r3
 80026c0:	d101      	bne.n	80026c6 <__swbuf_r+0x7a>
 80026c2:	68ac      	ldr	r4, [r5, #8]
 80026c4:	e7cf      	b.n	8002666 <__swbuf_r+0x1a>
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <__swbuf_r+0xa0>)
 80026c8:	429c      	cmp	r4, r3
 80026ca:	bf08      	it	eq
 80026cc:	68ec      	ldreq	r4, [r5, #12]
 80026ce:	e7ca      	b.n	8002666 <__swbuf_r+0x1a>
 80026d0:	4621      	mov	r1, r4
 80026d2:	4628      	mov	r0, r5
 80026d4:	f000 f80c 	bl	80026f0 <__swsetup_r>
 80026d8:	2800      	cmp	r0, #0
 80026da:	d0cb      	beq.n	8002674 <__swbuf_r+0x28>
 80026dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80026e0:	e7ea      	b.n	80026b8 <__swbuf_r+0x6c>
 80026e2:	bf00      	nop
 80026e4:	08002f58 	.word	0x08002f58
 80026e8:	08002f78 	.word	0x08002f78
 80026ec:	08002f38 	.word	0x08002f38

080026f0 <__swsetup_r>:
 80026f0:	4b32      	ldr	r3, [pc, #200]	; (80027bc <__swsetup_r+0xcc>)
 80026f2:	b570      	push	{r4, r5, r6, lr}
 80026f4:	681d      	ldr	r5, [r3, #0]
 80026f6:	4606      	mov	r6, r0
 80026f8:	460c      	mov	r4, r1
 80026fa:	b125      	cbz	r5, 8002706 <__swsetup_r+0x16>
 80026fc:	69ab      	ldr	r3, [r5, #24]
 80026fe:	b913      	cbnz	r3, 8002706 <__swsetup_r+0x16>
 8002700:	4628      	mov	r0, r5
 8002702:	f000 f97d 	bl	8002a00 <__sinit>
 8002706:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <__swsetup_r+0xd0>)
 8002708:	429c      	cmp	r4, r3
 800270a:	d10f      	bne.n	800272c <__swsetup_r+0x3c>
 800270c:	686c      	ldr	r4, [r5, #4]
 800270e:	89a3      	ldrh	r3, [r4, #12]
 8002710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002714:	0719      	lsls	r1, r3, #28
 8002716:	d42c      	bmi.n	8002772 <__swsetup_r+0x82>
 8002718:	06dd      	lsls	r5, r3, #27
 800271a:	d411      	bmi.n	8002740 <__swsetup_r+0x50>
 800271c:	2309      	movs	r3, #9
 800271e:	6033      	str	r3, [r6, #0]
 8002720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002728:	81a3      	strh	r3, [r4, #12]
 800272a:	e03e      	b.n	80027aa <__swsetup_r+0xba>
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <__swsetup_r+0xd4>)
 800272e:	429c      	cmp	r4, r3
 8002730:	d101      	bne.n	8002736 <__swsetup_r+0x46>
 8002732:	68ac      	ldr	r4, [r5, #8]
 8002734:	e7eb      	b.n	800270e <__swsetup_r+0x1e>
 8002736:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <__swsetup_r+0xd8>)
 8002738:	429c      	cmp	r4, r3
 800273a:	bf08      	it	eq
 800273c:	68ec      	ldreq	r4, [r5, #12]
 800273e:	e7e6      	b.n	800270e <__swsetup_r+0x1e>
 8002740:	0758      	lsls	r0, r3, #29
 8002742:	d512      	bpl.n	800276a <__swsetup_r+0x7a>
 8002744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002746:	b141      	cbz	r1, 800275a <__swsetup_r+0x6a>
 8002748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800274c:	4299      	cmp	r1, r3
 800274e:	d002      	beq.n	8002756 <__swsetup_r+0x66>
 8002750:	4630      	mov	r0, r6
 8002752:	f000 fa59 	bl	8002c08 <_free_r>
 8002756:	2300      	movs	r3, #0
 8002758:	6363      	str	r3, [r4, #52]	; 0x34
 800275a:	89a3      	ldrh	r3, [r4, #12]
 800275c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002760:	81a3      	strh	r3, [r4, #12]
 8002762:	2300      	movs	r3, #0
 8002764:	6063      	str	r3, [r4, #4]
 8002766:	6923      	ldr	r3, [r4, #16]
 8002768:	6023      	str	r3, [r4, #0]
 800276a:	89a3      	ldrh	r3, [r4, #12]
 800276c:	f043 0308 	orr.w	r3, r3, #8
 8002770:	81a3      	strh	r3, [r4, #12]
 8002772:	6923      	ldr	r3, [r4, #16]
 8002774:	b94b      	cbnz	r3, 800278a <__swsetup_r+0x9a>
 8002776:	89a3      	ldrh	r3, [r4, #12]
 8002778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800277c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002780:	d003      	beq.n	800278a <__swsetup_r+0x9a>
 8002782:	4621      	mov	r1, r4
 8002784:	4630      	mov	r0, r6
 8002786:	f000 f9ff 	bl	8002b88 <__smakebuf_r>
 800278a:	89a0      	ldrh	r0, [r4, #12]
 800278c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002790:	f010 0301 	ands.w	r3, r0, #1
 8002794:	d00a      	beq.n	80027ac <__swsetup_r+0xbc>
 8002796:	2300      	movs	r3, #0
 8002798:	60a3      	str	r3, [r4, #8]
 800279a:	6963      	ldr	r3, [r4, #20]
 800279c:	425b      	negs	r3, r3
 800279e:	61a3      	str	r3, [r4, #24]
 80027a0:	6923      	ldr	r3, [r4, #16]
 80027a2:	b943      	cbnz	r3, 80027b6 <__swsetup_r+0xc6>
 80027a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80027a8:	d1ba      	bne.n	8002720 <__swsetup_r+0x30>
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
 80027ac:	0781      	lsls	r1, r0, #30
 80027ae:	bf58      	it	pl
 80027b0:	6963      	ldrpl	r3, [r4, #20]
 80027b2:	60a3      	str	r3, [r4, #8]
 80027b4:	e7f4      	b.n	80027a0 <__swsetup_r+0xb0>
 80027b6:	2000      	movs	r0, #0
 80027b8:	e7f7      	b.n	80027aa <__swsetup_r+0xba>
 80027ba:	bf00      	nop
 80027bc:	20000030 	.word	0x20000030
 80027c0:	08002f58 	.word	0x08002f58
 80027c4:	08002f78 	.word	0x08002f78
 80027c8:	08002f38 	.word	0x08002f38

080027cc <__sflush_r>:
 80027cc:	898a      	ldrh	r2, [r1, #12]
 80027ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027d2:	4605      	mov	r5, r0
 80027d4:	0710      	lsls	r0, r2, #28
 80027d6:	460c      	mov	r4, r1
 80027d8:	d458      	bmi.n	800288c <__sflush_r+0xc0>
 80027da:	684b      	ldr	r3, [r1, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	dc05      	bgt.n	80027ec <__sflush_r+0x20>
 80027e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	dc02      	bgt.n	80027ec <__sflush_r+0x20>
 80027e6:	2000      	movs	r0, #0
 80027e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027ee:	2e00      	cmp	r6, #0
 80027f0:	d0f9      	beq.n	80027e6 <__sflush_r+0x1a>
 80027f2:	2300      	movs	r3, #0
 80027f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80027f8:	682f      	ldr	r7, [r5, #0]
 80027fa:	602b      	str	r3, [r5, #0]
 80027fc:	d032      	beq.n	8002864 <__sflush_r+0x98>
 80027fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002800:	89a3      	ldrh	r3, [r4, #12]
 8002802:	075a      	lsls	r2, r3, #29
 8002804:	d505      	bpl.n	8002812 <__sflush_r+0x46>
 8002806:	6863      	ldr	r3, [r4, #4]
 8002808:	1ac0      	subs	r0, r0, r3
 800280a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800280c:	b10b      	cbz	r3, 8002812 <__sflush_r+0x46>
 800280e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002810:	1ac0      	subs	r0, r0, r3
 8002812:	2300      	movs	r3, #0
 8002814:	4602      	mov	r2, r0
 8002816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002818:	4628      	mov	r0, r5
 800281a:	6a21      	ldr	r1, [r4, #32]
 800281c:	47b0      	blx	r6
 800281e:	1c43      	adds	r3, r0, #1
 8002820:	89a3      	ldrh	r3, [r4, #12]
 8002822:	d106      	bne.n	8002832 <__sflush_r+0x66>
 8002824:	6829      	ldr	r1, [r5, #0]
 8002826:	291d      	cmp	r1, #29
 8002828:	d82c      	bhi.n	8002884 <__sflush_r+0xb8>
 800282a:	4a2a      	ldr	r2, [pc, #168]	; (80028d4 <__sflush_r+0x108>)
 800282c:	40ca      	lsrs	r2, r1
 800282e:	07d6      	lsls	r6, r2, #31
 8002830:	d528      	bpl.n	8002884 <__sflush_r+0xb8>
 8002832:	2200      	movs	r2, #0
 8002834:	6062      	str	r2, [r4, #4]
 8002836:	6922      	ldr	r2, [r4, #16]
 8002838:	04d9      	lsls	r1, r3, #19
 800283a:	6022      	str	r2, [r4, #0]
 800283c:	d504      	bpl.n	8002848 <__sflush_r+0x7c>
 800283e:	1c42      	adds	r2, r0, #1
 8002840:	d101      	bne.n	8002846 <__sflush_r+0x7a>
 8002842:	682b      	ldr	r3, [r5, #0]
 8002844:	b903      	cbnz	r3, 8002848 <__sflush_r+0x7c>
 8002846:	6560      	str	r0, [r4, #84]	; 0x54
 8002848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800284a:	602f      	str	r7, [r5, #0]
 800284c:	2900      	cmp	r1, #0
 800284e:	d0ca      	beq.n	80027e6 <__sflush_r+0x1a>
 8002850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002854:	4299      	cmp	r1, r3
 8002856:	d002      	beq.n	800285e <__sflush_r+0x92>
 8002858:	4628      	mov	r0, r5
 800285a:	f000 f9d5 	bl	8002c08 <_free_r>
 800285e:	2000      	movs	r0, #0
 8002860:	6360      	str	r0, [r4, #52]	; 0x34
 8002862:	e7c1      	b.n	80027e8 <__sflush_r+0x1c>
 8002864:	6a21      	ldr	r1, [r4, #32]
 8002866:	2301      	movs	r3, #1
 8002868:	4628      	mov	r0, r5
 800286a:	47b0      	blx	r6
 800286c:	1c41      	adds	r1, r0, #1
 800286e:	d1c7      	bne.n	8002800 <__sflush_r+0x34>
 8002870:	682b      	ldr	r3, [r5, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0c4      	beq.n	8002800 <__sflush_r+0x34>
 8002876:	2b1d      	cmp	r3, #29
 8002878:	d001      	beq.n	800287e <__sflush_r+0xb2>
 800287a:	2b16      	cmp	r3, #22
 800287c:	d101      	bne.n	8002882 <__sflush_r+0xb6>
 800287e:	602f      	str	r7, [r5, #0]
 8002880:	e7b1      	b.n	80027e6 <__sflush_r+0x1a>
 8002882:	89a3      	ldrh	r3, [r4, #12]
 8002884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002888:	81a3      	strh	r3, [r4, #12]
 800288a:	e7ad      	b.n	80027e8 <__sflush_r+0x1c>
 800288c:	690f      	ldr	r7, [r1, #16]
 800288e:	2f00      	cmp	r7, #0
 8002890:	d0a9      	beq.n	80027e6 <__sflush_r+0x1a>
 8002892:	0793      	lsls	r3, r2, #30
 8002894:	bf18      	it	ne
 8002896:	2300      	movne	r3, #0
 8002898:	680e      	ldr	r6, [r1, #0]
 800289a:	bf08      	it	eq
 800289c:	694b      	ldreq	r3, [r1, #20]
 800289e:	eba6 0807 	sub.w	r8, r6, r7
 80028a2:	600f      	str	r7, [r1, #0]
 80028a4:	608b      	str	r3, [r1, #8]
 80028a6:	f1b8 0f00 	cmp.w	r8, #0
 80028aa:	dd9c      	ble.n	80027e6 <__sflush_r+0x1a>
 80028ac:	4643      	mov	r3, r8
 80028ae:	463a      	mov	r2, r7
 80028b0:	4628      	mov	r0, r5
 80028b2:	6a21      	ldr	r1, [r4, #32]
 80028b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028b6:	47b0      	blx	r6
 80028b8:	2800      	cmp	r0, #0
 80028ba:	dc06      	bgt.n	80028ca <__sflush_r+0xfe>
 80028bc:	89a3      	ldrh	r3, [r4, #12]
 80028be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c6:	81a3      	strh	r3, [r4, #12]
 80028c8:	e78e      	b.n	80027e8 <__sflush_r+0x1c>
 80028ca:	4407      	add	r7, r0
 80028cc:	eba8 0800 	sub.w	r8, r8, r0
 80028d0:	e7e9      	b.n	80028a6 <__sflush_r+0xda>
 80028d2:	bf00      	nop
 80028d4:	20400001 	.word	0x20400001

080028d8 <_fflush_r>:
 80028d8:	b538      	push	{r3, r4, r5, lr}
 80028da:	690b      	ldr	r3, [r1, #16]
 80028dc:	4605      	mov	r5, r0
 80028de:	460c      	mov	r4, r1
 80028e0:	b913      	cbnz	r3, 80028e8 <_fflush_r+0x10>
 80028e2:	2500      	movs	r5, #0
 80028e4:	4628      	mov	r0, r5
 80028e6:	bd38      	pop	{r3, r4, r5, pc}
 80028e8:	b118      	cbz	r0, 80028f2 <_fflush_r+0x1a>
 80028ea:	6983      	ldr	r3, [r0, #24]
 80028ec:	b90b      	cbnz	r3, 80028f2 <_fflush_r+0x1a>
 80028ee:	f000 f887 	bl	8002a00 <__sinit>
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <_fflush_r+0x6c>)
 80028f4:	429c      	cmp	r4, r3
 80028f6:	d11b      	bne.n	8002930 <_fflush_r+0x58>
 80028f8:	686c      	ldr	r4, [r5, #4]
 80028fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0ef      	beq.n	80028e2 <_fflush_r+0xa>
 8002902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002904:	07d0      	lsls	r0, r2, #31
 8002906:	d404      	bmi.n	8002912 <_fflush_r+0x3a>
 8002908:	0599      	lsls	r1, r3, #22
 800290a:	d402      	bmi.n	8002912 <_fflush_r+0x3a>
 800290c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800290e:	f000 f915 	bl	8002b3c <__retarget_lock_acquire_recursive>
 8002912:	4628      	mov	r0, r5
 8002914:	4621      	mov	r1, r4
 8002916:	f7ff ff59 	bl	80027cc <__sflush_r>
 800291a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800291c:	4605      	mov	r5, r0
 800291e:	07da      	lsls	r2, r3, #31
 8002920:	d4e0      	bmi.n	80028e4 <_fflush_r+0xc>
 8002922:	89a3      	ldrh	r3, [r4, #12]
 8002924:	059b      	lsls	r3, r3, #22
 8002926:	d4dd      	bmi.n	80028e4 <_fflush_r+0xc>
 8002928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800292a:	f000 f908 	bl	8002b3e <__retarget_lock_release_recursive>
 800292e:	e7d9      	b.n	80028e4 <_fflush_r+0xc>
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <_fflush_r+0x70>)
 8002932:	429c      	cmp	r4, r3
 8002934:	d101      	bne.n	800293a <_fflush_r+0x62>
 8002936:	68ac      	ldr	r4, [r5, #8]
 8002938:	e7df      	b.n	80028fa <_fflush_r+0x22>
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <_fflush_r+0x74>)
 800293c:	429c      	cmp	r4, r3
 800293e:	bf08      	it	eq
 8002940:	68ec      	ldreq	r4, [r5, #12]
 8002942:	e7da      	b.n	80028fa <_fflush_r+0x22>
 8002944:	08002f58 	.word	0x08002f58
 8002948:	08002f78 	.word	0x08002f78
 800294c:	08002f38 	.word	0x08002f38

08002950 <std>:
 8002950:	2300      	movs	r3, #0
 8002952:	b510      	push	{r4, lr}
 8002954:	4604      	mov	r4, r0
 8002956:	e9c0 3300 	strd	r3, r3, [r0]
 800295a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800295e:	6083      	str	r3, [r0, #8]
 8002960:	8181      	strh	r1, [r0, #12]
 8002962:	6643      	str	r3, [r0, #100]	; 0x64
 8002964:	81c2      	strh	r2, [r0, #14]
 8002966:	6183      	str	r3, [r0, #24]
 8002968:	4619      	mov	r1, r3
 800296a:	2208      	movs	r2, #8
 800296c:	305c      	adds	r0, #92	; 0x5c
 800296e:	f7ff fdef 	bl	8002550 <memset>
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <std+0x38>)
 8002974:	6224      	str	r4, [r4, #32]
 8002976:	6263      	str	r3, [r4, #36]	; 0x24
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <std+0x3c>)
 800297a:	62a3      	str	r3, [r4, #40]	; 0x28
 800297c:	4b04      	ldr	r3, [pc, #16]	; (8002990 <std+0x40>)
 800297e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <std+0x44>)
 8002982:	6323      	str	r3, [r4, #48]	; 0x30
 8002984:	bd10      	pop	{r4, pc}
 8002986:	bf00      	nop
 8002988:	08002d75 	.word	0x08002d75
 800298c:	08002d97 	.word	0x08002d97
 8002990:	08002dcf 	.word	0x08002dcf
 8002994:	08002df3 	.word	0x08002df3

08002998 <_cleanup_r>:
 8002998:	4901      	ldr	r1, [pc, #4]	; (80029a0 <_cleanup_r+0x8>)
 800299a:	f000 b8af 	b.w	8002afc <_fwalk_reent>
 800299e:	bf00      	nop
 80029a0:	080028d9 	.word	0x080028d9

080029a4 <__sfmoreglue>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	2568      	movs	r5, #104	; 0x68
 80029a8:	1e4a      	subs	r2, r1, #1
 80029aa:	4355      	muls	r5, r2
 80029ac:	460e      	mov	r6, r1
 80029ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80029b2:	f000 f975 	bl	8002ca0 <_malloc_r>
 80029b6:	4604      	mov	r4, r0
 80029b8:	b140      	cbz	r0, 80029cc <__sfmoreglue+0x28>
 80029ba:	2100      	movs	r1, #0
 80029bc:	e9c0 1600 	strd	r1, r6, [r0]
 80029c0:	300c      	adds	r0, #12
 80029c2:	60a0      	str	r0, [r4, #8]
 80029c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80029c8:	f7ff fdc2 	bl	8002550 <memset>
 80029cc:	4620      	mov	r0, r4
 80029ce:	bd70      	pop	{r4, r5, r6, pc}

080029d0 <__sfp_lock_acquire>:
 80029d0:	4801      	ldr	r0, [pc, #4]	; (80029d8 <__sfp_lock_acquire+0x8>)
 80029d2:	f000 b8b3 	b.w	8002b3c <__retarget_lock_acquire_recursive>
 80029d6:	bf00      	nop
 80029d8:	20000160 	.word	0x20000160

080029dc <__sfp_lock_release>:
 80029dc:	4801      	ldr	r0, [pc, #4]	; (80029e4 <__sfp_lock_release+0x8>)
 80029de:	f000 b8ae 	b.w	8002b3e <__retarget_lock_release_recursive>
 80029e2:	bf00      	nop
 80029e4:	20000160 	.word	0x20000160

080029e8 <__sinit_lock_acquire>:
 80029e8:	4801      	ldr	r0, [pc, #4]	; (80029f0 <__sinit_lock_acquire+0x8>)
 80029ea:	f000 b8a7 	b.w	8002b3c <__retarget_lock_acquire_recursive>
 80029ee:	bf00      	nop
 80029f0:	2000015b 	.word	0x2000015b

080029f4 <__sinit_lock_release>:
 80029f4:	4801      	ldr	r0, [pc, #4]	; (80029fc <__sinit_lock_release+0x8>)
 80029f6:	f000 b8a2 	b.w	8002b3e <__retarget_lock_release_recursive>
 80029fa:	bf00      	nop
 80029fc:	2000015b 	.word	0x2000015b

08002a00 <__sinit>:
 8002a00:	b510      	push	{r4, lr}
 8002a02:	4604      	mov	r4, r0
 8002a04:	f7ff fff0 	bl	80029e8 <__sinit_lock_acquire>
 8002a08:	69a3      	ldr	r3, [r4, #24]
 8002a0a:	b11b      	cbz	r3, 8002a14 <__sinit+0x14>
 8002a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a10:	f7ff bff0 	b.w	80029f4 <__sinit_lock_release>
 8002a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a18:	6523      	str	r3, [r4, #80]	; 0x50
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <__sinit+0x68>)
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <__sinit+0x6c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a22:	42a3      	cmp	r3, r4
 8002a24:	bf08      	it	eq
 8002a26:	2301      	moveq	r3, #1
 8002a28:	4620      	mov	r0, r4
 8002a2a:	bf08      	it	eq
 8002a2c:	61a3      	streq	r3, [r4, #24]
 8002a2e:	f000 f81f 	bl	8002a70 <__sfp>
 8002a32:	6060      	str	r0, [r4, #4]
 8002a34:	4620      	mov	r0, r4
 8002a36:	f000 f81b 	bl	8002a70 <__sfp>
 8002a3a:	60a0      	str	r0, [r4, #8]
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f000 f817 	bl	8002a70 <__sfp>
 8002a42:	2200      	movs	r2, #0
 8002a44:	2104      	movs	r1, #4
 8002a46:	60e0      	str	r0, [r4, #12]
 8002a48:	6860      	ldr	r0, [r4, #4]
 8002a4a:	f7ff ff81 	bl	8002950 <std>
 8002a4e:	2201      	movs	r2, #1
 8002a50:	2109      	movs	r1, #9
 8002a52:	68a0      	ldr	r0, [r4, #8]
 8002a54:	f7ff ff7c 	bl	8002950 <std>
 8002a58:	2202      	movs	r2, #2
 8002a5a:	2112      	movs	r1, #18
 8002a5c:	68e0      	ldr	r0, [r4, #12]
 8002a5e:	f7ff ff77 	bl	8002950 <std>
 8002a62:	2301      	movs	r3, #1
 8002a64:	61a3      	str	r3, [r4, #24]
 8002a66:	e7d1      	b.n	8002a0c <__sinit+0xc>
 8002a68:	08002f34 	.word	0x08002f34
 8002a6c:	08002999 	.word	0x08002999

08002a70 <__sfp>:
 8002a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a72:	4607      	mov	r7, r0
 8002a74:	f7ff ffac 	bl	80029d0 <__sfp_lock_acquire>
 8002a78:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <__sfp+0x84>)
 8002a7a:	681e      	ldr	r6, [r3, #0]
 8002a7c:	69b3      	ldr	r3, [r6, #24]
 8002a7e:	b913      	cbnz	r3, 8002a86 <__sfp+0x16>
 8002a80:	4630      	mov	r0, r6
 8002a82:	f7ff ffbd 	bl	8002a00 <__sinit>
 8002a86:	3648      	adds	r6, #72	; 0x48
 8002a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	d503      	bpl.n	8002a98 <__sfp+0x28>
 8002a90:	6833      	ldr	r3, [r6, #0]
 8002a92:	b30b      	cbz	r3, 8002ad8 <__sfp+0x68>
 8002a94:	6836      	ldr	r6, [r6, #0]
 8002a96:	e7f7      	b.n	8002a88 <__sfp+0x18>
 8002a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a9c:	b9d5      	cbnz	r5, 8002ad4 <__sfp+0x64>
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <__sfp+0x88>)
 8002aa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002aa4:	60e3      	str	r3, [r4, #12]
 8002aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8002aa8:	f000 f847 	bl	8002b3a <__retarget_lock_init_recursive>
 8002aac:	f7ff ff96 	bl	80029dc <__sfp_lock_release>
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	4629      	mov	r1, r5
 8002ab4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002ab8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002abc:	6025      	str	r5, [r4, #0]
 8002abe:	61a5      	str	r5, [r4, #24]
 8002ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ac4:	f7ff fd44 	bl	8002550 <memset>
 8002ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ad4:	3468      	adds	r4, #104	; 0x68
 8002ad6:	e7d9      	b.n	8002a8c <__sfp+0x1c>
 8002ad8:	2104      	movs	r1, #4
 8002ada:	4638      	mov	r0, r7
 8002adc:	f7ff ff62 	bl	80029a4 <__sfmoreglue>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	6030      	str	r0, [r6, #0]
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d1d5      	bne.n	8002a94 <__sfp+0x24>
 8002ae8:	f7ff ff78 	bl	80029dc <__sfp_lock_release>
 8002aec:	230c      	movs	r3, #12
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	e7ee      	b.n	8002ad0 <__sfp+0x60>
 8002af2:	bf00      	nop
 8002af4:	08002f34 	.word	0x08002f34
 8002af8:	ffff0001 	.word	0xffff0001

08002afc <_fwalk_reent>:
 8002afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b00:	4606      	mov	r6, r0
 8002b02:	4688      	mov	r8, r1
 8002b04:	2700      	movs	r7, #0
 8002b06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8002b12:	d505      	bpl.n	8002b20 <_fwalk_reent+0x24>
 8002b14:	6824      	ldr	r4, [r4, #0]
 8002b16:	2c00      	cmp	r4, #0
 8002b18:	d1f7      	bne.n	8002b0a <_fwalk_reent+0xe>
 8002b1a:	4638      	mov	r0, r7
 8002b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b20:	89ab      	ldrh	r3, [r5, #12]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d907      	bls.n	8002b36 <_fwalk_reent+0x3a>
 8002b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	d003      	beq.n	8002b36 <_fwalk_reent+0x3a>
 8002b2e:	4629      	mov	r1, r5
 8002b30:	4630      	mov	r0, r6
 8002b32:	47c0      	blx	r8
 8002b34:	4307      	orrs	r7, r0
 8002b36:	3568      	adds	r5, #104	; 0x68
 8002b38:	e7e9      	b.n	8002b0e <_fwalk_reent+0x12>

08002b3a <__retarget_lock_init_recursive>:
 8002b3a:	4770      	bx	lr

08002b3c <__retarget_lock_acquire_recursive>:
 8002b3c:	4770      	bx	lr

08002b3e <__retarget_lock_release_recursive>:
 8002b3e:	4770      	bx	lr

08002b40 <__swhatbuf_r>:
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	460e      	mov	r6, r1
 8002b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b48:	4614      	mov	r4, r2
 8002b4a:	2900      	cmp	r1, #0
 8002b4c:	461d      	mov	r5, r3
 8002b4e:	b096      	sub	sp, #88	; 0x58
 8002b50:	da07      	bge.n	8002b62 <__swhatbuf_r+0x22>
 8002b52:	2300      	movs	r3, #0
 8002b54:	602b      	str	r3, [r5, #0]
 8002b56:	89b3      	ldrh	r3, [r6, #12]
 8002b58:	061a      	lsls	r2, r3, #24
 8002b5a:	d410      	bmi.n	8002b7e <__swhatbuf_r+0x3e>
 8002b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b60:	e00e      	b.n	8002b80 <__swhatbuf_r+0x40>
 8002b62:	466a      	mov	r2, sp
 8002b64:	f000 f96c 	bl	8002e40 <_fstat_r>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	dbf2      	blt.n	8002b52 <__swhatbuf_r+0x12>
 8002b6c:	9a01      	ldr	r2, [sp, #4]
 8002b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b76:	425a      	negs	r2, r3
 8002b78:	415a      	adcs	r2, r3
 8002b7a:	602a      	str	r2, [r5, #0]
 8002b7c:	e7ee      	b.n	8002b5c <__swhatbuf_r+0x1c>
 8002b7e:	2340      	movs	r3, #64	; 0x40
 8002b80:	2000      	movs	r0, #0
 8002b82:	6023      	str	r3, [r4, #0]
 8002b84:	b016      	add	sp, #88	; 0x58
 8002b86:	bd70      	pop	{r4, r5, r6, pc}

08002b88 <__smakebuf_r>:
 8002b88:	898b      	ldrh	r3, [r1, #12]
 8002b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b8c:	079d      	lsls	r5, r3, #30
 8002b8e:	4606      	mov	r6, r0
 8002b90:	460c      	mov	r4, r1
 8002b92:	d507      	bpl.n	8002ba4 <__smakebuf_r+0x1c>
 8002b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b98:	6023      	str	r3, [r4, #0]
 8002b9a:	6123      	str	r3, [r4, #16]
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	6163      	str	r3, [r4, #20]
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	466a      	mov	r2, sp
 8002ba6:	ab01      	add	r3, sp, #4
 8002ba8:	f7ff ffca 	bl	8002b40 <__swhatbuf_r>
 8002bac:	9900      	ldr	r1, [sp, #0]
 8002bae:	4605      	mov	r5, r0
 8002bb0:	4630      	mov	r0, r6
 8002bb2:	f000 f875 	bl	8002ca0 <_malloc_r>
 8002bb6:	b948      	cbnz	r0, 8002bcc <__smakebuf_r+0x44>
 8002bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bbc:	059a      	lsls	r2, r3, #22
 8002bbe:	d4ef      	bmi.n	8002ba0 <__smakebuf_r+0x18>
 8002bc0:	f023 0303 	bic.w	r3, r3, #3
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	81a3      	strh	r3, [r4, #12]
 8002bca:	e7e3      	b.n	8002b94 <__smakebuf_r+0xc>
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <__smakebuf_r+0x7c>)
 8002bce:	62b3      	str	r3, [r6, #40]	; 0x28
 8002bd0:	89a3      	ldrh	r3, [r4, #12]
 8002bd2:	6020      	str	r0, [r4, #0]
 8002bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd8:	81a3      	strh	r3, [r4, #12]
 8002bda:	9b00      	ldr	r3, [sp, #0]
 8002bdc:	6120      	str	r0, [r4, #16]
 8002bde:	6163      	str	r3, [r4, #20]
 8002be0:	9b01      	ldr	r3, [sp, #4]
 8002be2:	b15b      	cbz	r3, 8002bfc <__smakebuf_r+0x74>
 8002be4:	4630      	mov	r0, r6
 8002be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bea:	f000 f93b 	bl	8002e64 <_isatty_r>
 8002bee:	b128      	cbz	r0, 8002bfc <__smakebuf_r+0x74>
 8002bf0:	89a3      	ldrh	r3, [r4, #12]
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	81a3      	strh	r3, [r4, #12]
 8002bfc:	89a0      	ldrh	r0, [r4, #12]
 8002bfe:	4305      	orrs	r5, r0
 8002c00:	81a5      	strh	r5, [r4, #12]
 8002c02:	e7cd      	b.n	8002ba0 <__smakebuf_r+0x18>
 8002c04:	08002999 	.word	0x08002999

08002c08 <_free_r>:
 8002c08:	b538      	push	{r3, r4, r5, lr}
 8002c0a:	4605      	mov	r5, r0
 8002c0c:	2900      	cmp	r1, #0
 8002c0e:	d043      	beq.n	8002c98 <_free_r+0x90>
 8002c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c14:	1f0c      	subs	r4, r1, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bfb8      	it	lt
 8002c1a:	18e4      	addlt	r4, r4, r3
 8002c1c:	f000 f944 	bl	8002ea8 <__malloc_lock>
 8002c20:	4a1e      	ldr	r2, [pc, #120]	; (8002c9c <_free_r+0x94>)
 8002c22:	6813      	ldr	r3, [r2, #0]
 8002c24:	4610      	mov	r0, r2
 8002c26:	b933      	cbnz	r3, 8002c36 <_free_r+0x2e>
 8002c28:	6063      	str	r3, [r4, #4]
 8002c2a:	6014      	str	r4, [r2, #0]
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c32:	f000 b93f 	b.w	8002eb4 <__malloc_unlock>
 8002c36:	42a3      	cmp	r3, r4
 8002c38:	d90a      	bls.n	8002c50 <_free_r+0x48>
 8002c3a:	6821      	ldr	r1, [r4, #0]
 8002c3c:	1862      	adds	r2, r4, r1
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	bf01      	itttt	eq
 8002c42:	681a      	ldreq	r2, [r3, #0]
 8002c44:	685b      	ldreq	r3, [r3, #4]
 8002c46:	1852      	addeq	r2, r2, r1
 8002c48:	6022      	streq	r2, [r4, #0]
 8002c4a:	6063      	str	r3, [r4, #4]
 8002c4c:	6004      	str	r4, [r0, #0]
 8002c4e:	e7ed      	b.n	8002c2c <_free_r+0x24>
 8002c50:	461a      	mov	r2, r3
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	b10b      	cbz	r3, 8002c5a <_free_r+0x52>
 8002c56:	42a3      	cmp	r3, r4
 8002c58:	d9fa      	bls.n	8002c50 <_free_r+0x48>
 8002c5a:	6811      	ldr	r1, [r2, #0]
 8002c5c:	1850      	adds	r0, r2, r1
 8002c5e:	42a0      	cmp	r0, r4
 8002c60:	d10b      	bne.n	8002c7a <_free_r+0x72>
 8002c62:	6820      	ldr	r0, [r4, #0]
 8002c64:	4401      	add	r1, r0
 8002c66:	1850      	adds	r0, r2, r1
 8002c68:	4283      	cmp	r3, r0
 8002c6a:	6011      	str	r1, [r2, #0]
 8002c6c:	d1de      	bne.n	8002c2c <_free_r+0x24>
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4401      	add	r1, r0
 8002c74:	6011      	str	r1, [r2, #0]
 8002c76:	6053      	str	r3, [r2, #4]
 8002c78:	e7d8      	b.n	8002c2c <_free_r+0x24>
 8002c7a:	d902      	bls.n	8002c82 <_free_r+0x7a>
 8002c7c:	230c      	movs	r3, #12
 8002c7e:	602b      	str	r3, [r5, #0]
 8002c80:	e7d4      	b.n	8002c2c <_free_r+0x24>
 8002c82:	6820      	ldr	r0, [r4, #0]
 8002c84:	1821      	adds	r1, r4, r0
 8002c86:	428b      	cmp	r3, r1
 8002c88:	bf01      	itttt	eq
 8002c8a:	6819      	ldreq	r1, [r3, #0]
 8002c8c:	685b      	ldreq	r3, [r3, #4]
 8002c8e:	1809      	addeq	r1, r1, r0
 8002c90:	6021      	streq	r1, [r4, #0]
 8002c92:	6063      	str	r3, [r4, #4]
 8002c94:	6054      	str	r4, [r2, #4]
 8002c96:	e7c9      	b.n	8002c2c <_free_r+0x24>
 8002c98:	bd38      	pop	{r3, r4, r5, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200000b8 	.word	0x200000b8

08002ca0 <_malloc_r>:
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	1ccd      	adds	r5, r1, #3
 8002ca4:	f025 0503 	bic.w	r5, r5, #3
 8002ca8:	3508      	adds	r5, #8
 8002caa:	2d0c      	cmp	r5, #12
 8002cac:	bf38      	it	cc
 8002cae:	250c      	movcc	r5, #12
 8002cb0:	2d00      	cmp	r5, #0
 8002cb2:	4606      	mov	r6, r0
 8002cb4:	db01      	blt.n	8002cba <_malloc_r+0x1a>
 8002cb6:	42a9      	cmp	r1, r5
 8002cb8:	d903      	bls.n	8002cc2 <_malloc_r+0x22>
 8002cba:	230c      	movs	r3, #12
 8002cbc:	6033      	str	r3, [r6, #0]
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cc2:	f000 f8f1 	bl	8002ea8 <__malloc_lock>
 8002cc6:	4921      	ldr	r1, [pc, #132]	; (8002d4c <_malloc_r+0xac>)
 8002cc8:	680a      	ldr	r2, [r1, #0]
 8002cca:	4614      	mov	r4, r2
 8002ccc:	b99c      	cbnz	r4, 8002cf6 <_malloc_r+0x56>
 8002cce:	4f20      	ldr	r7, [pc, #128]	; (8002d50 <_malloc_r+0xb0>)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	b923      	cbnz	r3, 8002cde <_malloc_r+0x3e>
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	4630      	mov	r0, r6
 8002cd8:	f000 f83c 	bl	8002d54 <_sbrk_r>
 8002cdc:	6038      	str	r0, [r7, #0]
 8002cde:	4629      	mov	r1, r5
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f000 f837 	bl	8002d54 <_sbrk_r>
 8002ce6:	1c43      	adds	r3, r0, #1
 8002ce8:	d123      	bne.n	8002d32 <_malloc_r+0x92>
 8002cea:	230c      	movs	r3, #12
 8002cec:	4630      	mov	r0, r6
 8002cee:	6033      	str	r3, [r6, #0]
 8002cf0:	f000 f8e0 	bl	8002eb4 <__malloc_unlock>
 8002cf4:	e7e3      	b.n	8002cbe <_malloc_r+0x1e>
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	1b5b      	subs	r3, r3, r5
 8002cfa:	d417      	bmi.n	8002d2c <_malloc_r+0x8c>
 8002cfc:	2b0b      	cmp	r3, #11
 8002cfe:	d903      	bls.n	8002d08 <_malloc_r+0x68>
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	441c      	add	r4, r3
 8002d04:	6025      	str	r5, [r4, #0]
 8002d06:	e004      	b.n	8002d12 <_malloc_r+0x72>
 8002d08:	6863      	ldr	r3, [r4, #4]
 8002d0a:	42a2      	cmp	r2, r4
 8002d0c:	bf0c      	ite	eq
 8002d0e:	600b      	streq	r3, [r1, #0]
 8002d10:	6053      	strne	r3, [r2, #4]
 8002d12:	4630      	mov	r0, r6
 8002d14:	f000 f8ce 	bl	8002eb4 <__malloc_unlock>
 8002d18:	f104 000b 	add.w	r0, r4, #11
 8002d1c:	1d23      	adds	r3, r4, #4
 8002d1e:	f020 0007 	bic.w	r0, r0, #7
 8002d22:	1ac2      	subs	r2, r0, r3
 8002d24:	d0cc      	beq.n	8002cc0 <_malloc_r+0x20>
 8002d26:	1a1b      	subs	r3, r3, r0
 8002d28:	50a3      	str	r3, [r4, r2]
 8002d2a:	e7c9      	b.n	8002cc0 <_malloc_r+0x20>
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	6864      	ldr	r4, [r4, #4]
 8002d30:	e7cc      	b.n	8002ccc <_malloc_r+0x2c>
 8002d32:	1cc4      	adds	r4, r0, #3
 8002d34:	f024 0403 	bic.w	r4, r4, #3
 8002d38:	42a0      	cmp	r0, r4
 8002d3a:	d0e3      	beq.n	8002d04 <_malloc_r+0x64>
 8002d3c:	1a21      	subs	r1, r4, r0
 8002d3e:	4630      	mov	r0, r6
 8002d40:	f000 f808 	bl	8002d54 <_sbrk_r>
 8002d44:	3001      	adds	r0, #1
 8002d46:	d1dd      	bne.n	8002d04 <_malloc_r+0x64>
 8002d48:	e7cf      	b.n	8002cea <_malloc_r+0x4a>
 8002d4a:	bf00      	nop
 8002d4c:	200000b8 	.word	0x200000b8
 8002d50:	200000bc 	.word	0x200000bc

08002d54 <_sbrk_r>:
 8002d54:	b538      	push	{r3, r4, r5, lr}
 8002d56:	2300      	movs	r3, #0
 8002d58:	4d05      	ldr	r5, [pc, #20]	; (8002d70 <_sbrk_r+0x1c>)
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	602b      	str	r3, [r5, #0]
 8002d60:	f7fd fc52 	bl	8000608 <_sbrk>
 8002d64:	1c43      	adds	r3, r0, #1
 8002d66:	d102      	bne.n	8002d6e <_sbrk_r+0x1a>
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	b103      	cbz	r3, 8002d6e <_sbrk_r+0x1a>
 8002d6c:	6023      	str	r3, [r4, #0]
 8002d6e:	bd38      	pop	{r3, r4, r5, pc}
 8002d70:	20000164 	.word	0x20000164

08002d74 <__sread>:
 8002d74:	b510      	push	{r4, lr}
 8002d76:	460c      	mov	r4, r1
 8002d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d7c:	f000 f8a0 	bl	8002ec0 <_read_r>
 8002d80:	2800      	cmp	r0, #0
 8002d82:	bfab      	itete	ge
 8002d84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d86:	89a3      	ldrhlt	r3, [r4, #12]
 8002d88:	181b      	addge	r3, r3, r0
 8002d8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d8e:	bfac      	ite	ge
 8002d90:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d92:	81a3      	strhlt	r3, [r4, #12]
 8002d94:	bd10      	pop	{r4, pc}

08002d96 <__swrite>:
 8002d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d9a:	461f      	mov	r7, r3
 8002d9c:	898b      	ldrh	r3, [r1, #12]
 8002d9e:	4605      	mov	r5, r0
 8002da0:	05db      	lsls	r3, r3, #23
 8002da2:	460c      	mov	r4, r1
 8002da4:	4616      	mov	r6, r2
 8002da6:	d505      	bpl.n	8002db4 <__swrite+0x1e>
 8002da8:	2302      	movs	r3, #2
 8002daa:	2200      	movs	r2, #0
 8002dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002db0:	f000 f868 	bl	8002e84 <_lseek_r>
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	4632      	mov	r2, r6
 8002db8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dbc:	81a3      	strh	r3, [r4, #12]
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	463b      	mov	r3, r7
 8002dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dca:	f000 b817 	b.w	8002dfc <_write_r>

08002dce <__sseek>:
 8002dce:	b510      	push	{r4, lr}
 8002dd0:	460c      	mov	r4, r1
 8002dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dd6:	f000 f855 	bl	8002e84 <_lseek_r>
 8002dda:	1c43      	adds	r3, r0, #1
 8002ddc:	89a3      	ldrh	r3, [r4, #12]
 8002dde:	bf15      	itete	ne
 8002de0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002de2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002de6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002dea:	81a3      	strheq	r3, [r4, #12]
 8002dec:	bf18      	it	ne
 8002dee:	81a3      	strhne	r3, [r4, #12]
 8002df0:	bd10      	pop	{r4, pc}

08002df2 <__sclose>:
 8002df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002df6:	f000 b813 	b.w	8002e20 <_close_r>
	...

08002dfc <_write_r>:
 8002dfc:	b538      	push	{r3, r4, r5, lr}
 8002dfe:	4604      	mov	r4, r0
 8002e00:	4608      	mov	r0, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	2200      	movs	r2, #0
 8002e06:	4d05      	ldr	r5, [pc, #20]	; (8002e1c <_write_r+0x20>)
 8002e08:	602a      	str	r2, [r5, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f7fd fbaf 	bl	800056e <_write>
 8002e10:	1c43      	adds	r3, r0, #1
 8002e12:	d102      	bne.n	8002e1a <_write_r+0x1e>
 8002e14:	682b      	ldr	r3, [r5, #0]
 8002e16:	b103      	cbz	r3, 8002e1a <_write_r+0x1e>
 8002e18:	6023      	str	r3, [r4, #0]
 8002e1a:	bd38      	pop	{r3, r4, r5, pc}
 8002e1c:	20000164 	.word	0x20000164

08002e20 <_close_r>:
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	2300      	movs	r3, #0
 8002e24:	4d05      	ldr	r5, [pc, #20]	; (8002e3c <_close_r+0x1c>)
 8002e26:	4604      	mov	r4, r0
 8002e28:	4608      	mov	r0, r1
 8002e2a:	602b      	str	r3, [r5, #0]
 8002e2c:	f7fd fbbb 	bl	80005a6 <_close>
 8002e30:	1c43      	adds	r3, r0, #1
 8002e32:	d102      	bne.n	8002e3a <_close_r+0x1a>
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	b103      	cbz	r3, 8002e3a <_close_r+0x1a>
 8002e38:	6023      	str	r3, [r4, #0]
 8002e3a:	bd38      	pop	{r3, r4, r5, pc}
 8002e3c:	20000164 	.word	0x20000164

08002e40 <_fstat_r>:
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	2300      	movs	r3, #0
 8002e44:	4d06      	ldr	r5, [pc, #24]	; (8002e60 <_fstat_r+0x20>)
 8002e46:	4604      	mov	r4, r0
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	602b      	str	r3, [r5, #0]
 8002e4e:	f7fd fbb5 	bl	80005bc <_fstat>
 8002e52:	1c43      	adds	r3, r0, #1
 8002e54:	d102      	bne.n	8002e5c <_fstat_r+0x1c>
 8002e56:	682b      	ldr	r3, [r5, #0]
 8002e58:	b103      	cbz	r3, 8002e5c <_fstat_r+0x1c>
 8002e5a:	6023      	str	r3, [r4, #0]
 8002e5c:	bd38      	pop	{r3, r4, r5, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000164 	.word	0x20000164

08002e64 <_isatty_r>:
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	2300      	movs	r3, #0
 8002e68:	4d05      	ldr	r5, [pc, #20]	; (8002e80 <_isatty_r+0x1c>)
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	602b      	str	r3, [r5, #0]
 8002e70:	f7fd fbb3 	bl	80005da <_isatty>
 8002e74:	1c43      	adds	r3, r0, #1
 8002e76:	d102      	bne.n	8002e7e <_isatty_r+0x1a>
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	b103      	cbz	r3, 8002e7e <_isatty_r+0x1a>
 8002e7c:	6023      	str	r3, [r4, #0]
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}
 8002e80:	20000164 	.word	0x20000164

08002e84 <_lseek_r>:
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	4604      	mov	r4, r0
 8002e88:	4608      	mov	r0, r1
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4d05      	ldr	r5, [pc, #20]	; (8002ea4 <_lseek_r+0x20>)
 8002e90:	602a      	str	r2, [r5, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f7fd fbab 	bl	80005ee <_lseek>
 8002e98:	1c43      	adds	r3, r0, #1
 8002e9a:	d102      	bne.n	8002ea2 <_lseek_r+0x1e>
 8002e9c:	682b      	ldr	r3, [r5, #0]
 8002e9e:	b103      	cbz	r3, 8002ea2 <_lseek_r+0x1e>
 8002ea0:	6023      	str	r3, [r4, #0]
 8002ea2:	bd38      	pop	{r3, r4, r5, pc}
 8002ea4:	20000164 	.word	0x20000164

08002ea8 <__malloc_lock>:
 8002ea8:	4801      	ldr	r0, [pc, #4]	; (8002eb0 <__malloc_lock+0x8>)
 8002eaa:	f7ff be47 	b.w	8002b3c <__retarget_lock_acquire_recursive>
 8002eae:	bf00      	nop
 8002eb0:	2000015c 	.word	0x2000015c

08002eb4 <__malloc_unlock>:
 8002eb4:	4801      	ldr	r0, [pc, #4]	; (8002ebc <__malloc_unlock+0x8>)
 8002eb6:	f7ff be42 	b.w	8002b3e <__retarget_lock_release_recursive>
 8002eba:	bf00      	nop
 8002ebc:	2000015c 	.word	0x2000015c

08002ec0 <_read_r>:
 8002ec0:	b538      	push	{r3, r4, r5, lr}
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4d05      	ldr	r5, [pc, #20]	; (8002ee0 <_read_r+0x20>)
 8002ecc:	602a      	str	r2, [r5, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f7fd fb30 	bl	8000534 <_read>
 8002ed4:	1c43      	adds	r3, r0, #1
 8002ed6:	d102      	bne.n	8002ede <_read_r+0x1e>
 8002ed8:	682b      	ldr	r3, [r5, #0]
 8002eda:	b103      	cbz	r3, 8002ede <_read_r+0x1e>
 8002edc:	6023      	str	r3, [r4, #0]
 8002ede:	bd38      	pop	{r3, r4, r5, pc}
 8002ee0:	20000164 	.word	0x20000164

08002ee4 <_init>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	bf00      	nop
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr

08002ef0 <_fini>:
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef2:	bf00      	nop
 8002ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef6:	bc08      	pop	{r3}
 8002ef8:	469e      	mov	lr, r3
 8002efa:	4770      	bx	lr
