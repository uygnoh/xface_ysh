
STM32F103ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08005990  08005990  00015990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dac  08005dac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005dac  08005dac  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005dac  08005dac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  200001e0  08005f94  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08005f94  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a488  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002121  00000000  00000000  0002a691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002c7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002cff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab80  00000000  00000000  0002d740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a657  00000000  00000000  000482c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f10  00000000  00000000  00052917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6827  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f20  00000000  00000000  000e687c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	08005974 	.word	0x08005974

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	08005974 	.word	0x08005974

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <bsp_led>:
led_struct_t LED = {
        bsp_led
};

void bsp_led(led_enum_t led_number, void (*callback_fun)(led_enum_t))
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
        (*callback_fun)(led_number);
 8000b6c:	79fa      	ldrb	r2, [r7, #7]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	4610      	mov	r0, r2
 8000b72:	4798      	blx	r3
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <led_on>:

void led_on(led_enum_t led_number)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
        switch (led_number) {
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d012      	beq.n	8000bb2 <led_on+0x36>
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	dc16      	bgt.n	8000bbe <led_on+0x42>
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d002      	beq.n	8000b9a <led_on+0x1e>
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d006      	beq.n	8000ba6 <led_on+0x2a>
        case LED_01: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); break;
        case LED_02: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); break;
        case LED_03: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); break;
        default: break;
 8000b98:	e011      	b.n	8000bbe <led_on+0x42>
        case LED_01: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); break;
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <led_on+0x4c>)
 8000ba0:	f000 ff4e 	bl	8001a40 <HAL_GPIO_WritePin>
 8000ba4:	e00c      	b.n	8000bc0 <led_on+0x44>
        case LED_02: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); break;
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2104      	movs	r1, #4
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <led_on+0x4c>)
 8000bac:	f000 ff48 	bl	8001a40 <HAL_GPIO_WritePin>
 8000bb0:	e006      	b.n	8000bc0 <led_on+0x44>
        case LED_03: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); break;
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <led_on+0x4c>)
 8000bb8:	f000 ff42 	bl	8001a40 <HAL_GPIO_WritePin>
 8000bbc:	e000      	b.n	8000bc0 <led_on+0x44>
        default: break;
 8000bbe:	bf00      	nop
        }
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40010800 	.word	0x40010800

08000bcc <led_off>:

void led_off(led_enum_t led_number)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
        switch (led_number) {
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d012      	beq.n	8000c02 <led_off+0x36>
 8000bdc:	2b03      	cmp	r3, #3
 8000bde:	dc16      	bgt.n	8000c0e <led_off+0x42>
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d002      	beq.n	8000bea <led_off+0x1e>
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d006      	beq.n	8000bf6 <led_off+0x2a>
        case LED_01: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); break;
        case LED_02: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); break;
        case LED_03: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); break;
        default: break;
 8000be8:	e011      	b.n	8000c0e <led_off+0x42>
        case LED_01: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); break;
 8000bea:	2200      	movs	r2, #0
 8000bec:	2102      	movs	r1, #2
 8000bee:	480a      	ldr	r0, [pc, #40]	; (8000c18 <led_off+0x4c>)
 8000bf0:	f000 ff26 	bl	8001a40 <HAL_GPIO_WritePin>
 8000bf4:	e00c      	b.n	8000c10 <led_off+0x44>
        case LED_02: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); break;
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <led_off+0x4c>)
 8000bfc:	f000 ff20 	bl	8001a40 <HAL_GPIO_WritePin>
 8000c00:	e006      	b.n	8000c10 <led_off+0x44>
        case LED_03: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); break;
 8000c02:	2200      	movs	r2, #0
 8000c04:	2108      	movs	r1, #8
 8000c06:	4804      	ldr	r0, [pc, #16]	; (8000c18 <led_off+0x4c>)
 8000c08:	f000 ff1a 	bl	8001a40 <HAL_GPIO_WritePin>
 8000c0c:	e000      	b.n	8000c10 <led_off+0x44>
        default: break;
 8000c0e:	bf00      	nop
        }
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40010800 	.word	0x40010800

08000c1c <HAL_UART_TxCpltCallback>:
/*****************************************************************************/
/*      => STM32F103__回调函数__                                              */
/*****************************************************************************/
//UART__发送完成（中断）回调函数
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
        uart_ready = SET;      //设置传输完成标志位（SET传输完成）
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_UART_TxCpltCallback+0x18>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	20000226 	.word	0x20000226

08000c38 <HAL_UART_RxCpltCallback>:
//UART__接收完成（中断）回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
        uart_ready = SET;      //设置传输完成标志位（SET传输完成）
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_UART_RxCpltCallback+0x18>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000226 	.word	0x20000226

08000c54 <HAL_UART_ErrorCallback>:
//UART__出错（中断）回调函数
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart1)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
	...

08000c68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_GPIO_Init+0x5c>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <MX_GPIO_Init+0x5c>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_GPIO_Init+0x5c>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2104      	movs	r1, #4
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <MX_GPIO_Init+0x60>)
 8000c9a:	f000 fed1 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000caa:	2301      	movs	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_GPIO_Init+0x60>)
 8000cb6:	f000 fd2f 	bl	8001718 <HAL_GPIO_Init>

}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010800 	.word	0x40010800

08000ccc <__io_putchar>:
                }
                return len;
        }
#else
        #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
        PUTCHAR_PROTOTYPE {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
        //第一个参数是串口（全局结构体huart1）
        //第二个参数是串口（）
        //第三个参数是串口（）
        //第四个参数是串口（最大延时时间）
        HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000cd4:	1d39      	adds	r1, r7, #4
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <__io_putchar+0x20>)
 8000cde:	f001 fb3b 	bl	8002358 <HAL_UART_Transmit>
        return ch;
 8000ce2:	687b      	ldr	r3, [r7, #4]
        }
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000228 	.word	0x20000228

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf4:	f000 fa3a 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf8:	f000 f820 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfc:	f7ff ffb4 	bl	8000c68 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d00:	f000 f990 	bl	8001024 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  adc1_16_conf();
 8000d04:	f002 f804 	bl	8002d10 <adc1_16_conf>

while (1) {
        get_temperature();
 8000d08:	f002 f8c6 	bl	8002e98 <get_temperature>
        //rets = ext_get_adc_value(1);
        LED.bsp_led(LED_02, led_on);
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <main+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4908      	ldr	r1, [pc, #32]	; (8000d34 <main+0x44>)
 8000d12:	2002      	movs	r0, #2
 8000d14:	4798      	blx	r3
        HAL_Delay(100);
 8000d16:	2064      	movs	r0, #100	; 0x64
 8000d18:	f000 fa8a 	bl	8001230 <HAL_Delay>
        //uart_send_string();
        LED.bsp_led(LED_02, led_off);
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <main+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4905      	ldr	r1, [pc, #20]	; (8000d38 <main+0x48>)
 8000d22:	2002      	movs	r0, #2
 8000d24:	4798      	blx	r3

        HAL_Delay(100);
 8000d26:	2064      	movs	r0, #100	; 0x64
 8000d28:	f000 fa82 	bl	8001230 <HAL_Delay>
        get_temperature();
 8000d2c:	e7ec      	b.n	8000d08 <main+0x18>
 8000d2e:	bf00      	nop
 8000d30:	20000000 	.word	0x20000000
 8000d34:	08000b7d 	.word	0x08000b7d
 8000d38:	08000bcd 	.word	0x08000bcd

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b090      	sub	sp, #64	; 0x40
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	2228      	movs	r2, #40	; 0x28
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 f91c 	bl	8002f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d70:	2302      	movs	r3, #2
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d80:	f107 0318 	add.w	r3, r7, #24
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fe73 	bl	8001a70 <HAL_RCC_OscConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d90:	f000 f819 	bl	8000dc6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d94:	230f      	movs	r3, #15
 8000d96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2102      	movs	r1, #2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 f8de 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dba:	f000 f804 	bl	8000dc6 <Error_Handler>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3740      	adds	r7, #64	; 0x40
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dca:	b672      	cpsid	i
}
 8000dcc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dce:	e7fe      	b.n	8000dce <Error_Handler+0x8>

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_MspInit+0x5c>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_MspInit+0x5c>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_MspInit+0x60>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_MspInit+0x60>)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <NMI_Handler+0x4>

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7a:	f000 f9bd 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <USART1_IRQHandler+0x10>)
 8000e8a:	f001 faf7 	bl	800247c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000228 	.word	0x20000228

08000e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
	return 1;
 8000e9c:	2301      	movs	r3, #1
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr

08000ea6 <_kill>:

int _kill(int pid, int sig)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000eb0:	f002 f840 	bl	8002f34 <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2216      	movs	r2, #22
 8000eb8:	601a      	str	r2, [r3, #0]
	return -1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_exit>:

void _exit (int status)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ece:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffe7 	bl	8000ea6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ed8:	e7fe      	b.n	8000ed8 <_exit+0x12>

08000eda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e00a      	b.n	8000f02 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eec:	f3af 8000 	nop.w
 8000ef0:	4601      	mov	r1, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	60ba      	str	r2, [r7, #8]
 8000ef8:	b2ca      	uxtb	r2, r1
 8000efa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dbf0      	blt.n	8000eec <_read+0x12>
	}

return len;
 8000f0a:	687b      	ldr	r3, [r7, #4]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e009      	b.n	8000f3a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	60ba      	str	r2, [r7, #8]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fecc 	bl	8000ccc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3301      	adds	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	dbf1      	blt.n	8000f26 <_write+0x12>
	}
	return len;
 8000f42:	687b      	ldr	r3, [r7, #4]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_close>:

int _close(int file)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	return -1;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f72:	605a      	str	r2, [r3, #4]
	return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <_isatty>:

int _isatty(int file)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	return 1;
 8000f88:	2301      	movs	r3, #1
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
	return 0;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb4:	4a14      	ldr	r2, [pc, #80]	; (8001008 <_sbrk+0x5c>)
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <_sbrk+0x60>)
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <_sbrk+0x64>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <_sbrk+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d207      	bcs.n	8000fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fdc:	f001 ffaa 	bl	8002f34 <__errno>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fea:	e009      	b.n	8001000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <_sbrk+0x64>)
 8000ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20010000 	.word	0x20010000
 800100c:	00000400 	.word	0x00000400
 8001010:	200001fc 	.word	0x200001fc
 8001014:	200002b0 	.word	0x200002b0

08001018 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <MX_USART1_UART_Init+0x50>)
 800102c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800105c:	f001 f922 	bl	80022a4 <HAL_UART_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001066:	f7ff feae 	bl	8000dc6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000228 	.word	0x20000228
 8001074:	40013800 	.word	0x40013800

08001078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a20      	ldr	r2, [pc, #128]	; (8001114 <HAL_UART_MspInit+0x9c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d139      	bne.n	800110c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <HAL_UART_MspInit+0xa0>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <HAL_UART_MspInit+0xa0>)
 800109e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <HAL_UART_MspInit+0xa0>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_UART_MspInit+0xa0>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a18      	ldr	r2, [pc, #96]	; (8001118 <HAL_UART_MspInit+0xa0>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_UART_MspInit+0xa0>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4619      	mov	r1, r3
 80010dc:	480f      	ldr	r0, [pc, #60]	; (800111c <HAL_UART_MspInit+0xa4>)
 80010de:	f000 fb1b 	bl	8001718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	4809      	ldr	r0, [pc, #36]	; (800111c <HAL_UART_MspInit+0xa4>)
 80010f8:	f000 fb0e 	bl	8001718 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	210e      	movs	r1, #14
 8001100:	2025      	movs	r0, #37	; 0x25
 8001102:	f000 f990 	bl	8001426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001106:	2025      	movs	r0, #37	; 0x25
 8001108:	f000 f9a9 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40013800 	.word	0x40013800
 8001118:	40021000 	.word	0x40021000
 800111c:	40010800 	.word	0x40010800

08001120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	; (8001158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	; (8001164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001146:	f7ff ff67 	bl	8001018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114a:	f001 fef9 	bl	8002f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114e:	f7ff fdcf 	bl	8000cf0 <main>
  bx lr
 8001152:	4770      	bx	lr
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800115c:	08005db4 	.word	0x08005db4
  ldr r2, =_sbss
 8001160:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001164:	200002b0 	.word	0x200002b0

08001168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_2_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_Init+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_Init+0x28>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f947 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	200f      	movs	r0, #15
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fe22 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f95f 	bl	800147a <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d4:	f000 f927 	bl	8001426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000004 	.word	0x20000004
 80011f0:	2000000c 	.word	0x2000000c
 80011f4:	20000008 	.word	0x20000008

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x1c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x20>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a03      	ldr	r2, [pc, #12]	; (8001218 <HAL_IncTick+0x20>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	2000000c 	.word	0x2000000c
 8001218:	2000029c 	.word	0x2000029c

0800121c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <HAL_GetTick+0x10>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	2000029c 	.word	0x2000029c

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff fff0 	bl	800121c <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001248:	d005      	beq.n	8001256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_Delay+0x44>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001256:	bf00      	nop
 8001258:	f7ff ffe0 	bl	800121c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8f7      	bhi.n	8001258 <HAL_Delay+0x28>
  {
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000000c 	.word	0x2000000c

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4906      	ldr	r1, [pc, #24]	; (8001310 <__NVIC_EnableIRQ+0x34>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f0:	f7ff ff90 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff2d 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff42 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff90 	bl	8001368 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5f 	bl	8001314 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff35 	bl	80012dc <__NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ffa2 	bl	80013cc <SysTick_Config>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d008      	beq.n	80014ba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2204      	movs	r2, #4
 80014ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e020      	b.n	80014fc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 020e 	bic.w	r2, r2, #14
 80014c8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0201 	bic.w	r2, r2, #1
 80014d8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e2:	2101      	movs	r1, #1
 80014e4:	fa01 f202 	lsl.w	r2, r1, r2
 80014e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
	...

08001508 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800151a:	2b02      	cmp	r3, #2
 800151c:	d005      	beq.n	800152a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2204      	movs	r2, #4
 8001522:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e0d6      	b.n	80016d8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 020e 	bic.w	r2, r2, #14
 8001538:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <HAL_DMA_Abort_IT+0x1dc>)
 8001552:	429a      	cmp	r2, r3
 8001554:	d958      	bls.n	8001608 <HAL_DMA_Abort_IT+0x100>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a63      	ldr	r2, [pc, #396]	; (80016e8 <HAL_DMA_Abort_IT+0x1e0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d04f      	beq.n	8001600 <HAL_DMA_Abort_IT+0xf8>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a61      	ldr	r2, [pc, #388]	; (80016ec <HAL_DMA_Abort_IT+0x1e4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d048      	beq.n	80015fc <HAL_DMA_Abort_IT+0xf4>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a60      	ldr	r2, [pc, #384]	; (80016f0 <HAL_DMA_Abort_IT+0x1e8>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d040      	beq.n	80015f6 <HAL_DMA_Abort_IT+0xee>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a5e      	ldr	r2, [pc, #376]	; (80016f4 <HAL_DMA_Abort_IT+0x1ec>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d038      	beq.n	80015f0 <HAL_DMA_Abort_IT+0xe8>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a5d      	ldr	r2, [pc, #372]	; (80016f8 <HAL_DMA_Abort_IT+0x1f0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d030      	beq.n	80015ea <HAL_DMA_Abort_IT+0xe2>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a5b      	ldr	r2, [pc, #364]	; (80016fc <HAL_DMA_Abort_IT+0x1f4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d028      	beq.n	80015e4 <HAL_DMA_Abort_IT+0xdc>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a53      	ldr	r2, [pc, #332]	; (80016e4 <HAL_DMA_Abort_IT+0x1dc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d020      	beq.n	80015de <HAL_DMA_Abort_IT+0xd6>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a57      	ldr	r2, [pc, #348]	; (8001700 <HAL_DMA_Abort_IT+0x1f8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_DMA_Abort_IT+0xd2>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a56      	ldr	r2, [pc, #344]	; (8001704 <HAL_DMA_Abort_IT+0x1fc>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d012      	beq.n	80015d6 <HAL_DMA_Abort_IT+0xce>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a54      	ldr	r2, [pc, #336]	; (8001708 <HAL_DMA_Abort_IT+0x200>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00a      	beq.n	80015d0 <HAL_DMA_Abort_IT+0xc8>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a53      	ldr	r2, [pc, #332]	; (800170c <HAL_DMA_Abort_IT+0x204>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d102      	bne.n	80015ca <HAL_DMA_Abort_IT+0xc2>
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c8:	e01b      	b.n	8001602 <HAL_DMA_Abort_IT+0xfa>
 80015ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ce:	e018      	b.n	8001602 <HAL_DMA_Abort_IT+0xfa>
 80015d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d4:	e015      	b.n	8001602 <HAL_DMA_Abort_IT+0xfa>
 80015d6:	2310      	movs	r3, #16
 80015d8:	e013      	b.n	8001602 <HAL_DMA_Abort_IT+0xfa>
 80015da:	2301      	movs	r3, #1
 80015dc:	e011      	b.n	8001602 <HAL_DMA_Abort_IT+0xfa>
 80015de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015e2:	e00e      	b.n	8001602 <HAL_DMA_Abort_IT+0xfa>
 80015e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015e8:	e00b      	b.n	8001602 <HAL_DMA_Abort_IT+0xfa>
 80015ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ee:	e008      	b.n	8001602 <HAL_DMA_Abort_IT+0xfa>
 80015f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f4:	e005      	b.n	8001602 <HAL_DMA_Abort_IT+0xfa>
 80015f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fa:	e002      	b.n	8001602 <HAL_DMA_Abort_IT+0xfa>
 80015fc:	2310      	movs	r3, #16
 80015fe:	e000      	b.n	8001602 <HAL_DMA_Abort_IT+0xfa>
 8001600:	2301      	movs	r3, #1
 8001602:	4a43      	ldr	r2, [pc, #268]	; (8001710 <HAL_DMA_Abort_IT+0x208>)
 8001604:	6053      	str	r3, [r2, #4]
 8001606:	e057      	b.n	80016b8 <HAL_DMA_Abort_IT+0x1b0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a36      	ldr	r2, [pc, #216]	; (80016e8 <HAL_DMA_Abort_IT+0x1e0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d04f      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x1aa>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a35      	ldr	r2, [pc, #212]	; (80016ec <HAL_DMA_Abort_IT+0x1e4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d048      	beq.n	80016ae <HAL_DMA_Abort_IT+0x1a6>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a33      	ldr	r2, [pc, #204]	; (80016f0 <HAL_DMA_Abort_IT+0x1e8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d040      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x1a0>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a32      	ldr	r2, [pc, #200]	; (80016f4 <HAL_DMA_Abort_IT+0x1ec>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d038      	beq.n	80016a2 <HAL_DMA_Abort_IT+0x19a>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a30      	ldr	r2, [pc, #192]	; (80016f8 <HAL_DMA_Abort_IT+0x1f0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d030      	beq.n	800169c <HAL_DMA_Abort_IT+0x194>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a2f      	ldr	r2, [pc, #188]	; (80016fc <HAL_DMA_Abort_IT+0x1f4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d028      	beq.n	8001696 <HAL_DMA_Abort_IT+0x18e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a26      	ldr	r2, [pc, #152]	; (80016e4 <HAL_DMA_Abort_IT+0x1dc>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d020      	beq.n	8001690 <HAL_DMA_Abort_IT+0x188>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a2b      	ldr	r2, [pc, #172]	; (8001700 <HAL_DMA_Abort_IT+0x1f8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d019      	beq.n	800168c <HAL_DMA_Abort_IT+0x184>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a29      	ldr	r2, [pc, #164]	; (8001704 <HAL_DMA_Abort_IT+0x1fc>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d012      	beq.n	8001688 <HAL_DMA_Abort_IT+0x180>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a28      	ldr	r2, [pc, #160]	; (8001708 <HAL_DMA_Abort_IT+0x200>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d00a      	beq.n	8001682 <HAL_DMA_Abort_IT+0x17a>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a26      	ldr	r2, [pc, #152]	; (800170c <HAL_DMA_Abort_IT+0x204>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d102      	bne.n	800167c <HAL_DMA_Abort_IT+0x174>
 8001676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167a:	e01b      	b.n	80016b4 <HAL_DMA_Abort_IT+0x1ac>
 800167c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001680:	e018      	b.n	80016b4 <HAL_DMA_Abort_IT+0x1ac>
 8001682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001686:	e015      	b.n	80016b4 <HAL_DMA_Abort_IT+0x1ac>
 8001688:	2310      	movs	r3, #16
 800168a:	e013      	b.n	80016b4 <HAL_DMA_Abort_IT+0x1ac>
 800168c:	2301      	movs	r3, #1
 800168e:	e011      	b.n	80016b4 <HAL_DMA_Abort_IT+0x1ac>
 8001690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001694:	e00e      	b.n	80016b4 <HAL_DMA_Abort_IT+0x1ac>
 8001696:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800169a:	e00b      	b.n	80016b4 <HAL_DMA_Abort_IT+0x1ac>
 800169c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a0:	e008      	b.n	80016b4 <HAL_DMA_Abort_IT+0x1ac>
 80016a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a6:	e005      	b.n	80016b4 <HAL_DMA_Abort_IT+0x1ac>
 80016a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ac:	e002      	b.n	80016b4 <HAL_DMA_Abort_IT+0x1ac>
 80016ae:	2310      	movs	r3, #16
 80016b0:	e000      	b.n	80016b4 <HAL_DMA_Abort_IT+0x1ac>
 80016b2:	2301      	movs	r3, #1
 80016b4:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_DMA_Abort_IT+0x20c>)
 80016b6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4798      	blx	r3
    } 
  }
  return status;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40020080 	.word	0x40020080
 80016e8:	40020008 	.word	0x40020008
 80016ec:	4002001c 	.word	0x4002001c
 80016f0:	40020030 	.word	0x40020030
 80016f4:	40020044 	.word	0x40020044
 80016f8:	40020058 	.word	0x40020058
 80016fc:	4002006c 	.word	0x4002006c
 8001700:	40020408 	.word	0x40020408
 8001704:	4002041c 	.word	0x4002041c
 8001708:	40020430 	.word	0x40020430
 800170c:	40020444 	.word	0x40020444
 8001710:	40020400 	.word	0x40020400
 8001714:	40020000 	.word	0x40020000

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b480      	push	{r7}
 800171a:	b08b      	sub	sp, #44	; 0x2c
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172a:	e179      	b.n	8001a20 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800172c:	2201      	movs	r2, #1
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	429a      	cmp	r2, r3
 8001746:	f040 8168 	bne.w	8001a1a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4aa0      	ldr	r2, [pc, #640]	; (80019d0 <HAL_GPIO_Init+0x2b8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d05e      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001754:	4a9e      	ldr	r2, [pc, #632]	; (80019d0 <HAL_GPIO_Init+0x2b8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d875      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 800175a:	4a9e      	ldr	r2, [pc, #632]	; (80019d4 <HAL_GPIO_Init+0x2bc>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d058      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001760:	4a9c      	ldr	r2, [pc, #624]	; (80019d4 <HAL_GPIO_Init+0x2bc>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d86f      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 8001766:	4a9c      	ldr	r2, [pc, #624]	; (80019d8 <HAL_GPIO_Init+0x2c0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d052      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 800176c:	4a9a      	ldr	r2, [pc, #616]	; (80019d8 <HAL_GPIO_Init+0x2c0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d869      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 8001772:	4a9a      	ldr	r2, [pc, #616]	; (80019dc <HAL_GPIO_Init+0x2c4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d04c      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001778:	4a98      	ldr	r2, [pc, #608]	; (80019dc <HAL_GPIO_Init+0x2c4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d863      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 800177e:	4a98      	ldr	r2, [pc, #608]	; (80019e0 <HAL_GPIO_Init+0x2c8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d046      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001784:	4a96      	ldr	r2, [pc, #600]	; (80019e0 <HAL_GPIO_Init+0x2c8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d85d      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 800178a:	2b12      	cmp	r3, #18
 800178c:	d82a      	bhi.n	80017e4 <HAL_GPIO_Init+0xcc>
 800178e:	2b12      	cmp	r3, #18
 8001790:	d859      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 8001792:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <HAL_GPIO_Init+0x80>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	08001813 	.word	0x08001813
 800179c:	080017ed 	.word	0x080017ed
 80017a0:	080017ff 	.word	0x080017ff
 80017a4:	08001841 	.word	0x08001841
 80017a8:	08001847 	.word	0x08001847
 80017ac:	08001847 	.word	0x08001847
 80017b0:	08001847 	.word	0x08001847
 80017b4:	08001847 	.word	0x08001847
 80017b8:	08001847 	.word	0x08001847
 80017bc:	08001847 	.word	0x08001847
 80017c0:	08001847 	.word	0x08001847
 80017c4:	08001847 	.word	0x08001847
 80017c8:	08001847 	.word	0x08001847
 80017cc:	08001847 	.word	0x08001847
 80017d0:	08001847 	.word	0x08001847
 80017d4:	08001847 	.word	0x08001847
 80017d8:	08001847 	.word	0x08001847
 80017dc:	080017f5 	.word	0x080017f5
 80017e0:	08001809 	.word	0x08001809
 80017e4:	4a7f      	ldr	r2, [pc, #508]	; (80019e4 <HAL_GPIO_Init+0x2cc>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ea:	e02c      	b.n	8001846 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e029      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	3304      	adds	r3, #4
 80017fa:	623b      	str	r3, [r7, #32]
          break;
 80017fc:	e024      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	3308      	adds	r3, #8
 8001804:	623b      	str	r3, [r7, #32]
          break;
 8001806:	e01f      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	330c      	adds	r3, #12
 800180e:	623b      	str	r3, [r7, #32]
          break;
 8001810:	e01a      	b.n	8001848 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800181a:	2304      	movs	r3, #4
 800181c:	623b      	str	r3, [r7, #32]
          break;
 800181e:	e013      	b.n	8001848 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001828:	2308      	movs	r3, #8
 800182a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	611a      	str	r2, [r3, #16]
          break;
 8001832:	e009      	b.n	8001848 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001834:	2308      	movs	r3, #8
 8001836:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	615a      	str	r2, [r3, #20]
          break;
 800183e:	e003      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
          break;
 8001844:	e000      	b.n	8001848 <HAL_GPIO_Init+0x130>
          break;
 8001846:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2bff      	cmp	r3, #255	; 0xff
 800184c:	d801      	bhi.n	8001852 <HAL_GPIO_Init+0x13a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	e001      	b.n	8001856 <HAL_GPIO_Init+0x13e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3304      	adds	r3, #4
 8001856:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2bff      	cmp	r3, #255	; 0xff
 800185c:	d802      	bhi.n	8001864 <HAL_GPIO_Init+0x14c>
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	e002      	b.n	800186a <HAL_GPIO_Init+0x152>
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	3b08      	subs	r3, #8
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	210f      	movs	r1, #15
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	6a39      	ldr	r1, [r7, #32]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	431a      	orrs	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80c1 	beq.w	8001a1a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_GPIO_Init+0x2d0>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_GPIO_Init+0x2d0>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_GPIO_Init+0x2d0>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018b0:	4a4e      	ldr	r2, [pc, #312]	; (80019ec <HAL_GPIO_Init+0x2d4>)
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a46      	ldr	r2, [pc, #280]	; (80019f0 <HAL_GPIO_Init+0x2d8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d01f      	beq.n	800191c <HAL_GPIO_Init+0x204>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a45      	ldr	r2, [pc, #276]	; (80019f4 <HAL_GPIO_Init+0x2dc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d019      	beq.n	8001918 <HAL_GPIO_Init+0x200>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a44      	ldr	r2, [pc, #272]	; (80019f8 <HAL_GPIO_Init+0x2e0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d013      	beq.n	8001914 <HAL_GPIO_Init+0x1fc>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a43      	ldr	r2, [pc, #268]	; (80019fc <HAL_GPIO_Init+0x2e4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d00d      	beq.n	8001910 <HAL_GPIO_Init+0x1f8>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a42      	ldr	r2, [pc, #264]	; (8001a00 <HAL_GPIO_Init+0x2e8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d007      	beq.n	800190c <HAL_GPIO_Init+0x1f4>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a41      	ldr	r2, [pc, #260]	; (8001a04 <HAL_GPIO_Init+0x2ec>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_GPIO_Init+0x1f0>
 8001904:	2305      	movs	r3, #5
 8001906:	e00a      	b.n	800191e <HAL_GPIO_Init+0x206>
 8001908:	2306      	movs	r3, #6
 800190a:	e008      	b.n	800191e <HAL_GPIO_Init+0x206>
 800190c:	2304      	movs	r3, #4
 800190e:	e006      	b.n	800191e <HAL_GPIO_Init+0x206>
 8001910:	2303      	movs	r3, #3
 8001912:	e004      	b.n	800191e <HAL_GPIO_Init+0x206>
 8001914:	2302      	movs	r3, #2
 8001916:	e002      	b.n	800191e <HAL_GPIO_Init+0x206>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_GPIO_Init+0x206>
 800191c:	2300      	movs	r3, #0
 800191e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001920:	f002 0203 	and.w	r2, r2, #3
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	4093      	lsls	r3, r2
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800192e:	492f      	ldr	r1, [pc, #188]	; (80019ec <HAL_GPIO_Init+0x2d4>)
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	3302      	adds	r3, #2
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001948:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	492e      	ldr	r1, [pc, #184]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	492a      	ldr	r1, [pc, #168]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 8001960:	4013      	ands	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4924      	ldr	r1, [pc, #144]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	43db      	mvns	r3, r3
 8001986:	4920      	ldr	r1, [pc, #128]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 8001988:	4013      	ands	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	491a      	ldr	r1, [pc, #104]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4916      	ldr	r1, [pc, #88]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d025      	beq.n	8001a0c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	4910      	ldr	r1, [pc, #64]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60cb      	str	r3, [r1, #12]
 80019cc:	e025      	b.n	8001a1a <HAL_GPIO_Init+0x302>
 80019ce:	bf00      	nop
 80019d0:	10320000 	.word	0x10320000
 80019d4:	10310000 	.word	0x10310000
 80019d8:	10220000 	.word	0x10220000
 80019dc:	10210000 	.word	0x10210000
 80019e0:	10120000 	.word	0x10120000
 80019e4:	10110000 	.word	0x10110000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000
 80019f0:	40010800 	.word	0x40010800
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	40011000 	.word	0x40011000
 80019fc:	40011400 	.word	0x40011400
 8001a00:	40011800 	.word	0x40011800
 8001a04:	40011c00 	.word	0x40011c00
 8001a08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_GPIO_Init+0x324>)
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	4909      	ldr	r1, [pc, #36]	; (8001a3c <HAL_GPIO_Init+0x324>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f47f ae7e 	bne.w	800172c <HAL_GPIO_Init+0x14>
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	372c      	adds	r7, #44	; 0x2c
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a50:	787b      	ldrb	r3, [r7, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a5c:	e003      	b.n	8001a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	041a      	lsls	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	611a      	str	r2, [r3, #16]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e26c      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8087 	beq.w	8001b9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a90:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d00c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a9c:	4b8f      	ldr	r3, [pc, #572]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d112      	bne.n	8001ace <HAL_RCC_OscConfig+0x5e>
 8001aa8:	4b8c      	ldr	r3, [pc, #560]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d10b      	bne.n	8001ace <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab6:	4b89      	ldr	r3, [pc, #548]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d06c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x12c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d168      	bne.n	8001b9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e246      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad6:	d106      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x76>
 8001ad8:	4b80      	ldr	r3, [pc, #512]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a7f      	ldr	r2, [pc, #508]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	e02e      	b.n	8001b44 <HAL_RCC_OscConfig+0xd4>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x98>
 8001aee:	4b7b      	ldr	r3, [pc, #492]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a7a      	ldr	r2, [pc, #488]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b78      	ldr	r3, [pc, #480]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a77      	ldr	r2, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e01d      	b.n	8001b44 <HAL_RCC_OscConfig+0xd4>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0xbc>
 8001b12:	4b72      	ldr	r3, [pc, #456]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a71      	ldr	r2, [pc, #452]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a6e      	ldr	r2, [pc, #440]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e00b      	b.n	8001b44 <HAL_RCC_OscConfig+0xd4>
 8001b2c:	4b6b      	ldr	r3, [pc, #428]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6a      	ldr	r2, [pc, #424]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b68      	ldr	r3, [pc, #416]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a67      	ldr	r2, [pc, #412]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d013      	beq.n	8001b74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fb66 	bl	800121c <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fb62 	bl	800121c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1fa      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b5d      	ldr	r3, [pc, #372]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0xe4>
 8001b72:	e014      	b.n	8001b9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fb52 	bl	800121c <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fb4e 	bl	800121c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e1e6      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	4b53      	ldr	r3, [pc, #332]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x10c>
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d063      	beq.n	8001c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001baa:	4b4c      	ldr	r3, [pc, #304]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bb6:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d11c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x18c>
 8001bc2:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d116      	bne.n	8001bfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_RCC_OscConfig+0x176>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e1ba      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be6:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4939      	ldr	r1, [pc, #228]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	e03a      	b.n	8001c72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c04:	4b36      	ldr	r3, [pc, #216]	; (8001ce0 <HAL_RCC_OscConfig+0x270>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fb07 	bl	800121c <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c12:	f7ff fb03 	bl	800121c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e19b      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4927      	ldr	r1, [pc, #156]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
 8001c44:	e015      	b.n	8001c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <HAL_RCC_OscConfig+0x270>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fae6 	bl	800121c <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff fae2 	bl	800121c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e17a      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d03a      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d019      	beq.n	8001cba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff fac6 	bl	800121c <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c94:	f7ff fac2 	bl	800121c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e15a      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f000 fad8 	bl	8002268 <RCC_Delay>
 8001cb8:	e01c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff faac 	bl	800121c <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc6:	e00f      	b.n	8001ce8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff faa8 	bl	800121c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d908      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e140      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	42420000 	.word	0x42420000
 8001ce4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	4b9e      	ldr	r3, [pc, #632]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1e9      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80a6 	beq.w	8001e4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d06:	4b97      	ldr	r3, [pc, #604]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10d      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b94      	ldr	r3, [pc, #592]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4a93      	ldr	r2, [pc, #588]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	61d3      	str	r3, [r2, #28]
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2e:	4b8e      	ldr	r3, [pc, #568]	; (8001f68 <HAL_RCC_OscConfig+0x4f8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d118      	bne.n	8001d6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3a:	4b8b      	ldr	r3, [pc, #556]	; (8001f68 <HAL_RCC_OscConfig+0x4f8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a8a      	ldr	r2, [pc, #552]	; (8001f68 <HAL_RCC_OscConfig+0x4f8>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d46:	f7ff fa69 	bl	800121c <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4e:	f7ff fa65 	bl	800121c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b64      	cmp	r3, #100	; 0x64
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e0fd      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	4b81      	ldr	r3, [pc, #516]	; (8001f68 <HAL_RCC_OscConfig+0x4f8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_OscConfig+0x312>
 8001d74:	4b7b      	ldr	r3, [pc, #492]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a7a      	ldr	r2, [pc, #488]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6213      	str	r3, [r2, #32]
 8001d80:	e02d      	b.n	8001dde <HAL_RCC_OscConfig+0x36e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x334>
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a75      	ldr	r2, [pc, #468]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	4b73      	ldr	r3, [pc, #460]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a72      	ldr	r2, [pc, #456]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	f023 0304 	bic.w	r3, r3, #4
 8001da0:	6213      	str	r3, [r2, #32]
 8001da2:	e01c      	b.n	8001dde <HAL_RCC_OscConfig+0x36e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b05      	cmp	r3, #5
 8001daa:	d10c      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x356>
 8001dac:	4b6d      	ldr	r3, [pc, #436]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a6c      	ldr	r2, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	4b6a      	ldr	r3, [pc, #424]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a69      	ldr	r2, [pc, #420]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	e00b      	b.n	8001dde <HAL_RCC_OscConfig+0x36e>
 8001dc6:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a66      	ldr	r2, [pc, #408]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	6213      	str	r3, [r2, #32]
 8001dd2:	4b64      	ldr	r3, [pc, #400]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a63      	ldr	r2, [pc, #396]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	f023 0304 	bic.w	r3, r3, #4
 8001ddc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d015      	beq.n	8001e12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff fa19 	bl	800121c <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff fa15 	bl	800121c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0ab      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e04:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ee      	beq.n	8001dee <HAL_RCC_OscConfig+0x37e>
 8001e10:	e014      	b.n	8001e3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fa03 	bl	800121c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff f9ff 	bl	800121c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e095      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e30:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1ee      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d105      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e42:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4a47      	ldr	r2, [pc, #284]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8081 	beq.w	8001f5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e58:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d061      	beq.n	8001f28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d146      	bne.n	8001efa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6c:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <HAL_RCC_OscConfig+0x4fc>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e72:	f7ff f9d3 	bl	800121c <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7a:	f7ff f9cf 	bl	800121c <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e067      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8c:	4b35      	ldr	r3, [pc, #212]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f0      	bne.n	8001e7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea0:	d108      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ea2:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	492d      	ldr	r1, [pc, #180]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a19      	ldr	r1, [r3, #32]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	4927      	ldr	r1, [pc, #156]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <HAL_RCC_OscConfig+0x4fc>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7ff f9a3 	bl	800121c <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff f99f 	bl	800121c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e037      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x46a>
 8001ef8:	e02f      	b.n	8001f5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <HAL_RCC_OscConfig+0x4fc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff f98c 	bl	800121c <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f08:	f7ff f988 	bl	800121c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e020      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x498>
 8001f26:	e018      	b.n	8001f5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e013      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	42420060 	.word	0x42420060

08001f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0d0      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b6a      	ldr	r3, [pc, #424]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d910      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b67      	ldr	r3, [pc, #412]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4965      	ldr	r1, [pc, #404]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b63      	ldr	r3, [pc, #396]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0b8      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fcc:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a58      	ldr	r2, [pc, #352]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a52      	ldr	r2, [pc, #328]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff0:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	494d      	ldr	r1, [pc, #308]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d040      	beq.n	8002090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d115      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e07f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e073      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06b      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4936      	ldr	r1, [pc, #216]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002060:	f7ff f8dc 	bl	800121c <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7ff f8d8 	bl	800121c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e053      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d210      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4922      	ldr	r1, [pc, #136]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e032      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4916      	ldr	r1, [pc, #88]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	490e      	ldr	r1, [pc, #56]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020fe:	f000 f821 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8002102:	4602      	mov	r2, r0
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	490a      	ldr	r1, [pc, #40]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002110:	5ccb      	ldrb	r3, [r1, r3]
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1cc>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_ClockConfig+0x1d0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff f83a 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40022000 	.word	0x40022000
 8002134:	40021000 	.word	0x40021000
 8002138:	080059b4 	.word	0x080059b4
 800213c:	20000004 	.word	0x20000004
 8002140:	20000008 	.word	0x20000008

08002144 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002144:	b490      	push	{r4, r7}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800214a:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800214c:	1d3c      	adds	r4, r7, #4
 800214e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002154:	f240 2301 	movw	r3, #513	; 0x201
 8002158:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800216e:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b04      	cmp	r3, #4
 800217c:	d002      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x40>
 800217e:	2b08      	cmp	r3, #8
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x46>
 8002182:	e02d      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002186:	623b      	str	r3, [r7, #32]
      break;
 8002188:	e02d      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	0c9b      	lsrs	r3, r3, #18
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002196:	4413      	add	r3, r2
 8002198:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800219c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0c5b      	lsrs	r3, r3, #17
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021b6:	4413      	add	r3, r2
 80021b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c2:	fb02 f203 	mul.w	r2, r2, r3
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
 80021ce:	e004      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	623b      	str	r3, [r7, #32]
      break;
 80021de:	e002      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e2:	623b      	str	r3, [r7, #32]
      break;
 80021e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e6:	6a3b      	ldr	r3, [r7, #32]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc90      	pop	{r4, r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	08005990 	.word	0x08005990
 80021f8:	40021000 	.word	0x40021000
 80021fc:	007a1200 	.word	0x007a1200
 8002200:	003d0900 	.word	0x003d0900

08002204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002208:	4b02      	ldr	r3, [pc, #8]	; (8002214 <HAL_RCC_GetHCLKFreq+0x10>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800221c:	f7ff fff2 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4903      	ldr	r1, [pc, #12]	; (800223c <HAL_RCC_GetPCLK1Freq+0x24>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	080059c4 	.word	0x080059c4

08002240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002244:	f7ff ffde 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	0adb      	lsrs	r3, r3, #11
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	4903      	ldr	r1, [pc, #12]	; (8002264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	080059c4 	.word	0x080059c4

08002268 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <RCC_Delay+0x34>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <RCC_Delay+0x38>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0a5b      	lsrs	r3, r3, #9
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002284:	bf00      	nop
  }
  while (Delay --);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1e5a      	subs	r2, r3, #1
 800228a:	60fa      	str	r2, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f9      	bne.n	8002284 <RCC_Delay+0x1c>
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	20000004 	.word	0x20000004
 80022a0:	10624dd3 	.word	0x10624dd3

080022a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e04a      	b.n	800234c <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d111      	bne.n	80022e6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fabe 	bl	800284c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a1e      	ldr	r2, [pc, #120]	; (8002354 <HAL_UART_Init+0xb0>)
 80022dc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2224      	movs	r2, #36	; 0x24
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fc78 	bl	8002bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002312:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002322:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002332:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	08001079 	.word	0x08001079

08002358 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af02      	add	r7, sp, #8
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b20      	cmp	r3, #32
 8002376:	d17c      	bne.n	8002472 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_UART_Transmit+0x2c>
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e075      	b.n	8002474 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_UART_Transmit+0x3e>
 8002392:	2302      	movs	r3, #2
 8002394:	e06e      	b.n	8002474 <HAL_UART_Transmit+0x11c>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2221      	movs	r2, #33	; 0x21
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023ac:	f7fe ff36 	bl	800121c <HAL_GetTick>
 80023b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	88fa      	ldrh	r2, [r7, #6]
 80023b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	88fa      	ldrh	r2, [r7, #6]
 80023bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c6:	d108      	bne.n	80023da <HAL_UART_Transmit+0x82>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	e003      	b.n	80023e2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023ea:	e02a      	b.n	8002442 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2200      	movs	r2, #0
 80023f4:	2180      	movs	r1, #128	; 0x80
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fa5e 	bl	80028b8 <UART_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e036      	b.n	8002474 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10b      	bne.n	8002424 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800241a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	3302      	adds	r3, #2
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	e007      	b.n	8002434 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	781a      	ldrb	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3301      	adds	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1cf      	bne.n	80023ec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2200      	movs	r2, #0
 8002454:	2140      	movs	r1, #64	; 0x40
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fa2e 	bl	80028b8 <UART_WaitOnFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e006      	b.n	8002474 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	e000      	b.n	8002474 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002472:	2302      	movs	r3, #2
  }
}
 8002474:	4618      	mov	r0, r3
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_UART_IRQHandler+0x52>
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fae9 	bl	8002a9e <UART_Receive_IT>
      return;
 80024cc:	e180      	b.n	80027d0 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80b4 	beq.w	800263e <HAL_UART_IRQHandler+0x1c2>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_UART_IRQHandler+0x70>
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80a9 	beq.w	800263e <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_UART_IRQHandler+0x90>
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_UART_IRQHandler+0xb0>
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f043 0202 	orr.w	r2, r3, #2
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_UART_IRQHandler+0xd0>
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	f043 0204 	orr.w	r2, r3, #4
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00f      	beq.n	8002576 <HAL_UART_IRQHandler+0xfa>
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d104      	bne.n	800256a <HAL_UART_IRQHandler+0xee>
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f043 0208 	orr.w	r2, r3, #8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8123 	beq.w	80027c6 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	d007      	beq.n	800259a <HAL_UART_IRQHandler+0x11e>
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 fa82 	bl	8002a9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf14      	ite	ne
 80025a8:	2301      	movne	r3, #1
 80025aa:	2300      	moveq	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <HAL_UART_IRQHandler+0x146>
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d033      	beq.n	800262a <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f9c2 	bl	800294c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d024      	beq.n	8002620 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d013      	beq.n	8002616 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f2:	4a79      	ldr	r2, [pc, #484]	; (80027d8 <HAL_UART_IRQHandler+0x35c>)
 80025f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe ff84 	bl	8001508 <HAL_DMA_Abort_IT>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d019      	beq.n	800263a <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002610:	4610      	mov	r0, r2
 8002612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002614:	e011      	b.n	800263a <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800261e:	e00c      	b.n	800263a <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002628:	e007      	b.n	800263a <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002638:	e0c5      	b.n	80027c6 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263a:	bf00      	nop
    return;
 800263c:	e0c3      	b.n	80027c6 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	2b01      	cmp	r3, #1
 8002644:	f040 80a3 	bne.w	800278e <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 809d 	beq.w	800278e <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8097 	beq.w	800278e <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002680:	2b00      	cmp	r3, #0
 8002682:	d04f      	beq.n	8002724 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800268e:	8a3b      	ldrh	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 809a 	beq.w	80027ca <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800269a:	8a3a      	ldrh	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	f080 8094 	bcs.w	80027ca <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	8a3a      	ldrh	r2, [r7, #16]
 80026a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d02b      	beq.n	800270a <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026e0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0210 	bic.w	r2, r2, #16
 80026fe:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fec4 	bl	8001492 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002716:	b292      	uxth	r2, r2
 8002718:	1a8a      	subs	r2, r1, r2
 800271a:	b292      	uxth	r2, r2
 800271c:	4611      	mov	r1, r2
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8002722:	e052      	b.n	80027ca <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800272c:	b29b      	uxth	r3, r3
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d048      	beq.n	80027ce <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 800273c:	8a7b      	ldrh	r3, [r7, #18]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d045      	beq.n	80027ce <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002750:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0210 	bic.w	r2, r2, #16
 800277e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002784:	8a7a      	ldrh	r2, [r7, #18]
 8002786:	4611      	mov	r1, r2
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 800278c:	e01f      	b.n	80027ce <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_UART_IRQHandler+0x32e>
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f913 	bl	80029ce <UART_Transmit_IT>
    return;
 80027a8:	e012      	b.n	80027d0 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00d      	beq.n	80027d0 <HAL_UART_IRQHandler+0x354>
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f954 	bl	8002a6c <UART_EndTransmit_IT>
    return;
 80027c4:	e004      	b.n	80027d0 <HAL_UART_IRQHandler+0x354>
    return;
 80027c6:	bf00      	nop
 80027c8:	e002      	b.n	80027d0 <HAL_UART_IRQHandler+0x354>
      return;
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <HAL_UART_IRQHandler+0x354>
      return;
 80027ce:	bf00      	nop
  }
}
 80027d0:	3728      	adds	r7, #40	; 0x28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	080029a5 	.word	0x080029a5

080027dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	460b      	mov	r3, r1
 8002840:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <UART_InitCallbacksToDefault+0x48>)
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <UART_InitCallbacksToDefault+0x4c>)
 800285e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a0e      	ldr	r2, [pc, #56]	; (800289c <UART_InitCallbacksToDefault+0x50>)
 8002864:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <UART_InitCallbacksToDefault+0x54>)
 800286a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a0d      	ldr	r2, [pc, #52]	; (80028a4 <UART_InitCallbacksToDefault+0x58>)
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <UART_InitCallbacksToDefault+0x5c>)
 8002876:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <UART_InitCallbacksToDefault+0x60>)
 800287c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <UART_InitCallbacksToDefault+0x64>)
 8002882:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a0b      	ldr	r2, [pc, #44]	; (80028b4 <UART_InitCallbacksToDefault+0x68>)
 8002888:	669a      	str	r2, [r3, #104]	; 0x68

}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	080027dd 	.word	0x080027dd
 8002898:	08000c1d 	.word	0x08000c1d
 800289c:	080027ef 	.word	0x080027ef
 80028a0:	08000c39 	.word	0x08000c39
 80028a4:	08000c55 	.word	0x08000c55
 80028a8:	08002801 	.word	0x08002801
 80028ac:	08002813 	.word	0x08002813
 80028b0:	08002825 	.word	0x08002825
 80028b4:	08002837 	.word	0x08002837

080028b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c8:	e02c      	b.n	8002924 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d0:	d028      	beq.n	8002924 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80028d8:	f7fe fca0 	bl	800121c <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d21d      	bcs.n	8002924 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e00f      	b.n	8002944 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	4013      	ands	r3, r2
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	429a      	cmp	r2, r3
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	429a      	cmp	r2, r3
 8002940:	d0c3      	beq.n	80028ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002962:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	2b01      	cmp	r3, #1
 800297a:	d107      	bne.n	800298c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0210 	bic.w	r2, r2, #16
 800298a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b21      	cmp	r3, #33	; 0x21
 80029e0:	d13e      	bne.n	8002a60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	d114      	bne.n	8002a16 <UART_Transmit_IT+0x48>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d110      	bne.n	8002a16 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	1c9a      	adds	r2, r3, #2
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	621a      	str	r2, [r3, #32]
 8002a14:	e008      	b.n	8002a28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	1c59      	adds	r1, r3, #1
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6211      	str	r1, [r2, #32]
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4619      	mov	r1, r3
 8002a36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10f      	bne.n	8002a5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e000      	b.n	8002a62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b22      	cmp	r3, #34	; 0x22
 8002ab0:	f040 809b 	bne.w	8002bea <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abc:	d117      	bne.n	8002aee <UART_Receive_IT+0x50>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d113      	bne.n	8002aee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	1c9a      	adds	r2, r3, #2
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
 8002aec:	e026      	b.n	8002b3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b00:	d007      	beq.n	8002b12 <UART_Receive_IT+0x74>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10a      	bne.n	8002b20 <UART_Receive_IT+0x82>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e008      	b.n	8002b32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d14a      	bne.n	8002be6 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0220 	bic.w	r2, r2, #32
 8002b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d124      	bne.n	8002bda <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0210 	bic.w	r2, r2, #16
 8002ba4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d10a      	bne.n	8002bca <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
 8002bd8:	e003      	b.n	8002be2 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e002      	b.n	8002bec <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e000      	b.n	8002bec <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8002bea:	2302      	movs	r3, #2
  }
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c2e:	f023 030c 	bic.w	r3, r3, #12
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2c      	ldr	r2, [pc, #176]	; (8002d08 <UART_SetConfig+0x114>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d103      	bne.n	8002c64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c5c:	f7ff faf0 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	e002      	b.n	8002c6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c64:	f7ff fad8 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 8002c68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	009a      	lsls	r2, r3, #2
 8002c74:	441a      	add	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	4a22      	ldr	r2, [pc, #136]	; (8002d0c <UART_SetConfig+0x118>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	0119      	lsls	r1, r3, #4
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	009a      	lsls	r2, r3, #2
 8002c94:	441a      	add	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca0:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <UART_SetConfig+0x118>)
 8002ca2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2064      	movs	r0, #100	; 0x64
 8002caa:	fb00 f303 	mul.w	r3, r0, r3
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	3332      	adds	r3, #50	; 0x32
 8002cb4:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <UART_SetConfig+0x118>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc0:	4419      	add	r1, r3
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	009a      	lsls	r2, r3, #2
 8002ccc:	441a      	add	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <UART_SetConfig+0x118>)
 8002cda:	fba3 0302 	umull	r0, r3, r3, r2
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2064      	movs	r0, #100	; 0x64
 8002ce2:	fb00 f303 	mul.w	r3, r0, r3
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	3332      	adds	r3, #50	; 0x32
 8002cec:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <UART_SetConfig+0x118>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	f003 020f 	and.w	r2, r3, #15
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	440a      	add	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	51eb851f 	.word	0x51eb851f

08002d10 <adc1_16_conf>:
  +________________________________________________________________+
  |    SystemClock / PCLK_DIV_6 = 12MHz                            |
  |________________________________________________________________|
*******************************************************************************/
void adc1_16_conf(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
        //GPIOA_CLOCK_ENABLE();                 //使能PORTA口时钟
        //GPIOA->CRL    &= 0XFFFFFF0F;          //PA1__模拟输入
        ADC1_CLOCK_ENABLE();                    //ADC1时钟使能
 8002d14:	4b48      	ldr	r3, [pc, #288]	; (8002e38 <adc1_16_conf+0x128>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a47      	ldr	r2, [pc, #284]	; (8002e38 <adc1_16_conf+0x128>)
 8002d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d1e:	6193      	str	r3, [r2, #24]
        RCC->APB2RSTR |= BIT_09;                //ADC1复位
 8002d20:	4b45      	ldr	r3, [pc, #276]	; (8002e38 <adc1_16_conf+0x128>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a44      	ldr	r2, [pc, #272]	; (8002e38 <adc1_16_conf+0x128>)
 8002d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d2a:	60d3      	str	r3, [r2, #12]
        RCC->APB2RSTR &= ~(BIT_09);             //ADC1复位结束
 8002d2c:	4b42      	ldr	r3, [pc, #264]	; (8002e38 <adc1_16_conf+0x128>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4a41      	ldr	r2, [pc, #260]	; (8002e38 <adc1_16_conf+0x128>)
 8002d32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d36:	60d3      	str	r3, [r2, #12]
        RCC->CFGR     &= ~(BIT_15 + BIT_14);    //分频因子清零ADC_PRE[15:14]__PCLK2_DIV_2
 8002d38:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <adc1_16_conf+0x128>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a3e      	ldr	r2, [pc, #248]	; (8002e38 <adc1_16_conf+0x128>)
 8002d3e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d42:	6053      	str	r3, [r2, #4]
        RCC->CFGR     |= BIT_15;                //分频因子设置ADC_PRE[15:14]__PCLK2_DIV_6
 8002d44:	4b3c      	ldr	r3, [pc, #240]	; (8002e38 <adc1_16_conf+0x128>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <adc1_16_conf+0x128>)
 8002d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d4e:	6053      	str	r3, [r2, #4]
        ADC1->CR1     &= 0XF0FFFF;              //ADC1_CR1__工作模式清零__
 8002d50:	4b3a      	ldr	r3, [pc, #232]	; (8002e3c <adc1_16_conf+0x12c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a39      	ldr	r2, [pc, #228]	; (8002e3c <adc1_16_conf+0x12c>)
 8002d56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d5a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002d5e:	6053      	str	r3, [r2, #4]
        ADC1->CR1     |= 0XF0FFFF;              //ADC1_CR1__独立工作模式__
 8002d60:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <adc1_16_conf+0x12c>)
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	4935      	ldr	r1, [pc, #212]	; (8002e3c <adc1_16_conf+0x12c>)
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <adc1_16_conf+0x130>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
        ADC1->CR1     &= ~(BIT_08);             //ADC1_CR1__非扫描模式
 8002d6c:	4b33      	ldr	r3, [pc, #204]	; (8002e3c <adc1_16_conf+0x12c>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4a32      	ldr	r2, [pc, #200]	; (8002e3c <adc1_16_conf+0x12c>)
 8002d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d76:	6053      	str	r3, [r2, #4]
        ADC1->CR2     &= ~(BIT_01);             //ADC1_CR2__单次转换模式
 8002d78:	4b30      	ldr	r3, [pc, #192]	; (8002e3c <adc1_16_conf+0x12c>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4a2f      	ldr	r2, [pc, #188]	; (8002e3c <adc1_16_conf+0x12c>)
 8002d7e:	f023 0302 	bic.w	r3, r3, #2
 8002d82:	6093      	str	r3, [r2, #8]
        ADC1->CR2     &= (uint32_t)0xFFF1FFFF;  //ADC1_CR2__EXTSEL[19:17]
 8002d84:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <adc1_16_conf+0x12c>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4a2c      	ldr	r2, [pc, #176]	; (8002e3c <adc1_16_conf+0x12c>)
 8002d8a:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8002d8e:	6093      	str	r3, [r2, #8]
        ADC1->CR2     |= (uint32_t)0xFFFEFFFF;  //ADC1_CR2__EXTSEL[19:17]软件控制转换
 8002d90:	4b2a      	ldr	r3, [pc, #168]	; (8002e3c <adc1_16_conf+0x12c>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <adc1_16_conf+0x12c>)
 8002d96:	f463 3380 	orn	r3, r3, #65536	; 0x10000
 8002d9a:	6093      	str	r3, [r2, #8]
        ADC1->CR2     |= BIT_20;                //使用外部事件启动转换(SWSTART) !!!必须使用一个事件来触发
 8002d9c:	4b27      	ldr	r3, [pc, #156]	; (8002e3c <adc1_16_conf+0x12c>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <adc1_16_conf+0x12c>)
 8002da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da6:	6093      	str	r3, [r2, #8]
        ADC1->CR2     &= ~(BIT_11);             //ALIGN:数据对齐（0，右对齐）
 8002da8:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <adc1_16_conf+0x12c>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a23      	ldr	r2, [pc, #140]	; (8002e3c <adc1_16_conf+0x12c>)
 8002dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002db2:	6093      	str	r3, [r2, #8]
        ADC1->CR2     |= BIT_23;                //启用温度传感器和V_REFINT
 8002db4:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <adc1_16_conf+0x12c>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4a20      	ldr	r2, [pc, #128]	; (8002e3c <adc1_16_conf+0x12c>)
 8002dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dbe:	6093      	str	r3, [r2, #8]

        ADC1->SQR1    &= (uint32_t)0xFF0FFFFF;  //ADC_SQR1__L[23:20]__规则组转换的总数
 8002dc0:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <adc1_16_conf+0x12c>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	4a1d      	ldr	r2, [pc, #116]	; (8002e3c <adc1_16_conf+0x12c>)
 8002dc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002dca:	62d3      	str	r3, [r2, #44]	; 0x2c
        ADC1->SQR1    |= (uint32_t)0x00000000;  //Regular channel sequence length
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <adc1_16_conf+0x12c>)
 8002dce:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <adc1_16_conf+0x12c>)
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        //ADC1->SMPR2   &= (uint32_t)0xFFFFFFF0;//设置通道__1__的采样时间
        //ADC1->SMPR2   |= (uint32_t)0xFFFFFFF7;//通道1（SMP0[2:0]__239.5 cycles）
        ADC1->SMPR1   &= (uint32_t)0xFFE3FFFF;  //设置通道__16__的采样时间
 8002dd4:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <adc1_16_conf+0x12c>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <adc1_16_conf+0x12c>)
 8002dda:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002dde:	60d3      	str	r3, [r2, #12]
        ADC1->SMPR1   |= (uint32_t)0x001C0000;  //通道1（SMP16[20:18]__239.5 cycles）
 8002de0:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <adc1_16_conf+0x12c>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <adc1_16_conf+0x12c>)
 8002de6:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002dea:	60d3      	str	r3, [r2, #12]

        ADC1->CR2     |= BIT_00;                //开启AD转换器
 8002dec:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <adc1_16_conf+0x12c>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <adc1_16_conf+0x12c>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6093      	str	r3, [r2, #8]
        ADC1->CR2     |= BIT_03;                //初始化校准寄存器
 8002df8:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <adc1_16_conf+0x12c>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4a0f      	ldr	r2, [pc, #60]	; (8002e3c <adc1_16_conf+0x12c>)
 8002dfe:	f043 0308 	orr.w	r3, r3, #8
 8002e02:	6093      	str	r3, [r2, #8]
        //ADC1->CR2_RSTCAL[3]该位由软件设置并由硬件清除。 在校准寄存器被初始化后该位将被清除
        while (ADC1->CR2 & BIT_03);             //等待校准寄存器已初始化完成
 8002e04:	bf00      	nop
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <adc1_16_conf+0x12c>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f9      	bne.n	8002e06 <adc1_16_conf+0xf6>
        //ADC1->CR2_CAL[2]该位由软件设置以开始校准，并在校准结束时由硬件清除
        ADC1->CR2     |= BIT_02;                //开启AD校准
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <adc1_16_conf+0x12c>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <adc1_16_conf+0x12c>)
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	6093      	str	r3, [r2, #8]
        while (ADC1->CR2 & BIT_02);            //等待校准结束
 8002e1e:	bf00      	nop
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <adc1_16_conf+0x12c>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f9      	bne.n	8002e20 <adc1_16_conf+0x110>
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40012400 	.word	0x40012400
 8002e40:	00f0ffff 	.word	0x00f0ffff

08002e44 <get_adc1_16_value>:
  输入参数: channel:通道值（0~16）
  输出参数: 返回值:转换结果
  函数功能: 获得ADC1__通道16__的值
*******************************************************************************/
uint16_t get_adc1_16_value(uint8_t channel)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
        ADC1->SQR3 &= 0XFFFFFFE0;       //ADC1_SQR3__SQ1[4:0]
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <get_adc1_16_value+0x4c>)
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e52:	4a0f      	ldr	r2, [pc, #60]	; (8002e90 <get_adc1_16_value+0x4c>)
 8002e54:	f023 031f 	bic.w	r3, r3, #31
 8002e58:	6353      	str	r3, [r2, #52]	; 0x34
        ADC1->SQR3 |= channel;          //ADC1_通道__16__选择第（1_序列）
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <get_adc1_16_value+0x4c>)
 8002e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	490b      	ldr	r1, [pc, #44]	; (8002e90 <get_adc1_16_value+0x4c>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	634b      	str	r3, [r1, #52]	; 0x34
        ADC1->CR2  |= BIT_22;           //启动规则转换通道
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <get_adc1_16_value+0x4c>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <get_adc1_16_value+0x4c>)
 8002e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e70:	6093      	str	r3, [r2, #8]
        while (!(ADC1->SR & BIT_01));   //等待转换结束
 8002e72:	bf00      	nop
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <get_adc1_16_value+0x4c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f9      	beq.n	8002e74 <get_adc1_16_value+0x30>
        return (ADC1->DR);              //返回adc1的值
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <get_adc1_16_value+0x4c>)
 8002e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e84:	b29b      	uxth	r3, r3
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	40012400 	.word	0x40012400
 8002e94:	00000000 	.word	0x00000000

08002e98 <get_temperature>:
  输出参数: 返回值:温度值(单位:℃.)
  函数功能: 得到STM32F103内部温度数据
  读取ADC1通道__16__, 取10次平均温度值（ADC通道16是内部温度传感器专用通道）
*******************************************************************************/
void get_temperature(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
        uint16_t  adcx;
        adcx = get_adc1_16_value(16);
 8002e9e:	2010      	movs	r0, #16
 8002ea0:	f7ff ffd0 	bl	8002e44 <get_adc1_16_value>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	80fb      	strh	r3, [r7, #6]
        printf("Temperature: %f\n", (1.43 - adcx * 3.3 / 4096) / 0.0043 + 25);
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fb16 	bl	80004dc <__aeabi_i2d>
 8002eb0:	a317      	add	r3, pc, #92	; (adr r3, 8002f10 <get_temperature+0x78>)
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	f7fd fb7b 	bl	80005b0 <__aeabi_dmul>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <get_temperature+0x90>)
 8002ec8:	f7fd fc9c 	bl	8000804 <__aeabi_ddiv>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	a111      	add	r1, pc, #68	; (adr r1, 8002f18 <get_temperature+0x80>)
 8002ed2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ed6:	f7fd f9b3 	bl	8000240 <__aeabi_dsub>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	a30f      	add	r3, pc, #60	; (adr r3, 8002f20 <get_temperature+0x88>)
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	f7fd fc8c 	bl	8000804 <__aeabi_ddiv>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <get_temperature+0x94>)
 8002efa:	f7fd f9a3 	bl	8000244 <__adddf3>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	480b      	ldr	r0, [pc, #44]	; (8002f30 <get_temperature+0x98>)
 8002f04:	f000 fca8 	bl	8003858 <iprintf>
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	66666666 	.word	0x66666666
 8002f14:	400a6666 	.word	0x400a6666
 8002f18:	ae147ae1 	.word	0xae147ae1
 8002f1c:	3ff6e147 	.word	0x3ff6e147
 8002f20:	75f6fd22 	.word	0x75f6fd22
 8002f24:	3f719ce0 	.word	0x3f719ce0
 8002f28:	40b00000 	.word	0x40b00000
 8002f2c:	40390000 	.word	0x40390000
 8002f30:	080059a0 	.word	0x080059a0

08002f34 <__errno>:
 8002f34:	4b01      	ldr	r3, [pc, #4]	; (8002f3c <__errno+0x8>)
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000010 	.word	0x20000010

08002f40 <__libc_init_array>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	2600      	movs	r6, #0
 8002f44:	4d0c      	ldr	r5, [pc, #48]	; (8002f78 <__libc_init_array+0x38>)
 8002f46:	4c0d      	ldr	r4, [pc, #52]	; (8002f7c <__libc_init_array+0x3c>)
 8002f48:	1b64      	subs	r4, r4, r5
 8002f4a:	10a4      	asrs	r4, r4, #2
 8002f4c:	42a6      	cmp	r6, r4
 8002f4e:	d109      	bne.n	8002f64 <__libc_init_array+0x24>
 8002f50:	f002 fd10 	bl	8005974 <_init>
 8002f54:	2600      	movs	r6, #0
 8002f56:	4d0a      	ldr	r5, [pc, #40]	; (8002f80 <__libc_init_array+0x40>)
 8002f58:	4c0a      	ldr	r4, [pc, #40]	; (8002f84 <__libc_init_array+0x44>)
 8002f5a:	1b64      	subs	r4, r4, r5
 8002f5c:	10a4      	asrs	r4, r4, #2
 8002f5e:	42a6      	cmp	r6, r4
 8002f60:	d105      	bne.n	8002f6e <__libc_init_array+0x2e>
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
 8002f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f68:	4798      	blx	r3
 8002f6a:	3601      	adds	r6, #1
 8002f6c:	e7ee      	b.n	8002f4c <__libc_init_array+0xc>
 8002f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f72:	4798      	blx	r3
 8002f74:	3601      	adds	r6, #1
 8002f76:	e7f2      	b.n	8002f5e <__libc_init_array+0x1e>
 8002f78:	08005dac 	.word	0x08005dac
 8002f7c:	08005dac 	.word	0x08005dac
 8002f80:	08005dac 	.word	0x08005dac
 8002f84:	08005db0 	.word	0x08005db0

08002f88 <memset>:
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4402      	add	r2, r0
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d100      	bne.n	8002f92 <memset+0xa>
 8002f90:	4770      	bx	lr
 8002f92:	f803 1b01 	strb.w	r1, [r3], #1
 8002f96:	e7f9      	b.n	8002f8c <memset+0x4>

08002f98 <__cvt>:
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f9e:	461f      	mov	r7, r3
 8002fa0:	bfbb      	ittet	lt
 8002fa2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002fa6:	461f      	movlt	r7, r3
 8002fa8:	2300      	movge	r3, #0
 8002faa:	232d      	movlt	r3, #45	; 0x2d
 8002fac:	b088      	sub	sp, #32
 8002fae:	4614      	mov	r4, r2
 8002fb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002fb2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002fb4:	7013      	strb	r3, [r2, #0]
 8002fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002fb8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002fbc:	f023 0820 	bic.w	r8, r3, #32
 8002fc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002fc4:	d005      	beq.n	8002fd2 <__cvt+0x3a>
 8002fc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002fca:	d100      	bne.n	8002fce <__cvt+0x36>
 8002fcc:	3501      	adds	r5, #1
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e000      	b.n	8002fd4 <__cvt+0x3c>
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	aa07      	add	r2, sp, #28
 8002fd6:	9204      	str	r2, [sp, #16]
 8002fd8:	aa06      	add	r2, sp, #24
 8002fda:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002fde:	e9cd 3500 	strd	r3, r5, [sp]
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	463b      	mov	r3, r7
 8002fe6:	f000 fcdf 	bl	80039a8 <_dtoa_r>
 8002fea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002fee:	4606      	mov	r6, r0
 8002ff0:	d102      	bne.n	8002ff8 <__cvt+0x60>
 8002ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002ff4:	07db      	lsls	r3, r3, #31
 8002ff6:	d522      	bpl.n	800303e <__cvt+0xa6>
 8002ff8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ffc:	eb06 0905 	add.w	r9, r6, r5
 8003000:	d110      	bne.n	8003024 <__cvt+0x8c>
 8003002:	7833      	ldrb	r3, [r6, #0]
 8003004:	2b30      	cmp	r3, #48	; 0x30
 8003006:	d10a      	bne.n	800301e <__cvt+0x86>
 8003008:	2200      	movs	r2, #0
 800300a:	2300      	movs	r3, #0
 800300c:	4620      	mov	r0, r4
 800300e:	4639      	mov	r1, r7
 8003010:	f7fd fd36 	bl	8000a80 <__aeabi_dcmpeq>
 8003014:	b918      	cbnz	r0, 800301e <__cvt+0x86>
 8003016:	f1c5 0501 	rsb	r5, r5, #1
 800301a:	f8ca 5000 	str.w	r5, [sl]
 800301e:	f8da 3000 	ldr.w	r3, [sl]
 8003022:	4499      	add	r9, r3
 8003024:	2200      	movs	r2, #0
 8003026:	2300      	movs	r3, #0
 8003028:	4620      	mov	r0, r4
 800302a:	4639      	mov	r1, r7
 800302c:	f7fd fd28 	bl	8000a80 <__aeabi_dcmpeq>
 8003030:	b108      	cbz	r0, 8003036 <__cvt+0x9e>
 8003032:	f8cd 901c 	str.w	r9, [sp, #28]
 8003036:	2230      	movs	r2, #48	; 0x30
 8003038:	9b07      	ldr	r3, [sp, #28]
 800303a:	454b      	cmp	r3, r9
 800303c:	d307      	bcc.n	800304e <__cvt+0xb6>
 800303e:	4630      	mov	r0, r6
 8003040:	9b07      	ldr	r3, [sp, #28]
 8003042:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003044:	1b9b      	subs	r3, r3, r6
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	b008      	add	sp, #32
 800304a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800304e:	1c59      	adds	r1, r3, #1
 8003050:	9107      	str	r1, [sp, #28]
 8003052:	701a      	strb	r2, [r3, #0]
 8003054:	e7f0      	b.n	8003038 <__cvt+0xa0>

08003056 <__exponent>:
 8003056:	4603      	mov	r3, r0
 8003058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800305a:	2900      	cmp	r1, #0
 800305c:	f803 2b02 	strb.w	r2, [r3], #2
 8003060:	bfb6      	itet	lt
 8003062:	222d      	movlt	r2, #45	; 0x2d
 8003064:	222b      	movge	r2, #43	; 0x2b
 8003066:	4249      	neglt	r1, r1
 8003068:	2909      	cmp	r1, #9
 800306a:	7042      	strb	r2, [r0, #1]
 800306c:	dd2b      	ble.n	80030c6 <__exponent+0x70>
 800306e:	f10d 0407 	add.w	r4, sp, #7
 8003072:	46a4      	mov	ip, r4
 8003074:	270a      	movs	r7, #10
 8003076:	fb91 f6f7 	sdiv	r6, r1, r7
 800307a:	460a      	mov	r2, r1
 800307c:	46a6      	mov	lr, r4
 800307e:	fb07 1516 	mls	r5, r7, r6, r1
 8003082:	2a63      	cmp	r2, #99	; 0x63
 8003084:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003088:	4631      	mov	r1, r6
 800308a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800308e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003092:	dcf0      	bgt.n	8003076 <__exponent+0x20>
 8003094:	3130      	adds	r1, #48	; 0x30
 8003096:	f1ae 0502 	sub.w	r5, lr, #2
 800309a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800309e:	4629      	mov	r1, r5
 80030a0:	1c44      	adds	r4, r0, #1
 80030a2:	4561      	cmp	r1, ip
 80030a4:	d30a      	bcc.n	80030bc <__exponent+0x66>
 80030a6:	f10d 0209 	add.w	r2, sp, #9
 80030aa:	eba2 020e 	sub.w	r2, r2, lr
 80030ae:	4565      	cmp	r5, ip
 80030b0:	bf88      	it	hi
 80030b2:	2200      	movhi	r2, #0
 80030b4:	4413      	add	r3, r2
 80030b6:	1a18      	subs	r0, r3, r0
 80030b8:	b003      	add	sp, #12
 80030ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030c0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80030c4:	e7ed      	b.n	80030a2 <__exponent+0x4c>
 80030c6:	2330      	movs	r3, #48	; 0x30
 80030c8:	3130      	adds	r1, #48	; 0x30
 80030ca:	7083      	strb	r3, [r0, #2]
 80030cc:	70c1      	strb	r1, [r0, #3]
 80030ce:	1d03      	adds	r3, r0, #4
 80030d0:	e7f1      	b.n	80030b6 <__exponent+0x60>
	...

080030d4 <_printf_float>:
 80030d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d8:	b091      	sub	sp, #68	; 0x44
 80030da:	460c      	mov	r4, r1
 80030dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80030e0:	4616      	mov	r6, r2
 80030e2:	461f      	mov	r7, r3
 80030e4:	4605      	mov	r5, r0
 80030e6:	f001 fb43 	bl	8004770 <_localeconv_r>
 80030ea:	6803      	ldr	r3, [r0, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	9309      	str	r3, [sp, #36]	; 0x24
 80030f0:	f7fd f89a 	bl	8000228 <strlen>
 80030f4:	2300      	movs	r3, #0
 80030f6:	930e      	str	r3, [sp, #56]	; 0x38
 80030f8:	f8d8 3000 	ldr.w	r3, [r8]
 80030fc:	900a      	str	r0, [sp, #40]	; 0x28
 80030fe:	3307      	adds	r3, #7
 8003100:	f023 0307 	bic.w	r3, r3, #7
 8003104:	f103 0208 	add.w	r2, r3, #8
 8003108:	f894 9018 	ldrb.w	r9, [r4, #24]
 800310c:	f8d4 b000 	ldr.w	fp, [r4]
 8003110:	f8c8 2000 	str.w	r2, [r8]
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800311c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003120:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003124:	930b      	str	r3, [sp, #44]	; 0x2c
 8003126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800312a:	4640      	mov	r0, r8
 800312c:	4b9c      	ldr	r3, [pc, #624]	; (80033a0 <_printf_float+0x2cc>)
 800312e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003130:	f7fd fcd8 	bl	8000ae4 <__aeabi_dcmpun>
 8003134:	bb70      	cbnz	r0, 8003194 <_printf_float+0xc0>
 8003136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800313a:	4640      	mov	r0, r8
 800313c:	4b98      	ldr	r3, [pc, #608]	; (80033a0 <_printf_float+0x2cc>)
 800313e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003140:	f7fd fcb2 	bl	8000aa8 <__aeabi_dcmple>
 8003144:	bb30      	cbnz	r0, 8003194 <_printf_float+0xc0>
 8003146:	2200      	movs	r2, #0
 8003148:	2300      	movs	r3, #0
 800314a:	4640      	mov	r0, r8
 800314c:	4651      	mov	r1, sl
 800314e:	f7fd fca1 	bl	8000a94 <__aeabi_dcmplt>
 8003152:	b110      	cbz	r0, 800315a <_printf_float+0x86>
 8003154:	232d      	movs	r3, #45	; 0x2d
 8003156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800315a:	4b92      	ldr	r3, [pc, #584]	; (80033a4 <_printf_float+0x2d0>)
 800315c:	4892      	ldr	r0, [pc, #584]	; (80033a8 <_printf_float+0x2d4>)
 800315e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003162:	bf94      	ite	ls
 8003164:	4698      	movls	r8, r3
 8003166:	4680      	movhi	r8, r0
 8003168:	2303      	movs	r3, #3
 800316a:	f04f 0a00 	mov.w	sl, #0
 800316e:	6123      	str	r3, [r4, #16]
 8003170:	f02b 0304 	bic.w	r3, fp, #4
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	4633      	mov	r3, r6
 8003178:	4621      	mov	r1, r4
 800317a:	4628      	mov	r0, r5
 800317c:	9700      	str	r7, [sp, #0]
 800317e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003180:	f000 f9d4 	bl	800352c <_printf_common>
 8003184:	3001      	adds	r0, #1
 8003186:	f040 8090 	bne.w	80032aa <_printf_float+0x1d6>
 800318a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800318e:	b011      	add	sp, #68	; 0x44
 8003190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003194:	4642      	mov	r2, r8
 8003196:	4653      	mov	r3, sl
 8003198:	4640      	mov	r0, r8
 800319a:	4651      	mov	r1, sl
 800319c:	f7fd fca2 	bl	8000ae4 <__aeabi_dcmpun>
 80031a0:	b148      	cbz	r0, 80031b6 <_printf_float+0xe2>
 80031a2:	f1ba 0f00 	cmp.w	sl, #0
 80031a6:	bfb8      	it	lt
 80031a8:	232d      	movlt	r3, #45	; 0x2d
 80031aa:	4880      	ldr	r0, [pc, #512]	; (80033ac <_printf_float+0x2d8>)
 80031ac:	bfb8      	it	lt
 80031ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80031b2:	4b7f      	ldr	r3, [pc, #508]	; (80033b0 <_printf_float+0x2dc>)
 80031b4:	e7d3      	b.n	800315e <_printf_float+0x8a>
 80031b6:	6863      	ldr	r3, [r4, #4]
 80031b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	d142      	bne.n	8003246 <_printf_float+0x172>
 80031c0:	2306      	movs	r3, #6
 80031c2:	6063      	str	r3, [r4, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	9206      	str	r2, [sp, #24]
 80031c8:	aa0e      	add	r2, sp, #56	; 0x38
 80031ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80031ce:	aa0d      	add	r2, sp, #52	; 0x34
 80031d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80031d4:	9203      	str	r2, [sp, #12]
 80031d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80031da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80031de:	6023      	str	r3, [r4, #0]
 80031e0:	6863      	ldr	r3, [r4, #4]
 80031e2:	4642      	mov	r2, r8
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	4628      	mov	r0, r5
 80031e8:	4653      	mov	r3, sl
 80031ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80031ec:	f7ff fed4 	bl	8002f98 <__cvt>
 80031f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031f2:	4680      	mov	r8, r0
 80031f4:	2947      	cmp	r1, #71	; 0x47
 80031f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80031f8:	d108      	bne.n	800320c <_printf_float+0x138>
 80031fa:	1cc8      	adds	r0, r1, #3
 80031fc:	db02      	blt.n	8003204 <_printf_float+0x130>
 80031fe:	6863      	ldr	r3, [r4, #4]
 8003200:	4299      	cmp	r1, r3
 8003202:	dd40      	ble.n	8003286 <_printf_float+0x1b2>
 8003204:	f1a9 0902 	sub.w	r9, r9, #2
 8003208:	fa5f f989 	uxtb.w	r9, r9
 800320c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003210:	d81f      	bhi.n	8003252 <_printf_float+0x17e>
 8003212:	464a      	mov	r2, r9
 8003214:	3901      	subs	r1, #1
 8003216:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800321a:	910d      	str	r1, [sp, #52]	; 0x34
 800321c:	f7ff ff1b 	bl	8003056 <__exponent>
 8003220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003222:	4682      	mov	sl, r0
 8003224:	1813      	adds	r3, r2, r0
 8003226:	2a01      	cmp	r2, #1
 8003228:	6123      	str	r3, [r4, #16]
 800322a:	dc02      	bgt.n	8003232 <_printf_float+0x15e>
 800322c:	6822      	ldr	r2, [r4, #0]
 800322e:	07d2      	lsls	r2, r2, #31
 8003230:	d501      	bpl.n	8003236 <_printf_float+0x162>
 8003232:	3301      	adds	r3, #1
 8003234:	6123      	str	r3, [r4, #16]
 8003236:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800323a:	2b00      	cmp	r3, #0
 800323c:	d09b      	beq.n	8003176 <_printf_float+0xa2>
 800323e:	232d      	movs	r3, #45	; 0x2d
 8003240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003244:	e797      	b.n	8003176 <_printf_float+0xa2>
 8003246:	2947      	cmp	r1, #71	; 0x47
 8003248:	d1bc      	bne.n	80031c4 <_printf_float+0xf0>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1ba      	bne.n	80031c4 <_printf_float+0xf0>
 800324e:	2301      	movs	r3, #1
 8003250:	e7b7      	b.n	80031c2 <_printf_float+0xee>
 8003252:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003256:	d118      	bne.n	800328a <_printf_float+0x1b6>
 8003258:	2900      	cmp	r1, #0
 800325a:	6863      	ldr	r3, [r4, #4]
 800325c:	dd0b      	ble.n	8003276 <_printf_float+0x1a2>
 800325e:	6121      	str	r1, [r4, #16]
 8003260:	b913      	cbnz	r3, 8003268 <_printf_float+0x194>
 8003262:	6822      	ldr	r2, [r4, #0]
 8003264:	07d0      	lsls	r0, r2, #31
 8003266:	d502      	bpl.n	800326e <_printf_float+0x19a>
 8003268:	3301      	adds	r3, #1
 800326a:	440b      	add	r3, r1
 800326c:	6123      	str	r3, [r4, #16]
 800326e:	f04f 0a00 	mov.w	sl, #0
 8003272:	65a1      	str	r1, [r4, #88]	; 0x58
 8003274:	e7df      	b.n	8003236 <_printf_float+0x162>
 8003276:	b913      	cbnz	r3, 800327e <_printf_float+0x1aa>
 8003278:	6822      	ldr	r2, [r4, #0]
 800327a:	07d2      	lsls	r2, r2, #31
 800327c:	d501      	bpl.n	8003282 <_printf_float+0x1ae>
 800327e:	3302      	adds	r3, #2
 8003280:	e7f4      	b.n	800326c <_printf_float+0x198>
 8003282:	2301      	movs	r3, #1
 8003284:	e7f2      	b.n	800326c <_printf_float+0x198>
 8003286:	f04f 0967 	mov.w	r9, #103	; 0x67
 800328a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800328c:	4299      	cmp	r1, r3
 800328e:	db05      	blt.n	800329c <_printf_float+0x1c8>
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	6121      	str	r1, [r4, #16]
 8003294:	07d8      	lsls	r0, r3, #31
 8003296:	d5ea      	bpl.n	800326e <_printf_float+0x19a>
 8003298:	1c4b      	adds	r3, r1, #1
 800329a:	e7e7      	b.n	800326c <_printf_float+0x198>
 800329c:	2900      	cmp	r1, #0
 800329e:	bfcc      	ite	gt
 80032a0:	2201      	movgt	r2, #1
 80032a2:	f1c1 0202 	rsble	r2, r1, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	e7e0      	b.n	800326c <_printf_float+0x198>
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	055a      	lsls	r2, r3, #21
 80032ae:	d407      	bmi.n	80032c0 <_printf_float+0x1ec>
 80032b0:	6923      	ldr	r3, [r4, #16]
 80032b2:	4642      	mov	r2, r8
 80032b4:	4631      	mov	r1, r6
 80032b6:	4628      	mov	r0, r5
 80032b8:	47b8      	blx	r7
 80032ba:	3001      	adds	r0, #1
 80032bc:	d12b      	bne.n	8003316 <_printf_float+0x242>
 80032be:	e764      	b.n	800318a <_printf_float+0xb6>
 80032c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80032c4:	f240 80dd 	bls.w	8003482 <_printf_float+0x3ae>
 80032c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80032cc:	2200      	movs	r2, #0
 80032ce:	2300      	movs	r3, #0
 80032d0:	f7fd fbd6 	bl	8000a80 <__aeabi_dcmpeq>
 80032d4:	2800      	cmp	r0, #0
 80032d6:	d033      	beq.n	8003340 <_printf_float+0x26c>
 80032d8:	2301      	movs	r3, #1
 80032da:	4631      	mov	r1, r6
 80032dc:	4628      	mov	r0, r5
 80032de:	4a35      	ldr	r2, [pc, #212]	; (80033b4 <_printf_float+0x2e0>)
 80032e0:	47b8      	blx	r7
 80032e2:	3001      	adds	r0, #1
 80032e4:	f43f af51 	beq.w	800318a <_printf_float+0xb6>
 80032e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80032ec:	429a      	cmp	r2, r3
 80032ee:	db02      	blt.n	80032f6 <_printf_float+0x222>
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	07d8      	lsls	r0, r3, #31
 80032f4:	d50f      	bpl.n	8003316 <_printf_float+0x242>
 80032f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032fa:	4631      	mov	r1, r6
 80032fc:	4628      	mov	r0, r5
 80032fe:	47b8      	blx	r7
 8003300:	3001      	adds	r0, #1
 8003302:	f43f af42 	beq.w	800318a <_printf_float+0xb6>
 8003306:	f04f 0800 	mov.w	r8, #0
 800330a:	f104 091a 	add.w	r9, r4, #26
 800330e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003310:	3b01      	subs	r3, #1
 8003312:	4543      	cmp	r3, r8
 8003314:	dc09      	bgt.n	800332a <_printf_float+0x256>
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	079b      	lsls	r3, r3, #30
 800331a:	f100 8102 	bmi.w	8003522 <_printf_float+0x44e>
 800331e:	68e0      	ldr	r0, [r4, #12]
 8003320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003322:	4298      	cmp	r0, r3
 8003324:	bfb8      	it	lt
 8003326:	4618      	movlt	r0, r3
 8003328:	e731      	b.n	800318e <_printf_float+0xba>
 800332a:	2301      	movs	r3, #1
 800332c:	464a      	mov	r2, r9
 800332e:	4631      	mov	r1, r6
 8003330:	4628      	mov	r0, r5
 8003332:	47b8      	blx	r7
 8003334:	3001      	adds	r0, #1
 8003336:	f43f af28 	beq.w	800318a <_printf_float+0xb6>
 800333a:	f108 0801 	add.w	r8, r8, #1
 800333e:	e7e6      	b.n	800330e <_printf_float+0x23a>
 8003340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003342:	2b00      	cmp	r3, #0
 8003344:	dc38      	bgt.n	80033b8 <_printf_float+0x2e4>
 8003346:	2301      	movs	r3, #1
 8003348:	4631      	mov	r1, r6
 800334a:	4628      	mov	r0, r5
 800334c:	4a19      	ldr	r2, [pc, #100]	; (80033b4 <_printf_float+0x2e0>)
 800334e:	47b8      	blx	r7
 8003350:	3001      	adds	r0, #1
 8003352:	f43f af1a 	beq.w	800318a <_printf_float+0xb6>
 8003356:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800335a:	4313      	orrs	r3, r2
 800335c:	d102      	bne.n	8003364 <_printf_float+0x290>
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	07d9      	lsls	r1, r3, #31
 8003362:	d5d8      	bpl.n	8003316 <_printf_float+0x242>
 8003364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003368:	4631      	mov	r1, r6
 800336a:	4628      	mov	r0, r5
 800336c:	47b8      	blx	r7
 800336e:	3001      	adds	r0, #1
 8003370:	f43f af0b 	beq.w	800318a <_printf_float+0xb6>
 8003374:	f04f 0900 	mov.w	r9, #0
 8003378:	f104 0a1a 	add.w	sl, r4, #26
 800337c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800337e:	425b      	negs	r3, r3
 8003380:	454b      	cmp	r3, r9
 8003382:	dc01      	bgt.n	8003388 <_printf_float+0x2b4>
 8003384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003386:	e794      	b.n	80032b2 <_printf_float+0x1de>
 8003388:	2301      	movs	r3, #1
 800338a:	4652      	mov	r2, sl
 800338c:	4631      	mov	r1, r6
 800338e:	4628      	mov	r0, r5
 8003390:	47b8      	blx	r7
 8003392:	3001      	adds	r0, #1
 8003394:	f43f aef9 	beq.w	800318a <_printf_float+0xb6>
 8003398:	f109 0901 	add.w	r9, r9, #1
 800339c:	e7ee      	b.n	800337c <_printf_float+0x2a8>
 800339e:	bf00      	nop
 80033a0:	7fefffff 	.word	0x7fefffff
 80033a4:	080059d0 	.word	0x080059d0
 80033a8:	080059d4 	.word	0x080059d4
 80033ac:	080059dc 	.word	0x080059dc
 80033b0:	080059d8 	.word	0x080059d8
 80033b4:	080059e0 	.word	0x080059e0
 80033b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033bc:	429a      	cmp	r2, r3
 80033be:	bfa8      	it	ge
 80033c0:	461a      	movge	r2, r3
 80033c2:	2a00      	cmp	r2, #0
 80033c4:	4691      	mov	r9, r2
 80033c6:	dc37      	bgt.n	8003438 <_printf_float+0x364>
 80033c8:	f04f 0b00 	mov.w	fp, #0
 80033cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033d0:	f104 021a 	add.w	r2, r4, #26
 80033d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80033d8:	ebaa 0309 	sub.w	r3, sl, r9
 80033dc:	455b      	cmp	r3, fp
 80033de:	dc33      	bgt.n	8003448 <_printf_float+0x374>
 80033e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033e4:	429a      	cmp	r2, r3
 80033e6:	db3b      	blt.n	8003460 <_printf_float+0x38c>
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	07da      	lsls	r2, r3, #31
 80033ec:	d438      	bmi.n	8003460 <_printf_float+0x38c>
 80033ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80033f2:	eba2 030a 	sub.w	r3, r2, sl
 80033f6:	eba2 0901 	sub.w	r9, r2, r1
 80033fa:	4599      	cmp	r9, r3
 80033fc:	bfa8      	it	ge
 80033fe:	4699      	movge	r9, r3
 8003400:	f1b9 0f00 	cmp.w	r9, #0
 8003404:	dc34      	bgt.n	8003470 <_printf_float+0x39c>
 8003406:	f04f 0800 	mov.w	r8, #0
 800340a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800340e:	f104 0a1a 	add.w	sl, r4, #26
 8003412:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	eba3 0309 	sub.w	r3, r3, r9
 800341c:	4543      	cmp	r3, r8
 800341e:	f77f af7a 	ble.w	8003316 <_printf_float+0x242>
 8003422:	2301      	movs	r3, #1
 8003424:	4652      	mov	r2, sl
 8003426:	4631      	mov	r1, r6
 8003428:	4628      	mov	r0, r5
 800342a:	47b8      	blx	r7
 800342c:	3001      	adds	r0, #1
 800342e:	f43f aeac 	beq.w	800318a <_printf_float+0xb6>
 8003432:	f108 0801 	add.w	r8, r8, #1
 8003436:	e7ec      	b.n	8003412 <_printf_float+0x33e>
 8003438:	4613      	mov	r3, r2
 800343a:	4631      	mov	r1, r6
 800343c:	4642      	mov	r2, r8
 800343e:	4628      	mov	r0, r5
 8003440:	47b8      	blx	r7
 8003442:	3001      	adds	r0, #1
 8003444:	d1c0      	bne.n	80033c8 <_printf_float+0x2f4>
 8003446:	e6a0      	b.n	800318a <_printf_float+0xb6>
 8003448:	2301      	movs	r3, #1
 800344a:	4631      	mov	r1, r6
 800344c:	4628      	mov	r0, r5
 800344e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003450:	47b8      	blx	r7
 8003452:	3001      	adds	r0, #1
 8003454:	f43f ae99 	beq.w	800318a <_printf_float+0xb6>
 8003458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800345a:	f10b 0b01 	add.w	fp, fp, #1
 800345e:	e7b9      	b.n	80033d4 <_printf_float+0x300>
 8003460:	4631      	mov	r1, r6
 8003462:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003466:	4628      	mov	r0, r5
 8003468:	47b8      	blx	r7
 800346a:	3001      	adds	r0, #1
 800346c:	d1bf      	bne.n	80033ee <_printf_float+0x31a>
 800346e:	e68c      	b.n	800318a <_printf_float+0xb6>
 8003470:	464b      	mov	r3, r9
 8003472:	4631      	mov	r1, r6
 8003474:	4628      	mov	r0, r5
 8003476:	eb08 020a 	add.w	r2, r8, sl
 800347a:	47b8      	blx	r7
 800347c:	3001      	adds	r0, #1
 800347e:	d1c2      	bne.n	8003406 <_printf_float+0x332>
 8003480:	e683      	b.n	800318a <_printf_float+0xb6>
 8003482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003484:	2a01      	cmp	r2, #1
 8003486:	dc01      	bgt.n	800348c <_printf_float+0x3b8>
 8003488:	07db      	lsls	r3, r3, #31
 800348a:	d537      	bpl.n	80034fc <_printf_float+0x428>
 800348c:	2301      	movs	r3, #1
 800348e:	4642      	mov	r2, r8
 8003490:	4631      	mov	r1, r6
 8003492:	4628      	mov	r0, r5
 8003494:	47b8      	blx	r7
 8003496:	3001      	adds	r0, #1
 8003498:	f43f ae77 	beq.w	800318a <_printf_float+0xb6>
 800349c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034a0:	4631      	mov	r1, r6
 80034a2:	4628      	mov	r0, r5
 80034a4:	47b8      	blx	r7
 80034a6:	3001      	adds	r0, #1
 80034a8:	f43f ae6f 	beq.w	800318a <_printf_float+0xb6>
 80034ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034b0:	2200      	movs	r2, #0
 80034b2:	2300      	movs	r3, #0
 80034b4:	f7fd fae4 	bl	8000a80 <__aeabi_dcmpeq>
 80034b8:	b9d8      	cbnz	r0, 80034f2 <_printf_float+0x41e>
 80034ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034bc:	f108 0201 	add.w	r2, r8, #1
 80034c0:	3b01      	subs	r3, #1
 80034c2:	4631      	mov	r1, r6
 80034c4:	4628      	mov	r0, r5
 80034c6:	47b8      	blx	r7
 80034c8:	3001      	adds	r0, #1
 80034ca:	d10e      	bne.n	80034ea <_printf_float+0x416>
 80034cc:	e65d      	b.n	800318a <_printf_float+0xb6>
 80034ce:	2301      	movs	r3, #1
 80034d0:	464a      	mov	r2, r9
 80034d2:	4631      	mov	r1, r6
 80034d4:	4628      	mov	r0, r5
 80034d6:	47b8      	blx	r7
 80034d8:	3001      	adds	r0, #1
 80034da:	f43f ae56 	beq.w	800318a <_printf_float+0xb6>
 80034de:	f108 0801 	add.w	r8, r8, #1
 80034e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034e4:	3b01      	subs	r3, #1
 80034e6:	4543      	cmp	r3, r8
 80034e8:	dcf1      	bgt.n	80034ce <_printf_float+0x3fa>
 80034ea:	4653      	mov	r3, sl
 80034ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80034f0:	e6e0      	b.n	80032b4 <_printf_float+0x1e0>
 80034f2:	f04f 0800 	mov.w	r8, #0
 80034f6:	f104 091a 	add.w	r9, r4, #26
 80034fa:	e7f2      	b.n	80034e2 <_printf_float+0x40e>
 80034fc:	2301      	movs	r3, #1
 80034fe:	4642      	mov	r2, r8
 8003500:	e7df      	b.n	80034c2 <_printf_float+0x3ee>
 8003502:	2301      	movs	r3, #1
 8003504:	464a      	mov	r2, r9
 8003506:	4631      	mov	r1, r6
 8003508:	4628      	mov	r0, r5
 800350a:	47b8      	blx	r7
 800350c:	3001      	adds	r0, #1
 800350e:	f43f ae3c 	beq.w	800318a <_printf_float+0xb6>
 8003512:	f108 0801 	add.w	r8, r8, #1
 8003516:	68e3      	ldr	r3, [r4, #12]
 8003518:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800351a:	1a5b      	subs	r3, r3, r1
 800351c:	4543      	cmp	r3, r8
 800351e:	dcf0      	bgt.n	8003502 <_printf_float+0x42e>
 8003520:	e6fd      	b.n	800331e <_printf_float+0x24a>
 8003522:	f04f 0800 	mov.w	r8, #0
 8003526:	f104 0919 	add.w	r9, r4, #25
 800352a:	e7f4      	b.n	8003516 <_printf_float+0x442>

0800352c <_printf_common>:
 800352c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003530:	4616      	mov	r6, r2
 8003532:	4699      	mov	r9, r3
 8003534:	688a      	ldr	r2, [r1, #8]
 8003536:	690b      	ldr	r3, [r1, #16]
 8003538:	4607      	mov	r7, r0
 800353a:	4293      	cmp	r3, r2
 800353c:	bfb8      	it	lt
 800353e:	4613      	movlt	r3, r2
 8003540:	6033      	str	r3, [r6, #0]
 8003542:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003546:	460c      	mov	r4, r1
 8003548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800354c:	b10a      	cbz	r2, 8003552 <_printf_common+0x26>
 800354e:	3301      	adds	r3, #1
 8003550:	6033      	str	r3, [r6, #0]
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	0699      	lsls	r1, r3, #26
 8003556:	bf42      	ittt	mi
 8003558:	6833      	ldrmi	r3, [r6, #0]
 800355a:	3302      	addmi	r3, #2
 800355c:	6033      	strmi	r3, [r6, #0]
 800355e:	6825      	ldr	r5, [r4, #0]
 8003560:	f015 0506 	ands.w	r5, r5, #6
 8003564:	d106      	bne.n	8003574 <_printf_common+0x48>
 8003566:	f104 0a19 	add.w	sl, r4, #25
 800356a:	68e3      	ldr	r3, [r4, #12]
 800356c:	6832      	ldr	r2, [r6, #0]
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	42ab      	cmp	r3, r5
 8003572:	dc28      	bgt.n	80035c6 <_printf_common+0x9a>
 8003574:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003578:	1e13      	subs	r3, r2, #0
 800357a:	6822      	ldr	r2, [r4, #0]
 800357c:	bf18      	it	ne
 800357e:	2301      	movne	r3, #1
 8003580:	0692      	lsls	r2, r2, #26
 8003582:	d42d      	bmi.n	80035e0 <_printf_common+0xb4>
 8003584:	4649      	mov	r1, r9
 8003586:	4638      	mov	r0, r7
 8003588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800358c:	47c0      	blx	r8
 800358e:	3001      	adds	r0, #1
 8003590:	d020      	beq.n	80035d4 <_printf_common+0xa8>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	68e5      	ldr	r5, [r4, #12]
 8003596:	f003 0306 	and.w	r3, r3, #6
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf18      	it	ne
 800359e:	2500      	movne	r5, #0
 80035a0:	6832      	ldr	r2, [r6, #0]
 80035a2:	f04f 0600 	mov.w	r6, #0
 80035a6:	68a3      	ldr	r3, [r4, #8]
 80035a8:	bf08      	it	eq
 80035aa:	1aad      	subeq	r5, r5, r2
 80035ac:	6922      	ldr	r2, [r4, #16]
 80035ae:	bf08      	it	eq
 80035b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035b4:	4293      	cmp	r3, r2
 80035b6:	bfc4      	itt	gt
 80035b8:	1a9b      	subgt	r3, r3, r2
 80035ba:	18ed      	addgt	r5, r5, r3
 80035bc:	341a      	adds	r4, #26
 80035be:	42b5      	cmp	r5, r6
 80035c0:	d11a      	bne.n	80035f8 <_printf_common+0xcc>
 80035c2:	2000      	movs	r0, #0
 80035c4:	e008      	b.n	80035d8 <_printf_common+0xac>
 80035c6:	2301      	movs	r3, #1
 80035c8:	4652      	mov	r2, sl
 80035ca:	4649      	mov	r1, r9
 80035cc:	4638      	mov	r0, r7
 80035ce:	47c0      	blx	r8
 80035d0:	3001      	adds	r0, #1
 80035d2:	d103      	bne.n	80035dc <_printf_common+0xb0>
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035dc:	3501      	adds	r5, #1
 80035de:	e7c4      	b.n	800356a <_printf_common+0x3e>
 80035e0:	2030      	movs	r0, #48	; 0x30
 80035e2:	18e1      	adds	r1, r4, r3
 80035e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035ee:	4422      	add	r2, r4
 80035f0:	3302      	adds	r3, #2
 80035f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035f6:	e7c5      	b.n	8003584 <_printf_common+0x58>
 80035f8:	2301      	movs	r3, #1
 80035fa:	4622      	mov	r2, r4
 80035fc:	4649      	mov	r1, r9
 80035fe:	4638      	mov	r0, r7
 8003600:	47c0      	blx	r8
 8003602:	3001      	adds	r0, #1
 8003604:	d0e6      	beq.n	80035d4 <_printf_common+0xa8>
 8003606:	3601      	adds	r6, #1
 8003608:	e7d9      	b.n	80035be <_printf_common+0x92>
	...

0800360c <_printf_i>:
 800360c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003610:	460c      	mov	r4, r1
 8003612:	7e27      	ldrb	r7, [r4, #24]
 8003614:	4691      	mov	r9, r2
 8003616:	2f78      	cmp	r7, #120	; 0x78
 8003618:	4680      	mov	r8, r0
 800361a:	469a      	mov	sl, r3
 800361c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800361e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003622:	d807      	bhi.n	8003634 <_printf_i+0x28>
 8003624:	2f62      	cmp	r7, #98	; 0x62
 8003626:	d80a      	bhi.n	800363e <_printf_i+0x32>
 8003628:	2f00      	cmp	r7, #0
 800362a:	f000 80d9 	beq.w	80037e0 <_printf_i+0x1d4>
 800362e:	2f58      	cmp	r7, #88	; 0x58
 8003630:	f000 80a4 	beq.w	800377c <_printf_i+0x170>
 8003634:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800363c:	e03a      	b.n	80036b4 <_printf_i+0xa8>
 800363e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003642:	2b15      	cmp	r3, #21
 8003644:	d8f6      	bhi.n	8003634 <_printf_i+0x28>
 8003646:	a001      	add	r0, pc, #4	; (adr r0, 800364c <_printf_i+0x40>)
 8003648:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800364c:	080036a5 	.word	0x080036a5
 8003650:	080036b9 	.word	0x080036b9
 8003654:	08003635 	.word	0x08003635
 8003658:	08003635 	.word	0x08003635
 800365c:	08003635 	.word	0x08003635
 8003660:	08003635 	.word	0x08003635
 8003664:	080036b9 	.word	0x080036b9
 8003668:	08003635 	.word	0x08003635
 800366c:	08003635 	.word	0x08003635
 8003670:	08003635 	.word	0x08003635
 8003674:	08003635 	.word	0x08003635
 8003678:	080037c7 	.word	0x080037c7
 800367c:	080036e9 	.word	0x080036e9
 8003680:	080037a9 	.word	0x080037a9
 8003684:	08003635 	.word	0x08003635
 8003688:	08003635 	.word	0x08003635
 800368c:	080037e9 	.word	0x080037e9
 8003690:	08003635 	.word	0x08003635
 8003694:	080036e9 	.word	0x080036e9
 8003698:	08003635 	.word	0x08003635
 800369c:	08003635 	.word	0x08003635
 80036a0:	080037b1 	.word	0x080037b1
 80036a4:	680b      	ldr	r3, [r1, #0]
 80036a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036aa:	1d1a      	adds	r2, r3, #4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	600a      	str	r2, [r1, #0]
 80036b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0a4      	b.n	8003802 <_printf_i+0x1f6>
 80036b8:	6825      	ldr	r5, [r4, #0]
 80036ba:	6808      	ldr	r0, [r1, #0]
 80036bc:	062e      	lsls	r6, r5, #24
 80036be:	f100 0304 	add.w	r3, r0, #4
 80036c2:	d50a      	bpl.n	80036da <_printf_i+0xce>
 80036c4:	6805      	ldr	r5, [r0, #0]
 80036c6:	600b      	str	r3, [r1, #0]
 80036c8:	2d00      	cmp	r5, #0
 80036ca:	da03      	bge.n	80036d4 <_printf_i+0xc8>
 80036cc:	232d      	movs	r3, #45	; 0x2d
 80036ce:	426d      	negs	r5, r5
 80036d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036d4:	230a      	movs	r3, #10
 80036d6:	485e      	ldr	r0, [pc, #376]	; (8003850 <_printf_i+0x244>)
 80036d8:	e019      	b.n	800370e <_printf_i+0x102>
 80036da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80036de:	6805      	ldr	r5, [r0, #0]
 80036e0:	600b      	str	r3, [r1, #0]
 80036e2:	bf18      	it	ne
 80036e4:	b22d      	sxthne	r5, r5
 80036e6:	e7ef      	b.n	80036c8 <_printf_i+0xbc>
 80036e8:	680b      	ldr	r3, [r1, #0]
 80036ea:	6825      	ldr	r5, [r4, #0]
 80036ec:	1d18      	adds	r0, r3, #4
 80036ee:	6008      	str	r0, [r1, #0]
 80036f0:	0628      	lsls	r0, r5, #24
 80036f2:	d501      	bpl.n	80036f8 <_printf_i+0xec>
 80036f4:	681d      	ldr	r5, [r3, #0]
 80036f6:	e002      	b.n	80036fe <_printf_i+0xf2>
 80036f8:	0669      	lsls	r1, r5, #25
 80036fa:	d5fb      	bpl.n	80036f4 <_printf_i+0xe8>
 80036fc:	881d      	ldrh	r5, [r3, #0]
 80036fe:	2f6f      	cmp	r7, #111	; 0x6f
 8003700:	bf0c      	ite	eq
 8003702:	2308      	moveq	r3, #8
 8003704:	230a      	movne	r3, #10
 8003706:	4852      	ldr	r0, [pc, #328]	; (8003850 <_printf_i+0x244>)
 8003708:	2100      	movs	r1, #0
 800370a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800370e:	6866      	ldr	r6, [r4, #4]
 8003710:	2e00      	cmp	r6, #0
 8003712:	bfa8      	it	ge
 8003714:	6821      	ldrge	r1, [r4, #0]
 8003716:	60a6      	str	r6, [r4, #8]
 8003718:	bfa4      	itt	ge
 800371a:	f021 0104 	bicge.w	r1, r1, #4
 800371e:	6021      	strge	r1, [r4, #0]
 8003720:	b90d      	cbnz	r5, 8003726 <_printf_i+0x11a>
 8003722:	2e00      	cmp	r6, #0
 8003724:	d04d      	beq.n	80037c2 <_printf_i+0x1b6>
 8003726:	4616      	mov	r6, r2
 8003728:	fbb5 f1f3 	udiv	r1, r5, r3
 800372c:	fb03 5711 	mls	r7, r3, r1, r5
 8003730:	5dc7      	ldrb	r7, [r0, r7]
 8003732:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003736:	462f      	mov	r7, r5
 8003738:	42bb      	cmp	r3, r7
 800373a:	460d      	mov	r5, r1
 800373c:	d9f4      	bls.n	8003728 <_printf_i+0x11c>
 800373e:	2b08      	cmp	r3, #8
 8003740:	d10b      	bne.n	800375a <_printf_i+0x14e>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	07df      	lsls	r7, r3, #31
 8003746:	d508      	bpl.n	800375a <_printf_i+0x14e>
 8003748:	6923      	ldr	r3, [r4, #16]
 800374a:	6861      	ldr	r1, [r4, #4]
 800374c:	4299      	cmp	r1, r3
 800374e:	bfde      	ittt	le
 8003750:	2330      	movle	r3, #48	; 0x30
 8003752:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003756:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800375a:	1b92      	subs	r2, r2, r6
 800375c:	6122      	str	r2, [r4, #16]
 800375e:	464b      	mov	r3, r9
 8003760:	4621      	mov	r1, r4
 8003762:	4640      	mov	r0, r8
 8003764:	f8cd a000 	str.w	sl, [sp]
 8003768:	aa03      	add	r2, sp, #12
 800376a:	f7ff fedf 	bl	800352c <_printf_common>
 800376e:	3001      	adds	r0, #1
 8003770:	d14c      	bne.n	800380c <_printf_i+0x200>
 8003772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003776:	b004      	add	sp, #16
 8003778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377c:	4834      	ldr	r0, [pc, #208]	; (8003850 <_printf_i+0x244>)
 800377e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003782:	680e      	ldr	r6, [r1, #0]
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	f856 5b04 	ldr.w	r5, [r6], #4
 800378a:	061f      	lsls	r7, r3, #24
 800378c:	600e      	str	r6, [r1, #0]
 800378e:	d514      	bpl.n	80037ba <_printf_i+0x1ae>
 8003790:	07d9      	lsls	r1, r3, #31
 8003792:	bf44      	itt	mi
 8003794:	f043 0320 	orrmi.w	r3, r3, #32
 8003798:	6023      	strmi	r3, [r4, #0]
 800379a:	b91d      	cbnz	r5, 80037a4 <_printf_i+0x198>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	f023 0320 	bic.w	r3, r3, #32
 80037a2:	6023      	str	r3, [r4, #0]
 80037a4:	2310      	movs	r3, #16
 80037a6:	e7af      	b.n	8003708 <_printf_i+0xfc>
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	f043 0320 	orr.w	r3, r3, #32
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	2378      	movs	r3, #120	; 0x78
 80037b2:	4828      	ldr	r0, [pc, #160]	; (8003854 <_printf_i+0x248>)
 80037b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037b8:	e7e3      	b.n	8003782 <_printf_i+0x176>
 80037ba:	065e      	lsls	r6, r3, #25
 80037bc:	bf48      	it	mi
 80037be:	b2ad      	uxthmi	r5, r5
 80037c0:	e7e6      	b.n	8003790 <_printf_i+0x184>
 80037c2:	4616      	mov	r6, r2
 80037c4:	e7bb      	b.n	800373e <_printf_i+0x132>
 80037c6:	680b      	ldr	r3, [r1, #0]
 80037c8:	6826      	ldr	r6, [r4, #0]
 80037ca:	1d1d      	adds	r5, r3, #4
 80037cc:	6960      	ldr	r0, [r4, #20]
 80037ce:	600d      	str	r5, [r1, #0]
 80037d0:	0635      	lsls	r5, r6, #24
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	d501      	bpl.n	80037da <_printf_i+0x1ce>
 80037d6:	6018      	str	r0, [r3, #0]
 80037d8:	e002      	b.n	80037e0 <_printf_i+0x1d4>
 80037da:	0671      	lsls	r1, r6, #25
 80037dc:	d5fb      	bpl.n	80037d6 <_printf_i+0x1ca>
 80037de:	8018      	strh	r0, [r3, #0]
 80037e0:	2300      	movs	r3, #0
 80037e2:	4616      	mov	r6, r2
 80037e4:	6123      	str	r3, [r4, #16]
 80037e6:	e7ba      	b.n	800375e <_printf_i+0x152>
 80037e8:	680b      	ldr	r3, [r1, #0]
 80037ea:	1d1a      	adds	r2, r3, #4
 80037ec:	600a      	str	r2, [r1, #0]
 80037ee:	681e      	ldr	r6, [r3, #0]
 80037f0:	2100      	movs	r1, #0
 80037f2:	4630      	mov	r0, r6
 80037f4:	6862      	ldr	r2, [r4, #4]
 80037f6:	f000 ffcb 	bl	8004790 <memchr>
 80037fa:	b108      	cbz	r0, 8003800 <_printf_i+0x1f4>
 80037fc:	1b80      	subs	r0, r0, r6
 80037fe:	6060      	str	r0, [r4, #4]
 8003800:	6863      	ldr	r3, [r4, #4]
 8003802:	6123      	str	r3, [r4, #16]
 8003804:	2300      	movs	r3, #0
 8003806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800380a:	e7a8      	b.n	800375e <_printf_i+0x152>
 800380c:	4632      	mov	r2, r6
 800380e:	4649      	mov	r1, r9
 8003810:	4640      	mov	r0, r8
 8003812:	6923      	ldr	r3, [r4, #16]
 8003814:	47d0      	blx	sl
 8003816:	3001      	adds	r0, #1
 8003818:	d0ab      	beq.n	8003772 <_printf_i+0x166>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	079b      	lsls	r3, r3, #30
 800381e:	d413      	bmi.n	8003848 <_printf_i+0x23c>
 8003820:	68e0      	ldr	r0, [r4, #12]
 8003822:	9b03      	ldr	r3, [sp, #12]
 8003824:	4298      	cmp	r0, r3
 8003826:	bfb8      	it	lt
 8003828:	4618      	movlt	r0, r3
 800382a:	e7a4      	b.n	8003776 <_printf_i+0x16a>
 800382c:	2301      	movs	r3, #1
 800382e:	4632      	mov	r2, r6
 8003830:	4649      	mov	r1, r9
 8003832:	4640      	mov	r0, r8
 8003834:	47d0      	blx	sl
 8003836:	3001      	adds	r0, #1
 8003838:	d09b      	beq.n	8003772 <_printf_i+0x166>
 800383a:	3501      	adds	r5, #1
 800383c:	68e3      	ldr	r3, [r4, #12]
 800383e:	9903      	ldr	r1, [sp, #12]
 8003840:	1a5b      	subs	r3, r3, r1
 8003842:	42ab      	cmp	r3, r5
 8003844:	dcf2      	bgt.n	800382c <_printf_i+0x220>
 8003846:	e7eb      	b.n	8003820 <_printf_i+0x214>
 8003848:	2500      	movs	r5, #0
 800384a:	f104 0619 	add.w	r6, r4, #25
 800384e:	e7f5      	b.n	800383c <_printf_i+0x230>
 8003850:	080059e2 	.word	0x080059e2
 8003854:	080059f3 	.word	0x080059f3

08003858 <iprintf>:
 8003858:	b40f      	push	{r0, r1, r2, r3}
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <iprintf+0x2c>)
 800385c:	b513      	push	{r0, r1, r4, lr}
 800385e:	681c      	ldr	r4, [r3, #0]
 8003860:	b124      	cbz	r4, 800386c <iprintf+0x14>
 8003862:	69a3      	ldr	r3, [r4, #24]
 8003864:	b913      	cbnz	r3, 800386c <iprintf+0x14>
 8003866:	4620      	mov	r0, r4
 8003868:	f000 fee4 	bl	8004634 <__sinit>
 800386c:	ab05      	add	r3, sp, #20
 800386e:	4620      	mov	r0, r4
 8003870:	9a04      	ldr	r2, [sp, #16]
 8003872:	68a1      	ldr	r1, [r4, #8]
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	f001 fc05 	bl	8005084 <_vfiprintf_r>
 800387a:	b002      	add	sp, #8
 800387c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003880:	b004      	add	sp, #16
 8003882:	4770      	bx	lr
 8003884:	20000010 	.word	0x20000010

08003888 <quorem>:
 8003888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388c:	6903      	ldr	r3, [r0, #16]
 800388e:	690c      	ldr	r4, [r1, #16]
 8003890:	4607      	mov	r7, r0
 8003892:	42a3      	cmp	r3, r4
 8003894:	f2c0 8083 	blt.w	800399e <quorem+0x116>
 8003898:	3c01      	subs	r4, #1
 800389a:	f100 0514 	add.w	r5, r0, #20
 800389e:	f101 0814 	add.w	r8, r1, #20
 80038a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80038ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038b0:	3301      	adds	r3, #1
 80038b2:	429a      	cmp	r2, r3
 80038b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80038b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80038bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80038c0:	d332      	bcc.n	8003928 <quorem+0xa0>
 80038c2:	f04f 0e00 	mov.w	lr, #0
 80038c6:	4640      	mov	r0, r8
 80038c8:	46ac      	mov	ip, r5
 80038ca:	46f2      	mov	sl, lr
 80038cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80038d0:	b293      	uxth	r3, r2
 80038d2:	fb06 e303 	mla	r3, r6, r3, lr
 80038d6:	0c12      	lsrs	r2, r2, #16
 80038d8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80038dc:	fb06 e202 	mla	r2, r6, r2, lr
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	ebaa 0303 	sub.w	r3, sl, r3
 80038e6:	f8dc a000 	ldr.w	sl, [ip]
 80038ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80038ee:	fa1f fa8a 	uxth.w	sl, sl
 80038f2:	4453      	add	r3, sl
 80038f4:	fa1f fa82 	uxth.w	sl, r2
 80038f8:	f8dc 2000 	ldr.w	r2, [ip]
 80038fc:	4581      	cmp	r9, r0
 80038fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003902:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003906:	b29b      	uxth	r3, r3
 8003908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800390c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003910:	f84c 3b04 	str.w	r3, [ip], #4
 8003914:	d2da      	bcs.n	80038cc <quorem+0x44>
 8003916:	f855 300b 	ldr.w	r3, [r5, fp]
 800391a:	b92b      	cbnz	r3, 8003928 <quorem+0xa0>
 800391c:	9b01      	ldr	r3, [sp, #4]
 800391e:	3b04      	subs	r3, #4
 8003920:	429d      	cmp	r5, r3
 8003922:	461a      	mov	r2, r3
 8003924:	d32f      	bcc.n	8003986 <quorem+0xfe>
 8003926:	613c      	str	r4, [r7, #16]
 8003928:	4638      	mov	r0, r7
 800392a:	f001 f9c7 	bl	8004cbc <__mcmp>
 800392e:	2800      	cmp	r0, #0
 8003930:	db25      	blt.n	800397e <quorem+0xf6>
 8003932:	4628      	mov	r0, r5
 8003934:	f04f 0c00 	mov.w	ip, #0
 8003938:	3601      	adds	r6, #1
 800393a:	f858 1b04 	ldr.w	r1, [r8], #4
 800393e:	f8d0 e000 	ldr.w	lr, [r0]
 8003942:	b28b      	uxth	r3, r1
 8003944:	ebac 0303 	sub.w	r3, ip, r3
 8003948:	fa1f f28e 	uxth.w	r2, lr
 800394c:	4413      	add	r3, r2
 800394e:	0c0a      	lsrs	r2, r1, #16
 8003950:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003958:	b29b      	uxth	r3, r3
 800395a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800395e:	45c1      	cmp	r9, r8
 8003960:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003964:	f840 3b04 	str.w	r3, [r0], #4
 8003968:	d2e7      	bcs.n	800393a <quorem+0xb2>
 800396a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800396e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003972:	b922      	cbnz	r2, 800397e <quorem+0xf6>
 8003974:	3b04      	subs	r3, #4
 8003976:	429d      	cmp	r5, r3
 8003978:	461a      	mov	r2, r3
 800397a:	d30a      	bcc.n	8003992 <quorem+0x10a>
 800397c:	613c      	str	r4, [r7, #16]
 800397e:	4630      	mov	r0, r6
 8003980:	b003      	add	sp, #12
 8003982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	3b04      	subs	r3, #4
 800398a:	2a00      	cmp	r2, #0
 800398c:	d1cb      	bne.n	8003926 <quorem+0x9e>
 800398e:	3c01      	subs	r4, #1
 8003990:	e7c6      	b.n	8003920 <quorem+0x98>
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	3b04      	subs	r3, #4
 8003996:	2a00      	cmp	r2, #0
 8003998:	d1f0      	bne.n	800397c <quorem+0xf4>
 800399a:	3c01      	subs	r4, #1
 800399c:	e7eb      	b.n	8003976 <quorem+0xee>
 800399e:	2000      	movs	r0, #0
 80039a0:	e7ee      	b.n	8003980 <quorem+0xf8>
 80039a2:	0000      	movs	r0, r0
 80039a4:	0000      	movs	r0, r0
	...

080039a8 <_dtoa_r>:
 80039a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ac:	4616      	mov	r6, r2
 80039ae:	461f      	mov	r7, r3
 80039b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80039b2:	b099      	sub	sp, #100	; 0x64
 80039b4:	4605      	mov	r5, r0
 80039b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80039ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80039be:	b974      	cbnz	r4, 80039de <_dtoa_r+0x36>
 80039c0:	2010      	movs	r0, #16
 80039c2:	f000 fedd 	bl	8004780 <malloc>
 80039c6:	4602      	mov	r2, r0
 80039c8:	6268      	str	r0, [r5, #36]	; 0x24
 80039ca:	b920      	cbnz	r0, 80039d6 <_dtoa_r+0x2e>
 80039cc:	21ea      	movs	r1, #234	; 0xea
 80039ce:	4bae      	ldr	r3, [pc, #696]	; (8003c88 <_dtoa_r+0x2e0>)
 80039d0:	48ae      	ldr	r0, [pc, #696]	; (8003c8c <_dtoa_r+0x2e4>)
 80039d2:	f001 fdad 	bl	8005530 <__assert_func>
 80039d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80039da:	6004      	str	r4, [r0, #0]
 80039dc:	60c4      	str	r4, [r0, #12]
 80039de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039e0:	6819      	ldr	r1, [r3, #0]
 80039e2:	b151      	cbz	r1, 80039fa <_dtoa_r+0x52>
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	2301      	movs	r3, #1
 80039e8:	4093      	lsls	r3, r2
 80039ea:	604a      	str	r2, [r1, #4]
 80039ec:	608b      	str	r3, [r1, #8]
 80039ee:	4628      	mov	r0, r5
 80039f0:	f000 ff2a 	bl	8004848 <_Bfree>
 80039f4:	2200      	movs	r2, #0
 80039f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	1e3b      	subs	r3, r7, #0
 80039fc:	bfaf      	iteee	ge
 80039fe:	2300      	movge	r3, #0
 8003a00:	2201      	movlt	r2, #1
 8003a02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003a06:	9305      	strlt	r3, [sp, #20]
 8003a08:	bfa8      	it	ge
 8003a0a:	f8c8 3000 	strge.w	r3, [r8]
 8003a0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003a12:	4b9f      	ldr	r3, [pc, #636]	; (8003c90 <_dtoa_r+0x2e8>)
 8003a14:	bfb8      	it	lt
 8003a16:	f8c8 2000 	strlt.w	r2, [r8]
 8003a1a:	ea33 0309 	bics.w	r3, r3, r9
 8003a1e:	d119      	bne.n	8003a54 <_dtoa_r+0xac>
 8003a20:	f242 730f 	movw	r3, #9999	; 0x270f
 8003a24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003a2c:	4333      	orrs	r3, r6
 8003a2e:	f000 8580 	beq.w	8004532 <_dtoa_r+0xb8a>
 8003a32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003a34:	b953      	cbnz	r3, 8003a4c <_dtoa_r+0xa4>
 8003a36:	4b97      	ldr	r3, [pc, #604]	; (8003c94 <_dtoa_r+0x2ec>)
 8003a38:	e022      	b.n	8003a80 <_dtoa_r+0xd8>
 8003a3a:	4b97      	ldr	r3, [pc, #604]	; (8003c98 <_dtoa_r+0x2f0>)
 8003a3c:	9308      	str	r3, [sp, #32]
 8003a3e:	3308      	adds	r3, #8
 8003a40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	9808      	ldr	r0, [sp, #32]
 8003a46:	b019      	add	sp, #100	; 0x64
 8003a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a4c:	4b91      	ldr	r3, [pc, #580]	; (8003c94 <_dtoa_r+0x2ec>)
 8003a4e:	9308      	str	r3, [sp, #32]
 8003a50:	3303      	adds	r3, #3
 8003a52:	e7f5      	b.n	8003a40 <_dtoa_r+0x98>
 8003a54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003a58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003a5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a60:	2200      	movs	r2, #0
 8003a62:	2300      	movs	r3, #0
 8003a64:	f7fd f80c 	bl	8000a80 <__aeabi_dcmpeq>
 8003a68:	4680      	mov	r8, r0
 8003a6a:	b158      	cbz	r0, 8003a84 <_dtoa_r+0xdc>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8559 	beq.w	800452c <_dtoa_r+0xb84>
 8003a7a:	4888      	ldr	r0, [pc, #544]	; (8003c9c <_dtoa_r+0x2f4>)
 8003a7c:	6018      	str	r0, [r3, #0]
 8003a7e:	1e43      	subs	r3, r0, #1
 8003a80:	9308      	str	r3, [sp, #32]
 8003a82:	e7df      	b.n	8003a44 <_dtoa_r+0x9c>
 8003a84:	ab16      	add	r3, sp, #88	; 0x58
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	ab17      	add	r3, sp, #92	; 0x5c
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003a92:	f001 f9bf 	bl	8004e14 <__d2b>
 8003a96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003a9a:	4682      	mov	sl, r0
 8003a9c:	2c00      	cmp	r4, #0
 8003a9e:	d07e      	beq.n	8003b9e <_dtoa_r+0x1f6>
 8003aa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003aa6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003ab2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003ab6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003aba:	2200      	movs	r2, #0
 8003abc:	4b78      	ldr	r3, [pc, #480]	; (8003ca0 <_dtoa_r+0x2f8>)
 8003abe:	f7fc fbbf 	bl	8000240 <__aeabi_dsub>
 8003ac2:	a36b      	add	r3, pc, #428	; (adr r3, 8003c70 <_dtoa_r+0x2c8>)
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f7fc fd72 	bl	80005b0 <__aeabi_dmul>
 8003acc:	a36a      	add	r3, pc, #424	; (adr r3, 8003c78 <_dtoa_r+0x2d0>)
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	f7fc fbb7 	bl	8000244 <__adddf3>
 8003ad6:	4606      	mov	r6, r0
 8003ad8:	4620      	mov	r0, r4
 8003ada:	460f      	mov	r7, r1
 8003adc:	f7fc fcfe 	bl	80004dc <__aeabi_i2d>
 8003ae0:	a367      	add	r3, pc, #412	; (adr r3, 8003c80 <_dtoa_r+0x2d8>)
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	f7fc fd63 	bl	80005b0 <__aeabi_dmul>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4630      	mov	r0, r6
 8003af0:	4639      	mov	r1, r7
 8003af2:	f7fc fba7 	bl	8000244 <__adddf3>
 8003af6:	4606      	mov	r6, r0
 8003af8:	460f      	mov	r7, r1
 8003afa:	f7fd f809 	bl	8000b10 <__aeabi_d2iz>
 8003afe:	2200      	movs	r2, #0
 8003b00:	4681      	mov	r9, r0
 8003b02:	2300      	movs	r3, #0
 8003b04:	4630      	mov	r0, r6
 8003b06:	4639      	mov	r1, r7
 8003b08:	f7fc ffc4 	bl	8000a94 <__aeabi_dcmplt>
 8003b0c:	b148      	cbz	r0, 8003b22 <_dtoa_r+0x17a>
 8003b0e:	4648      	mov	r0, r9
 8003b10:	f7fc fce4 	bl	80004dc <__aeabi_i2d>
 8003b14:	4632      	mov	r2, r6
 8003b16:	463b      	mov	r3, r7
 8003b18:	f7fc ffb2 	bl	8000a80 <__aeabi_dcmpeq>
 8003b1c:	b908      	cbnz	r0, 8003b22 <_dtoa_r+0x17a>
 8003b1e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003b22:	f1b9 0f16 	cmp.w	r9, #22
 8003b26:	d857      	bhi.n	8003bd8 <_dtoa_r+0x230>
 8003b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b2c:	4b5d      	ldr	r3, [pc, #372]	; (8003ca4 <_dtoa_r+0x2fc>)
 8003b2e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	f7fc ffad 	bl	8000a94 <__aeabi_dcmplt>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	d04e      	beq.n	8003bdc <_dtoa_r+0x234>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003b44:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003b48:	1b1c      	subs	r4, r3, r4
 8003b4a:	1e63      	subs	r3, r4, #1
 8003b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b4e:	bf49      	itett	mi
 8003b50:	f1c4 0301 	rsbmi	r3, r4, #1
 8003b54:	2300      	movpl	r3, #0
 8003b56:	9306      	strmi	r3, [sp, #24]
 8003b58:	2300      	movmi	r3, #0
 8003b5a:	bf54      	ite	pl
 8003b5c:	9306      	strpl	r3, [sp, #24]
 8003b5e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003b60:	f1b9 0f00 	cmp.w	r9, #0
 8003b64:	db3c      	blt.n	8003be0 <_dtoa_r+0x238>
 8003b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b68:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003b6c:	444b      	add	r3, r9
 8003b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b70:	2300      	movs	r3, #0
 8003b72:	930a      	str	r3, [sp, #40]	; 0x28
 8003b74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b76:	2b09      	cmp	r3, #9
 8003b78:	d86c      	bhi.n	8003c54 <_dtoa_r+0x2ac>
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	bfc4      	itt	gt
 8003b7e:	3b04      	subgt	r3, #4
 8003b80:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003b82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b84:	bfc8      	it	gt
 8003b86:	2400      	movgt	r4, #0
 8003b88:	f1a3 0302 	sub.w	r3, r3, #2
 8003b8c:	bfd8      	it	le
 8003b8e:	2401      	movle	r4, #1
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	f200 808b 	bhi.w	8003cac <_dtoa_r+0x304>
 8003b96:	e8df f003 	tbb	[pc, r3]
 8003b9a:	4f2d      	.short	0x4f2d
 8003b9c:	5b4d      	.short	0x5b4d
 8003b9e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003ba2:	441c      	add	r4, r3
 8003ba4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	bfc3      	ittte	gt
 8003bac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003bb0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003bb4:	fa09 f303 	lslgt.w	r3, r9, r3
 8003bb8:	f1c3 0320 	rsble	r3, r3, #32
 8003bbc:	bfc6      	itte	gt
 8003bbe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003bc2:	4318      	orrgt	r0, r3
 8003bc4:	fa06 f003 	lslle.w	r0, r6, r3
 8003bc8:	f7fc fc78 	bl	80004bc <__aeabi_ui2d>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003bd2:	3c01      	subs	r4, #1
 8003bd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8003bd6:	e770      	b.n	8003aba <_dtoa_r+0x112>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e7b3      	b.n	8003b44 <_dtoa_r+0x19c>
 8003bdc:	900f      	str	r0, [sp, #60]	; 0x3c
 8003bde:	e7b2      	b.n	8003b46 <_dtoa_r+0x19e>
 8003be0:	9b06      	ldr	r3, [sp, #24]
 8003be2:	eba3 0309 	sub.w	r3, r3, r9
 8003be6:	9306      	str	r3, [sp, #24]
 8003be8:	f1c9 0300 	rsb	r3, r9, #0
 8003bec:	930a      	str	r3, [sp, #40]	; 0x28
 8003bee:	2300      	movs	r3, #0
 8003bf0:	930e      	str	r3, [sp, #56]	; 0x38
 8003bf2:	e7bf      	b.n	8003b74 <_dtoa_r+0x1cc>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	dc59      	bgt.n	8003cb2 <_dtoa_r+0x30a>
 8003bfe:	f04f 0b01 	mov.w	fp, #1
 8003c02:	465b      	mov	r3, fp
 8003c04:	f8cd b008 	str.w	fp, [sp, #8]
 8003c08:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003c10:	6042      	str	r2, [r0, #4]
 8003c12:	2204      	movs	r2, #4
 8003c14:	f102 0614 	add.w	r6, r2, #20
 8003c18:	429e      	cmp	r6, r3
 8003c1a:	6841      	ldr	r1, [r0, #4]
 8003c1c:	d94f      	bls.n	8003cbe <_dtoa_r+0x316>
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f000 fdd2 	bl	80047c8 <_Balloc>
 8003c24:	9008      	str	r0, [sp, #32]
 8003c26:	2800      	cmp	r0, #0
 8003c28:	d14d      	bne.n	8003cc6 <_dtoa_r+0x31e>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003c30:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <_dtoa_r+0x300>)
 8003c32:	e6cd      	b.n	80039d0 <_dtoa_r+0x28>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e7de      	b.n	8003bf6 <_dtoa_r+0x24e>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c3e:	eb09 0b03 	add.w	fp, r9, r3
 8003c42:	f10b 0301 	add.w	r3, fp, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	9302      	str	r3, [sp, #8]
 8003c4a:	bfb8      	it	lt
 8003c4c:	2301      	movlt	r3, #1
 8003c4e:	e7dd      	b.n	8003c0c <_dtoa_r+0x264>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e7f2      	b.n	8003c3a <_dtoa_r+0x292>
 8003c54:	2401      	movs	r4, #1
 8003c56:	2300      	movs	r3, #0
 8003c58:	940b      	str	r4, [sp, #44]	; 0x2c
 8003c5a:	9322      	str	r3, [sp, #136]	; 0x88
 8003c5c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003c60:	2200      	movs	r2, #0
 8003c62:	2312      	movs	r3, #18
 8003c64:	f8cd b008 	str.w	fp, [sp, #8]
 8003c68:	9223      	str	r2, [sp, #140]	; 0x8c
 8003c6a:	e7cf      	b.n	8003c0c <_dtoa_r+0x264>
 8003c6c:	f3af 8000 	nop.w
 8003c70:	636f4361 	.word	0x636f4361
 8003c74:	3fd287a7 	.word	0x3fd287a7
 8003c78:	8b60c8b3 	.word	0x8b60c8b3
 8003c7c:	3fc68a28 	.word	0x3fc68a28
 8003c80:	509f79fb 	.word	0x509f79fb
 8003c84:	3fd34413 	.word	0x3fd34413
 8003c88:	08005a11 	.word	0x08005a11
 8003c8c:	08005a28 	.word	0x08005a28
 8003c90:	7ff00000 	.word	0x7ff00000
 8003c94:	08005a0d 	.word	0x08005a0d
 8003c98:	08005a04 	.word	0x08005a04
 8003c9c:	080059e1 	.word	0x080059e1
 8003ca0:	3ff80000 	.word	0x3ff80000
 8003ca4:	08005b80 	.word	0x08005b80
 8003ca8:	08005a87 	.word	0x08005a87
 8003cac:	2301      	movs	r3, #1
 8003cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cb0:	e7d4      	b.n	8003c5c <_dtoa_r+0x2b4>
 8003cb2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003cb6:	465b      	mov	r3, fp
 8003cb8:	f8cd b008 	str.w	fp, [sp, #8]
 8003cbc:	e7a6      	b.n	8003c0c <_dtoa_r+0x264>
 8003cbe:	3101      	adds	r1, #1
 8003cc0:	6041      	str	r1, [r0, #4]
 8003cc2:	0052      	lsls	r2, r2, #1
 8003cc4:	e7a6      	b.n	8003c14 <_dtoa_r+0x26c>
 8003cc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cc8:	9a08      	ldr	r2, [sp, #32]
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	9b02      	ldr	r3, [sp, #8]
 8003cce:	2b0e      	cmp	r3, #14
 8003cd0:	f200 80a8 	bhi.w	8003e24 <_dtoa_r+0x47c>
 8003cd4:	2c00      	cmp	r4, #0
 8003cd6:	f000 80a5 	beq.w	8003e24 <_dtoa_r+0x47c>
 8003cda:	f1b9 0f00 	cmp.w	r9, #0
 8003cde:	dd34      	ble.n	8003d4a <_dtoa_r+0x3a2>
 8003ce0:	4a9a      	ldr	r2, [pc, #616]	; (8003f4c <_dtoa_r+0x5a4>)
 8003ce2:	f009 030f 	and.w	r3, r9, #15
 8003ce6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003cea:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003cee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cf2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003cf6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003cfa:	d016      	beq.n	8003d2a <_dtoa_r+0x382>
 8003cfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d00:	4b93      	ldr	r3, [pc, #588]	; (8003f50 <_dtoa_r+0x5a8>)
 8003d02:	2703      	movs	r7, #3
 8003d04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d08:	f7fc fd7c 	bl	8000804 <__aeabi_ddiv>
 8003d0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d10:	f004 040f 	and.w	r4, r4, #15
 8003d14:	4e8e      	ldr	r6, [pc, #568]	; (8003f50 <_dtoa_r+0x5a8>)
 8003d16:	b954      	cbnz	r4, 8003d2e <_dtoa_r+0x386>
 8003d18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003d1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d20:	f7fc fd70 	bl	8000804 <__aeabi_ddiv>
 8003d24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d28:	e029      	b.n	8003d7e <_dtoa_r+0x3d6>
 8003d2a:	2702      	movs	r7, #2
 8003d2c:	e7f2      	b.n	8003d14 <_dtoa_r+0x36c>
 8003d2e:	07e1      	lsls	r1, r4, #31
 8003d30:	d508      	bpl.n	8003d44 <_dtoa_r+0x39c>
 8003d32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003d3a:	f7fc fc39 	bl	80005b0 <__aeabi_dmul>
 8003d3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d42:	3701      	adds	r7, #1
 8003d44:	1064      	asrs	r4, r4, #1
 8003d46:	3608      	adds	r6, #8
 8003d48:	e7e5      	b.n	8003d16 <_dtoa_r+0x36e>
 8003d4a:	f000 80a5 	beq.w	8003e98 <_dtoa_r+0x4f0>
 8003d4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d52:	f1c9 0400 	rsb	r4, r9, #0
 8003d56:	4b7d      	ldr	r3, [pc, #500]	; (8003f4c <_dtoa_r+0x5a4>)
 8003d58:	f004 020f 	and.w	r2, r4, #15
 8003d5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f7fc fc24 	bl	80005b0 <__aeabi_dmul>
 8003d68:	2702      	movs	r7, #2
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d70:	4e77      	ldr	r6, [pc, #476]	; (8003f50 <_dtoa_r+0x5a8>)
 8003d72:	1124      	asrs	r4, r4, #4
 8003d74:	2c00      	cmp	r4, #0
 8003d76:	f040 8084 	bne.w	8003e82 <_dtoa_r+0x4da>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1d2      	bne.n	8003d24 <_dtoa_r+0x37c>
 8003d7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 808b 	beq.w	8003e9c <_dtoa_r+0x4f4>
 8003d86:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003d8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003d8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d92:	2200      	movs	r2, #0
 8003d94:	4b6f      	ldr	r3, [pc, #444]	; (8003f54 <_dtoa_r+0x5ac>)
 8003d96:	f7fc fe7d 	bl	8000a94 <__aeabi_dcmplt>
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	d07e      	beq.n	8003e9c <_dtoa_r+0x4f4>
 8003d9e:	9b02      	ldr	r3, [sp, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d07b      	beq.n	8003e9c <_dtoa_r+0x4f4>
 8003da4:	f1bb 0f00 	cmp.w	fp, #0
 8003da8:	dd38      	ble.n	8003e1c <_dtoa_r+0x474>
 8003daa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003dae:	2200      	movs	r2, #0
 8003db0:	4b69      	ldr	r3, [pc, #420]	; (8003f58 <_dtoa_r+0x5b0>)
 8003db2:	f7fc fbfd 	bl	80005b0 <__aeabi_dmul>
 8003db6:	465c      	mov	r4, fp
 8003db8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003dbc:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8003dc0:	3701      	adds	r7, #1
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	f7fc fb8a 	bl	80004dc <__aeabi_i2d>
 8003dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dcc:	f7fc fbf0 	bl	80005b0 <__aeabi_dmul>
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	4b62      	ldr	r3, [pc, #392]	; (8003f5c <_dtoa_r+0x5b4>)
 8003dd4:	f7fc fa36 	bl	8000244 <__adddf3>
 8003dd8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003ddc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003de0:	9611      	str	r6, [sp, #68]	; 0x44
 8003de2:	2c00      	cmp	r4, #0
 8003de4:	d15d      	bne.n	8003ea2 <_dtoa_r+0x4fa>
 8003de6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003dea:	2200      	movs	r2, #0
 8003dec:	4b5c      	ldr	r3, [pc, #368]	; (8003f60 <_dtoa_r+0x5b8>)
 8003dee:	f7fc fa27 	bl	8000240 <__aeabi_dsub>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003dfa:	4633      	mov	r3, r6
 8003dfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003dfe:	f7fc fe67 	bl	8000ad0 <__aeabi_dcmpgt>
 8003e02:	2800      	cmp	r0, #0
 8003e04:	f040 829e 	bne.w	8004344 <_dtoa_r+0x99c>
 8003e08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e0e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003e12:	f7fc fe3f 	bl	8000a94 <__aeabi_dcmplt>
 8003e16:	2800      	cmp	r0, #0
 8003e18:	f040 8292 	bne.w	8004340 <_dtoa_r+0x998>
 8003e1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003e20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003e24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f2c0 8153 	blt.w	80040d2 <_dtoa_r+0x72a>
 8003e2c:	f1b9 0f0e 	cmp.w	r9, #14
 8003e30:	f300 814f 	bgt.w	80040d2 <_dtoa_r+0x72a>
 8003e34:	4b45      	ldr	r3, [pc, #276]	; (8003f4c <_dtoa_r+0x5a4>)
 8003e36:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003e3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e3e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003e42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f280 80db 	bge.w	8004000 <_dtoa_r+0x658>
 8003e4a:	9b02      	ldr	r3, [sp, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f300 80d7 	bgt.w	8004000 <_dtoa_r+0x658>
 8003e52:	f040 8274 	bne.w	800433e <_dtoa_r+0x996>
 8003e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4b40      	ldr	r3, [pc, #256]	; (8003f60 <_dtoa_r+0x5b8>)
 8003e5e:	f7fc fba7 	bl	80005b0 <__aeabi_dmul>
 8003e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e66:	f7fc fe29 	bl	8000abc <__aeabi_dcmpge>
 8003e6a:	9c02      	ldr	r4, [sp, #8]
 8003e6c:	4626      	mov	r6, r4
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	f040 824a 	bne.w	8004308 <_dtoa_r+0x960>
 8003e74:	2331      	movs	r3, #49	; 0x31
 8003e76:	9f08      	ldr	r7, [sp, #32]
 8003e78:	f109 0901 	add.w	r9, r9, #1
 8003e7c:	f807 3b01 	strb.w	r3, [r7], #1
 8003e80:	e246      	b.n	8004310 <_dtoa_r+0x968>
 8003e82:	07e2      	lsls	r2, r4, #31
 8003e84:	d505      	bpl.n	8003e92 <_dtoa_r+0x4ea>
 8003e86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003e8a:	f7fc fb91 	bl	80005b0 <__aeabi_dmul>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	3701      	adds	r7, #1
 8003e92:	1064      	asrs	r4, r4, #1
 8003e94:	3608      	adds	r6, #8
 8003e96:	e76d      	b.n	8003d74 <_dtoa_r+0x3cc>
 8003e98:	2702      	movs	r7, #2
 8003e9a:	e770      	b.n	8003d7e <_dtoa_r+0x3d6>
 8003e9c:	46c8      	mov	r8, r9
 8003e9e:	9c02      	ldr	r4, [sp, #8]
 8003ea0:	e78f      	b.n	8003dc2 <_dtoa_r+0x41a>
 8003ea2:	9908      	ldr	r1, [sp, #32]
 8003ea4:	4b29      	ldr	r3, [pc, #164]	; (8003f4c <_dtoa_r+0x5a4>)
 8003ea6:	4421      	add	r1, r4
 8003ea8:	9112      	str	r1, [sp, #72]	; 0x48
 8003eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003eac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003eb0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003eb4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003eb8:	2900      	cmp	r1, #0
 8003eba:	d055      	beq.n	8003f68 <_dtoa_r+0x5c0>
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	4929      	ldr	r1, [pc, #164]	; (8003f64 <_dtoa_r+0x5bc>)
 8003ec0:	f7fc fca0 	bl	8000804 <__aeabi_ddiv>
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	4632      	mov	r2, r6
 8003ec8:	f7fc f9ba 	bl	8000240 <__aeabi_dsub>
 8003ecc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003ed0:	9f08      	ldr	r7, [sp, #32]
 8003ed2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ed6:	f7fc fe1b 	bl	8000b10 <__aeabi_d2iz>
 8003eda:	4604      	mov	r4, r0
 8003edc:	f7fc fafe 	bl	80004dc <__aeabi_i2d>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ee8:	f7fc f9aa 	bl	8000240 <__aeabi_dsub>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	3430      	adds	r4, #48	; 0x30
 8003ef2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ef6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003efa:	f807 4b01 	strb.w	r4, [r7], #1
 8003efe:	f7fc fdc9 	bl	8000a94 <__aeabi_dcmplt>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d174      	bne.n	8003ff0 <_dtoa_r+0x648>
 8003f06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	4911      	ldr	r1, [pc, #68]	; (8003f54 <_dtoa_r+0x5ac>)
 8003f0e:	f7fc f997 	bl	8000240 <__aeabi_dsub>
 8003f12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f16:	f7fc fdbd 	bl	8000a94 <__aeabi_dcmplt>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	f040 80b6 	bne.w	800408c <_dtoa_r+0x6e4>
 8003f20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f22:	429f      	cmp	r7, r3
 8003f24:	f43f af7a 	beq.w	8003e1c <_dtoa_r+0x474>
 8003f28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <_dtoa_r+0x5b0>)
 8003f30:	f7fc fb3e 	bl	80005b0 <__aeabi_dmul>
 8003f34:	2200      	movs	r2, #0
 8003f36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <_dtoa_r+0x5b0>)
 8003f40:	f7fc fb36 	bl	80005b0 <__aeabi_dmul>
 8003f44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f48:	e7c3      	b.n	8003ed2 <_dtoa_r+0x52a>
 8003f4a:	bf00      	nop
 8003f4c:	08005b80 	.word	0x08005b80
 8003f50:	08005b58 	.word	0x08005b58
 8003f54:	3ff00000 	.word	0x3ff00000
 8003f58:	40240000 	.word	0x40240000
 8003f5c:	401c0000 	.word	0x401c0000
 8003f60:	40140000 	.word	0x40140000
 8003f64:	3fe00000 	.word	0x3fe00000
 8003f68:	4630      	mov	r0, r6
 8003f6a:	4639      	mov	r1, r7
 8003f6c:	f7fc fb20 	bl	80005b0 <__aeabi_dmul>
 8003f70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f72:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f76:	9c08      	ldr	r4, [sp, #32]
 8003f78:	9314      	str	r3, [sp, #80]	; 0x50
 8003f7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f7e:	f7fc fdc7 	bl	8000b10 <__aeabi_d2iz>
 8003f82:	9015      	str	r0, [sp, #84]	; 0x54
 8003f84:	f7fc faaa 	bl	80004dc <__aeabi_i2d>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f90:	f7fc f956 	bl	8000240 <__aeabi_dsub>
 8003f94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f96:	4606      	mov	r6, r0
 8003f98:	3330      	adds	r3, #48	; 0x30
 8003f9a:	f804 3b01 	strb.w	r3, [r4], #1
 8003f9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003fa0:	460f      	mov	r7, r1
 8003fa2:	429c      	cmp	r4, r3
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	d124      	bne.n	8003ff4 <_dtoa_r+0x64c>
 8003faa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003fae:	4bb3      	ldr	r3, [pc, #716]	; (800427c <_dtoa_r+0x8d4>)
 8003fb0:	f7fc f948 	bl	8000244 <__adddf3>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4630      	mov	r0, r6
 8003fba:	4639      	mov	r1, r7
 8003fbc:	f7fc fd88 	bl	8000ad0 <__aeabi_dcmpgt>
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d162      	bne.n	800408a <_dtoa_r+0x6e2>
 8003fc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003fc8:	2000      	movs	r0, #0
 8003fca:	49ac      	ldr	r1, [pc, #688]	; (800427c <_dtoa_r+0x8d4>)
 8003fcc:	f7fc f938 	bl	8000240 <__aeabi_dsub>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	4639      	mov	r1, r7
 8003fd8:	f7fc fd5c 	bl	8000a94 <__aeabi_dcmplt>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	f43f af1d 	beq.w	8003e1c <_dtoa_r+0x474>
 8003fe2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003fe4:	1e7b      	subs	r3, r7, #1
 8003fe6:	9314      	str	r3, [sp, #80]	; 0x50
 8003fe8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003fec:	2b30      	cmp	r3, #48	; 0x30
 8003fee:	d0f8      	beq.n	8003fe2 <_dtoa_r+0x63a>
 8003ff0:	46c1      	mov	r9, r8
 8003ff2:	e03a      	b.n	800406a <_dtoa_r+0x6c2>
 8003ff4:	4ba2      	ldr	r3, [pc, #648]	; (8004280 <_dtoa_r+0x8d8>)
 8003ff6:	f7fc fadb 	bl	80005b0 <__aeabi_dmul>
 8003ffa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ffe:	e7bc      	b.n	8003f7a <_dtoa_r+0x5d2>
 8004000:	9f08      	ldr	r7, [sp, #32]
 8004002:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004006:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800400a:	f7fc fbfb 	bl	8000804 <__aeabi_ddiv>
 800400e:	f7fc fd7f 	bl	8000b10 <__aeabi_d2iz>
 8004012:	4604      	mov	r4, r0
 8004014:	f7fc fa62 	bl	80004dc <__aeabi_i2d>
 8004018:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800401c:	f7fc fac8 	bl	80005b0 <__aeabi_dmul>
 8004020:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004024:	460b      	mov	r3, r1
 8004026:	4602      	mov	r2, r0
 8004028:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800402c:	f7fc f908 	bl	8000240 <__aeabi_dsub>
 8004030:	f807 6b01 	strb.w	r6, [r7], #1
 8004034:	9e08      	ldr	r6, [sp, #32]
 8004036:	9b02      	ldr	r3, [sp, #8]
 8004038:	1bbe      	subs	r6, r7, r6
 800403a:	42b3      	cmp	r3, r6
 800403c:	d13a      	bne.n	80040b4 <_dtoa_r+0x70c>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	f7fc f8ff 	bl	8000244 <__adddf3>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800404e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004052:	f7fc fd3d 	bl	8000ad0 <__aeabi_dcmpgt>
 8004056:	bb58      	cbnz	r0, 80040b0 <_dtoa_r+0x708>
 8004058:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800405c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004060:	f7fc fd0e 	bl	8000a80 <__aeabi_dcmpeq>
 8004064:	b108      	cbz	r0, 800406a <_dtoa_r+0x6c2>
 8004066:	07e1      	lsls	r1, r4, #31
 8004068:	d422      	bmi.n	80040b0 <_dtoa_r+0x708>
 800406a:	4628      	mov	r0, r5
 800406c:	4651      	mov	r1, sl
 800406e:	f000 fbeb 	bl	8004848 <_Bfree>
 8004072:	2300      	movs	r3, #0
 8004074:	703b      	strb	r3, [r7, #0]
 8004076:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004078:	f109 0001 	add.w	r0, r9, #1
 800407c:	6018      	str	r0, [r3, #0]
 800407e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004080:	2b00      	cmp	r3, #0
 8004082:	f43f acdf 	beq.w	8003a44 <_dtoa_r+0x9c>
 8004086:	601f      	str	r7, [r3, #0]
 8004088:	e4dc      	b.n	8003a44 <_dtoa_r+0x9c>
 800408a:	4627      	mov	r7, r4
 800408c:	463b      	mov	r3, r7
 800408e:	461f      	mov	r7, r3
 8004090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004094:	2a39      	cmp	r2, #57	; 0x39
 8004096:	d107      	bne.n	80040a8 <_dtoa_r+0x700>
 8004098:	9a08      	ldr	r2, [sp, #32]
 800409a:	429a      	cmp	r2, r3
 800409c:	d1f7      	bne.n	800408e <_dtoa_r+0x6e6>
 800409e:	2230      	movs	r2, #48	; 0x30
 80040a0:	9908      	ldr	r1, [sp, #32]
 80040a2:	f108 0801 	add.w	r8, r8, #1
 80040a6:	700a      	strb	r2, [r1, #0]
 80040a8:	781a      	ldrb	r2, [r3, #0]
 80040aa:	3201      	adds	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e79f      	b.n	8003ff0 <_dtoa_r+0x648>
 80040b0:	46c8      	mov	r8, r9
 80040b2:	e7eb      	b.n	800408c <_dtoa_r+0x6e4>
 80040b4:	2200      	movs	r2, #0
 80040b6:	4b72      	ldr	r3, [pc, #456]	; (8004280 <_dtoa_r+0x8d8>)
 80040b8:	f7fc fa7a 	bl	80005b0 <__aeabi_dmul>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040c4:	2200      	movs	r2, #0
 80040c6:	2300      	movs	r3, #0
 80040c8:	f7fc fcda 	bl	8000a80 <__aeabi_dcmpeq>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d098      	beq.n	8004002 <_dtoa_r+0x65a>
 80040d0:	e7cb      	b.n	800406a <_dtoa_r+0x6c2>
 80040d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040d4:	2a00      	cmp	r2, #0
 80040d6:	f000 80cd 	beq.w	8004274 <_dtoa_r+0x8cc>
 80040da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80040dc:	2a01      	cmp	r2, #1
 80040de:	f300 80af 	bgt.w	8004240 <_dtoa_r+0x898>
 80040e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80040e4:	2a00      	cmp	r2, #0
 80040e6:	f000 80a7 	beq.w	8004238 <_dtoa_r+0x890>
 80040ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80040ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80040f0:	9f06      	ldr	r7, [sp, #24]
 80040f2:	9a06      	ldr	r2, [sp, #24]
 80040f4:	2101      	movs	r1, #1
 80040f6:	441a      	add	r2, r3
 80040f8:	9206      	str	r2, [sp, #24]
 80040fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040fc:	4628      	mov	r0, r5
 80040fe:	441a      	add	r2, r3
 8004100:	9209      	str	r2, [sp, #36]	; 0x24
 8004102:	f000 fc5b 	bl	80049bc <__i2b>
 8004106:	4606      	mov	r6, r0
 8004108:	2f00      	cmp	r7, #0
 800410a:	dd0c      	ble.n	8004126 <_dtoa_r+0x77e>
 800410c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	dd09      	ble.n	8004126 <_dtoa_r+0x77e>
 8004112:	42bb      	cmp	r3, r7
 8004114:	bfa8      	it	ge
 8004116:	463b      	movge	r3, r7
 8004118:	9a06      	ldr	r2, [sp, #24]
 800411a:	1aff      	subs	r7, r7, r3
 800411c:	1ad2      	subs	r2, r2, r3
 800411e:	9206      	str	r2, [sp, #24]
 8004120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	9309      	str	r3, [sp, #36]	; 0x24
 8004126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004128:	b1f3      	cbz	r3, 8004168 <_dtoa_r+0x7c0>
 800412a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80a9 	beq.w	8004284 <_dtoa_r+0x8dc>
 8004132:	2c00      	cmp	r4, #0
 8004134:	dd10      	ble.n	8004158 <_dtoa_r+0x7b0>
 8004136:	4631      	mov	r1, r6
 8004138:	4622      	mov	r2, r4
 800413a:	4628      	mov	r0, r5
 800413c:	f000 fcf8 	bl	8004b30 <__pow5mult>
 8004140:	4652      	mov	r2, sl
 8004142:	4601      	mov	r1, r0
 8004144:	4606      	mov	r6, r0
 8004146:	4628      	mov	r0, r5
 8004148:	f000 fc4e 	bl	80049e8 <__multiply>
 800414c:	4680      	mov	r8, r0
 800414e:	4651      	mov	r1, sl
 8004150:	4628      	mov	r0, r5
 8004152:	f000 fb79 	bl	8004848 <_Bfree>
 8004156:	46c2      	mov	sl, r8
 8004158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800415a:	1b1a      	subs	r2, r3, r4
 800415c:	d004      	beq.n	8004168 <_dtoa_r+0x7c0>
 800415e:	4651      	mov	r1, sl
 8004160:	4628      	mov	r0, r5
 8004162:	f000 fce5 	bl	8004b30 <__pow5mult>
 8004166:	4682      	mov	sl, r0
 8004168:	2101      	movs	r1, #1
 800416a:	4628      	mov	r0, r5
 800416c:	f000 fc26 	bl	80049bc <__i2b>
 8004170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004172:	4604      	mov	r4, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	f340 8087 	ble.w	8004288 <_dtoa_r+0x8e0>
 800417a:	461a      	mov	r2, r3
 800417c:	4601      	mov	r1, r0
 800417e:	4628      	mov	r0, r5
 8004180:	f000 fcd6 	bl	8004b30 <__pow5mult>
 8004184:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004186:	4604      	mov	r4, r0
 8004188:	2b01      	cmp	r3, #1
 800418a:	f340 8080 	ble.w	800428e <_dtoa_r+0x8e6>
 800418e:	f04f 0800 	mov.w	r8, #0
 8004192:	6923      	ldr	r3, [r4, #16]
 8004194:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004198:	6918      	ldr	r0, [r3, #16]
 800419a:	f000 fbc1 	bl	8004920 <__hi0bits>
 800419e:	f1c0 0020 	rsb	r0, r0, #32
 80041a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041a4:	4418      	add	r0, r3
 80041a6:	f010 001f 	ands.w	r0, r0, #31
 80041aa:	f000 8092 	beq.w	80042d2 <_dtoa_r+0x92a>
 80041ae:	f1c0 0320 	rsb	r3, r0, #32
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	f340 808a 	ble.w	80042cc <_dtoa_r+0x924>
 80041b8:	f1c0 001c 	rsb	r0, r0, #28
 80041bc:	9b06      	ldr	r3, [sp, #24]
 80041be:	4407      	add	r7, r0
 80041c0:	4403      	add	r3, r0
 80041c2:	9306      	str	r3, [sp, #24]
 80041c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041c6:	4403      	add	r3, r0
 80041c8:	9309      	str	r3, [sp, #36]	; 0x24
 80041ca:	9b06      	ldr	r3, [sp, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	dd05      	ble.n	80041dc <_dtoa_r+0x834>
 80041d0:	4651      	mov	r1, sl
 80041d2:	461a      	mov	r2, r3
 80041d4:	4628      	mov	r0, r5
 80041d6:	f000 fd05 	bl	8004be4 <__lshift>
 80041da:	4682      	mov	sl, r0
 80041dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041de:	2b00      	cmp	r3, #0
 80041e0:	dd05      	ble.n	80041ee <_dtoa_r+0x846>
 80041e2:	4621      	mov	r1, r4
 80041e4:	461a      	mov	r2, r3
 80041e6:	4628      	mov	r0, r5
 80041e8:	f000 fcfc 	bl	8004be4 <__lshift>
 80041ec:	4604      	mov	r4, r0
 80041ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d070      	beq.n	80042d6 <_dtoa_r+0x92e>
 80041f4:	4621      	mov	r1, r4
 80041f6:	4650      	mov	r0, sl
 80041f8:	f000 fd60 	bl	8004cbc <__mcmp>
 80041fc:	2800      	cmp	r0, #0
 80041fe:	da6a      	bge.n	80042d6 <_dtoa_r+0x92e>
 8004200:	2300      	movs	r3, #0
 8004202:	4651      	mov	r1, sl
 8004204:	220a      	movs	r2, #10
 8004206:	4628      	mov	r0, r5
 8004208:	f000 fb40 	bl	800488c <__multadd>
 800420c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800420e:	4682      	mov	sl, r0
 8004210:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8193 	beq.w	8004540 <_dtoa_r+0xb98>
 800421a:	4631      	mov	r1, r6
 800421c:	2300      	movs	r3, #0
 800421e:	220a      	movs	r2, #10
 8004220:	4628      	mov	r0, r5
 8004222:	f000 fb33 	bl	800488c <__multadd>
 8004226:	f1bb 0f00 	cmp.w	fp, #0
 800422a:	4606      	mov	r6, r0
 800422c:	f300 8093 	bgt.w	8004356 <_dtoa_r+0x9ae>
 8004230:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004232:	2b02      	cmp	r3, #2
 8004234:	dc57      	bgt.n	80042e6 <_dtoa_r+0x93e>
 8004236:	e08e      	b.n	8004356 <_dtoa_r+0x9ae>
 8004238:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800423a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800423e:	e756      	b.n	80040ee <_dtoa_r+0x746>
 8004240:	9b02      	ldr	r3, [sp, #8]
 8004242:	1e5c      	subs	r4, r3, #1
 8004244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004246:	42a3      	cmp	r3, r4
 8004248:	bfb7      	itett	lt
 800424a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800424c:	1b1c      	subge	r4, r3, r4
 800424e:	1ae2      	sublt	r2, r4, r3
 8004250:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004252:	bfbe      	ittt	lt
 8004254:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004256:	189b      	addlt	r3, r3, r2
 8004258:	930e      	strlt	r3, [sp, #56]	; 0x38
 800425a:	9b02      	ldr	r3, [sp, #8]
 800425c:	bfb8      	it	lt
 800425e:	2400      	movlt	r4, #0
 8004260:	2b00      	cmp	r3, #0
 8004262:	bfbb      	ittet	lt
 8004264:	9b06      	ldrlt	r3, [sp, #24]
 8004266:	9a02      	ldrlt	r2, [sp, #8]
 8004268:	9f06      	ldrge	r7, [sp, #24]
 800426a:	1a9f      	sublt	r7, r3, r2
 800426c:	bfac      	ite	ge
 800426e:	9b02      	ldrge	r3, [sp, #8]
 8004270:	2300      	movlt	r3, #0
 8004272:	e73e      	b.n	80040f2 <_dtoa_r+0x74a>
 8004274:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004276:	9f06      	ldr	r7, [sp, #24]
 8004278:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800427a:	e745      	b.n	8004108 <_dtoa_r+0x760>
 800427c:	3fe00000 	.word	0x3fe00000
 8004280:	40240000 	.word	0x40240000
 8004284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004286:	e76a      	b.n	800415e <_dtoa_r+0x7b6>
 8004288:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800428a:	2b01      	cmp	r3, #1
 800428c:	dc19      	bgt.n	80042c2 <_dtoa_r+0x91a>
 800428e:	9b04      	ldr	r3, [sp, #16]
 8004290:	b9bb      	cbnz	r3, 80042c2 <_dtoa_r+0x91a>
 8004292:	9b05      	ldr	r3, [sp, #20]
 8004294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004298:	b99b      	cbnz	r3, 80042c2 <_dtoa_r+0x91a>
 800429a:	9b05      	ldr	r3, [sp, #20]
 800429c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042a0:	0d1b      	lsrs	r3, r3, #20
 80042a2:	051b      	lsls	r3, r3, #20
 80042a4:	b183      	cbz	r3, 80042c8 <_dtoa_r+0x920>
 80042a6:	f04f 0801 	mov.w	r8, #1
 80042aa:	9b06      	ldr	r3, [sp, #24]
 80042ac:	3301      	adds	r3, #1
 80042ae:	9306      	str	r3, [sp, #24]
 80042b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b2:	3301      	adds	r3, #1
 80042b4:	9309      	str	r3, [sp, #36]	; 0x24
 80042b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f47f af6a 	bne.w	8004192 <_dtoa_r+0x7ea>
 80042be:	2001      	movs	r0, #1
 80042c0:	e76f      	b.n	80041a2 <_dtoa_r+0x7fa>
 80042c2:	f04f 0800 	mov.w	r8, #0
 80042c6:	e7f6      	b.n	80042b6 <_dtoa_r+0x90e>
 80042c8:	4698      	mov	r8, r3
 80042ca:	e7f4      	b.n	80042b6 <_dtoa_r+0x90e>
 80042cc:	f43f af7d 	beq.w	80041ca <_dtoa_r+0x822>
 80042d0:	4618      	mov	r0, r3
 80042d2:	301c      	adds	r0, #28
 80042d4:	e772      	b.n	80041bc <_dtoa_r+0x814>
 80042d6:	9b02      	ldr	r3, [sp, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	dc36      	bgt.n	800434a <_dtoa_r+0x9a2>
 80042dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042de:	2b02      	cmp	r3, #2
 80042e0:	dd33      	ble.n	800434a <_dtoa_r+0x9a2>
 80042e2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80042e6:	f1bb 0f00 	cmp.w	fp, #0
 80042ea:	d10d      	bne.n	8004308 <_dtoa_r+0x960>
 80042ec:	4621      	mov	r1, r4
 80042ee:	465b      	mov	r3, fp
 80042f0:	2205      	movs	r2, #5
 80042f2:	4628      	mov	r0, r5
 80042f4:	f000 faca 	bl	800488c <__multadd>
 80042f8:	4601      	mov	r1, r0
 80042fa:	4604      	mov	r4, r0
 80042fc:	4650      	mov	r0, sl
 80042fe:	f000 fcdd 	bl	8004cbc <__mcmp>
 8004302:	2800      	cmp	r0, #0
 8004304:	f73f adb6 	bgt.w	8003e74 <_dtoa_r+0x4cc>
 8004308:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800430a:	9f08      	ldr	r7, [sp, #32]
 800430c:	ea6f 0903 	mvn.w	r9, r3
 8004310:	f04f 0800 	mov.w	r8, #0
 8004314:	4621      	mov	r1, r4
 8004316:	4628      	mov	r0, r5
 8004318:	f000 fa96 	bl	8004848 <_Bfree>
 800431c:	2e00      	cmp	r6, #0
 800431e:	f43f aea4 	beq.w	800406a <_dtoa_r+0x6c2>
 8004322:	f1b8 0f00 	cmp.w	r8, #0
 8004326:	d005      	beq.n	8004334 <_dtoa_r+0x98c>
 8004328:	45b0      	cmp	r8, r6
 800432a:	d003      	beq.n	8004334 <_dtoa_r+0x98c>
 800432c:	4641      	mov	r1, r8
 800432e:	4628      	mov	r0, r5
 8004330:	f000 fa8a 	bl	8004848 <_Bfree>
 8004334:	4631      	mov	r1, r6
 8004336:	4628      	mov	r0, r5
 8004338:	f000 fa86 	bl	8004848 <_Bfree>
 800433c:	e695      	b.n	800406a <_dtoa_r+0x6c2>
 800433e:	2400      	movs	r4, #0
 8004340:	4626      	mov	r6, r4
 8004342:	e7e1      	b.n	8004308 <_dtoa_r+0x960>
 8004344:	46c1      	mov	r9, r8
 8004346:	4626      	mov	r6, r4
 8004348:	e594      	b.n	8003e74 <_dtoa_r+0x4cc>
 800434a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800434c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80fc 	beq.w	800454e <_dtoa_r+0xba6>
 8004356:	2f00      	cmp	r7, #0
 8004358:	dd05      	ble.n	8004366 <_dtoa_r+0x9be>
 800435a:	4631      	mov	r1, r6
 800435c:	463a      	mov	r2, r7
 800435e:	4628      	mov	r0, r5
 8004360:	f000 fc40 	bl	8004be4 <__lshift>
 8004364:	4606      	mov	r6, r0
 8004366:	f1b8 0f00 	cmp.w	r8, #0
 800436a:	d05c      	beq.n	8004426 <_dtoa_r+0xa7e>
 800436c:	4628      	mov	r0, r5
 800436e:	6871      	ldr	r1, [r6, #4]
 8004370:	f000 fa2a 	bl	80047c8 <_Balloc>
 8004374:	4607      	mov	r7, r0
 8004376:	b928      	cbnz	r0, 8004384 <_dtoa_r+0x9dc>
 8004378:	4602      	mov	r2, r0
 800437a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800437e:	4b7e      	ldr	r3, [pc, #504]	; (8004578 <_dtoa_r+0xbd0>)
 8004380:	f7ff bb26 	b.w	80039d0 <_dtoa_r+0x28>
 8004384:	6932      	ldr	r2, [r6, #16]
 8004386:	f106 010c 	add.w	r1, r6, #12
 800438a:	3202      	adds	r2, #2
 800438c:	0092      	lsls	r2, r2, #2
 800438e:	300c      	adds	r0, #12
 8004390:	f000 fa0c 	bl	80047ac <memcpy>
 8004394:	2201      	movs	r2, #1
 8004396:	4639      	mov	r1, r7
 8004398:	4628      	mov	r0, r5
 800439a:	f000 fc23 	bl	8004be4 <__lshift>
 800439e:	46b0      	mov	r8, r6
 80043a0:	4606      	mov	r6, r0
 80043a2:	9b08      	ldr	r3, [sp, #32]
 80043a4:	3301      	adds	r3, #1
 80043a6:	9302      	str	r3, [sp, #8]
 80043a8:	9b08      	ldr	r3, [sp, #32]
 80043aa:	445b      	add	r3, fp
 80043ac:	930a      	str	r3, [sp, #40]	; 0x28
 80043ae:	9b04      	ldr	r3, [sp, #16]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	9309      	str	r3, [sp, #36]	; 0x24
 80043b6:	9b02      	ldr	r3, [sp, #8]
 80043b8:	4621      	mov	r1, r4
 80043ba:	4650      	mov	r0, sl
 80043bc:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80043c0:	f7ff fa62 	bl	8003888 <quorem>
 80043c4:	4603      	mov	r3, r0
 80043c6:	4641      	mov	r1, r8
 80043c8:	3330      	adds	r3, #48	; 0x30
 80043ca:	9004      	str	r0, [sp, #16]
 80043cc:	4650      	mov	r0, sl
 80043ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80043d0:	f000 fc74 	bl	8004cbc <__mcmp>
 80043d4:	4632      	mov	r2, r6
 80043d6:	9006      	str	r0, [sp, #24]
 80043d8:	4621      	mov	r1, r4
 80043da:	4628      	mov	r0, r5
 80043dc:	f000 fc8a 	bl	8004cf4 <__mdiff>
 80043e0:	68c2      	ldr	r2, [r0, #12]
 80043e2:	4607      	mov	r7, r0
 80043e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043e6:	bb02      	cbnz	r2, 800442a <_dtoa_r+0xa82>
 80043e8:	4601      	mov	r1, r0
 80043ea:	4650      	mov	r0, sl
 80043ec:	f000 fc66 	bl	8004cbc <__mcmp>
 80043f0:	4602      	mov	r2, r0
 80043f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043f4:	4639      	mov	r1, r7
 80043f6:	4628      	mov	r0, r5
 80043f8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80043fc:	f000 fa24 	bl	8004848 <_Bfree>
 8004400:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004404:	9f02      	ldr	r7, [sp, #8]
 8004406:	ea43 0102 	orr.w	r1, r3, r2
 800440a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800440c:	430b      	orrs	r3, r1
 800440e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004410:	d10d      	bne.n	800442e <_dtoa_r+0xa86>
 8004412:	2b39      	cmp	r3, #57	; 0x39
 8004414:	d027      	beq.n	8004466 <_dtoa_r+0xabe>
 8004416:	9a06      	ldr	r2, [sp, #24]
 8004418:	2a00      	cmp	r2, #0
 800441a:	dd01      	ble.n	8004420 <_dtoa_r+0xa78>
 800441c:	9b04      	ldr	r3, [sp, #16]
 800441e:	3331      	adds	r3, #49	; 0x31
 8004420:	f88b 3000 	strb.w	r3, [fp]
 8004424:	e776      	b.n	8004314 <_dtoa_r+0x96c>
 8004426:	4630      	mov	r0, r6
 8004428:	e7b9      	b.n	800439e <_dtoa_r+0x9f6>
 800442a:	2201      	movs	r2, #1
 800442c:	e7e2      	b.n	80043f4 <_dtoa_r+0xa4c>
 800442e:	9906      	ldr	r1, [sp, #24]
 8004430:	2900      	cmp	r1, #0
 8004432:	db04      	blt.n	800443e <_dtoa_r+0xa96>
 8004434:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004436:	4301      	orrs	r1, r0
 8004438:	9809      	ldr	r0, [sp, #36]	; 0x24
 800443a:	4301      	orrs	r1, r0
 800443c:	d120      	bne.n	8004480 <_dtoa_r+0xad8>
 800443e:	2a00      	cmp	r2, #0
 8004440:	ddee      	ble.n	8004420 <_dtoa_r+0xa78>
 8004442:	4651      	mov	r1, sl
 8004444:	2201      	movs	r2, #1
 8004446:	4628      	mov	r0, r5
 8004448:	9302      	str	r3, [sp, #8]
 800444a:	f000 fbcb 	bl	8004be4 <__lshift>
 800444e:	4621      	mov	r1, r4
 8004450:	4682      	mov	sl, r0
 8004452:	f000 fc33 	bl	8004cbc <__mcmp>
 8004456:	2800      	cmp	r0, #0
 8004458:	9b02      	ldr	r3, [sp, #8]
 800445a:	dc02      	bgt.n	8004462 <_dtoa_r+0xaba>
 800445c:	d1e0      	bne.n	8004420 <_dtoa_r+0xa78>
 800445e:	07da      	lsls	r2, r3, #31
 8004460:	d5de      	bpl.n	8004420 <_dtoa_r+0xa78>
 8004462:	2b39      	cmp	r3, #57	; 0x39
 8004464:	d1da      	bne.n	800441c <_dtoa_r+0xa74>
 8004466:	2339      	movs	r3, #57	; 0x39
 8004468:	f88b 3000 	strb.w	r3, [fp]
 800446c:	463b      	mov	r3, r7
 800446e:	461f      	mov	r7, r3
 8004470:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004474:	3b01      	subs	r3, #1
 8004476:	2a39      	cmp	r2, #57	; 0x39
 8004478:	d050      	beq.n	800451c <_dtoa_r+0xb74>
 800447a:	3201      	adds	r2, #1
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e749      	b.n	8004314 <_dtoa_r+0x96c>
 8004480:	2a00      	cmp	r2, #0
 8004482:	dd03      	ble.n	800448c <_dtoa_r+0xae4>
 8004484:	2b39      	cmp	r3, #57	; 0x39
 8004486:	d0ee      	beq.n	8004466 <_dtoa_r+0xabe>
 8004488:	3301      	adds	r3, #1
 800448a:	e7c9      	b.n	8004420 <_dtoa_r+0xa78>
 800448c:	9a02      	ldr	r2, [sp, #8]
 800448e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004490:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004494:	428a      	cmp	r2, r1
 8004496:	d02a      	beq.n	80044ee <_dtoa_r+0xb46>
 8004498:	4651      	mov	r1, sl
 800449a:	2300      	movs	r3, #0
 800449c:	220a      	movs	r2, #10
 800449e:	4628      	mov	r0, r5
 80044a0:	f000 f9f4 	bl	800488c <__multadd>
 80044a4:	45b0      	cmp	r8, r6
 80044a6:	4682      	mov	sl, r0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	f04f 020a 	mov.w	r2, #10
 80044b0:	4641      	mov	r1, r8
 80044b2:	4628      	mov	r0, r5
 80044b4:	d107      	bne.n	80044c6 <_dtoa_r+0xb1e>
 80044b6:	f000 f9e9 	bl	800488c <__multadd>
 80044ba:	4680      	mov	r8, r0
 80044bc:	4606      	mov	r6, r0
 80044be:	9b02      	ldr	r3, [sp, #8]
 80044c0:	3301      	adds	r3, #1
 80044c2:	9302      	str	r3, [sp, #8]
 80044c4:	e777      	b.n	80043b6 <_dtoa_r+0xa0e>
 80044c6:	f000 f9e1 	bl	800488c <__multadd>
 80044ca:	4631      	mov	r1, r6
 80044cc:	4680      	mov	r8, r0
 80044ce:	2300      	movs	r3, #0
 80044d0:	220a      	movs	r2, #10
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 f9da 	bl	800488c <__multadd>
 80044d8:	4606      	mov	r6, r0
 80044da:	e7f0      	b.n	80044be <_dtoa_r+0xb16>
 80044dc:	f1bb 0f00 	cmp.w	fp, #0
 80044e0:	bfcc      	ite	gt
 80044e2:	465f      	movgt	r7, fp
 80044e4:	2701      	movle	r7, #1
 80044e6:	f04f 0800 	mov.w	r8, #0
 80044ea:	9a08      	ldr	r2, [sp, #32]
 80044ec:	4417      	add	r7, r2
 80044ee:	4651      	mov	r1, sl
 80044f0:	2201      	movs	r2, #1
 80044f2:	4628      	mov	r0, r5
 80044f4:	9302      	str	r3, [sp, #8]
 80044f6:	f000 fb75 	bl	8004be4 <__lshift>
 80044fa:	4621      	mov	r1, r4
 80044fc:	4682      	mov	sl, r0
 80044fe:	f000 fbdd 	bl	8004cbc <__mcmp>
 8004502:	2800      	cmp	r0, #0
 8004504:	dcb2      	bgt.n	800446c <_dtoa_r+0xac4>
 8004506:	d102      	bne.n	800450e <_dtoa_r+0xb66>
 8004508:	9b02      	ldr	r3, [sp, #8]
 800450a:	07db      	lsls	r3, r3, #31
 800450c:	d4ae      	bmi.n	800446c <_dtoa_r+0xac4>
 800450e:	463b      	mov	r3, r7
 8004510:	461f      	mov	r7, r3
 8004512:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004516:	2a30      	cmp	r2, #48	; 0x30
 8004518:	d0fa      	beq.n	8004510 <_dtoa_r+0xb68>
 800451a:	e6fb      	b.n	8004314 <_dtoa_r+0x96c>
 800451c:	9a08      	ldr	r2, [sp, #32]
 800451e:	429a      	cmp	r2, r3
 8004520:	d1a5      	bne.n	800446e <_dtoa_r+0xac6>
 8004522:	2331      	movs	r3, #49	; 0x31
 8004524:	f109 0901 	add.w	r9, r9, #1
 8004528:	7013      	strb	r3, [r2, #0]
 800452a:	e6f3      	b.n	8004314 <_dtoa_r+0x96c>
 800452c:	4b13      	ldr	r3, [pc, #76]	; (800457c <_dtoa_r+0xbd4>)
 800452e:	f7ff baa7 	b.w	8003a80 <_dtoa_r+0xd8>
 8004532:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004534:	2b00      	cmp	r3, #0
 8004536:	f47f aa80 	bne.w	8003a3a <_dtoa_r+0x92>
 800453a:	4b11      	ldr	r3, [pc, #68]	; (8004580 <_dtoa_r+0xbd8>)
 800453c:	f7ff baa0 	b.w	8003a80 <_dtoa_r+0xd8>
 8004540:	f1bb 0f00 	cmp.w	fp, #0
 8004544:	dc03      	bgt.n	800454e <_dtoa_r+0xba6>
 8004546:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004548:	2b02      	cmp	r3, #2
 800454a:	f73f aecc 	bgt.w	80042e6 <_dtoa_r+0x93e>
 800454e:	9f08      	ldr	r7, [sp, #32]
 8004550:	4621      	mov	r1, r4
 8004552:	4650      	mov	r0, sl
 8004554:	f7ff f998 	bl	8003888 <quorem>
 8004558:	9a08      	ldr	r2, [sp, #32]
 800455a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800455e:	f807 3b01 	strb.w	r3, [r7], #1
 8004562:	1aba      	subs	r2, r7, r2
 8004564:	4593      	cmp	fp, r2
 8004566:	ddb9      	ble.n	80044dc <_dtoa_r+0xb34>
 8004568:	4651      	mov	r1, sl
 800456a:	2300      	movs	r3, #0
 800456c:	220a      	movs	r2, #10
 800456e:	4628      	mov	r0, r5
 8004570:	f000 f98c 	bl	800488c <__multadd>
 8004574:	4682      	mov	sl, r0
 8004576:	e7eb      	b.n	8004550 <_dtoa_r+0xba8>
 8004578:	08005a87 	.word	0x08005a87
 800457c:	080059e0 	.word	0x080059e0
 8004580:	08005a04 	.word	0x08005a04

08004584 <std>:
 8004584:	2300      	movs	r3, #0
 8004586:	b510      	push	{r4, lr}
 8004588:	4604      	mov	r4, r0
 800458a:	e9c0 3300 	strd	r3, r3, [r0]
 800458e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004592:	6083      	str	r3, [r0, #8]
 8004594:	8181      	strh	r1, [r0, #12]
 8004596:	6643      	str	r3, [r0, #100]	; 0x64
 8004598:	81c2      	strh	r2, [r0, #14]
 800459a:	6183      	str	r3, [r0, #24]
 800459c:	4619      	mov	r1, r3
 800459e:	2208      	movs	r2, #8
 80045a0:	305c      	adds	r0, #92	; 0x5c
 80045a2:	f7fe fcf1 	bl	8002f88 <memset>
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <std+0x38>)
 80045a8:	6224      	str	r4, [r4, #32]
 80045aa:	6263      	str	r3, [r4, #36]	; 0x24
 80045ac:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <std+0x3c>)
 80045ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <std+0x40>)
 80045b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <std+0x44>)
 80045b6:	6323      	str	r3, [r4, #48]	; 0x30
 80045b8:	bd10      	pop	{r4, pc}
 80045ba:	bf00      	nop
 80045bc:	08005305 	.word	0x08005305
 80045c0:	08005327 	.word	0x08005327
 80045c4:	0800535f 	.word	0x0800535f
 80045c8:	08005383 	.word	0x08005383

080045cc <_cleanup_r>:
 80045cc:	4901      	ldr	r1, [pc, #4]	; (80045d4 <_cleanup_r+0x8>)
 80045ce:	f000 b8af 	b.w	8004730 <_fwalk_reent>
 80045d2:	bf00      	nop
 80045d4:	08005699 	.word	0x08005699

080045d8 <__sfmoreglue>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	2568      	movs	r5, #104	; 0x68
 80045dc:	1e4a      	subs	r2, r1, #1
 80045de:	4355      	muls	r5, r2
 80045e0:	460e      	mov	r6, r1
 80045e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045e6:	f000 fccb 	bl	8004f80 <_malloc_r>
 80045ea:	4604      	mov	r4, r0
 80045ec:	b140      	cbz	r0, 8004600 <__sfmoreglue+0x28>
 80045ee:	2100      	movs	r1, #0
 80045f0:	e9c0 1600 	strd	r1, r6, [r0]
 80045f4:	300c      	adds	r0, #12
 80045f6:	60a0      	str	r0, [r4, #8]
 80045f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045fc:	f7fe fcc4 	bl	8002f88 <memset>
 8004600:	4620      	mov	r0, r4
 8004602:	bd70      	pop	{r4, r5, r6, pc}

08004604 <__sfp_lock_acquire>:
 8004604:	4801      	ldr	r0, [pc, #4]	; (800460c <__sfp_lock_acquire+0x8>)
 8004606:	f000 b8b8 	b.w	800477a <__retarget_lock_acquire_recursive>
 800460a:	bf00      	nop
 800460c:	200002a8 	.word	0x200002a8

08004610 <__sfp_lock_release>:
 8004610:	4801      	ldr	r0, [pc, #4]	; (8004618 <__sfp_lock_release+0x8>)
 8004612:	f000 b8b3 	b.w	800477c <__retarget_lock_release_recursive>
 8004616:	bf00      	nop
 8004618:	200002a8 	.word	0x200002a8

0800461c <__sinit_lock_acquire>:
 800461c:	4801      	ldr	r0, [pc, #4]	; (8004624 <__sinit_lock_acquire+0x8>)
 800461e:	f000 b8ac 	b.w	800477a <__retarget_lock_acquire_recursive>
 8004622:	bf00      	nop
 8004624:	200002a3 	.word	0x200002a3

08004628 <__sinit_lock_release>:
 8004628:	4801      	ldr	r0, [pc, #4]	; (8004630 <__sinit_lock_release+0x8>)
 800462a:	f000 b8a7 	b.w	800477c <__retarget_lock_release_recursive>
 800462e:	bf00      	nop
 8004630:	200002a3 	.word	0x200002a3

08004634 <__sinit>:
 8004634:	b510      	push	{r4, lr}
 8004636:	4604      	mov	r4, r0
 8004638:	f7ff fff0 	bl	800461c <__sinit_lock_acquire>
 800463c:	69a3      	ldr	r3, [r4, #24]
 800463e:	b11b      	cbz	r3, 8004648 <__sinit+0x14>
 8004640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004644:	f7ff bff0 	b.w	8004628 <__sinit_lock_release>
 8004648:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800464c:	6523      	str	r3, [r4, #80]	; 0x50
 800464e:	4b13      	ldr	r3, [pc, #76]	; (800469c <__sinit+0x68>)
 8004650:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <__sinit+0x6c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	62a2      	str	r2, [r4, #40]	; 0x28
 8004656:	42a3      	cmp	r3, r4
 8004658:	bf08      	it	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	4620      	mov	r0, r4
 800465e:	bf08      	it	eq
 8004660:	61a3      	streq	r3, [r4, #24]
 8004662:	f000 f81f 	bl	80046a4 <__sfp>
 8004666:	6060      	str	r0, [r4, #4]
 8004668:	4620      	mov	r0, r4
 800466a:	f000 f81b 	bl	80046a4 <__sfp>
 800466e:	60a0      	str	r0, [r4, #8]
 8004670:	4620      	mov	r0, r4
 8004672:	f000 f817 	bl	80046a4 <__sfp>
 8004676:	2200      	movs	r2, #0
 8004678:	2104      	movs	r1, #4
 800467a:	60e0      	str	r0, [r4, #12]
 800467c:	6860      	ldr	r0, [r4, #4]
 800467e:	f7ff ff81 	bl	8004584 <std>
 8004682:	2201      	movs	r2, #1
 8004684:	2109      	movs	r1, #9
 8004686:	68a0      	ldr	r0, [r4, #8]
 8004688:	f7ff ff7c 	bl	8004584 <std>
 800468c:	2202      	movs	r2, #2
 800468e:	2112      	movs	r1, #18
 8004690:	68e0      	ldr	r0, [r4, #12]
 8004692:	f7ff ff77 	bl	8004584 <std>
 8004696:	2301      	movs	r3, #1
 8004698:	61a3      	str	r3, [r4, #24]
 800469a:	e7d1      	b.n	8004640 <__sinit+0xc>
 800469c:	080059cc 	.word	0x080059cc
 80046a0:	080045cd 	.word	0x080045cd

080046a4 <__sfp>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	4607      	mov	r7, r0
 80046a8:	f7ff ffac 	bl	8004604 <__sfp_lock_acquire>
 80046ac:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <__sfp+0x84>)
 80046ae:	681e      	ldr	r6, [r3, #0]
 80046b0:	69b3      	ldr	r3, [r6, #24]
 80046b2:	b913      	cbnz	r3, 80046ba <__sfp+0x16>
 80046b4:	4630      	mov	r0, r6
 80046b6:	f7ff ffbd 	bl	8004634 <__sinit>
 80046ba:	3648      	adds	r6, #72	; 0x48
 80046bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	d503      	bpl.n	80046cc <__sfp+0x28>
 80046c4:	6833      	ldr	r3, [r6, #0]
 80046c6:	b30b      	cbz	r3, 800470c <__sfp+0x68>
 80046c8:	6836      	ldr	r6, [r6, #0]
 80046ca:	e7f7      	b.n	80046bc <__sfp+0x18>
 80046cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046d0:	b9d5      	cbnz	r5, 8004708 <__sfp+0x64>
 80046d2:	4b16      	ldr	r3, [pc, #88]	; (800472c <__sfp+0x88>)
 80046d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046d8:	60e3      	str	r3, [r4, #12]
 80046da:	6665      	str	r5, [r4, #100]	; 0x64
 80046dc:	f000 f84c 	bl	8004778 <__retarget_lock_init_recursive>
 80046e0:	f7ff ff96 	bl	8004610 <__sfp_lock_release>
 80046e4:	2208      	movs	r2, #8
 80046e6:	4629      	mov	r1, r5
 80046e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80046ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80046f0:	6025      	str	r5, [r4, #0]
 80046f2:	61a5      	str	r5, [r4, #24]
 80046f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046f8:	f7fe fc46 	bl	8002f88 <memset>
 80046fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004700:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004704:	4620      	mov	r0, r4
 8004706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004708:	3468      	adds	r4, #104	; 0x68
 800470a:	e7d9      	b.n	80046c0 <__sfp+0x1c>
 800470c:	2104      	movs	r1, #4
 800470e:	4638      	mov	r0, r7
 8004710:	f7ff ff62 	bl	80045d8 <__sfmoreglue>
 8004714:	4604      	mov	r4, r0
 8004716:	6030      	str	r0, [r6, #0]
 8004718:	2800      	cmp	r0, #0
 800471a:	d1d5      	bne.n	80046c8 <__sfp+0x24>
 800471c:	f7ff ff78 	bl	8004610 <__sfp_lock_release>
 8004720:	230c      	movs	r3, #12
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	e7ee      	b.n	8004704 <__sfp+0x60>
 8004726:	bf00      	nop
 8004728:	080059cc 	.word	0x080059cc
 800472c:	ffff0001 	.word	0xffff0001

08004730 <_fwalk_reent>:
 8004730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004734:	4606      	mov	r6, r0
 8004736:	4688      	mov	r8, r1
 8004738:	2700      	movs	r7, #0
 800473a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800473e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004742:	f1b9 0901 	subs.w	r9, r9, #1
 8004746:	d505      	bpl.n	8004754 <_fwalk_reent+0x24>
 8004748:	6824      	ldr	r4, [r4, #0]
 800474a:	2c00      	cmp	r4, #0
 800474c:	d1f7      	bne.n	800473e <_fwalk_reent+0xe>
 800474e:	4638      	mov	r0, r7
 8004750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004754:	89ab      	ldrh	r3, [r5, #12]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d907      	bls.n	800476a <_fwalk_reent+0x3a>
 800475a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800475e:	3301      	adds	r3, #1
 8004760:	d003      	beq.n	800476a <_fwalk_reent+0x3a>
 8004762:	4629      	mov	r1, r5
 8004764:	4630      	mov	r0, r6
 8004766:	47c0      	blx	r8
 8004768:	4307      	orrs	r7, r0
 800476a:	3568      	adds	r5, #104	; 0x68
 800476c:	e7e9      	b.n	8004742 <_fwalk_reent+0x12>
	...

08004770 <_localeconv_r>:
 8004770:	4800      	ldr	r0, [pc, #0]	; (8004774 <_localeconv_r+0x4>)
 8004772:	4770      	bx	lr
 8004774:	20000164 	.word	0x20000164

08004778 <__retarget_lock_init_recursive>:
 8004778:	4770      	bx	lr

0800477a <__retarget_lock_acquire_recursive>:
 800477a:	4770      	bx	lr

0800477c <__retarget_lock_release_recursive>:
 800477c:	4770      	bx	lr
	...

08004780 <malloc>:
 8004780:	4b02      	ldr	r3, [pc, #8]	; (800478c <malloc+0xc>)
 8004782:	4601      	mov	r1, r0
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	f000 bbfb 	b.w	8004f80 <_malloc_r>
 800478a:	bf00      	nop
 800478c:	20000010 	.word	0x20000010

08004790 <memchr>:
 8004790:	4603      	mov	r3, r0
 8004792:	b510      	push	{r4, lr}
 8004794:	b2c9      	uxtb	r1, r1
 8004796:	4402      	add	r2, r0
 8004798:	4293      	cmp	r3, r2
 800479a:	4618      	mov	r0, r3
 800479c:	d101      	bne.n	80047a2 <memchr+0x12>
 800479e:	2000      	movs	r0, #0
 80047a0:	e003      	b.n	80047aa <memchr+0x1a>
 80047a2:	7804      	ldrb	r4, [r0, #0]
 80047a4:	3301      	adds	r3, #1
 80047a6:	428c      	cmp	r4, r1
 80047a8:	d1f6      	bne.n	8004798 <memchr+0x8>
 80047aa:	bd10      	pop	{r4, pc}

080047ac <memcpy>:
 80047ac:	440a      	add	r2, r1
 80047ae:	4291      	cmp	r1, r2
 80047b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80047b4:	d100      	bne.n	80047b8 <memcpy+0xc>
 80047b6:	4770      	bx	lr
 80047b8:	b510      	push	{r4, lr}
 80047ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047be:	4291      	cmp	r1, r2
 80047c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047c4:	d1f9      	bne.n	80047ba <memcpy+0xe>
 80047c6:	bd10      	pop	{r4, pc}

080047c8 <_Balloc>:
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80047cc:	4604      	mov	r4, r0
 80047ce:	460d      	mov	r5, r1
 80047d0:	b976      	cbnz	r6, 80047f0 <_Balloc+0x28>
 80047d2:	2010      	movs	r0, #16
 80047d4:	f7ff ffd4 	bl	8004780 <malloc>
 80047d8:	4602      	mov	r2, r0
 80047da:	6260      	str	r0, [r4, #36]	; 0x24
 80047dc:	b920      	cbnz	r0, 80047e8 <_Balloc+0x20>
 80047de:	2166      	movs	r1, #102	; 0x66
 80047e0:	4b17      	ldr	r3, [pc, #92]	; (8004840 <_Balloc+0x78>)
 80047e2:	4818      	ldr	r0, [pc, #96]	; (8004844 <_Balloc+0x7c>)
 80047e4:	f000 fea4 	bl	8005530 <__assert_func>
 80047e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047ec:	6006      	str	r6, [r0, #0]
 80047ee:	60c6      	str	r6, [r0, #12]
 80047f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80047f2:	68f3      	ldr	r3, [r6, #12]
 80047f4:	b183      	cbz	r3, 8004818 <_Balloc+0x50>
 80047f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80047fe:	b9b8      	cbnz	r0, 8004830 <_Balloc+0x68>
 8004800:	2101      	movs	r1, #1
 8004802:	fa01 f605 	lsl.w	r6, r1, r5
 8004806:	1d72      	adds	r2, r6, #5
 8004808:	4620      	mov	r0, r4
 800480a:	0092      	lsls	r2, r2, #2
 800480c:	f000 fb5e 	bl	8004ecc <_calloc_r>
 8004810:	b160      	cbz	r0, 800482c <_Balloc+0x64>
 8004812:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004816:	e00e      	b.n	8004836 <_Balloc+0x6e>
 8004818:	2221      	movs	r2, #33	; 0x21
 800481a:	2104      	movs	r1, #4
 800481c:	4620      	mov	r0, r4
 800481e:	f000 fb55 	bl	8004ecc <_calloc_r>
 8004822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004824:	60f0      	str	r0, [r6, #12]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e4      	bne.n	80047f6 <_Balloc+0x2e>
 800482c:	2000      	movs	r0, #0
 800482e:	bd70      	pop	{r4, r5, r6, pc}
 8004830:	6802      	ldr	r2, [r0, #0]
 8004832:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004836:	2300      	movs	r3, #0
 8004838:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800483c:	e7f7      	b.n	800482e <_Balloc+0x66>
 800483e:	bf00      	nop
 8004840:	08005a11 	.word	0x08005a11
 8004844:	08005af8 	.word	0x08005af8

08004848 <_Bfree>:
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800484c:	4605      	mov	r5, r0
 800484e:	460c      	mov	r4, r1
 8004850:	b976      	cbnz	r6, 8004870 <_Bfree+0x28>
 8004852:	2010      	movs	r0, #16
 8004854:	f7ff ff94 	bl	8004780 <malloc>
 8004858:	4602      	mov	r2, r0
 800485a:	6268      	str	r0, [r5, #36]	; 0x24
 800485c:	b920      	cbnz	r0, 8004868 <_Bfree+0x20>
 800485e:	218a      	movs	r1, #138	; 0x8a
 8004860:	4b08      	ldr	r3, [pc, #32]	; (8004884 <_Bfree+0x3c>)
 8004862:	4809      	ldr	r0, [pc, #36]	; (8004888 <_Bfree+0x40>)
 8004864:	f000 fe64 	bl	8005530 <__assert_func>
 8004868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800486c:	6006      	str	r6, [r0, #0]
 800486e:	60c6      	str	r6, [r0, #12]
 8004870:	b13c      	cbz	r4, 8004882 <_Bfree+0x3a>
 8004872:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004874:	6862      	ldr	r2, [r4, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800487c:	6021      	str	r1, [r4, #0]
 800487e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004882:	bd70      	pop	{r4, r5, r6, pc}
 8004884:	08005a11 	.word	0x08005a11
 8004888:	08005af8 	.word	0x08005af8

0800488c <__multadd>:
 800488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004890:	4698      	mov	r8, r3
 8004892:	460c      	mov	r4, r1
 8004894:	2300      	movs	r3, #0
 8004896:	690e      	ldr	r6, [r1, #16]
 8004898:	4607      	mov	r7, r0
 800489a:	f101 0014 	add.w	r0, r1, #20
 800489e:	6805      	ldr	r5, [r0, #0]
 80048a0:	3301      	adds	r3, #1
 80048a2:	b2a9      	uxth	r1, r5
 80048a4:	fb02 8101 	mla	r1, r2, r1, r8
 80048a8:	0c2d      	lsrs	r5, r5, #16
 80048aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80048ae:	fb02 c505 	mla	r5, r2, r5, ip
 80048b2:	b289      	uxth	r1, r1
 80048b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80048b8:	429e      	cmp	r6, r3
 80048ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80048be:	f840 1b04 	str.w	r1, [r0], #4
 80048c2:	dcec      	bgt.n	800489e <__multadd+0x12>
 80048c4:	f1b8 0f00 	cmp.w	r8, #0
 80048c8:	d022      	beq.n	8004910 <__multadd+0x84>
 80048ca:	68a3      	ldr	r3, [r4, #8]
 80048cc:	42b3      	cmp	r3, r6
 80048ce:	dc19      	bgt.n	8004904 <__multadd+0x78>
 80048d0:	6861      	ldr	r1, [r4, #4]
 80048d2:	4638      	mov	r0, r7
 80048d4:	3101      	adds	r1, #1
 80048d6:	f7ff ff77 	bl	80047c8 <_Balloc>
 80048da:	4605      	mov	r5, r0
 80048dc:	b928      	cbnz	r0, 80048ea <__multadd+0x5e>
 80048de:	4602      	mov	r2, r0
 80048e0:	21b5      	movs	r1, #181	; 0xb5
 80048e2:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <__multadd+0x8c>)
 80048e4:	480d      	ldr	r0, [pc, #52]	; (800491c <__multadd+0x90>)
 80048e6:	f000 fe23 	bl	8005530 <__assert_func>
 80048ea:	6922      	ldr	r2, [r4, #16]
 80048ec:	f104 010c 	add.w	r1, r4, #12
 80048f0:	3202      	adds	r2, #2
 80048f2:	0092      	lsls	r2, r2, #2
 80048f4:	300c      	adds	r0, #12
 80048f6:	f7ff ff59 	bl	80047ac <memcpy>
 80048fa:	4621      	mov	r1, r4
 80048fc:	4638      	mov	r0, r7
 80048fe:	f7ff ffa3 	bl	8004848 <_Bfree>
 8004902:	462c      	mov	r4, r5
 8004904:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004908:	3601      	adds	r6, #1
 800490a:	f8c3 8014 	str.w	r8, [r3, #20]
 800490e:	6126      	str	r6, [r4, #16]
 8004910:	4620      	mov	r0, r4
 8004912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004916:	bf00      	nop
 8004918:	08005a87 	.word	0x08005a87
 800491c:	08005af8 	.word	0x08005af8

08004920 <__hi0bits>:
 8004920:	0c02      	lsrs	r2, r0, #16
 8004922:	0412      	lsls	r2, r2, #16
 8004924:	4603      	mov	r3, r0
 8004926:	b9ca      	cbnz	r2, 800495c <__hi0bits+0x3c>
 8004928:	0403      	lsls	r3, r0, #16
 800492a:	2010      	movs	r0, #16
 800492c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004930:	bf04      	itt	eq
 8004932:	021b      	lsleq	r3, r3, #8
 8004934:	3008      	addeq	r0, #8
 8004936:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800493a:	bf04      	itt	eq
 800493c:	011b      	lsleq	r3, r3, #4
 800493e:	3004      	addeq	r0, #4
 8004940:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004944:	bf04      	itt	eq
 8004946:	009b      	lsleq	r3, r3, #2
 8004948:	3002      	addeq	r0, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	db05      	blt.n	800495a <__hi0bits+0x3a>
 800494e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004952:	f100 0001 	add.w	r0, r0, #1
 8004956:	bf08      	it	eq
 8004958:	2020      	moveq	r0, #32
 800495a:	4770      	bx	lr
 800495c:	2000      	movs	r0, #0
 800495e:	e7e5      	b.n	800492c <__hi0bits+0xc>

08004960 <__lo0bits>:
 8004960:	6803      	ldr	r3, [r0, #0]
 8004962:	4602      	mov	r2, r0
 8004964:	f013 0007 	ands.w	r0, r3, #7
 8004968:	d00b      	beq.n	8004982 <__lo0bits+0x22>
 800496a:	07d9      	lsls	r1, r3, #31
 800496c:	d422      	bmi.n	80049b4 <__lo0bits+0x54>
 800496e:	0798      	lsls	r0, r3, #30
 8004970:	bf49      	itett	mi
 8004972:	085b      	lsrmi	r3, r3, #1
 8004974:	089b      	lsrpl	r3, r3, #2
 8004976:	2001      	movmi	r0, #1
 8004978:	6013      	strmi	r3, [r2, #0]
 800497a:	bf5c      	itt	pl
 800497c:	2002      	movpl	r0, #2
 800497e:	6013      	strpl	r3, [r2, #0]
 8004980:	4770      	bx	lr
 8004982:	b299      	uxth	r1, r3
 8004984:	b909      	cbnz	r1, 800498a <__lo0bits+0x2a>
 8004986:	2010      	movs	r0, #16
 8004988:	0c1b      	lsrs	r3, r3, #16
 800498a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800498e:	bf04      	itt	eq
 8004990:	0a1b      	lsreq	r3, r3, #8
 8004992:	3008      	addeq	r0, #8
 8004994:	0719      	lsls	r1, r3, #28
 8004996:	bf04      	itt	eq
 8004998:	091b      	lsreq	r3, r3, #4
 800499a:	3004      	addeq	r0, #4
 800499c:	0799      	lsls	r1, r3, #30
 800499e:	bf04      	itt	eq
 80049a0:	089b      	lsreq	r3, r3, #2
 80049a2:	3002      	addeq	r0, #2
 80049a4:	07d9      	lsls	r1, r3, #31
 80049a6:	d403      	bmi.n	80049b0 <__lo0bits+0x50>
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	f100 0001 	add.w	r0, r0, #1
 80049ae:	d003      	beq.n	80049b8 <__lo0bits+0x58>
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	4770      	bx	lr
 80049b4:	2000      	movs	r0, #0
 80049b6:	4770      	bx	lr
 80049b8:	2020      	movs	r0, #32
 80049ba:	4770      	bx	lr

080049bc <__i2b>:
 80049bc:	b510      	push	{r4, lr}
 80049be:	460c      	mov	r4, r1
 80049c0:	2101      	movs	r1, #1
 80049c2:	f7ff ff01 	bl	80047c8 <_Balloc>
 80049c6:	4602      	mov	r2, r0
 80049c8:	b928      	cbnz	r0, 80049d6 <__i2b+0x1a>
 80049ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80049ce:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <__i2b+0x24>)
 80049d0:	4804      	ldr	r0, [pc, #16]	; (80049e4 <__i2b+0x28>)
 80049d2:	f000 fdad 	bl	8005530 <__assert_func>
 80049d6:	2301      	movs	r3, #1
 80049d8:	6144      	str	r4, [r0, #20]
 80049da:	6103      	str	r3, [r0, #16]
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	bf00      	nop
 80049e0:	08005a87 	.word	0x08005a87
 80049e4:	08005af8 	.word	0x08005af8

080049e8 <__multiply>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	4614      	mov	r4, r2
 80049ee:	690a      	ldr	r2, [r1, #16]
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	460d      	mov	r5, r1
 80049f4:	429a      	cmp	r2, r3
 80049f6:	bfbe      	ittt	lt
 80049f8:	460b      	movlt	r3, r1
 80049fa:	4625      	movlt	r5, r4
 80049fc:	461c      	movlt	r4, r3
 80049fe:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004a02:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004a06:	68ab      	ldr	r3, [r5, #8]
 8004a08:	6869      	ldr	r1, [r5, #4]
 8004a0a:	eb0a 0709 	add.w	r7, sl, r9
 8004a0e:	42bb      	cmp	r3, r7
 8004a10:	b085      	sub	sp, #20
 8004a12:	bfb8      	it	lt
 8004a14:	3101      	addlt	r1, #1
 8004a16:	f7ff fed7 	bl	80047c8 <_Balloc>
 8004a1a:	b930      	cbnz	r0, 8004a2a <__multiply+0x42>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	f240 115d 	movw	r1, #349	; 0x15d
 8004a22:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <__multiply+0x140>)
 8004a24:	4841      	ldr	r0, [pc, #260]	; (8004b2c <__multiply+0x144>)
 8004a26:	f000 fd83 	bl	8005530 <__assert_func>
 8004a2a:	f100 0614 	add.w	r6, r0, #20
 8004a2e:	4633      	mov	r3, r6
 8004a30:	2200      	movs	r2, #0
 8004a32:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004a36:	4543      	cmp	r3, r8
 8004a38:	d31e      	bcc.n	8004a78 <__multiply+0x90>
 8004a3a:	f105 0c14 	add.w	ip, r5, #20
 8004a3e:	f104 0314 	add.w	r3, r4, #20
 8004a42:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004a46:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004a4a:	9202      	str	r2, [sp, #8]
 8004a4c:	ebac 0205 	sub.w	r2, ip, r5
 8004a50:	3a15      	subs	r2, #21
 8004a52:	f022 0203 	bic.w	r2, r2, #3
 8004a56:	3204      	adds	r2, #4
 8004a58:	f105 0115 	add.w	r1, r5, #21
 8004a5c:	458c      	cmp	ip, r1
 8004a5e:	bf38      	it	cc
 8004a60:	2204      	movcc	r2, #4
 8004a62:	9201      	str	r2, [sp, #4]
 8004a64:	9a02      	ldr	r2, [sp, #8]
 8004a66:	9303      	str	r3, [sp, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d808      	bhi.n	8004a7e <__multiply+0x96>
 8004a6c:	2f00      	cmp	r7, #0
 8004a6e:	dc55      	bgt.n	8004b1c <__multiply+0x134>
 8004a70:	6107      	str	r7, [r0, #16]
 8004a72:	b005      	add	sp, #20
 8004a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a78:	f843 2b04 	str.w	r2, [r3], #4
 8004a7c:	e7db      	b.n	8004a36 <__multiply+0x4e>
 8004a7e:	f8b3 a000 	ldrh.w	sl, [r3]
 8004a82:	f1ba 0f00 	cmp.w	sl, #0
 8004a86:	d020      	beq.n	8004aca <__multiply+0xe2>
 8004a88:	46b1      	mov	r9, r6
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f105 0e14 	add.w	lr, r5, #20
 8004a90:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004a94:	f8d9 b000 	ldr.w	fp, [r9]
 8004a98:	b2a1      	uxth	r1, r4
 8004a9a:	fa1f fb8b 	uxth.w	fp, fp
 8004a9e:	fb0a b101 	mla	r1, sl, r1, fp
 8004aa2:	4411      	add	r1, r2
 8004aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8004aa8:	0c24      	lsrs	r4, r4, #16
 8004aaa:	0c12      	lsrs	r2, r2, #16
 8004aac:	fb0a 2404 	mla	r4, sl, r4, r2
 8004ab0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004ab4:	b289      	uxth	r1, r1
 8004ab6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004aba:	45f4      	cmp	ip, lr
 8004abc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004ac0:	f849 1b04 	str.w	r1, [r9], #4
 8004ac4:	d8e4      	bhi.n	8004a90 <__multiply+0xa8>
 8004ac6:	9901      	ldr	r1, [sp, #4]
 8004ac8:	5072      	str	r2, [r6, r1]
 8004aca:	9a03      	ldr	r2, [sp, #12]
 8004acc:	3304      	adds	r3, #4
 8004ace:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004ad2:	f1b9 0f00 	cmp.w	r9, #0
 8004ad6:	d01f      	beq.n	8004b18 <__multiply+0x130>
 8004ad8:	46b6      	mov	lr, r6
 8004ada:	f04f 0a00 	mov.w	sl, #0
 8004ade:	6834      	ldr	r4, [r6, #0]
 8004ae0:	f105 0114 	add.w	r1, r5, #20
 8004ae4:	880a      	ldrh	r2, [r1, #0]
 8004ae6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004aea:	b2a4      	uxth	r4, r4
 8004aec:	fb09 b202 	mla	r2, r9, r2, fp
 8004af0:	4492      	add	sl, r2
 8004af2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004af6:	f84e 4b04 	str.w	r4, [lr], #4
 8004afa:	f851 4b04 	ldr.w	r4, [r1], #4
 8004afe:	f8be 2000 	ldrh.w	r2, [lr]
 8004b02:	0c24      	lsrs	r4, r4, #16
 8004b04:	fb09 2404 	mla	r4, r9, r4, r2
 8004b08:	458c      	cmp	ip, r1
 8004b0a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004b0e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004b12:	d8e7      	bhi.n	8004ae4 <__multiply+0xfc>
 8004b14:	9a01      	ldr	r2, [sp, #4]
 8004b16:	50b4      	str	r4, [r6, r2]
 8004b18:	3604      	adds	r6, #4
 8004b1a:	e7a3      	b.n	8004a64 <__multiply+0x7c>
 8004b1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1a5      	bne.n	8004a70 <__multiply+0x88>
 8004b24:	3f01      	subs	r7, #1
 8004b26:	e7a1      	b.n	8004a6c <__multiply+0x84>
 8004b28:	08005a87 	.word	0x08005a87
 8004b2c:	08005af8 	.word	0x08005af8

08004b30 <__pow5mult>:
 8004b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b34:	4615      	mov	r5, r2
 8004b36:	f012 0203 	ands.w	r2, r2, #3
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	460f      	mov	r7, r1
 8004b3e:	d007      	beq.n	8004b50 <__pow5mult+0x20>
 8004b40:	4c25      	ldr	r4, [pc, #148]	; (8004bd8 <__pow5mult+0xa8>)
 8004b42:	3a01      	subs	r2, #1
 8004b44:	2300      	movs	r3, #0
 8004b46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b4a:	f7ff fe9f 	bl	800488c <__multadd>
 8004b4e:	4607      	mov	r7, r0
 8004b50:	10ad      	asrs	r5, r5, #2
 8004b52:	d03d      	beq.n	8004bd0 <__pow5mult+0xa0>
 8004b54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004b56:	b97c      	cbnz	r4, 8004b78 <__pow5mult+0x48>
 8004b58:	2010      	movs	r0, #16
 8004b5a:	f7ff fe11 	bl	8004780 <malloc>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	6270      	str	r0, [r6, #36]	; 0x24
 8004b62:	b928      	cbnz	r0, 8004b70 <__pow5mult+0x40>
 8004b64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004b68:	4b1c      	ldr	r3, [pc, #112]	; (8004bdc <__pow5mult+0xac>)
 8004b6a:	481d      	ldr	r0, [pc, #116]	; (8004be0 <__pow5mult+0xb0>)
 8004b6c:	f000 fce0 	bl	8005530 <__assert_func>
 8004b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b74:	6004      	str	r4, [r0, #0]
 8004b76:	60c4      	str	r4, [r0, #12]
 8004b78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004b7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b80:	b94c      	cbnz	r4, 8004b96 <__pow5mult+0x66>
 8004b82:	f240 2171 	movw	r1, #625	; 0x271
 8004b86:	4630      	mov	r0, r6
 8004b88:	f7ff ff18 	bl	80049bc <__i2b>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4604      	mov	r4, r0
 8004b90:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b94:	6003      	str	r3, [r0, #0]
 8004b96:	f04f 0900 	mov.w	r9, #0
 8004b9a:	07eb      	lsls	r3, r5, #31
 8004b9c:	d50a      	bpl.n	8004bb4 <__pow5mult+0x84>
 8004b9e:	4639      	mov	r1, r7
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f7ff ff20 	bl	80049e8 <__multiply>
 8004ba8:	4680      	mov	r8, r0
 8004baa:	4639      	mov	r1, r7
 8004bac:	4630      	mov	r0, r6
 8004bae:	f7ff fe4b 	bl	8004848 <_Bfree>
 8004bb2:	4647      	mov	r7, r8
 8004bb4:	106d      	asrs	r5, r5, #1
 8004bb6:	d00b      	beq.n	8004bd0 <__pow5mult+0xa0>
 8004bb8:	6820      	ldr	r0, [r4, #0]
 8004bba:	b938      	cbnz	r0, 8004bcc <__pow5mult+0x9c>
 8004bbc:	4622      	mov	r2, r4
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f7ff ff11 	bl	80049e8 <__multiply>
 8004bc6:	6020      	str	r0, [r4, #0]
 8004bc8:	f8c0 9000 	str.w	r9, [r0]
 8004bcc:	4604      	mov	r4, r0
 8004bce:	e7e4      	b.n	8004b9a <__pow5mult+0x6a>
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bd6:	bf00      	nop
 8004bd8:	08005c48 	.word	0x08005c48
 8004bdc:	08005a11 	.word	0x08005a11
 8004be0:	08005af8 	.word	0x08005af8

08004be4 <__lshift>:
 8004be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be8:	460c      	mov	r4, r1
 8004bea:	4607      	mov	r7, r0
 8004bec:	4691      	mov	r9, r2
 8004bee:	6923      	ldr	r3, [r4, #16]
 8004bf0:	6849      	ldr	r1, [r1, #4]
 8004bf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004bf6:	68a3      	ldr	r3, [r4, #8]
 8004bf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004bfc:	f108 0601 	add.w	r6, r8, #1
 8004c00:	42b3      	cmp	r3, r6
 8004c02:	db0b      	blt.n	8004c1c <__lshift+0x38>
 8004c04:	4638      	mov	r0, r7
 8004c06:	f7ff fddf 	bl	80047c8 <_Balloc>
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	b948      	cbnz	r0, 8004c22 <__lshift+0x3e>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004c14:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <__lshift+0xd0>)
 8004c16:	4828      	ldr	r0, [pc, #160]	; (8004cb8 <__lshift+0xd4>)
 8004c18:	f000 fc8a 	bl	8005530 <__assert_func>
 8004c1c:	3101      	adds	r1, #1
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	e7ee      	b.n	8004c00 <__lshift+0x1c>
 8004c22:	2300      	movs	r3, #0
 8004c24:	f100 0114 	add.w	r1, r0, #20
 8004c28:	f100 0210 	add.w	r2, r0, #16
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	4553      	cmp	r3, sl
 8004c30:	db33      	blt.n	8004c9a <__lshift+0xb6>
 8004c32:	6920      	ldr	r0, [r4, #16]
 8004c34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c38:	f104 0314 	add.w	r3, r4, #20
 8004c3c:	f019 091f 	ands.w	r9, r9, #31
 8004c40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004c44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004c48:	d02b      	beq.n	8004ca2 <__lshift+0xbe>
 8004c4a:	468a      	mov	sl, r1
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f1c9 0e20 	rsb	lr, r9, #32
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	fa00 f009 	lsl.w	r0, r0, r9
 8004c58:	4302      	orrs	r2, r0
 8004c5a:	f84a 2b04 	str.w	r2, [sl], #4
 8004c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c62:	459c      	cmp	ip, r3
 8004c64:	fa22 f20e 	lsr.w	r2, r2, lr
 8004c68:	d8f3      	bhi.n	8004c52 <__lshift+0x6e>
 8004c6a:	ebac 0304 	sub.w	r3, ip, r4
 8004c6e:	3b15      	subs	r3, #21
 8004c70:	f023 0303 	bic.w	r3, r3, #3
 8004c74:	3304      	adds	r3, #4
 8004c76:	f104 0015 	add.w	r0, r4, #21
 8004c7a:	4584      	cmp	ip, r0
 8004c7c:	bf38      	it	cc
 8004c7e:	2304      	movcc	r3, #4
 8004c80:	50ca      	str	r2, [r1, r3]
 8004c82:	b10a      	cbz	r2, 8004c88 <__lshift+0xa4>
 8004c84:	f108 0602 	add.w	r6, r8, #2
 8004c88:	3e01      	subs	r6, #1
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	612e      	str	r6, [r5, #16]
 8004c90:	f7ff fdda 	bl	8004848 <_Bfree>
 8004c94:	4628      	mov	r0, r5
 8004c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	e7c5      	b.n	8004c2e <__lshift+0x4a>
 8004ca2:	3904      	subs	r1, #4
 8004ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ca8:	459c      	cmp	ip, r3
 8004caa:	f841 2f04 	str.w	r2, [r1, #4]!
 8004cae:	d8f9      	bhi.n	8004ca4 <__lshift+0xc0>
 8004cb0:	e7ea      	b.n	8004c88 <__lshift+0xa4>
 8004cb2:	bf00      	nop
 8004cb4:	08005a87 	.word	0x08005a87
 8004cb8:	08005af8 	.word	0x08005af8

08004cbc <__mcmp>:
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	690a      	ldr	r2, [r1, #16]
 8004cc0:	6900      	ldr	r0, [r0, #16]
 8004cc2:	b530      	push	{r4, r5, lr}
 8004cc4:	1a80      	subs	r0, r0, r2
 8004cc6:	d10d      	bne.n	8004ce4 <__mcmp+0x28>
 8004cc8:	3314      	adds	r3, #20
 8004cca:	3114      	adds	r1, #20
 8004ccc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004cd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004cd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004cd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004cdc:	4295      	cmp	r5, r2
 8004cde:	d002      	beq.n	8004ce6 <__mcmp+0x2a>
 8004ce0:	d304      	bcc.n	8004cec <__mcmp+0x30>
 8004ce2:	2001      	movs	r0, #1
 8004ce4:	bd30      	pop	{r4, r5, pc}
 8004ce6:	42a3      	cmp	r3, r4
 8004ce8:	d3f4      	bcc.n	8004cd4 <__mcmp+0x18>
 8004cea:	e7fb      	b.n	8004ce4 <__mcmp+0x28>
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cf0:	e7f8      	b.n	8004ce4 <__mcmp+0x28>
	...

08004cf4 <__mdiff>:
 8004cf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	4620      	mov	r0, r4
 8004d00:	4692      	mov	sl, r2
 8004d02:	f7ff ffdb 	bl	8004cbc <__mcmp>
 8004d06:	1e05      	subs	r5, r0, #0
 8004d08:	d111      	bne.n	8004d2e <__mdiff+0x3a>
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f7ff fd5b 	bl	80047c8 <_Balloc>
 8004d12:	4602      	mov	r2, r0
 8004d14:	b928      	cbnz	r0, 8004d22 <__mdiff+0x2e>
 8004d16:	f240 2132 	movw	r1, #562	; 0x232
 8004d1a:	4b3c      	ldr	r3, [pc, #240]	; (8004e0c <__mdiff+0x118>)
 8004d1c:	483c      	ldr	r0, [pc, #240]	; (8004e10 <__mdiff+0x11c>)
 8004d1e:	f000 fc07 	bl	8005530 <__assert_func>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004d28:	4610      	mov	r0, r2
 8004d2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2e:	bfa4      	itt	ge
 8004d30:	4653      	movge	r3, sl
 8004d32:	46a2      	movge	sl, r4
 8004d34:	4630      	mov	r0, r6
 8004d36:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004d3a:	bfa6      	itte	ge
 8004d3c:	461c      	movge	r4, r3
 8004d3e:	2500      	movge	r5, #0
 8004d40:	2501      	movlt	r5, #1
 8004d42:	f7ff fd41 	bl	80047c8 <_Balloc>
 8004d46:	4602      	mov	r2, r0
 8004d48:	b918      	cbnz	r0, 8004d52 <__mdiff+0x5e>
 8004d4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004d4e:	4b2f      	ldr	r3, [pc, #188]	; (8004e0c <__mdiff+0x118>)
 8004d50:	e7e4      	b.n	8004d1c <__mdiff+0x28>
 8004d52:	f100 0814 	add.w	r8, r0, #20
 8004d56:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004d5a:	60c5      	str	r5, [r0, #12]
 8004d5c:	f04f 0c00 	mov.w	ip, #0
 8004d60:	f10a 0514 	add.w	r5, sl, #20
 8004d64:	f10a 0010 	add.w	r0, sl, #16
 8004d68:	46c2      	mov	sl, r8
 8004d6a:	6926      	ldr	r6, [r4, #16]
 8004d6c:	f104 0914 	add.w	r9, r4, #20
 8004d70:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004d74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004d78:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004d7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004d80:	fa1f f18b 	uxth.w	r1, fp
 8004d84:	4461      	add	r1, ip
 8004d86:	fa1f fc83 	uxth.w	ip, r3
 8004d8a:	0c1b      	lsrs	r3, r3, #16
 8004d8c:	eba1 010c 	sub.w	r1, r1, ip
 8004d90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004d94:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004d98:	b289      	uxth	r1, r1
 8004d9a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004d9e:	454e      	cmp	r6, r9
 8004da0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004da4:	f84a 3b04 	str.w	r3, [sl], #4
 8004da8:	d8e6      	bhi.n	8004d78 <__mdiff+0x84>
 8004daa:	1b33      	subs	r3, r6, r4
 8004dac:	3b15      	subs	r3, #21
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	3415      	adds	r4, #21
 8004db4:	3304      	adds	r3, #4
 8004db6:	42a6      	cmp	r6, r4
 8004db8:	bf38      	it	cc
 8004dba:	2304      	movcc	r3, #4
 8004dbc:	441d      	add	r5, r3
 8004dbe:	4443      	add	r3, r8
 8004dc0:	461e      	mov	r6, r3
 8004dc2:	462c      	mov	r4, r5
 8004dc4:	4574      	cmp	r4, lr
 8004dc6:	d30e      	bcc.n	8004de6 <__mdiff+0xf2>
 8004dc8:	f10e 0103 	add.w	r1, lr, #3
 8004dcc:	1b49      	subs	r1, r1, r5
 8004dce:	f021 0103 	bic.w	r1, r1, #3
 8004dd2:	3d03      	subs	r5, #3
 8004dd4:	45ae      	cmp	lr, r5
 8004dd6:	bf38      	it	cc
 8004dd8:	2100      	movcc	r1, #0
 8004dda:	4419      	add	r1, r3
 8004ddc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004de0:	b18b      	cbz	r3, 8004e06 <__mdiff+0x112>
 8004de2:	6117      	str	r7, [r2, #16]
 8004de4:	e7a0      	b.n	8004d28 <__mdiff+0x34>
 8004de6:	f854 8b04 	ldr.w	r8, [r4], #4
 8004dea:	fa1f f188 	uxth.w	r1, r8
 8004dee:	4461      	add	r1, ip
 8004df0:	1408      	asrs	r0, r1, #16
 8004df2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004df6:	b289      	uxth	r1, r1
 8004df8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004dfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004e00:	f846 1b04 	str.w	r1, [r6], #4
 8004e04:	e7de      	b.n	8004dc4 <__mdiff+0xd0>
 8004e06:	3f01      	subs	r7, #1
 8004e08:	e7e8      	b.n	8004ddc <__mdiff+0xe8>
 8004e0a:	bf00      	nop
 8004e0c:	08005a87 	.word	0x08005a87
 8004e10:	08005af8 	.word	0x08005af8

08004e14 <__d2b>:
 8004e14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004e18:	2101      	movs	r1, #1
 8004e1a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004e1e:	4690      	mov	r8, r2
 8004e20:	461d      	mov	r5, r3
 8004e22:	f7ff fcd1 	bl	80047c8 <_Balloc>
 8004e26:	4604      	mov	r4, r0
 8004e28:	b930      	cbnz	r0, 8004e38 <__d2b+0x24>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	f240 310a 	movw	r1, #778	; 0x30a
 8004e30:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <__d2b+0xb0>)
 8004e32:	4825      	ldr	r0, [pc, #148]	; (8004ec8 <__d2b+0xb4>)
 8004e34:	f000 fb7c 	bl	8005530 <__assert_func>
 8004e38:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004e3c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004e40:	bb2d      	cbnz	r5, 8004e8e <__d2b+0x7a>
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	f1b8 0300 	subs.w	r3, r8, #0
 8004e48:	d026      	beq.n	8004e98 <__d2b+0x84>
 8004e4a:	4668      	mov	r0, sp
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	f7ff fd87 	bl	8004960 <__lo0bits>
 8004e52:	9900      	ldr	r1, [sp, #0]
 8004e54:	b1f0      	cbz	r0, 8004e94 <__d2b+0x80>
 8004e56:	9a01      	ldr	r2, [sp, #4]
 8004e58:	f1c0 0320 	rsb	r3, r0, #32
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	430b      	orrs	r3, r1
 8004e62:	40c2      	lsrs	r2, r0
 8004e64:	6163      	str	r3, [r4, #20]
 8004e66:	9201      	str	r2, [sp, #4]
 8004e68:	9b01      	ldr	r3, [sp, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bf14      	ite	ne
 8004e6e:	2102      	movne	r1, #2
 8004e70:	2101      	moveq	r1, #1
 8004e72:	61a3      	str	r3, [r4, #24]
 8004e74:	6121      	str	r1, [r4, #16]
 8004e76:	b1c5      	cbz	r5, 8004eaa <__d2b+0x96>
 8004e78:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004e7c:	4405      	add	r5, r0
 8004e7e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e82:	603d      	str	r5, [r7, #0]
 8004e84:	6030      	str	r0, [r6, #0]
 8004e86:	4620      	mov	r0, r4
 8004e88:	b002      	add	sp, #8
 8004e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e92:	e7d6      	b.n	8004e42 <__d2b+0x2e>
 8004e94:	6161      	str	r1, [r4, #20]
 8004e96:	e7e7      	b.n	8004e68 <__d2b+0x54>
 8004e98:	a801      	add	r0, sp, #4
 8004e9a:	f7ff fd61 	bl	8004960 <__lo0bits>
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	9b01      	ldr	r3, [sp, #4]
 8004ea2:	6121      	str	r1, [r4, #16]
 8004ea4:	6163      	str	r3, [r4, #20]
 8004ea6:	3020      	adds	r0, #32
 8004ea8:	e7e5      	b.n	8004e76 <__d2b+0x62>
 8004eaa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004eae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004eb2:	6038      	str	r0, [r7, #0]
 8004eb4:	6918      	ldr	r0, [r3, #16]
 8004eb6:	f7ff fd33 	bl	8004920 <__hi0bits>
 8004eba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004ebe:	6031      	str	r1, [r6, #0]
 8004ec0:	e7e1      	b.n	8004e86 <__d2b+0x72>
 8004ec2:	bf00      	nop
 8004ec4:	08005a87 	.word	0x08005a87
 8004ec8:	08005af8 	.word	0x08005af8

08004ecc <_calloc_r>:
 8004ecc:	b538      	push	{r3, r4, r5, lr}
 8004ece:	fb02 f501 	mul.w	r5, r2, r1
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	f000 f854 	bl	8004f80 <_malloc_r>
 8004ed8:	4604      	mov	r4, r0
 8004eda:	b118      	cbz	r0, 8004ee4 <_calloc_r+0x18>
 8004edc:	462a      	mov	r2, r5
 8004ede:	2100      	movs	r1, #0
 8004ee0:	f7fe f852 	bl	8002f88 <memset>
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}

08004ee8 <_free_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4605      	mov	r5, r0
 8004eec:	2900      	cmp	r1, #0
 8004eee:	d043      	beq.n	8004f78 <_free_r+0x90>
 8004ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef4:	1f0c      	subs	r4, r1, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bfb8      	it	lt
 8004efa:	18e4      	addlt	r4, r4, r3
 8004efc:	f000 fca2 	bl	8005844 <__malloc_lock>
 8004f00:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <_free_r+0x94>)
 8004f02:	6813      	ldr	r3, [r2, #0]
 8004f04:	4610      	mov	r0, r2
 8004f06:	b933      	cbnz	r3, 8004f16 <_free_r+0x2e>
 8004f08:	6063      	str	r3, [r4, #4]
 8004f0a:	6014      	str	r4, [r2, #0]
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f12:	f000 bc9d 	b.w	8005850 <__malloc_unlock>
 8004f16:	42a3      	cmp	r3, r4
 8004f18:	d90a      	bls.n	8004f30 <_free_r+0x48>
 8004f1a:	6821      	ldr	r1, [r4, #0]
 8004f1c:	1862      	adds	r2, r4, r1
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	bf01      	itttt	eq
 8004f22:	681a      	ldreq	r2, [r3, #0]
 8004f24:	685b      	ldreq	r3, [r3, #4]
 8004f26:	1852      	addeq	r2, r2, r1
 8004f28:	6022      	streq	r2, [r4, #0]
 8004f2a:	6063      	str	r3, [r4, #4]
 8004f2c:	6004      	str	r4, [r0, #0]
 8004f2e:	e7ed      	b.n	8004f0c <_free_r+0x24>
 8004f30:	461a      	mov	r2, r3
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	b10b      	cbz	r3, 8004f3a <_free_r+0x52>
 8004f36:	42a3      	cmp	r3, r4
 8004f38:	d9fa      	bls.n	8004f30 <_free_r+0x48>
 8004f3a:	6811      	ldr	r1, [r2, #0]
 8004f3c:	1850      	adds	r0, r2, r1
 8004f3e:	42a0      	cmp	r0, r4
 8004f40:	d10b      	bne.n	8004f5a <_free_r+0x72>
 8004f42:	6820      	ldr	r0, [r4, #0]
 8004f44:	4401      	add	r1, r0
 8004f46:	1850      	adds	r0, r2, r1
 8004f48:	4283      	cmp	r3, r0
 8004f4a:	6011      	str	r1, [r2, #0]
 8004f4c:	d1de      	bne.n	8004f0c <_free_r+0x24>
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4401      	add	r1, r0
 8004f54:	6011      	str	r1, [r2, #0]
 8004f56:	6053      	str	r3, [r2, #4]
 8004f58:	e7d8      	b.n	8004f0c <_free_r+0x24>
 8004f5a:	d902      	bls.n	8004f62 <_free_r+0x7a>
 8004f5c:	230c      	movs	r3, #12
 8004f5e:	602b      	str	r3, [r5, #0]
 8004f60:	e7d4      	b.n	8004f0c <_free_r+0x24>
 8004f62:	6820      	ldr	r0, [r4, #0]
 8004f64:	1821      	adds	r1, r4, r0
 8004f66:	428b      	cmp	r3, r1
 8004f68:	bf01      	itttt	eq
 8004f6a:	6819      	ldreq	r1, [r3, #0]
 8004f6c:	685b      	ldreq	r3, [r3, #4]
 8004f6e:	1809      	addeq	r1, r1, r0
 8004f70:	6021      	streq	r1, [r4, #0]
 8004f72:	6063      	str	r3, [r4, #4]
 8004f74:	6054      	str	r4, [r2, #4]
 8004f76:	e7c9      	b.n	8004f0c <_free_r+0x24>
 8004f78:	bd38      	pop	{r3, r4, r5, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000200 	.word	0x20000200

08004f80 <_malloc_r>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	1ccd      	adds	r5, r1, #3
 8004f84:	f025 0503 	bic.w	r5, r5, #3
 8004f88:	3508      	adds	r5, #8
 8004f8a:	2d0c      	cmp	r5, #12
 8004f8c:	bf38      	it	cc
 8004f8e:	250c      	movcc	r5, #12
 8004f90:	2d00      	cmp	r5, #0
 8004f92:	4606      	mov	r6, r0
 8004f94:	db01      	blt.n	8004f9a <_malloc_r+0x1a>
 8004f96:	42a9      	cmp	r1, r5
 8004f98:	d903      	bls.n	8004fa2 <_malloc_r+0x22>
 8004f9a:	230c      	movs	r3, #12
 8004f9c:	6033      	str	r3, [r6, #0]
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa2:	f000 fc4f 	bl	8005844 <__malloc_lock>
 8004fa6:	4921      	ldr	r1, [pc, #132]	; (800502c <_malloc_r+0xac>)
 8004fa8:	680a      	ldr	r2, [r1, #0]
 8004faa:	4614      	mov	r4, r2
 8004fac:	b99c      	cbnz	r4, 8004fd6 <_malloc_r+0x56>
 8004fae:	4f20      	ldr	r7, [pc, #128]	; (8005030 <_malloc_r+0xb0>)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	b923      	cbnz	r3, 8004fbe <_malloc_r+0x3e>
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f000 f994 	bl	80052e4 <_sbrk_r>
 8004fbc:	6038      	str	r0, [r7, #0]
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	f000 f98f 	bl	80052e4 <_sbrk_r>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	d123      	bne.n	8005012 <_malloc_r+0x92>
 8004fca:	230c      	movs	r3, #12
 8004fcc:	4630      	mov	r0, r6
 8004fce:	6033      	str	r3, [r6, #0]
 8004fd0:	f000 fc3e 	bl	8005850 <__malloc_unlock>
 8004fd4:	e7e3      	b.n	8004f9e <_malloc_r+0x1e>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	1b5b      	subs	r3, r3, r5
 8004fda:	d417      	bmi.n	800500c <_malloc_r+0x8c>
 8004fdc:	2b0b      	cmp	r3, #11
 8004fde:	d903      	bls.n	8004fe8 <_malloc_r+0x68>
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	441c      	add	r4, r3
 8004fe4:	6025      	str	r5, [r4, #0]
 8004fe6:	e004      	b.n	8004ff2 <_malloc_r+0x72>
 8004fe8:	6863      	ldr	r3, [r4, #4]
 8004fea:	42a2      	cmp	r2, r4
 8004fec:	bf0c      	ite	eq
 8004fee:	600b      	streq	r3, [r1, #0]
 8004ff0:	6053      	strne	r3, [r2, #4]
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f000 fc2c 	bl	8005850 <__malloc_unlock>
 8004ff8:	f104 000b 	add.w	r0, r4, #11
 8004ffc:	1d23      	adds	r3, r4, #4
 8004ffe:	f020 0007 	bic.w	r0, r0, #7
 8005002:	1ac2      	subs	r2, r0, r3
 8005004:	d0cc      	beq.n	8004fa0 <_malloc_r+0x20>
 8005006:	1a1b      	subs	r3, r3, r0
 8005008:	50a3      	str	r3, [r4, r2]
 800500a:	e7c9      	b.n	8004fa0 <_malloc_r+0x20>
 800500c:	4622      	mov	r2, r4
 800500e:	6864      	ldr	r4, [r4, #4]
 8005010:	e7cc      	b.n	8004fac <_malloc_r+0x2c>
 8005012:	1cc4      	adds	r4, r0, #3
 8005014:	f024 0403 	bic.w	r4, r4, #3
 8005018:	42a0      	cmp	r0, r4
 800501a:	d0e3      	beq.n	8004fe4 <_malloc_r+0x64>
 800501c:	1a21      	subs	r1, r4, r0
 800501e:	4630      	mov	r0, r6
 8005020:	f000 f960 	bl	80052e4 <_sbrk_r>
 8005024:	3001      	adds	r0, #1
 8005026:	d1dd      	bne.n	8004fe4 <_malloc_r+0x64>
 8005028:	e7cf      	b.n	8004fca <_malloc_r+0x4a>
 800502a:	bf00      	nop
 800502c:	20000200 	.word	0x20000200
 8005030:	20000204 	.word	0x20000204

08005034 <__sfputc_r>:
 8005034:	6893      	ldr	r3, [r2, #8]
 8005036:	b410      	push	{r4}
 8005038:	3b01      	subs	r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	6093      	str	r3, [r2, #8]
 800503e:	da07      	bge.n	8005050 <__sfputc_r+0x1c>
 8005040:	6994      	ldr	r4, [r2, #24]
 8005042:	42a3      	cmp	r3, r4
 8005044:	db01      	blt.n	800504a <__sfputc_r+0x16>
 8005046:	290a      	cmp	r1, #10
 8005048:	d102      	bne.n	8005050 <__sfputc_r+0x1c>
 800504a:	bc10      	pop	{r4}
 800504c:	f000 b99e 	b.w	800538c <__swbuf_r>
 8005050:	6813      	ldr	r3, [r2, #0]
 8005052:	1c58      	adds	r0, r3, #1
 8005054:	6010      	str	r0, [r2, #0]
 8005056:	7019      	strb	r1, [r3, #0]
 8005058:	4608      	mov	r0, r1
 800505a:	bc10      	pop	{r4}
 800505c:	4770      	bx	lr

0800505e <__sfputs_r>:
 800505e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005060:	4606      	mov	r6, r0
 8005062:	460f      	mov	r7, r1
 8005064:	4614      	mov	r4, r2
 8005066:	18d5      	adds	r5, r2, r3
 8005068:	42ac      	cmp	r4, r5
 800506a:	d101      	bne.n	8005070 <__sfputs_r+0x12>
 800506c:	2000      	movs	r0, #0
 800506e:	e007      	b.n	8005080 <__sfputs_r+0x22>
 8005070:	463a      	mov	r2, r7
 8005072:	4630      	mov	r0, r6
 8005074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005078:	f7ff ffdc 	bl	8005034 <__sfputc_r>
 800507c:	1c43      	adds	r3, r0, #1
 800507e:	d1f3      	bne.n	8005068 <__sfputs_r+0xa>
 8005080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005084 <_vfiprintf_r>:
 8005084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005088:	460d      	mov	r5, r1
 800508a:	4614      	mov	r4, r2
 800508c:	4698      	mov	r8, r3
 800508e:	4606      	mov	r6, r0
 8005090:	b09d      	sub	sp, #116	; 0x74
 8005092:	b118      	cbz	r0, 800509c <_vfiprintf_r+0x18>
 8005094:	6983      	ldr	r3, [r0, #24]
 8005096:	b90b      	cbnz	r3, 800509c <_vfiprintf_r+0x18>
 8005098:	f7ff facc 	bl	8004634 <__sinit>
 800509c:	4b89      	ldr	r3, [pc, #548]	; (80052c4 <_vfiprintf_r+0x240>)
 800509e:	429d      	cmp	r5, r3
 80050a0:	d11b      	bne.n	80050da <_vfiprintf_r+0x56>
 80050a2:	6875      	ldr	r5, [r6, #4]
 80050a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050a6:	07d9      	lsls	r1, r3, #31
 80050a8:	d405      	bmi.n	80050b6 <_vfiprintf_r+0x32>
 80050aa:	89ab      	ldrh	r3, [r5, #12]
 80050ac:	059a      	lsls	r2, r3, #22
 80050ae:	d402      	bmi.n	80050b6 <_vfiprintf_r+0x32>
 80050b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050b2:	f7ff fb62 	bl	800477a <__retarget_lock_acquire_recursive>
 80050b6:	89ab      	ldrh	r3, [r5, #12]
 80050b8:	071b      	lsls	r3, r3, #28
 80050ba:	d501      	bpl.n	80050c0 <_vfiprintf_r+0x3c>
 80050bc:	692b      	ldr	r3, [r5, #16]
 80050be:	b9eb      	cbnz	r3, 80050fc <_vfiprintf_r+0x78>
 80050c0:	4629      	mov	r1, r5
 80050c2:	4630      	mov	r0, r6
 80050c4:	f000 f9c6 	bl	8005454 <__swsetup_r>
 80050c8:	b1c0      	cbz	r0, 80050fc <_vfiprintf_r+0x78>
 80050ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050cc:	07dc      	lsls	r4, r3, #31
 80050ce:	d50e      	bpl.n	80050ee <_vfiprintf_r+0x6a>
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050d4:	b01d      	add	sp, #116	; 0x74
 80050d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050da:	4b7b      	ldr	r3, [pc, #492]	; (80052c8 <_vfiprintf_r+0x244>)
 80050dc:	429d      	cmp	r5, r3
 80050de:	d101      	bne.n	80050e4 <_vfiprintf_r+0x60>
 80050e0:	68b5      	ldr	r5, [r6, #8]
 80050e2:	e7df      	b.n	80050a4 <_vfiprintf_r+0x20>
 80050e4:	4b79      	ldr	r3, [pc, #484]	; (80052cc <_vfiprintf_r+0x248>)
 80050e6:	429d      	cmp	r5, r3
 80050e8:	bf08      	it	eq
 80050ea:	68f5      	ldreq	r5, [r6, #12]
 80050ec:	e7da      	b.n	80050a4 <_vfiprintf_r+0x20>
 80050ee:	89ab      	ldrh	r3, [r5, #12]
 80050f0:	0598      	lsls	r0, r3, #22
 80050f2:	d4ed      	bmi.n	80050d0 <_vfiprintf_r+0x4c>
 80050f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050f6:	f7ff fb41 	bl	800477c <__retarget_lock_release_recursive>
 80050fa:	e7e9      	b.n	80050d0 <_vfiprintf_r+0x4c>
 80050fc:	2300      	movs	r3, #0
 80050fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005100:	2320      	movs	r3, #32
 8005102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005106:	2330      	movs	r3, #48	; 0x30
 8005108:	f04f 0901 	mov.w	r9, #1
 800510c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005110:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80052d0 <_vfiprintf_r+0x24c>
 8005114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005118:	4623      	mov	r3, r4
 800511a:	469a      	mov	sl, r3
 800511c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005120:	b10a      	cbz	r2, 8005126 <_vfiprintf_r+0xa2>
 8005122:	2a25      	cmp	r2, #37	; 0x25
 8005124:	d1f9      	bne.n	800511a <_vfiprintf_r+0x96>
 8005126:	ebba 0b04 	subs.w	fp, sl, r4
 800512a:	d00b      	beq.n	8005144 <_vfiprintf_r+0xc0>
 800512c:	465b      	mov	r3, fp
 800512e:	4622      	mov	r2, r4
 8005130:	4629      	mov	r1, r5
 8005132:	4630      	mov	r0, r6
 8005134:	f7ff ff93 	bl	800505e <__sfputs_r>
 8005138:	3001      	adds	r0, #1
 800513a:	f000 80aa 	beq.w	8005292 <_vfiprintf_r+0x20e>
 800513e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005140:	445a      	add	r2, fp
 8005142:	9209      	str	r2, [sp, #36]	; 0x24
 8005144:	f89a 3000 	ldrb.w	r3, [sl]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80a2 	beq.w	8005292 <_vfiprintf_r+0x20e>
 800514e:	2300      	movs	r3, #0
 8005150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005158:	f10a 0a01 	add.w	sl, sl, #1
 800515c:	9304      	str	r3, [sp, #16]
 800515e:	9307      	str	r3, [sp, #28]
 8005160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005164:	931a      	str	r3, [sp, #104]	; 0x68
 8005166:	4654      	mov	r4, sl
 8005168:	2205      	movs	r2, #5
 800516a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800516e:	4858      	ldr	r0, [pc, #352]	; (80052d0 <_vfiprintf_r+0x24c>)
 8005170:	f7ff fb0e 	bl	8004790 <memchr>
 8005174:	9a04      	ldr	r2, [sp, #16]
 8005176:	b9d8      	cbnz	r0, 80051b0 <_vfiprintf_r+0x12c>
 8005178:	06d1      	lsls	r1, r2, #27
 800517a:	bf44      	itt	mi
 800517c:	2320      	movmi	r3, #32
 800517e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005182:	0713      	lsls	r3, r2, #28
 8005184:	bf44      	itt	mi
 8005186:	232b      	movmi	r3, #43	; 0x2b
 8005188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800518c:	f89a 3000 	ldrb.w	r3, [sl]
 8005190:	2b2a      	cmp	r3, #42	; 0x2a
 8005192:	d015      	beq.n	80051c0 <_vfiprintf_r+0x13c>
 8005194:	4654      	mov	r4, sl
 8005196:	2000      	movs	r0, #0
 8005198:	f04f 0c0a 	mov.w	ip, #10
 800519c:	9a07      	ldr	r2, [sp, #28]
 800519e:	4621      	mov	r1, r4
 80051a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051a4:	3b30      	subs	r3, #48	; 0x30
 80051a6:	2b09      	cmp	r3, #9
 80051a8:	d94e      	bls.n	8005248 <_vfiprintf_r+0x1c4>
 80051aa:	b1b0      	cbz	r0, 80051da <_vfiprintf_r+0x156>
 80051ac:	9207      	str	r2, [sp, #28]
 80051ae:	e014      	b.n	80051da <_vfiprintf_r+0x156>
 80051b0:	eba0 0308 	sub.w	r3, r0, r8
 80051b4:	fa09 f303 	lsl.w	r3, r9, r3
 80051b8:	4313      	orrs	r3, r2
 80051ba:	46a2      	mov	sl, r4
 80051bc:	9304      	str	r3, [sp, #16]
 80051be:	e7d2      	b.n	8005166 <_vfiprintf_r+0xe2>
 80051c0:	9b03      	ldr	r3, [sp, #12]
 80051c2:	1d19      	adds	r1, r3, #4
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	9103      	str	r1, [sp, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bfbb      	ittet	lt
 80051cc:	425b      	neglt	r3, r3
 80051ce:	f042 0202 	orrlt.w	r2, r2, #2
 80051d2:	9307      	strge	r3, [sp, #28]
 80051d4:	9307      	strlt	r3, [sp, #28]
 80051d6:	bfb8      	it	lt
 80051d8:	9204      	strlt	r2, [sp, #16]
 80051da:	7823      	ldrb	r3, [r4, #0]
 80051dc:	2b2e      	cmp	r3, #46	; 0x2e
 80051de:	d10c      	bne.n	80051fa <_vfiprintf_r+0x176>
 80051e0:	7863      	ldrb	r3, [r4, #1]
 80051e2:	2b2a      	cmp	r3, #42	; 0x2a
 80051e4:	d135      	bne.n	8005252 <_vfiprintf_r+0x1ce>
 80051e6:	9b03      	ldr	r3, [sp, #12]
 80051e8:	3402      	adds	r4, #2
 80051ea:	1d1a      	adds	r2, r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	9203      	str	r2, [sp, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bfb8      	it	lt
 80051f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80051f8:	9305      	str	r3, [sp, #20]
 80051fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80052e0 <_vfiprintf_r+0x25c>
 80051fe:	2203      	movs	r2, #3
 8005200:	4650      	mov	r0, sl
 8005202:	7821      	ldrb	r1, [r4, #0]
 8005204:	f7ff fac4 	bl	8004790 <memchr>
 8005208:	b140      	cbz	r0, 800521c <_vfiprintf_r+0x198>
 800520a:	2340      	movs	r3, #64	; 0x40
 800520c:	eba0 000a 	sub.w	r0, r0, sl
 8005210:	fa03 f000 	lsl.w	r0, r3, r0
 8005214:	9b04      	ldr	r3, [sp, #16]
 8005216:	3401      	adds	r4, #1
 8005218:	4303      	orrs	r3, r0
 800521a:	9304      	str	r3, [sp, #16]
 800521c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005220:	2206      	movs	r2, #6
 8005222:	482c      	ldr	r0, [pc, #176]	; (80052d4 <_vfiprintf_r+0x250>)
 8005224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005228:	f7ff fab2 	bl	8004790 <memchr>
 800522c:	2800      	cmp	r0, #0
 800522e:	d03f      	beq.n	80052b0 <_vfiprintf_r+0x22c>
 8005230:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <_vfiprintf_r+0x254>)
 8005232:	bb1b      	cbnz	r3, 800527c <_vfiprintf_r+0x1f8>
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	3307      	adds	r3, #7
 8005238:	f023 0307 	bic.w	r3, r3, #7
 800523c:	3308      	adds	r3, #8
 800523e:	9303      	str	r3, [sp, #12]
 8005240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005242:	443b      	add	r3, r7
 8005244:	9309      	str	r3, [sp, #36]	; 0x24
 8005246:	e767      	b.n	8005118 <_vfiprintf_r+0x94>
 8005248:	460c      	mov	r4, r1
 800524a:	2001      	movs	r0, #1
 800524c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005250:	e7a5      	b.n	800519e <_vfiprintf_r+0x11a>
 8005252:	2300      	movs	r3, #0
 8005254:	f04f 0c0a 	mov.w	ip, #10
 8005258:	4619      	mov	r1, r3
 800525a:	3401      	adds	r4, #1
 800525c:	9305      	str	r3, [sp, #20]
 800525e:	4620      	mov	r0, r4
 8005260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005264:	3a30      	subs	r2, #48	; 0x30
 8005266:	2a09      	cmp	r2, #9
 8005268:	d903      	bls.n	8005272 <_vfiprintf_r+0x1ee>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0c5      	beq.n	80051fa <_vfiprintf_r+0x176>
 800526e:	9105      	str	r1, [sp, #20]
 8005270:	e7c3      	b.n	80051fa <_vfiprintf_r+0x176>
 8005272:	4604      	mov	r4, r0
 8005274:	2301      	movs	r3, #1
 8005276:	fb0c 2101 	mla	r1, ip, r1, r2
 800527a:	e7f0      	b.n	800525e <_vfiprintf_r+0x1da>
 800527c:	ab03      	add	r3, sp, #12
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	462a      	mov	r2, r5
 8005282:	4630      	mov	r0, r6
 8005284:	4b15      	ldr	r3, [pc, #84]	; (80052dc <_vfiprintf_r+0x258>)
 8005286:	a904      	add	r1, sp, #16
 8005288:	f7fd ff24 	bl	80030d4 <_printf_float>
 800528c:	4607      	mov	r7, r0
 800528e:	1c78      	adds	r0, r7, #1
 8005290:	d1d6      	bne.n	8005240 <_vfiprintf_r+0x1bc>
 8005292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005294:	07d9      	lsls	r1, r3, #31
 8005296:	d405      	bmi.n	80052a4 <_vfiprintf_r+0x220>
 8005298:	89ab      	ldrh	r3, [r5, #12]
 800529a:	059a      	lsls	r2, r3, #22
 800529c:	d402      	bmi.n	80052a4 <_vfiprintf_r+0x220>
 800529e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052a0:	f7ff fa6c 	bl	800477c <__retarget_lock_release_recursive>
 80052a4:	89ab      	ldrh	r3, [r5, #12]
 80052a6:	065b      	lsls	r3, r3, #25
 80052a8:	f53f af12 	bmi.w	80050d0 <_vfiprintf_r+0x4c>
 80052ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052ae:	e711      	b.n	80050d4 <_vfiprintf_r+0x50>
 80052b0:	ab03      	add	r3, sp, #12
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	462a      	mov	r2, r5
 80052b6:	4630      	mov	r0, r6
 80052b8:	4b08      	ldr	r3, [pc, #32]	; (80052dc <_vfiprintf_r+0x258>)
 80052ba:	a904      	add	r1, sp, #16
 80052bc:	f7fe f9a6 	bl	800360c <_printf_i>
 80052c0:	e7e4      	b.n	800528c <_vfiprintf_r+0x208>
 80052c2:	bf00      	nop
 80052c4:	08005ab8 	.word	0x08005ab8
 80052c8:	08005ad8 	.word	0x08005ad8
 80052cc:	08005a98 	.word	0x08005a98
 80052d0:	08005c54 	.word	0x08005c54
 80052d4:	08005c5e 	.word	0x08005c5e
 80052d8:	080030d5 	.word	0x080030d5
 80052dc:	0800505f 	.word	0x0800505f
 80052e0:	08005c5a 	.word	0x08005c5a

080052e4 <_sbrk_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	2300      	movs	r3, #0
 80052e8:	4d05      	ldr	r5, [pc, #20]	; (8005300 <_sbrk_r+0x1c>)
 80052ea:	4604      	mov	r4, r0
 80052ec:	4608      	mov	r0, r1
 80052ee:	602b      	str	r3, [r5, #0]
 80052f0:	f7fb fe5c 	bl	8000fac <_sbrk>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	d102      	bne.n	80052fe <_sbrk_r+0x1a>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	b103      	cbz	r3, 80052fe <_sbrk_r+0x1a>
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
 8005300:	200002ac 	.word	0x200002ac

08005304 <__sread>:
 8005304:	b510      	push	{r4, lr}
 8005306:	460c      	mov	r4, r1
 8005308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530c:	f000 faa6 	bl	800585c <_read_r>
 8005310:	2800      	cmp	r0, #0
 8005312:	bfab      	itete	ge
 8005314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005316:	89a3      	ldrhlt	r3, [r4, #12]
 8005318:	181b      	addge	r3, r3, r0
 800531a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800531e:	bfac      	ite	ge
 8005320:	6563      	strge	r3, [r4, #84]	; 0x54
 8005322:	81a3      	strhlt	r3, [r4, #12]
 8005324:	bd10      	pop	{r4, pc}

08005326 <__swrite>:
 8005326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800532a:	461f      	mov	r7, r3
 800532c:	898b      	ldrh	r3, [r1, #12]
 800532e:	4605      	mov	r5, r0
 8005330:	05db      	lsls	r3, r3, #23
 8005332:	460c      	mov	r4, r1
 8005334:	4616      	mov	r6, r2
 8005336:	d505      	bpl.n	8005344 <__swrite+0x1e>
 8005338:	2302      	movs	r3, #2
 800533a:	2200      	movs	r2, #0
 800533c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005340:	f000 f9f8 	bl	8005734 <_lseek_r>
 8005344:	89a3      	ldrh	r3, [r4, #12]
 8005346:	4632      	mov	r2, r6
 8005348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800534c:	81a3      	strh	r3, [r4, #12]
 800534e:	4628      	mov	r0, r5
 8005350:	463b      	mov	r3, r7
 8005352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800535a:	f000 b869 	b.w	8005430 <_write_r>

0800535e <__sseek>:
 800535e:	b510      	push	{r4, lr}
 8005360:	460c      	mov	r4, r1
 8005362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005366:	f000 f9e5 	bl	8005734 <_lseek_r>
 800536a:	1c43      	adds	r3, r0, #1
 800536c:	89a3      	ldrh	r3, [r4, #12]
 800536e:	bf15      	itete	ne
 8005370:	6560      	strne	r0, [r4, #84]	; 0x54
 8005372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800537a:	81a3      	strheq	r3, [r4, #12]
 800537c:	bf18      	it	ne
 800537e:	81a3      	strhne	r3, [r4, #12]
 8005380:	bd10      	pop	{r4, pc}

08005382 <__sclose>:
 8005382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005386:	f000 b8f1 	b.w	800556c <_close_r>
	...

0800538c <__swbuf_r>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	460e      	mov	r6, r1
 8005390:	4614      	mov	r4, r2
 8005392:	4605      	mov	r5, r0
 8005394:	b118      	cbz	r0, 800539e <__swbuf_r+0x12>
 8005396:	6983      	ldr	r3, [r0, #24]
 8005398:	b90b      	cbnz	r3, 800539e <__swbuf_r+0x12>
 800539a:	f7ff f94b 	bl	8004634 <__sinit>
 800539e:	4b21      	ldr	r3, [pc, #132]	; (8005424 <__swbuf_r+0x98>)
 80053a0:	429c      	cmp	r4, r3
 80053a2:	d12b      	bne.n	80053fc <__swbuf_r+0x70>
 80053a4:	686c      	ldr	r4, [r5, #4]
 80053a6:	69a3      	ldr	r3, [r4, #24]
 80053a8:	60a3      	str	r3, [r4, #8]
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	071a      	lsls	r2, r3, #28
 80053ae:	d52f      	bpl.n	8005410 <__swbuf_r+0x84>
 80053b0:	6923      	ldr	r3, [r4, #16]
 80053b2:	b36b      	cbz	r3, 8005410 <__swbuf_r+0x84>
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	6820      	ldr	r0, [r4, #0]
 80053b8:	b2f6      	uxtb	r6, r6
 80053ba:	1ac0      	subs	r0, r0, r3
 80053bc:	6963      	ldr	r3, [r4, #20]
 80053be:	4637      	mov	r7, r6
 80053c0:	4283      	cmp	r3, r0
 80053c2:	dc04      	bgt.n	80053ce <__swbuf_r+0x42>
 80053c4:	4621      	mov	r1, r4
 80053c6:	4628      	mov	r0, r5
 80053c8:	f000 f966 	bl	8005698 <_fflush_r>
 80053cc:	bb30      	cbnz	r0, 800541c <__swbuf_r+0x90>
 80053ce:	68a3      	ldr	r3, [r4, #8]
 80053d0:	3001      	adds	r0, #1
 80053d2:	3b01      	subs	r3, #1
 80053d4:	60a3      	str	r3, [r4, #8]
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	6022      	str	r2, [r4, #0]
 80053dc:	701e      	strb	r6, [r3, #0]
 80053de:	6963      	ldr	r3, [r4, #20]
 80053e0:	4283      	cmp	r3, r0
 80053e2:	d004      	beq.n	80053ee <__swbuf_r+0x62>
 80053e4:	89a3      	ldrh	r3, [r4, #12]
 80053e6:	07db      	lsls	r3, r3, #31
 80053e8:	d506      	bpl.n	80053f8 <__swbuf_r+0x6c>
 80053ea:	2e0a      	cmp	r6, #10
 80053ec:	d104      	bne.n	80053f8 <__swbuf_r+0x6c>
 80053ee:	4621      	mov	r1, r4
 80053f0:	4628      	mov	r0, r5
 80053f2:	f000 f951 	bl	8005698 <_fflush_r>
 80053f6:	b988      	cbnz	r0, 800541c <__swbuf_r+0x90>
 80053f8:	4638      	mov	r0, r7
 80053fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053fc:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <__swbuf_r+0x9c>)
 80053fe:	429c      	cmp	r4, r3
 8005400:	d101      	bne.n	8005406 <__swbuf_r+0x7a>
 8005402:	68ac      	ldr	r4, [r5, #8]
 8005404:	e7cf      	b.n	80053a6 <__swbuf_r+0x1a>
 8005406:	4b09      	ldr	r3, [pc, #36]	; (800542c <__swbuf_r+0xa0>)
 8005408:	429c      	cmp	r4, r3
 800540a:	bf08      	it	eq
 800540c:	68ec      	ldreq	r4, [r5, #12]
 800540e:	e7ca      	b.n	80053a6 <__swbuf_r+0x1a>
 8005410:	4621      	mov	r1, r4
 8005412:	4628      	mov	r0, r5
 8005414:	f000 f81e 	bl	8005454 <__swsetup_r>
 8005418:	2800      	cmp	r0, #0
 800541a:	d0cb      	beq.n	80053b4 <__swbuf_r+0x28>
 800541c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005420:	e7ea      	b.n	80053f8 <__swbuf_r+0x6c>
 8005422:	bf00      	nop
 8005424:	08005ab8 	.word	0x08005ab8
 8005428:	08005ad8 	.word	0x08005ad8
 800542c:	08005a98 	.word	0x08005a98

08005430 <_write_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4604      	mov	r4, r0
 8005434:	4608      	mov	r0, r1
 8005436:	4611      	mov	r1, r2
 8005438:	2200      	movs	r2, #0
 800543a:	4d05      	ldr	r5, [pc, #20]	; (8005450 <_write_r+0x20>)
 800543c:	602a      	str	r2, [r5, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f7fb fd68 	bl	8000f14 <_write>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_write_r+0x1e>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_write_r+0x1e>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	200002ac 	.word	0x200002ac

08005454 <__swsetup_r>:
 8005454:	4b32      	ldr	r3, [pc, #200]	; (8005520 <__swsetup_r+0xcc>)
 8005456:	b570      	push	{r4, r5, r6, lr}
 8005458:	681d      	ldr	r5, [r3, #0]
 800545a:	4606      	mov	r6, r0
 800545c:	460c      	mov	r4, r1
 800545e:	b125      	cbz	r5, 800546a <__swsetup_r+0x16>
 8005460:	69ab      	ldr	r3, [r5, #24]
 8005462:	b913      	cbnz	r3, 800546a <__swsetup_r+0x16>
 8005464:	4628      	mov	r0, r5
 8005466:	f7ff f8e5 	bl	8004634 <__sinit>
 800546a:	4b2e      	ldr	r3, [pc, #184]	; (8005524 <__swsetup_r+0xd0>)
 800546c:	429c      	cmp	r4, r3
 800546e:	d10f      	bne.n	8005490 <__swsetup_r+0x3c>
 8005470:	686c      	ldr	r4, [r5, #4]
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005478:	0719      	lsls	r1, r3, #28
 800547a:	d42c      	bmi.n	80054d6 <__swsetup_r+0x82>
 800547c:	06dd      	lsls	r5, r3, #27
 800547e:	d411      	bmi.n	80054a4 <__swsetup_r+0x50>
 8005480:	2309      	movs	r3, #9
 8005482:	6033      	str	r3, [r6, #0]
 8005484:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	e03e      	b.n	800550e <__swsetup_r+0xba>
 8005490:	4b25      	ldr	r3, [pc, #148]	; (8005528 <__swsetup_r+0xd4>)
 8005492:	429c      	cmp	r4, r3
 8005494:	d101      	bne.n	800549a <__swsetup_r+0x46>
 8005496:	68ac      	ldr	r4, [r5, #8]
 8005498:	e7eb      	b.n	8005472 <__swsetup_r+0x1e>
 800549a:	4b24      	ldr	r3, [pc, #144]	; (800552c <__swsetup_r+0xd8>)
 800549c:	429c      	cmp	r4, r3
 800549e:	bf08      	it	eq
 80054a0:	68ec      	ldreq	r4, [r5, #12]
 80054a2:	e7e6      	b.n	8005472 <__swsetup_r+0x1e>
 80054a4:	0758      	lsls	r0, r3, #29
 80054a6:	d512      	bpl.n	80054ce <__swsetup_r+0x7a>
 80054a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054aa:	b141      	cbz	r1, 80054be <__swsetup_r+0x6a>
 80054ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054b0:	4299      	cmp	r1, r3
 80054b2:	d002      	beq.n	80054ba <__swsetup_r+0x66>
 80054b4:	4630      	mov	r0, r6
 80054b6:	f7ff fd17 	bl	8004ee8 <_free_r>
 80054ba:	2300      	movs	r3, #0
 80054bc:	6363      	str	r3, [r4, #52]	; 0x34
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054c4:	81a3      	strh	r3, [r4, #12]
 80054c6:	2300      	movs	r3, #0
 80054c8:	6063      	str	r3, [r4, #4]
 80054ca:	6923      	ldr	r3, [r4, #16]
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	89a3      	ldrh	r3, [r4, #12]
 80054d0:	f043 0308 	orr.w	r3, r3, #8
 80054d4:	81a3      	strh	r3, [r4, #12]
 80054d6:	6923      	ldr	r3, [r4, #16]
 80054d8:	b94b      	cbnz	r3, 80054ee <__swsetup_r+0x9a>
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e4:	d003      	beq.n	80054ee <__swsetup_r+0x9a>
 80054e6:	4621      	mov	r1, r4
 80054e8:	4630      	mov	r0, r6
 80054ea:	f000 f959 	bl	80057a0 <__smakebuf_r>
 80054ee:	89a0      	ldrh	r0, [r4, #12]
 80054f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054f4:	f010 0301 	ands.w	r3, r0, #1
 80054f8:	d00a      	beq.n	8005510 <__swsetup_r+0xbc>
 80054fa:	2300      	movs	r3, #0
 80054fc:	60a3      	str	r3, [r4, #8]
 80054fe:	6963      	ldr	r3, [r4, #20]
 8005500:	425b      	negs	r3, r3
 8005502:	61a3      	str	r3, [r4, #24]
 8005504:	6923      	ldr	r3, [r4, #16]
 8005506:	b943      	cbnz	r3, 800551a <__swsetup_r+0xc6>
 8005508:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800550c:	d1ba      	bne.n	8005484 <__swsetup_r+0x30>
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	0781      	lsls	r1, r0, #30
 8005512:	bf58      	it	pl
 8005514:	6963      	ldrpl	r3, [r4, #20]
 8005516:	60a3      	str	r3, [r4, #8]
 8005518:	e7f4      	b.n	8005504 <__swsetup_r+0xb0>
 800551a:	2000      	movs	r0, #0
 800551c:	e7f7      	b.n	800550e <__swsetup_r+0xba>
 800551e:	bf00      	nop
 8005520:	20000010 	.word	0x20000010
 8005524:	08005ab8 	.word	0x08005ab8
 8005528:	08005ad8 	.word	0x08005ad8
 800552c:	08005a98 	.word	0x08005a98

08005530 <__assert_func>:
 8005530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005532:	4614      	mov	r4, r2
 8005534:	461a      	mov	r2, r3
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <__assert_func+0x2c>)
 8005538:	4605      	mov	r5, r0
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68d8      	ldr	r0, [r3, #12]
 800553e:	b14c      	cbz	r4, 8005554 <__assert_func+0x24>
 8005540:	4b07      	ldr	r3, [pc, #28]	; (8005560 <__assert_func+0x30>)
 8005542:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005546:	9100      	str	r1, [sp, #0]
 8005548:	462b      	mov	r3, r5
 800554a:	4906      	ldr	r1, [pc, #24]	; (8005564 <__assert_func+0x34>)
 800554c:	f000 f8e0 	bl	8005710 <fiprintf>
 8005550:	f000 f9a3 	bl	800589a <abort>
 8005554:	4b04      	ldr	r3, [pc, #16]	; (8005568 <__assert_func+0x38>)
 8005556:	461c      	mov	r4, r3
 8005558:	e7f3      	b.n	8005542 <__assert_func+0x12>
 800555a:	bf00      	nop
 800555c:	20000010 	.word	0x20000010
 8005560:	08005c65 	.word	0x08005c65
 8005564:	08005c72 	.word	0x08005c72
 8005568:	08005ca0 	.word	0x08005ca0

0800556c <_close_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	2300      	movs	r3, #0
 8005570:	4d05      	ldr	r5, [pc, #20]	; (8005588 <_close_r+0x1c>)
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	602b      	str	r3, [r5, #0]
 8005578:	f7fb fce8 	bl	8000f4c <_close>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d102      	bne.n	8005586 <_close_r+0x1a>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	b103      	cbz	r3, 8005586 <_close_r+0x1a>
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	200002ac 	.word	0x200002ac

0800558c <__sflush_r>:
 800558c:	898a      	ldrh	r2, [r1, #12]
 800558e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005592:	4605      	mov	r5, r0
 8005594:	0710      	lsls	r0, r2, #28
 8005596:	460c      	mov	r4, r1
 8005598:	d458      	bmi.n	800564c <__sflush_r+0xc0>
 800559a:	684b      	ldr	r3, [r1, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	dc05      	bgt.n	80055ac <__sflush_r+0x20>
 80055a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	dc02      	bgt.n	80055ac <__sflush_r+0x20>
 80055a6:	2000      	movs	r0, #0
 80055a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055ae:	2e00      	cmp	r6, #0
 80055b0:	d0f9      	beq.n	80055a6 <__sflush_r+0x1a>
 80055b2:	2300      	movs	r3, #0
 80055b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055b8:	682f      	ldr	r7, [r5, #0]
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	d032      	beq.n	8005624 <__sflush_r+0x98>
 80055be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	075a      	lsls	r2, r3, #29
 80055c4:	d505      	bpl.n	80055d2 <__sflush_r+0x46>
 80055c6:	6863      	ldr	r3, [r4, #4]
 80055c8:	1ac0      	subs	r0, r0, r3
 80055ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055cc:	b10b      	cbz	r3, 80055d2 <__sflush_r+0x46>
 80055ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055d0:	1ac0      	subs	r0, r0, r3
 80055d2:	2300      	movs	r3, #0
 80055d4:	4602      	mov	r2, r0
 80055d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055d8:	4628      	mov	r0, r5
 80055da:	6a21      	ldr	r1, [r4, #32]
 80055dc:	47b0      	blx	r6
 80055de:	1c43      	adds	r3, r0, #1
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	d106      	bne.n	80055f2 <__sflush_r+0x66>
 80055e4:	6829      	ldr	r1, [r5, #0]
 80055e6:	291d      	cmp	r1, #29
 80055e8:	d82c      	bhi.n	8005644 <__sflush_r+0xb8>
 80055ea:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <__sflush_r+0x108>)
 80055ec:	40ca      	lsrs	r2, r1
 80055ee:	07d6      	lsls	r6, r2, #31
 80055f0:	d528      	bpl.n	8005644 <__sflush_r+0xb8>
 80055f2:	2200      	movs	r2, #0
 80055f4:	6062      	str	r2, [r4, #4]
 80055f6:	6922      	ldr	r2, [r4, #16]
 80055f8:	04d9      	lsls	r1, r3, #19
 80055fa:	6022      	str	r2, [r4, #0]
 80055fc:	d504      	bpl.n	8005608 <__sflush_r+0x7c>
 80055fe:	1c42      	adds	r2, r0, #1
 8005600:	d101      	bne.n	8005606 <__sflush_r+0x7a>
 8005602:	682b      	ldr	r3, [r5, #0]
 8005604:	b903      	cbnz	r3, 8005608 <__sflush_r+0x7c>
 8005606:	6560      	str	r0, [r4, #84]	; 0x54
 8005608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800560a:	602f      	str	r7, [r5, #0]
 800560c:	2900      	cmp	r1, #0
 800560e:	d0ca      	beq.n	80055a6 <__sflush_r+0x1a>
 8005610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005614:	4299      	cmp	r1, r3
 8005616:	d002      	beq.n	800561e <__sflush_r+0x92>
 8005618:	4628      	mov	r0, r5
 800561a:	f7ff fc65 	bl	8004ee8 <_free_r>
 800561e:	2000      	movs	r0, #0
 8005620:	6360      	str	r0, [r4, #52]	; 0x34
 8005622:	e7c1      	b.n	80055a8 <__sflush_r+0x1c>
 8005624:	6a21      	ldr	r1, [r4, #32]
 8005626:	2301      	movs	r3, #1
 8005628:	4628      	mov	r0, r5
 800562a:	47b0      	blx	r6
 800562c:	1c41      	adds	r1, r0, #1
 800562e:	d1c7      	bne.n	80055c0 <__sflush_r+0x34>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0c4      	beq.n	80055c0 <__sflush_r+0x34>
 8005636:	2b1d      	cmp	r3, #29
 8005638:	d001      	beq.n	800563e <__sflush_r+0xb2>
 800563a:	2b16      	cmp	r3, #22
 800563c:	d101      	bne.n	8005642 <__sflush_r+0xb6>
 800563e:	602f      	str	r7, [r5, #0]
 8005640:	e7b1      	b.n	80055a6 <__sflush_r+0x1a>
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005648:	81a3      	strh	r3, [r4, #12]
 800564a:	e7ad      	b.n	80055a8 <__sflush_r+0x1c>
 800564c:	690f      	ldr	r7, [r1, #16]
 800564e:	2f00      	cmp	r7, #0
 8005650:	d0a9      	beq.n	80055a6 <__sflush_r+0x1a>
 8005652:	0793      	lsls	r3, r2, #30
 8005654:	bf18      	it	ne
 8005656:	2300      	movne	r3, #0
 8005658:	680e      	ldr	r6, [r1, #0]
 800565a:	bf08      	it	eq
 800565c:	694b      	ldreq	r3, [r1, #20]
 800565e:	eba6 0807 	sub.w	r8, r6, r7
 8005662:	600f      	str	r7, [r1, #0]
 8005664:	608b      	str	r3, [r1, #8]
 8005666:	f1b8 0f00 	cmp.w	r8, #0
 800566a:	dd9c      	ble.n	80055a6 <__sflush_r+0x1a>
 800566c:	4643      	mov	r3, r8
 800566e:	463a      	mov	r2, r7
 8005670:	4628      	mov	r0, r5
 8005672:	6a21      	ldr	r1, [r4, #32]
 8005674:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005676:	47b0      	blx	r6
 8005678:	2800      	cmp	r0, #0
 800567a:	dc06      	bgt.n	800568a <__sflush_r+0xfe>
 800567c:	89a3      	ldrh	r3, [r4, #12]
 800567e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	e78e      	b.n	80055a8 <__sflush_r+0x1c>
 800568a:	4407      	add	r7, r0
 800568c:	eba8 0800 	sub.w	r8, r8, r0
 8005690:	e7e9      	b.n	8005666 <__sflush_r+0xda>
 8005692:	bf00      	nop
 8005694:	20400001 	.word	0x20400001

08005698 <_fflush_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	690b      	ldr	r3, [r1, #16]
 800569c:	4605      	mov	r5, r0
 800569e:	460c      	mov	r4, r1
 80056a0:	b913      	cbnz	r3, 80056a8 <_fflush_r+0x10>
 80056a2:	2500      	movs	r5, #0
 80056a4:	4628      	mov	r0, r5
 80056a6:	bd38      	pop	{r3, r4, r5, pc}
 80056a8:	b118      	cbz	r0, 80056b2 <_fflush_r+0x1a>
 80056aa:	6983      	ldr	r3, [r0, #24]
 80056ac:	b90b      	cbnz	r3, 80056b2 <_fflush_r+0x1a>
 80056ae:	f7fe ffc1 	bl	8004634 <__sinit>
 80056b2:	4b14      	ldr	r3, [pc, #80]	; (8005704 <_fflush_r+0x6c>)
 80056b4:	429c      	cmp	r4, r3
 80056b6:	d11b      	bne.n	80056f0 <_fflush_r+0x58>
 80056b8:	686c      	ldr	r4, [r5, #4]
 80056ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0ef      	beq.n	80056a2 <_fflush_r+0xa>
 80056c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056c4:	07d0      	lsls	r0, r2, #31
 80056c6:	d404      	bmi.n	80056d2 <_fflush_r+0x3a>
 80056c8:	0599      	lsls	r1, r3, #22
 80056ca:	d402      	bmi.n	80056d2 <_fflush_r+0x3a>
 80056cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056ce:	f7ff f854 	bl	800477a <__retarget_lock_acquire_recursive>
 80056d2:	4628      	mov	r0, r5
 80056d4:	4621      	mov	r1, r4
 80056d6:	f7ff ff59 	bl	800558c <__sflush_r>
 80056da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056dc:	4605      	mov	r5, r0
 80056de:	07da      	lsls	r2, r3, #31
 80056e0:	d4e0      	bmi.n	80056a4 <_fflush_r+0xc>
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	059b      	lsls	r3, r3, #22
 80056e6:	d4dd      	bmi.n	80056a4 <_fflush_r+0xc>
 80056e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056ea:	f7ff f847 	bl	800477c <__retarget_lock_release_recursive>
 80056ee:	e7d9      	b.n	80056a4 <_fflush_r+0xc>
 80056f0:	4b05      	ldr	r3, [pc, #20]	; (8005708 <_fflush_r+0x70>)
 80056f2:	429c      	cmp	r4, r3
 80056f4:	d101      	bne.n	80056fa <_fflush_r+0x62>
 80056f6:	68ac      	ldr	r4, [r5, #8]
 80056f8:	e7df      	b.n	80056ba <_fflush_r+0x22>
 80056fa:	4b04      	ldr	r3, [pc, #16]	; (800570c <_fflush_r+0x74>)
 80056fc:	429c      	cmp	r4, r3
 80056fe:	bf08      	it	eq
 8005700:	68ec      	ldreq	r4, [r5, #12]
 8005702:	e7da      	b.n	80056ba <_fflush_r+0x22>
 8005704:	08005ab8 	.word	0x08005ab8
 8005708:	08005ad8 	.word	0x08005ad8
 800570c:	08005a98 	.word	0x08005a98

08005710 <fiprintf>:
 8005710:	b40e      	push	{r1, r2, r3}
 8005712:	b503      	push	{r0, r1, lr}
 8005714:	4601      	mov	r1, r0
 8005716:	ab03      	add	r3, sp, #12
 8005718:	4805      	ldr	r0, [pc, #20]	; (8005730 <fiprintf+0x20>)
 800571a:	f853 2b04 	ldr.w	r2, [r3], #4
 800571e:	6800      	ldr	r0, [r0, #0]
 8005720:	9301      	str	r3, [sp, #4]
 8005722:	f7ff fcaf 	bl	8005084 <_vfiprintf_r>
 8005726:	b002      	add	sp, #8
 8005728:	f85d eb04 	ldr.w	lr, [sp], #4
 800572c:	b003      	add	sp, #12
 800572e:	4770      	bx	lr
 8005730:	20000010 	.word	0x20000010

08005734 <_lseek_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4604      	mov	r4, r0
 8005738:	4608      	mov	r0, r1
 800573a:	4611      	mov	r1, r2
 800573c:	2200      	movs	r2, #0
 800573e:	4d05      	ldr	r5, [pc, #20]	; (8005754 <_lseek_r+0x20>)
 8005740:	602a      	str	r2, [r5, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	f7fb fc26 	bl	8000f94 <_lseek>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_lseek_r+0x1e>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b103      	cbz	r3, 8005752 <_lseek_r+0x1e>
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	200002ac 	.word	0x200002ac

08005758 <__swhatbuf_r>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	460e      	mov	r6, r1
 800575c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005760:	4614      	mov	r4, r2
 8005762:	2900      	cmp	r1, #0
 8005764:	461d      	mov	r5, r3
 8005766:	b096      	sub	sp, #88	; 0x58
 8005768:	da07      	bge.n	800577a <__swhatbuf_r+0x22>
 800576a:	2300      	movs	r3, #0
 800576c:	602b      	str	r3, [r5, #0]
 800576e:	89b3      	ldrh	r3, [r6, #12]
 8005770:	061a      	lsls	r2, r3, #24
 8005772:	d410      	bmi.n	8005796 <__swhatbuf_r+0x3e>
 8005774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005778:	e00e      	b.n	8005798 <__swhatbuf_r+0x40>
 800577a:	466a      	mov	r2, sp
 800577c:	f000 f894 	bl	80058a8 <_fstat_r>
 8005780:	2800      	cmp	r0, #0
 8005782:	dbf2      	blt.n	800576a <__swhatbuf_r+0x12>
 8005784:	9a01      	ldr	r2, [sp, #4]
 8005786:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800578a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800578e:	425a      	negs	r2, r3
 8005790:	415a      	adcs	r2, r3
 8005792:	602a      	str	r2, [r5, #0]
 8005794:	e7ee      	b.n	8005774 <__swhatbuf_r+0x1c>
 8005796:	2340      	movs	r3, #64	; 0x40
 8005798:	2000      	movs	r0, #0
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	b016      	add	sp, #88	; 0x58
 800579e:	bd70      	pop	{r4, r5, r6, pc}

080057a0 <__smakebuf_r>:
 80057a0:	898b      	ldrh	r3, [r1, #12]
 80057a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057a4:	079d      	lsls	r5, r3, #30
 80057a6:	4606      	mov	r6, r0
 80057a8:	460c      	mov	r4, r1
 80057aa:	d507      	bpl.n	80057bc <__smakebuf_r+0x1c>
 80057ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	6123      	str	r3, [r4, #16]
 80057b4:	2301      	movs	r3, #1
 80057b6:	6163      	str	r3, [r4, #20]
 80057b8:	b002      	add	sp, #8
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	466a      	mov	r2, sp
 80057be:	ab01      	add	r3, sp, #4
 80057c0:	f7ff ffca 	bl	8005758 <__swhatbuf_r>
 80057c4:	9900      	ldr	r1, [sp, #0]
 80057c6:	4605      	mov	r5, r0
 80057c8:	4630      	mov	r0, r6
 80057ca:	f7ff fbd9 	bl	8004f80 <_malloc_r>
 80057ce:	b948      	cbnz	r0, 80057e4 <__smakebuf_r+0x44>
 80057d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d4:	059a      	lsls	r2, r3, #22
 80057d6:	d4ef      	bmi.n	80057b8 <__smakebuf_r+0x18>
 80057d8:	f023 0303 	bic.w	r3, r3, #3
 80057dc:	f043 0302 	orr.w	r3, r3, #2
 80057e0:	81a3      	strh	r3, [r4, #12]
 80057e2:	e7e3      	b.n	80057ac <__smakebuf_r+0xc>
 80057e4:	4b0d      	ldr	r3, [pc, #52]	; (800581c <__smakebuf_r+0x7c>)
 80057e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	6020      	str	r0, [r4, #0]
 80057ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	9b00      	ldr	r3, [sp, #0]
 80057f4:	6120      	str	r0, [r4, #16]
 80057f6:	6163      	str	r3, [r4, #20]
 80057f8:	9b01      	ldr	r3, [sp, #4]
 80057fa:	b15b      	cbz	r3, 8005814 <__smakebuf_r+0x74>
 80057fc:	4630      	mov	r0, r6
 80057fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005802:	f000 f863 	bl	80058cc <_isatty_r>
 8005806:	b128      	cbz	r0, 8005814 <__smakebuf_r+0x74>
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	f023 0303 	bic.w	r3, r3, #3
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	81a3      	strh	r3, [r4, #12]
 8005814:	89a0      	ldrh	r0, [r4, #12]
 8005816:	4305      	orrs	r5, r0
 8005818:	81a5      	strh	r5, [r4, #12]
 800581a:	e7cd      	b.n	80057b8 <__smakebuf_r+0x18>
 800581c:	080045cd 	.word	0x080045cd

08005820 <__ascii_mbtowc>:
 8005820:	b082      	sub	sp, #8
 8005822:	b901      	cbnz	r1, 8005826 <__ascii_mbtowc+0x6>
 8005824:	a901      	add	r1, sp, #4
 8005826:	b142      	cbz	r2, 800583a <__ascii_mbtowc+0x1a>
 8005828:	b14b      	cbz	r3, 800583e <__ascii_mbtowc+0x1e>
 800582a:	7813      	ldrb	r3, [r2, #0]
 800582c:	600b      	str	r3, [r1, #0]
 800582e:	7812      	ldrb	r2, [r2, #0]
 8005830:	1e10      	subs	r0, r2, #0
 8005832:	bf18      	it	ne
 8005834:	2001      	movne	r0, #1
 8005836:	b002      	add	sp, #8
 8005838:	4770      	bx	lr
 800583a:	4610      	mov	r0, r2
 800583c:	e7fb      	b.n	8005836 <__ascii_mbtowc+0x16>
 800583e:	f06f 0001 	mvn.w	r0, #1
 8005842:	e7f8      	b.n	8005836 <__ascii_mbtowc+0x16>

08005844 <__malloc_lock>:
 8005844:	4801      	ldr	r0, [pc, #4]	; (800584c <__malloc_lock+0x8>)
 8005846:	f7fe bf98 	b.w	800477a <__retarget_lock_acquire_recursive>
 800584a:	bf00      	nop
 800584c:	200002a4 	.word	0x200002a4

08005850 <__malloc_unlock>:
 8005850:	4801      	ldr	r0, [pc, #4]	; (8005858 <__malloc_unlock+0x8>)
 8005852:	f7fe bf93 	b.w	800477c <__retarget_lock_release_recursive>
 8005856:	bf00      	nop
 8005858:	200002a4 	.word	0x200002a4

0800585c <_read_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4604      	mov	r4, r0
 8005860:	4608      	mov	r0, r1
 8005862:	4611      	mov	r1, r2
 8005864:	2200      	movs	r2, #0
 8005866:	4d05      	ldr	r5, [pc, #20]	; (800587c <_read_r+0x20>)
 8005868:	602a      	str	r2, [r5, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	f7fb fb35 	bl	8000eda <_read>
 8005870:	1c43      	adds	r3, r0, #1
 8005872:	d102      	bne.n	800587a <_read_r+0x1e>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	b103      	cbz	r3, 800587a <_read_r+0x1e>
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	bd38      	pop	{r3, r4, r5, pc}
 800587c:	200002ac 	.word	0x200002ac

08005880 <__ascii_wctomb>:
 8005880:	4603      	mov	r3, r0
 8005882:	4608      	mov	r0, r1
 8005884:	b141      	cbz	r1, 8005898 <__ascii_wctomb+0x18>
 8005886:	2aff      	cmp	r2, #255	; 0xff
 8005888:	d904      	bls.n	8005894 <__ascii_wctomb+0x14>
 800588a:	228a      	movs	r2, #138	; 0x8a
 800588c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	4770      	bx	lr
 8005894:	2001      	movs	r0, #1
 8005896:	700a      	strb	r2, [r1, #0]
 8005898:	4770      	bx	lr

0800589a <abort>:
 800589a:	2006      	movs	r0, #6
 800589c:	b508      	push	{r3, lr}
 800589e:	f000 f84d 	bl	800593c <raise>
 80058a2:	2001      	movs	r0, #1
 80058a4:	f7fb fb0f 	bl	8000ec6 <_exit>

080058a8 <_fstat_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	2300      	movs	r3, #0
 80058ac:	4d06      	ldr	r5, [pc, #24]	; (80058c8 <_fstat_r+0x20>)
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	f7fb fb54 	bl	8000f62 <_fstat>
 80058ba:	1c43      	adds	r3, r0, #1
 80058bc:	d102      	bne.n	80058c4 <_fstat_r+0x1c>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	b103      	cbz	r3, 80058c4 <_fstat_r+0x1c>
 80058c2:	6023      	str	r3, [r4, #0]
 80058c4:	bd38      	pop	{r3, r4, r5, pc}
 80058c6:	bf00      	nop
 80058c8:	200002ac 	.word	0x200002ac

080058cc <_isatty_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	2300      	movs	r3, #0
 80058d0:	4d05      	ldr	r5, [pc, #20]	; (80058e8 <_isatty_r+0x1c>)
 80058d2:	4604      	mov	r4, r0
 80058d4:	4608      	mov	r0, r1
 80058d6:	602b      	str	r3, [r5, #0]
 80058d8:	f7fb fb52 	bl	8000f80 <_isatty>
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	d102      	bne.n	80058e6 <_isatty_r+0x1a>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	b103      	cbz	r3, 80058e6 <_isatty_r+0x1a>
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	200002ac 	.word	0x200002ac

080058ec <_raise_r>:
 80058ec:	291f      	cmp	r1, #31
 80058ee:	b538      	push	{r3, r4, r5, lr}
 80058f0:	4604      	mov	r4, r0
 80058f2:	460d      	mov	r5, r1
 80058f4:	d904      	bls.n	8005900 <_raise_r+0x14>
 80058f6:	2316      	movs	r3, #22
 80058f8:	6003      	str	r3, [r0, #0]
 80058fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058fe:	bd38      	pop	{r3, r4, r5, pc}
 8005900:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005902:	b112      	cbz	r2, 800590a <_raise_r+0x1e>
 8005904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005908:	b94b      	cbnz	r3, 800591e <_raise_r+0x32>
 800590a:	4620      	mov	r0, r4
 800590c:	f000 f830 	bl	8005970 <_getpid_r>
 8005910:	462a      	mov	r2, r5
 8005912:	4601      	mov	r1, r0
 8005914:	4620      	mov	r0, r4
 8005916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800591a:	f000 b817 	b.w	800594c <_kill_r>
 800591e:	2b01      	cmp	r3, #1
 8005920:	d00a      	beq.n	8005938 <_raise_r+0x4c>
 8005922:	1c59      	adds	r1, r3, #1
 8005924:	d103      	bne.n	800592e <_raise_r+0x42>
 8005926:	2316      	movs	r3, #22
 8005928:	6003      	str	r3, [r0, #0]
 800592a:	2001      	movs	r0, #1
 800592c:	e7e7      	b.n	80058fe <_raise_r+0x12>
 800592e:	2400      	movs	r4, #0
 8005930:	4628      	mov	r0, r5
 8005932:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005936:	4798      	blx	r3
 8005938:	2000      	movs	r0, #0
 800593a:	e7e0      	b.n	80058fe <_raise_r+0x12>

0800593c <raise>:
 800593c:	4b02      	ldr	r3, [pc, #8]	; (8005948 <raise+0xc>)
 800593e:	4601      	mov	r1, r0
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	f7ff bfd3 	b.w	80058ec <_raise_r>
 8005946:	bf00      	nop
 8005948:	20000010 	.word	0x20000010

0800594c <_kill_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	2300      	movs	r3, #0
 8005950:	4d06      	ldr	r5, [pc, #24]	; (800596c <_kill_r+0x20>)
 8005952:	4604      	mov	r4, r0
 8005954:	4608      	mov	r0, r1
 8005956:	4611      	mov	r1, r2
 8005958:	602b      	str	r3, [r5, #0]
 800595a:	f7fb faa4 	bl	8000ea6 <_kill>
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	d102      	bne.n	8005968 <_kill_r+0x1c>
 8005962:	682b      	ldr	r3, [r5, #0]
 8005964:	b103      	cbz	r3, 8005968 <_kill_r+0x1c>
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	bd38      	pop	{r3, r4, r5, pc}
 800596a:	bf00      	nop
 800596c:	200002ac 	.word	0x200002ac

08005970 <_getpid_r>:
 8005970:	f7fb ba92 	b.w	8000e98 <_getpid>

08005974 <_init>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr

08005980 <_fini>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	bf00      	nop
 8005984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005986:	bc08      	pop	{r3}
 8005988:	469e      	mov	lr, r3
 800598a:	4770      	bx	lr
