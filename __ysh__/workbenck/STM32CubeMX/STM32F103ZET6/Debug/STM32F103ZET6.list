
STM32F103ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006634  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08006820  08006820  00016820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c64  08006c64  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006c64  08006c64  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c64  08006c64  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c64  08006c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  200001e0  08006e4c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08006e4c  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7cd  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aac  00000000  00000000  0002d9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00030488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  00030e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf93  00000000  00000000  00031720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db9f  00000000  00000000  0004d6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099aa7  00000000  00000000  0005b252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4cf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003604  00000000  00000000  000f4d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	08006804 	.word	0x08006804

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	08006804 	.word	0x08006804

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_frsub>:
 8000d08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	e002      	b.n	8000d14 <__addsf3>
 8000d0e:	bf00      	nop

08000d10 <__aeabi_fsub>:
 8000d10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000d14 <__addsf3>:
 8000d14:	0042      	lsls	r2, r0, #1
 8000d16:	bf1f      	itttt	ne
 8000d18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d1c:	ea92 0f03 	teqne	r2, r3
 8000d20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d28:	d06a      	beq.n	8000e00 <__addsf3+0xec>
 8000d2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d32:	bfc1      	itttt	gt
 8000d34:	18d2      	addgt	r2, r2, r3
 8000d36:	4041      	eorgt	r1, r0
 8000d38:	4048      	eorgt	r0, r1
 8000d3a:	4041      	eorgt	r1, r0
 8000d3c:	bfb8      	it	lt
 8000d3e:	425b      	neglt	r3, r3
 8000d40:	2b19      	cmp	r3, #25
 8000d42:	bf88      	it	hi
 8000d44:	4770      	bxhi	lr
 8000d46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d52:	bf18      	it	ne
 8000d54:	4240      	negne	r0, r0
 8000d56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d62:	bf18      	it	ne
 8000d64:	4249      	negne	r1, r1
 8000d66:	ea92 0f03 	teq	r2, r3
 8000d6a:	d03f      	beq.n	8000dec <__addsf3+0xd8>
 8000d6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d70:	fa41 fc03 	asr.w	ip, r1, r3
 8000d74:	eb10 000c 	adds.w	r0, r0, ip
 8000d78:	f1c3 0320 	rsb	r3, r3, #32
 8000d7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d84:	d502      	bpl.n	8000d8c <__addsf3+0x78>
 8000d86:	4249      	negs	r1, r1
 8000d88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d90:	d313      	bcc.n	8000dba <__addsf3+0xa6>
 8000d92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d96:	d306      	bcc.n	8000da6 <__addsf3+0x92>
 8000d98:	0840      	lsrs	r0, r0, #1
 8000d9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d9e:	f102 0201 	add.w	r2, r2, #1
 8000da2:	2afe      	cmp	r2, #254	; 0xfe
 8000da4:	d251      	bcs.n	8000e4a <__addsf3+0x136>
 8000da6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000daa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dae:	bf08      	it	eq
 8000db0:	f020 0001 	biceq.w	r0, r0, #1
 8000db4:	ea40 0003 	orr.w	r0, r0, r3
 8000db8:	4770      	bx	lr
 8000dba:	0049      	lsls	r1, r1, #1
 8000dbc:	eb40 0000 	adc.w	r0, r0, r0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000dc8:	d2ed      	bcs.n	8000da6 <__addsf3+0x92>
 8000dca:	fab0 fc80 	clz	ip, r0
 8000dce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000dd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000dd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dda:	bfaa      	itet	ge
 8000ddc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000de0:	4252      	neglt	r2, r2
 8000de2:	4318      	orrge	r0, r3
 8000de4:	bfbc      	itt	lt
 8000de6:	40d0      	lsrlt	r0, r2
 8000de8:	4318      	orrlt	r0, r3
 8000dea:	4770      	bx	lr
 8000dec:	f092 0f00 	teq	r2, #0
 8000df0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000df4:	bf06      	itte	eq
 8000df6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dfa:	3201      	addeq	r2, #1
 8000dfc:	3b01      	subne	r3, #1
 8000dfe:	e7b5      	b.n	8000d6c <__addsf3+0x58>
 8000e00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e08:	bf18      	it	ne
 8000e0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e0e:	d021      	beq.n	8000e54 <__addsf3+0x140>
 8000e10:	ea92 0f03 	teq	r2, r3
 8000e14:	d004      	beq.n	8000e20 <__addsf3+0x10c>
 8000e16:	f092 0f00 	teq	r2, #0
 8000e1a:	bf08      	it	eq
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	4770      	bx	lr
 8000e20:	ea90 0f01 	teq	r0, r1
 8000e24:	bf1c      	itt	ne
 8000e26:	2000      	movne	r0, #0
 8000e28:	4770      	bxne	lr
 8000e2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000e2e:	d104      	bne.n	8000e3a <__addsf3+0x126>
 8000e30:	0040      	lsls	r0, r0, #1
 8000e32:	bf28      	it	cs
 8000e34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	4770      	bx	lr
 8000e3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e3e:	bf3c      	itt	cc
 8000e40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e44:	4770      	bxcc	lr
 8000e46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e52:	4770      	bx	lr
 8000e54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e58:	bf16      	itet	ne
 8000e5a:	4608      	movne	r0, r1
 8000e5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e60:	4601      	movne	r1, r0
 8000e62:	0242      	lsls	r2, r0, #9
 8000e64:	bf06      	itte	eq
 8000e66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e6a:	ea90 0f01 	teqeq	r0, r1
 8000e6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_ui2f>:
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	e004      	b.n	8000e84 <__aeabi_i2f+0x8>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_i2f>:
 8000e7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e80:	bf48      	it	mi
 8000e82:	4240      	negmi	r0, r0
 8000e84:	ea5f 0c00 	movs.w	ip, r0
 8000e88:	bf08      	it	eq
 8000e8a:	4770      	bxeq	lr
 8000e8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e90:	4601      	mov	r1, r0
 8000e92:	f04f 0000 	mov.w	r0, #0
 8000e96:	e01c      	b.n	8000ed2 <__aeabi_l2f+0x2a>

08000e98 <__aeabi_ul2f>:
 8000e98:	ea50 0201 	orrs.w	r2, r0, r1
 8000e9c:	bf08      	it	eq
 8000e9e:	4770      	bxeq	lr
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	e00a      	b.n	8000ebc <__aeabi_l2f+0x14>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_l2f>:
 8000ea8:	ea50 0201 	orrs.w	r2, r0, r1
 8000eac:	bf08      	it	eq
 8000eae:	4770      	bxeq	lr
 8000eb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000eb4:	d502      	bpl.n	8000ebc <__aeabi_l2f+0x14>
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ebc:	ea5f 0c01 	movs.w	ip, r1
 8000ec0:	bf02      	ittt	eq
 8000ec2:	4684      	moveq	ip, r0
 8000ec4:	4601      	moveq	r1, r0
 8000ec6:	2000      	moveq	r0, #0
 8000ec8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ecc:	bf08      	it	eq
 8000ece:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ed6:	fabc f28c 	clz	r2, ip
 8000eda:	3a08      	subs	r2, #8
 8000edc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ee0:	db10      	blt.n	8000f04 <__aeabi_l2f+0x5c>
 8000ee2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eec:	f1c2 0220 	rsb	r2, r2, #32
 8000ef0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ef4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ef8:	eb43 0002 	adc.w	r0, r3, r2
 8000efc:	bf08      	it	eq
 8000efe:	f020 0001 	biceq.w	r0, r0, #1
 8000f02:	4770      	bx	lr
 8000f04:	f102 0220 	add.w	r2, r2, #32
 8000f08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f0c:	f1c2 0220 	rsb	r2, r2, #32
 8000f10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f14:	fa21 f202 	lsr.w	r2, r1, r2
 8000f18:	eb43 0002 	adc.w	r0, r3, r2
 8000f1c:	bf08      	it	eq
 8000f1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f22:	4770      	bx	lr

08000f24 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_ADC1_Init+0x74>)
 8000f36:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <MX_ADC1_Init+0x78>)
 8000f38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_ADC1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_ADC1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_ADC1_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_EXT_IT11;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_ADC1_Init+0x74>)
 8000f4e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000f52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_ADC1_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_ADC1_Init+0x74>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <MX_ADC1_Init+0x74>)
 8000f62:	f000 fc0f 	bl	8001784 <HAL_ADC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f6c:	f000 f9b0 	bl	80012d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f70:	2310      	movs	r3, #16
 8000f72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_ADC1_Init+0x74>)
 8000f82:	f000 fce9 	bl	8001958 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f8c:	f000 f9a0 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000208 	.word	0x20000208
 8000f9c:	40012400 	.word	0x40012400

08000fa0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <HAL_ADC_MspInit+0x34>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d10b      	bne.n	8000fca <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_ADC_MspInit+0x38>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_ADC_MspInit+0x38>)
 8000fb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fbc:	6193      	str	r3, [r2, #24]
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_ADC_MspInit+0x38>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	40012400 	.word	0x40012400
 8000fd8:	40021000 	.word	0x40021000

08000fdc <bsp_led>:
led_struct_t LED = {
        bsp_led
};

void bsp_led(led_enum_t led_number, void (*callback_fun)(led_enum_t))
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
        (*callback_fun)(led_number);
 8000fe8:	79fa      	ldrb	r2, [r7, #7]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	4610      	mov	r0, r2
 8000fee:	4798      	blx	r3
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <led_on>:

void led_on(led_enum_t led_number)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
        switch (led_number) {
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b03      	cmp	r3, #3
 8001006:	d012      	beq.n	800102e <led_on+0x36>
 8001008:	2b03      	cmp	r3, #3
 800100a:	dc16      	bgt.n	800103a <led_on+0x42>
 800100c:	2b01      	cmp	r3, #1
 800100e:	d002      	beq.n	8001016 <led_on+0x1e>
 8001010:	2b02      	cmp	r3, #2
 8001012:	d006      	beq.n	8001022 <led_on+0x2a>
        case LED_01: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); break;
        case LED_02: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); break;
        case LED_03: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); break;
        default: break;
 8001014:	e011      	b.n	800103a <led_on+0x42>
        case LED_01: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); break;
 8001016:	2201      	movs	r2, #1
 8001018:	2102      	movs	r1, #2
 800101a:	480a      	ldr	r0, [pc, #40]	; (8001044 <led_on+0x4c>)
 800101c:	f001 f9ba 	bl	8002394 <HAL_GPIO_WritePin>
 8001020:	e00c      	b.n	800103c <led_on+0x44>
        case LED_02: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); break;
 8001022:	2201      	movs	r2, #1
 8001024:	2104      	movs	r1, #4
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <led_on+0x4c>)
 8001028:	f001 f9b4 	bl	8002394 <HAL_GPIO_WritePin>
 800102c:	e006      	b.n	800103c <led_on+0x44>
        case LED_03: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); break;
 800102e:	2201      	movs	r2, #1
 8001030:	2108      	movs	r1, #8
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <led_on+0x4c>)
 8001034:	f001 f9ae 	bl	8002394 <HAL_GPIO_WritePin>
 8001038:	e000      	b.n	800103c <led_on+0x44>
        default: break;
 800103a:	bf00      	nop
        }
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40010800 	.word	0x40010800

08001048 <led_off>:

void led_off(led_enum_t led_number)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
        switch (led_number) {
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b03      	cmp	r3, #3
 8001056:	d012      	beq.n	800107e <led_off+0x36>
 8001058:	2b03      	cmp	r3, #3
 800105a:	dc16      	bgt.n	800108a <led_off+0x42>
 800105c:	2b01      	cmp	r3, #1
 800105e:	d002      	beq.n	8001066 <led_off+0x1e>
 8001060:	2b02      	cmp	r3, #2
 8001062:	d006      	beq.n	8001072 <led_off+0x2a>
        case LED_01: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); break;
        case LED_02: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); break;
        case LED_03: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); break;
        default: break;
 8001064:	e011      	b.n	800108a <led_off+0x42>
        case LED_01: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); break;
 8001066:	2200      	movs	r2, #0
 8001068:	2102      	movs	r1, #2
 800106a:	480a      	ldr	r0, [pc, #40]	; (8001094 <led_off+0x4c>)
 800106c:	f001 f992 	bl	8002394 <HAL_GPIO_WritePin>
 8001070:	e00c      	b.n	800108c <led_off+0x44>
        case LED_02: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); break;
 8001072:	2200      	movs	r2, #0
 8001074:	2104      	movs	r1, #4
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <led_off+0x4c>)
 8001078:	f001 f98c 	bl	8002394 <HAL_GPIO_WritePin>
 800107c:	e006      	b.n	800108c <led_off+0x44>
        case LED_03: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); break;
 800107e:	2200      	movs	r2, #0
 8001080:	2108      	movs	r1, #8
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <led_off+0x4c>)
 8001084:	f001 f986 	bl	8002394 <HAL_GPIO_WritePin>
 8001088:	e000      	b.n	800108c <led_off+0x44>
        default: break;
 800108a:	bf00      	nop
        }
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40010800 	.word	0x40010800

08001098 <HAL_UART_TxCpltCallback>:
/*****************************************************************************/
/*      => STM32F103__回调函数__                                              */
/*****************************************************************************/
//UART__发送完成（中断）回调函数
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
        uart_ready = SET;      //设置传输完成标志位（SET传输完成）
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_UART_TxCpltCallback+0x18>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	20000256 	.word	0x20000256

080010b4 <HAL_UART_RxCpltCallback>:
//UART__接收完成（中断）回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
        uart_ready = SET;      //设置传输完成标志位（SET传输完成）
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_UART_RxCpltCallback+0x18>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	20000256 	.word	0x20000256

080010d0 <HAL_UART_ErrorCallback>:
//UART__出错（中断）回调函数
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart1)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
	...

080010e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_GPIO_Init+0x8c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <MX_GPIO_Init+0x8c>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_GPIO_Init+0x8c>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_GPIO_Init+0x8c>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a16      	ldr	r2, [pc, #88]	; (8001170 <MX_GPIO_Init+0x8c>)
 8001116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_GPIO_Init+0x8c>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2104      	movs	r1, #4
 800112c:	4811      	ldr	r0, [pc, #68]	; (8001174 <MX_GPIO_Init+0x90>)
 800112e:	f001 f931 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001132:	2304      	movs	r3, #4
 8001134:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800113e:	2301      	movs	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	4619      	mov	r1, r3
 8001148:	480a      	ldr	r0, [pc, #40]	; (8001174 <MX_GPIO_Init+0x90>)
 800114a:	f000 ff8f 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800114e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001152:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_GPIO_Init+0x94>)
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <MX_GPIO_Init+0x98>)
 8001164:	f000 ff82 	bl	800206c <HAL_GPIO_Init>

}
 8001168:	bf00      	nop
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	40010800 	.word	0x40010800
 8001178:	10110000 	.word	0x10110000
 800117c:	40011c00 	.word	0x40011c00

08001180 <__io_putchar>:
                }
                return len;
        }
#else
        #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
        PUTCHAR_PROTOTYPE {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
        //第一个参数是串口（全局结构体huart1）
        //第二个参数是串口（）
        //第三个参数是串口（）
        //第四个参数是串口（最大延时时间）
        HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001188:	1d39      	adds	r1, r7, #4
 800118a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800118e:	2201      	movs	r2, #1
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <__io_putchar+0x20>)
 8001192:	f001 fe41 	bl	8002e18 <HAL_UART_Transmit>
        return ch;
 8001196:	687b      	ldr	r3, [r7, #4]
        }
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000258 	.word	0x20000258

080011a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f000 fa66 	bl	8001678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 f834 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b0:	f7ff ff98 	bl	80010e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011b4:	f000 f9bc 	bl	8001530 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80011b8:	f7ff feb4 	bl	8000f24 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

GPIOG_CLOCK_ENABLE();
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <main+0x60>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a10      	ldr	r2, [pc, #64]	; (8001204 <main+0x60>)
 80011c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c6:	6193      	str	r3, [r2, #24]

while (1) {
        get_temperature();
 80011c8:	f002 fd36 	bl	8003c38 <get_temperature>
        printf("DS18B20: %.3f\n", ds18b20_read_temperature());
 80011cc:	f002 fc1a 	bl	8003a04 <ds18b20_read_temperature>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fa48 	bl	8000668 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	480a      	ldr	r0, [pc, #40]	; (8001208 <main+0x64>)
 80011de:	f003 fa0f 	bl	8004600 <iprintf>
        LED.bsp_led(LED_02, led_on);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <main+0x68>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	490a      	ldr	r1, [pc, #40]	; (8001210 <main+0x6c>)
 80011e8:	2002      	movs	r0, #2
 80011ea:	4798      	blx	r3
        delay_ms(100);
 80011ec:	2064      	movs	r0, #100	; 0x64
 80011ee:	f002 fc9d 	bl	8003b2c <delay_ms>
        LED.bsp_led(LED_02, led_off);
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <main+0x68>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4907      	ldr	r1, [pc, #28]	; (8001214 <main+0x70>)
 80011f8:	2002      	movs	r0, #2
 80011fa:	4798      	blx	r3
        delay_ms(100);
 80011fc:	2064      	movs	r0, #100	; 0x64
 80011fe:	f002 fc95 	bl	8003b2c <delay_ms>
        get_temperature();
 8001202:	e7e1      	b.n	80011c8 <main+0x24>
 8001204:	40021000 	.word	0x40021000
 8001208:	08006820 	.word	0x08006820
 800120c:	20000000 	.word	0x20000000
 8001210:	08000ff9 	.word	0x08000ff9
 8001214:	08001049 	.word	0x08001049

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b096      	sub	sp, #88	; 0x58
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001222:	2228      	movs	r2, #40	; 0x28
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fd82 	bl	8003d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]
 800124a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124c:	2301      	movs	r3, #1
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125a:	2301      	movs	r3, #1
 800125c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	2302      	movs	r3, #2
 8001260:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001266:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001268:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800126c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001272:	4618      	mov	r0, r3
 8001274:	f001 f8a6 	bl	80023c4 <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800127e:	f000 f827 	bl	80012d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001282:	230f      	movs	r3, #15
 8001284:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2302      	movs	r3, #2
 8001288:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800128e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	2102      	movs	r1, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fb10 	bl	80028c4 <HAL_RCC_ClockConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012aa:	f000 f811 	bl	80012d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012ae:	2302      	movs	r3, #2
 80012b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 fc9d 	bl	8002bf8 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80012c4:	f000 f804 	bl	80012d0 <Error_Handler>
  }
}
 80012c8:	bf00      	nop
 80012ca:	3758      	adds	r7, #88	; 0x58
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <Error_Handler+0x8>
	...

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_MspInit+0x5c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4a14      	ldr	r2, [pc, #80]	; (8001338 <HAL_MspInit+0x5c>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6193      	str	r3, [r2, #24]
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_MspInit+0x5c>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_MspInit+0x5c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_MspInit+0x5c>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_MspInit+0x5c>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_MspInit+0x60>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_MspInit+0x60>)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	40021000 	.word	0x40021000
 800133c:	40010000 	.word	0x40010000

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f000 f9bd 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <USART1_IRQHandler+0x10>)
 8001396:	f001 fdd1 	bl	8002f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000258 	.word	0x20000258

080013a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
	return 1;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <_kill>:

int _kill(int pid, int sig)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013bc:	f002 fc8e 	bl	8003cdc <__errno>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2216      	movs	r2, #22
 80013c4:	601a      	str	r2, [r3, #0]
	return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <_exit>:

void _exit (int status)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffe7 	bl	80013b2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013e4:	e7fe      	b.n	80013e4 <_exit+0x12>

080013e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	e00a      	b.n	800140e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013f8:	f3af 8000 	nop.w
 80013fc:	4601      	mov	r1, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	60ba      	str	r2, [r7, #8]
 8001404:	b2ca      	uxtb	r2, r1
 8001406:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	429a      	cmp	r2, r3
 8001414:	dbf0      	blt.n	80013f8 <_read+0x12>
	}

return len;
 8001416:	687b      	ldr	r3, [r7, #4]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	e009      	b.n	8001446 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	60ba      	str	r2, [r7, #8]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fea0 	bl	8001180 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3301      	adds	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	429a      	cmp	r2, r3
 800144c:	dbf1      	blt.n	8001432 <_write+0x12>
	}
	return len;
 800144e:	687b      	ldr	r3, [r7, #4]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <_close>:

int _close(int file)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	return -1;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147e:	605a      	str	r2, [r3, #4]
	return 0;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <_isatty>:

int _isatty(int file)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
	return 0;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <_sbrk+0x5c>)
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <_sbrk+0x60>)
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <_sbrk+0x64>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <_sbrk+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e8:	f002 fbf8 	bl	8003cdc <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	220c      	movs	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f6:	e009      	b.n	800150c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <_sbrk+0x64>)
 8001508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20010000 	.word	0x20010000
 8001518:	00000400 	.word	0x00000400
 800151c:	200001fc 	.word	0x200001fc
 8001520:	200002e0 	.word	0x200002e0

08001524 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_USART1_UART_Init+0x4c>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_USART1_UART_Init+0x50>)
 8001538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_USART1_UART_Init+0x4c>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_USART1_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_USART1_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_USART1_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_USART1_UART_Init+0x4c>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <MX_USART1_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_USART1_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_USART1_UART_Init+0x4c>)
 8001568:	f001 fbfc 	bl	8002d64 <HAL_UART_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001572:	f7ff fead 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000258 	.word	0x20000258
 8001580:	40013800 	.word	0x40013800

08001584 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a20      	ldr	r2, [pc, #128]	; (8001620 <HAL_UART_MspInit+0x9c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d139      	bne.n	8001618 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_UART_MspInit+0xa0>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <HAL_UART_MspInit+0xa0>)
 80015aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_UART_MspInit+0xa0>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_UART_MspInit+0xa0>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a18      	ldr	r2, [pc, #96]	; (8001624 <HAL_UART_MspInit+0xa0>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_UART_MspInit+0xa0>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	4619      	mov	r1, r3
 80015e8:	480f      	ldr	r0, [pc, #60]	; (8001628 <HAL_UART_MspInit+0xa4>)
 80015ea:	f000 fd3f 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4619      	mov	r1, r3
 8001602:	4809      	ldr	r0, [pc, #36]	; (8001628 <HAL_UART_MspInit+0xa4>)
 8001604:	f000 fd32 	bl	800206c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	210e      	movs	r1, #14
 800160c:	2025      	movs	r0, #37	; 0x25
 800160e:	f000 fbb4 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001612:	2025      	movs	r0, #37	; 0x25
 8001614:	f000 fbcd 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001618:	bf00      	nop
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40013800 	.word	0x40013800
 8001624:	40021000 	.word	0x40021000
 8001628:	40010800 	.word	0x40010800

0800162c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800162e:	490d      	ldr	r1, [pc, #52]	; (8001664 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001630:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001644:	4c0a      	ldr	r4, [pc, #40]	; (8001670 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001652:	f7ff ff67 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001656:	f002 fb47 	bl	8003ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800165a:	f7ff fda3 	bl	80011a4 <main>
  bx lr
 800165e:	4770      	bx	lr
  ldr r0, =_sdata
 8001660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001664:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001668:	08006c6c 	.word	0x08006c6c
  ldr r2, =_sbss
 800166c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001670:	200002e0 	.word	0x200002e0

08001674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC1_2_IRQHandler>
	...

08001678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_Init+0x28>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_Init+0x28>)
 8001682:	f043 0310 	orr.w	r3, r3, #16
 8001686:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 fb6b 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168e:	200f      	movs	r0, #15
 8001690:	f000 f808 	bl	80016a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001694:	f7ff fe22 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40022000 	.word	0x40022000

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x54>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x58>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fb83 	bl	8001dce <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00e      	b.n	80016f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d80a      	bhi.n	80016ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016e0:	f000 fb4b 	bl	8001d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <HAL_InitTick+0x5c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000004 	.word	0x20000004
 80016fc:	2000000c 	.word	0x2000000c
 8001700:	20000008 	.word	0x20000008

08001704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_IncTick+0x1c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_IncTick+0x20>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a03      	ldr	r2, [pc, #12]	; (8001724 <HAL_IncTick+0x20>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	2000000c 	.word	0x2000000c
 8001724:	200002cc 	.word	0x200002cc

08001728 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b02      	ldr	r3, [pc, #8]	; (8001738 <HAL_GetTick+0x10>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	200002cc 	.word	0x200002cc

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff fff0 	bl	8001728 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_Delay+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffe0 	bl	8001728 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000000c 	.word	0x2000000c

08001784 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0ce      	b.n	8001944 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fbec 	bl	8000fa0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f9bd 	bl	8001b48 <ADC_ConversionStop_Disable>
 80017ce:	4603      	mov	r3, r0
 80017d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 80a9 	bne.w	8001932 <HAL_ADC_Init+0x1ae>
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 80a5 	bne.w	8001932 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017f0:	f023 0302 	bic.w	r3, r3, #2
 80017f4:	f043 0202 	orr.w	r2, r3, #2
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4951      	ldr	r1, [pc, #324]	; (800194c <HAL_ADC_Init+0x1c8>)
 8001806:	428b      	cmp	r3, r1
 8001808:	d10a      	bne.n	8001820 <HAL_ADC_Init+0x9c>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001812:	d002      	beq.n	800181a <HAL_ADC_Init+0x96>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	e004      	b.n	8001824 <HAL_ADC_Init+0xa0>
 800181a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800181e:	e001      	b.n	8001824 <HAL_ADC_Init+0xa0>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001824:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7b1b      	ldrb	r3, [r3, #12]
 800182a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800182c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	4313      	orrs	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800183c:	d003      	beq.n	8001846 <HAL_ADC_Init+0xc2>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d102      	bne.n	800184c <HAL_ADC_Init+0xc8>
 8001846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184a:	e000      	b.n	800184e <HAL_ADC_Init+0xca>
 800184c:	2300      	movs	r3, #0
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7d1b      	ldrb	r3, [r3, #20]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d119      	bne.n	8001890 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7b1b      	ldrb	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d109      	bne.n	8001878 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	3b01      	subs	r3, #1
 800186a:	035a      	lsls	r2, r3, #13
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	e00b      	b.n	8001890 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	f043 0220 	orr.w	r2, r3, #32
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	f043 0201 	orr.w	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <HAL_ADC_Init+0x1cc>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	68b9      	ldr	r1, [r7, #8]
 80018b4:	430b      	orrs	r3, r1
 80018b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c0:	d003      	beq.n	80018ca <HAL_ADC_Init+0x146>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d104      	bne.n	80018d4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	051b      	lsls	r3, r3, #20
 80018d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_ADC_Init+0x1d0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d10b      	bne.n	8001910 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	f023 0303 	bic.w	r3, r3, #3
 8001906:	f043 0201 	orr.w	r2, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800190e:	e018      	b.n	8001942 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f023 0312 	bic.w	r3, r3, #18
 8001918:	f043 0210 	orr.w	r2, r3, #16
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	f043 0201 	orr.w	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001930:	e007      	b.n	8001942 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	f043 0210 	orr.w	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001942:	7dfb      	ldrb	r3, [r7, #23]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40013c00 	.word	0x40013c00
 8001950:	ffe1f7fd 	.word	0xffe1f7fd
 8001954:	ff1f0efe 	.word	0xff1f0efe

08001958 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x20>
 8001974:	2302      	movs	r3, #2
 8001976:	e0dc      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x1da>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b06      	cmp	r3, #6
 8001986:	d81c      	bhi.n	80019c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b05      	subs	r3, #5
 800199a:	221f      	movs	r2, #31
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4019      	ands	r1, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	3b05      	subs	r3, #5
 80019b4:	fa00 f203 	lsl.w	r2, r0, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	635a      	str	r2, [r3, #52]	; 0x34
 80019c0:	e03c      	b.n	8001a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d81c      	bhi.n	8001a04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	3b23      	subs	r3, #35	; 0x23
 80019dc:	221f      	movs	r2, #31
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	4019      	ands	r1, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	3b23      	subs	r3, #35	; 0x23
 80019f6:	fa00 f203 	lsl.w	r2, r0, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
 8001a02:	e01b      	b.n	8001a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b41      	subs	r3, #65	; 0x41
 8001a16:	221f      	movs	r2, #31
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4019      	ands	r1, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3b41      	subs	r3, #65	; 0x41
 8001a30:	fa00 f203 	lsl.w	r2, r0, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b09      	cmp	r3, #9
 8001a42:	d91c      	bls.n	8001a7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68d9      	ldr	r1, [r3, #12]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	3b1e      	subs	r3, #30
 8001a56:	2207      	movs	r2, #7
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4019      	ands	r1, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6898      	ldr	r0, [r3, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b1e      	subs	r3, #30
 8001a70:	fa00 f203 	lsl.w	r2, r0, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	e019      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6919      	ldr	r1, [r3, #16]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2207      	movs	r2, #7
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4019      	ands	r1, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6898      	ldr	r0, [r3, #8]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d003      	beq.n	8001ac2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001abe:	2b11      	cmp	r3, #17
 8001ac0:	d132      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_ADC_ConfigChannel+0x1e4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d125      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d126      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ae8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d11a      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_ADC_ConfigChannel+0x1e8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <HAL_ADC_ConfigChannel+0x1ec>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	0c9a      	lsrs	r2, r3, #18
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b08:	e002      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f9      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x1b2>
 8001b16:	e007      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f043 0220 	orr.w	r2, r3, #32
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40012400 	.word	0x40012400
 8001b40:	20000004 	.word	0x20000004
 8001b44:	431bde83 	.word	0x431bde83

08001b48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d12e      	bne.n	8001bc0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b72:	f7ff fdd9 	bl	8001728 <HAL_GetTick>
 8001b76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b78:	e01b      	b.n	8001bb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b7a:	f7ff fdd5 	bl	8001728 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d914      	bls.n	8001bb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d10d      	bne.n	8001bb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	f043 0210 	orr.w	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e007      	b.n	8001bc2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d0dc      	beq.n	8001b7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db0b      	blt.n	8001c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	4906      	ldr	r1, [pc, #24]	; (8001c64 <__NVIC_EnableIRQ+0x34>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	2001      	movs	r0, #1
 8001c52:	fa00 f202 	lsl.w	r2, r0, r2
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d44:	f7ff ff90 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff2d 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8c:	f7ff ff42 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7ff ff90 	bl	8001cbc <NVIC_EncodePriority>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff5f 	bl	8001c68 <__NVIC_SetPriority>
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff35 	bl	8001c30 <__NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffa2 	bl	8001d20 <SysTick_Config>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d008      	beq.n	8001e0e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e020      	b.n	8001e50 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 020e 	bic.w	r2, r2, #14
 8001e1c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0201 	bic.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
	...

08001e5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d005      	beq.n	8001e7e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2204      	movs	r2, #4
 8001e76:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e0d6      	b.n	800202c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 020e 	bic.w	r2, r2, #14
 8001e8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b64      	ldr	r3, [pc, #400]	; (8002038 <HAL_DMA_Abort_IT+0x1dc>)
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d958      	bls.n	8001f5c <HAL_DMA_Abort_IT+0x100>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a63      	ldr	r2, [pc, #396]	; (800203c <HAL_DMA_Abort_IT+0x1e0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d04f      	beq.n	8001f54 <HAL_DMA_Abort_IT+0xf8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a61      	ldr	r2, [pc, #388]	; (8002040 <HAL_DMA_Abort_IT+0x1e4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d048      	beq.n	8001f50 <HAL_DMA_Abort_IT+0xf4>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a60      	ldr	r2, [pc, #384]	; (8002044 <HAL_DMA_Abort_IT+0x1e8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d040      	beq.n	8001f4a <HAL_DMA_Abort_IT+0xee>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a5e      	ldr	r2, [pc, #376]	; (8002048 <HAL_DMA_Abort_IT+0x1ec>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d038      	beq.n	8001f44 <HAL_DMA_Abort_IT+0xe8>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a5d      	ldr	r2, [pc, #372]	; (800204c <HAL_DMA_Abort_IT+0x1f0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d030      	beq.n	8001f3e <HAL_DMA_Abort_IT+0xe2>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a5b      	ldr	r2, [pc, #364]	; (8002050 <HAL_DMA_Abort_IT+0x1f4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d028      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xdc>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a53      	ldr	r2, [pc, #332]	; (8002038 <HAL_DMA_Abort_IT+0x1dc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d020      	beq.n	8001f32 <HAL_DMA_Abort_IT+0xd6>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a57      	ldr	r2, [pc, #348]	; (8002054 <HAL_DMA_Abort_IT+0x1f8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d019      	beq.n	8001f2e <HAL_DMA_Abort_IT+0xd2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a56      	ldr	r2, [pc, #344]	; (8002058 <HAL_DMA_Abort_IT+0x1fc>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d012      	beq.n	8001f2a <HAL_DMA_Abort_IT+0xce>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a54      	ldr	r2, [pc, #336]	; (800205c <HAL_DMA_Abort_IT+0x200>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00a      	beq.n	8001f24 <HAL_DMA_Abort_IT+0xc8>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a53      	ldr	r2, [pc, #332]	; (8002060 <HAL_DMA_Abort_IT+0x204>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d102      	bne.n	8001f1e <HAL_DMA_Abort_IT+0xc2>
 8001f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1c:	e01b      	b.n	8001f56 <HAL_DMA_Abort_IT+0xfa>
 8001f1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f22:	e018      	b.n	8001f56 <HAL_DMA_Abort_IT+0xfa>
 8001f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f28:	e015      	b.n	8001f56 <HAL_DMA_Abort_IT+0xfa>
 8001f2a:	2310      	movs	r3, #16
 8001f2c:	e013      	b.n	8001f56 <HAL_DMA_Abort_IT+0xfa>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e011      	b.n	8001f56 <HAL_DMA_Abort_IT+0xfa>
 8001f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f36:	e00e      	b.n	8001f56 <HAL_DMA_Abort_IT+0xfa>
 8001f38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f3c:	e00b      	b.n	8001f56 <HAL_DMA_Abort_IT+0xfa>
 8001f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f42:	e008      	b.n	8001f56 <HAL_DMA_Abort_IT+0xfa>
 8001f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f48:	e005      	b.n	8001f56 <HAL_DMA_Abort_IT+0xfa>
 8001f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f4e:	e002      	b.n	8001f56 <HAL_DMA_Abort_IT+0xfa>
 8001f50:	2310      	movs	r3, #16
 8001f52:	e000      	b.n	8001f56 <HAL_DMA_Abort_IT+0xfa>
 8001f54:	2301      	movs	r3, #1
 8001f56:	4a43      	ldr	r2, [pc, #268]	; (8002064 <HAL_DMA_Abort_IT+0x208>)
 8001f58:	6053      	str	r3, [r2, #4]
 8001f5a:	e057      	b.n	800200c <HAL_DMA_Abort_IT+0x1b0>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a36      	ldr	r2, [pc, #216]	; (800203c <HAL_DMA_Abort_IT+0x1e0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d04f      	beq.n	8002006 <HAL_DMA_Abort_IT+0x1aa>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a35      	ldr	r2, [pc, #212]	; (8002040 <HAL_DMA_Abort_IT+0x1e4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d048      	beq.n	8002002 <HAL_DMA_Abort_IT+0x1a6>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a33      	ldr	r2, [pc, #204]	; (8002044 <HAL_DMA_Abort_IT+0x1e8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d040      	beq.n	8001ffc <HAL_DMA_Abort_IT+0x1a0>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a32      	ldr	r2, [pc, #200]	; (8002048 <HAL_DMA_Abort_IT+0x1ec>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d038      	beq.n	8001ff6 <HAL_DMA_Abort_IT+0x19a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a30      	ldr	r2, [pc, #192]	; (800204c <HAL_DMA_Abort_IT+0x1f0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d030      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x194>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a2f      	ldr	r2, [pc, #188]	; (8002050 <HAL_DMA_Abort_IT+0x1f4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d028      	beq.n	8001fea <HAL_DMA_Abort_IT+0x18e>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a26      	ldr	r2, [pc, #152]	; (8002038 <HAL_DMA_Abort_IT+0x1dc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d020      	beq.n	8001fe4 <HAL_DMA_Abort_IT+0x188>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <HAL_DMA_Abort_IT+0x1f8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d019      	beq.n	8001fe0 <HAL_DMA_Abort_IT+0x184>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a29      	ldr	r2, [pc, #164]	; (8002058 <HAL_DMA_Abort_IT+0x1fc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d012      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x180>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a28      	ldr	r2, [pc, #160]	; (800205c <HAL_DMA_Abort_IT+0x200>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_DMA_Abort_IT+0x17a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a26      	ldr	r2, [pc, #152]	; (8002060 <HAL_DMA_Abort_IT+0x204>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d102      	bne.n	8001fd0 <HAL_DMA_Abort_IT+0x174>
 8001fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fce:	e01b      	b.n	8002008 <HAL_DMA_Abort_IT+0x1ac>
 8001fd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fd4:	e018      	b.n	8002008 <HAL_DMA_Abort_IT+0x1ac>
 8001fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fda:	e015      	b.n	8002008 <HAL_DMA_Abort_IT+0x1ac>
 8001fdc:	2310      	movs	r3, #16
 8001fde:	e013      	b.n	8002008 <HAL_DMA_Abort_IT+0x1ac>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e011      	b.n	8002008 <HAL_DMA_Abort_IT+0x1ac>
 8001fe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fe8:	e00e      	b.n	8002008 <HAL_DMA_Abort_IT+0x1ac>
 8001fea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fee:	e00b      	b.n	8002008 <HAL_DMA_Abort_IT+0x1ac>
 8001ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff4:	e008      	b.n	8002008 <HAL_DMA_Abort_IT+0x1ac>
 8001ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffa:	e005      	b.n	8002008 <HAL_DMA_Abort_IT+0x1ac>
 8001ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002000:	e002      	b.n	8002008 <HAL_DMA_Abort_IT+0x1ac>
 8002002:	2310      	movs	r3, #16
 8002004:	e000      	b.n	8002008 <HAL_DMA_Abort_IT+0x1ac>
 8002006:	2301      	movs	r3, #1
 8002008:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_DMA_Abort_IT+0x20c>)
 800200a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
    } 
  }
  return status;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40020080 	.word	0x40020080
 800203c:	40020008 	.word	0x40020008
 8002040:	4002001c 	.word	0x4002001c
 8002044:	40020030 	.word	0x40020030
 8002048:	40020044 	.word	0x40020044
 800204c:	40020058 	.word	0x40020058
 8002050:	4002006c 	.word	0x4002006c
 8002054:	40020408 	.word	0x40020408
 8002058:	4002041c 	.word	0x4002041c
 800205c:	40020430 	.word	0x40020430
 8002060:	40020444 	.word	0x40020444
 8002064:	40020400 	.word	0x40020400
 8002068:	40020000 	.word	0x40020000

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b08b      	sub	sp, #44	; 0x2c
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207e:	e179      	b.n	8002374 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002080:	2201      	movs	r2, #1
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	429a      	cmp	r2, r3
 800209a:	f040 8168 	bne.w	800236e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4aa0      	ldr	r2, [pc, #640]	; (8002324 <HAL_GPIO_Init+0x2b8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d05e      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020a8:	4a9e      	ldr	r2, [pc, #632]	; (8002324 <HAL_GPIO_Init+0x2b8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d875      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020ae:	4a9e      	ldr	r2, [pc, #632]	; (8002328 <HAL_GPIO_Init+0x2bc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d058      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020b4:	4a9c      	ldr	r2, [pc, #624]	; (8002328 <HAL_GPIO_Init+0x2bc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d86f      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020ba:	4a9c      	ldr	r2, [pc, #624]	; (800232c <HAL_GPIO_Init+0x2c0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d052      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020c0:	4a9a      	ldr	r2, [pc, #616]	; (800232c <HAL_GPIO_Init+0x2c0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d869      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020c6:	4a9a      	ldr	r2, [pc, #616]	; (8002330 <HAL_GPIO_Init+0x2c4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d04c      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020cc:	4a98      	ldr	r2, [pc, #608]	; (8002330 <HAL_GPIO_Init+0x2c4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d863      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020d2:	4a98      	ldr	r2, [pc, #608]	; (8002334 <HAL_GPIO_Init+0x2c8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d046      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020d8:	4a96      	ldr	r2, [pc, #600]	; (8002334 <HAL_GPIO_Init+0x2c8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d85d      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020de:	2b12      	cmp	r3, #18
 80020e0:	d82a      	bhi.n	8002138 <HAL_GPIO_Init+0xcc>
 80020e2:	2b12      	cmp	r3, #18
 80020e4:	d859      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020e6:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <HAL_GPIO_Init+0x80>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	08002167 	.word	0x08002167
 80020f0:	08002141 	.word	0x08002141
 80020f4:	08002153 	.word	0x08002153
 80020f8:	08002195 	.word	0x08002195
 80020fc:	0800219b 	.word	0x0800219b
 8002100:	0800219b 	.word	0x0800219b
 8002104:	0800219b 	.word	0x0800219b
 8002108:	0800219b 	.word	0x0800219b
 800210c:	0800219b 	.word	0x0800219b
 8002110:	0800219b 	.word	0x0800219b
 8002114:	0800219b 	.word	0x0800219b
 8002118:	0800219b 	.word	0x0800219b
 800211c:	0800219b 	.word	0x0800219b
 8002120:	0800219b 	.word	0x0800219b
 8002124:	0800219b 	.word	0x0800219b
 8002128:	0800219b 	.word	0x0800219b
 800212c:	0800219b 	.word	0x0800219b
 8002130:	08002149 	.word	0x08002149
 8002134:	0800215d 	.word	0x0800215d
 8002138:	4a7f      	ldr	r2, [pc, #508]	; (8002338 <HAL_GPIO_Init+0x2cc>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800213e:	e02c      	b.n	800219a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	623b      	str	r3, [r7, #32]
          break;
 8002146:	e029      	b.n	800219c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	3304      	adds	r3, #4
 800214e:	623b      	str	r3, [r7, #32]
          break;
 8002150:	e024      	b.n	800219c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	3308      	adds	r3, #8
 8002158:	623b      	str	r3, [r7, #32]
          break;
 800215a:	e01f      	b.n	800219c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	330c      	adds	r3, #12
 8002162:	623b      	str	r3, [r7, #32]
          break;
 8002164:	e01a      	b.n	800219c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800216e:	2304      	movs	r3, #4
 8002170:	623b      	str	r3, [r7, #32]
          break;
 8002172:	e013      	b.n	800219c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800217c:	2308      	movs	r3, #8
 800217e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	611a      	str	r2, [r3, #16]
          break;
 8002186:	e009      	b.n	800219c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002188:	2308      	movs	r3, #8
 800218a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	615a      	str	r2, [r3, #20]
          break;
 8002192:	e003      	b.n	800219c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
          break;
 8002198:	e000      	b.n	800219c <HAL_GPIO_Init+0x130>
          break;
 800219a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2bff      	cmp	r3, #255	; 0xff
 80021a0:	d801      	bhi.n	80021a6 <HAL_GPIO_Init+0x13a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	e001      	b.n	80021aa <HAL_GPIO_Init+0x13e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3304      	adds	r3, #4
 80021aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2bff      	cmp	r3, #255	; 0xff
 80021b0:	d802      	bhi.n	80021b8 <HAL_GPIO_Init+0x14c>
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	e002      	b.n	80021be <HAL_GPIO_Init+0x152>
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	3b08      	subs	r3, #8
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	210f      	movs	r1, #15
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	401a      	ands	r2, r3
 80021d0:	6a39      	ldr	r1, [r7, #32]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	431a      	orrs	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80c1 	beq.w	800236e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021ec:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_GPIO_Init+0x2d0>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a52      	ldr	r2, [pc, #328]	; (800233c <HAL_GPIO_Init+0x2d0>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b50      	ldr	r3, [pc, #320]	; (800233c <HAL_GPIO_Init+0x2d0>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002204:	4a4e      	ldr	r2, [pc, #312]	; (8002340 <HAL_GPIO_Init+0x2d4>)
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	3302      	adds	r3, #2
 800220c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002210:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a46      	ldr	r2, [pc, #280]	; (8002344 <HAL_GPIO_Init+0x2d8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d01f      	beq.n	8002270 <HAL_GPIO_Init+0x204>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a45      	ldr	r2, [pc, #276]	; (8002348 <HAL_GPIO_Init+0x2dc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d019      	beq.n	800226c <HAL_GPIO_Init+0x200>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a44      	ldr	r2, [pc, #272]	; (800234c <HAL_GPIO_Init+0x2e0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d013      	beq.n	8002268 <HAL_GPIO_Init+0x1fc>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a43      	ldr	r2, [pc, #268]	; (8002350 <HAL_GPIO_Init+0x2e4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00d      	beq.n	8002264 <HAL_GPIO_Init+0x1f8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a42      	ldr	r2, [pc, #264]	; (8002354 <HAL_GPIO_Init+0x2e8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d007      	beq.n	8002260 <HAL_GPIO_Init+0x1f4>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a41      	ldr	r2, [pc, #260]	; (8002358 <HAL_GPIO_Init+0x2ec>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d101      	bne.n	800225c <HAL_GPIO_Init+0x1f0>
 8002258:	2305      	movs	r3, #5
 800225a:	e00a      	b.n	8002272 <HAL_GPIO_Init+0x206>
 800225c:	2306      	movs	r3, #6
 800225e:	e008      	b.n	8002272 <HAL_GPIO_Init+0x206>
 8002260:	2304      	movs	r3, #4
 8002262:	e006      	b.n	8002272 <HAL_GPIO_Init+0x206>
 8002264:	2303      	movs	r3, #3
 8002266:	e004      	b.n	8002272 <HAL_GPIO_Init+0x206>
 8002268:	2302      	movs	r3, #2
 800226a:	e002      	b.n	8002272 <HAL_GPIO_Init+0x206>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_GPIO_Init+0x206>
 8002270:	2300      	movs	r3, #0
 8002272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002274:	f002 0203 	and.w	r2, r2, #3
 8002278:	0092      	lsls	r2, r2, #2
 800227a:	4093      	lsls	r3, r2
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002282:	492f      	ldr	r1, [pc, #188]	; (8002340 <HAL_GPIO_Init+0x2d4>)
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800229c:	4b2f      	ldr	r3, [pc, #188]	; (800235c <HAL_GPIO_Init+0x2f0>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	492e      	ldr	r1, [pc, #184]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022aa:	4b2c      	ldr	r3, [pc, #176]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	492a      	ldr	r1, [pc, #168]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022c4:	4b25      	ldr	r3, [pc, #148]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4924      	ldr	r1, [pc, #144]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	43db      	mvns	r3, r3
 80022da:	4920      	ldr	r1, [pc, #128]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022dc:	4013      	ands	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	491a      	ldr	r1, [pc, #104]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	43db      	mvns	r3, r3
 8002302:	4916      	ldr	r1, [pc, #88]	; (800235c <HAL_GPIO_Init+0x2f0>)
 8002304:	4013      	ands	r3, r2
 8002306:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d025      	beq.n	8002360 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_GPIO_Init+0x2f0>)
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	4910      	ldr	r1, [pc, #64]	; (800235c <HAL_GPIO_Init+0x2f0>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	60cb      	str	r3, [r1, #12]
 8002320:	e025      	b.n	800236e <HAL_GPIO_Init+0x302>
 8002322:	bf00      	nop
 8002324:	10320000 	.word	0x10320000
 8002328:	10310000 	.word	0x10310000
 800232c:	10220000 	.word	0x10220000
 8002330:	10210000 	.word	0x10210000
 8002334:	10120000 	.word	0x10120000
 8002338:	10110000 	.word	0x10110000
 800233c:	40021000 	.word	0x40021000
 8002340:	40010000 	.word	0x40010000
 8002344:	40010800 	.word	0x40010800
 8002348:	40010c00 	.word	0x40010c00
 800234c:	40011000 	.word	0x40011000
 8002350:	40011400 	.word	0x40011400
 8002354:	40011800 	.word	0x40011800
 8002358:	40011c00 	.word	0x40011c00
 800235c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_GPIO_Init+0x324>)
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	43db      	mvns	r3, r3
 8002368:	4909      	ldr	r1, [pc, #36]	; (8002390 <HAL_GPIO_Init+0x324>)
 800236a:	4013      	ands	r3, r2
 800236c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	3301      	adds	r3, #1
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	f47f ae7e 	bne.w	8002080 <HAL_GPIO_Init+0x14>
  }
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	372c      	adds	r7, #44	; 0x2c
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	40010400 	.word	0x40010400

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023b0:	e003      	b.n	80023ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023b2:	887b      	ldrh	r3, [r7, #2]
 80023b4:	041a      	lsls	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	611a      	str	r2, [r3, #16]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e26c      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8087 	beq.w	80024f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e4:	4b92      	ldr	r3, [pc, #584]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d00c      	beq.n	800240a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f0:	4b8f      	ldr	r3, [pc, #572]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d112      	bne.n	8002422 <HAL_RCC_OscConfig+0x5e>
 80023fc:	4b8c      	ldr	r3, [pc, #560]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d10b      	bne.n	8002422 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240a:	4b89      	ldr	r3, [pc, #548]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d06c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x12c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d168      	bne.n	80024f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e246      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x76>
 800242c:	4b80      	ldr	r3, [pc, #512]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a7f      	ldr	r2, [pc, #508]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e02e      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x98>
 8002442:	4b7b      	ldr	r3, [pc, #492]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7a      	ldr	r2, [pc, #488]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b78      	ldr	r3, [pc, #480]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a77      	ldr	r2, [pc, #476]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e01d      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0xbc>
 8002466:	4b72      	ldr	r3, [pc, #456]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a71      	ldr	r2, [pc, #452]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800246c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b6f      	ldr	r3, [pc, #444]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6e      	ldr	r2, [pc, #440]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 8002480:	4b6b      	ldr	r3, [pc, #428]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a6a      	ldr	r2, [pc, #424]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a67      	ldr	r2, [pc, #412]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff f942 	bl	8001728 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff f93e 	bl	8001728 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1fa      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0xe4>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff f92e 	bl	8001728 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff f92a 	bl	8001728 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1e6      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x10c>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d063      	beq.n	80025c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fe:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00b      	beq.n	8002522 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800250a:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b08      	cmp	r3, #8
 8002514:	d11c      	bne.n	8002550 <HAL_RCC_OscConfig+0x18c>
 8002516:	4b46      	ldr	r3, [pc, #280]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d116      	bne.n	8002550 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	4b43      	ldr	r3, [pc, #268]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_RCC_OscConfig+0x176>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e1ba      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4939      	ldr	r1, [pc, #228]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	e03a      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff f8e3 	bl	8001728 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7ff f8df 	bl	8001728 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e19b      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4927      	ldr	r1, [pc, #156]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
 8002598:	e015      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7ff f8c2 	bl	8001728 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a8:	f7ff f8be 	bl	8001728 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e17a      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d03a      	beq.n	8002648 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d019      	beq.n	800260e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_RCC_OscConfig+0x274>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7ff f8a2 	bl	8001728 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e8:	f7ff f89e 	bl	8001728 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e15a      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002606:	2001      	movs	r0, #1
 8002608:	f000 fad8 	bl	8002bbc <RCC_Delay>
 800260c:	e01c      	b.n	8002648 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_RCC_OscConfig+0x274>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7ff f888 	bl	8001728 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261a:	e00f      	b.n	800263c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261c:	f7ff f884 	bl	8001728 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d908      	bls.n	800263c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e140      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	42420000 	.word	0x42420000
 8002638:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	4b9e      	ldr	r3, [pc, #632]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1e9      	bne.n	800261c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80a6 	beq.w	80027a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265a:	4b97      	ldr	r3, [pc, #604]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10d      	bne.n	8002682 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	4b94      	ldr	r3, [pc, #592]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	4a93      	ldr	r2, [pc, #588]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	61d3      	str	r3, [r2, #28]
 8002672:	4b91      	ldr	r3, [pc, #580]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b8e      	ldr	r3, [pc, #568]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d118      	bne.n	80026c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268e:	4b8b      	ldr	r3, [pc, #556]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a8a      	ldr	r2, [pc, #552]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269a:	f7ff f845 	bl	8001728 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a2:	f7ff f841 	bl	8001728 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b64      	cmp	r3, #100	; 0x64
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0fd      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	4b81      	ldr	r3, [pc, #516]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x312>
 80026c8:	4b7b      	ldr	r3, [pc, #492]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a7a      	ldr	r2, [pc, #488]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	e02d      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x334>
 80026de:	4b76      	ldr	r3, [pc, #472]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4a75      	ldr	r2, [pc, #468]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	6213      	str	r3, [r2, #32]
 80026ea:	4b73      	ldr	r3, [pc, #460]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4a72      	ldr	r2, [pc, #456]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	f023 0304 	bic.w	r3, r3, #4
 80026f4:	6213      	str	r3, [r2, #32]
 80026f6:	e01c      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b05      	cmp	r3, #5
 80026fe:	d10c      	bne.n	800271a <HAL_RCC_OscConfig+0x356>
 8002700:	4b6d      	ldr	r3, [pc, #436]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a6c      	ldr	r2, [pc, #432]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a69      	ldr	r2, [pc, #420]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	e00b      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 800271a:	4b67      	ldr	r3, [pc, #412]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a66      	ldr	r2, [pc, #408]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	4b64      	ldr	r3, [pc, #400]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a63      	ldr	r2, [pc, #396]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d015      	beq.n	8002766 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273a:	f7fe fff5 	bl	8001728 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7fe fff1 	bl	8001728 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0ab      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	4b57      	ldr	r3, [pc, #348]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ee      	beq.n	8002742 <HAL_RCC_OscConfig+0x37e>
 8002764:	e014      	b.n	8002790 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7fe ffdf 	bl	8001728 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe ffdb 	bl	8001728 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e095      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002784:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ee      	bne.n	800276e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002796:	4b48      	ldr	r3, [pc, #288]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4a47      	ldr	r2, [pc, #284]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8081 	beq.w	80028ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ac:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d061      	beq.n	800287c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d146      	bne.n	800284e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c0:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <HAL_RCC_OscConfig+0x4fc>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7fe ffaf 	bl	8001728 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ce:	f7fe ffab 	bl	8001728 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e067      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d108      	bne.n	8002808 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027f6:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	492d      	ldr	r1, [pc, #180]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a19      	ldr	r1, [r3, #32]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	430b      	orrs	r3, r1
 800281a:	4927      	ldr	r1, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_RCC_OscConfig+0x4fc>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe ff7f 	bl	8001728 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe ff7b 	bl	8001728 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e037      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x46a>
 800284c:	e02f      	b.n	80028ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <HAL_RCC_OscConfig+0x4fc>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe ff68 	bl	8001728 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe ff64 	bl	8001728 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e020      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x498>
 800287a:	e018      	b.n	80028ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e013      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	429a      	cmp	r2, r3
 800289a:	d106      	bne.n	80028aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40007000 	.word	0x40007000
 80028c0:	42420060 	.word	0x42420060

080028c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0d0      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d910      	bls.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	4965      	ldr	r1, [pc, #404]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b8      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4a58      	ldr	r2, [pc, #352]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800292a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002942:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	494d      	ldr	r1, [pc, #308]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d040      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d115      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e07f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e073      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06b      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4936      	ldr	r1, [pc, #216]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b4:	f7fe feb8 	bl	8001728 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe feb4 	bl	8001728 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e053      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d210      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 0207 	bic.w	r2, r3, #7
 80029fa:	4922      	ldr	r1, [pc, #136]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e032      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4916      	ldr	r1, [pc, #88]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	490e      	ldr	r1, [pc, #56]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a52:	f000 f821 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8002a56:	4602      	mov	r2, r0
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	490a      	ldr	r1, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	5ccb      	ldrb	r3, [r1, r3]
 8002a66:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1cc>)
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1d0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe fe16 	bl	80016a4 <HAL_InitTick>

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40022000 	.word	0x40022000
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	08006868 	.word	0x08006868
 8002a90:	20000004 	.word	0x20000004
 8002a94:	20000008 	.word	0x20000008

08002a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a98:	b490      	push	{r4, r7}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a9e:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002aa0:	1d3c      	adds	r4, r7, #4
 8002aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aa8:	f240 2301 	movw	r3, #513	; 0x201
 8002aac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x46>
 8002ad6:	e02d      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ada:	623b      	str	r3, [r7, #32]
      break;
 8002adc:	e02d      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	0c9b      	lsrs	r3, r3, #18
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aea:	4413      	add	r3, r2
 8002aec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002af0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	0c5b      	lsrs	r3, r3, #17
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b16:	fb02 f203 	mul.w	r2, r2, r3
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
 8002b22:	e004      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b28:	fb02 f303 	mul.w	r3, r2, r3
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	623b      	str	r3, [r7, #32]
      break;
 8002b32:	e002      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b36:	623b      	str	r3, [r7, #32]
      break;
 8002b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3728      	adds	r7, #40	; 0x28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc90      	pop	{r4, r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	08006830 	.word	0x08006830
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	007a1200 	.word	0x007a1200
 8002b54:	003d0900 	.word	0x003d0900

08002b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b5c:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	20000004 	.word	0x20000004

08002b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b70:	f7ff fff2 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	4903      	ldr	r1, [pc, #12]	; (8002b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08006878 	.word	0x08006878

08002b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b98:	f7ff ffde 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	0adb      	lsrs	r3, r3, #11
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4903      	ldr	r1, [pc, #12]	; (8002bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08006878 	.word	0x08006878

08002bbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <RCC_Delay+0x34>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <RCC_Delay+0x38>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0a5b      	lsrs	r3, r3, #9
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd8:	bf00      	nop
  }
  while (Delay --);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	60fa      	str	r2, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f9      	bne.n	8002bd8 <RCC_Delay+0x1c>
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	20000004 	.word	0x20000004
 8002bf4:	10624dd3 	.word	0x10624dd3

08002bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d07d      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c14:	2300      	movs	r3, #0
 8002c16:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c18:	4b4f      	ldr	r3, [pc, #316]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10d      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b4c      	ldr	r3, [pc, #304]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	4a4b      	ldr	r2, [pc, #300]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	61d3      	str	r3, [r2, #28]
 8002c30:	4b49      	ldr	r3, [pc, #292]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c40:	4b46      	ldr	r3, [pc, #280]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d118      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4c:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a42      	ldr	r2, [pc, #264]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c58:	f7fe fd66 	bl	8001728 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5e:	e008      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe fd62 	bl	8001728 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e06d      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4b3a      	ldr	r3, [pc, #232]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c7e:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02e      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d027      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c9c:	4b2e      	ldr	r3, [pc, #184]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ca6:	4b2e      	ldr	r3, [pc, #184]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cac:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cb2:	4a29      	ldr	r2, [pc, #164]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d014      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7fe fd31 	bl	8001728 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc8:	e00a      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cca:	f7fe fd2d 	bl	8001728 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e036      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0ee      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cec:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4917      	ldr	r1, [pc, #92]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d04:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	490b      	ldr	r1, [pc, #44]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	4904      	ldr	r1, [pc, #16]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	42420440 	.word	0x42420440

08002d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e04a      	b.n	8002e0c <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d111      	bne.n	8002da6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fabe 	bl	800330c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <HAL_UART_Init+0xb0>)
 8002d9c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2224      	movs	r2, #36	; 0x24
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dbc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fc78 	bl	80036b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	08001585 	.word	0x08001585

08002e18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d17c      	bne.n	8002f32 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Transmit+0x2c>
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e075      	b.n	8002f34 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Transmit+0x3e>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e06e      	b.n	8002f34 <HAL_UART_Transmit+0x11c>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2221      	movs	r2, #33	; 0x21
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fc5c 	bl	8001728 <HAL_GetTick>
 8002e70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	88fa      	ldrh	r2, [r7, #6]
 8002e76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	88fa      	ldrh	r2, [r7, #6]
 8002e7c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e86:	d108      	bne.n	8002e9a <HAL_UART_Transmit+0x82>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d104      	bne.n	8002e9a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	e003      	b.n	8002ea2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002eaa:	e02a      	b.n	8002f02 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2180      	movs	r1, #128	; 0x80
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fa5e 	bl	8003378 <UART_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e036      	b.n	8002f34 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eda:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	3302      	adds	r3, #2
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e007      	b.n	8002ef4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1cf      	bne.n	8002eac <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2200      	movs	r2, #0
 8002f14:	2140      	movs	r1, #64	; 0x40
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fa2e 	bl	8003378 <UART_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e006      	b.n	8002f34 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e000      	b.n	8002f34 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f32:	2302      	movs	r3, #2
  }
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10d      	bne.n	8002f8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_UART_IRQHandler+0x52>
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fae9 	bl	800355e <UART_Receive_IT>
      return;
 8002f8c:	e180      	b.n	8003290 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80b4 	beq.w	80030fe <HAL_UART_IRQHandler+0x1c2>
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d105      	bne.n	8002fac <HAL_UART_IRQHandler+0x70>
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80a9 	beq.w	80030fe <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_UART_IRQHandler+0x90>
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_UART_IRQHandler+0xb0>
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f043 0202 	orr.w	r2, r3, #2
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_UART_IRQHandler+0xd0>
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f043 0204 	orr.w	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00f      	beq.n	8003036 <HAL_UART_IRQHandler+0xfa>
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d104      	bne.n	800302a <HAL_UART_IRQHandler+0xee>
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f043 0208 	orr.w	r2, r3, #8
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8123 	beq.w	8003286 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <HAL_UART_IRQHandler+0x11e>
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fa82 	bl	800355e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d102      	bne.n	8003082 <HAL_UART_IRQHandler+0x146>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d033      	beq.n	80030ea <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9c2 	bl	800340c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d024      	beq.n	80030e0 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d013      	beq.n	80030d6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	4a79      	ldr	r2, [pc, #484]	; (8003298 <HAL_UART_IRQHandler+0x35c>)
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fece 	bl	8001e5c <HAL_DMA_Abort_IT>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d019      	beq.n	80030fa <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030d0:	4610      	mov	r0, r2
 80030d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d4:	e011      	b.n	80030fa <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030de:	e00c      	b.n	80030fa <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e8:	e007      	b.n	80030fa <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030f8:	e0c5      	b.n	8003286 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fa:	bf00      	nop
    return;
 80030fc:	e0c3      	b.n	8003286 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	2b01      	cmp	r3, #1
 8003104:	f040 80a3 	bne.w	800324e <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 809d 	beq.w	800324e <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8097 	beq.w	800324e <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d04f      	beq.n	80031e4 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800314e:	8a3b      	ldrh	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 809a 	beq.w	800328a <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800315a:	8a3a      	ldrh	r2, [r7, #16]
 800315c:	429a      	cmp	r2, r3
 800315e:	f080 8094 	bcs.w	800328a <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	8a3a      	ldrh	r2, [r7, #16]
 8003166:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b20      	cmp	r3, #32
 8003170:	d02b      	beq.n	80031ca <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003180:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0210 	bic.w	r2, r2, #16
 80031be:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe fe0e 	bl	8001de6 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80031d6:	b292      	uxth	r2, r2
 80031d8:	1a8a      	subs	r2, r1, r2
 80031da:	b292      	uxth	r2, r2
 80031dc:	4611      	mov	r1, r2
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 80031e2:	e052      	b.n	800328a <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d048      	beq.n	800328e <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 80031fc:	8a7b      	ldrh	r3, [r7, #18]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d045      	beq.n	800328e <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003210:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0210 	bic.w	r2, r2, #16
 800323e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003244:	8a7a      	ldrh	r2, [r7, #18]
 8003246:	4611      	mov	r1, r2
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 800324c:	e01f      	b.n	800328e <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_UART_IRQHandler+0x32e>
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f913 	bl	800348e <UART_Transmit_IT>
    return;
 8003268:	e012      	b.n	8003290 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00d      	beq.n	8003290 <HAL_UART_IRQHandler+0x354>
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f954 	bl	800352c <UART_EndTransmit_IT>
    return;
 8003284:	e004      	b.n	8003290 <HAL_UART_IRQHandler+0x354>
    return;
 8003286:	bf00      	nop
 8003288:	e002      	b.n	8003290 <HAL_UART_IRQHandler+0x354>
      return;
 800328a:	bf00      	nop
 800328c:	e000      	b.n	8003290 <HAL_UART_IRQHandler+0x354>
      return;
 800328e:	bf00      	nop
  }
}
 8003290:	3728      	adds	r7, #40	; 0x28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	08003465 	.word	0x08003465

0800329c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	460b      	mov	r3, r1
 8003300:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a0f      	ldr	r2, [pc, #60]	; (8003354 <UART_InitCallbacksToDefault+0x48>)
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a0e      	ldr	r2, [pc, #56]	; (8003358 <UART_InitCallbacksToDefault+0x4c>)
 800331e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a0e      	ldr	r2, [pc, #56]	; (800335c <UART_InitCallbacksToDefault+0x50>)
 8003324:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <UART_InitCallbacksToDefault+0x54>)
 800332a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <UART_InitCallbacksToDefault+0x58>)
 8003330:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <UART_InitCallbacksToDefault+0x5c>)
 8003336:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a0c      	ldr	r2, [pc, #48]	; (800336c <UART_InitCallbacksToDefault+0x60>)
 800333c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <UART_InitCallbacksToDefault+0x64>)
 8003342:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <UART_InitCallbacksToDefault+0x68>)
 8003348:	669a      	str	r2, [r3, #104]	; 0x68

}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	0800329d 	.word	0x0800329d
 8003358:	08001099 	.word	0x08001099
 800335c:	080032af 	.word	0x080032af
 8003360:	080010b5 	.word	0x080010b5
 8003364:	080010d1 	.word	0x080010d1
 8003368:	080032c1 	.word	0x080032c1
 800336c:	080032d3 	.word	0x080032d3
 8003370:	080032e5 	.word	0x080032e5
 8003374:	080032f7 	.word	0x080032f7

08003378 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003388:	e02c      	b.n	80033e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003390:	d028      	beq.n	80033e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003398:	f7fe f9c6 	bl	8001728 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d21d      	bcs.n	80033e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0201 	bic.w	r2, r2, #1
 80033c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e00f      	b.n	8003404 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4013      	ands	r3, r2
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d0c3      	beq.n	800338a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003422:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	2b01      	cmp	r3, #1
 800343a:	d107      	bne.n	800344c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0210 	bic.w	r2, r2, #16
 800344a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800348e:	b480      	push	{r7}
 8003490:	b085      	sub	sp, #20
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b21      	cmp	r3, #33	; 0x21
 80034a0:	d13e      	bne.n	8003520 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034aa:	d114      	bne.n	80034d6 <UART_Transmit_IT+0x48>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d110      	bne.n	80034d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	1c9a      	adds	r2, r3, #2
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	621a      	str	r2, [r3, #32]
 80034d4:	e008      	b.n	80034e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	1c59      	adds	r1, r3, #1
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6211      	str	r1, [r2, #32]
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4619      	mov	r1, r3
 80034f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10f      	bne.n	800351c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800350a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800351a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	e000      	b.n	8003522 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003520:	2302      	movs	r3, #2
  }
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003542:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b22      	cmp	r3, #34	; 0x22
 8003570:	f040 809b 	bne.w	80036aa <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357c:	d117      	bne.n	80035ae <UART_Receive_IT+0x50>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d113      	bne.n	80035ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359c:	b29a      	uxth	r2, r3
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	1c9a      	adds	r2, r3, #2
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	629a      	str	r2, [r3, #40]	; 0x28
 80035ac:	e026      	b.n	80035fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c0:	d007      	beq.n	80035d2 <UART_Receive_IT+0x74>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <UART_Receive_IT+0x82>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	e008      	b.n	80035f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29b      	uxth	r3, r3
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4619      	mov	r1, r3
 800360a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800360c:	2b00      	cmp	r3, #0
 800360e:	d14a      	bne.n	80036a6 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0220 	bic.w	r2, r2, #32
 800361e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800362e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	2b01      	cmp	r3, #1
 800364e:	d124      	bne.n	800369a <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0210 	bic.w	r2, r2, #16
 8003664:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b10      	cmp	r3, #16
 8003672:	d10a      	bne.n	800368a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003692:	4611      	mov	r1, r2
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
 8003698:	e003      	b.n	80036a2 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e002      	b.n	80036ac <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
  }
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036ee:	f023 030c 	bic.w	r3, r3, #12
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	430b      	orrs	r3, r1
 80036fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2c      	ldr	r2, [pc, #176]	; (80037c8 <UART_SetConfig+0x114>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d103      	bne.n	8003724 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800371c:	f7ff fa3a 	bl	8002b94 <HAL_RCC_GetPCLK2Freq>
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	e002      	b.n	800372a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003724:	f7ff fa22 	bl	8002b6c <HAL_RCC_GetPCLK1Freq>
 8003728:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009a      	lsls	r2, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	4a22      	ldr	r2, [pc, #136]	; (80037cc <UART_SetConfig+0x118>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	0119      	lsls	r1, r3, #4
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009a      	lsls	r2, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003760:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <UART_SetConfig+0x118>)
 8003762:	fba3 0302 	umull	r0, r3, r3, r2
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	2064      	movs	r0, #100	; 0x64
 800376a:	fb00 f303 	mul.w	r3, r0, r3
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	3332      	adds	r3, #50	; 0x32
 8003774:	4a15      	ldr	r2, [pc, #84]	; (80037cc <UART_SetConfig+0x118>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003780:	4419      	add	r1, r3
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009a      	lsls	r2, r3, #2
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	fbb2 f2f3 	udiv	r2, r2, r3
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <UART_SetConfig+0x118>)
 800379a:	fba3 0302 	umull	r0, r3, r3, r2
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	2064      	movs	r0, #100	; 0x64
 80037a2:	fb00 f303 	mul.w	r3, r0, r3
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	3332      	adds	r3, #50	; 0x32
 80037ac:	4a07      	ldr	r2, [pc, #28]	; (80037cc <UART_SetConfig+0x118>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	f003 020f 	and.w	r2, r3, #15
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	440a      	add	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40013800 	.word	0x40013800
 80037cc:	51eb851f 	.word	0x51eb851f

080037d0 <ds18b20_init>:
  输出参数: 返回值为(0)说明与DS18B20已经建立连接
  输出参数: 返回值为(1)说明DS18B20无效或损坏
  函数功能: 初始化__DS18B20__
*******************************************************************************/
uint8_t ds18b20_init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
        uint8_t dat;
        DS18B20_IO_OUT();                       //DS18B20（输出操作）__Output
 80037d6:	4b27      	ldr	r3, [pc, #156]	; (8003874 <ds18b20_init+0xa4>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4a26      	ldr	r2, [pc, #152]	; (8003874 <ds18b20_init+0xa4>)
 80037dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037e0:	6053      	str	r3, [r2, #4]
 80037e2:	4b24      	ldr	r3, [pc, #144]	; (8003874 <ds18b20_init+0xa4>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4a23      	ldr	r2, [pc, #140]	; (8003874 <ds18b20_init+0xa4>)
 80037e8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80037ec:	6053      	str	r3, [r2, #4]
        DS18B20_DQ_LOW();                       //先把DS18B20_DQ线拉低
 80037ee:	4b21      	ldr	r3, [pc, #132]	; (8003874 <ds18b20_init+0xa4>)
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	4a20      	ldr	r2, [pc, #128]	; (8003874 <ds18b20_init+0xa4>)
 80037f4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80037f8:	6113      	str	r3, [r2, #16]
 80037fa:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <ds18b20_init+0xa4>)
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <ds18b20_init+0xa4>)
 8003800:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003804:	6113      	str	r3, [r2, #16]
        delay_us(480);                          //延时（480us）
 8003806:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800380a:	f000 f965 	bl	8003ad8 <delay_us>
        DS18B20_DQ_HIGH();                      //释放总线
 800380e:	4b19      	ldr	r3, [pc, #100]	; (8003874 <ds18b20_init+0xa4>)
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	4a18      	ldr	r2, [pc, #96]	; (8003874 <ds18b20_init+0xa4>)
 8003814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003818:	6113      	str	r3, [r2, #16]
 800381a:	4b16      	ldr	r3, [pc, #88]	; (8003874 <ds18b20_init+0xa4>)
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	4a15      	ldr	r2, [pc, #84]	; (8003874 <ds18b20_init+0xa4>)
 8003820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003824:	6113      	str	r3, [r2, #16]
        delay_us(60);                           //延时（60us）
 8003826:	203c      	movs	r0, #60	; 0x3c
 8003828:	f000 f956 	bl	8003ad8 <delay_us>
        DS18B20_IO_IN();                        //DS18B20（输入操作）__Input
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <ds18b20_init+0xa4>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4a10      	ldr	r2, [pc, #64]	; (8003874 <ds18b20_init+0xa4>)
 8003832:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003836:	6053      	str	r3, [r2, #4]
 8003838:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <ds18b20_init+0xa4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <ds18b20_init+0xa4>)
 800383e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003842:	6053      	str	r3, [r2, #4]
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <ds18b20_init+0xa4>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <ds18b20_init+0xa4>)
 800384a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384e:	60d3      	str	r3, [r2, #12]
 8003850:	4b08      	ldr	r3, [pc, #32]	; (8003874 <ds18b20_init+0xa4>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a07      	ldr	r2, [pc, #28]	; (8003874 <ds18b20_init+0xa4>)
 8003856:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800385a:	60d3      	str	r3, [r2, #12]
        dat = DS18B20_DQ;                       //读取DQ线上的数据
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <ds18b20_init+0xa8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	71fb      	strb	r3, [r7, #7]
        delay_us(420);                          //延时（420us)
 8003862:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003866:	f000 f937 	bl	8003ad8 <delay_us>
        return (dat);
 800386a:	79fb      	ldrb	r3, [r7, #7]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40012000 	.word	0x40012000
 8003878:	4224012c 	.word	0x4224012c

0800387c <ds18b20_write_byte>:
void ds18b20_write_byte(uint8_t cmd)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
        uint8_t i;
        for (i = 0; i < 8; i++) {
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
 800388a:	e04d      	b.n	8003928 <ds18b20_write_byte+0xac>
                DS18B20_IO_OUT();               //DS18B20（输出操作）__Output
 800388c:	4b2a      	ldr	r3, [pc, #168]	; (8003938 <ds18b20_write_byte+0xbc>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4a29      	ldr	r2, [pc, #164]	; (8003938 <ds18b20_write_byte+0xbc>)
 8003892:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003896:	6053      	str	r3, [r2, #4]
 8003898:	4b27      	ldr	r3, [pc, #156]	; (8003938 <ds18b20_write_byte+0xbc>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a26      	ldr	r2, [pc, #152]	; (8003938 <ds18b20_write_byte+0xbc>)
 800389e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80038a2:	6053      	str	r3, [r2, #4]
                DS18B20_DQ_LOW();               //先把DS18B20_DQ线拉低
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <ds18b20_write_byte+0xbc>)
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	4a23      	ldr	r2, [pc, #140]	; (8003938 <ds18b20_write_byte+0xbc>)
 80038aa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80038ae:	6113      	str	r3, [r2, #16]
 80038b0:	4b21      	ldr	r3, [pc, #132]	; (8003938 <ds18b20_write_byte+0xbc>)
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	4a20      	ldr	r2, [pc, #128]	; (8003938 <ds18b20_write_byte+0xbc>)
 80038b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038ba:	6113      	str	r3, [r2, #16]
                delay_us(2);                    //延时（2us)
 80038bc:	2002      	movs	r0, #2
 80038be:	f000 f90b 	bl	8003ad8 <delay_us>
                if (cmd & 0x01) {               //数据从最低位开始写入     
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00c      	beq.n	80038e6 <ds18b20_write_byte+0x6a>
                        DS18B20_DQ_HIGH();      //写入（1）
 80038cc:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <ds18b20_write_byte+0xbc>)
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	4a19      	ldr	r2, [pc, #100]	; (8003938 <ds18b20_write_byte+0xbc>)
 80038d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038d6:	6113      	str	r3, [r2, #16]
 80038d8:	4b17      	ldr	r3, [pc, #92]	; (8003938 <ds18b20_write_byte+0xbc>)
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	4a16      	ldr	r2, [pc, #88]	; (8003938 <ds18b20_write_byte+0xbc>)
 80038de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038e2:	6113      	str	r3, [r2, #16]
 80038e4:	e00b      	b.n	80038fe <ds18b20_write_byte+0x82>
                } else {                        //写入（0）
                        DS18B20_DQ_LOW();
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <ds18b20_write_byte+0xbc>)
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	4a13      	ldr	r2, [pc, #76]	; (8003938 <ds18b20_write_byte+0xbc>)
 80038ec:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80038f0:	6113      	str	r3, [r2, #16]
 80038f2:	4b11      	ldr	r3, [pc, #68]	; (8003938 <ds18b20_write_byte+0xbc>)
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	4a10      	ldr	r2, [pc, #64]	; (8003938 <ds18b20_write_byte+0xbc>)
 80038f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038fc:	6113      	str	r3, [r2, #16]
                }
                delay_us(60);                   //延时（60us)
 80038fe:	203c      	movs	r0, #60	; 0x3c
 8003900:	f000 f8ea 	bl	8003ad8 <delay_us>
                DS18B20_DQ_HIGH();              //释放总线
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <ds18b20_write_byte+0xbc>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <ds18b20_write_byte+0xbc>)
 800390a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800390e:	6113      	str	r3, [r2, #16]
 8003910:	4b09      	ldr	r3, [pc, #36]	; (8003938 <ds18b20_write_byte+0xbc>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	4a08      	ldr	r2, [pc, #32]	; (8003938 <ds18b20_write_byte+0xbc>)
 8003916:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800391a:	6113      	str	r3, [r2, #16]
                cmd >>= 1;                      //右移一位
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	71fb      	strb	r3, [r7, #7]
        for (i = 0; i < 8; i++) {
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	3301      	adds	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b07      	cmp	r3, #7
 800392c:	d9ae      	bls.n	800388c <ds18b20_write_byte+0x10>
        }
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40012000 	.word	0x40012000

0800393c <ds18b20_read_byte>:
uint8_t ds18b20_read_byte(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
        uint8_t i;
        uint8_t dat = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	71bb      	strb	r3, [r7, #6]
        for (i = 0; i < 8; i++) {
 8003946:	2300      	movs	r3, #0
 8003948:	71fb      	strb	r3, [r7, #7]
 800394a:	e04f      	b.n	80039ec <ds18b20_read_byte+0xb0>
                dat >>= 1;
 800394c:	79bb      	ldrb	r3, [r7, #6]
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	71bb      	strb	r3, [r7, #6]
                DS18B20_IO_OUT();               //DS18B20（输出操作）__Output
 8003952:	4b2a      	ldr	r3, [pc, #168]	; (80039fc <ds18b20_read_byte+0xc0>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a29      	ldr	r2, [pc, #164]	; (80039fc <ds18b20_read_byte+0xc0>)
 8003958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800395c:	6053      	str	r3, [r2, #4]
 800395e:	4b27      	ldr	r3, [pc, #156]	; (80039fc <ds18b20_read_byte+0xc0>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4a26      	ldr	r2, [pc, #152]	; (80039fc <ds18b20_read_byte+0xc0>)
 8003964:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003968:	6053      	str	r3, [r2, #4]
                DS18B20_DQ_LOW();               //拉低总线
 800396a:	4b24      	ldr	r3, [pc, #144]	; (80039fc <ds18b20_read_byte+0xc0>)
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	4a23      	ldr	r2, [pc, #140]	; (80039fc <ds18b20_read_byte+0xc0>)
 8003970:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003974:	6113      	str	r3, [r2, #16]
 8003976:	4b21      	ldr	r3, [pc, #132]	; (80039fc <ds18b20_read_byte+0xc0>)
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	4a20      	ldr	r2, [pc, #128]	; (80039fc <ds18b20_read_byte+0xc0>)
 800397c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003980:	6113      	str	r3, [r2, #16]
                delay_us(2);                    //延时（2us）
 8003982:	2002      	movs	r0, #2
 8003984:	f000 f8a8 	bl	8003ad8 <delay_us>
                DS18B20_DQ_HIGH();              //释放总线
 8003988:	4b1c      	ldr	r3, [pc, #112]	; (80039fc <ds18b20_read_byte+0xc0>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	4a1b      	ldr	r2, [pc, #108]	; (80039fc <ds18b20_read_byte+0xc0>)
 800398e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003992:	6113      	str	r3, [r2, #16]
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <ds18b20_read_byte+0xc0>)
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	4a18      	ldr	r2, [pc, #96]	; (80039fc <ds18b20_read_byte+0xc0>)
 800399a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800399e:	6113      	str	r3, [r2, #16]
                DS18B20_IO_IN();                //DS18B20（输入操作）__Input
 80039a0:	4b16      	ldr	r3, [pc, #88]	; (80039fc <ds18b20_read_byte+0xc0>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a15      	ldr	r2, [pc, #84]	; (80039fc <ds18b20_read_byte+0xc0>)
 80039a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039aa:	6053      	str	r3, [r2, #4]
 80039ac:	4b13      	ldr	r3, [pc, #76]	; (80039fc <ds18b20_read_byte+0xc0>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a12      	ldr	r2, [pc, #72]	; (80039fc <ds18b20_read_byte+0xc0>)
 80039b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b6:	6053      	str	r3, [r2, #4]
 80039b8:	4b10      	ldr	r3, [pc, #64]	; (80039fc <ds18b20_read_byte+0xc0>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <ds18b20_read_byte+0xc0>)
 80039be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039c2:	60d3      	str	r3, [r2, #12]
 80039c4:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <ds18b20_read_byte+0xc0>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a0c      	ldr	r2, [pc, #48]	; (80039fc <ds18b20_read_byte+0xc0>)
 80039ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039ce:	60d3      	str	r3, [r2, #12]
                if (DS18B20_DQ == SET) {
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <ds18b20_read_byte+0xc4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d103      	bne.n	80039e0 <ds18b20_read_byte+0xa4>
                        dat |= 0x80;
 80039d8:	79bb      	ldrb	r3, [r7, #6]
 80039da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039de:	71bb      	strb	r3, [r7, #6]
                }
                delay_us(60);
 80039e0:	203c      	movs	r0, #60	; 0x3c
 80039e2:	f000 f879 	bl	8003ad8 <delay_us>
        for (i = 0; i < 8; i++) {
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	3301      	adds	r3, #1
 80039ea:	71fb      	strb	r3, [r7, #7]
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	2b07      	cmp	r3, #7
 80039f0:	d9ac      	bls.n	800394c <ds18b20_read_byte+0x10>
        }
        return (dat);
 80039f2:	79bb      	ldrb	r3, [r7, #6]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40012000 	.word	0x40012000
 8003a00:	4224012c 	.word	0x4224012c

08003a04 <ds18b20_read_temperature>:
float ds18b20_read_temperature(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
        uint8_t  MSB = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	70fb      	strb	r3, [r7, #3]
        uint8_t  LSB = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	70bb      	strb	r3, [r7, #2]
        uint16_t tmp = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	803b      	strh	r3, [r7, #0]
        float    ftmp;
        if (ds18b20_init() == RESET) {
 8003a16:	f7ff fedb 	bl	80037d0 <ds18b20_init>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d14a      	bne.n	8003ab6 <ds18b20_read_temperature+0xb2>
                ds18b20_init();
 8003a20:	f7ff fed6 	bl	80037d0 <ds18b20_init>
                ds18b20_write_byte(0xCC);
 8003a24:	20cc      	movs	r0, #204	; 0xcc
 8003a26:	f7ff ff29 	bl	800387c <ds18b20_write_byte>
                ds18b20_write_byte(0x44);
 8003a2a:	2044      	movs	r0, #68	; 0x44
 8003a2c:	f7ff ff26 	bl	800387c <ds18b20_write_byte>
                delay_ms(750);
 8003a30:	f240 20ee 	movw	r0, #750	; 0x2ee
 8003a34:	f000 f87a 	bl	8003b2c <delay_ms>
                ds18b20_init();
 8003a38:	f7ff feca 	bl	80037d0 <ds18b20_init>
                ds18b20_write_byte(0xCC);
 8003a3c:	20cc      	movs	r0, #204	; 0xcc
 8003a3e:	f7ff ff1d 	bl	800387c <ds18b20_write_byte>
                ds18b20_write_byte(0xBE);
 8003a42:	20be      	movs	r0, #190	; 0xbe
 8003a44:	f7ff ff1a 	bl	800387c <ds18b20_write_byte>
                LSB = ds18b20_read_byte();
 8003a48:	f7ff ff78 	bl	800393c <ds18b20_read_byte>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	70bb      	strb	r3, [r7, #2]
                MSB = ds18b20_read_byte();
 8003a50:	f7ff ff74 	bl	800393c <ds18b20_read_byte>
 8003a54:	4603      	mov	r3, r0
 8003a56:	70fb      	strb	r3, [r7, #3]
                tmp = MSB;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	803b      	strh	r3, [r7, #0]
                tmp = (tmp << 8 | LSB); /////////////////////////
 8003a5c:	883b      	ldrh	r3, [r7, #0]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	b21a      	sxth	r2, r3
 8003a62:	78bb      	ldrb	r3, [r7, #2]
 8003a64:	b21b      	sxth	r3, r3
 8003a66:	4313      	orrs	r3, r2
 8003a68:	b21b      	sxth	r3, r3
 8003a6a:	803b      	strh	r3, [r7, #0]
                if (tmp & 0xF800) {     ///1111 1000 0000 0000（如果温度为负）
 8003a6c:	883b      	ldrh	r3, [r7, #0]
 8003a6e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d012      	beq.n	8003a9c <ds18b20_read_temperature+0x98>
                        tmp = (~tmp + 0x01) * -0.0625;
 8003a76:	883b      	ldrh	r3, [r7, #0]
 8003a78:	425b      	negs	r3, r3
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fc fde2 	bl	8000644 <__aeabi_i2d>
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <ds18b20_read_temperature+0xcc>)
 8003a86:	f7fc fe47 	bl	8000718 <__aeabi_dmul>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4619      	mov	r1, r3
 8003a92:	f7fd f919 	bl	8000cc8 <__aeabi_d2uiz>
 8003a96:	4603      	mov	r3, r0
 8003a98:	803b      	strh	r3, [r7, #0]
 8003a9a:	e013      	b.n	8003ac4 <ds18b20_read_temperature+0xc0>
                } else {
                        ftmp = (float)tmp * 0.0625;
 8003a9c:	883b      	ldrh	r3, [r7, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd f9e8 	bl	8000e74 <__aeabi_ui2f>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fbc4 	bl	8000238 <__aeabi_fmul>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	e006      	b.n	8003ac4 <ds18b20_read_temperature+0xc0>
                        //（*10）广大10位， （加0.5）去四舍五入
                        //tmp  = ftmp * 10 + 0.5;
                }
        } else {
                printf("DS18B20_NOT_EXIST\n");
 8003ab6:	4807      	ldr	r0, [pc, #28]	; (8003ad4 <ds18b20_read_temperature+0xd0>)
 8003ab8:	f000 fe28 	bl	800470c <puts>
                delay_ms(500);
 8003abc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ac0:	f000 f834 	bl	8003b2c <delay_ms>
        }
        return (ftmp);
 8003ac4:	687b      	ldr	r3, [r7, #4]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	bfb00000 	.word	0xbfb00000
 8003ad4:	08006840 	.word	0x08006840

08003ad8 <delay_us>:
  函数功能: 延时1us
          设置系统时钟为72MHz, SysTick定时器时钟频率为“72MHz / 8 = 9MHz”
          SysTick是一个“24”位的递减计数器， SysTick->LOAD为自动重装载计数器
*******************************************************************************/
void delay_us(uint32_t nus)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
        uint32_t status;
        SysTick->LOAD = 9 * nus;        //设置自动重装载寄存器的数值
 8003ae0:	4911      	ldr	r1, [pc, #68]	; (8003b28 <delay_us+0x50>)
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
        SysTick->VAL  = 0x00;           //清空计数器，使用“/8”时钟源
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <delay_us+0x50>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	609a      	str	r2, [r3, #8]
        SysTick->CTRL = 0x01;           //打开SysTick定时器
 8003af2:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <delay_us+0x50>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
        do {                            //获取SysTick定时器的状态
                status = SysTick->CTRL;
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <delay_us+0x50>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60fb      	str	r3, [r7, #12]
        } while ((status & 0x01) && (!(status & (1<<16))));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <delay_us+0x3a>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f2      	beq.n	8003af8 <delay_us+0x20>
        SysTick->CTRL = 0x00;           //关闭SysTick定时器
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <delay_us+0x50>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
        SysTick->VAL  = 0x00;           //清空计数器
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <delay_us+0x50>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
}
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr
 8003b28:	e000e010 	.word	0xe000e010

08003b2c <delay_ms>:
  函数功能: 延时1ms
          设置系统时钟为72MHz, SysTick定时器时钟频率为“72MHz / 8 = 9MHz”
          SysTick是一个“24”位的递减计数器， SysTick->LOAD为自动重装载计数器
*******************************************************************************/
void delay_ms(uint32_t nms)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
        uint32_t status;
        SysTick->LOAD = 9000 * nms;
 8003b34:	4a12      	ldr	r2, [pc, #72]	; (8003b80 <delay_ms+0x54>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f242 3128 	movw	r1, #9000	; 0x2328
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	6053      	str	r3, [r2, #4]
        SysTick->VAL  = 0x00;
 8003b42:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <delay_ms+0x54>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
        SysTick->CTRL = 0x01;
 8003b48:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <delay_ms+0x54>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
        do {
                status = SysTick->CTRL;
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <delay_ms+0x54>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]
        } while ((status & 0x01) && (!(status & (1<<16))));
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <delay_ms+0x3c>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f2      	beq.n	8003b4e <delay_ms+0x22>
        SysTick->CTRL = 0x00;
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <delay_ms+0x54>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
        SysTick->VAL  = 0X00;
 8003b6e:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <delay_ms+0x54>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	609a      	str	r2, [r3, #8]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	e000e010 	.word	0xe000e010

08003b84 <get_adc1_16_value>:
  输入参数: channel:通道值（0~16）
  输出参数: 返回值:转换结果
  函数功能: 获得ADC1__通道16__的值
*******************************************************************************/
uint16_t get_adc1_16_value(uint8_t channel)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
        ADC1->CR2  |= BIT_00;           //再次开启AD转换器
 8003b8e:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <get_adc1_16_value+0x58>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <get_adc1_16_value+0x58>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6093      	str	r3, [r2, #8]
        ADC1->SQR3 &= 0XFFFFFFE0;       //ADC1_SQR3__SQ1[4:0]
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <get_adc1_16_value+0x58>)
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9e:	4a0f      	ldr	r2, [pc, #60]	; (8003bdc <get_adc1_16_value+0x58>)
 8003ba0:	f023 031f 	bic.w	r3, r3, #31
 8003ba4:	6353      	str	r3, [r2, #52]	; 0x34
        ADC1->SQR3 |= channel;          //ADC1_通道__16__选择第（1_序列）
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <get_adc1_16_value+0x58>)
 8003ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	490b      	ldr	r1, [pc, #44]	; (8003bdc <get_adc1_16_value+0x58>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	634b      	str	r3, [r1, #52]	; 0x34
        ADC1->CR2  |= BIT_22;           //启动规则转换通道
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <get_adc1_16_value+0x58>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	4a09      	ldr	r2, [pc, #36]	; (8003bdc <get_adc1_16_value+0x58>)
 8003bb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bbc:	6093      	str	r3, [r2, #8]
        while (!(ADC1->SR & BIT_01));   //等待转换结束
 8003bbe:	bf00      	nop
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <get_adc1_16_value+0x58>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f9      	beq.n	8003bc0 <get_adc1_16_value+0x3c>
        return (ADC1->DR);              //返回adc1的值
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <get_adc1_16_value+0x58>)
 8003bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd0:	b29b      	uxth	r3, r3
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	40012400 	.word	0x40012400

08003be0 <get_adc1_16_average>:
  输入参数: number:  读取温度的次数
  输出参数: 返回（number）次温度的平均值
  函数功能: 获取通道__16__的温度转换值， 取number次, 然后平均
*******************************************************************************/
uint16_t get_adc1_16_average(uint8_t channel, uint8_t number)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	460a      	mov	r2, r1
 8003bea:	71fb      	strb	r3, [r7, #7]
 8003bec:	4613      	mov	r3, r2
 8003bee:	71bb      	strb	r3, [r7, #6]
        uint8_t  i;
        uint16_t tmp = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < number; i++) {
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	e00e      	b.n	8003c18 <get_adc1_16_average+0x38>
                tmp += get_adc1_16_value(channel);
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ffc1 	bl	8003b84 <get_adc1_16_value>
 8003c02:	4603      	mov	r3, r0
 8003c04:	461a      	mov	r2, r3
 8003c06:	89bb      	ldrh	r3, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	81bb      	strh	r3, [r7, #12]
                HAL_Delay(5);
 8003c0c:	2005      	movs	r0, #5
 8003c0e:	f7fd fd95 	bl	800173c <HAL_Delay>
        for (i = 0; i < number; i++) {
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	3301      	adds	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	79bb      	ldrb	r3, [r7, #6]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d3ec      	bcc.n	8003bfa <get_adc1_16_average+0x1a>
        }
        return (tmp / number);
 8003c20:	89ba      	ldrh	r2, [r7, #12]
 8003c22:	79bb      	ldrb	r3, [r7, #6]
 8003c24:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c28:	b29b      	uxth	r3, r3
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	0000      	movs	r0, r0
 8003c34:	0000      	movs	r0, r0
	...

08003c38 <get_temperature>:
  输出参数: 返回值:温度值(单位:℃.)
  函数功能: 得到STM32F103内部温度数据
  读取ADC1通道__16__, 取10次平均温度值（ADC通道16是内部温度传感器专用通道）
*******************************************************************************/
void get_temperature(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
        uint16_t  adcx;
        adcx = get_adc1_16_average(16, 10);
 8003c3e:	210a      	movs	r1, #10
 8003c40:	2010      	movs	r0, #16
 8003c42:	f7ff ffcd 	bl	8003be0 <get_adc1_16_average>
 8003c46:	4603      	mov	r3, r0
 8003c48:	80fb      	strh	r3, [r7, #6]
        printf("Temperature: %f\n", (1.43 - adcx * 3.3 / 4096) / 0.0043 + 25);
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fc fcf9 	bl	8000644 <__aeabi_i2d>
 8003c52:	a319      	add	r3, pc, #100	; (adr r3, 8003cb8 <get_temperature+0x80>)
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f7fc fd5e 	bl	8000718 <__aeabi_dmul>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <get_temperature+0x98>)
 8003c6a:	f7fc fe7f 	bl	800096c <__aeabi_ddiv>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	a113      	add	r1, pc, #76	; (adr r1, 8003cc0 <get_temperature+0x88>)
 8003c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c78:	f7fc fb96 	bl	80003a8 <__aeabi_dsub>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4610      	mov	r0, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	a310      	add	r3, pc, #64	; (adr r3, 8003cc8 <get_temperature+0x90>)
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f7fc fe6f 	bl	800096c <__aeabi_ddiv>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <get_temperature+0x9c>)
 8003c9c:	f7fc fb86 	bl	80003ac <__adddf3>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	480c      	ldr	r0, [pc, #48]	; (8003cd8 <get_temperature+0xa0>)
 8003ca6:	f000 fcab 	bl	8004600 <iprintf>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	f3af 8000 	nop.w
 8003cb8:	66666666 	.word	0x66666666
 8003cbc:	400a6666 	.word	0x400a6666
 8003cc0:	ae147ae1 	.word	0xae147ae1
 8003cc4:	3ff6e147 	.word	0x3ff6e147
 8003cc8:	75f6fd22 	.word	0x75f6fd22
 8003ccc:	3f719ce0 	.word	0x3f719ce0
 8003cd0:	40b00000 	.word	0x40b00000
 8003cd4:	40390000 	.word	0x40390000
 8003cd8:	08006854 	.word	0x08006854

08003cdc <__errno>:
 8003cdc:	4b01      	ldr	r3, [pc, #4]	; (8003ce4 <__errno+0x8>)
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000010 	.word	0x20000010

08003ce8 <__libc_init_array>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	2600      	movs	r6, #0
 8003cec:	4d0c      	ldr	r5, [pc, #48]	; (8003d20 <__libc_init_array+0x38>)
 8003cee:	4c0d      	ldr	r4, [pc, #52]	; (8003d24 <__libc_init_array+0x3c>)
 8003cf0:	1b64      	subs	r4, r4, r5
 8003cf2:	10a4      	asrs	r4, r4, #2
 8003cf4:	42a6      	cmp	r6, r4
 8003cf6:	d109      	bne.n	8003d0c <__libc_init_array+0x24>
 8003cf8:	f002 fd84 	bl	8006804 <_init>
 8003cfc:	2600      	movs	r6, #0
 8003cfe:	4d0a      	ldr	r5, [pc, #40]	; (8003d28 <__libc_init_array+0x40>)
 8003d00:	4c0a      	ldr	r4, [pc, #40]	; (8003d2c <__libc_init_array+0x44>)
 8003d02:	1b64      	subs	r4, r4, r5
 8003d04:	10a4      	asrs	r4, r4, #2
 8003d06:	42a6      	cmp	r6, r4
 8003d08:	d105      	bne.n	8003d16 <__libc_init_array+0x2e>
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d10:	4798      	blx	r3
 8003d12:	3601      	adds	r6, #1
 8003d14:	e7ee      	b.n	8003cf4 <__libc_init_array+0xc>
 8003d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1a:	4798      	blx	r3
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	e7f2      	b.n	8003d06 <__libc_init_array+0x1e>
 8003d20:	08006c64 	.word	0x08006c64
 8003d24:	08006c64 	.word	0x08006c64
 8003d28:	08006c64 	.word	0x08006c64
 8003d2c:	08006c68 	.word	0x08006c68

08003d30 <memset>:
 8003d30:	4603      	mov	r3, r0
 8003d32:	4402      	add	r2, r0
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d100      	bne.n	8003d3a <memset+0xa>
 8003d38:	4770      	bx	lr
 8003d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d3e:	e7f9      	b.n	8003d34 <memset+0x4>

08003d40 <__cvt>:
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d46:	461f      	mov	r7, r3
 8003d48:	bfbb      	ittet	lt
 8003d4a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003d4e:	461f      	movlt	r7, r3
 8003d50:	2300      	movge	r3, #0
 8003d52:	232d      	movlt	r3, #45	; 0x2d
 8003d54:	b088      	sub	sp, #32
 8003d56:	4614      	mov	r4, r2
 8003d58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003d5c:	7013      	strb	r3, [r2, #0]
 8003d5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003d60:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003d64:	f023 0820 	bic.w	r8, r3, #32
 8003d68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d6c:	d005      	beq.n	8003d7a <__cvt+0x3a>
 8003d6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003d72:	d100      	bne.n	8003d76 <__cvt+0x36>
 8003d74:	3501      	adds	r5, #1
 8003d76:	2302      	movs	r3, #2
 8003d78:	e000      	b.n	8003d7c <__cvt+0x3c>
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	aa07      	add	r2, sp, #28
 8003d7e:	9204      	str	r2, [sp, #16]
 8003d80:	aa06      	add	r2, sp, #24
 8003d82:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d86:	e9cd 3500 	strd	r3, r5, [sp]
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	f000 fe13 	bl	80049b8 <_dtoa_r>
 8003d92:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d96:	4606      	mov	r6, r0
 8003d98:	d102      	bne.n	8003da0 <__cvt+0x60>
 8003d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d9c:	07db      	lsls	r3, r3, #31
 8003d9e:	d522      	bpl.n	8003de6 <__cvt+0xa6>
 8003da0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003da4:	eb06 0905 	add.w	r9, r6, r5
 8003da8:	d110      	bne.n	8003dcc <__cvt+0x8c>
 8003daa:	7833      	ldrb	r3, [r6, #0]
 8003dac:	2b30      	cmp	r3, #48	; 0x30
 8003dae:	d10a      	bne.n	8003dc6 <__cvt+0x86>
 8003db0:	2200      	movs	r2, #0
 8003db2:	2300      	movs	r3, #0
 8003db4:	4620      	mov	r0, r4
 8003db6:	4639      	mov	r1, r7
 8003db8:	f7fc ff16 	bl	8000be8 <__aeabi_dcmpeq>
 8003dbc:	b918      	cbnz	r0, 8003dc6 <__cvt+0x86>
 8003dbe:	f1c5 0501 	rsb	r5, r5, #1
 8003dc2:	f8ca 5000 	str.w	r5, [sl]
 8003dc6:	f8da 3000 	ldr.w	r3, [sl]
 8003dca:	4499      	add	r9, r3
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2300      	movs	r3, #0
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	4639      	mov	r1, r7
 8003dd4:	f7fc ff08 	bl	8000be8 <__aeabi_dcmpeq>
 8003dd8:	b108      	cbz	r0, 8003dde <__cvt+0x9e>
 8003dda:	f8cd 901c 	str.w	r9, [sp, #28]
 8003dde:	2230      	movs	r2, #48	; 0x30
 8003de0:	9b07      	ldr	r3, [sp, #28]
 8003de2:	454b      	cmp	r3, r9
 8003de4:	d307      	bcc.n	8003df6 <__cvt+0xb6>
 8003de6:	4630      	mov	r0, r6
 8003de8:	9b07      	ldr	r3, [sp, #28]
 8003dea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003dec:	1b9b      	subs	r3, r3, r6
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	b008      	add	sp, #32
 8003df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df6:	1c59      	adds	r1, r3, #1
 8003df8:	9107      	str	r1, [sp, #28]
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	e7f0      	b.n	8003de0 <__cvt+0xa0>

08003dfe <__exponent>:
 8003dfe:	4603      	mov	r3, r0
 8003e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e02:	2900      	cmp	r1, #0
 8003e04:	f803 2b02 	strb.w	r2, [r3], #2
 8003e08:	bfb6      	itet	lt
 8003e0a:	222d      	movlt	r2, #45	; 0x2d
 8003e0c:	222b      	movge	r2, #43	; 0x2b
 8003e0e:	4249      	neglt	r1, r1
 8003e10:	2909      	cmp	r1, #9
 8003e12:	7042      	strb	r2, [r0, #1]
 8003e14:	dd2b      	ble.n	8003e6e <__exponent+0x70>
 8003e16:	f10d 0407 	add.w	r4, sp, #7
 8003e1a:	46a4      	mov	ip, r4
 8003e1c:	270a      	movs	r7, #10
 8003e1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e22:	460a      	mov	r2, r1
 8003e24:	46a6      	mov	lr, r4
 8003e26:	fb07 1516 	mls	r5, r7, r6, r1
 8003e2a:	2a63      	cmp	r2, #99	; 0x63
 8003e2c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003e30:	4631      	mov	r1, r6
 8003e32:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003e36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003e3a:	dcf0      	bgt.n	8003e1e <__exponent+0x20>
 8003e3c:	3130      	adds	r1, #48	; 0x30
 8003e3e:	f1ae 0502 	sub.w	r5, lr, #2
 8003e42:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003e46:	4629      	mov	r1, r5
 8003e48:	1c44      	adds	r4, r0, #1
 8003e4a:	4561      	cmp	r1, ip
 8003e4c:	d30a      	bcc.n	8003e64 <__exponent+0x66>
 8003e4e:	f10d 0209 	add.w	r2, sp, #9
 8003e52:	eba2 020e 	sub.w	r2, r2, lr
 8003e56:	4565      	cmp	r5, ip
 8003e58:	bf88      	it	hi
 8003e5a:	2200      	movhi	r2, #0
 8003e5c:	4413      	add	r3, r2
 8003e5e:	1a18      	subs	r0, r3, r0
 8003e60:	b003      	add	sp, #12
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e68:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003e6c:	e7ed      	b.n	8003e4a <__exponent+0x4c>
 8003e6e:	2330      	movs	r3, #48	; 0x30
 8003e70:	3130      	adds	r1, #48	; 0x30
 8003e72:	7083      	strb	r3, [r0, #2]
 8003e74:	70c1      	strb	r1, [r0, #3]
 8003e76:	1d03      	adds	r3, r0, #4
 8003e78:	e7f1      	b.n	8003e5e <__exponent+0x60>
	...

08003e7c <_printf_float>:
 8003e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e80:	b091      	sub	sp, #68	; 0x44
 8003e82:	460c      	mov	r4, r1
 8003e84:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003e88:	4616      	mov	r6, r2
 8003e8a:	461f      	mov	r7, r3
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	f001 fd39 	bl	8005904 <_localeconv_r>
 8003e92:	6803      	ldr	r3, [r0, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	9309      	str	r3, [sp, #36]	; 0x24
 8003e98:	f7fc f9c6 	bl	8000228 <strlen>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	930e      	str	r3, [sp, #56]	; 0x38
 8003ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea4:	900a      	str	r0, [sp, #40]	; 0x28
 8003ea6:	3307      	adds	r3, #7
 8003ea8:	f023 0307 	bic.w	r3, r3, #7
 8003eac:	f103 0208 	add.w	r2, r3, #8
 8003eb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003eb4:	f8d4 b000 	ldr.w	fp, [r4]
 8003eb8:	f8c8 2000 	str.w	r2, [r8]
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ec4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003ec8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003ecc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	4b9c      	ldr	r3, [pc, #624]	; (8004148 <_printf_float+0x2cc>)
 8003ed6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ed8:	f7fc feb8 	bl	8000c4c <__aeabi_dcmpun>
 8003edc:	bb70      	cbnz	r0, 8003f3c <_printf_float+0xc0>
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	4b98      	ldr	r3, [pc, #608]	; (8004148 <_printf_float+0x2cc>)
 8003ee6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ee8:	f7fc fe92 	bl	8000c10 <__aeabi_dcmple>
 8003eec:	bb30      	cbnz	r0, 8003f3c <_printf_float+0xc0>
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	4651      	mov	r1, sl
 8003ef6:	f7fc fe81 	bl	8000bfc <__aeabi_dcmplt>
 8003efa:	b110      	cbz	r0, 8003f02 <_printf_float+0x86>
 8003efc:	232d      	movs	r3, #45	; 0x2d
 8003efe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f02:	4b92      	ldr	r3, [pc, #584]	; (800414c <_printf_float+0x2d0>)
 8003f04:	4892      	ldr	r0, [pc, #584]	; (8004150 <_printf_float+0x2d4>)
 8003f06:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003f0a:	bf94      	ite	ls
 8003f0c:	4698      	movls	r8, r3
 8003f0e:	4680      	movhi	r8, r0
 8003f10:	2303      	movs	r3, #3
 8003f12:	f04f 0a00 	mov.w	sl, #0
 8003f16:	6123      	str	r3, [r4, #16]
 8003f18:	f02b 0304 	bic.w	r3, fp, #4
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	4633      	mov	r3, r6
 8003f20:	4621      	mov	r1, r4
 8003f22:	4628      	mov	r0, r5
 8003f24:	9700      	str	r7, [sp, #0]
 8003f26:	aa0f      	add	r2, sp, #60	; 0x3c
 8003f28:	f000 f9d4 	bl	80042d4 <_printf_common>
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	f040 8090 	bne.w	8004052 <_printf_float+0x1d6>
 8003f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f36:	b011      	add	sp, #68	; 0x44
 8003f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	4653      	mov	r3, sl
 8003f40:	4640      	mov	r0, r8
 8003f42:	4651      	mov	r1, sl
 8003f44:	f7fc fe82 	bl	8000c4c <__aeabi_dcmpun>
 8003f48:	b148      	cbz	r0, 8003f5e <_printf_float+0xe2>
 8003f4a:	f1ba 0f00 	cmp.w	sl, #0
 8003f4e:	bfb8      	it	lt
 8003f50:	232d      	movlt	r3, #45	; 0x2d
 8003f52:	4880      	ldr	r0, [pc, #512]	; (8004154 <_printf_float+0x2d8>)
 8003f54:	bfb8      	it	lt
 8003f56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003f5a:	4b7f      	ldr	r3, [pc, #508]	; (8004158 <_printf_float+0x2dc>)
 8003f5c:	e7d3      	b.n	8003f06 <_printf_float+0x8a>
 8003f5e:	6863      	ldr	r3, [r4, #4]
 8003f60:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	d142      	bne.n	8003fee <_printf_float+0x172>
 8003f68:	2306      	movs	r3, #6
 8003f6a:	6063      	str	r3, [r4, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	9206      	str	r2, [sp, #24]
 8003f70:	aa0e      	add	r2, sp, #56	; 0x38
 8003f72:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003f76:	aa0d      	add	r2, sp, #52	; 0x34
 8003f78:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003f7c:	9203      	str	r2, [sp, #12]
 8003f7e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003f82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	6863      	ldr	r3, [r4, #4]
 8003f8a:	4642      	mov	r2, r8
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	4628      	mov	r0, r5
 8003f90:	4653      	mov	r3, sl
 8003f92:	910b      	str	r1, [sp, #44]	; 0x2c
 8003f94:	f7ff fed4 	bl	8003d40 <__cvt>
 8003f98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f9a:	4680      	mov	r8, r0
 8003f9c:	2947      	cmp	r1, #71	; 0x47
 8003f9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003fa0:	d108      	bne.n	8003fb4 <_printf_float+0x138>
 8003fa2:	1cc8      	adds	r0, r1, #3
 8003fa4:	db02      	blt.n	8003fac <_printf_float+0x130>
 8003fa6:	6863      	ldr	r3, [r4, #4]
 8003fa8:	4299      	cmp	r1, r3
 8003faa:	dd40      	ble.n	800402e <_printf_float+0x1b2>
 8003fac:	f1a9 0902 	sub.w	r9, r9, #2
 8003fb0:	fa5f f989 	uxtb.w	r9, r9
 8003fb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003fb8:	d81f      	bhi.n	8003ffa <_printf_float+0x17e>
 8003fba:	464a      	mov	r2, r9
 8003fbc:	3901      	subs	r1, #1
 8003fbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003fc2:	910d      	str	r1, [sp, #52]	; 0x34
 8003fc4:	f7ff ff1b 	bl	8003dfe <__exponent>
 8003fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fca:	4682      	mov	sl, r0
 8003fcc:	1813      	adds	r3, r2, r0
 8003fce:	2a01      	cmp	r2, #1
 8003fd0:	6123      	str	r3, [r4, #16]
 8003fd2:	dc02      	bgt.n	8003fda <_printf_float+0x15e>
 8003fd4:	6822      	ldr	r2, [r4, #0]
 8003fd6:	07d2      	lsls	r2, r2, #31
 8003fd8:	d501      	bpl.n	8003fde <_printf_float+0x162>
 8003fda:	3301      	adds	r3, #1
 8003fdc:	6123      	str	r3, [r4, #16]
 8003fde:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d09b      	beq.n	8003f1e <_printf_float+0xa2>
 8003fe6:	232d      	movs	r3, #45	; 0x2d
 8003fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fec:	e797      	b.n	8003f1e <_printf_float+0xa2>
 8003fee:	2947      	cmp	r1, #71	; 0x47
 8003ff0:	d1bc      	bne.n	8003f6c <_printf_float+0xf0>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1ba      	bne.n	8003f6c <_printf_float+0xf0>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e7b7      	b.n	8003f6a <_printf_float+0xee>
 8003ffa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003ffe:	d118      	bne.n	8004032 <_printf_float+0x1b6>
 8004000:	2900      	cmp	r1, #0
 8004002:	6863      	ldr	r3, [r4, #4]
 8004004:	dd0b      	ble.n	800401e <_printf_float+0x1a2>
 8004006:	6121      	str	r1, [r4, #16]
 8004008:	b913      	cbnz	r3, 8004010 <_printf_float+0x194>
 800400a:	6822      	ldr	r2, [r4, #0]
 800400c:	07d0      	lsls	r0, r2, #31
 800400e:	d502      	bpl.n	8004016 <_printf_float+0x19a>
 8004010:	3301      	adds	r3, #1
 8004012:	440b      	add	r3, r1
 8004014:	6123      	str	r3, [r4, #16]
 8004016:	f04f 0a00 	mov.w	sl, #0
 800401a:	65a1      	str	r1, [r4, #88]	; 0x58
 800401c:	e7df      	b.n	8003fde <_printf_float+0x162>
 800401e:	b913      	cbnz	r3, 8004026 <_printf_float+0x1aa>
 8004020:	6822      	ldr	r2, [r4, #0]
 8004022:	07d2      	lsls	r2, r2, #31
 8004024:	d501      	bpl.n	800402a <_printf_float+0x1ae>
 8004026:	3302      	adds	r3, #2
 8004028:	e7f4      	b.n	8004014 <_printf_float+0x198>
 800402a:	2301      	movs	r3, #1
 800402c:	e7f2      	b.n	8004014 <_printf_float+0x198>
 800402e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004034:	4299      	cmp	r1, r3
 8004036:	db05      	blt.n	8004044 <_printf_float+0x1c8>
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	6121      	str	r1, [r4, #16]
 800403c:	07d8      	lsls	r0, r3, #31
 800403e:	d5ea      	bpl.n	8004016 <_printf_float+0x19a>
 8004040:	1c4b      	adds	r3, r1, #1
 8004042:	e7e7      	b.n	8004014 <_printf_float+0x198>
 8004044:	2900      	cmp	r1, #0
 8004046:	bfcc      	ite	gt
 8004048:	2201      	movgt	r2, #1
 800404a:	f1c1 0202 	rsble	r2, r1, #2
 800404e:	4413      	add	r3, r2
 8004050:	e7e0      	b.n	8004014 <_printf_float+0x198>
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	055a      	lsls	r2, r3, #21
 8004056:	d407      	bmi.n	8004068 <_printf_float+0x1ec>
 8004058:	6923      	ldr	r3, [r4, #16]
 800405a:	4642      	mov	r2, r8
 800405c:	4631      	mov	r1, r6
 800405e:	4628      	mov	r0, r5
 8004060:	47b8      	blx	r7
 8004062:	3001      	adds	r0, #1
 8004064:	d12b      	bne.n	80040be <_printf_float+0x242>
 8004066:	e764      	b.n	8003f32 <_printf_float+0xb6>
 8004068:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800406c:	f240 80dd 	bls.w	800422a <_printf_float+0x3ae>
 8004070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004074:	2200      	movs	r2, #0
 8004076:	2300      	movs	r3, #0
 8004078:	f7fc fdb6 	bl	8000be8 <__aeabi_dcmpeq>
 800407c:	2800      	cmp	r0, #0
 800407e:	d033      	beq.n	80040e8 <_printf_float+0x26c>
 8004080:	2301      	movs	r3, #1
 8004082:	4631      	mov	r1, r6
 8004084:	4628      	mov	r0, r5
 8004086:	4a35      	ldr	r2, [pc, #212]	; (800415c <_printf_float+0x2e0>)
 8004088:	47b8      	blx	r7
 800408a:	3001      	adds	r0, #1
 800408c:	f43f af51 	beq.w	8003f32 <_printf_float+0xb6>
 8004090:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004094:	429a      	cmp	r2, r3
 8004096:	db02      	blt.n	800409e <_printf_float+0x222>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	07d8      	lsls	r0, r3, #31
 800409c:	d50f      	bpl.n	80040be <_printf_float+0x242>
 800409e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040a2:	4631      	mov	r1, r6
 80040a4:	4628      	mov	r0, r5
 80040a6:	47b8      	blx	r7
 80040a8:	3001      	adds	r0, #1
 80040aa:	f43f af42 	beq.w	8003f32 <_printf_float+0xb6>
 80040ae:	f04f 0800 	mov.w	r8, #0
 80040b2:	f104 091a 	add.w	r9, r4, #26
 80040b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040b8:	3b01      	subs	r3, #1
 80040ba:	4543      	cmp	r3, r8
 80040bc:	dc09      	bgt.n	80040d2 <_printf_float+0x256>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	079b      	lsls	r3, r3, #30
 80040c2:	f100 8102 	bmi.w	80042ca <_printf_float+0x44e>
 80040c6:	68e0      	ldr	r0, [r4, #12]
 80040c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040ca:	4298      	cmp	r0, r3
 80040cc:	bfb8      	it	lt
 80040ce:	4618      	movlt	r0, r3
 80040d0:	e731      	b.n	8003f36 <_printf_float+0xba>
 80040d2:	2301      	movs	r3, #1
 80040d4:	464a      	mov	r2, r9
 80040d6:	4631      	mov	r1, r6
 80040d8:	4628      	mov	r0, r5
 80040da:	47b8      	blx	r7
 80040dc:	3001      	adds	r0, #1
 80040de:	f43f af28 	beq.w	8003f32 <_printf_float+0xb6>
 80040e2:	f108 0801 	add.w	r8, r8, #1
 80040e6:	e7e6      	b.n	80040b6 <_printf_float+0x23a>
 80040e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	dc38      	bgt.n	8004160 <_printf_float+0x2e4>
 80040ee:	2301      	movs	r3, #1
 80040f0:	4631      	mov	r1, r6
 80040f2:	4628      	mov	r0, r5
 80040f4:	4a19      	ldr	r2, [pc, #100]	; (800415c <_printf_float+0x2e0>)
 80040f6:	47b8      	blx	r7
 80040f8:	3001      	adds	r0, #1
 80040fa:	f43f af1a 	beq.w	8003f32 <_printf_float+0xb6>
 80040fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004102:	4313      	orrs	r3, r2
 8004104:	d102      	bne.n	800410c <_printf_float+0x290>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	07d9      	lsls	r1, r3, #31
 800410a:	d5d8      	bpl.n	80040be <_printf_float+0x242>
 800410c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004110:	4631      	mov	r1, r6
 8004112:	4628      	mov	r0, r5
 8004114:	47b8      	blx	r7
 8004116:	3001      	adds	r0, #1
 8004118:	f43f af0b 	beq.w	8003f32 <_printf_float+0xb6>
 800411c:	f04f 0900 	mov.w	r9, #0
 8004120:	f104 0a1a 	add.w	sl, r4, #26
 8004124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004126:	425b      	negs	r3, r3
 8004128:	454b      	cmp	r3, r9
 800412a:	dc01      	bgt.n	8004130 <_printf_float+0x2b4>
 800412c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800412e:	e794      	b.n	800405a <_printf_float+0x1de>
 8004130:	2301      	movs	r3, #1
 8004132:	4652      	mov	r2, sl
 8004134:	4631      	mov	r1, r6
 8004136:	4628      	mov	r0, r5
 8004138:	47b8      	blx	r7
 800413a:	3001      	adds	r0, #1
 800413c:	f43f aef9 	beq.w	8003f32 <_printf_float+0xb6>
 8004140:	f109 0901 	add.w	r9, r9, #1
 8004144:	e7ee      	b.n	8004124 <_printf_float+0x2a8>
 8004146:	bf00      	nop
 8004148:	7fefffff 	.word	0x7fefffff
 800414c:	08006884 	.word	0x08006884
 8004150:	08006888 	.word	0x08006888
 8004154:	08006890 	.word	0x08006890
 8004158:	0800688c 	.word	0x0800688c
 800415c:	08006894 	.word	0x08006894
 8004160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004164:	429a      	cmp	r2, r3
 8004166:	bfa8      	it	ge
 8004168:	461a      	movge	r2, r3
 800416a:	2a00      	cmp	r2, #0
 800416c:	4691      	mov	r9, r2
 800416e:	dc37      	bgt.n	80041e0 <_printf_float+0x364>
 8004170:	f04f 0b00 	mov.w	fp, #0
 8004174:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004178:	f104 021a 	add.w	r2, r4, #26
 800417c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004180:	ebaa 0309 	sub.w	r3, sl, r9
 8004184:	455b      	cmp	r3, fp
 8004186:	dc33      	bgt.n	80041f0 <_printf_float+0x374>
 8004188:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800418c:	429a      	cmp	r2, r3
 800418e:	db3b      	blt.n	8004208 <_printf_float+0x38c>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	07da      	lsls	r2, r3, #31
 8004194:	d438      	bmi.n	8004208 <_printf_float+0x38c>
 8004196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004198:	990d      	ldr	r1, [sp, #52]	; 0x34
 800419a:	eba2 030a 	sub.w	r3, r2, sl
 800419e:	eba2 0901 	sub.w	r9, r2, r1
 80041a2:	4599      	cmp	r9, r3
 80041a4:	bfa8      	it	ge
 80041a6:	4699      	movge	r9, r3
 80041a8:	f1b9 0f00 	cmp.w	r9, #0
 80041ac:	dc34      	bgt.n	8004218 <_printf_float+0x39c>
 80041ae:	f04f 0800 	mov.w	r8, #0
 80041b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041b6:	f104 0a1a 	add.w	sl, r4, #26
 80041ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	eba3 0309 	sub.w	r3, r3, r9
 80041c4:	4543      	cmp	r3, r8
 80041c6:	f77f af7a 	ble.w	80040be <_printf_float+0x242>
 80041ca:	2301      	movs	r3, #1
 80041cc:	4652      	mov	r2, sl
 80041ce:	4631      	mov	r1, r6
 80041d0:	4628      	mov	r0, r5
 80041d2:	47b8      	blx	r7
 80041d4:	3001      	adds	r0, #1
 80041d6:	f43f aeac 	beq.w	8003f32 <_printf_float+0xb6>
 80041da:	f108 0801 	add.w	r8, r8, #1
 80041de:	e7ec      	b.n	80041ba <_printf_float+0x33e>
 80041e0:	4613      	mov	r3, r2
 80041e2:	4631      	mov	r1, r6
 80041e4:	4642      	mov	r2, r8
 80041e6:	4628      	mov	r0, r5
 80041e8:	47b8      	blx	r7
 80041ea:	3001      	adds	r0, #1
 80041ec:	d1c0      	bne.n	8004170 <_printf_float+0x2f4>
 80041ee:	e6a0      	b.n	8003f32 <_printf_float+0xb6>
 80041f0:	2301      	movs	r3, #1
 80041f2:	4631      	mov	r1, r6
 80041f4:	4628      	mov	r0, r5
 80041f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80041f8:	47b8      	blx	r7
 80041fa:	3001      	adds	r0, #1
 80041fc:	f43f ae99 	beq.w	8003f32 <_printf_float+0xb6>
 8004200:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004202:	f10b 0b01 	add.w	fp, fp, #1
 8004206:	e7b9      	b.n	800417c <_printf_float+0x300>
 8004208:	4631      	mov	r1, r6
 800420a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800420e:	4628      	mov	r0, r5
 8004210:	47b8      	blx	r7
 8004212:	3001      	adds	r0, #1
 8004214:	d1bf      	bne.n	8004196 <_printf_float+0x31a>
 8004216:	e68c      	b.n	8003f32 <_printf_float+0xb6>
 8004218:	464b      	mov	r3, r9
 800421a:	4631      	mov	r1, r6
 800421c:	4628      	mov	r0, r5
 800421e:	eb08 020a 	add.w	r2, r8, sl
 8004222:	47b8      	blx	r7
 8004224:	3001      	adds	r0, #1
 8004226:	d1c2      	bne.n	80041ae <_printf_float+0x332>
 8004228:	e683      	b.n	8003f32 <_printf_float+0xb6>
 800422a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800422c:	2a01      	cmp	r2, #1
 800422e:	dc01      	bgt.n	8004234 <_printf_float+0x3b8>
 8004230:	07db      	lsls	r3, r3, #31
 8004232:	d537      	bpl.n	80042a4 <_printf_float+0x428>
 8004234:	2301      	movs	r3, #1
 8004236:	4642      	mov	r2, r8
 8004238:	4631      	mov	r1, r6
 800423a:	4628      	mov	r0, r5
 800423c:	47b8      	blx	r7
 800423e:	3001      	adds	r0, #1
 8004240:	f43f ae77 	beq.w	8003f32 <_printf_float+0xb6>
 8004244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004248:	4631      	mov	r1, r6
 800424a:	4628      	mov	r0, r5
 800424c:	47b8      	blx	r7
 800424e:	3001      	adds	r0, #1
 8004250:	f43f ae6f 	beq.w	8003f32 <_printf_float+0xb6>
 8004254:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004258:	2200      	movs	r2, #0
 800425a:	2300      	movs	r3, #0
 800425c:	f7fc fcc4 	bl	8000be8 <__aeabi_dcmpeq>
 8004260:	b9d8      	cbnz	r0, 800429a <_printf_float+0x41e>
 8004262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004264:	f108 0201 	add.w	r2, r8, #1
 8004268:	3b01      	subs	r3, #1
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	d10e      	bne.n	8004292 <_printf_float+0x416>
 8004274:	e65d      	b.n	8003f32 <_printf_float+0xb6>
 8004276:	2301      	movs	r3, #1
 8004278:	464a      	mov	r2, r9
 800427a:	4631      	mov	r1, r6
 800427c:	4628      	mov	r0, r5
 800427e:	47b8      	blx	r7
 8004280:	3001      	adds	r0, #1
 8004282:	f43f ae56 	beq.w	8003f32 <_printf_float+0xb6>
 8004286:	f108 0801 	add.w	r8, r8, #1
 800428a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800428c:	3b01      	subs	r3, #1
 800428e:	4543      	cmp	r3, r8
 8004290:	dcf1      	bgt.n	8004276 <_printf_float+0x3fa>
 8004292:	4653      	mov	r3, sl
 8004294:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004298:	e6e0      	b.n	800405c <_printf_float+0x1e0>
 800429a:	f04f 0800 	mov.w	r8, #0
 800429e:	f104 091a 	add.w	r9, r4, #26
 80042a2:	e7f2      	b.n	800428a <_printf_float+0x40e>
 80042a4:	2301      	movs	r3, #1
 80042a6:	4642      	mov	r2, r8
 80042a8:	e7df      	b.n	800426a <_printf_float+0x3ee>
 80042aa:	2301      	movs	r3, #1
 80042ac:	464a      	mov	r2, r9
 80042ae:	4631      	mov	r1, r6
 80042b0:	4628      	mov	r0, r5
 80042b2:	47b8      	blx	r7
 80042b4:	3001      	adds	r0, #1
 80042b6:	f43f ae3c 	beq.w	8003f32 <_printf_float+0xb6>
 80042ba:	f108 0801 	add.w	r8, r8, #1
 80042be:	68e3      	ldr	r3, [r4, #12]
 80042c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80042c2:	1a5b      	subs	r3, r3, r1
 80042c4:	4543      	cmp	r3, r8
 80042c6:	dcf0      	bgt.n	80042aa <_printf_float+0x42e>
 80042c8:	e6fd      	b.n	80040c6 <_printf_float+0x24a>
 80042ca:	f04f 0800 	mov.w	r8, #0
 80042ce:	f104 0919 	add.w	r9, r4, #25
 80042d2:	e7f4      	b.n	80042be <_printf_float+0x442>

080042d4 <_printf_common>:
 80042d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d8:	4616      	mov	r6, r2
 80042da:	4699      	mov	r9, r3
 80042dc:	688a      	ldr	r2, [r1, #8]
 80042de:	690b      	ldr	r3, [r1, #16]
 80042e0:	4607      	mov	r7, r0
 80042e2:	4293      	cmp	r3, r2
 80042e4:	bfb8      	it	lt
 80042e6:	4613      	movlt	r3, r2
 80042e8:	6033      	str	r3, [r6, #0]
 80042ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042ee:	460c      	mov	r4, r1
 80042f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042f4:	b10a      	cbz	r2, 80042fa <_printf_common+0x26>
 80042f6:	3301      	adds	r3, #1
 80042f8:	6033      	str	r3, [r6, #0]
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	0699      	lsls	r1, r3, #26
 80042fe:	bf42      	ittt	mi
 8004300:	6833      	ldrmi	r3, [r6, #0]
 8004302:	3302      	addmi	r3, #2
 8004304:	6033      	strmi	r3, [r6, #0]
 8004306:	6825      	ldr	r5, [r4, #0]
 8004308:	f015 0506 	ands.w	r5, r5, #6
 800430c:	d106      	bne.n	800431c <_printf_common+0x48>
 800430e:	f104 0a19 	add.w	sl, r4, #25
 8004312:	68e3      	ldr	r3, [r4, #12]
 8004314:	6832      	ldr	r2, [r6, #0]
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	42ab      	cmp	r3, r5
 800431a:	dc28      	bgt.n	800436e <_printf_common+0x9a>
 800431c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004320:	1e13      	subs	r3, r2, #0
 8004322:	6822      	ldr	r2, [r4, #0]
 8004324:	bf18      	it	ne
 8004326:	2301      	movne	r3, #1
 8004328:	0692      	lsls	r2, r2, #26
 800432a:	d42d      	bmi.n	8004388 <_printf_common+0xb4>
 800432c:	4649      	mov	r1, r9
 800432e:	4638      	mov	r0, r7
 8004330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004334:	47c0      	blx	r8
 8004336:	3001      	adds	r0, #1
 8004338:	d020      	beq.n	800437c <_printf_common+0xa8>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	68e5      	ldr	r5, [r4, #12]
 800433e:	f003 0306 	and.w	r3, r3, #6
 8004342:	2b04      	cmp	r3, #4
 8004344:	bf18      	it	ne
 8004346:	2500      	movne	r5, #0
 8004348:	6832      	ldr	r2, [r6, #0]
 800434a:	f04f 0600 	mov.w	r6, #0
 800434e:	68a3      	ldr	r3, [r4, #8]
 8004350:	bf08      	it	eq
 8004352:	1aad      	subeq	r5, r5, r2
 8004354:	6922      	ldr	r2, [r4, #16]
 8004356:	bf08      	it	eq
 8004358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800435c:	4293      	cmp	r3, r2
 800435e:	bfc4      	itt	gt
 8004360:	1a9b      	subgt	r3, r3, r2
 8004362:	18ed      	addgt	r5, r5, r3
 8004364:	341a      	adds	r4, #26
 8004366:	42b5      	cmp	r5, r6
 8004368:	d11a      	bne.n	80043a0 <_printf_common+0xcc>
 800436a:	2000      	movs	r0, #0
 800436c:	e008      	b.n	8004380 <_printf_common+0xac>
 800436e:	2301      	movs	r3, #1
 8004370:	4652      	mov	r2, sl
 8004372:	4649      	mov	r1, r9
 8004374:	4638      	mov	r0, r7
 8004376:	47c0      	blx	r8
 8004378:	3001      	adds	r0, #1
 800437a:	d103      	bne.n	8004384 <_printf_common+0xb0>
 800437c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004384:	3501      	adds	r5, #1
 8004386:	e7c4      	b.n	8004312 <_printf_common+0x3e>
 8004388:	2030      	movs	r0, #48	; 0x30
 800438a:	18e1      	adds	r1, r4, r3
 800438c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004396:	4422      	add	r2, r4
 8004398:	3302      	adds	r3, #2
 800439a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800439e:	e7c5      	b.n	800432c <_printf_common+0x58>
 80043a0:	2301      	movs	r3, #1
 80043a2:	4622      	mov	r2, r4
 80043a4:	4649      	mov	r1, r9
 80043a6:	4638      	mov	r0, r7
 80043a8:	47c0      	blx	r8
 80043aa:	3001      	adds	r0, #1
 80043ac:	d0e6      	beq.n	800437c <_printf_common+0xa8>
 80043ae:	3601      	adds	r6, #1
 80043b0:	e7d9      	b.n	8004366 <_printf_common+0x92>
	...

080043b4 <_printf_i>:
 80043b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043b8:	460c      	mov	r4, r1
 80043ba:	7e27      	ldrb	r7, [r4, #24]
 80043bc:	4691      	mov	r9, r2
 80043be:	2f78      	cmp	r7, #120	; 0x78
 80043c0:	4680      	mov	r8, r0
 80043c2:	469a      	mov	sl, r3
 80043c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043ca:	d807      	bhi.n	80043dc <_printf_i+0x28>
 80043cc:	2f62      	cmp	r7, #98	; 0x62
 80043ce:	d80a      	bhi.n	80043e6 <_printf_i+0x32>
 80043d0:	2f00      	cmp	r7, #0
 80043d2:	f000 80d9 	beq.w	8004588 <_printf_i+0x1d4>
 80043d6:	2f58      	cmp	r7, #88	; 0x58
 80043d8:	f000 80a4 	beq.w	8004524 <_printf_i+0x170>
 80043dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043e4:	e03a      	b.n	800445c <_printf_i+0xa8>
 80043e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043ea:	2b15      	cmp	r3, #21
 80043ec:	d8f6      	bhi.n	80043dc <_printf_i+0x28>
 80043ee:	a001      	add	r0, pc, #4	; (adr r0, 80043f4 <_printf_i+0x40>)
 80043f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043f4:	0800444d 	.word	0x0800444d
 80043f8:	08004461 	.word	0x08004461
 80043fc:	080043dd 	.word	0x080043dd
 8004400:	080043dd 	.word	0x080043dd
 8004404:	080043dd 	.word	0x080043dd
 8004408:	080043dd 	.word	0x080043dd
 800440c:	08004461 	.word	0x08004461
 8004410:	080043dd 	.word	0x080043dd
 8004414:	080043dd 	.word	0x080043dd
 8004418:	080043dd 	.word	0x080043dd
 800441c:	080043dd 	.word	0x080043dd
 8004420:	0800456f 	.word	0x0800456f
 8004424:	08004491 	.word	0x08004491
 8004428:	08004551 	.word	0x08004551
 800442c:	080043dd 	.word	0x080043dd
 8004430:	080043dd 	.word	0x080043dd
 8004434:	08004591 	.word	0x08004591
 8004438:	080043dd 	.word	0x080043dd
 800443c:	08004491 	.word	0x08004491
 8004440:	080043dd 	.word	0x080043dd
 8004444:	080043dd 	.word	0x080043dd
 8004448:	08004559 	.word	0x08004559
 800444c:	680b      	ldr	r3, [r1, #0]
 800444e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004452:	1d1a      	adds	r2, r3, #4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	600a      	str	r2, [r1, #0]
 8004458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800445c:	2301      	movs	r3, #1
 800445e:	e0a4      	b.n	80045aa <_printf_i+0x1f6>
 8004460:	6825      	ldr	r5, [r4, #0]
 8004462:	6808      	ldr	r0, [r1, #0]
 8004464:	062e      	lsls	r6, r5, #24
 8004466:	f100 0304 	add.w	r3, r0, #4
 800446a:	d50a      	bpl.n	8004482 <_printf_i+0xce>
 800446c:	6805      	ldr	r5, [r0, #0]
 800446e:	600b      	str	r3, [r1, #0]
 8004470:	2d00      	cmp	r5, #0
 8004472:	da03      	bge.n	800447c <_printf_i+0xc8>
 8004474:	232d      	movs	r3, #45	; 0x2d
 8004476:	426d      	negs	r5, r5
 8004478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800447c:	230a      	movs	r3, #10
 800447e:	485e      	ldr	r0, [pc, #376]	; (80045f8 <_printf_i+0x244>)
 8004480:	e019      	b.n	80044b6 <_printf_i+0x102>
 8004482:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004486:	6805      	ldr	r5, [r0, #0]
 8004488:	600b      	str	r3, [r1, #0]
 800448a:	bf18      	it	ne
 800448c:	b22d      	sxthne	r5, r5
 800448e:	e7ef      	b.n	8004470 <_printf_i+0xbc>
 8004490:	680b      	ldr	r3, [r1, #0]
 8004492:	6825      	ldr	r5, [r4, #0]
 8004494:	1d18      	adds	r0, r3, #4
 8004496:	6008      	str	r0, [r1, #0]
 8004498:	0628      	lsls	r0, r5, #24
 800449a:	d501      	bpl.n	80044a0 <_printf_i+0xec>
 800449c:	681d      	ldr	r5, [r3, #0]
 800449e:	e002      	b.n	80044a6 <_printf_i+0xf2>
 80044a0:	0669      	lsls	r1, r5, #25
 80044a2:	d5fb      	bpl.n	800449c <_printf_i+0xe8>
 80044a4:	881d      	ldrh	r5, [r3, #0]
 80044a6:	2f6f      	cmp	r7, #111	; 0x6f
 80044a8:	bf0c      	ite	eq
 80044aa:	2308      	moveq	r3, #8
 80044ac:	230a      	movne	r3, #10
 80044ae:	4852      	ldr	r0, [pc, #328]	; (80045f8 <_printf_i+0x244>)
 80044b0:	2100      	movs	r1, #0
 80044b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044b6:	6866      	ldr	r6, [r4, #4]
 80044b8:	2e00      	cmp	r6, #0
 80044ba:	bfa8      	it	ge
 80044bc:	6821      	ldrge	r1, [r4, #0]
 80044be:	60a6      	str	r6, [r4, #8]
 80044c0:	bfa4      	itt	ge
 80044c2:	f021 0104 	bicge.w	r1, r1, #4
 80044c6:	6021      	strge	r1, [r4, #0]
 80044c8:	b90d      	cbnz	r5, 80044ce <_printf_i+0x11a>
 80044ca:	2e00      	cmp	r6, #0
 80044cc:	d04d      	beq.n	800456a <_printf_i+0x1b6>
 80044ce:	4616      	mov	r6, r2
 80044d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80044d4:	fb03 5711 	mls	r7, r3, r1, r5
 80044d8:	5dc7      	ldrb	r7, [r0, r7]
 80044da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044de:	462f      	mov	r7, r5
 80044e0:	42bb      	cmp	r3, r7
 80044e2:	460d      	mov	r5, r1
 80044e4:	d9f4      	bls.n	80044d0 <_printf_i+0x11c>
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d10b      	bne.n	8004502 <_printf_i+0x14e>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	07df      	lsls	r7, r3, #31
 80044ee:	d508      	bpl.n	8004502 <_printf_i+0x14e>
 80044f0:	6923      	ldr	r3, [r4, #16]
 80044f2:	6861      	ldr	r1, [r4, #4]
 80044f4:	4299      	cmp	r1, r3
 80044f6:	bfde      	ittt	le
 80044f8:	2330      	movle	r3, #48	; 0x30
 80044fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044fe:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004502:	1b92      	subs	r2, r2, r6
 8004504:	6122      	str	r2, [r4, #16]
 8004506:	464b      	mov	r3, r9
 8004508:	4621      	mov	r1, r4
 800450a:	4640      	mov	r0, r8
 800450c:	f8cd a000 	str.w	sl, [sp]
 8004510:	aa03      	add	r2, sp, #12
 8004512:	f7ff fedf 	bl	80042d4 <_printf_common>
 8004516:	3001      	adds	r0, #1
 8004518:	d14c      	bne.n	80045b4 <_printf_i+0x200>
 800451a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800451e:	b004      	add	sp, #16
 8004520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004524:	4834      	ldr	r0, [pc, #208]	; (80045f8 <_printf_i+0x244>)
 8004526:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800452a:	680e      	ldr	r6, [r1, #0]
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004532:	061f      	lsls	r7, r3, #24
 8004534:	600e      	str	r6, [r1, #0]
 8004536:	d514      	bpl.n	8004562 <_printf_i+0x1ae>
 8004538:	07d9      	lsls	r1, r3, #31
 800453a:	bf44      	itt	mi
 800453c:	f043 0320 	orrmi.w	r3, r3, #32
 8004540:	6023      	strmi	r3, [r4, #0]
 8004542:	b91d      	cbnz	r5, 800454c <_printf_i+0x198>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	f023 0320 	bic.w	r3, r3, #32
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	2310      	movs	r3, #16
 800454e:	e7af      	b.n	80044b0 <_printf_i+0xfc>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	f043 0320 	orr.w	r3, r3, #32
 8004556:	6023      	str	r3, [r4, #0]
 8004558:	2378      	movs	r3, #120	; 0x78
 800455a:	4828      	ldr	r0, [pc, #160]	; (80045fc <_printf_i+0x248>)
 800455c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004560:	e7e3      	b.n	800452a <_printf_i+0x176>
 8004562:	065e      	lsls	r6, r3, #25
 8004564:	bf48      	it	mi
 8004566:	b2ad      	uxthmi	r5, r5
 8004568:	e7e6      	b.n	8004538 <_printf_i+0x184>
 800456a:	4616      	mov	r6, r2
 800456c:	e7bb      	b.n	80044e6 <_printf_i+0x132>
 800456e:	680b      	ldr	r3, [r1, #0]
 8004570:	6826      	ldr	r6, [r4, #0]
 8004572:	1d1d      	adds	r5, r3, #4
 8004574:	6960      	ldr	r0, [r4, #20]
 8004576:	600d      	str	r5, [r1, #0]
 8004578:	0635      	lsls	r5, r6, #24
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	d501      	bpl.n	8004582 <_printf_i+0x1ce>
 800457e:	6018      	str	r0, [r3, #0]
 8004580:	e002      	b.n	8004588 <_printf_i+0x1d4>
 8004582:	0671      	lsls	r1, r6, #25
 8004584:	d5fb      	bpl.n	800457e <_printf_i+0x1ca>
 8004586:	8018      	strh	r0, [r3, #0]
 8004588:	2300      	movs	r3, #0
 800458a:	4616      	mov	r6, r2
 800458c:	6123      	str	r3, [r4, #16]
 800458e:	e7ba      	b.n	8004506 <_printf_i+0x152>
 8004590:	680b      	ldr	r3, [r1, #0]
 8004592:	1d1a      	adds	r2, r3, #4
 8004594:	600a      	str	r2, [r1, #0]
 8004596:	681e      	ldr	r6, [r3, #0]
 8004598:	2100      	movs	r1, #0
 800459a:	4630      	mov	r0, r6
 800459c:	6862      	ldr	r2, [r4, #4]
 800459e:	f001 fa25 	bl	80059ec <memchr>
 80045a2:	b108      	cbz	r0, 80045a8 <_printf_i+0x1f4>
 80045a4:	1b80      	subs	r0, r0, r6
 80045a6:	6060      	str	r0, [r4, #4]
 80045a8:	6863      	ldr	r3, [r4, #4]
 80045aa:	6123      	str	r3, [r4, #16]
 80045ac:	2300      	movs	r3, #0
 80045ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045b2:	e7a8      	b.n	8004506 <_printf_i+0x152>
 80045b4:	4632      	mov	r2, r6
 80045b6:	4649      	mov	r1, r9
 80045b8:	4640      	mov	r0, r8
 80045ba:	6923      	ldr	r3, [r4, #16]
 80045bc:	47d0      	blx	sl
 80045be:	3001      	adds	r0, #1
 80045c0:	d0ab      	beq.n	800451a <_printf_i+0x166>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	079b      	lsls	r3, r3, #30
 80045c6:	d413      	bmi.n	80045f0 <_printf_i+0x23c>
 80045c8:	68e0      	ldr	r0, [r4, #12]
 80045ca:	9b03      	ldr	r3, [sp, #12]
 80045cc:	4298      	cmp	r0, r3
 80045ce:	bfb8      	it	lt
 80045d0:	4618      	movlt	r0, r3
 80045d2:	e7a4      	b.n	800451e <_printf_i+0x16a>
 80045d4:	2301      	movs	r3, #1
 80045d6:	4632      	mov	r2, r6
 80045d8:	4649      	mov	r1, r9
 80045da:	4640      	mov	r0, r8
 80045dc:	47d0      	blx	sl
 80045de:	3001      	adds	r0, #1
 80045e0:	d09b      	beq.n	800451a <_printf_i+0x166>
 80045e2:	3501      	adds	r5, #1
 80045e4:	68e3      	ldr	r3, [r4, #12]
 80045e6:	9903      	ldr	r1, [sp, #12]
 80045e8:	1a5b      	subs	r3, r3, r1
 80045ea:	42ab      	cmp	r3, r5
 80045ec:	dcf2      	bgt.n	80045d4 <_printf_i+0x220>
 80045ee:	e7eb      	b.n	80045c8 <_printf_i+0x214>
 80045f0:	2500      	movs	r5, #0
 80045f2:	f104 0619 	add.w	r6, r4, #25
 80045f6:	e7f5      	b.n	80045e4 <_printf_i+0x230>
 80045f8:	08006896 	.word	0x08006896
 80045fc:	080068a7 	.word	0x080068a7

08004600 <iprintf>:
 8004600:	b40f      	push	{r0, r1, r2, r3}
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <iprintf+0x2c>)
 8004604:	b513      	push	{r0, r1, r4, lr}
 8004606:	681c      	ldr	r4, [r3, #0]
 8004608:	b124      	cbz	r4, 8004614 <iprintf+0x14>
 800460a:	69a3      	ldr	r3, [r4, #24]
 800460c:	b913      	cbnz	r3, 8004614 <iprintf+0x14>
 800460e:	4620      	mov	r0, r4
 8004610:	f001 f8da 	bl	80057c8 <__sinit>
 8004614:	ab05      	add	r3, sp, #20
 8004616:	4620      	mov	r0, r4
 8004618:	9a04      	ldr	r2, [sp, #16]
 800461a:	68a1      	ldr	r1, [r4, #8]
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	f001 fe5f 	bl	80062e0 <_vfiprintf_r>
 8004622:	b002      	add	sp, #8
 8004624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004628:	b004      	add	sp, #16
 800462a:	4770      	bx	lr
 800462c:	20000010 	.word	0x20000010

08004630 <_puts_r>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	460e      	mov	r6, r1
 8004634:	4605      	mov	r5, r0
 8004636:	b118      	cbz	r0, 8004640 <_puts_r+0x10>
 8004638:	6983      	ldr	r3, [r0, #24]
 800463a:	b90b      	cbnz	r3, 8004640 <_puts_r+0x10>
 800463c:	f001 f8c4 	bl	80057c8 <__sinit>
 8004640:	69ab      	ldr	r3, [r5, #24]
 8004642:	68ac      	ldr	r4, [r5, #8]
 8004644:	b913      	cbnz	r3, 800464c <_puts_r+0x1c>
 8004646:	4628      	mov	r0, r5
 8004648:	f001 f8be 	bl	80057c8 <__sinit>
 800464c:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <_puts_r+0xd0>)
 800464e:	429c      	cmp	r4, r3
 8004650:	d120      	bne.n	8004694 <_puts_r+0x64>
 8004652:	686c      	ldr	r4, [r5, #4]
 8004654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004656:	07db      	lsls	r3, r3, #31
 8004658:	d405      	bmi.n	8004666 <_puts_r+0x36>
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	0598      	lsls	r0, r3, #22
 800465e:	d402      	bmi.n	8004666 <_puts_r+0x36>
 8004660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004662:	f001 f954 	bl	800590e <__retarget_lock_acquire_recursive>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	0719      	lsls	r1, r3, #28
 800466a:	d51d      	bpl.n	80046a8 <_puts_r+0x78>
 800466c:	6923      	ldr	r3, [r4, #16]
 800466e:	b1db      	cbz	r3, 80046a8 <_puts_r+0x78>
 8004670:	3e01      	subs	r6, #1
 8004672:	68a3      	ldr	r3, [r4, #8]
 8004674:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004678:	3b01      	subs	r3, #1
 800467a:	60a3      	str	r3, [r4, #8]
 800467c:	bb39      	cbnz	r1, 80046ce <_puts_r+0x9e>
 800467e:	2b00      	cmp	r3, #0
 8004680:	da38      	bge.n	80046f4 <_puts_r+0xc4>
 8004682:	4622      	mov	r2, r4
 8004684:	210a      	movs	r1, #10
 8004686:	4628      	mov	r0, r5
 8004688:	f000 f848 	bl	800471c <__swbuf_r>
 800468c:	3001      	adds	r0, #1
 800468e:	d011      	beq.n	80046b4 <_puts_r+0x84>
 8004690:	250a      	movs	r5, #10
 8004692:	e011      	b.n	80046b8 <_puts_r+0x88>
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <_puts_r+0xd4>)
 8004696:	429c      	cmp	r4, r3
 8004698:	d101      	bne.n	800469e <_puts_r+0x6e>
 800469a:	68ac      	ldr	r4, [r5, #8]
 800469c:	e7da      	b.n	8004654 <_puts_r+0x24>
 800469e:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <_puts_r+0xd8>)
 80046a0:	429c      	cmp	r4, r3
 80046a2:	bf08      	it	eq
 80046a4:	68ec      	ldreq	r4, [r5, #12]
 80046a6:	e7d5      	b.n	8004654 <_puts_r+0x24>
 80046a8:	4621      	mov	r1, r4
 80046aa:	4628      	mov	r0, r5
 80046ac:	f000 f888 	bl	80047c0 <__swsetup_r>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	d0dd      	beq.n	8004670 <_puts_r+0x40>
 80046b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80046b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046ba:	07da      	lsls	r2, r3, #31
 80046bc:	d405      	bmi.n	80046ca <_puts_r+0x9a>
 80046be:	89a3      	ldrh	r3, [r4, #12]
 80046c0:	059b      	lsls	r3, r3, #22
 80046c2:	d402      	bmi.n	80046ca <_puts_r+0x9a>
 80046c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046c6:	f001 f923 	bl	8005910 <__retarget_lock_release_recursive>
 80046ca:	4628      	mov	r0, r5
 80046cc:	bd70      	pop	{r4, r5, r6, pc}
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	da04      	bge.n	80046dc <_puts_r+0xac>
 80046d2:	69a2      	ldr	r2, [r4, #24]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	dc06      	bgt.n	80046e6 <_puts_r+0xb6>
 80046d8:	290a      	cmp	r1, #10
 80046da:	d004      	beq.n	80046e6 <_puts_r+0xb6>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	6022      	str	r2, [r4, #0]
 80046e2:	7019      	strb	r1, [r3, #0]
 80046e4:	e7c5      	b.n	8004672 <_puts_r+0x42>
 80046e6:	4622      	mov	r2, r4
 80046e8:	4628      	mov	r0, r5
 80046ea:	f000 f817 	bl	800471c <__swbuf_r>
 80046ee:	3001      	adds	r0, #1
 80046f0:	d1bf      	bne.n	8004672 <_puts_r+0x42>
 80046f2:	e7df      	b.n	80046b4 <_puts_r+0x84>
 80046f4:	250a      	movs	r5, #10
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	6022      	str	r2, [r4, #0]
 80046fc:	701d      	strb	r5, [r3, #0]
 80046fe:	e7db      	b.n	80046b8 <_puts_r+0x88>
 8004700:	0800696c 	.word	0x0800696c
 8004704:	0800698c 	.word	0x0800698c
 8004708:	0800694c 	.word	0x0800694c

0800470c <puts>:
 800470c:	4b02      	ldr	r3, [pc, #8]	; (8004718 <puts+0xc>)
 800470e:	4601      	mov	r1, r0
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	f7ff bf8d 	b.w	8004630 <_puts_r>
 8004716:	bf00      	nop
 8004718:	20000010 	.word	0x20000010

0800471c <__swbuf_r>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	460e      	mov	r6, r1
 8004720:	4614      	mov	r4, r2
 8004722:	4605      	mov	r5, r0
 8004724:	b118      	cbz	r0, 800472e <__swbuf_r+0x12>
 8004726:	6983      	ldr	r3, [r0, #24]
 8004728:	b90b      	cbnz	r3, 800472e <__swbuf_r+0x12>
 800472a:	f001 f84d 	bl	80057c8 <__sinit>
 800472e:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <__swbuf_r+0x98>)
 8004730:	429c      	cmp	r4, r3
 8004732:	d12b      	bne.n	800478c <__swbuf_r+0x70>
 8004734:	686c      	ldr	r4, [r5, #4]
 8004736:	69a3      	ldr	r3, [r4, #24]
 8004738:	60a3      	str	r3, [r4, #8]
 800473a:	89a3      	ldrh	r3, [r4, #12]
 800473c:	071a      	lsls	r2, r3, #28
 800473e:	d52f      	bpl.n	80047a0 <__swbuf_r+0x84>
 8004740:	6923      	ldr	r3, [r4, #16]
 8004742:	b36b      	cbz	r3, 80047a0 <__swbuf_r+0x84>
 8004744:	6923      	ldr	r3, [r4, #16]
 8004746:	6820      	ldr	r0, [r4, #0]
 8004748:	b2f6      	uxtb	r6, r6
 800474a:	1ac0      	subs	r0, r0, r3
 800474c:	6963      	ldr	r3, [r4, #20]
 800474e:	4637      	mov	r7, r6
 8004750:	4283      	cmp	r3, r0
 8004752:	dc04      	bgt.n	800475e <__swbuf_r+0x42>
 8004754:	4621      	mov	r1, r4
 8004756:	4628      	mov	r0, r5
 8004758:	f000 ffa2 	bl	80056a0 <_fflush_r>
 800475c:	bb30      	cbnz	r0, 80047ac <__swbuf_r+0x90>
 800475e:	68a3      	ldr	r3, [r4, #8]
 8004760:	3001      	adds	r0, #1
 8004762:	3b01      	subs	r3, #1
 8004764:	60a3      	str	r3, [r4, #8]
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	6022      	str	r2, [r4, #0]
 800476c:	701e      	strb	r6, [r3, #0]
 800476e:	6963      	ldr	r3, [r4, #20]
 8004770:	4283      	cmp	r3, r0
 8004772:	d004      	beq.n	800477e <__swbuf_r+0x62>
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	07db      	lsls	r3, r3, #31
 8004778:	d506      	bpl.n	8004788 <__swbuf_r+0x6c>
 800477a:	2e0a      	cmp	r6, #10
 800477c:	d104      	bne.n	8004788 <__swbuf_r+0x6c>
 800477e:	4621      	mov	r1, r4
 8004780:	4628      	mov	r0, r5
 8004782:	f000 ff8d 	bl	80056a0 <_fflush_r>
 8004786:	b988      	cbnz	r0, 80047ac <__swbuf_r+0x90>
 8004788:	4638      	mov	r0, r7
 800478a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <__swbuf_r+0x9c>)
 800478e:	429c      	cmp	r4, r3
 8004790:	d101      	bne.n	8004796 <__swbuf_r+0x7a>
 8004792:	68ac      	ldr	r4, [r5, #8]
 8004794:	e7cf      	b.n	8004736 <__swbuf_r+0x1a>
 8004796:	4b09      	ldr	r3, [pc, #36]	; (80047bc <__swbuf_r+0xa0>)
 8004798:	429c      	cmp	r4, r3
 800479a:	bf08      	it	eq
 800479c:	68ec      	ldreq	r4, [r5, #12]
 800479e:	e7ca      	b.n	8004736 <__swbuf_r+0x1a>
 80047a0:	4621      	mov	r1, r4
 80047a2:	4628      	mov	r0, r5
 80047a4:	f000 f80c 	bl	80047c0 <__swsetup_r>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d0cb      	beq.n	8004744 <__swbuf_r+0x28>
 80047ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80047b0:	e7ea      	b.n	8004788 <__swbuf_r+0x6c>
 80047b2:	bf00      	nop
 80047b4:	0800696c 	.word	0x0800696c
 80047b8:	0800698c 	.word	0x0800698c
 80047bc:	0800694c 	.word	0x0800694c

080047c0 <__swsetup_r>:
 80047c0:	4b32      	ldr	r3, [pc, #200]	; (800488c <__swsetup_r+0xcc>)
 80047c2:	b570      	push	{r4, r5, r6, lr}
 80047c4:	681d      	ldr	r5, [r3, #0]
 80047c6:	4606      	mov	r6, r0
 80047c8:	460c      	mov	r4, r1
 80047ca:	b125      	cbz	r5, 80047d6 <__swsetup_r+0x16>
 80047cc:	69ab      	ldr	r3, [r5, #24]
 80047ce:	b913      	cbnz	r3, 80047d6 <__swsetup_r+0x16>
 80047d0:	4628      	mov	r0, r5
 80047d2:	f000 fff9 	bl	80057c8 <__sinit>
 80047d6:	4b2e      	ldr	r3, [pc, #184]	; (8004890 <__swsetup_r+0xd0>)
 80047d8:	429c      	cmp	r4, r3
 80047da:	d10f      	bne.n	80047fc <__swsetup_r+0x3c>
 80047dc:	686c      	ldr	r4, [r5, #4]
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047e4:	0719      	lsls	r1, r3, #28
 80047e6:	d42c      	bmi.n	8004842 <__swsetup_r+0x82>
 80047e8:	06dd      	lsls	r5, r3, #27
 80047ea:	d411      	bmi.n	8004810 <__swsetup_r+0x50>
 80047ec:	2309      	movs	r3, #9
 80047ee:	6033      	str	r3, [r6, #0]
 80047f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047f8:	81a3      	strh	r3, [r4, #12]
 80047fa:	e03e      	b.n	800487a <__swsetup_r+0xba>
 80047fc:	4b25      	ldr	r3, [pc, #148]	; (8004894 <__swsetup_r+0xd4>)
 80047fe:	429c      	cmp	r4, r3
 8004800:	d101      	bne.n	8004806 <__swsetup_r+0x46>
 8004802:	68ac      	ldr	r4, [r5, #8]
 8004804:	e7eb      	b.n	80047de <__swsetup_r+0x1e>
 8004806:	4b24      	ldr	r3, [pc, #144]	; (8004898 <__swsetup_r+0xd8>)
 8004808:	429c      	cmp	r4, r3
 800480a:	bf08      	it	eq
 800480c:	68ec      	ldreq	r4, [r5, #12]
 800480e:	e7e6      	b.n	80047de <__swsetup_r+0x1e>
 8004810:	0758      	lsls	r0, r3, #29
 8004812:	d512      	bpl.n	800483a <__swsetup_r+0x7a>
 8004814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004816:	b141      	cbz	r1, 800482a <__swsetup_r+0x6a>
 8004818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800481c:	4299      	cmp	r1, r3
 800481e:	d002      	beq.n	8004826 <__swsetup_r+0x66>
 8004820:	4630      	mov	r0, r6
 8004822:	f001 fc8f 	bl	8006144 <_free_r>
 8004826:	2300      	movs	r3, #0
 8004828:	6363      	str	r3, [r4, #52]	; 0x34
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004830:	81a3      	strh	r3, [r4, #12]
 8004832:	2300      	movs	r3, #0
 8004834:	6063      	str	r3, [r4, #4]
 8004836:	6923      	ldr	r3, [r4, #16]
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	f043 0308 	orr.w	r3, r3, #8
 8004840:	81a3      	strh	r3, [r4, #12]
 8004842:	6923      	ldr	r3, [r4, #16]
 8004844:	b94b      	cbnz	r3, 800485a <__swsetup_r+0x9a>
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800484c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004850:	d003      	beq.n	800485a <__swsetup_r+0x9a>
 8004852:	4621      	mov	r1, r4
 8004854:	4630      	mov	r0, r6
 8004856:	f001 f881 	bl	800595c <__smakebuf_r>
 800485a:	89a0      	ldrh	r0, [r4, #12]
 800485c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004860:	f010 0301 	ands.w	r3, r0, #1
 8004864:	d00a      	beq.n	800487c <__swsetup_r+0xbc>
 8004866:	2300      	movs	r3, #0
 8004868:	60a3      	str	r3, [r4, #8]
 800486a:	6963      	ldr	r3, [r4, #20]
 800486c:	425b      	negs	r3, r3
 800486e:	61a3      	str	r3, [r4, #24]
 8004870:	6923      	ldr	r3, [r4, #16]
 8004872:	b943      	cbnz	r3, 8004886 <__swsetup_r+0xc6>
 8004874:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004878:	d1ba      	bne.n	80047f0 <__swsetup_r+0x30>
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	0781      	lsls	r1, r0, #30
 800487e:	bf58      	it	pl
 8004880:	6963      	ldrpl	r3, [r4, #20]
 8004882:	60a3      	str	r3, [r4, #8]
 8004884:	e7f4      	b.n	8004870 <__swsetup_r+0xb0>
 8004886:	2000      	movs	r0, #0
 8004888:	e7f7      	b.n	800487a <__swsetup_r+0xba>
 800488a:	bf00      	nop
 800488c:	20000010 	.word	0x20000010
 8004890:	0800696c 	.word	0x0800696c
 8004894:	0800698c 	.word	0x0800698c
 8004898:	0800694c 	.word	0x0800694c

0800489c <quorem>:
 800489c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	6903      	ldr	r3, [r0, #16]
 80048a2:	690c      	ldr	r4, [r1, #16]
 80048a4:	4607      	mov	r7, r0
 80048a6:	42a3      	cmp	r3, r4
 80048a8:	f2c0 8083 	blt.w	80049b2 <quorem+0x116>
 80048ac:	3c01      	subs	r4, #1
 80048ae:	f100 0514 	add.w	r5, r0, #20
 80048b2:	f101 0814 	add.w	r8, r1, #20
 80048b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80048c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048c4:	3301      	adds	r3, #1
 80048c6:	429a      	cmp	r2, r3
 80048c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80048cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80048d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80048d4:	d332      	bcc.n	800493c <quorem+0xa0>
 80048d6:	f04f 0e00 	mov.w	lr, #0
 80048da:	4640      	mov	r0, r8
 80048dc:	46ac      	mov	ip, r5
 80048de:	46f2      	mov	sl, lr
 80048e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80048e4:	b293      	uxth	r3, r2
 80048e6:	fb06 e303 	mla	r3, r6, r3, lr
 80048ea:	0c12      	lsrs	r2, r2, #16
 80048ec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80048f0:	fb06 e202 	mla	r2, r6, r2, lr
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	ebaa 0303 	sub.w	r3, sl, r3
 80048fa:	f8dc a000 	ldr.w	sl, [ip]
 80048fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004902:	fa1f fa8a 	uxth.w	sl, sl
 8004906:	4453      	add	r3, sl
 8004908:	fa1f fa82 	uxth.w	sl, r2
 800490c:	f8dc 2000 	ldr.w	r2, [ip]
 8004910:	4581      	cmp	r9, r0
 8004912:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004916:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800491a:	b29b      	uxth	r3, r3
 800491c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004920:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004924:	f84c 3b04 	str.w	r3, [ip], #4
 8004928:	d2da      	bcs.n	80048e0 <quorem+0x44>
 800492a:	f855 300b 	ldr.w	r3, [r5, fp]
 800492e:	b92b      	cbnz	r3, 800493c <quorem+0xa0>
 8004930:	9b01      	ldr	r3, [sp, #4]
 8004932:	3b04      	subs	r3, #4
 8004934:	429d      	cmp	r5, r3
 8004936:	461a      	mov	r2, r3
 8004938:	d32f      	bcc.n	800499a <quorem+0xfe>
 800493a:	613c      	str	r4, [r7, #16]
 800493c:	4638      	mov	r0, r7
 800493e:	f001 faeb 	bl	8005f18 <__mcmp>
 8004942:	2800      	cmp	r0, #0
 8004944:	db25      	blt.n	8004992 <quorem+0xf6>
 8004946:	4628      	mov	r0, r5
 8004948:	f04f 0c00 	mov.w	ip, #0
 800494c:	3601      	adds	r6, #1
 800494e:	f858 1b04 	ldr.w	r1, [r8], #4
 8004952:	f8d0 e000 	ldr.w	lr, [r0]
 8004956:	b28b      	uxth	r3, r1
 8004958:	ebac 0303 	sub.w	r3, ip, r3
 800495c:	fa1f f28e 	uxth.w	r2, lr
 8004960:	4413      	add	r3, r2
 8004962:	0c0a      	lsrs	r2, r1, #16
 8004964:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004968:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800496c:	b29b      	uxth	r3, r3
 800496e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004972:	45c1      	cmp	r9, r8
 8004974:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004978:	f840 3b04 	str.w	r3, [r0], #4
 800497c:	d2e7      	bcs.n	800494e <quorem+0xb2>
 800497e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004986:	b922      	cbnz	r2, 8004992 <quorem+0xf6>
 8004988:	3b04      	subs	r3, #4
 800498a:	429d      	cmp	r5, r3
 800498c:	461a      	mov	r2, r3
 800498e:	d30a      	bcc.n	80049a6 <quorem+0x10a>
 8004990:	613c      	str	r4, [r7, #16]
 8004992:	4630      	mov	r0, r6
 8004994:	b003      	add	sp, #12
 8004996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	3b04      	subs	r3, #4
 800499e:	2a00      	cmp	r2, #0
 80049a0:	d1cb      	bne.n	800493a <quorem+0x9e>
 80049a2:	3c01      	subs	r4, #1
 80049a4:	e7c6      	b.n	8004934 <quorem+0x98>
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	3b04      	subs	r3, #4
 80049aa:	2a00      	cmp	r2, #0
 80049ac:	d1f0      	bne.n	8004990 <quorem+0xf4>
 80049ae:	3c01      	subs	r4, #1
 80049b0:	e7eb      	b.n	800498a <quorem+0xee>
 80049b2:	2000      	movs	r0, #0
 80049b4:	e7ee      	b.n	8004994 <quorem+0xf8>
	...

080049b8 <_dtoa_r>:
 80049b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049bc:	4616      	mov	r6, r2
 80049be:	461f      	mov	r7, r3
 80049c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80049c2:	b099      	sub	sp, #100	; 0x64
 80049c4:	4605      	mov	r5, r0
 80049c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80049ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80049ce:	b974      	cbnz	r4, 80049ee <_dtoa_r+0x36>
 80049d0:	2010      	movs	r0, #16
 80049d2:	f001 f803 	bl	80059dc <malloc>
 80049d6:	4602      	mov	r2, r0
 80049d8:	6268      	str	r0, [r5, #36]	; 0x24
 80049da:	b920      	cbnz	r0, 80049e6 <_dtoa_r+0x2e>
 80049dc:	21ea      	movs	r1, #234	; 0xea
 80049de:	4bae      	ldr	r3, [pc, #696]	; (8004c98 <_dtoa_r+0x2e0>)
 80049e0:	48ae      	ldr	r0, [pc, #696]	; (8004c9c <_dtoa_r+0x2e4>)
 80049e2:	f001 fe13 	bl	800660c <__assert_func>
 80049e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80049ea:	6004      	str	r4, [r0, #0]
 80049ec:	60c4      	str	r4, [r0, #12]
 80049ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049f0:	6819      	ldr	r1, [r3, #0]
 80049f2:	b151      	cbz	r1, 8004a0a <_dtoa_r+0x52>
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	2301      	movs	r3, #1
 80049f8:	4093      	lsls	r3, r2
 80049fa:	604a      	str	r2, [r1, #4]
 80049fc:	608b      	str	r3, [r1, #8]
 80049fe:	4628      	mov	r0, r5
 8004a00:	f001 f850 	bl	8005aa4 <_Bfree>
 8004a04:	2200      	movs	r2, #0
 8004a06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	1e3b      	subs	r3, r7, #0
 8004a0c:	bfaf      	iteee	ge
 8004a0e:	2300      	movge	r3, #0
 8004a10:	2201      	movlt	r2, #1
 8004a12:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a16:	9305      	strlt	r3, [sp, #20]
 8004a18:	bfa8      	it	ge
 8004a1a:	f8c8 3000 	strge.w	r3, [r8]
 8004a1e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004a22:	4b9f      	ldr	r3, [pc, #636]	; (8004ca0 <_dtoa_r+0x2e8>)
 8004a24:	bfb8      	it	lt
 8004a26:	f8c8 2000 	strlt.w	r2, [r8]
 8004a2a:	ea33 0309 	bics.w	r3, r3, r9
 8004a2e:	d119      	bne.n	8004a64 <_dtoa_r+0xac>
 8004a30:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a3c:	4333      	orrs	r3, r6
 8004a3e:	f000 8580 	beq.w	8005542 <_dtoa_r+0xb8a>
 8004a42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a44:	b953      	cbnz	r3, 8004a5c <_dtoa_r+0xa4>
 8004a46:	4b97      	ldr	r3, [pc, #604]	; (8004ca4 <_dtoa_r+0x2ec>)
 8004a48:	e022      	b.n	8004a90 <_dtoa_r+0xd8>
 8004a4a:	4b97      	ldr	r3, [pc, #604]	; (8004ca8 <_dtoa_r+0x2f0>)
 8004a4c:	9308      	str	r3, [sp, #32]
 8004a4e:	3308      	adds	r3, #8
 8004a50:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	9808      	ldr	r0, [sp, #32]
 8004a56:	b019      	add	sp, #100	; 0x64
 8004a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5c:	4b91      	ldr	r3, [pc, #580]	; (8004ca4 <_dtoa_r+0x2ec>)
 8004a5e:	9308      	str	r3, [sp, #32]
 8004a60:	3303      	adds	r3, #3
 8004a62:	e7f5      	b.n	8004a50 <_dtoa_r+0x98>
 8004a64:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a68:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004a6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a70:	2200      	movs	r2, #0
 8004a72:	2300      	movs	r3, #0
 8004a74:	f7fc f8b8 	bl	8000be8 <__aeabi_dcmpeq>
 8004a78:	4680      	mov	r8, r0
 8004a7a:	b158      	cbz	r0, 8004a94 <_dtoa_r+0xdc>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8559 	beq.w	800553c <_dtoa_r+0xb84>
 8004a8a:	4888      	ldr	r0, [pc, #544]	; (8004cac <_dtoa_r+0x2f4>)
 8004a8c:	6018      	str	r0, [r3, #0]
 8004a8e:	1e43      	subs	r3, r0, #1
 8004a90:	9308      	str	r3, [sp, #32]
 8004a92:	e7df      	b.n	8004a54 <_dtoa_r+0x9c>
 8004a94:	ab16      	add	r3, sp, #88	; 0x58
 8004a96:	9301      	str	r3, [sp, #4]
 8004a98:	ab17      	add	r3, sp, #92	; 0x5c
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004aa2:	f001 fae5 	bl	8006070 <__d2b>
 8004aa6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004aaa:	4682      	mov	sl, r0
 8004aac:	2c00      	cmp	r4, #0
 8004aae:	d07e      	beq.n	8004bae <_dtoa_r+0x1f6>
 8004ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ab6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004aba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004abe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004ac2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004ac6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004aca:	2200      	movs	r2, #0
 8004acc:	4b78      	ldr	r3, [pc, #480]	; (8004cb0 <_dtoa_r+0x2f8>)
 8004ace:	f7fb fc6b 	bl	80003a8 <__aeabi_dsub>
 8004ad2:	a36b      	add	r3, pc, #428	; (adr r3, 8004c80 <_dtoa_r+0x2c8>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f7fb fe1e 	bl	8000718 <__aeabi_dmul>
 8004adc:	a36a      	add	r3, pc, #424	; (adr r3, 8004c88 <_dtoa_r+0x2d0>)
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f7fb fc63 	bl	80003ac <__adddf3>
 8004ae6:	4606      	mov	r6, r0
 8004ae8:	4620      	mov	r0, r4
 8004aea:	460f      	mov	r7, r1
 8004aec:	f7fb fdaa 	bl	8000644 <__aeabi_i2d>
 8004af0:	a367      	add	r3, pc, #412	; (adr r3, 8004c90 <_dtoa_r+0x2d8>)
 8004af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af6:	f7fb fe0f 	bl	8000718 <__aeabi_dmul>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4630      	mov	r0, r6
 8004b00:	4639      	mov	r1, r7
 8004b02:	f7fb fc53 	bl	80003ac <__adddf3>
 8004b06:	4606      	mov	r6, r0
 8004b08:	460f      	mov	r7, r1
 8004b0a:	f7fc f8b5 	bl	8000c78 <__aeabi_d2iz>
 8004b0e:	2200      	movs	r2, #0
 8004b10:	4681      	mov	r9, r0
 8004b12:	2300      	movs	r3, #0
 8004b14:	4630      	mov	r0, r6
 8004b16:	4639      	mov	r1, r7
 8004b18:	f7fc f870 	bl	8000bfc <__aeabi_dcmplt>
 8004b1c:	b148      	cbz	r0, 8004b32 <_dtoa_r+0x17a>
 8004b1e:	4648      	mov	r0, r9
 8004b20:	f7fb fd90 	bl	8000644 <__aeabi_i2d>
 8004b24:	4632      	mov	r2, r6
 8004b26:	463b      	mov	r3, r7
 8004b28:	f7fc f85e 	bl	8000be8 <__aeabi_dcmpeq>
 8004b2c:	b908      	cbnz	r0, 8004b32 <_dtoa_r+0x17a>
 8004b2e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004b32:	f1b9 0f16 	cmp.w	r9, #22
 8004b36:	d857      	bhi.n	8004be8 <_dtoa_r+0x230>
 8004b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b3c:	4b5d      	ldr	r3, [pc, #372]	; (8004cb4 <_dtoa_r+0x2fc>)
 8004b3e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	f7fc f859 	bl	8000bfc <__aeabi_dcmplt>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d04e      	beq.n	8004bec <_dtoa_r+0x234>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004b54:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004b58:	1b1c      	subs	r4, r3, r4
 8004b5a:	1e63      	subs	r3, r4, #1
 8004b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b5e:	bf49      	itett	mi
 8004b60:	f1c4 0301 	rsbmi	r3, r4, #1
 8004b64:	2300      	movpl	r3, #0
 8004b66:	9306      	strmi	r3, [sp, #24]
 8004b68:	2300      	movmi	r3, #0
 8004b6a:	bf54      	ite	pl
 8004b6c:	9306      	strpl	r3, [sp, #24]
 8004b6e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004b70:	f1b9 0f00 	cmp.w	r9, #0
 8004b74:	db3c      	blt.n	8004bf0 <_dtoa_r+0x238>
 8004b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b78:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004b7c:	444b      	add	r3, r9
 8004b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b80:	2300      	movs	r3, #0
 8004b82:	930a      	str	r3, [sp, #40]	; 0x28
 8004b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b86:	2b09      	cmp	r3, #9
 8004b88:	d86c      	bhi.n	8004c64 <_dtoa_r+0x2ac>
 8004b8a:	2b05      	cmp	r3, #5
 8004b8c:	bfc4      	itt	gt
 8004b8e:	3b04      	subgt	r3, #4
 8004b90:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004b92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b94:	bfc8      	it	gt
 8004b96:	2400      	movgt	r4, #0
 8004b98:	f1a3 0302 	sub.w	r3, r3, #2
 8004b9c:	bfd8      	it	le
 8004b9e:	2401      	movle	r4, #1
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	f200 808b 	bhi.w	8004cbc <_dtoa_r+0x304>
 8004ba6:	e8df f003 	tbb	[pc, r3]
 8004baa:	4f2d      	.short	0x4f2d
 8004bac:	5b4d      	.short	0x5b4d
 8004bae:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004bb2:	441c      	add	r4, r3
 8004bb4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	bfc3      	ittte	gt
 8004bbc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004bc0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004bc4:	fa09 f303 	lslgt.w	r3, r9, r3
 8004bc8:	f1c3 0320 	rsble	r3, r3, #32
 8004bcc:	bfc6      	itte	gt
 8004bce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004bd2:	4318      	orrgt	r0, r3
 8004bd4:	fa06 f003 	lslle.w	r0, r6, r3
 8004bd8:	f7fb fd24 	bl	8000624 <__aeabi_ui2d>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004be2:	3c01      	subs	r4, #1
 8004be4:	9313      	str	r3, [sp, #76]	; 0x4c
 8004be6:	e770      	b.n	8004aca <_dtoa_r+0x112>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e7b3      	b.n	8004b54 <_dtoa_r+0x19c>
 8004bec:	900f      	str	r0, [sp, #60]	; 0x3c
 8004bee:	e7b2      	b.n	8004b56 <_dtoa_r+0x19e>
 8004bf0:	9b06      	ldr	r3, [sp, #24]
 8004bf2:	eba3 0309 	sub.w	r3, r3, r9
 8004bf6:	9306      	str	r3, [sp, #24]
 8004bf8:	f1c9 0300 	rsb	r3, r9, #0
 8004bfc:	930a      	str	r3, [sp, #40]	; 0x28
 8004bfe:	2300      	movs	r3, #0
 8004c00:	930e      	str	r3, [sp, #56]	; 0x38
 8004c02:	e7bf      	b.n	8004b84 <_dtoa_r+0x1cc>
 8004c04:	2300      	movs	r3, #0
 8004c06:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	dc59      	bgt.n	8004cc2 <_dtoa_r+0x30a>
 8004c0e:	f04f 0b01 	mov.w	fp, #1
 8004c12:	465b      	mov	r3, fp
 8004c14:	f8cd b008 	str.w	fp, [sp, #8]
 8004c18:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c20:	6042      	str	r2, [r0, #4]
 8004c22:	2204      	movs	r2, #4
 8004c24:	f102 0614 	add.w	r6, r2, #20
 8004c28:	429e      	cmp	r6, r3
 8004c2a:	6841      	ldr	r1, [r0, #4]
 8004c2c:	d94f      	bls.n	8004cce <_dtoa_r+0x316>
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f000 fef8 	bl	8005a24 <_Balloc>
 8004c34:	9008      	str	r0, [sp, #32]
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d14d      	bne.n	8004cd6 <_dtoa_r+0x31e>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c40:	4b1d      	ldr	r3, [pc, #116]	; (8004cb8 <_dtoa_r+0x300>)
 8004c42:	e6cd      	b.n	80049e0 <_dtoa_r+0x28>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e7de      	b.n	8004c06 <_dtoa_r+0x24e>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c4e:	eb09 0b03 	add.w	fp, r9, r3
 8004c52:	f10b 0301 	add.w	r3, fp, #1
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	9302      	str	r3, [sp, #8]
 8004c5a:	bfb8      	it	lt
 8004c5c:	2301      	movlt	r3, #1
 8004c5e:	e7dd      	b.n	8004c1c <_dtoa_r+0x264>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e7f2      	b.n	8004c4a <_dtoa_r+0x292>
 8004c64:	2401      	movs	r4, #1
 8004c66:	2300      	movs	r3, #0
 8004c68:	940b      	str	r4, [sp, #44]	; 0x2c
 8004c6a:	9322      	str	r3, [sp, #136]	; 0x88
 8004c6c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8004c70:	2200      	movs	r2, #0
 8004c72:	2312      	movs	r3, #18
 8004c74:	f8cd b008 	str.w	fp, [sp, #8]
 8004c78:	9223      	str	r2, [sp, #140]	; 0x8c
 8004c7a:	e7cf      	b.n	8004c1c <_dtoa_r+0x264>
 8004c7c:	f3af 8000 	nop.w
 8004c80:	636f4361 	.word	0x636f4361
 8004c84:	3fd287a7 	.word	0x3fd287a7
 8004c88:	8b60c8b3 	.word	0x8b60c8b3
 8004c8c:	3fc68a28 	.word	0x3fc68a28
 8004c90:	509f79fb 	.word	0x509f79fb
 8004c94:	3fd34413 	.word	0x3fd34413
 8004c98:	080068c5 	.word	0x080068c5
 8004c9c:	080068dc 	.word	0x080068dc
 8004ca0:	7ff00000 	.word	0x7ff00000
 8004ca4:	080068c1 	.word	0x080068c1
 8004ca8:	080068b8 	.word	0x080068b8
 8004cac:	08006895 	.word	0x08006895
 8004cb0:	3ff80000 	.word	0x3ff80000
 8004cb4:	08006a38 	.word	0x08006a38
 8004cb8:	0800693b 	.word	0x0800693b
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cc0:	e7d4      	b.n	8004c6c <_dtoa_r+0x2b4>
 8004cc2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004cc6:	465b      	mov	r3, fp
 8004cc8:	f8cd b008 	str.w	fp, [sp, #8]
 8004ccc:	e7a6      	b.n	8004c1c <_dtoa_r+0x264>
 8004cce:	3101      	adds	r1, #1
 8004cd0:	6041      	str	r1, [r0, #4]
 8004cd2:	0052      	lsls	r2, r2, #1
 8004cd4:	e7a6      	b.n	8004c24 <_dtoa_r+0x26c>
 8004cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cd8:	9a08      	ldr	r2, [sp, #32]
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	9b02      	ldr	r3, [sp, #8]
 8004cde:	2b0e      	cmp	r3, #14
 8004ce0:	f200 80a8 	bhi.w	8004e34 <_dtoa_r+0x47c>
 8004ce4:	2c00      	cmp	r4, #0
 8004ce6:	f000 80a5 	beq.w	8004e34 <_dtoa_r+0x47c>
 8004cea:	f1b9 0f00 	cmp.w	r9, #0
 8004cee:	dd34      	ble.n	8004d5a <_dtoa_r+0x3a2>
 8004cf0:	4a9a      	ldr	r2, [pc, #616]	; (8004f5c <_dtoa_r+0x5a4>)
 8004cf2:	f009 030f 	and.w	r3, r9, #15
 8004cf6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004cfa:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004cfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004d06:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004d0a:	d016      	beq.n	8004d3a <_dtoa_r+0x382>
 8004d0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d10:	4b93      	ldr	r3, [pc, #588]	; (8004f60 <_dtoa_r+0x5a8>)
 8004d12:	2703      	movs	r7, #3
 8004d14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d18:	f7fb fe28 	bl	800096c <__aeabi_ddiv>
 8004d1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d20:	f004 040f 	and.w	r4, r4, #15
 8004d24:	4e8e      	ldr	r6, [pc, #568]	; (8004f60 <_dtoa_r+0x5a8>)
 8004d26:	b954      	cbnz	r4, 8004d3e <_dtoa_r+0x386>
 8004d28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d30:	f7fb fe1c 	bl	800096c <__aeabi_ddiv>
 8004d34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d38:	e029      	b.n	8004d8e <_dtoa_r+0x3d6>
 8004d3a:	2702      	movs	r7, #2
 8004d3c:	e7f2      	b.n	8004d24 <_dtoa_r+0x36c>
 8004d3e:	07e1      	lsls	r1, r4, #31
 8004d40:	d508      	bpl.n	8004d54 <_dtoa_r+0x39c>
 8004d42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d4a:	f7fb fce5 	bl	8000718 <__aeabi_dmul>
 8004d4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d52:	3701      	adds	r7, #1
 8004d54:	1064      	asrs	r4, r4, #1
 8004d56:	3608      	adds	r6, #8
 8004d58:	e7e5      	b.n	8004d26 <_dtoa_r+0x36e>
 8004d5a:	f000 80a5 	beq.w	8004ea8 <_dtoa_r+0x4f0>
 8004d5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d62:	f1c9 0400 	rsb	r4, r9, #0
 8004d66:	4b7d      	ldr	r3, [pc, #500]	; (8004f5c <_dtoa_r+0x5a4>)
 8004d68:	f004 020f 	and.w	r2, r4, #15
 8004d6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f7fb fcd0 	bl	8000718 <__aeabi_dmul>
 8004d78:	2702      	movs	r7, #2
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d80:	4e77      	ldr	r6, [pc, #476]	; (8004f60 <_dtoa_r+0x5a8>)
 8004d82:	1124      	asrs	r4, r4, #4
 8004d84:	2c00      	cmp	r4, #0
 8004d86:	f040 8084 	bne.w	8004e92 <_dtoa_r+0x4da>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1d2      	bne.n	8004d34 <_dtoa_r+0x37c>
 8004d8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 808b 	beq.w	8004eac <_dtoa_r+0x4f4>
 8004d96:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004d9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004da2:	2200      	movs	r2, #0
 8004da4:	4b6f      	ldr	r3, [pc, #444]	; (8004f64 <_dtoa_r+0x5ac>)
 8004da6:	f7fb ff29 	bl	8000bfc <__aeabi_dcmplt>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d07e      	beq.n	8004eac <_dtoa_r+0x4f4>
 8004dae:	9b02      	ldr	r3, [sp, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d07b      	beq.n	8004eac <_dtoa_r+0x4f4>
 8004db4:	f1bb 0f00 	cmp.w	fp, #0
 8004db8:	dd38      	ble.n	8004e2c <_dtoa_r+0x474>
 8004dba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	4b69      	ldr	r3, [pc, #420]	; (8004f68 <_dtoa_r+0x5b0>)
 8004dc2:	f7fb fca9 	bl	8000718 <__aeabi_dmul>
 8004dc6:	465c      	mov	r4, fp
 8004dc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dcc:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8004dd0:	3701      	adds	r7, #1
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	f7fb fc36 	bl	8000644 <__aeabi_i2d>
 8004dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ddc:	f7fb fc9c 	bl	8000718 <__aeabi_dmul>
 8004de0:	2200      	movs	r2, #0
 8004de2:	4b62      	ldr	r3, [pc, #392]	; (8004f6c <_dtoa_r+0x5b4>)
 8004de4:	f7fb fae2 	bl	80003ac <__adddf3>
 8004de8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004dec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004df0:	9611      	str	r6, [sp, #68]	; 0x44
 8004df2:	2c00      	cmp	r4, #0
 8004df4:	d15d      	bne.n	8004eb2 <_dtoa_r+0x4fa>
 8004df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	4b5c      	ldr	r3, [pc, #368]	; (8004f70 <_dtoa_r+0x5b8>)
 8004dfe:	f7fb fad3 	bl	80003a8 <__aeabi_dsub>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e0a:	4633      	mov	r3, r6
 8004e0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e0e:	f7fb ff13 	bl	8000c38 <__aeabi_dcmpgt>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	f040 829e 	bne.w	8005354 <_dtoa_r+0x99c>
 8004e18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004e22:	f7fb feeb 	bl	8000bfc <__aeabi_dcmplt>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	f040 8292 	bne.w	8005350 <_dtoa_r+0x998>
 8004e2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004e30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004e34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f2c0 8153 	blt.w	80050e2 <_dtoa_r+0x72a>
 8004e3c:	f1b9 0f0e 	cmp.w	r9, #14
 8004e40:	f300 814f 	bgt.w	80050e2 <_dtoa_r+0x72a>
 8004e44:	4b45      	ldr	r3, [pc, #276]	; (8004f5c <_dtoa_r+0x5a4>)
 8004e46:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004e4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004e52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f280 80db 	bge.w	8005010 <_dtoa_r+0x658>
 8004e5a:	9b02      	ldr	r3, [sp, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f300 80d7 	bgt.w	8005010 <_dtoa_r+0x658>
 8004e62:	f040 8274 	bne.w	800534e <_dtoa_r+0x996>
 8004e66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	4b40      	ldr	r3, [pc, #256]	; (8004f70 <_dtoa_r+0x5b8>)
 8004e6e:	f7fb fc53 	bl	8000718 <__aeabi_dmul>
 8004e72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e76:	f7fb fed5 	bl	8000c24 <__aeabi_dcmpge>
 8004e7a:	9c02      	ldr	r4, [sp, #8]
 8004e7c:	4626      	mov	r6, r4
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	f040 824a 	bne.w	8005318 <_dtoa_r+0x960>
 8004e84:	2331      	movs	r3, #49	; 0x31
 8004e86:	9f08      	ldr	r7, [sp, #32]
 8004e88:	f109 0901 	add.w	r9, r9, #1
 8004e8c:	f807 3b01 	strb.w	r3, [r7], #1
 8004e90:	e246      	b.n	8005320 <_dtoa_r+0x968>
 8004e92:	07e2      	lsls	r2, r4, #31
 8004e94:	d505      	bpl.n	8004ea2 <_dtoa_r+0x4ea>
 8004e96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e9a:	f7fb fc3d 	bl	8000718 <__aeabi_dmul>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	3701      	adds	r7, #1
 8004ea2:	1064      	asrs	r4, r4, #1
 8004ea4:	3608      	adds	r6, #8
 8004ea6:	e76d      	b.n	8004d84 <_dtoa_r+0x3cc>
 8004ea8:	2702      	movs	r7, #2
 8004eaa:	e770      	b.n	8004d8e <_dtoa_r+0x3d6>
 8004eac:	46c8      	mov	r8, r9
 8004eae:	9c02      	ldr	r4, [sp, #8]
 8004eb0:	e78f      	b.n	8004dd2 <_dtoa_r+0x41a>
 8004eb2:	9908      	ldr	r1, [sp, #32]
 8004eb4:	4b29      	ldr	r3, [pc, #164]	; (8004f5c <_dtoa_r+0x5a4>)
 8004eb6:	4421      	add	r1, r4
 8004eb8:	9112      	str	r1, [sp, #72]	; 0x48
 8004eba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ebc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ec0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004ec4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	d055      	beq.n	8004f78 <_dtoa_r+0x5c0>
 8004ecc:	2000      	movs	r0, #0
 8004ece:	4929      	ldr	r1, [pc, #164]	; (8004f74 <_dtoa_r+0x5bc>)
 8004ed0:	f7fb fd4c 	bl	800096c <__aeabi_ddiv>
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	4632      	mov	r2, r6
 8004ed8:	f7fb fa66 	bl	80003a8 <__aeabi_dsub>
 8004edc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ee0:	9f08      	ldr	r7, [sp, #32]
 8004ee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ee6:	f7fb fec7 	bl	8000c78 <__aeabi_d2iz>
 8004eea:	4604      	mov	r4, r0
 8004eec:	f7fb fbaa 	bl	8000644 <__aeabi_i2d>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ef8:	f7fb fa56 	bl	80003a8 <__aeabi_dsub>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	3430      	adds	r4, #48	; 0x30
 8004f02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f0a:	f807 4b01 	strb.w	r4, [r7], #1
 8004f0e:	f7fb fe75 	bl	8000bfc <__aeabi_dcmplt>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d174      	bne.n	8005000 <_dtoa_r+0x648>
 8004f16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	4911      	ldr	r1, [pc, #68]	; (8004f64 <_dtoa_r+0x5ac>)
 8004f1e:	f7fb fa43 	bl	80003a8 <__aeabi_dsub>
 8004f22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f26:	f7fb fe69 	bl	8000bfc <__aeabi_dcmplt>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	f040 80b6 	bne.w	800509c <_dtoa_r+0x6e4>
 8004f30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f32:	429f      	cmp	r7, r3
 8004f34:	f43f af7a 	beq.w	8004e2c <_dtoa_r+0x474>
 8004f38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <_dtoa_r+0x5b0>)
 8004f40:	f7fb fbea 	bl	8000718 <__aeabi_dmul>
 8004f44:	2200      	movs	r2, #0
 8004f46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f4e:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <_dtoa_r+0x5b0>)
 8004f50:	f7fb fbe2 	bl	8000718 <__aeabi_dmul>
 8004f54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f58:	e7c3      	b.n	8004ee2 <_dtoa_r+0x52a>
 8004f5a:	bf00      	nop
 8004f5c:	08006a38 	.word	0x08006a38
 8004f60:	08006a10 	.word	0x08006a10
 8004f64:	3ff00000 	.word	0x3ff00000
 8004f68:	40240000 	.word	0x40240000
 8004f6c:	401c0000 	.word	0x401c0000
 8004f70:	40140000 	.word	0x40140000
 8004f74:	3fe00000 	.word	0x3fe00000
 8004f78:	4630      	mov	r0, r6
 8004f7a:	4639      	mov	r1, r7
 8004f7c:	f7fb fbcc 	bl	8000718 <__aeabi_dmul>
 8004f80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f86:	9c08      	ldr	r4, [sp, #32]
 8004f88:	9314      	str	r3, [sp, #80]	; 0x50
 8004f8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f8e:	f7fb fe73 	bl	8000c78 <__aeabi_d2iz>
 8004f92:	9015      	str	r0, [sp, #84]	; 0x54
 8004f94:	f7fb fb56 	bl	8000644 <__aeabi_i2d>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fa0:	f7fb fa02 	bl	80003a8 <__aeabi_dsub>
 8004fa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	3330      	adds	r3, #48	; 0x30
 8004faa:	f804 3b01 	strb.w	r3, [r4], #1
 8004fae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fb0:	460f      	mov	r7, r1
 8004fb2:	429c      	cmp	r4, r3
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	d124      	bne.n	8005004 <_dtoa_r+0x64c>
 8004fba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fbe:	4bb3      	ldr	r3, [pc, #716]	; (800528c <_dtoa_r+0x8d4>)
 8004fc0:	f7fb f9f4 	bl	80003ac <__adddf3>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4630      	mov	r0, r6
 8004fca:	4639      	mov	r1, r7
 8004fcc:	f7fb fe34 	bl	8000c38 <__aeabi_dcmpgt>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d162      	bne.n	800509a <_dtoa_r+0x6e2>
 8004fd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fd8:	2000      	movs	r0, #0
 8004fda:	49ac      	ldr	r1, [pc, #688]	; (800528c <_dtoa_r+0x8d4>)
 8004fdc:	f7fb f9e4 	bl	80003a8 <__aeabi_dsub>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	4639      	mov	r1, r7
 8004fe8:	f7fb fe08 	bl	8000bfc <__aeabi_dcmplt>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	f43f af1d 	beq.w	8004e2c <_dtoa_r+0x474>
 8004ff2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004ff4:	1e7b      	subs	r3, r7, #1
 8004ff6:	9314      	str	r3, [sp, #80]	; 0x50
 8004ff8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004ffc:	2b30      	cmp	r3, #48	; 0x30
 8004ffe:	d0f8      	beq.n	8004ff2 <_dtoa_r+0x63a>
 8005000:	46c1      	mov	r9, r8
 8005002:	e03a      	b.n	800507a <_dtoa_r+0x6c2>
 8005004:	4ba2      	ldr	r3, [pc, #648]	; (8005290 <_dtoa_r+0x8d8>)
 8005006:	f7fb fb87 	bl	8000718 <__aeabi_dmul>
 800500a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800500e:	e7bc      	b.n	8004f8a <_dtoa_r+0x5d2>
 8005010:	9f08      	ldr	r7, [sp, #32]
 8005012:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005016:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800501a:	f7fb fca7 	bl	800096c <__aeabi_ddiv>
 800501e:	f7fb fe2b 	bl	8000c78 <__aeabi_d2iz>
 8005022:	4604      	mov	r4, r0
 8005024:	f7fb fb0e 	bl	8000644 <__aeabi_i2d>
 8005028:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800502c:	f7fb fb74 	bl	8000718 <__aeabi_dmul>
 8005030:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005034:	460b      	mov	r3, r1
 8005036:	4602      	mov	r2, r0
 8005038:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800503c:	f7fb f9b4 	bl	80003a8 <__aeabi_dsub>
 8005040:	f807 6b01 	strb.w	r6, [r7], #1
 8005044:	9e08      	ldr	r6, [sp, #32]
 8005046:	9b02      	ldr	r3, [sp, #8]
 8005048:	1bbe      	subs	r6, r7, r6
 800504a:	42b3      	cmp	r3, r6
 800504c:	d13a      	bne.n	80050c4 <_dtoa_r+0x70c>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	f7fb f9ab 	bl	80003ac <__adddf3>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800505e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005062:	f7fb fde9 	bl	8000c38 <__aeabi_dcmpgt>
 8005066:	bb58      	cbnz	r0, 80050c0 <_dtoa_r+0x708>
 8005068:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800506c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005070:	f7fb fdba 	bl	8000be8 <__aeabi_dcmpeq>
 8005074:	b108      	cbz	r0, 800507a <_dtoa_r+0x6c2>
 8005076:	07e1      	lsls	r1, r4, #31
 8005078:	d422      	bmi.n	80050c0 <_dtoa_r+0x708>
 800507a:	4628      	mov	r0, r5
 800507c:	4651      	mov	r1, sl
 800507e:	f000 fd11 	bl	8005aa4 <_Bfree>
 8005082:	2300      	movs	r3, #0
 8005084:	703b      	strb	r3, [r7, #0]
 8005086:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005088:	f109 0001 	add.w	r0, r9, #1
 800508c:	6018      	str	r0, [r3, #0]
 800508e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005090:	2b00      	cmp	r3, #0
 8005092:	f43f acdf 	beq.w	8004a54 <_dtoa_r+0x9c>
 8005096:	601f      	str	r7, [r3, #0]
 8005098:	e4dc      	b.n	8004a54 <_dtoa_r+0x9c>
 800509a:	4627      	mov	r7, r4
 800509c:	463b      	mov	r3, r7
 800509e:	461f      	mov	r7, r3
 80050a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050a4:	2a39      	cmp	r2, #57	; 0x39
 80050a6:	d107      	bne.n	80050b8 <_dtoa_r+0x700>
 80050a8:	9a08      	ldr	r2, [sp, #32]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d1f7      	bne.n	800509e <_dtoa_r+0x6e6>
 80050ae:	2230      	movs	r2, #48	; 0x30
 80050b0:	9908      	ldr	r1, [sp, #32]
 80050b2:	f108 0801 	add.w	r8, r8, #1
 80050b6:	700a      	strb	r2, [r1, #0]
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	3201      	adds	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e79f      	b.n	8005000 <_dtoa_r+0x648>
 80050c0:	46c8      	mov	r8, r9
 80050c2:	e7eb      	b.n	800509c <_dtoa_r+0x6e4>
 80050c4:	2200      	movs	r2, #0
 80050c6:	4b72      	ldr	r3, [pc, #456]	; (8005290 <_dtoa_r+0x8d8>)
 80050c8:	f7fb fb26 	bl	8000718 <__aeabi_dmul>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050d4:	2200      	movs	r2, #0
 80050d6:	2300      	movs	r3, #0
 80050d8:	f7fb fd86 	bl	8000be8 <__aeabi_dcmpeq>
 80050dc:	2800      	cmp	r0, #0
 80050de:	d098      	beq.n	8005012 <_dtoa_r+0x65a>
 80050e0:	e7cb      	b.n	800507a <_dtoa_r+0x6c2>
 80050e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050e4:	2a00      	cmp	r2, #0
 80050e6:	f000 80cd 	beq.w	8005284 <_dtoa_r+0x8cc>
 80050ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80050ec:	2a01      	cmp	r2, #1
 80050ee:	f300 80af 	bgt.w	8005250 <_dtoa_r+0x898>
 80050f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80050f4:	2a00      	cmp	r2, #0
 80050f6:	f000 80a7 	beq.w	8005248 <_dtoa_r+0x890>
 80050fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005100:	9f06      	ldr	r7, [sp, #24]
 8005102:	9a06      	ldr	r2, [sp, #24]
 8005104:	2101      	movs	r1, #1
 8005106:	441a      	add	r2, r3
 8005108:	9206      	str	r2, [sp, #24]
 800510a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800510c:	4628      	mov	r0, r5
 800510e:	441a      	add	r2, r3
 8005110:	9209      	str	r2, [sp, #36]	; 0x24
 8005112:	f000 fd81 	bl	8005c18 <__i2b>
 8005116:	4606      	mov	r6, r0
 8005118:	2f00      	cmp	r7, #0
 800511a:	dd0c      	ble.n	8005136 <_dtoa_r+0x77e>
 800511c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	dd09      	ble.n	8005136 <_dtoa_r+0x77e>
 8005122:	42bb      	cmp	r3, r7
 8005124:	bfa8      	it	ge
 8005126:	463b      	movge	r3, r7
 8005128:	9a06      	ldr	r2, [sp, #24]
 800512a:	1aff      	subs	r7, r7, r3
 800512c:	1ad2      	subs	r2, r2, r3
 800512e:	9206      	str	r2, [sp, #24]
 8005130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	9309      	str	r3, [sp, #36]	; 0x24
 8005136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005138:	b1f3      	cbz	r3, 8005178 <_dtoa_r+0x7c0>
 800513a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80a9 	beq.w	8005294 <_dtoa_r+0x8dc>
 8005142:	2c00      	cmp	r4, #0
 8005144:	dd10      	ble.n	8005168 <_dtoa_r+0x7b0>
 8005146:	4631      	mov	r1, r6
 8005148:	4622      	mov	r2, r4
 800514a:	4628      	mov	r0, r5
 800514c:	f000 fe1e 	bl	8005d8c <__pow5mult>
 8005150:	4652      	mov	r2, sl
 8005152:	4601      	mov	r1, r0
 8005154:	4606      	mov	r6, r0
 8005156:	4628      	mov	r0, r5
 8005158:	f000 fd74 	bl	8005c44 <__multiply>
 800515c:	4680      	mov	r8, r0
 800515e:	4651      	mov	r1, sl
 8005160:	4628      	mov	r0, r5
 8005162:	f000 fc9f 	bl	8005aa4 <_Bfree>
 8005166:	46c2      	mov	sl, r8
 8005168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800516a:	1b1a      	subs	r2, r3, r4
 800516c:	d004      	beq.n	8005178 <_dtoa_r+0x7c0>
 800516e:	4651      	mov	r1, sl
 8005170:	4628      	mov	r0, r5
 8005172:	f000 fe0b 	bl	8005d8c <__pow5mult>
 8005176:	4682      	mov	sl, r0
 8005178:	2101      	movs	r1, #1
 800517a:	4628      	mov	r0, r5
 800517c:	f000 fd4c 	bl	8005c18 <__i2b>
 8005180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005182:	4604      	mov	r4, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	f340 8087 	ble.w	8005298 <_dtoa_r+0x8e0>
 800518a:	461a      	mov	r2, r3
 800518c:	4601      	mov	r1, r0
 800518e:	4628      	mov	r0, r5
 8005190:	f000 fdfc 	bl	8005d8c <__pow5mult>
 8005194:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005196:	4604      	mov	r4, r0
 8005198:	2b01      	cmp	r3, #1
 800519a:	f340 8080 	ble.w	800529e <_dtoa_r+0x8e6>
 800519e:	f04f 0800 	mov.w	r8, #0
 80051a2:	6923      	ldr	r3, [r4, #16]
 80051a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80051a8:	6918      	ldr	r0, [r3, #16]
 80051aa:	f000 fce7 	bl	8005b7c <__hi0bits>
 80051ae:	f1c0 0020 	rsb	r0, r0, #32
 80051b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b4:	4418      	add	r0, r3
 80051b6:	f010 001f 	ands.w	r0, r0, #31
 80051ba:	f000 8092 	beq.w	80052e2 <_dtoa_r+0x92a>
 80051be:	f1c0 0320 	rsb	r3, r0, #32
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	f340 808a 	ble.w	80052dc <_dtoa_r+0x924>
 80051c8:	f1c0 001c 	rsb	r0, r0, #28
 80051cc:	9b06      	ldr	r3, [sp, #24]
 80051ce:	4407      	add	r7, r0
 80051d0:	4403      	add	r3, r0
 80051d2:	9306      	str	r3, [sp, #24]
 80051d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d6:	4403      	add	r3, r0
 80051d8:	9309      	str	r3, [sp, #36]	; 0x24
 80051da:	9b06      	ldr	r3, [sp, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	dd05      	ble.n	80051ec <_dtoa_r+0x834>
 80051e0:	4651      	mov	r1, sl
 80051e2:	461a      	mov	r2, r3
 80051e4:	4628      	mov	r0, r5
 80051e6:	f000 fe2b 	bl	8005e40 <__lshift>
 80051ea:	4682      	mov	sl, r0
 80051ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	dd05      	ble.n	80051fe <_dtoa_r+0x846>
 80051f2:	4621      	mov	r1, r4
 80051f4:	461a      	mov	r2, r3
 80051f6:	4628      	mov	r0, r5
 80051f8:	f000 fe22 	bl	8005e40 <__lshift>
 80051fc:	4604      	mov	r4, r0
 80051fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005200:	2b00      	cmp	r3, #0
 8005202:	d070      	beq.n	80052e6 <_dtoa_r+0x92e>
 8005204:	4621      	mov	r1, r4
 8005206:	4650      	mov	r0, sl
 8005208:	f000 fe86 	bl	8005f18 <__mcmp>
 800520c:	2800      	cmp	r0, #0
 800520e:	da6a      	bge.n	80052e6 <_dtoa_r+0x92e>
 8005210:	2300      	movs	r3, #0
 8005212:	4651      	mov	r1, sl
 8005214:	220a      	movs	r2, #10
 8005216:	4628      	mov	r0, r5
 8005218:	f000 fc66 	bl	8005ae8 <__multadd>
 800521c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800521e:	4682      	mov	sl, r0
 8005220:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8193 	beq.w	8005550 <_dtoa_r+0xb98>
 800522a:	4631      	mov	r1, r6
 800522c:	2300      	movs	r3, #0
 800522e:	220a      	movs	r2, #10
 8005230:	4628      	mov	r0, r5
 8005232:	f000 fc59 	bl	8005ae8 <__multadd>
 8005236:	f1bb 0f00 	cmp.w	fp, #0
 800523a:	4606      	mov	r6, r0
 800523c:	f300 8093 	bgt.w	8005366 <_dtoa_r+0x9ae>
 8005240:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005242:	2b02      	cmp	r3, #2
 8005244:	dc57      	bgt.n	80052f6 <_dtoa_r+0x93e>
 8005246:	e08e      	b.n	8005366 <_dtoa_r+0x9ae>
 8005248:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800524a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800524e:	e756      	b.n	80050fe <_dtoa_r+0x746>
 8005250:	9b02      	ldr	r3, [sp, #8]
 8005252:	1e5c      	subs	r4, r3, #1
 8005254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005256:	42a3      	cmp	r3, r4
 8005258:	bfb7      	itett	lt
 800525a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800525c:	1b1c      	subge	r4, r3, r4
 800525e:	1ae2      	sublt	r2, r4, r3
 8005260:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005262:	bfbe      	ittt	lt
 8005264:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005266:	189b      	addlt	r3, r3, r2
 8005268:	930e      	strlt	r3, [sp, #56]	; 0x38
 800526a:	9b02      	ldr	r3, [sp, #8]
 800526c:	bfb8      	it	lt
 800526e:	2400      	movlt	r4, #0
 8005270:	2b00      	cmp	r3, #0
 8005272:	bfbb      	ittet	lt
 8005274:	9b06      	ldrlt	r3, [sp, #24]
 8005276:	9a02      	ldrlt	r2, [sp, #8]
 8005278:	9f06      	ldrge	r7, [sp, #24]
 800527a:	1a9f      	sublt	r7, r3, r2
 800527c:	bfac      	ite	ge
 800527e:	9b02      	ldrge	r3, [sp, #8]
 8005280:	2300      	movlt	r3, #0
 8005282:	e73e      	b.n	8005102 <_dtoa_r+0x74a>
 8005284:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005286:	9f06      	ldr	r7, [sp, #24]
 8005288:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800528a:	e745      	b.n	8005118 <_dtoa_r+0x760>
 800528c:	3fe00000 	.word	0x3fe00000
 8005290:	40240000 	.word	0x40240000
 8005294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005296:	e76a      	b.n	800516e <_dtoa_r+0x7b6>
 8005298:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800529a:	2b01      	cmp	r3, #1
 800529c:	dc19      	bgt.n	80052d2 <_dtoa_r+0x91a>
 800529e:	9b04      	ldr	r3, [sp, #16]
 80052a0:	b9bb      	cbnz	r3, 80052d2 <_dtoa_r+0x91a>
 80052a2:	9b05      	ldr	r3, [sp, #20]
 80052a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052a8:	b99b      	cbnz	r3, 80052d2 <_dtoa_r+0x91a>
 80052aa:	9b05      	ldr	r3, [sp, #20]
 80052ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052b0:	0d1b      	lsrs	r3, r3, #20
 80052b2:	051b      	lsls	r3, r3, #20
 80052b4:	b183      	cbz	r3, 80052d8 <_dtoa_r+0x920>
 80052b6:	f04f 0801 	mov.w	r8, #1
 80052ba:	9b06      	ldr	r3, [sp, #24]
 80052bc:	3301      	adds	r3, #1
 80052be:	9306      	str	r3, [sp, #24]
 80052c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c2:	3301      	adds	r3, #1
 80052c4:	9309      	str	r3, [sp, #36]	; 0x24
 80052c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f47f af6a 	bne.w	80051a2 <_dtoa_r+0x7ea>
 80052ce:	2001      	movs	r0, #1
 80052d0:	e76f      	b.n	80051b2 <_dtoa_r+0x7fa>
 80052d2:	f04f 0800 	mov.w	r8, #0
 80052d6:	e7f6      	b.n	80052c6 <_dtoa_r+0x90e>
 80052d8:	4698      	mov	r8, r3
 80052da:	e7f4      	b.n	80052c6 <_dtoa_r+0x90e>
 80052dc:	f43f af7d 	beq.w	80051da <_dtoa_r+0x822>
 80052e0:	4618      	mov	r0, r3
 80052e2:	301c      	adds	r0, #28
 80052e4:	e772      	b.n	80051cc <_dtoa_r+0x814>
 80052e6:	9b02      	ldr	r3, [sp, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	dc36      	bgt.n	800535a <_dtoa_r+0x9a2>
 80052ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	dd33      	ble.n	800535a <_dtoa_r+0x9a2>
 80052f2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80052f6:	f1bb 0f00 	cmp.w	fp, #0
 80052fa:	d10d      	bne.n	8005318 <_dtoa_r+0x960>
 80052fc:	4621      	mov	r1, r4
 80052fe:	465b      	mov	r3, fp
 8005300:	2205      	movs	r2, #5
 8005302:	4628      	mov	r0, r5
 8005304:	f000 fbf0 	bl	8005ae8 <__multadd>
 8005308:	4601      	mov	r1, r0
 800530a:	4604      	mov	r4, r0
 800530c:	4650      	mov	r0, sl
 800530e:	f000 fe03 	bl	8005f18 <__mcmp>
 8005312:	2800      	cmp	r0, #0
 8005314:	f73f adb6 	bgt.w	8004e84 <_dtoa_r+0x4cc>
 8005318:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800531a:	9f08      	ldr	r7, [sp, #32]
 800531c:	ea6f 0903 	mvn.w	r9, r3
 8005320:	f04f 0800 	mov.w	r8, #0
 8005324:	4621      	mov	r1, r4
 8005326:	4628      	mov	r0, r5
 8005328:	f000 fbbc 	bl	8005aa4 <_Bfree>
 800532c:	2e00      	cmp	r6, #0
 800532e:	f43f aea4 	beq.w	800507a <_dtoa_r+0x6c2>
 8005332:	f1b8 0f00 	cmp.w	r8, #0
 8005336:	d005      	beq.n	8005344 <_dtoa_r+0x98c>
 8005338:	45b0      	cmp	r8, r6
 800533a:	d003      	beq.n	8005344 <_dtoa_r+0x98c>
 800533c:	4641      	mov	r1, r8
 800533e:	4628      	mov	r0, r5
 8005340:	f000 fbb0 	bl	8005aa4 <_Bfree>
 8005344:	4631      	mov	r1, r6
 8005346:	4628      	mov	r0, r5
 8005348:	f000 fbac 	bl	8005aa4 <_Bfree>
 800534c:	e695      	b.n	800507a <_dtoa_r+0x6c2>
 800534e:	2400      	movs	r4, #0
 8005350:	4626      	mov	r6, r4
 8005352:	e7e1      	b.n	8005318 <_dtoa_r+0x960>
 8005354:	46c1      	mov	r9, r8
 8005356:	4626      	mov	r6, r4
 8005358:	e594      	b.n	8004e84 <_dtoa_r+0x4cc>
 800535a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800535c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80fc 	beq.w	800555e <_dtoa_r+0xba6>
 8005366:	2f00      	cmp	r7, #0
 8005368:	dd05      	ble.n	8005376 <_dtoa_r+0x9be>
 800536a:	4631      	mov	r1, r6
 800536c:	463a      	mov	r2, r7
 800536e:	4628      	mov	r0, r5
 8005370:	f000 fd66 	bl	8005e40 <__lshift>
 8005374:	4606      	mov	r6, r0
 8005376:	f1b8 0f00 	cmp.w	r8, #0
 800537a:	d05c      	beq.n	8005436 <_dtoa_r+0xa7e>
 800537c:	4628      	mov	r0, r5
 800537e:	6871      	ldr	r1, [r6, #4]
 8005380:	f000 fb50 	bl	8005a24 <_Balloc>
 8005384:	4607      	mov	r7, r0
 8005386:	b928      	cbnz	r0, 8005394 <_dtoa_r+0x9dc>
 8005388:	4602      	mov	r2, r0
 800538a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800538e:	4b7e      	ldr	r3, [pc, #504]	; (8005588 <_dtoa_r+0xbd0>)
 8005390:	f7ff bb26 	b.w	80049e0 <_dtoa_r+0x28>
 8005394:	6932      	ldr	r2, [r6, #16]
 8005396:	f106 010c 	add.w	r1, r6, #12
 800539a:	3202      	adds	r2, #2
 800539c:	0092      	lsls	r2, r2, #2
 800539e:	300c      	adds	r0, #12
 80053a0:	f000 fb32 	bl	8005a08 <memcpy>
 80053a4:	2201      	movs	r2, #1
 80053a6:	4639      	mov	r1, r7
 80053a8:	4628      	mov	r0, r5
 80053aa:	f000 fd49 	bl	8005e40 <__lshift>
 80053ae:	46b0      	mov	r8, r6
 80053b0:	4606      	mov	r6, r0
 80053b2:	9b08      	ldr	r3, [sp, #32]
 80053b4:	3301      	adds	r3, #1
 80053b6:	9302      	str	r3, [sp, #8]
 80053b8:	9b08      	ldr	r3, [sp, #32]
 80053ba:	445b      	add	r3, fp
 80053bc:	930a      	str	r3, [sp, #40]	; 0x28
 80053be:	9b04      	ldr	r3, [sp, #16]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	9309      	str	r3, [sp, #36]	; 0x24
 80053c6:	9b02      	ldr	r3, [sp, #8]
 80053c8:	4621      	mov	r1, r4
 80053ca:	4650      	mov	r0, sl
 80053cc:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80053d0:	f7ff fa64 	bl	800489c <quorem>
 80053d4:	4603      	mov	r3, r0
 80053d6:	4641      	mov	r1, r8
 80053d8:	3330      	adds	r3, #48	; 0x30
 80053da:	9004      	str	r0, [sp, #16]
 80053dc:	4650      	mov	r0, sl
 80053de:	930b      	str	r3, [sp, #44]	; 0x2c
 80053e0:	f000 fd9a 	bl	8005f18 <__mcmp>
 80053e4:	4632      	mov	r2, r6
 80053e6:	9006      	str	r0, [sp, #24]
 80053e8:	4621      	mov	r1, r4
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 fdb0 	bl	8005f50 <__mdiff>
 80053f0:	68c2      	ldr	r2, [r0, #12]
 80053f2:	4607      	mov	r7, r0
 80053f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053f6:	bb02      	cbnz	r2, 800543a <_dtoa_r+0xa82>
 80053f8:	4601      	mov	r1, r0
 80053fa:	4650      	mov	r0, sl
 80053fc:	f000 fd8c 	bl	8005f18 <__mcmp>
 8005400:	4602      	mov	r2, r0
 8005402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005404:	4639      	mov	r1, r7
 8005406:	4628      	mov	r0, r5
 8005408:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800540c:	f000 fb4a 	bl	8005aa4 <_Bfree>
 8005410:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005414:	9f02      	ldr	r7, [sp, #8]
 8005416:	ea43 0102 	orr.w	r1, r3, r2
 800541a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800541c:	430b      	orrs	r3, r1
 800541e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005420:	d10d      	bne.n	800543e <_dtoa_r+0xa86>
 8005422:	2b39      	cmp	r3, #57	; 0x39
 8005424:	d027      	beq.n	8005476 <_dtoa_r+0xabe>
 8005426:	9a06      	ldr	r2, [sp, #24]
 8005428:	2a00      	cmp	r2, #0
 800542a:	dd01      	ble.n	8005430 <_dtoa_r+0xa78>
 800542c:	9b04      	ldr	r3, [sp, #16]
 800542e:	3331      	adds	r3, #49	; 0x31
 8005430:	f88b 3000 	strb.w	r3, [fp]
 8005434:	e776      	b.n	8005324 <_dtoa_r+0x96c>
 8005436:	4630      	mov	r0, r6
 8005438:	e7b9      	b.n	80053ae <_dtoa_r+0x9f6>
 800543a:	2201      	movs	r2, #1
 800543c:	e7e2      	b.n	8005404 <_dtoa_r+0xa4c>
 800543e:	9906      	ldr	r1, [sp, #24]
 8005440:	2900      	cmp	r1, #0
 8005442:	db04      	blt.n	800544e <_dtoa_r+0xa96>
 8005444:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005446:	4301      	orrs	r1, r0
 8005448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800544a:	4301      	orrs	r1, r0
 800544c:	d120      	bne.n	8005490 <_dtoa_r+0xad8>
 800544e:	2a00      	cmp	r2, #0
 8005450:	ddee      	ble.n	8005430 <_dtoa_r+0xa78>
 8005452:	4651      	mov	r1, sl
 8005454:	2201      	movs	r2, #1
 8005456:	4628      	mov	r0, r5
 8005458:	9302      	str	r3, [sp, #8]
 800545a:	f000 fcf1 	bl	8005e40 <__lshift>
 800545e:	4621      	mov	r1, r4
 8005460:	4682      	mov	sl, r0
 8005462:	f000 fd59 	bl	8005f18 <__mcmp>
 8005466:	2800      	cmp	r0, #0
 8005468:	9b02      	ldr	r3, [sp, #8]
 800546a:	dc02      	bgt.n	8005472 <_dtoa_r+0xaba>
 800546c:	d1e0      	bne.n	8005430 <_dtoa_r+0xa78>
 800546e:	07da      	lsls	r2, r3, #31
 8005470:	d5de      	bpl.n	8005430 <_dtoa_r+0xa78>
 8005472:	2b39      	cmp	r3, #57	; 0x39
 8005474:	d1da      	bne.n	800542c <_dtoa_r+0xa74>
 8005476:	2339      	movs	r3, #57	; 0x39
 8005478:	f88b 3000 	strb.w	r3, [fp]
 800547c:	463b      	mov	r3, r7
 800547e:	461f      	mov	r7, r3
 8005480:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005484:	3b01      	subs	r3, #1
 8005486:	2a39      	cmp	r2, #57	; 0x39
 8005488:	d050      	beq.n	800552c <_dtoa_r+0xb74>
 800548a:	3201      	adds	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e749      	b.n	8005324 <_dtoa_r+0x96c>
 8005490:	2a00      	cmp	r2, #0
 8005492:	dd03      	ble.n	800549c <_dtoa_r+0xae4>
 8005494:	2b39      	cmp	r3, #57	; 0x39
 8005496:	d0ee      	beq.n	8005476 <_dtoa_r+0xabe>
 8005498:	3301      	adds	r3, #1
 800549a:	e7c9      	b.n	8005430 <_dtoa_r+0xa78>
 800549c:	9a02      	ldr	r2, [sp, #8]
 800549e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80054a4:	428a      	cmp	r2, r1
 80054a6:	d02a      	beq.n	80054fe <_dtoa_r+0xb46>
 80054a8:	4651      	mov	r1, sl
 80054aa:	2300      	movs	r3, #0
 80054ac:	220a      	movs	r2, #10
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 fb1a 	bl	8005ae8 <__multadd>
 80054b4:	45b0      	cmp	r8, r6
 80054b6:	4682      	mov	sl, r0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	f04f 020a 	mov.w	r2, #10
 80054c0:	4641      	mov	r1, r8
 80054c2:	4628      	mov	r0, r5
 80054c4:	d107      	bne.n	80054d6 <_dtoa_r+0xb1e>
 80054c6:	f000 fb0f 	bl	8005ae8 <__multadd>
 80054ca:	4680      	mov	r8, r0
 80054cc:	4606      	mov	r6, r0
 80054ce:	9b02      	ldr	r3, [sp, #8]
 80054d0:	3301      	adds	r3, #1
 80054d2:	9302      	str	r3, [sp, #8]
 80054d4:	e777      	b.n	80053c6 <_dtoa_r+0xa0e>
 80054d6:	f000 fb07 	bl	8005ae8 <__multadd>
 80054da:	4631      	mov	r1, r6
 80054dc:	4680      	mov	r8, r0
 80054de:	2300      	movs	r3, #0
 80054e0:	220a      	movs	r2, #10
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 fb00 	bl	8005ae8 <__multadd>
 80054e8:	4606      	mov	r6, r0
 80054ea:	e7f0      	b.n	80054ce <_dtoa_r+0xb16>
 80054ec:	f1bb 0f00 	cmp.w	fp, #0
 80054f0:	bfcc      	ite	gt
 80054f2:	465f      	movgt	r7, fp
 80054f4:	2701      	movle	r7, #1
 80054f6:	f04f 0800 	mov.w	r8, #0
 80054fa:	9a08      	ldr	r2, [sp, #32]
 80054fc:	4417      	add	r7, r2
 80054fe:	4651      	mov	r1, sl
 8005500:	2201      	movs	r2, #1
 8005502:	4628      	mov	r0, r5
 8005504:	9302      	str	r3, [sp, #8]
 8005506:	f000 fc9b 	bl	8005e40 <__lshift>
 800550a:	4621      	mov	r1, r4
 800550c:	4682      	mov	sl, r0
 800550e:	f000 fd03 	bl	8005f18 <__mcmp>
 8005512:	2800      	cmp	r0, #0
 8005514:	dcb2      	bgt.n	800547c <_dtoa_r+0xac4>
 8005516:	d102      	bne.n	800551e <_dtoa_r+0xb66>
 8005518:	9b02      	ldr	r3, [sp, #8]
 800551a:	07db      	lsls	r3, r3, #31
 800551c:	d4ae      	bmi.n	800547c <_dtoa_r+0xac4>
 800551e:	463b      	mov	r3, r7
 8005520:	461f      	mov	r7, r3
 8005522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005526:	2a30      	cmp	r2, #48	; 0x30
 8005528:	d0fa      	beq.n	8005520 <_dtoa_r+0xb68>
 800552a:	e6fb      	b.n	8005324 <_dtoa_r+0x96c>
 800552c:	9a08      	ldr	r2, [sp, #32]
 800552e:	429a      	cmp	r2, r3
 8005530:	d1a5      	bne.n	800547e <_dtoa_r+0xac6>
 8005532:	2331      	movs	r3, #49	; 0x31
 8005534:	f109 0901 	add.w	r9, r9, #1
 8005538:	7013      	strb	r3, [r2, #0]
 800553a:	e6f3      	b.n	8005324 <_dtoa_r+0x96c>
 800553c:	4b13      	ldr	r3, [pc, #76]	; (800558c <_dtoa_r+0xbd4>)
 800553e:	f7ff baa7 	b.w	8004a90 <_dtoa_r+0xd8>
 8005542:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005544:	2b00      	cmp	r3, #0
 8005546:	f47f aa80 	bne.w	8004a4a <_dtoa_r+0x92>
 800554a:	4b11      	ldr	r3, [pc, #68]	; (8005590 <_dtoa_r+0xbd8>)
 800554c:	f7ff baa0 	b.w	8004a90 <_dtoa_r+0xd8>
 8005550:	f1bb 0f00 	cmp.w	fp, #0
 8005554:	dc03      	bgt.n	800555e <_dtoa_r+0xba6>
 8005556:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005558:	2b02      	cmp	r3, #2
 800555a:	f73f aecc 	bgt.w	80052f6 <_dtoa_r+0x93e>
 800555e:	9f08      	ldr	r7, [sp, #32]
 8005560:	4621      	mov	r1, r4
 8005562:	4650      	mov	r0, sl
 8005564:	f7ff f99a 	bl	800489c <quorem>
 8005568:	9a08      	ldr	r2, [sp, #32]
 800556a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800556e:	f807 3b01 	strb.w	r3, [r7], #1
 8005572:	1aba      	subs	r2, r7, r2
 8005574:	4593      	cmp	fp, r2
 8005576:	ddb9      	ble.n	80054ec <_dtoa_r+0xb34>
 8005578:	4651      	mov	r1, sl
 800557a:	2300      	movs	r3, #0
 800557c:	220a      	movs	r2, #10
 800557e:	4628      	mov	r0, r5
 8005580:	f000 fab2 	bl	8005ae8 <__multadd>
 8005584:	4682      	mov	sl, r0
 8005586:	e7eb      	b.n	8005560 <_dtoa_r+0xba8>
 8005588:	0800693b 	.word	0x0800693b
 800558c:	08006894 	.word	0x08006894
 8005590:	080068b8 	.word	0x080068b8

08005594 <__sflush_r>:
 8005594:	898a      	ldrh	r2, [r1, #12]
 8005596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800559a:	4605      	mov	r5, r0
 800559c:	0710      	lsls	r0, r2, #28
 800559e:	460c      	mov	r4, r1
 80055a0:	d458      	bmi.n	8005654 <__sflush_r+0xc0>
 80055a2:	684b      	ldr	r3, [r1, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	dc05      	bgt.n	80055b4 <__sflush_r+0x20>
 80055a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	dc02      	bgt.n	80055b4 <__sflush_r+0x20>
 80055ae:	2000      	movs	r0, #0
 80055b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055b6:	2e00      	cmp	r6, #0
 80055b8:	d0f9      	beq.n	80055ae <__sflush_r+0x1a>
 80055ba:	2300      	movs	r3, #0
 80055bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055c0:	682f      	ldr	r7, [r5, #0]
 80055c2:	602b      	str	r3, [r5, #0]
 80055c4:	d032      	beq.n	800562c <__sflush_r+0x98>
 80055c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	075a      	lsls	r2, r3, #29
 80055cc:	d505      	bpl.n	80055da <__sflush_r+0x46>
 80055ce:	6863      	ldr	r3, [r4, #4]
 80055d0:	1ac0      	subs	r0, r0, r3
 80055d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055d4:	b10b      	cbz	r3, 80055da <__sflush_r+0x46>
 80055d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055d8:	1ac0      	subs	r0, r0, r3
 80055da:	2300      	movs	r3, #0
 80055dc:	4602      	mov	r2, r0
 80055de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055e0:	4628      	mov	r0, r5
 80055e2:	6a21      	ldr	r1, [r4, #32]
 80055e4:	47b0      	blx	r6
 80055e6:	1c43      	adds	r3, r0, #1
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	d106      	bne.n	80055fa <__sflush_r+0x66>
 80055ec:	6829      	ldr	r1, [r5, #0]
 80055ee:	291d      	cmp	r1, #29
 80055f0:	d82c      	bhi.n	800564c <__sflush_r+0xb8>
 80055f2:	4a2a      	ldr	r2, [pc, #168]	; (800569c <__sflush_r+0x108>)
 80055f4:	40ca      	lsrs	r2, r1
 80055f6:	07d6      	lsls	r6, r2, #31
 80055f8:	d528      	bpl.n	800564c <__sflush_r+0xb8>
 80055fa:	2200      	movs	r2, #0
 80055fc:	6062      	str	r2, [r4, #4]
 80055fe:	6922      	ldr	r2, [r4, #16]
 8005600:	04d9      	lsls	r1, r3, #19
 8005602:	6022      	str	r2, [r4, #0]
 8005604:	d504      	bpl.n	8005610 <__sflush_r+0x7c>
 8005606:	1c42      	adds	r2, r0, #1
 8005608:	d101      	bne.n	800560e <__sflush_r+0x7a>
 800560a:	682b      	ldr	r3, [r5, #0]
 800560c:	b903      	cbnz	r3, 8005610 <__sflush_r+0x7c>
 800560e:	6560      	str	r0, [r4, #84]	; 0x54
 8005610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005612:	602f      	str	r7, [r5, #0]
 8005614:	2900      	cmp	r1, #0
 8005616:	d0ca      	beq.n	80055ae <__sflush_r+0x1a>
 8005618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800561c:	4299      	cmp	r1, r3
 800561e:	d002      	beq.n	8005626 <__sflush_r+0x92>
 8005620:	4628      	mov	r0, r5
 8005622:	f000 fd8f 	bl	8006144 <_free_r>
 8005626:	2000      	movs	r0, #0
 8005628:	6360      	str	r0, [r4, #52]	; 0x34
 800562a:	e7c1      	b.n	80055b0 <__sflush_r+0x1c>
 800562c:	6a21      	ldr	r1, [r4, #32]
 800562e:	2301      	movs	r3, #1
 8005630:	4628      	mov	r0, r5
 8005632:	47b0      	blx	r6
 8005634:	1c41      	adds	r1, r0, #1
 8005636:	d1c7      	bne.n	80055c8 <__sflush_r+0x34>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0c4      	beq.n	80055c8 <__sflush_r+0x34>
 800563e:	2b1d      	cmp	r3, #29
 8005640:	d001      	beq.n	8005646 <__sflush_r+0xb2>
 8005642:	2b16      	cmp	r3, #22
 8005644:	d101      	bne.n	800564a <__sflush_r+0xb6>
 8005646:	602f      	str	r7, [r5, #0]
 8005648:	e7b1      	b.n	80055ae <__sflush_r+0x1a>
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005650:	81a3      	strh	r3, [r4, #12]
 8005652:	e7ad      	b.n	80055b0 <__sflush_r+0x1c>
 8005654:	690f      	ldr	r7, [r1, #16]
 8005656:	2f00      	cmp	r7, #0
 8005658:	d0a9      	beq.n	80055ae <__sflush_r+0x1a>
 800565a:	0793      	lsls	r3, r2, #30
 800565c:	bf18      	it	ne
 800565e:	2300      	movne	r3, #0
 8005660:	680e      	ldr	r6, [r1, #0]
 8005662:	bf08      	it	eq
 8005664:	694b      	ldreq	r3, [r1, #20]
 8005666:	eba6 0807 	sub.w	r8, r6, r7
 800566a:	600f      	str	r7, [r1, #0]
 800566c:	608b      	str	r3, [r1, #8]
 800566e:	f1b8 0f00 	cmp.w	r8, #0
 8005672:	dd9c      	ble.n	80055ae <__sflush_r+0x1a>
 8005674:	4643      	mov	r3, r8
 8005676:	463a      	mov	r2, r7
 8005678:	4628      	mov	r0, r5
 800567a:	6a21      	ldr	r1, [r4, #32]
 800567c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800567e:	47b0      	blx	r6
 8005680:	2800      	cmp	r0, #0
 8005682:	dc06      	bgt.n	8005692 <__sflush_r+0xfe>
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800568a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800568e:	81a3      	strh	r3, [r4, #12]
 8005690:	e78e      	b.n	80055b0 <__sflush_r+0x1c>
 8005692:	4407      	add	r7, r0
 8005694:	eba8 0800 	sub.w	r8, r8, r0
 8005698:	e7e9      	b.n	800566e <__sflush_r+0xda>
 800569a:	bf00      	nop
 800569c:	20400001 	.word	0x20400001

080056a0 <_fflush_r>:
 80056a0:	b538      	push	{r3, r4, r5, lr}
 80056a2:	690b      	ldr	r3, [r1, #16]
 80056a4:	4605      	mov	r5, r0
 80056a6:	460c      	mov	r4, r1
 80056a8:	b913      	cbnz	r3, 80056b0 <_fflush_r+0x10>
 80056aa:	2500      	movs	r5, #0
 80056ac:	4628      	mov	r0, r5
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
 80056b0:	b118      	cbz	r0, 80056ba <_fflush_r+0x1a>
 80056b2:	6983      	ldr	r3, [r0, #24]
 80056b4:	b90b      	cbnz	r3, 80056ba <_fflush_r+0x1a>
 80056b6:	f000 f887 	bl	80057c8 <__sinit>
 80056ba:	4b14      	ldr	r3, [pc, #80]	; (800570c <_fflush_r+0x6c>)
 80056bc:	429c      	cmp	r4, r3
 80056be:	d11b      	bne.n	80056f8 <_fflush_r+0x58>
 80056c0:	686c      	ldr	r4, [r5, #4]
 80056c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0ef      	beq.n	80056aa <_fflush_r+0xa>
 80056ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056cc:	07d0      	lsls	r0, r2, #31
 80056ce:	d404      	bmi.n	80056da <_fflush_r+0x3a>
 80056d0:	0599      	lsls	r1, r3, #22
 80056d2:	d402      	bmi.n	80056da <_fflush_r+0x3a>
 80056d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056d6:	f000 f91a 	bl	800590e <__retarget_lock_acquire_recursive>
 80056da:	4628      	mov	r0, r5
 80056dc:	4621      	mov	r1, r4
 80056de:	f7ff ff59 	bl	8005594 <__sflush_r>
 80056e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056e4:	4605      	mov	r5, r0
 80056e6:	07da      	lsls	r2, r3, #31
 80056e8:	d4e0      	bmi.n	80056ac <_fflush_r+0xc>
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	059b      	lsls	r3, r3, #22
 80056ee:	d4dd      	bmi.n	80056ac <_fflush_r+0xc>
 80056f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056f2:	f000 f90d 	bl	8005910 <__retarget_lock_release_recursive>
 80056f6:	e7d9      	b.n	80056ac <_fflush_r+0xc>
 80056f8:	4b05      	ldr	r3, [pc, #20]	; (8005710 <_fflush_r+0x70>)
 80056fa:	429c      	cmp	r4, r3
 80056fc:	d101      	bne.n	8005702 <_fflush_r+0x62>
 80056fe:	68ac      	ldr	r4, [r5, #8]
 8005700:	e7df      	b.n	80056c2 <_fflush_r+0x22>
 8005702:	4b04      	ldr	r3, [pc, #16]	; (8005714 <_fflush_r+0x74>)
 8005704:	429c      	cmp	r4, r3
 8005706:	bf08      	it	eq
 8005708:	68ec      	ldreq	r4, [r5, #12]
 800570a:	e7da      	b.n	80056c2 <_fflush_r+0x22>
 800570c:	0800696c 	.word	0x0800696c
 8005710:	0800698c 	.word	0x0800698c
 8005714:	0800694c 	.word	0x0800694c

08005718 <std>:
 8005718:	2300      	movs	r3, #0
 800571a:	b510      	push	{r4, lr}
 800571c:	4604      	mov	r4, r0
 800571e:	e9c0 3300 	strd	r3, r3, [r0]
 8005722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005726:	6083      	str	r3, [r0, #8]
 8005728:	8181      	strh	r1, [r0, #12]
 800572a:	6643      	str	r3, [r0, #100]	; 0x64
 800572c:	81c2      	strh	r2, [r0, #14]
 800572e:	6183      	str	r3, [r0, #24]
 8005730:	4619      	mov	r1, r3
 8005732:	2208      	movs	r2, #8
 8005734:	305c      	adds	r0, #92	; 0x5c
 8005736:	f7fe fafb 	bl	8003d30 <memset>
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <std+0x38>)
 800573c:	6224      	str	r4, [r4, #32]
 800573e:	6263      	str	r3, [r4, #36]	; 0x24
 8005740:	4b04      	ldr	r3, [pc, #16]	; (8005754 <std+0x3c>)
 8005742:	62a3      	str	r3, [r4, #40]	; 0x28
 8005744:	4b04      	ldr	r3, [pc, #16]	; (8005758 <std+0x40>)
 8005746:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005748:	4b04      	ldr	r3, [pc, #16]	; (800575c <std+0x44>)
 800574a:	6323      	str	r3, [r4, #48]	; 0x30
 800574c:	bd10      	pop	{r4, pc}
 800574e:	bf00      	nop
 8005750:	08006561 	.word	0x08006561
 8005754:	08006583 	.word	0x08006583
 8005758:	080065bb 	.word	0x080065bb
 800575c:	080065df 	.word	0x080065df

08005760 <_cleanup_r>:
 8005760:	4901      	ldr	r1, [pc, #4]	; (8005768 <_cleanup_r+0x8>)
 8005762:	f000 b8af 	b.w	80058c4 <_fwalk_reent>
 8005766:	bf00      	nop
 8005768:	080056a1 	.word	0x080056a1

0800576c <__sfmoreglue>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	2568      	movs	r5, #104	; 0x68
 8005770:	1e4a      	subs	r2, r1, #1
 8005772:	4355      	muls	r5, r2
 8005774:	460e      	mov	r6, r1
 8005776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800577a:	f000 fd2f 	bl	80061dc <_malloc_r>
 800577e:	4604      	mov	r4, r0
 8005780:	b140      	cbz	r0, 8005794 <__sfmoreglue+0x28>
 8005782:	2100      	movs	r1, #0
 8005784:	e9c0 1600 	strd	r1, r6, [r0]
 8005788:	300c      	adds	r0, #12
 800578a:	60a0      	str	r0, [r4, #8]
 800578c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005790:	f7fe face 	bl	8003d30 <memset>
 8005794:	4620      	mov	r0, r4
 8005796:	bd70      	pop	{r4, r5, r6, pc}

08005798 <__sfp_lock_acquire>:
 8005798:	4801      	ldr	r0, [pc, #4]	; (80057a0 <__sfp_lock_acquire+0x8>)
 800579a:	f000 b8b8 	b.w	800590e <__retarget_lock_acquire_recursive>
 800579e:	bf00      	nop
 80057a0:	200002d8 	.word	0x200002d8

080057a4 <__sfp_lock_release>:
 80057a4:	4801      	ldr	r0, [pc, #4]	; (80057ac <__sfp_lock_release+0x8>)
 80057a6:	f000 b8b3 	b.w	8005910 <__retarget_lock_release_recursive>
 80057aa:	bf00      	nop
 80057ac:	200002d8 	.word	0x200002d8

080057b0 <__sinit_lock_acquire>:
 80057b0:	4801      	ldr	r0, [pc, #4]	; (80057b8 <__sinit_lock_acquire+0x8>)
 80057b2:	f000 b8ac 	b.w	800590e <__retarget_lock_acquire_recursive>
 80057b6:	bf00      	nop
 80057b8:	200002d3 	.word	0x200002d3

080057bc <__sinit_lock_release>:
 80057bc:	4801      	ldr	r0, [pc, #4]	; (80057c4 <__sinit_lock_release+0x8>)
 80057be:	f000 b8a7 	b.w	8005910 <__retarget_lock_release_recursive>
 80057c2:	bf00      	nop
 80057c4:	200002d3 	.word	0x200002d3

080057c8 <__sinit>:
 80057c8:	b510      	push	{r4, lr}
 80057ca:	4604      	mov	r4, r0
 80057cc:	f7ff fff0 	bl	80057b0 <__sinit_lock_acquire>
 80057d0:	69a3      	ldr	r3, [r4, #24]
 80057d2:	b11b      	cbz	r3, 80057dc <__sinit+0x14>
 80057d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057d8:	f7ff bff0 	b.w	80057bc <__sinit_lock_release>
 80057dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80057e0:	6523      	str	r3, [r4, #80]	; 0x50
 80057e2:	4b13      	ldr	r3, [pc, #76]	; (8005830 <__sinit+0x68>)
 80057e4:	4a13      	ldr	r2, [pc, #76]	; (8005834 <__sinit+0x6c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80057ea:	42a3      	cmp	r3, r4
 80057ec:	bf08      	it	eq
 80057ee:	2301      	moveq	r3, #1
 80057f0:	4620      	mov	r0, r4
 80057f2:	bf08      	it	eq
 80057f4:	61a3      	streq	r3, [r4, #24]
 80057f6:	f000 f81f 	bl	8005838 <__sfp>
 80057fa:	6060      	str	r0, [r4, #4]
 80057fc:	4620      	mov	r0, r4
 80057fe:	f000 f81b 	bl	8005838 <__sfp>
 8005802:	60a0      	str	r0, [r4, #8]
 8005804:	4620      	mov	r0, r4
 8005806:	f000 f817 	bl	8005838 <__sfp>
 800580a:	2200      	movs	r2, #0
 800580c:	2104      	movs	r1, #4
 800580e:	60e0      	str	r0, [r4, #12]
 8005810:	6860      	ldr	r0, [r4, #4]
 8005812:	f7ff ff81 	bl	8005718 <std>
 8005816:	2201      	movs	r2, #1
 8005818:	2109      	movs	r1, #9
 800581a:	68a0      	ldr	r0, [r4, #8]
 800581c:	f7ff ff7c 	bl	8005718 <std>
 8005820:	2202      	movs	r2, #2
 8005822:	2112      	movs	r1, #18
 8005824:	68e0      	ldr	r0, [r4, #12]
 8005826:	f7ff ff77 	bl	8005718 <std>
 800582a:	2301      	movs	r3, #1
 800582c:	61a3      	str	r3, [r4, #24]
 800582e:	e7d1      	b.n	80057d4 <__sinit+0xc>
 8005830:	08006880 	.word	0x08006880
 8005834:	08005761 	.word	0x08005761

08005838 <__sfp>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	4607      	mov	r7, r0
 800583c:	f7ff ffac 	bl	8005798 <__sfp_lock_acquire>
 8005840:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <__sfp+0x84>)
 8005842:	681e      	ldr	r6, [r3, #0]
 8005844:	69b3      	ldr	r3, [r6, #24]
 8005846:	b913      	cbnz	r3, 800584e <__sfp+0x16>
 8005848:	4630      	mov	r0, r6
 800584a:	f7ff ffbd 	bl	80057c8 <__sinit>
 800584e:	3648      	adds	r6, #72	; 0x48
 8005850:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005854:	3b01      	subs	r3, #1
 8005856:	d503      	bpl.n	8005860 <__sfp+0x28>
 8005858:	6833      	ldr	r3, [r6, #0]
 800585a:	b30b      	cbz	r3, 80058a0 <__sfp+0x68>
 800585c:	6836      	ldr	r6, [r6, #0]
 800585e:	e7f7      	b.n	8005850 <__sfp+0x18>
 8005860:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005864:	b9d5      	cbnz	r5, 800589c <__sfp+0x64>
 8005866:	4b16      	ldr	r3, [pc, #88]	; (80058c0 <__sfp+0x88>)
 8005868:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800586c:	60e3      	str	r3, [r4, #12]
 800586e:	6665      	str	r5, [r4, #100]	; 0x64
 8005870:	f000 f84c 	bl	800590c <__retarget_lock_init_recursive>
 8005874:	f7ff ff96 	bl	80057a4 <__sfp_lock_release>
 8005878:	2208      	movs	r2, #8
 800587a:	4629      	mov	r1, r5
 800587c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005880:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005884:	6025      	str	r5, [r4, #0]
 8005886:	61a5      	str	r5, [r4, #24]
 8005888:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800588c:	f7fe fa50 	bl	8003d30 <memset>
 8005890:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005894:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005898:	4620      	mov	r0, r4
 800589a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800589c:	3468      	adds	r4, #104	; 0x68
 800589e:	e7d9      	b.n	8005854 <__sfp+0x1c>
 80058a0:	2104      	movs	r1, #4
 80058a2:	4638      	mov	r0, r7
 80058a4:	f7ff ff62 	bl	800576c <__sfmoreglue>
 80058a8:	4604      	mov	r4, r0
 80058aa:	6030      	str	r0, [r6, #0]
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d1d5      	bne.n	800585c <__sfp+0x24>
 80058b0:	f7ff ff78 	bl	80057a4 <__sfp_lock_release>
 80058b4:	230c      	movs	r3, #12
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	e7ee      	b.n	8005898 <__sfp+0x60>
 80058ba:	bf00      	nop
 80058bc:	08006880 	.word	0x08006880
 80058c0:	ffff0001 	.word	0xffff0001

080058c4 <_fwalk_reent>:
 80058c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c8:	4606      	mov	r6, r0
 80058ca:	4688      	mov	r8, r1
 80058cc:	2700      	movs	r7, #0
 80058ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058d6:	f1b9 0901 	subs.w	r9, r9, #1
 80058da:	d505      	bpl.n	80058e8 <_fwalk_reent+0x24>
 80058dc:	6824      	ldr	r4, [r4, #0]
 80058de:	2c00      	cmp	r4, #0
 80058e0:	d1f7      	bne.n	80058d2 <_fwalk_reent+0xe>
 80058e2:	4638      	mov	r0, r7
 80058e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058e8:	89ab      	ldrh	r3, [r5, #12]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d907      	bls.n	80058fe <_fwalk_reent+0x3a>
 80058ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058f2:	3301      	adds	r3, #1
 80058f4:	d003      	beq.n	80058fe <_fwalk_reent+0x3a>
 80058f6:	4629      	mov	r1, r5
 80058f8:	4630      	mov	r0, r6
 80058fa:	47c0      	blx	r8
 80058fc:	4307      	orrs	r7, r0
 80058fe:	3568      	adds	r5, #104	; 0x68
 8005900:	e7e9      	b.n	80058d6 <_fwalk_reent+0x12>
	...

08005904 <_localeconv_r>:
 8005904:	4800      	ldr	r0, [pc, #0]	; (8005908 <_localeconv_r+0x4>)
 8005906:	4770      	bx	lr
 8005908:	20000164 	.word	0x20000164

0800590c <__retarget_lock_init_recursive>:
 800590c:	4770      	bx	lr

0800590e <__retarget_lock_acquire_recursive>:
 800590e:	4770      	bx	lr

08005910 <__retarget_lock_release_recursive>:
 8005910:	4770      	bx	lr

08005912 <__swhatbuf_r>:
 8005912:	b570      	push	{r4, r5, r6, lr}
 8005914:	460e      	mov	r6, r1
 8005916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800591a:	4614      	mov	r4, r2
 800591c:	2900      	cmp	r1, #0
 800591e:	461d      	mov	r5, r3
 8005920:	b096      	sub	sp, #88	; 0x58
 8005922:	da07      	bge.n	8005934 <__swhatbuf_r+0x22>
 8005924:	2300      	movs	r3, #0
 8005926:	602b      	str	r3, [r5, #0]
 8005928:	89b3      	ldrh	r3, [r6, #12]
 800592a:	061a      	lsls	r2, r3, #24
 800592c:	d410      	bmi.n	8005950 <__swhatbuf_r+0x3e>
 800592e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005932:	e00e      	b.n	8005952 <__swhatbuf_r+0x40>
 8005934:	466a      	mov	r2, sp
 8005936:	f000 fea9 	bl	800668c <_fstat_r>
 800593a:	2800      	cmp	r0, #0
 800593c:	dbf2      	blt.n	8005924 <__swhatbuf_r+0x12>
 800593e:	9a01      	ldr	r2, [sp, #4]
 8005940:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005944:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005948:	425a      	negs	r2, r3
 800594a:	415a      	adcs	r2, r3
 800594c:	602a      	str	r2, [r5, #0]
 800594e:	e7ee      	b.n	800592e <__swhatbuf_r+0x1c>
 8005950:	2340      	movs	r3, #64	; 0x40
 8005952:	2000      	movs	r0, #0
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	b016      	add	sp, #88	; 0x58
 8005958:	bd70      	pop	{r4, r5, r6, pc}
	...

0800595c <__smakebuf_r>:
 800595c:	898b      	ldrh	r3, [r1, #12]
 800595e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005960:	079d      	lsls	r5, r3, #30
 8005962:	4606      	mov	r6, r0
 8005964:	460c      	mov	r4, r1
 8005966:	d507      	bpl.n	8005978 <__smakebuf_r+0x1c>
 8005968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	6123      	str	r3, [r4, #16]
 8005970:	2301      	movs	r3, #1
 8005972:	6163      	str	r3, [r4, #20]
 8005974:	b002      	add	sp, #8
 8005976:	bd70      	pop	{r4, r5, r6, pc}
 8005978:	466a      	mov	r2, sp
 800597a:	ab01      	add	r3, sp, #4
 800597c:	f7ff ffc9 	bl	8005912 <__swhatbuf_r>
 8005980:	9900      	ldr	r1, [sp, #0]
 8005982:	4605      	mov	r5, r0
 8005984:	4630      	mov	r0, r6
 8005986:	f000 fc29 	bl	80061dc <_malloc_r>
 800598a:	b948      	cbnz	r0, 80059a0 <__smakebuf_r+0x44>
 800598c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005990:	059a      	lsls	r2, r3, #22
 8005992:	d4ef      	bmi.n	8005974 <__smakebuf_r+0x18>
 8005994:	f023 0303 	bic.w	r3, r3, #3
 8005998:	f043 0302 	orr.w	r3, r3, #2
 800599c:	81a3      	strh	r3, [r4, #12]
 800599e:	e7e3      	b.n	8005968 <__smakebuf_r+0xc>
 80059a0:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <__smakebuf_r+0x7c>)
 80059a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	6020      	str	r0, [r4, #0]
 80059a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ac:	81a3      	strh	r3, [r4, #12]
 80059ae:	9b00      	ldr	r3, [sp, #0]
 80059b0:	6120      	str	r0, [r4, #16]
 80059b2:	6163      	str	r3, [r4, #20]
 80059b4:	9b01      	ldr	r3, [sp, #4]
 80059b6:	b15b      	cbz	r3, 80059d0 <__smakebuf_r+0x74>
 80059b8:	4630      	mov	r0, r6
 80059ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059be:	f000 fe77 	bl	80066b0 <_isatty_r>
 80059c2:	b128      	cbz	r0, 80059d0 <__smakebuf_r+0x74>
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	81a3      	strh	r3, [r4, #12]
 80059d0:	89a0      	ldrh	r0, [r4, #12]
 80059d2:	4305      	orrs	r5, r0
 80059d4:	81a5      	strh	r5, [r4, #12]
 80059d6:	e7cd      	b.n	8005974 <__smakebuf_r+0x18>
 80059d8:	08005761 	.word	0x08005761

080059dc <malloc>:
 80059dc:	4b02      	ldr	r3, [pc, #8]	; (80059e8 <malloc+0xc>)
 80059de:	4601      	mov	r1, r0
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	f000 bbfb 	b.w	80061dc <_malloc_r>
 80059e6:	bf00      	nop
 80059e8:	20000010 	.word	0x20000010

080059ec <memchr>:
 80059ec:	4603      	mov	r3, r0
 80059ee:	b510      	push	{r4, lr}
 80059f0:	b2c9      	uxtb	r1, r1
 80059f2:	4402      	add	r2, r0
 80059f4:	4293      	cmp	r3, r2
 80059f6:	4618      	mov	r0, r3
 80059f8:	d101      	bne.n	80059fe <memchr+0x12>
 80059fa:	2000      	movs	r0, #0
 80059fc:	e003      	b.n	8005a06 <memchr+0x1a>
 80059fe:	7804      	ldrb	r4, [r0, #0]
 8005a00:	3301      	adds	r3, #1
 8005a02:	428c      	cmp	r4, r1
 8005a04:	d1f6      	bne.n	80059f4 <memchr+0x8>
 8005a06:	bd10      	pop	{r4, pc}

08005a08 <memcpy>:
 8005a08:	440a      	add	r2, r1
 8005a0a:	4291      	cmp	r1, r2
 8005a0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a10:	d100      	bne.n	8005a14 <memcpy+0xc>
 8005a12:	4770      	bx	lr
 8005a14:	b510      	push	{r4, lr}
 8005a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a1a:	4291      	cmp	r1, r2
 8005a1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a20:	d1f9      	bne.n	8005a16 <memcpy+0xe>
 8005a22:	bd10      	pop	{r4, pc}

08005a24 <_Balloc>:
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a28:	4604      	mov	r4, r0
 8005a2a:	460d      	mov	r5, r1
 8005a2c:	b976      	cbnz	r6, 8005a4c <_Balloc+0x28>
 8005a2e:	2010      	movs	r0, #16
 8005a30:	f7ff ffd4 	bl	80059dc <malloc>
 8005a34:	4602      	mov	r2, r0
 8005a36:	6260      	str	r0, [r4, #36]	; 0x24
 8005a38:	b920      	cbnz	r0, 8005a44 <_Balloc+0x20>
 8005a3a:	2166      	movs	r1, #102	; 0x66
 8005a3c:	4b17      	ldr	r3, [pc, #92]	; (8005a9c <_Balloc+0x78>)
 8005a3e:	4818      	ldr	r0, [pc, #96]	; (8005aa0 <_Balloc+0x7c>)
 8005a40:	f000 fde4 	bl	800660c <__assert_func>
 8005a44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a48:	6006      	str	r6, [r0, #0]
 8005a4a:	60c6      	str	r6, [r0, #12]
 8005a4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a4e:	68f3      	ldr	r3, [r6, #12]
 8005a50:	b183      	cbz	r3, 8005a74 <_Balloc+0x50>
 8005a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a5a:	b9b8      	cbnz	r0, 8005a8c <_Balloc+0x68>
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	fa01 f605 	lsl.w	r6, r1, r5
 8005a62:	1d72      	adds	r2, r6, #5
 8005a64:	4620      	mov	r0, r4
 8005a66:	0092      	lsls	r2, r2, #2
 8005a68:	f000 fb5e 	bl	8006128 <_calloc_r>
 8005a6c:	b160      	cbz	r0, 8005a88 <_Balloc+0x64>
 8005a6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a72:	e00e      	b.n	8005a92 <_Balloc+0x6e>
 8005a74:	2221      	movs	r2, #33	; 0x21
 8005a76:	2104      	movs	r1, #4
 8005a78:	4620      	mov	r0, r4
 8005a7a:	f000 fb55 	bl	8006128 <_calloc_r>
 8005a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a80:	60f0      	str	r0, [r6, #12]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e4      	bne.n	8005a52 <_Balloc+0x2e>
 8005a88:	2000      	movs	r0, #0
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
 8005a8c:	6802      	ldr	r2, [r0, #0]
 8005a8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a92:	2300      	movs	r3, #0
 8005a94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a98:	e7f7      	b.n	8005a8a <_Balloc+0x66>
 8005a9a:	bf00      	nop
 8005a9c:	080068c5 	.word	0x080068c5
 8005aa0:	080069ac 	.word	0x080069ac

08005aa4 <_Bfree>:
 8005aa4:	b570      	push	{r4, r5, r6, lr}
 8005aa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	b976      	cbnz	r6, 8005acc <_Bfree+0x28>
 8005aae:	2010      	movs	r0, #16
 8005ab0:	f7ff ff94 	bl	80059dc <malloc>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	6268      	str	r0, [r5, #36]	; 0x24
 8005ab8:	b920      	cbnz	r0, 8005ac4 <_Bfree+0x20>
 8005aba:	218a      	movs	r1, #138	; 0x8a
 8005abc:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <_Bfree+0x3c>)
 8005abe:	4809      	ldr	r0, [pc, #36]	; (8005ae4 <_Bfree+0x40>)
 8005ac0:	f000 fda4 	bl	800660c <__assert_func>
 8005ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ac8:	6006      	str	r6, [r0, #0]
 8005aca:	60c6      	str	r6, [r0, #12]
 8005acc:	b13c      	cbz	r4, 8005ade <_Bfree+0x3a>
 8005ace:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ad0:	6862      	ldr	r2, [r4, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ad8:	6021      	str	r1, [r4, #0]
 8005ada:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ade:	bd70      	pop	{r4, r5, r6, pc}
 8005ae0:	080068c5 	.word	0x080068c5
 8005ae4:	080069ac 	.word	0x080069ac

08005ae8 <__multadd>:
 8005ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aec:	4698      	mov	r8, r3
 8005aee:	460c      	mov	r4, r1
 8005af0:	2300      	movs	r3, #0
 8005af2:	690e      	ldr	r6, [r1, #16]
 8005af4:	4607      	mov	r7, r0
 8005af6:	f101 0014 	add.w	r0, r1, #20
 8005afa:	6805      	ldr	r5, [r0, #0]
 8005afc:	3301      	adds	r3, #1
 8005afe:	b2a9      	uxth	r1, r5
 8005b00:	fb02 8101 	mla	r1, r2, r1, r8
 8005b04:	0c2d      	lsrs	r5, r5, #16
 8005b06:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005b0a:	fb02 c505 	mla	r5, r2, r5, ip
 8005b0e:	b289      	uxth	r1, r1
 8005b10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005b14:	429e      	cmp	r6, r3
 8005b16:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005b1a:	f840 1b04 	str.w	r1, [r0], #4
 8005b1e:	dcec      	bgt.n	8005afa <__multadd+0x12>
 8005b20:	f1b8 0f00 	cmp.w	r8, #0
 8005b24:	d022      	beq.n	8005b6c <__multadd+0x84>
 8005b26:	68a3      	ldr	r3, [r4, #8]
 8005b28:	42b3      	cmp	r3, r6
 8005b2a:	dc19      	bgt.n	8005b60 <__multadd+0x78>
 8005b2c:	6861      	ldr	r1, [r4, #4]
 8005b2e:	4638      	mov	r0, r7
 8005b30:	3101      	adds	r1, #1
 8005b32:	f7ff ff77 	bl	8005a24 <_Balloc>
 8005b36:	4605      	mov	r5, r0
 8005b38:	b928      	cbnz	r0, 8005b46 <__multadd+0x5e>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	21b5      	movs	r1, #181	; 0xb5
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <__multadd+0x8c>)
 8005b40:	480d      	ldr	r0, [pc, #52]	; (8005b78 <__multadd+0x90>)
 8005b42:	f000 fd63 	bl	800660c <__assert_func>
 8005b46:	6922      	ldr	r2, [r4, #16]
 8005b48:	f104 010c 	add.w	r1, r4, #12
 8005b4c:	3202      	adds	r2, #2
 8005b4e:	0092      	lsls	r2, r2, #2
 8005b50:	300c      	adds	r0, #12
 8005b52:	f7ff ff59 	bl	8005a08 <memcpy>
 8005b56:	4621      	mov	r1, r4
 8005b58:	4638      	mov	r0, r7
 8005b5a:	f7ff ffa3 	bl	8005aa4 <_Bfree>
 8005b5e:	462c      	mov	r4, r5
 8005b60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005b64:	3601      	adds	r6, #1
 8005b66:	f8c3 8014 	str.w	r8, [r3, #20]
 8005b6a:	6126      	str	r6, [r4, #16]
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b72:	bf00      	nop
 8005b74:	0800693b 	.word	0x0800693b
 8005b78:	080069ac 	.word	0x080069ac

08005b7c <__hi0bits>:
 8005b7c:	0c02      	lsrs	r2, r0, #16
 8005b7e:	0412      	lsls	r2, r2, #16
 8005b80:	4603      	mov	r3, r0
 8005b82:	b9ca      	cbnz	r2, 8005bb8 <__hi0bits+0x3c>
 8005b84:	0403      	lsls	r3, r0, #16
 8005b86:	2010      	movs	r0, #16
 8005b88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b8c:	bf04      	itt	eq
 8005b8e:	021b      	lsleq	r3, r3, #8
 8005b90:	3008      	addeq	r0, #8
 8005b92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b96:	bf04      	itt	eq
 8005b98:	011b      	lsleq	r3, r3, #4
 8005b9a:	3004      	addeq	r0, #4
 8005b9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ba0:	bf04      	itt	eq
 8005ba2:	009b      	lsleq	r3, r3, #2
 8005ba4:	3002      	addeq	r0, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	db05      	blt.n	8005bb6 <__hi0bits+0x3a>
 8005baa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005bae:	f100 0001 	add.w	r0, r0, #1
 8005bb2:	bf08      	it	eq
 8005bb4:	2020      	moveq	r0, #32
 8005bb6:	4770      	bx	lr
 8005bb8:	2000      	movs	r0, #0
 8005bba:	e7e5      	b.n	8005b88 <__hi0bits+0xc>

08005bbc <__lo0bits>:
 8005bbc:	6803      	ldr	r3, [r0, #0]
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	f013 0007 	ands.w	r0, r3, #7
 8005bc4:	d00b      	beq.n	8005bde <__lo0bits+0x22>
 8005bc6:	07d9      	lsls	r1, r3, #31
 8005bc8:	d422      	bmi.n	8005c10 <__lo0bits+0x54>
 8005bca:	0798      	lsls	r0, r3, #30
 8005bcc:	bf49      	itett	mi
 8005bce:	085b      	lsrmi	r3, r3, #1
 8005bd0:	089b      	lsrpl	r3, r3, #2
 8005bd2:	2001      	movmi	r0, #1
 8005bd4:	6013      	strmi	r3, [r2, #0]
 8005bd6:	bf5c      	itt	pl
 8005bd8:	2002      	movpl	r0, #2
 8005bda:	6013      	strpl	r3, [r2, #0]
 8005bdc:	4770      	bx	lr
 8005bde:	b299      	uxth	r1, r3
 8005be0:	b909      	cbnz	r1, 8005be6 <__lo0bits+0x2a>
 8005be2:	2010      	movs	r0, #16
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005bea:	bf04      	itt	eq
 8005bec:	0a1b      	lsreq	r3, r3, #8
 8005bee:	3008      	addeq	r0, #8
 8005bf0:	0719      	lsls	r1, r3, #28
 8005bf2:	bf04      	itt	eq
 8005bf4:	091b      	lsreq	r3, r3, #4
 8005bf6:	3004      	addeq	r0, #4
 8005bf8:	0799      	lsls	r1, r3, #30
 8005bfa:	bf04      	itt	eq
 8005bfc:	089b      	lsreq	r3, r3, #2
 8005bfe:	3002      	addeq	r0, #2
 8005c00:	07d9      	lsls	r1, r3, #31
 8005c02:	d403      	bmi.n	8005c0c <__lo0bits+0x50>
 8005c04:	085b      	lsrs	r3, r3, #1
 8005c06:	f100 0001 	add.w	r0, r0, #1
 8005c0a:	d003      	beq.n	8005c14 <__lo0bits+0x58>
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	4770      	bx	lr
 8005c10:	2000      	movs	r0, #0
 8005c12:	4770      	bx	lr
 8005c14:	2020      	movs	r0, #32
 8005c16:	4770      	bx	lr

08005c18 <__i2b>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	f7ff ff01 	bl	8005a24 <_Balloc>
 8005c22:	4602      	mov	r2, r0
 8005c24:	b928      	cbnz	r0, 8005c32 <__i2b+0x1a>
 8005c26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c2a:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <__i2b+0x24>)
 8005c2c:	4804      	ldr	r0, [pc, #16]	; (8005c40 <__i2b+0x28>)
 8005c2e:	f000 fced 	bl	800660c <__assert_func>
 8005c32:	2301      	movs	r3, #1
 8005c34:	6144      	str	r4, [r0, #20]
 8005c36:	6103      	str	r3, [r0, #16]
 8005c38:	bd10      	pop	{r4, pc}
 8005c3a:	bf00      	nop
 8005c3c:	0800693b 	.word	0x0800693b
 8005c40:	080069ac 	.word	0x080069ac

08005c44 <__multiply>:
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	4614      	mov	r4, r2
 8005c4a:	690a      	ldr	r2, [r1, #16]
 8005c4c:	6923      	ldr	r3, [r4, #16]
 8005c4e:	460d      	mov	r5, r1
 8005c50:	429a      	cmp	r2, r3
 8005c52:	bfbe      	ittt	lt
 8005c54:	460b      	movlt	r3, r1
 8005c56:	4625      	movlt	r5, r4
 8005c58:	461c      	movlt	r4, r3
 8005c5a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005c5e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c62:	68ab      	ldr	r3, [r5, #8]
 8005c64:	6869      	ldr	r1, [r5, #4]
 8005c66:	eb0a 0709 	add.w	r7, sl, r9
 8005c6a:	42bb      	cmp	r3, r7
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	bfb8      	it	lt
 8005c70:	3101      	addlt	r1, #1
 8005c72:	f7ff fed7 	bl	8005a24 <_Balloc>
 8005c76:	b930      	cbnz	r0, 8005c86 <__multiply+0x42>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	f240 115d 	movw	r1, #349	; 0x15d
 8005c7e:	4b41      	ldr	r3, [pc, #260]	; (8005d84 <__multiply+0x140>)
 8005c80:	4841      	ldr	r0, [pc, #260]	; (8005d88 <__multiply+0x144>)
 8005c82:	f000 fcc3 	bl	800660c <__assert_func>
 8005c86:	f100 0614 	add.w	r6, r0, #20
 8005c8a:	4633      	mov	r3, r6
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005c92:	4543      	cmp	r3, r8
 8005c94:	d31e      	bcc.n	8005cd4 <__multiply+0x90>
 8005c96:	f105 0c14 	add.w	ip, r5, #20
 8005c9a:	f104 0314 	add.w	r3, r4, #20
 8005c9e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005ca2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005ca6:	9202      	str	r2, [sp, #8]
 8005ca8:	ebac 0205 	sub.w	r2, ip, r5
 8005cac:	3a15      	subs	r2, #21
 8005cae:	f022 0203 	bic.w	r2, r2, #3
 8005cb2:	3204      	adds	r2, #4
 8005cb4:	f105 0115 	add.w	r1, r5, #21
 8005cb8:	458c      	cmp	ip, r1
 8005cba:	bf38      	it	cc
 8005cbc:	2204      	movcc	r2, #4
 8005cbe:	9201      	str	r2, [sp, #4]
 8005cc0:	9a02      	ldr	r2, [sp, #8]
 8005cc2:	9303      	str	r3, [sp, #12]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d808      	bhi.n	8005cda <__multiply+0x96>
 8005cc8:	2f00      	cmp	r7, #0
 8005cca:	dc55      	bgt.n	8005d78 <__multiply+0x134>
 8005ccc:	6107      	str	r7, [r0, #16]
 8005cce:	b005      	add	sp, #20
 8005cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd4:	f843 2b04 	str.w	r2, [r3], #4
 8005cd8:	e7db      	b.n	8005c92 <__multiply+0x4e>
 8005cda:	f8b3 a000 	ldrh.w	sl, [r3]
 8005cde:	f1ba 0f00 	cmp.w	sl, #0
 8005ce2:	d020      	beq.n	8005d26 <__multiply+0xe2>
 8005ce4:	46b1      	mov	r9, r6
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f105 0e14 	add.w	lr, r5, #20
 8005cec:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005cf0:	f8d9 b000 	ldr.w	fp, [r9]
 8005cf4:	b2a1      	uxth	r1, r4
 8005cf6:	fa1f fb8b 	uxth.w	fp, fp
 8005cfa:	fb0a b101 	mla	r1, sl, r1, fp
 8005cfe:	4411      	add	r1, r2
 8005d00:	f8d9 2000 	ldr.w	r2, [r9]
 8005d04:	0c24      	lsrs	r4, r4, #16
 8005d06:	0c12      	lsrs	r2, r2, #16
 8005d08:	fb0a 2404 	mla	r4, sl, r4, r2
 8005d0c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005d10:	b289      	uxth	r1, r1
 8005d12:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005d16:	45f4      	cmp	ip, lr
 8005d18:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005d1c:	f849 1b04 	str.w	r1, [r9], #4
 8005d20:	d8e4      	bhi.n	8005cec <__multiply+0xa8>
 8005d22:	9901      	ldr	r1, [sp, #4]
 8005d24:	5072      	str	r2, [r6, r1]
 8005d26:	9a03      	ldr	r2, [sp, #12]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d2e:	f1b9 0f00 	cmp.w	r9, #0
 8005d32:	d01f      	beq.n	8005d74 <__multiply+0x130>
 8005d34:	46b6      	mov	lr, r6
 8005d36:	f04f 0a00 	mov.w	sl, #0
 8005d3a:	6834      	ldr	r4, [r6, #0]
 8005d3c:	f105 0114 	add.w	r1, r5, #20
 8005d40:	880a      	ldrh	r2, [r1, #0]
 8005d42:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005d46:	b2a4      	uxth	r4, r4
 8005d48:	fb09 b202 	mla	r2, r9, r2, fp
 8005d4c:	4492      	add	sl, r2
 8005d4e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005d52:	f84e 4b04 	str.w	r4, [lr], #4
 8005d56:	f851 4b04 	ldr.w	r4, [r1], #4
 8005d5a:	f8be 2000 	ldrh.w	r2, [lr]
 8005d5e:	0c24      	lsrs	r4, r4, #16
 8005d60:	fb09 2404 	mla	r4, r9, r4, r2
 8005d64:	458c      	cmp	ip, r1
 8005d66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005d6a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d6e:	d8e7      	bhi.n	8005d40 <__multiply+0xfc>
 8005d70:	9a01      	ldr	r2, [sp, #4]
 8005d72:	50b4      	str	r4, [r6, r2]
 8005d74:	3604      	adds	r6, #4
 8005d76:	e7a3      	b.n	8005cc0 <__multiply+0x7c>
 8005d78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1a5      	bne.n	8005ccc <__multiply+0x88>
 8005d80:	3f01      	subs	r7, #1
 8005d82:	e7a1      	b.n	8005cc8 <__multiply+0x84>
 8005d84:	0800693b 	.word	0x0800693b
 8005d88:	080069ac 	.word	0x080069ac

08005d8c <__pow5mult>:
 8005d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d90:	4615      	mov	r5, r2
 8005d92:	f012 0203 	ands.w	r2, r2, #3
 8005d96:	4606      	mov	r6, r0
 8005d98:	460f      	mov	r7, r1
 8005d9a:	d007      	beq.n	8005dac <__pow5mult+0x20>
 8005d9c:	4c25      	ldr	r4, [pc, #148]	; (8005e34 <__pow5mult+0xa8>)
 8005d9e:	3a01      	subs	r2, #1
 8005da0:	2300      	movs	r3, #0
 8005da2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005da6:	f7ff fe9f 	bl	8005ae8 <__multadd>
 8005daa:	4607      	mov	r7, r0
 8005dac:	10ad      	asrs	r5, r5, #2
 8005dae:	d03d      	beq.n	8005e2c <__pow5mult+0xa0>
 8005db0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005db2:	b97c      	cbnz	r4, 8005dd4 <__pow5mult+0x48>
 8005db4:	2010      	movs	r0, #16
 8005db6:	f7ff fe11 	bl	80059dc <malloc>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	6270      	str	r0, [r6, #36]	; 0x24
 8005dbe:	b928      	cbnz	r0, 8005dcc <__pow5mult+0x40>
 8005dc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005dc4:	4b1c      	ldr	r3, [pc, #112]	; (8005e38 <__pow5mult+0xac>)
 8005dc6:	481d      	ldr	r0, [pc, #116]	; (8005e3c <__pow5mult+0xb0>)
 8005dc8:	f000 fc20 	bl	800660c <__assert_func>
 8005dcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dd0:	6004      	str	r4, [r0, #0]
 8005dd2:	60c4      	str	r4, [r0, #12]
 8005dd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005dd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ddc:	b94c      	cbnz	r4, 8005df2 <__pow5mult+0x66>
 8005dde:	f240 2171 	movw	r1, #625	; 0x271
 8005de2:	4630      	mov	r0, r6
 8005de4:	f7ff ff18 	bl	8005c18 <__i2b>
 8005de8:	2300      	movs	r3, #0
 8005dea:	4604      	mov	r4, r0
 8005dec:	f8c8 0008 	str.w	r0, [r8, #8]
 8005df0:	6003      	str	r3, [r0, #0]
 8005df2:	f04f 0900 	mov.w	r9, #0
 8005df6:	07eb      	lsls	r3, r5, #31
 8005df8:	d50a      	bpl.n	8005e10 <__pow5mult+0x84>
 8005dfa:	4639      	mov	r1, r7
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f7ff ff20 	bl	8005c44 <__multiply>
 8005e04:	4680      	mov	r8, r0
 8005e06:	4639      	mov	r1, r7
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f7ff fe4b 	bl	8005aa4 <_Bfree>
 8005e0e:	4647      	mov	r7, r8
 8005e10:	106d      	asrs	r5, r5, #1
 8005e12:	d00b      	beq.n	8005e2c <__pow5mult+0xa0>
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	b938      	cbnz	r0, 8005e28 <__pow5mult+0x9c>
 8005e18:	4622      	mov	r2, r4
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f7ff ff11 	bl	8005c44 <__multiply>
 8005e22:	6020      	str	r0, [r4, #0]
 8005e24:	f8c0 9000 	str.w	r9, [r0]
 8005e28:	4604      	mov	r4, r0
 8005e2a:	e7e4      	b.n	8005df6 <__pow5mult+0x6a>
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e32:	bf00      	nop
 8005e34:	08006b00 	.word	0x08006b00
 8005e38:	080068c5 	.word	0x080068c5
 8005e3c:	080069ac 	.word	0x080069ac

08005e40 <__lshift>:
 8005e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e44:	460c      	mov	r4, r1
 8005e46:	4607      	mov	r7, r0
 8005e48:	4691      	mov	r9, r2
 8005e4a:	6923      	ldr	r3, [r4, #16]
 8005e4c:	6849      	ldr	r1, [r1, #4]
 8005e4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e52:	68a3      	ldr	r3, [r4, #8]
 8005e54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e58:	f108 0601 	add.w	r6, r8, #1
 8005e5c:	42b3      	cmp	r3, r6
 8005e5e:	db0b      	blt.n	8005e78 <__lshift+0x38>
 8005e60:	4638      	mov	r0, r7
 8005e62:	f7ff fddf 	bl	8005a24 <_Balloc>
 8005e66:	4605      	mov	r5, r0
 8005e68:	b948      	cbnz	r0, 8005e7e <__lshift+0x3e>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e70:	4b27      	ldr	r3, [pc, #156]	; (8005f10 <__lshift+0xd0>)
 8005e72:	4828      	ldr	r0, [pc, #160]	; (8005f14 <__lshift+0xd4>)
 8005e74:	f000 fbca 	bl	800660c <__assert_func>
 8005e78:	3101      	adds	r1, #1
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	e7ee      	b.n	8005e5c <__lshift+0x1c>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f100 0114 	add.w	r1, r0, #20
 8005e84:	f100 0210 	add.w	r2, r0, #16
 8005e88:	4618      	mov	r0, r3
 8005e8a:	4553      	cmp	r3, sl
 8005e8c:	db33      	blt.n	8005ef6 <__lshift+0xb6>
 8005e8e:	6920      	ldr	r0, [r4, #16]
 8005e90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e94:	f104 0314 	add.w	r3, r4, #20
 8005e98:	f019 091f 	ands.w	r9, r9, #31
 8005e9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ea0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ea4:	d02b      	beq.n	8005efe <__lshift+0xbe>
 8005ea6:	468a      	mov	sl, r1
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f1c9 0e20 	rsb	lr, r9, #32
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	fa00 f009 	lsl.w	r0, r0, r9
 8005eb4:	4302      	orrs	r2, r0
 8005eb6:	f84a 2b04 	str.w	r2, [sl], #4
 8005eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ebe:	459c      	cmp	ip, r3
 8005ec0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ec4:	d8f3      	bhi.n	8005eae <__lshift+0x6e>
 8005ec6:	ebac 0304 	sub.w	r3, ip, r4
 8005eca:	3b15      	subs	r3, #21
 8005ecc:	f023 0303 	bic.w	r3, r3, #3
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	f104 0015 	add.w	r0, r4, #21
 8005ed6:	4584      	cmp	ip, r0
 8005ed8:	bf38      	it	cc
 8005eda:	2304      	movcc	r3, #4
 8005edc:	50ca      	str	r2, [r1, r3]
 8005ede:	b10a      	cbz	r2, 8005ee4 <__lshift+0xa4>
 8005ee0:	f108 0602 	add.w	r6, r8, #2
 8005ee4:	3e01      	subs	r6, #1
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	4621      	mov	r1, r4
 8005eea:	612e      	str	r6, [r5, #16]
 8005eec:	f7ff fdda 	bl	8005aa4 <_Bfree>
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005efa:	3301      	adds	r3, #1
 8005efc:	e7c5      	b.n	8005e8a <__lshift+0x4a>
 8005efe:	3904      	subs	r1, #4
 8005f00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f04:	459c      	cmp	ip, r3
 8005f06:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f0a:	d8f9      	bhi.n	8005f00 <__lshift+0xc0>
 8005f0c:	e7ea      	b.n	8005ee4 <__lshift+0xa4>
 8005f0e:	bf00      	nop
 8005f10:	0800693b 	.word	0x0800693b
 8005f14:	080069ac 	.word	0x080069ac

08005f18 <__mcmp>:
 8005f18:	4603      	mov	r3, r0
 8005f1a:	690a      	ldr	r2, [r1, #16]
 8005f1c:	6900      	ldr	r0, [r0, #16]
 8005f1e:	b530      	push	{r4, r5, lr}
 8005f20:	1a80      	subs	r0, r0, r2
 8005f22:	d10d      	bne.n	8005f40 <__mcmp+0x28>
 8005f24:	3314      	adds	r3, #20
 8005f26:	3114      	adds	r1, #20
 8005f28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f38:	4295      	cmp	r5, r2
 8005f3a:	d002      	beq.n	8005f42 <__mcmp+0x2a>
 8005f3c:	d304      	bcc.n	8005f48 <__mcmp+0x30>
 8005f3e:	2001      	movs	r0, #1
 8005f40:	bd30      	pop	{r4, r5, pc}
 8005f42:	42a3      	cmp	r3, r4
 8005f44:	d3f4      	bcc.n	8005f30 <__mcmp+0x18>
 8005f46:	e7fb      	b.n	8005f40 <__mcmp+0x28>
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f4c:	e7f8      	b.n	8005f40 <__mcmp+0x28>
	...

08005f50 <__mdiff>:
 8005f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f54:	460c      	mov	r4, r1
 8005f56:	4606      	mov	r6, r0
 8005f58:	4611      	mov	r1, r2
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	4692      	mov	sl, r2
 8005f5e:	f7ff ffdb 	bl	8005f18 <__mcmp>
 8005f62:	1e05      	subs	r5, r0, #0
 8005f64:	d111      	bne.n	8005f8a <__mdiff+0x3a>
 8005f66:	4629      	mov	r1, r5
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f7ff fd5b 	bl	8005a24 <_Balloc>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	b928      	cbnz	r0, 8005f7e <__mdiff+0x2e>
 8005f72:	f240 2132 	movw	r1, #562	; 0x232
 8005f76:	4b3c      	ldr	r3, [pc, #240]	; (8006068 <__mdiff+0x118>)
 8005f78:	483c      	ldr	r0, [pc, #240]	; (800606c <__mdiff+0x11c>)
 8005f7a:	f000 fb47 	bl	800660c <__assert_func>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f84:	4610      	mov	r0, r2
 8005f86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8a:	bfa4      	itt	ge
 8005f8c:	4653      	movge	r3, sl
 8005f8e:	46a2      	movge	sl, r4
 8005f90:	4630      	mov	r0, r6
 8005f92:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005f96:	bfa6      	itte	ge
 8005f98:	461c      	movge	r4, r3
 8005f9a:	2500      	movge	r5, #0
 8005f9c:	2501      	movlt	r5, #1
 8005f9e:	f7ff fd41 	bl	8005a24 <_Balloc>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	b918      	cbnz	r0, 8005fae <__mdiff+0x5e>
 8005fa6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005faa:	4b2f      	ldr	r3, [pc, #188]	; (8006068 <__mdiff+0x118>)
 8005fac:	e7e4      	b.n	8005f78 <__mdiff+0x28>
 8005fae:	f100 0814 	add.w	r8, r0, #20
 8005fb2:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005fb6:	60c5      	str	r5, [r0, #12]
 8005fb8:	f04f 0c00 	mov.w	ip, #0
 8005fbc:	f10a 0514 	add.w	r5, sl, #20
 8005fc0:	f10a 0010 	add.w	r0, sl, #16
 8005fc4:	46c2      	mov	sl, r8
 8005fc6:	6926      	ldr	r6, [r4, #16]
 8005fc8:	f104 0914 	add.w	r9, r4, #20
 8005fcc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005fd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005fd4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005fd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fdc:	fa1f f18b 	uxth.w	r1, fp
 8005fe0:	4461      	add	r1, ip
 8005fe2:	fa1f fc83 	uxth.w	ip, r3
 8005fe6:	0c1b      	lsrs	r3, r3, #16
 8005fe8:	eba1 010c 	sub.w	r1, r1, ip
 8005fec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ff0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005ff4:	b289      	uxth	r1, r1
 8005ff6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005ffa:	454e      	cmp	r6, r9
 8005ffc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006000:	f84a 3b04 	str.w	r3, [sl], #4
 8006004:	d8e6      	bhi.n	8005fd4 <__mdiff+0x84>
 8006006:	1b33      	subs	r3, r6, r4
 8006008:	3b15      	subs	r3, #21
 800600a:	f023 0303 	bic.w	r3, r3, #3
 800600e:	3415      	adds	r4, #21
 8006010:	3304      	adds	r3, #4
 8006012:	42a6      	cmp	r6, r4
 8006014:	bf38      	it	cc
 8006016:	2304      	movcc	r3, #4
 8006018:	441d      	add	r5, r3
 800601a:	4443      	add	r3, r8
 800601c:	461e      	mov	r6, r3
 800601e:	462c      	mov	r4, r5
 8006020:	4574      	cmp	r4, lr
 8006022:	d30e      	bcc.n	8006042 <__mdiff+0xf2>
 8006024:	f10e 0103 	add.w	r1, lr, #3
 8006028:	1b49      	subs	r1, r1, r5
 800602a:	f021 0103 	bic.w	r1, r1, #3
 800602e:	3d03      	subs	r5, #3
 8006030:	45ae      	cmp	lr, r5
 8006032:	bf38      	it	cc
 8006034:	2100      	movcc	r1, #0
 8006036:	4419      	add	r1, r3
 8006038:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800603c:	b18b      	cbz	r3, 8006062 <__mdiff+0x112>
 800603e:	6117      	str	r7, [r2, #16]
 8006040:	e7a0      	b.n	8005f84 <__mdiff+0x34>
 8006042:	f854 8b04 	ldr.w	r8, [r4], #4
 8006046:	fa1f f188 	uxth.w	r1, r8
 800604a:	4461      	add	r1, ip
 800604c:	1408      	asrs	r0, r1, #16
 800604e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006052:	b289      	uxth	r1, r1
 8006054:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006058:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800605c:	f846 1b04 	str.w	r1, [r6], #4
 8006060:	e7de      	b.n	8006020 <__mdiff+0xd0>
 8006062:	3f01      	subs	r7, #1
 8006064:	e7e8      	b.n	8006038 <__mdiff+0xe8>
 8006066:	bf00      	nop
 8006068:	0800693b 	.word	0x0800693b
 800606c:	080069ac 	.word	0x080069ac

08006070 <__d2b>:
 8006070:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006074:	2101      	movs	r1, #1
 8006076:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800607a:	4690      	mov	r8, r2
 800607c:	461d      	mov	r5, r3
 800607e:	f7ff fcd1 	bl	8005a24 <_Balloc>
 8006082:	4604      	mov	r4, r0
 8006084:	b930      	cbnz	r0, 8006094 <__d2b+0x24>
 8006086:	4602      	mov	r2, r0
 8006088:	f240 310a 	movw	r1, #778	; 0x30a
 800608c:	4b24      	ldr	r3, [pc, #144]	; (8006120 <__d2b+0xb0>)
 800608e:	4825      	ldr	r0, [pc, #148]	; (8006124 <__d2b+0xb4>)
 8006090:	f000 fabc 	bl	800660c <__assert_func>
 8006094:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006098:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800609c:	bb2d      	cbnz	r5, 80060ea <__d2b+0x7a>
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	f1b8 0300 	subs.w	r3, r8, #0
 80060a4:	d026      	beq.n	80060f4 <__d2b+0x84>
 80060a6:	4668      	mov	r0, sp
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	f7ff fd87 	bl	8005bbc <__lo0bits>
 80060ae:	9900      	ldr	r1, [sp, #0]
 80060b0:	b1f0      	cbz	r0, 80060f0 <__d2b+0x80>
 80060b2:	9a01      	ldr	r2, [sp, #4]
 80060b4:	f1c0 0320 	rsb	r3, r0, #32
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	430b      	orrs	r3, r1
 80060be:	40c2      	lsrs	r2, r0
 80060c0:	6163      	str	r3, [r4, #20]
 80060c2:	9201      	str	r2, [sp, #4]
 80060c4:	9b01      	ldr	r3, [sp, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bf14      	ite	ne
 80060ca:	2102      	movne	r1, #2
 80060cc:	2101      	moveq	r1, #1
 80060ce:	61a3      	str	r3, [r4, #24]
 80060d0:	6121      	str	r1, [r4, #16]
 80060d2:	b1c5      	cbz	r5, 8006106 <__d2b+0x96>
 80060d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80060d8:	4405      	add	r5, r0
 80060da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060de:	603d      	str	r5, [r7, #0]
 80060e0:	6030      	str	r0, [r6, #0]
 80060e2:	4620      	mov	r0, r4
 80060e4:	b002      	add	sp, #8
 80060e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ee:	e7d6      	b.n	800609e <__d2b+0x2e>
 80060f0:	6161      	str	r1, [r4, #20]
 80060f2:	e7e7      	b.n	80060c4 <__d2b+0x54>
 80060f4:	a801      	add	r0, sp, #4
 80060f6:	f7ff fd61 	bl	8005bbc <__lo0bits>
 80060fa:	2101      	movs	r1, #1
 80060fc:	9b01      	ldr	r3, [sp, #4]
 80060fe:	6121      	str	r1, [r4, #16]
 8006100:	6163      	str	r3, [r4, #20]
 8006102:	3020      	adds	r0, #32
 8006104:	e7e5      	b.n	80060d2 <__d2b+0x62>
 8006106:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800610a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800610e:	6038      	str	r0, [r7, #0]
 8006110:	6918      	ldr	r0, [r3, #16]
 8006112:	f7ff fd33 	bl	8005b7c <__hi0bits>
 8006116:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800611a:	6031      	str	r1, [r6, #0]
 800611c:	e7e1      	b.n	80060e2 <__d2b+0x72>
 800611e:	bf00      	nop
 8006120:	0800693b 	.word	0x0800693b
 8006124:	080069ac 	.word	0x080069ac

08006128 <_calloc_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	fb02 f501 	mul.w	r5, r2, r1
 800612e:	4629      	mov	r1, r5
 8006130:	f000 f854 	bl	80061dc <_malloc_r>
 8006134:	4604      	mov	r4, r0
 8006136:	b118      	cbz	r0, 8006140 <_calloc_r+0x18>
 8006138:	462a      	mov	r2, r5
 800613a:	2100      	movs	r1, #0
 800613c:	f7fd fdf8 	bl	8003d30 <memset>
 8006140:	4620      	mov	r0, r4
 8006142:	bd38      	pop	{r3, r4, r5, pc}

08006144 <_free_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	4605      	mov	r5, r0
 8006148:	2900      	cmp	r1, #0
 800614a:	d043      	beq.n	80061d4 <_free_r+0x90>
 800614c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006150:	1f0c      	subs	r4, r1, #4
 8006152:	2b00      	cmp	r3, #0
 8006154:	bfb8      	it	lt
 8006156:	18e4      	addlt	r4, r4, r3
 8006158:	f000 fade 	bl	8006718 <__malloc_lock>
 800615c:	4a1e      	ldr	r2, [pc, #120]	; (80061d8 <_free_r+0x94>)
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	4610      	mov	r0, r2
 8006162:	b933      	cbnz	r3, 8006172 <_free_r+0x2e>
 8006164:	6063      	str	r3, [r4, #4]
 8006166:	6014      	str	r4, [r2, #0]
 8006168:	4628      	mov	r0, r5
 800616a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800616e:	f000 bad9 	b.w	8006724 <__malloc_unlock>
 8006172:	42a3      	cmp	r3, r4
 8006174:	d90a      	bls.n	800618c <_free_r+0x48>
 8006176:	6821      	ldr	r1, [r4, #0]
 8006178:	1862      	adds	r2, r4, r1
 800617a:	4293      	cmp	r3, r2
 800617c:	bf01      	itttt	eq
 800617e:	681a      	ldreq	r2, [r3, #0]
 8006180:	685b      	ldreq	r3, [r3, #4]
 8006182:	1852      	addeq	r2, r2, r1
 8006184:	6022      	streq	r2, [r4, #0]
 8006186:	6063      	str	r3, [r4, #4]
 8006188:	6004      	str	r4, [r0, #0]
 800618a:	e7ed      	b.n	8006168 <_free_r+0x24>
 800618c:	461a      	mov	r2, r3
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	b10b      	cbz	r3, 8006196 <_free_r+0x52>
 8006192:	42a3      	cmp	r3, r4
 8006194:	d9fa      	bls.n	800618c <_free_r+0x48>
 8006196:	6811      	ldr	r1, [r2, #0]
 8006198:	1850      	adds	r0, r2, r1
 800619a:	42a0      	cmp	r0, r4
 800619c:	d10b      	bne.n	80061b6 <_free_r+0x72>
 800619e:	6820      	ldr	r0, [r4, #0]
 80061a0:	4401      	add	r1, r0
 80061a2:	1850      	adds	r0, r2, r1
 80061a4:	4283      	cmp	r3, r0
 80061a6:	6011      	str	r1, [r2, #0]
 80061a8:	d1de      	bne.n	8006168 <_free_r+0x24>
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	4401      	add	r1, r0
 80061b0:	6011      	str	r1, [r2, #0]
 80061b2:	6053      	str	r3, [r2, #4]
 80061b4:	e7d8      	b.n	8006168 <_free_r+0x24>
 80061b6:	d902      	bls.n	80061be <_free_r+0x7a>
 80061b8:	230c      	movs	r3, #12
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	e7d4      	b.n	8006168 <_free_r+0x24>
 80061be:	6820      	ldr	r0, [r4, #0]
 80061c0:	1821      	adds	r1, r4, r0
 80061c2:	428b      	cmp	r3, r1
 80061c4:	bf01      	itttt	eq
 80061c6:	6819      	ldreq	r1, [r3, #0]
 80061c8:	685b      	ldreq	r3, [r3, #4]
 80061ca:	1809      	addeq	r1, r1, r0
 80061cc:	6021      	streq	r1, [r4, #0]
 80061ce:	6063      	str	r3, [r4, #4]
 80061d0:	6054      	str	r4, [r2, #4]
 80061d2:	e7c9      	b.n	8006168 <_free_r+0x24>
 80061d4:	bd38      	pop	{r3, r4, r5, pc}
 80061d6:	bf00      	nop
 80061d8:	20000200 	.word	0x20000200

080061dc <_malloc_r>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	1ccd      	adds	r5, r1, #3
 80061e0:	f025 0503 	bic.w	r5, r5, #3
 80061e4:	3508      	adds	r5, #8
 80061e6:	2d0c      	cmp	r5, #12
 80061e8:	bf38      	it	cc
 80061ea:	250c      	movcc	r5, #12
 80061ec:	2d00      	cmp	r5, #0
 80061ee:	4606      	mov	r6, r0
 80061f0:	db01      	blt.n	80061f6 <_malloc_r+0x1a>
 80061f2:	42a9      	cmp	r1, r5
 80061f4:	d903      	bls.n	80061fe <_malloc_r+0x22>
 80061f6:	230c      	movs	r3, #12
 80061f8:	6033      	str	r3, [r6, #0]
 80061fa:	2000      	movs	r0, #0
 80061fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061fe:	f000 fa8b 	bl	8006718 <__malloc_lock>
 8006202:	4921      	ldr	r1, [pc, #132]	; (8006288 <_malloc_r+0xac>)
 8006204:	680a      	ldr	r2, [r1, #0]
 8006206:	4614      	mov	r4, r2
 8006208:	b99c      	cbnz	r4, 8006232 <_malloc_r+0x56>
 800620a:	4f20      	ldr	r7, [pc, #128]	; (800628c <_malloc_r+0xb0>)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	b923      	cbnz	r3, 800621a <_malloc_r+0x3e>
 8006210:	4621      	mov	r1, r4
 8006212:	4630      	mov	r0, r6
 8006214:	f000 f994 	bl	8006540 <_sbrk_r>
 8006218:	6038      	str	r0, [r7, #0]
 800621a:	4629      	mov	r1, r5
 800621c:	4630      	mov	r0, r6
 800621e:	f000 f98f 	bl	8006540 <_sbrk_r>
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	d123      	bne.n	800626e <_malloc_r+0x92>
 8006226:	230c      	movs	r3, #12
 8006228:	4630      	mov	r0, r6
 800622a:	6033      	str	r3, [r6, #0]
 800622c:	f000 fa7a 	bl	8006724 <__malloc_unlock>
 8006230:	e7e3      	b.n	80061fa <_malloc_r+0x1e>
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	1b5b      	subs	r3, r3, r5
 8006236:	d417      	bmi.n	8006268 <_malloc_r+0x8c>
 8006238:	2b0b      	cmp	r3, #11
 800623a:	d903      	bls.n	8006244 <_malloc_r+0x68>
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	441c      	add	r4, r3
 8006240:	6025      	str	r5, [r4, #0]
 8006242:	e004      	b.n	800624e <_malloc_r+0x72>
 8006244:	6863      	ldr	r3, [r4, #4]
 8006246:	42a2      	cmp	r2, r4
 8006248:	bf0c      	ite	eq
 800624a:	600b      	streq	r3, [r1, #0]
 800624c:	6053      	strne	r3, [r2, #4]
 800624e:	4630      	mov	r0, r6
 8006250:	f000 fa68 	bl	8006724 <__malloc_unlock>
 8006254:	f104 000b 	add.w	r0, r4, #11
 8006258:	1d23      	adds	r3, r4, #4
 800625a:	f020 0007 	bic.w	r0, r0, #7
 800625e:	1ac2      	subs	r2, r0, r3
 8006260:	d0cc      	beq.n	80061fc <_malloc_r+0x20>
 8006262:	1a1b      	subs	r3, r3, r0
 8006264:	50a3      	str	r3, [r4, r2]
 8006266:	e7c9      	b.n	80061fc <_malloc_r+0x20>
 8006268:	4622      	mov	r2, r4
 800626a:	6864      	ldr	r4, [r4, #4]
 800626c:	e7cc      	b.n	8006208 <_malloc_r+0x2c>
 800626e:	1cc4      	adds	r4, r0, #3
 8006270:	f024 0403 	bic.w	r4, r4, #3
 8006274:	42a0      	cmp	r0, r4
 8006276:	d0e3      	beq.n	8006240 <_malloc_r+0x64>
 8006278:	1a21      	subs	r1, r4, r0
 800627a:	4630      	mov	r0, r6
 800627c:	f000 f960 	bl	8006540 <_sbrk_r>
 8006280:	3001      	adds	r0, #1
 8006282:	d1dd      	bne.n	8006240 <_malloc_r+0x64>
 8006284:	e7cf      	b.n	8006226 <_malloc_r+0x4a>
 8006286:	bf00      	nop
 8006288:	20000200 	.word	0x20000200
 800628c:	20000204 	.word	0x20000204

08006290 <__sfputc_r>:
 8006290:	6893      	ldr	r3, [r2, #8]
 8006292:	b410      	push	{r4}
 8006294:	3b01      	subs	r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	6093      	str	r3, [r2, #8]
 800629a:	da07      	bge.n	80062ac <__sfputc_r+0x1c>
 800629c:	6994      	ldr	r4, [r2, #24]
 800629e:	42a3      	cmp	r3, r4
 80062a0:	db01      	blt.n	80062a6 <__sfputc_r+0x16>
 80062a2:	290a      	cmp	r1, #10
 80062a4:	d102      	bne.n	80062ac <__sfputc_r+0x1c>
 80062a6:	bc10      	pop	{r4}
 80062a8:	f7fe ba38 	b.w	800471c <__swbuf_r>
 80062ac:	6813      	ldr	r3, [r2, #0]
 80062ae:	1c58      	adds	r0, r3, #1
 80062b0:	6010      	str	r0, [r2, #0]
 80062b2:	7019      	strb	r1, [r3, #0]
 80062b4:	4608      	mov	r0, r1
 80062b6:	bc10      	pop	{r4}
 80062b8:	4770      	bx	lr

080062ba <__sfputs_r>:
 80062ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062bc:	4606      	mov	r6, r0
 80062be:	460f      	mov	r7, r1
 80062c0:	4614      	mov	r4, r2
 80062c2:	18d5      	adds	r5, r2, r3
 80062c4:	42ac      	cmp	r4, r5
 80062c6:	d101      	bne.n	80062cc <__sfputs_r+0x12>
 80062c8:	2000      	movs	r0, #0
 80062ca:	e007      	b.n	80062dc <__sfputs_r+0x22>
 80062cc:	463a      	mov	r2, r7
 80062ce:	4630      	mov	r0, r6
 80062d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d4:	f7ff ffdc 	bl	8006290 <__sfputc_r>
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	d1f3      	bne.n	80062c4 <__sfputs_r+0xa>
 80062dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062e0 <_vfiprintf_r>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	460d      	mov	r5, r1
 80062e6:	4614      	mov	r4, r2
 80062e8:	4698      	mov	r8, r3
 80062ea:	4606      	mov	r6, r0
 80062ec:	b09d      	sub	sp, #116	; 0x74
 80062ee:	b118      	cbz	r0, 80062f8 <_vfiprintf_r+0x18>
 80062f0:	6983      	ldr	r3, [r0, #24]
 80062f2:	b90b      	cbnz	r3, 80062f8 <_vfiprintf_r+0x18>
 80062f4:	f7ff fa68 	bl	80057c8 <__sinit>
 80062f8:	4b89      	ldr	r3, [pc, #548]	; (8006520 <_vfiprintf_r+0x240>)
 80062fa:	429d      	cmp	r5, r3
 80062fc:	d11b      	bne.n	8006336 <_vfiprintf_r+0x56>
 80062fe:	6875      	ldr	r5, [r6, #4]
 8006300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006302:	07d9      	lsls	r1, r3, #31
 8006304:	d405      	bmi.n	8006312 <_vfiprintf_r+0x32>
 8006306:	89ab      	ldrh	r3, [r5, #12]
 8006308:	059a      	lsls	r2, r3, #22
 800630a:	d402      	bmi.n	8006312 <_vfiprintf_r+0x32>
 800630c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800630e:	f7ff fafe 	bl	800590e <__retarget_lock_acquire_recursive>
 8006312:	89ab      	ldrh	r3, [r5, #12]
 8006314:	071b      	lsls	r3, r3, #28
 8006316:	d501      	bpl.n	800631c <_vfiprintf_r+0x3c>
 8006318:	692b      	ldr	r3, [r5, #16]
 800631a:	b9eb      	cbnz	r3, 8006358 <_vfiprintf_r+0x78>
 800631c:	4629      	mov	r1, r5
 800631e:	4630      	mov	r0, r6
 8006320:	f7fe fa4e 	bl	80047c0 <__swsetup_r>
 8006324:	b1c0      	cbz	r0, 8006358 <_vfiprintf_r+0x78>
 8006326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006328:	07dc      	lsls	r4, r3, #31
 800632a:	d50e      	bpl.n	800634a <_vfiprintf_r+0x6a>
 800632c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006330:	b01d      	add	sp, #116	; 0x74
 8006332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006336:	4b7b      	ldr	r3, [pc, #492]	; (8006524 <_vfiprintf_r+0x244>)
 8006338:	429d      	cmp	r5, r3
 800633a:	d101      	bne.n	8006340 <_vfiprintf_r+0x60>
 800633c:	68b5      	ldr	r5, [r6, #8]
 800633e:	e7df      	b.n	8006300 <_vfiprintf_r+0x20>
 8006340:	4b79      	ldr	r3, [pc, #484]	; (8006528 <_vfiprintf_r+0x248>)
 8006342:	429d      	cmp	r5, r3
 8006344:	bf08      	it	eq
 8006346:	68f5      	ldreq	r5, [r6, #12]
 8006348:	e7da      	b.n	8006300 <_vfiprintf_r+0x20>
 800634a:	89ab      	ldrh	r3, [r5, #12]
 800634c:	0598      	lsls	r0, r3, #22
 800634e:	d4ed      	bmi.n	800632c <_vfiprintf_r+0x4c>
 8006350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006352:	f7ff fadd 	bl	8005910 <__retarget_lock_release_recursive>
 8006356:	e7e9      	b.n	800632c <_vfiprintf_r+0x4c>
 8006358:	2300      	movs	r3, #0
 800635a:	9309      	str	r3, [sp, #36]	; 0x24
 800635c:	2320      	movs	r3, #32
 800635e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006362:	2330      	movs	r3, #48	; 0x30
 8006364:	f04f 0901 	mov.w	r9, #1
 8006368:	f8cd 800c 	str.w	r8, [sp, #12]
 800636c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800652c <_vfiprintf_r+0x24c>
 8006370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006374:	4623      	mov	r3, r4
 8006376:	469a      	mov	sl, r3
 8006378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800637c:	b10a      	cbz	r2, 8006382 <_vfiprintf_r+0xa2>
 800637e:	2a25      	cmp	r2, #37	; 0x25
 8006380:	d1f9      	bne.n	8006376 <_vfiprintf_r+0x96>
 8006382:	ebba 0b04 	subs.w	fp, sl, r4
 8006386:	d00b      	beq.n	80063a0 <_vfiprintf_r+0xc0>
 8006388:	465b      	mov	r3, fp
 800638a:	4622      	mov	r2, r4
 800638c:	4629      	mov	r1, r5
 800638e:	4630      	mov	r0, r6
 8006390:	f7ff ff93 	bl	80062ba <__sfputs_r>
 8006394:	3001      	adds	r0, #1
 8006396:	f000 80aa 	beq.w	80064ee <_vfiprintf_r+0x20e>
 800639a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800639c:	445a      	add	r2, fp
 800639e:	9209      	str	r2, [sp, #36]	; 0x24
 80063a0:	f89a 3000 	ldrb.w	r3, [sl]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80a2 	beq.w	80064ee <_vfiprintf_r+0x20e>
 80063aa:	2300      	movs	r3, #0
 80063ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063b4:	f10a 0a01 	add.w	sl, sl, #1
 80063b8:	9304      	str	r3, [sp, #16]
 80063ba:	9307      	str	r3, [sp, #28]
 80063bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063c0:	931a      	str	r3, [sp, #104]	; 0x68
 80063c2:	4654      	mov	r4, sl
 80063c4:	2205      	movs	r2, #5
 80063c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ca:	4858      	ldr	r0, [pc, #352]	; (800652c <_vfiprintf_r+0x24c>)
 80063cc:	f7ff fb0e 	bl	80059ec <memchr>
 80063d0:	9a04      	ldr	r2, [sp, #16]
 80063d2:	b9d8      	cbnz	r0, 800640c <_vfiprintf_r+0x12c>
 80063d4:	06d1      	lsls	r1, r2, #27
 80063d6:	bf44      	itt	mi
 80063d8:	2320      	movmi	r3, #32
 80063da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063de:	0713      	lsls	r3, r2, #28
 80063e0:	bf44      	itt	mi
 80063e2:	232b      	movmi	r3, #43	; 0x2b
 80063e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063e8:	f89a 3000 	ldrb.w	r3, [sl]
 80063ec:	2b2a      	cmp	r3, #42	; 0x2a
 80063ee:	d015      	beq.n	800641c <_vfiprintf_r+0x13c>
 80063f0:	4654      	mov	r4, sl
 80063f2:	2000      	movs	r0, #0
 80063f4:	f04f 0c0a 	mov.w	ip, #10
 80063f8:	9a07      	ldr	r2, [sp, #28]
 80063fa:	4621      	mov	r1, r4
 80063fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006400:	3b30      	subs	r3, #48	; 0x30
 8006402:	2b09      	cmp	r3, #9
 8006404:	d94e      	bls.n	80064a4 <_vfiprintf_r+0x1c4>
 8006406:	b1b0      	cbz	r0, 8006436 <_vfiprintf_r+0x156>
 8006408:	9207      	str	r2, [sp, #28]
 800640a:	e014      	b.n	8006436 <_vfiprintf_r+0x156>
 800640c:	eba0 0308 	sub.w	r3, r0, r8
 8006410:	fa09 f303 	lsl.w	r3, r9, r3
 8006414:	4313      	orrs	r3, r2
 8006416:	46a2      	mov	sl, r4
 8006418:	9304      	str	r3, [sp, #16]
 800641a:	e7d2      	b.n	80063c2 <_vfiprintf_r+0xe2>
 800641c:	9b03      	ldr	r3, [sp, #12]
 800641e:	1d19      	adds	r1, r3, #4
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	9103      	str	r1, [sp, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	bfbb      	ittet	lt
 8006428:	425b      	neglt	r3, r3
 800642a:	f042 0202 	orrlt.w	r2, r2, #2
 800642e:	9307      	strge	r3, [sp, #28]
 8006430:	9307      	strlt	r3, [sp, #28]
 8006432:	bfb8      	it	lt
 8006434:	9204      	strlt	r2, [sp, #16]
 8006436:	7823      	ldrb	r3, [r4, #0]
 8006438:	2b2e      	cmp	r3, #46	; 0x2e
 800643a:	d10c      	bne.n	8006456 <_vfiprintf_r+0x176>
 800643c:	7863      	ldrb	r3, [r4, #1]
 800643e:	2b2a      	cmp	r3, #42	; 0x2a
 8006440:	d135      	bne.n	80064ae <_vfiprintf_r+0x1ce>
 8006442:	9b03      	ldr	r3, [sp, #12]
 8006444:	3402      	adds	r4, #2
 8006446:	1d1a      	adds	r2, r3, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	9203      	str	r2, [sp, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	bfb8      	it	lt
 8006450:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006454:	9305      	str	r3, [sp, #20]
 8006456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800653c <_vfiprintf_r+0x25c>
 800645a:	2203      	movs	r2, #3
 800645c:	4650      	mov	r0, sl
 800645e:	7821      	ldrb	r1, [r4, #0]
 8006460:	f7ff fac4 	bl	80059ec <memchr>
 8006464:	b140      	cbz	r0, 8006478 <_vfiprintf_r+0x198>
 8006466:	2340      	movs	r3, #64	; 0x40
 8006468:	eba0 000a 	sub.w	r0, r0, sl
 800646c:	fa03 f000 	lsl.w	r0, r3, r0
 8006470:	9b04      	ldr	r3, [sp, #16]
 8006472:	3401      	adds	r4, #1
 8006474:	4303      	orrs	r3, r0
 8006476:	9304      	str	r3, [sp, #16]
 8006478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647c:	2206      	movs	r2, #6
 800647e:	482c      	ldr	r0, [pc, #176]	; (8006530 <_vfiprintf_r+0x250>)
 8006480:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006484:	f7ff fab2 	bl	80059ec <memchr>
 8006488:	2800      	cmp	r0, #0
 800648a:	d03f      	beq.n	800650c <_vfiprintf_r+0x22c>
 800648c:	4b29      	ldr	r3, [pc, #164]	; (8006534 <_vfiprintf_r+0x254>)
 800648e:	bb1b      	cbnz	r3, 80064d8 <_vfiprintf_r+0x1f8>
 8006490:	9b03      	ldr	r3, [sp, #12]
 8006492:	3307      	adds	r3, #7
 8006494:	f023 0307 	bic.w	r3, r3, #7
 8006498:	3308      	adds	r3, #8
 800649a:	9303      	str	r3, [sp, #12]
 800649c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649e:	443b      	add	r3, r7
 80064a0:	9309      	str	r3, [sp, #36]	; 0x24
 80064a2:	e767      	b.n	8006374 <_vfiprintf_r+0x94>
 80064a4:	460c      	mov	r4, r1
 80064a6:	2001      	movs	r0, #1
 80064a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ac:	e7a5      	b.n	80063fa <_vfiprintf_r+0x11a>
 80064ae:	2300      	movs	r3, #0
 80064b0:	f04f 0c0a 	mov.w	ip, #10
 80064b4:	4619      	mov	r1, r3
 80064b6:	3401      	adds	r4, #1
 80064b8:	9305      	str	r3, [sp, #20]
 80064ba:	4620      	mov	r0, r4
 80064bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064c0:	3a30      	subs	r2, #48	; 0x30
 80064c2:	2a09      	cmp	r2, #9
 80064c4:	d903      	bls.n	80064ce <_vfiprintf_r+0x1ee>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0c5      	beq.n	8006456 <_vfiprintf_r+0x176>
 80064ca:	9105      	str	r1, [sp, #20]
 80064cc:	e7c3      	b.n	8006456 <_vfiprintf_r+0x176>
 80064ce:	4604      	mov	r4, r0
 80064d0:	2301      	movs	r3, #1
 80064d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80064d6:	e7f0      	b.n	80064ba <_vfiprintf_r+0x1da>
 80064d8:	ab03      	add	r3, sp, #12
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	462a      	mov	r2, r5
 80064de:	4630      	mov	r0, r6
 80064e0:	4b15      	ldr	r3, [pc, #84]	; (8006538 <_vfiprintf_r+0x258>)
 80064e2:	a904      	add	r1, sp, #16
 80064e4:	f7fd fcca 	bl	8003e7c <_printf_float>
 80064e8:	4607      	mov	r7, r0
 80064ea:	1c78      	adds	r0, r7, #1
 80064ec:	d1d6      	bne.n	800649c <_vfiprintf_r+0x1bc>
 80064ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064f0:	07d9      	lsls	r1, r3, #31
 80064f2:	d405      	bmi.n	8006500 <_vfiprintf_r+0x220>
 80064f4:	89ab      	ldrh	r3, [r5, #12]
 80064f6:	059a      	lsls	r2, r3, #22
 80064f8:	d402      	bmi.n	8006500 <_vfiprintf_r+0x220>
 80064fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064fc:	f7ff fa08 	bl	8005910 <__retarget_lock_release_recursive>
 8006500:	89ab      	ldrh	r3, [r5, #12]
 8006502:	065b      	lsls	r3, r3, #25
 8006504:	f53f af12 	bmi.w	800632c <_vfiprintf_r+0x4c>
 8006508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800650a:	e711      	b.n	8006330 <_vfiprintf_r+0x50>
 800650c:	ab03      	add	r3, sp, #12
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	462a      	mov	r2, r5
 8006512:	4630      	mov	r0, r6
 8006514:	4b08      	ldr	r3, [pc, #32]	; (8006538 <_vfiprintf_r+0x258>)
 8006516:	a904      	add	r1, sp, #16
 8006518:	f7fd ff4c 	bl	80043b4 <_printf_i>
 800651c:	e7e4      	b.n	80064e8 <_vfiprintf_r+0x208>
 800651e:	bf00      	nop
 8006520:	0800696c 	.word	0x0800696c
 8006524:	0800698c 	.word	0x0800698c
 8006528:	0800694c 	.word	0x0800694c
 800652c:	08006b0c 	.word	0x08006b0c
 8006530:	08006b16 	.word	0x08006b16
 8006534:	08003e7d 	.word	0x08003e7d
 8006538:	080062bb 	.word	0x080062bb
 800653c:	08006b12 	.word	0x08006b12

08006540 <_sbrk_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	2300      	movs	r3, #0
 8006544:	4d05      	ldr	r5, [pc, #20]	; (800655c <_sbrk_r+0x1c>)
 8006546:	4604      	mov	r4, r0
 8006548:	4608      	mov	r0, r1
 800654a:	602b      	str	r3, [r5, #0]
 800654c:	f7fa ffb4 	bl	80014b8 <_sbrk>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	d102      	bne.n	800655a <_sbrk_r+0x1a>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	b103      	cbz	r3, 800655a <_sbrk_r+0x1a>
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	200002dc 	.word	0x200002dc

08006560 <__sread>:
 8006560:	b510      	push	{r4, lr}
 8006562:	460c      	mov	r4, r1
 8006564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006568:	f000 f8e2 	bl	8006730 <_read_r>
 800656c:	2800      	cmp	r0, #0
 800656e:	bfab      	itete	ge
 8006570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006572:	89a3      	ldrhlt	r3, [r4, #12]
 8006574:	181b      	addge	r3, r3, r0
 8006576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800657a:	bfac      	ite	ge
 800657c:	6563      	strge	r3, [r4, #84]	; 0x54
 800657e:	81a3      	strhlt	r3, [r4, #12]
 8006580:	bd10      	pop	{r4, pc}

08006582 <__swrite>:
 8006582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006586:	461f      	mov	r7, r3
 8006588:	898b      	ldrh	r3, [r1, #12]
 800658a:	4605      	mov	r5, r0
 800658c:	05db      	lsls	r3, r3, #23
 800658e:	460c      	mov	r4, r1
 8006590:	4616      	mov	r6, r2
 8006592:	d505      	bpl.n	80065a0 <__swrite+0x1e>
 8006594:	2302      	movs	r3, #2
 8006596:	2200      	movs	r2, #0
 8006598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800659c:	f000 f898 	bl	80066d0 <_lseek_r>
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	4632      	mov	r2, r6
 80065a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a8:	81a3      	strh	r3, [r4, #12]
 80065aa:	4628      	mov	r0, r5
 80065ac:	463b      	mov	r3, r7
 80065ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065b6:	f000 b817 	b.w	80065e8 <_write_r>

080065ba <__sseek>:
 80065ba:	b510      	push	{r4, lr}
 80065bc:	460c      	mov	r4, r1
 80065be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c2:	f000 f885 	bl	80066d0 <_lseek_r>
 80065c6:	1c43      	adds	r3, r0, #1
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	bf15      	itete	ne
 80065cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80065ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065d6:	81a3      	strheq	r3, [r4, #12]
 80065d8:	bf18      	it	ne
 80065da:	81a3      	strhne	r3, [r4, #12]
 80065dc:	bd10      	pop	{r4, pc}

080065de <__sclose>:
 80065de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e2:	f000 b831 	b.w	8006648 <_close_r>
	...

080065e8 <_write_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	4611      	mov	r1, r2
 80065f0:	2200      	movs	r2, #0
 80065f2:	4d05      	ldr	r5, [pc, #20]	; (8006608 <_write_r+0x20>)
 80065f4:	602a      	str	r2, [r5, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f7fa ff12 	bl	8001420 <_write>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	d102      	bne.n	8006606 <_write_r+0x1e>
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	b103      	cbz	r3, 8006606 <_write_r+0x1e>
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	200002dc 	.word	0x200002dc

0800660c <__assert_func>:
 800660c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800660e:	4614      	mov	r4, r2
 8006610:	461a      	mov	r2, r3
 8006612:	4b09      	ldr	r3, [pc, #36]	; (8006638 <__assert_func+0x2c>)
 8006614:	4605      	mov	r5, r0
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68d8      	ldr	r0, [r3, #12]
 800661a:	b14c      	cbz	r4, 8006630 <__assert_func+0x24>
 800661c:	4b07      	ldr	r3, [pc, #28]	; (800663c <__assert_func+0x30>)
 800661e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006622:	9100      	str	r1, [sp, #0]
 8006624:	462b      	mov	r3, r5
 8006626:	4906      	ldr	r1, [pc, #24]	; (8006640 <__assert_func+0x34>)
 8006628:	f000 f81e 	bl	8006668 <fiprintf>
 800662c:	f000 f89f 	bl	800676e <abort>
 8006630:	4b04      	ldr	r3, [pc, #16]	; (8006644 <__assert_func+0x38>)
 8006632:	461c      	mov	r4, r3
 8006634:	e7f3      	b.n	800661e <__assert_func+0x12>
 8006636:	bf00      	nop
 8006638:	20000010 	.word	0x20000010
 800663c:	08006b1d 	.word	0x08006b1d
 8006640:	08006b2a 	.word	0x08006b2a
 8006644:	08006b58 	.word	0x08006b58

08006648 <_close_r>:
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	2300      	movs	r3, #0
 800664c:	4d05      	ldr	r5, [pc, #20]	; (8006664 <_close_r+0x1c>)
 800664e:	4604      	mov	r4, r0
 8006650:	4608      	mov	r0, r1
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	f7fa ff00 	bl	8001458 <_close>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	d102      	bne.n	8006662 <_close_r+0x1a>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	b103      	cbz	r3, 8006662 <_close_r+0x1a>
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	200002dc 	.word	0x200002dc

08006668 <fiprintf>:
 8006668:	b40e      	push	{r1, r2, r3}
 800666a:	b503      	push	{r0, r1, lr}
 800666c:	4601      	mov	r1, r0
 800666e:	ab03      	add	r3, sp, #12
 8006670:	4805      	ldr	r0, [pc, #20]	; (8006688 <fiprintf+0x20>)
 8006672:	f853 2b04 	ldr.w	r2, [r3], #4
 8006676:	6800      	ldr	r0, [r0, #0]
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	f7ff fe31 	bl	80062e0 <_vfiprintf_r>
 800667e:	b002      	add	sp, #8
 8006680:	f85d eb04 	ldr.w	lr, [sp], #4
 8006684:	b003      	add	sp, #12
 8006686:	4770      	bx	lr
 8006688:	20000010 	.word	0x20000010

0800668c <_fstat_r>:
 800668c:	b538      	push	{r3, r4, r5, lr}
 800668e:	2300      	movs	r3, #0
 8006690:	4d06      	ldr	r5, [pc, #24]	; (80066ac <_fstat_r+0x20>)
 8006692:	4604      	mov	r4, r0
 8006694:	4608      	mov	r0, r1
 8006696:	4611      	mov	r1, r2
 8006698:	602b      	str	r3, [r5, #0]
 800669a:	f7fa fee8 	bl	800146e <_fstat>
 800669e:	1c43      	adds	r3, r0, #1
 80066a0:	d102      	bne.n	80066a8 <_fstat_r+0x1c>
 80066a2:	682b      	ldr	r3, [r5, #0]
 80066a4:	b103      	cbz	r3, 80066a8 <_fstat_r+0x1c>
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	bd38      	pop	{r3, r4, r5, pc}
 80066aa:	bf00      	nop
 80066ac:	200002dc 	.word	0x200002dc

080066b0 <_isatty_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	2300      	movs	r3, #0
 80066b4:	4d05      	ldr	r5, [pc, #20]	; (80066cc <_isatty_r+0x1c>)
 80066b6:	4604      	mov	r4, r0
 80066b8:	4608      	mov	r0, r1
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	f7fa fee6 	bl	800148c <_isatty>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d102      	bne.n	80066ca <_isatty_r+0x1a>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	b103      	cbz	r3, 80066ca <_isatty_r+0x1a>
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	200002dc 	.word	0x200002dc

080066d0 <_lseek_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	4611      	mov	r1, r2
 80066d8:	2200      	movs	r2, #0
 80066da:	4d05      	ldr	r5, [pc, #20]	; (80066f0 <_lseek_r+0x20>)
 80066dc:	602a      	str	r2, [r5, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	f7fa fede 	bl	80014a0 <_lseek>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_lseek_r+0x1e>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_lseek_r+0x1e>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	200002dc 	.word	0x200002dc

080066f4 <__ascii_mbtowc>:
 80066f4:	b082      	sub	sp, #8
 80066f6:	b901      	cbnz	r1, 80066fa <__ascii_mbtowc+0x6>
 80066f8:	a901      	add	r1, sp, #4
 80066fa:	b142      	cbz	r2, 800670e <__ascii_mbtowc+0x1a>
 80066fc:	b14b      	cbz	r3, 8006712 <__ascii_mbtowc+0x1e>
 80066fe:	7813      	ldrb	r3, [r2, #0]
 8006700:	600b      	str	r3, [r1, #0]
 8006702:	7812      	ldrb	r2, [r2, #0]
 8006704:	1e10      	subs	r0, r2, #0
 8006706:	bf18      	it	ne
 8006708:	2001      	movne	r0, #1
 800670a:	b002      	add	sp, #8
 800670c:	4770      	bx	lr
 800670e:	4610      	mov	r0, r2
 8006710:	e7fb      	b.n	800670a <__ascii_mbtowc+0x16>
 8006712:	f06f 0001 	mvn.w	r0, #1
 8006716:	e7f8      	b.n	800670a <__ascii_mbtowc+0x16>

08006718 <__malloc_lock>:
 8006718:	4801      	ldr	r0, [pc, #4]	; (8006720 <__malloc_lock+0x8>)
 800671a:	f7ff b8f8 	b.w	800590e <__retarget_lock_acquire_recursive>
 800671e:	bf00      	nop
 8006720:	200002d4 	.word	0x200002d4

08006724 <__malloc_unlock>:
 8006724:	4801      	ldr	r0, [pc, #4]	; (800672c <__malloc_unlock+0x8>)
 8006726:	f7ff b8f3 	b.w	8005910 <__retarget_lock_release_recursive>
 800672a:	bf00      	nop
 800672c:	200002d4 	.word	0x200002d4

08006730 <_read_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	4611      	mov	r1, r2
 8006738:	2200      	movs	r2, #0
 800673a:	4d05      	ldr	r5, [pc, #20]	; (8006750 <_read_r+0x20>)
 800673c:	602a      	str	r2, [r5, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	f7fa fe51 	bl	80013e6 <_read>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d102      	bne.n	800674e <_read_r+0x1e>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	b103      	cbz	r3, 800674e <_read_r+0x1e>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	200002dc 	.word	0x200002dc

08006754 <__ascii_wctomb>:
 8006754:	4603      	mov	r3, r0
 8006756:	4608      	mov	r0, r1
 8006758:	b141      	cbz	r1, 800676c <__ascii_wctomb+0x18>
 800675a:	2aff      	cmp	r2, #255	; 0xff
 800675c:	d904      	bls.n	8006768 <__ascii_wctomb+0x14>
 800675e:	228a      	movs	r2, #138	; 0x8a
 8006760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	4770      	bx	lr
 8006768:	2001      	movs	r0, #1
 800676a:	700a      	strb	r2, [r1, #0]
 800676c:	4770      	bx	lr

0800676e <abort>:
 800676e:	2006      	movs	r0, #6
 8006770:	b508      	push	{r3, lr}
 8006772:	f000 f82b 	bl	80067cc <raise>
 8006776:	2001      	movs	r0, #1
 8006778:	f7fa fe2b 	bl	80013d2 <_exit>

0800677c <_raise_r>:
 800677c:	291f      	cmp	r1, #31
 800677e:	b538      	push	{r3, r4, r5, lr}
 8006780:	4604      	mov	r4, r0
 8006782:	460d      	mov	r5, r1
 8006784:	d904      	bls.n	8006790 <_raise_r+0x14>
 8006786:	2316      	movs	r3, #22
 8006788:	6003      	str	r3, [r0, #0]
 800678a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006792:	b112      	cbz	r2, 800679a <_raise_r+0x1e>
 8006794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006798:	b94b      	cbnz	r3, 80067ae <_raise_r+0x32>
 800679a:	4620      	mov	r0, r4
 800679c:	f000 f830 	bl	8006800 <_getpid_r>
 80067a0:	462a      	mov	r2, r5
 80067a2:	4601      	mov	r1, r0
 80067a4:	4620      	mov	r0, r4
 80067a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067aa:	f000 b817 	b.w	80067dc <_kill_r>
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d00a      	beq.n	80067c8 <_raise_r+0x4c>
 80067b2:	1c59      	adds	r1, r3, #1
 80067b4:	d103      	bne.n	80067be <_raise_r+0x42>
 80067b6:	2316      	movs	r3, #22
 80067b8:	6003      	str	r3, [r0, #0]
 80067ba:	2001      	movs	r0, #1
 80067bc:	e7e7      	b.n	800678e <_raise_r+0x12>
 80067be:	2400      	movs	r4, #0
 80067c0:	4628      	mov	r0, r5
 80067c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80067c6:	4798      	blx	r3
 80067c8:	2000      	movs	r0, #0
 80067ca:	e7e0      	b.n	800678e <_raise_r+0x12>

080067cc <raise>:
 80067cc:	4b02      	ldr	r3, [pc, #8]	; (80067d8 <raise+0xc>)
 80067ce:	4601      	mov	r1, r0
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	f7ff bfd3 	b.w	800677c <_raise_r>
 80067d6:	bf00      	nop
 80067d8:	20000010 	.word	0x20000010

080067dc <_kill_r>:
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	2300      	movs	r3, #0
 80067e0:	4d06      	ldr	r5, [pc, #24]	; (80067fc <_kill_r+0x20>)
 80067e2:	4604      	mov	r4, r0
 80067e4:	4608      	mov	r0, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	602b      	str	r3, [r5, #0]
 80067ea:	f7fa fde2 	bl	80013b2 <_kill>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	d102      	bne.n	80067f8 <_kill_r+0x1c>
 80067f2:	682b      	ldr	r3, [r5, #0]
 80067f4:	b103      	cbz	r3, 80067f8 <_kill_r+0x1c>
 80067f6:	6023      	str	r3, [r4, #0]
 80067f8:	bd38      	pop	{r3, r4, r5, pc}
 80067fa:	bf00      	nop
 80067fc:	200002dc 	.word	0x200002dc

08006800 <_getpid_r>:
 8006800:	f7fa bdd0 	b.w	80013a4 <_getpid>

08006804 <_init>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	bf00      	nop
 8006808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680a:	bc08      	pop	{r3}
 800680c:	469e      	mov	lr, r3
 800680e:	4770      	bx	lr

08006810 <_fini>:
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	bf00      	nop
 8006814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006816:	bc08      	pop	{r3}
 8006818:	469e      	mov	lr, r3
 800681a:	4770      	bx	lr
