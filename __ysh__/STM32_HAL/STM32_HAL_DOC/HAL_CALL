/*******************************************************************************
                             STM32HAL 中断处理机制
*******************************************************************************/
//之前使用标准外设库开发时，中断程序（函数）由我们自己实现。
//而HAL库的中断处理函数是按照HAL处理机制来实现，如USART1，
//统一由HAL_UART_IRQHandler来进行处理, 也就是说，HAL已经
//帮我们把中断处理函数写好了，我们只需要调用相应函数来编写应用程序就行了。
void USART1_IRQHandler(void)
{
        //USER CODE BEGIN USART1_IRQn 0
        //......
        //USER CODE END   USART1_IRQn 0
        HAL_UART_IRQHandler(&huart1);
        //USER CODE BEGIN USART1_IRQn 1
        //......
        //USER CODE END   USART1_IRQn 1
}



//回调函数实现原理
//在HAL库中存在大量类似HAL_XXX_XXXCallback这样的函数，这些都是回调函数。
_______________________________________________________________
回调函数就是一个通过函数指针调用的函数。 如果你把函数的指针（地址）作为参数传递
给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。
回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由
另外的一方调用的，用于对该事件或条件进行响应。
HAL库中断处理使用了较多的回调函数，还是拿UART接收中断来举例说明。
_______________________________________________________________
//初始化配置好UART中断接收，如果有中断请求，就会执行回调函数HAL_UART_RxCpltCallback。
//看上面回调函数的定义，通过特定条件调用『回调函数』，这里触发的条件就是中断。
