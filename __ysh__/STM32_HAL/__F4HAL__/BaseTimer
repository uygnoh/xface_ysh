/*******************************************************************************
        => STM32F4x__定时器__结构体
*******************************************************************************/
typedef struct {
        uint32_t Prescaler;             //定时器预分频设置
        uint32_t ConuterMode;           //定时器计数方式
        uint32_t Period;                //定时器周期
        uint32_t ClockDivision;         //时钟分频
        uint32_t RepetitionCounter;     //重复计数器
        uint32_t AutoReloadPreload;     //ARPE：自动重装载预装载允许位
} TIM_Base_InitTypeDef;
//_________________________________________________________________________
Prescaler       //它设定（TIMx_PSC寄存器）的值，可设置范围（0~65535）
                //基本实现1至65536分频（实际分频系数 = TIMx_PSC+1）
CounterMode     //定时器计数方式，基本定时器只能向上计数
Period          //它设定（TIMx_ARR寄存器）的值，可设置范围（0~65535）
                //假设： 定时器预分频器后的时钟频率为（1MHz），我们设置
                //Period的值 = 999； 1MHz / (999+1) = 1KHz； 即为1ms的定时周期。
ClockDivision   //时钟分频，设置定时器时钟CK_INT频率与数字滤波器采样时钟频率分频比，
                //基本定时器没有这个功能。
RepetitionCounter//重复计数器，利用它可以轻松控制输出PWM的个数。
//_________________________________________________________________________


typedef struct {
        TIM_TypeDef                     *Instance;      //定时器基地址
        TIM_Base_InitTypeDef            Init;           //定时器基本结构体
        HAL_TIM_ActiveChannel           Channel;        //通道选择
        DMA_HandleTypeDef               *hdma[7];       //DMA句柄结构体指针
        HAL_LockTypeDef                 Lock;           //对象资源锁
        __IO HAL_TIM_StateTypedef       State;          //定时器工作状态
} TIM_HandleTypeDef;



/*******************************************************************************
        => STM32F4x__定时器__主程序
*******************************************************************************/
#define BASIC_TIMx                      TIM6
#define BASIC_TIM_RCC_CLK_ENABLE()      __HAL_RCC_TIM6_CLK_ENABLE()
#define BASIC_TIM_RCC_CLK_DISABLE()     __HAL_RCC_TIM6_CLK_DISABLE()
#define BASIC_TIM_IRQ()                 TIM6_DAC_IRQn
#define BASIC_TIM_INT_FUN()             TIM6_DAC_IRQHandler
#define BASIC_TIMx_PRESCALER            83      //定时器预分频值
#define BASIC_TIMx_PERIOD               999     //定时器的中断频率为（1MHz/1000=1KHz）


//全局结构体变量
//_________________________________________________________
TIM_HandleTypeDef htimx;
uint16_t timer_count = 0;


//基本定时器__6__初始化配置（CPU_Freq@84MHz）
//_________________________________________________________
void basic_timer6_init(void)
{
        TIM_MasterConfigTypeDef sMasterConfig;
        htimx.Instance           = TIM6;
        htimx.Init.Prescaler     = (84-1);
        htimx.Init.CounterMode   = TIM_COUNTERMODE_UP;
        htimx.Init.Period        = (1000-1);
        HAL_TIM_Base_Init(&htimx);
        
        //不使用主从触发输出功能
        sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
        sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
        HAL_TIMEx_MasterConfigSynchronization(&htimx, &sMasterConfig);
}

//基本定时器硬件初始化
//_________________________________________________________
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base)
{
        if (htim_base->Instance == TIM6) {
                //初始化TIM6时钟
                __HAL_RCC_TIM6_CLK_ENABLE();
                //基本定时器外部中断配置
                HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
                HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
        }
}

//设置系统时钟为（CPU_Freq@84MHz）
//_________________________________________________________
int main(void)
{
        HAL_Init();                     //HAL初始化
        SystemClock_Config();           //配置系统时钟
        basic_timer6_init();            //基本定时器初始化（1ms中断一次）
        HAL_TIM_Base_Start_IT(&htimx);  //在中断模式下启动定时器
        while (1) {
                if (timer_count == 1000) {
                        timer_count = 0;
                        LED_01 = ~LED_01;
                }
        }
}


//定时器6和DAC共用中断向量表
//_________________________________________________________
void TIM6_DAC_IRQHandler(void)
{
        HAL_TIM_IRQHandler(&htimx);
}


//非阻塞模式下定时器的回调函数
//_________________________________________________________
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
        timer_count++;
}

