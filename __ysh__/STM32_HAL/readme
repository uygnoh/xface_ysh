/*******************************************************************************
                                 Cortex-M 内核层
*******************************************************************************/
| //这四个文件用于兼容不同的编译器，并为core_cm7.h文件提供一些编译符号和汇编级的内核接口
| //STM32Cube_FW_H7_V1.3.0/Drivers/CMSIS/Include 
|_________________________________________________________________________|
|               cmsis_armcc.h                             |
|               cmsis_armclang.h                          |
|               cmsis_compiler.h                          |
|               cmsis_gcc.h                               |
|_________________________________________________________|
|
|
| //它对Cortex-M7的内核硬件进行了简单的封装，并向上级文件提供了一些简单的接口
| //STM32Cube_FW_H7_V1.3.0/Drivers/CMSIS/Include 
|_________________________________________________________________________|
|               core_cm7.h                                |
|_________________________________________________________|



/*******************************************************************************
                            STM32H7xx 设备硬件层
*******************************************************************************/
| //在Cortex-M7内核之上的是STM32H7xx的设备硬件，对应于文件stm32h7xx.h
| //STM32Cube_FW_H7_V1.3.0/Drivers/CMSIS/Device/ST/STM32H7xx/Include
|_________________________________________________________________________|
|               stm32h7xx.h                               |
|_________________________________________________________|



/*******************************************************************************
                             STM32_HAL 应用层
*******************************************************************************/
| //STM32Cube_FW_H7_V1.3.0/Drivers/CMSIS/Device/ST/STM32H7xx/Source/Templates/arm 
|_________________________________________________________________________|
|               startup_stm32h743xx.s                     |
|_________________________________________________________|
|
|
| //STM32Cube_FW_H7_V1.3.0/Drivers/CMSIS/Device/ST/STM32H7xx/Source/Templates
|_________________________________________________________________________|
|               system_stm32h7xx.c                        |
|               system_stm32h7xx.h                        |
|_________________________________________________________|
|
|
| //STM32Cube_FW_H7_V1.3.0/Drivers/STM32H7xx_HAL_Driver
|_________________________________________________________________________|
|               stm32h7xx_hal.c                           |
|               stm32h7xx_hal.h                           |
|               stm32h7xx_hal_cortex.c                    |
|               stm32h7xx_hal_cortex.h                    |
|               stm32h7xx_hal_legacy.h                    |
|               stm32h7xx_hal_def.h                       |
|_________________________________________________________|
//在HAL库中，由一些文件不属于STM32H7外设驱动部分，他们是
1 //stm32h7xx_hal.c/.h是HAL驱动文件，主要负责初始化HAL库的运行环境，向上层提供HAL管理的API
2 //stm32h7xx_hal_cortex.c/.h是Cortex内核的驱动文件，
  对Cortex-M7内核外设进行了封装，向上层提供了MPU、NVIC、SysTick的管理API。
3 //stm32_hal_legacy.h为提供给STM32CubeMX用于兼容老版
  本HAL库的文件，仅仅重新定义了一些宏和常量，使HAL库便于维护。
4 //stm32h7xx_hal_def.h定义了一些HAL的宏、枚举和结构。 
|
|
| //STM32Cube_FW_H7_V1.3.0/Drivers/STM32H7xx_HAL_Driver/Inc/
| //stm32h7xx_hal_gpio.c  => stm32h7xx_hal.h => stm32h7xx_hal_conf.h
| //stm32h7xx_hal_ppp.c->stm32h7xx.h->stm32h7xx_hal_conf.h->stm32h7xx_hal_ppp.h
|_________________________________________________________________________|
|               stm32h7xx_hal_conf.h                      |
|_________________________________________________________|
另外，有一个文件比较特殊，stm32h7xx_hal_conf_template.h，conf表示configuration，
是一个配置文件，template表示这是一个模板。 在实际使用中，这个文件要被复制到用户文件夹，并重
命名为stm32h7xx_hal_conf.h。 文件中定义了作为STM32H7外设编译开关的宏，时钟适应参数、系统参
数、以太网参数等。 其中最关键的是HAL_PPP_MODULE_ENABLED的一系列宏。stm32h7xx_hal_conf.h将
包含在HAL库所有外设驱动文件中，用于选择是否编译对应的文件。 



/*******************************************************************************
                             STM32CubeMX 工程主文件
*******************************************************************************/
| //USER_CODE
|_________________________________________________________________________|
|               main.c                                    |
|               main.h                                    |
|               stm32h7xx_it.c                            |
|               stm32h7xx_it.h                            |
|               stm32h7xx_hal_msp.c                       |
|               system_stm32h7xx.c                        |
|               system_stm32h7xx.h                        |
|               stm32h7xx_hal_conf.h                      |
|_________________________________________________________|
//ProjectManager ->Code Generator 
        Generate peripheral initialization as a pair of '.c/.h' files per peripheral
        Keep User Code when re-generating    //重新成代码时，保留代码（不删除你的代码）
//自己的代码在“BEGIN”和“END”之内
//【__weak】这个关键字，它有“弱”的意思
  这里的意思就是说：如果你自己写一个同样的函数（HAL_UART_MspDeInit），
  那么，这里带有weak关键字的函数就不起作用
//STM32CubeMX打开“SWD”功能
System Core ->SYS ->Debug: Serial Wire



/*******************************************************************************
                => ProjectManager ->Code Generator 
*******************************************************************************/
|_________________________________________________________|
|       //STM32Cube Firmware Library Package 固件包拷贝     |
|_________________________________________________________|
1. Copy all used libraries into the project folder 
//将所有使用过的库复制到项目文件夹中。 
//不管你用，还是没有用到，都拷贝到你工程目录下。这样一来，你工程下文件就比较多。

2. Copy only the necessary library files 
//只复制必要的库文件。
//这个相比上一个减少了很多文件。比如你没有使用CAN、SPI...等外设，就不会拷贝相关库文件到你工程下。

3. Add necessary library files as reference in the toolchain project configuration file 
//在工具链项目配置文件中添加必要的库文件作为参考。
//这里没有复制HAL库文件，只添加了必要文件（如main.c）。相比上面，没有Drivers相关文件。
|
|
|_________________________________________________________|
|       //Generated files 生成文件                         |
|_________________________________________________________|
//这里可以多选，每项可选择：是or不是。

1. Generate peripheral initialization as a pair of'.c/.h' files per peripheral 
//每个外设生成独立的'.c/.h'文件
//不勾：所有初始化代码都生成在main.c
//勾选：初始化代码生成在对应的外设文件。 如UART初始化代码生成在uart.c中。

2. Backup previously generated files when re-generating 
//在重新生成时备份以前生成的文件
//重新生成代码时，会在相关目录中生成一个Backup文件夹，将之前源文件拷贝到其中。

3.Keep User Code when re-generating 
//在重新生成时保留用户代码
//比如：我在main.c中添加了一段代码，重新生成时，会在main.c中保留你之前自己添加的这段代码。
//注意：前提是这段代码写在规定的位置。 也就是BEGIN和END之间。 否则同样会删除。

4. Delete previously generated files when not re-generated
//删除以前生成，但现在没有生成的文件 比如：之前生成了spi.c，
//现在重新配置没有spi.c，则会删除之前的spi.c文件。
|
|
|_________________________________________________________|
|       //HAL SettingsHAL 库设置                           |
|_________________________________________________________|
1. Set all free pins as analog (to optimize the power consumption) 
//将所有空闲引脚设置为模拟(以优化功耗),这个做低功耗产品时这个选项有必要勾选。

2. Enable Full Assert 
//使能所有断言, 也就是参数检查。
|
|
|_________________________________________________________|
|       //Template Settings 模板设置                       |
|_________________________________________________________|
1. Select a template to generate customized code 
//选择一个模板来生成自定义代码
//代码自定义生成模板可以参看最新（V28版）用户手册6.3节 Custom code generation内容。



/*******************************************************************************
                             STM32HAL 中断处理机制
*******************************************************************************/
//之前使用标准外设库开发时，中断程序（函数）由我们自己实现。
//而HAL库的中断处理函数是按照HAL处理机制来实现，如USART1，
//统一由HAL_UART_IRQHandler来进行处理, 也就是说，HAL已经
//帮我们把中断处理函数写好了，我们只需要调用相应函数来编写应用程序就行了。
void USART1_IRQHandler(void)
{
        //USER CODE BEGIN USART1_IRQn 0
        //......
        //USER CODE END   USART1_IRQn 0
        HAL_UART_IRQHandler(&huart1);
        //USER CODE BEGIN USART1_IRQn 1
        //......
        //USER CODE END   USART1_IRQn 1
}



//回调函数实现原理
//在HAL库中存在大量类似HAL_XXX_XXXCallback这样的函数，这些都是回调函数。
_______________________________________________________________
回调函数就是一个通过函数指针调用的函数。 如果你把函数的指针（地址）作为参数传递
给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。
回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由
另外的一方调用的，用于对该事件或条件进行响应。
HAL库中断处理使用了较多的回调函数，还是拿UART接收中断来举例说明。
_______________________________________________________________
//初始化配置好UART中断接收，如果有中断请求，就会执行回调函数HAL_UART_RxCpltCallback。
//看上面回调函数的定义，通过特定条件调用『回调函数』，这里触发的条件就是中断。
