/* Architecture specifics. */
#define portSTACK_GROWTH			( -1 )
#define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
#define portBYTE_ALIGNMENT			8



/* Scheduler utilities. */
#define portYIELD()                                                                     \
{                                                                                       \
        /* Set a PendSV to request a context switch. */                                 \
        portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;                                 \
                                                                                        \
        /* Barriers are normally not required but do ensure the code is completely      \
        within the specified behaviour for the architecture. */	                        \
        __asm volatile( "dsb" );                                                        \
        __asm volatile( "isb" );                                                        \
}
#define portNVIC_INT_CTRL_REG           ( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
#define portNVIC_PENDSVSET_BIT          ( 1UL << 28UL )
#define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
#define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )



__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
{
        uint8_t ucReturn;
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
        return ucReturn;
}
/* Store/clear the ready priorities in a bit map. */
#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )      \
        ( uxReadyPriorities ) |= ( 1UL << ( uxPriority ) )
#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )       \
        ( uxReadyPriorities ) &= ~( 1UL << ( uxPriority ) )
/*-----------------------------------------------------------*/
#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    \
        uxTopPriority = ( 31UL - ( uint32_t ) ucPortCountLeadingZeros( ( uxReadyPriorities ) ) )
        
        
        
#define portFORCE_INLINE inline __attribute__(( always_inline))
//关中断
//向BASEPRI中写入configMAX_SYSCALL_INTERRUPT_PRIORITY
//表明中断优先级低于configMAX_SYSCALL_INTERRUPT_PRIORITY的中断会被屏蔽
portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

        __asm volatile (
        "       mov %0, %1              \n"     \
        "       msr basepri, %0	        \n"     \
        "       isb                     \n"     \
        "       dsb                     \n"     \
        :"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
}

//开中断
//向BASEPRI寄存器中写入（0）
/*-----------------------------------------------------------*/
portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
        __asm volatile (
        "       msr basepri, %0	" :: "r" ( ulNewMaskValue )
        );
}

//临界段代码   
/*-----------------------------------------------------------*/
portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile (
        "       mrs %0, basepri         \n"     \
        "       mov %1, %2              \n"     \
        "       msr basepri, %1         \n"     \
        "       isb                     \n"     \
        "       dsb                     \n"     \
        :"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );

        /* This return will not be reached but is necessary to prevent compiler
        warnings. */
        return ulOriginalBASEPRI;
}
        
        
        

