/*******************************************************************************
        => ThreadX移植
*******************************************************************************/
common/src                              //文件夹下所有源文件
common/inc                              //文件夹下所有头文件
ports/cortex_m4/gnu/src                 //文件夹下所有源文件
ports/cortex_m4/gnu/inc                 //文件夹下的所有头文件
ports/cortex_m4/gnu/example_build       //文件夹下的tx_initialize_low_level.S文件


//threadx 系统中会用到这两个中断服务函数，所以需要屏蔽掉 
//stm32l4xx_it.c 文件中工程自带的这两个中断服务函数。
 multiple definition of `SysTick_Handler'
 multiple definition of `PendSV_Handler'
 
 
//中断向量表未定义报错
//将 tx_initialize_low_level.S 文件中的 _vectors 换为自己的中断向量表，例如本例中 
//startup_stm32l475vetx.s 启动文件中定义了中断向量表为 g_pfnVectors，将其替换即可。
threadx/ports/cortex_m4/gnu/example_build/tx_initialize_low_level.S:114: 
undefined reference to `_vectors'


//__RAM_segment_used_end__ 未定义报错
undefined reference to `__RAM_segment_used_end__'
//需要在链接脚本中指定未使用的 RAM 地址，所以在链接脚本栈中栈结束的地方指定为 RAM 未使用的地址
._user_heap_stack :
{
    . = ALIGN(8);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(8);
    __RAM_segment_used_end__ = .;
} >RAM


//启动操作系统内核
main.c 文件中包含 threadx 系统头文件 tx_api.h ，
并在 while(1) 之前调用 tx_kernel_enter() 函数，此时会报错
undefined reference to `tx_application_define'
//所以需要自己定义 tx_application_define 这个函数，并在这
//个函数中启动一个线程来进行 LED 的闪烁，示例代码如下：
TX_THREA                        demo_thread;
#define DEMO_STACK_SIZE         1024
static uint8_t thread_stack[DEMO_STACK_SIZE];

void demo_thread_entry(ULONG thread_input)
{
        /* This thread simply sits in while-forever-sleep loop.  */
        while (1) {
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
                tx_thread_sleep(1000);
                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
                tx_thread_sleep(1000);
        }
}
void tx_application_define(void *first_unused_memory)
{
        /* Create the main thread.  */
        tx_thread_create(
                &demo_thread,
                 "demo thread",
                 demo_thread_entry,
                 0,
                 thread_stack,
                 DEMO_STACK_SIZE,
                 1,
                 1,
                 TX_NO_TIME_SLICE,
                 TX_AUTO_START  );
}




