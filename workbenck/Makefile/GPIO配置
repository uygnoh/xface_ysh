/*******************************************************************************
        => STM32F10X__通用输入输出端口有两个寄存器，分别是（GPIOx_CRL, GPIOx_CRH）
*******************************************************************************/
//GPIOx_CRL（低位寄存器） -> 配置GPIO引脚的第（PIN0 ~ PIN7 ）
//GPIOx_CRH（高位寄存器） -> 配置GPIO引脚的第（PIN8 ~ PIN15）
输入模式(MODE[1:0] = 00)
输出模式(MODE[1:0] > 00)
        00  //输入模式(复位后的状态)
        01  //输出模式,最大速度（10MHz）
        10  //输出模式,最大速度（2MHz）
        11  //输出模式,最大速度（50MHz）
！！！注意：下拉输入和上拉输入是通过端口输出寄存器 GPIOxODR 来区分
//______________________________________________________________________________
|   CNF1   CNF0   MODE1   MODE0   |             //PxODR寄存器状态 
|    8      4      2       1      |  
|_________________________________|
|    0      0      0       0      |  x          //模拟输入      
|    0      1      0       0      |  x          //浮空输入
|    1      0      0       0      |  0          //下拉输入 *Px_ODR
|    1      0      0       0      |  1          //上拉输入 *Px_ODR
|    0      0      01-10-11       |  x          //通用推完输出         
|    0      1      01-10-11       |  x          //通用开漏输出
|    1      0      01-10-11       |  x          //推挽式复用功能
|    1      1      01-10-11       |  x          //开漏式复用功能
//________________________________|_____________________________________________
//      => STM32F10X_GPIO_配置参数
//______________________________________________________________________________
  CNF1    CNF0    MODE1    MODE0          CODE    功能描述
   0       0       0        0             (0)   //模拟输入
   0       1       0        0             (4)   //浮空输入(复位后的状态) 
   1       0       0        0             (8)   //下拉输入(PxODR = 0)
   1       0       0        0             (8)   //上拉输入(PxODR = 1)
   1       1       0        0             (C)   //保留

   0       0       0        1             (1)   //推挽输出(10MHz)
   0       0       1        0             (2)   //推挽输出(02MHz)
   0       0       1        1             (3)   //推挽输出(50MHz)

   0       1       0        1             (5)   //开漏输出(10MHz)
   0       1       1        0             (6)   //开漏输出(02MHz)
   0       1       1        1             (7)   //开漏输出(50MHz)

   1       0       0        1             (9)   //复用推挽输出(10MHz)
   1       0       1        0             (A)   //复用推挽输出(02MHz)
   1       0       1        1             (B)   //复用推挽输出(50MHz)

   1       1       0        1             (D)   //复用开漏输出(10MHz)
   1       1       1        0             (E)   //复用开漏输出(02MHz)
   1       1       1        1             (F)   //复用开漏输出(50MHz)
//______________________________________________________________________________




/*******************************************************************************
        => 在内部RAM中调式代码(Keile__SCT__)
*******************************************************************************/
LR_IROM1 0x200000000 0x00008000 {
        ER_IROM1 0x200000000 0x00008000 {
                *.o (RESET, +First)
                *.(InRoot$$Sections)
                .ANY (+RO)
        }
        RW_IRAM1 0x200000000 0x00008000 {
                .ANY (+RW +ZI)
        }
}



/*******************************************************************************
        => STM32CubeIDE_使用（ITM）调式
*******************************************************************************/
1) Debugger
        Serial Wire Viewer(SWV)
                [*]Enable
                Clock Settings
                Core Clock: [72] MHz
        Listen Port Number
                (61234)
2) 新建一个文件，复制常用的代码（common.h）
        #ifndef __COMMON_H__
        #define __COMMON_H__
        //Standard C Library Header
        #include "stdarg.h"
        #include "stdbool.h"
        #include "stdint.h"
        #include "stdio.h"
        #include "stdlib.h"
        #include "string.h"
        #include "time.h"
        #include "math.h"
        //ST Library Header
        #include "stm32f103xx_hal.h"
        uint32_t _write(int file, char *ptr, int len)
        {
                int DataIdx;
                for (DataIdx = 0; DataIdx < len; DataIdx++) {
                        ITM_SendChar(*ptr++);
                }
                return len;
        }
        #endif
3) 搜索（live） | (swv) 然后点（设置）

