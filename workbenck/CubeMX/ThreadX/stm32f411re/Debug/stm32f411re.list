
stm32f411re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e4c  08006e4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006e4c  08006e4c  00016e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e54  08006e54  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003134  20000010  08006e6c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003144  08006e6c  00023144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004aadc  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a380  00000000  00000000  0006ab1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00074ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  00076080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c738  00000000  00000000  00076d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d07  00000000  00000000  00093498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933bc  00000000  00000000  000b719f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a55b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000347c  00000000  00000000  0014a5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d60 	.word	0x08006d60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006d60 	.word	0x08006d60

080001e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001e0:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 80001e2:	481d      	ldr	r0, [pc, #116]	; (8000258 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address
 80001e4:	491d      	ldr	r1, [pc, #116]	; (800025c <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @
 80001e6:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
 80001ea:	6001      	str	r1, [r0, #0]
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001ec:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =_vectors                           @ Pickup address of vector table
 80001f0:	491b      	ldr	r1, [pc, #108]	; (8000260 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80001f2:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001f6:	481b      	ldr	r0, [pc, #108]	; (8000264 <__tx_DBGHandler+0x12>)
    LDR     r1, =_vectors                           @ Pickup address of vector table
 80001f8:	4919      	ldr	r1, [pc, #100]	; (8000260 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80001fa:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80001fc:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001fe:	481a      	ldr	r0, [pc, #104]	; (8000268 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000200:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000202:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 8000206:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000208:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800020c:	4917      	ldr	r1, [pc, #92]	; (800026c <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 800020e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000210:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 8000214:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 8000216:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 800021a:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 800021e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000222:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000226:	4912      	ldr	r1, [pc, #72]	; (8000270 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000228:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF

@
@    /* Return to caller.  */
@
    BX      lr
 800022c:	4770      	bx	lr

0800022e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800022e:	f7ff bffe 	b.w	800022e <__tx_BadHandler>

08000232 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000232:	f7ff bffe 	b.w	8000232 <__tx_HardfaultHandler>

08000236 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 8000236:	f7ff bffe 	b.w	8000236 <__tx_SVCallHandler>

0800023a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800023a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800023c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000240:	4770      	bx	lr

08000242 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000242:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000244:	f000 f89c 	bl	8000380 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000248:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800024c:	4770      	bx	lr

0800024e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 800024e:	f7ff bffe 	b.w	800024e <__tx_NMIHandler>

08000252 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000252:	f7ff bffe 	b.w	8000252 <__tx_DBGHandler>
 8000256:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000258:	20000090 	.word	0x20000090
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address
 800025c:	20003748 	.word	0x20003748
    LDR     r1, =_vectors                           @ Pickup address of vector table
 8000260:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000264:	20000140 	.word	0x20000140
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000268:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 800026c:	000f423f 	.word	0x000f423f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000270:	40ff0000 	.word	0x40ff0000
	...

08000280 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000280:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000284:	4a2a      	ldr	r2, [pc, #168]	; (8000330 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000286:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000288:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800028c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000290:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000294:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000296:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800029a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800029e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002a2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002a6:	f3bf 8f6f 	isb	sy

080002aa <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002aa:	e7fe      	b.n	80002aa <__tx_wait_here>

080002ac <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002ac:	4821      	ldr	r0, [pc, #132]	; (8000334 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ae:	4a22      	ldr	r2, [pc, #136]	; (8000338 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002b0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002b4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002b6:	b191      	cbz	r1, 80002de <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002b8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002ba:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002be:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002c2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002c6:	d101      	bne.n	80002cc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002c8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002cc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002cc:	4c1b      	ldr	r4, [pc, #108]	; (800033c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ce:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002d2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002d4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002d8:	b10d      	cbz	r5, 80002de <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002da:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002dc:	6023      	str	r3, [r4, #0]

080002de <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002de:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002e0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002e2:	b1b1      	cbz	r1, 8000312 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002e4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002e6:	b662      	cpsie	i

080002e8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002e8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ea:	4c14      	ldr	r4, [pc, #80]	; (800033c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002ec:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ee:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002f2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002f4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002f6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002fa:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002fe:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000302:	d101      	bne.n	8000308 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000304:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000308 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000308:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800030c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000310:	4770      	bx	lr

08000312 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000312:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000314:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000316:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000318:	b909      	cbnz	r1, 800031e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800031c:	e7f9      	b.n	8000312 <__tx_ts_wait>

0800031e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800031e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000322:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000326:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800032c:	e7dc      	b.n	80002e8 <__tx_ts_restore>

0800032e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800032e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000330:	20000144 	.word	0x20000144
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	20000148 	.word	0x20000148
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000338:	2000014c 	.word	0x2000014c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	200001e0 	.word	0x200001e0

08000340 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000340:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000342:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000346:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800034a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800034e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000350:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000354:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000356:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000358:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800035a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800035c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800035e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000360:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000362:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000364:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000366:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000368:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800036c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800036e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 8000372:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000374:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800037a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800037c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800037e:	4770      	bx	lr

08000380 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000380:	4922      	ldr	r1, [pc, #136]	; (800040c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000382:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000384:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000388:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800038a:	4b21      	ldr	r3, [pc, #132]	; (8000410 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800038c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800038e:	b13a      	cbz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000390:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000394:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000396:	b91a      	cbnz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800039a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800039e:	6018      	str	r0, [r3, #0]

080003a0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003a0:	491d      	ldr	r1, [pc, #116]	; (8000418 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003a2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003a4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003a6:	b122      	cbz	r2, 80003b2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003aa:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ae:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003b0:	e008      	b.n	80003c4 <__tx_timer_done>

080003b2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003b2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003b8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003ba:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003bc:	d101      	bne.n	80003c2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003c0:	6818      	ldr	r0, [r3, #0]

080003c2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003c2:	6008      	str	r0, [r1, #0]

080003c4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003c6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003c8:	b912      	cbnz	r2, 80003d0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ca:	4914      	ldr	r1, [pc, #80]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003cc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ce:	b1d0      	cbz	r0, 8000406 <__tx_timer_nothing_expired>

080003d0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003d0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003d4:	4911      	ldr	r1, [pc, #68]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003d6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003d8:	b108      	cbz	r0, 80003de <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003da:	f005 f80f 	bl	80053fc <_tx_timer_expiration_process>

080003de <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003e0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003e2:	b172      	cbz	r2, 8000402 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003e4:	f004 ff7c 	bl	80052e0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003e8:	480f      	ldr	r0, [pc, #60]	; (8000428 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003ea:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003ec:	b949      	cbnz	r1, 8000402 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ee:	480f      	ldr	r0, [pc, #60]	; (800042c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003f0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f2:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003f4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003f6:	480f      	ldr	r0, [pc, #60]	; (8000434 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003fc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003fe:	d000      	beq.n	8000402 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000400:	6002      	str	r2, [r0, #0]

08000402 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000402:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000406 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000406:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	200006bc 	.word	0x200006bc
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000410:	200001e0 	.word	0x200001e0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000414:	200006b8 	.word	0x200006b8
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	20000158 	.word	0x20000158
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800041c:	200001dc 	.word	0x200001dc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000420:	200001e8 	.word	0x200001e8
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000424:	200002a4 	.word	0x200002a4
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000428:	20000144 	.word	0x20000144
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800042c:	20000148 	.word	0x20000148
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000430:	2000014c 	.word	0x2000014c
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000434:	e000ed04 	.word	0xe000ed04

08000438 <__aeabi_uldivmod>:
 8000438:	b953      	cbnz	r3, 8000450 <__aeabi_uldivmod+0x18>
 800043a:	b94a      	cbnz	r2, 8000450 <__aeabi_uldivmod+0x18>
 800043c:	2900      	cmp	r1, #0
 800043e:	bf08      	it	eq
 8000440:	2800      	cmpeq	r0, #0
 8000442:	bf1c      	itt	ne
 8000444:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000448:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800044c:	f000 b96e 	b.w	800072c <__aeabi_idiv0>
 8000450:	f1ad 0c08 	sub.w	ip, sp, #8
 8000454:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000464:	b004      	add	sp, #16
 8000466:	4770      	bx	lr

08000468 <__udivmoddi4>:
 8000468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800046c:	9d08      	ldr	r5, [sp, #32]
 800046e:	4604      	mov	r4, r0
 8000470:	468c      	mov	ip, r1
 8000472:	2b00      	cmp	r3, #0
 8000474:	f040 8083 	bne.w	800057e <__udivmoddi4+0x116>
 8000478:	428a      	cmp	r2, r1
 800047a:	4617      	mov	r7, r2
 800047c:	d947      	bls.n	800050e <__udivmoddi4+0xa6>
 800047e:	fab2 f282 	clz	r2, r2
 8000482:	b142      	cbz	r2, 8000496 <__udivmoddi4+0x2e>
 8000484:	f1c2 0020 	rsb	r0, r2, #32
 8000488:	fa24 f000 	lsr.w	r0, r4, r0
 800048c:	4091      	lsls	r1, r2
 800048e:	4097      	lsls	r7, r2
 8000490:	ea40 0c01 	orr.w	ip, r0, r1
 8000494:	4094      	lsls	r4, r2
 8000496:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800049a:	0c23      	lsrs	r3, r4, #16
 800049c:	fbbc f6f8 	udiv	r6, ip, r8
 80004a0:	fa1f fe87 	uxth.w	lr, r7
 80004a4:	fb08 c116 	mls	r1, r8, r6, ip
 80004a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ac:	fb06 f10e 	mul.w	r1, r6, lr
 80004b0:	4299      	cmp	r1, r3
 80004b2:	d909      	bls.n	80004c8 <__udivmoddi4+0x60>
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80004ba:	f080 8119 	bcs.w	80006f0 <__udivmoddi4+0x288>
 80004be:	4299      	cmp	r1, r3
 80004c0:	f240 8116 	bls.w	80006f0 <__udivmoddi4+0x288>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	443b      	add	r3, r7
 80004c8:	1a5b      	subs	r3, r3, r1
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	45a6      	cmp	lr, r4
 80004de:	d909      	bls.n	80004f4 <__udivmoddi4+0x8c>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e6:	f080 8105 	bcs.w	80006f4 <__udivmoddi4+0x28c>
 80004ea:	45a6      	cmp	lr, r4
 80004ec:	f240 8102 	bls.w	80006f4 <__udivmoddi4+0x28c>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004f8:	eba4 040e 	sub.w	r4, r4, lr
 80004fc:	2600      	movs	r6, #0
 80004fe:	b11d      	cbz	r5, 8000508 <__udivmoddi4+0xa0>
 8000500:	40d4      	lsrs	r4, r2
 8000502:	2300      	movs	r3, #0
 8000504:	e9c5 4300 	strd	r4, r3, [r5]
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	b902      	cbnz	r2, 8000512 <__udivmoddi4+0xaa>
 8000510:	deff      	udf	#255	; 0xff
 8000512:	fab2 f282 	clz	r2, r2
 8000516:	2a00      	cmp	r2, #0
 8000518:	d150      	bne.n	80005bc <__udivmoddi4+0x154>
 800051a:	1bcb      	subs	r3, r1, r7
 800051c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	2601      	movs	r6, #1
 8000526:	fbb3 fcfe 	udiv	ip, r3, lr
 800052a:	0c21      	lsrs	r1, r4, #16
 800052c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000530:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000534:	fb08 f30c 	mul.w	r3, r8, ip
 8000538:	428b      	cmp	r3, r1
 800053a:	d907      	bls.n	800054c <__udivmoddi4+0xe4>
 800053c:	1879      	adds	r1, r7, r1
 800053e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000542:	d202      	bcs.n	800054a <__udivmoddi4+0xe2>
 8000544:	428b      	cmp	r3, r1
 8000546:	f200 80e9 	bhi.w	800071c <__udivmoddi4+0x2b4>
 800054a:	4684      	mov	ip, r0
 800054c:	1ac9      	subs	r1, r1, r3
 800054e:	b2a3      	uxth	r3, r4
 8000550:	fbb1 f0fe 	udiv	r0, r1, lr
 8000554:	fb0e 1110 	mls	r1, lr, r0, r1
 8000558:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800055c:	fb08 f800 	mul.w	r8, r8, r0
 8000560:	45a0      	cmp	r8, r4
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x10c>
 8000564:	193c      	adds	r4, r7, r4
 8000566:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800056a:	d202      	bcs.n	8000572 <__udivmoddi4+0x10a>
 800056c:	45a0      	cmp	r8, r4
 800056e:	f200 80d9 	bhi.w	8000724 <__udivmoddi4+0x2bc>
 8000572:	4618      	mov	r0, r3
 8000574:	eba4 0408 	sub.w	r4, r4, r8
 8000578:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800057c:	e7bf      	b.n	80004fe <__udivmoddi4+0x96>
 800057e:	428b      	cmp	r3, r1
 8000580:	d909      	bls.n	8000596 <__udivmoddi4+0x12e>
 8000582:	2d00      	cmp	r5, #0
 8000584:	f000 80b1 	beq.w	80006ea <__udivmoddi4+0x282>
 8000588:	2600      	movs	r6, #0
 800058a:	e9c5 0100 	strd	r0, r1, [r5]
 800058e:	4630      	mov	r0, r6
 8000590:	4631      	mov	r1, r6
 8000592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000596:	fab3 f683 	clz	r6, r3
 800059a:	2e00      	cmp	r6, #0
 800059c:	d14a      	bne.n	8000634 <__udivmoddi4+0x1cc>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d302      	bcc.n	80005a8 <__udivmoddi4+0x140>
 80005a2:	4282      	cmp	r2, r0
 80005a4:	f200 80b8 	bhi.w	8000718 <__udivmoddi4+0x2b0>
 80005a8:	1a84      	subs	r4, r0, r2
 80005aa:	eb61 0103 	sbc.w	r1, r1, r3
 80005ae:	2001      	movs	r0, #1
 80005b0:	468c      	mov	ip, r1
 80005b2:	2d00      	cmp	r5, #0
 80005b4:	d0a8      	beq.n	8000508 <__udivmoddi4+0xa0>
 80005b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80005ba:	e7a5      	b.n	8000508 <__udivmoddi4+0xa0>
 80005bc:	f1c2 0320 	rsb	r3, r2, #32
 80005c0:	fa20 f603 	lsr.w	r6, r0, r3
 80005c4:	4097      	lsls	r7, r2
 80005c6:	fa01 f002 	lsl.w	r0, r1, r2
 80005ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005ce:	40d9      	lsrs	r1, r3
 80005d0:	4330      	orrs	r0, r6
 80005d2:	0c03      	lsrs	r3, r0, #16
 80005d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80005d8:	fa1f f887 	uxth.w	r8, r7
 80005dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80005e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e4:	fb06 f108 	mul.w	r1, r6, r8
 80005e8:	4299      	cmp	r1, r3
 80005ea:	fa04 f402 	lsl.w	r4, r4, r2
 80005ee:	d909      	bls.n	8000604 <__udivmoddi4+0x19c>
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80005f6:	f080 808d 	bcs.w	8000714 <__udivmoddi4+0x2ac>
 80005fa:	4299      	cmp	r1, r3
 80005fc:	f240 808a 	bls.w	8000714 <__udivmoddi4+0x2ac>
 8000600:	3e02      	subs	r6, #2
 8000602:	443b      	add	r3, r7
 8000604:	1a5b      	subs	r3, r3, r1
 8000606:	b281      	uxth	r1, r0
 8000608:	fbb3 f0fe 	udiv	r0, r3, lr
 800060c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000610:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000614:	fb00 f308 	mul.w	r3, r0, r8
 8000618:	428b      	cmp	r3, r1
 800061a:	d907      	bls.n	800062c <__udivmoddi4+0x1c4>
 800061c:	1879      	adds	r1, r7, r1
 800061e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000622:	d273      	bcs.n	800070c <__udivmoddi4+0x2a4>
 8000624:	428b      	cmp	r3, r1
 8000626:	d971      	bls.n	800070c <__udivmoddi4+0x2a4>
 8000628:	3802      	subs	r0, #2
 800062a:	4439      	add	r1, r7
 800062c:	1acb      	subs	r3, r1, r3
 800062e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000632:	e778      	b.n	8000526 <__udivmoddi4+0xbe>
 8000634:	f1c6 0c20 	rsb	ip, r6, #32
 8000638:	fa03 f406 	lsl.w	r4, r3, r6
 800063c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000640:	431c      	orrs	r4, r3
 8000642:	fa20 f70c 	lsr.w	r7, r0, ip
 8000646:	fa01 f306 	lsl.w	r3, r1, r6
 800064a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800064e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000652:	431f      	orrs	r7, r3
 8000654:	0c3b      	lsrs	r3, r7, #16
 8000656:	fbb1 f9fe 	udiv	r9, r1, lr
 800065a:	fa1f f884 	uxth.w	r8, r4
 800065e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000662:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000666:	fb09 fa08 	mul.w	sl, r9, r8
 800066a:	458a      	cmp	sl, r1
 800066c:	fa02 f206 	lsl.w	r2, r2, r6
 8000670:	fa00 f306 	lsl.w	r3, r0, r6
 8000674:	d908      	bls.n	8000688 <__udivmoddi4+0x220>
 8000676:	1861      	adds	r1, r4, r1
 8000678:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800067c:	d248      	bcs.n	8000710 <__udivmoddi4+0x2a8>
 800067e:	458a      	cmp	sl, r1
 8000680:	d946      	bls.n	8000710 <__udivmoddi4+0x2a8>
 8000682:	f1a9 0902 	sub.w	r9, r9, #2
 8000686:	4421      	add	r1, r4
 8000688:	eba1 010a 	sub.w	r1, r1, sl
 800068c:	b2bf      	uxth	r7, r7
 800068e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000692:	fb0e 1110 	mls	r1, lr, r0, r1
 8000696:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800069a:	fb00 f808 	mul.w	r8, r0, r8
 800069e:	45b8      	cmp	r8, r7
 80006a0:	d907      	bls.n	80006b2 <__udivmoddi4+0x24a>
 80006a2:	19e7      	adds	r7, r4, r7
 80006a4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80006a8:	d22e      	bcs.n	8000708 <__udivmoddi4+0x2a0>
 80006aa:	45b8      	cmp	r8, r7
 80006ac:	d92c      	bls.n	8000708 <__udivmoddi4+0x2a0>
 80006ae:	3802      	subs	r0, #2
 80006b0:	4427      	add	r7, r4
 80006b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006b6:	eba7 0708 	sub.w	r7, r7, r8
 80006ba:	fba0 8902 	umull	r8, r9, r0, r2
 80006be:	454f      	cmp	r7, r9
 80006c0:	46c6      	mov	lr, r8
 80006c2:	4649      	mov	r1, r9
 80006c4:	d31a      	bcc.n	80006fc <__udivmoddi4+0x294>
 80006c6:	d017      	beq.n	80006f8 <__udivmoddi4+0x290>
 80006c8:	b15d      	cbz	r5, 80006e2 <__udivmoddi4+0x27a>
 80006ca:	ebb3 020e 	subs.w	r2, r3, lr
 80006ce:	eb67 0701 	sbc.w	r7, r7, r1
 80006d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006d6:	40f2      	lsrs	r2, r6
 80006d8:	ea4c 0202 	orr.w	r2, ip, r2
 80006dc:	40f7      	lsrs	r7, r6
 80006de:	e9c5 2700 	strd	r2, r7, [r5]
 80006e2:	2600      	movs	r6, #0
 80006e4:	4631      	mov	r1, r6
 80006e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ea:	462e      	mov	r6, r5
 80006ec:	4628      	mov	r0, r5
 80006ee:	e70b      	b.n	8000508 <__udivmoddi4+0xa0>
 80006f0:	4606      	mov	r6, r0
 80006f2:	e6e9      	b.n	80004c8 <__udivmoddi4+0x60>
 80006f4:	4618      	mov	r0, r3
 80006f6:	e6fd      	b.n	80004f4 <__udivmoddi4+0x8c>
 80006f8:	4543      	cmp	r3, r8
 80006fa:	d2e5      	bcs.n	80006c8 <__udivmoddi4+0x260>
 80006fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000700:	eb69 0104 	sbc.w	r1, r9, r4
 8000704:	3801      	subs	r0, #1
 8000706:	e7df      	b.n	80006c8 <__udivmoddi4+0x260>
 8000708:	4608      	mov	r0, r1
 800070a:	e7d2      	b.n	80006b2 <__udivmoddi4+0x24a>
 800070c:	4660      	mov	r0, ip
 800070e:	e78d      	b.n	800062c <__udivmoddi4+0x1c4>
 8000710:	4681      	mov	r9, r0
 8000712:	e7b9      	b.n	8000688 <__udivmoddi4+0x220>
 8000714:	4666      	mov	r6, ip
 8000716:	e775      	b.n	8000604 <__udivmoddi4+0x19c>
 8000718:	4630      	mov	r0, r6
 800071a:	e74a      	b.n	80005b2 <__udivmoddi4+0x14a>
 800071c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000720:	4439      	add	r1, r7
 8000722:	e713      	b.n	800054c <__udivmoddi4+0xe4>
 8000724:	3802      	subs	r0, #2
 8000726:	443c      	add	r4, r7
 8000728:	e724      	b.n	8000574 <__udivmoddi4+0x10c>
 800072a:	bf00      	nop

0800072c <__aeabi_idiv0>:
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b35      	ldr	r3, [pc, #212]	; (8000820 <MX_GPIO_Init+0xf0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a34      	ldr	r2, [pc, #208]	; (8000820 <MX_GPIO_Init+0xf0>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b32      	ldr	r3, [pc, #200]	; (8000820 <MX_GPIO_Init+0xf0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <MX_GPIO_Init+0xf0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a2d      	ldr	r2, [pc, #180]	; (8000820 <MX_GPIO_Init+0xf0>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <MX_GPIO_Init+0xf0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <MX_GPIO_Init+0xf0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a26      	ldr	r2, [pc, #152]	; (8000820 <MX_GPIO_Init+0xf0>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <MX_GPIO_Init+0xf0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_GPIO_Init+0xf0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a1f      	ldr	r2, [pc, #124]	; (8000820 <MX_GPIO_Init+0xf0>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_GPIO_Init+0xf0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	481a      	ldr	r0, [pc, #104]	; (8000824 <MX_GPIO_Init+0xf4>)
 80007bc:	f000 fc50 	bl	8001060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4814      	ldr	r0, [pc, #80]	; (8000828 <MX_GPIO_Init+0xf8>)
 80007d8:	f000 fabe 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007dc:	230c      	movs	r3, #12
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ec:	2307      	movs	r3, #7
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <MX_GPIO_Init+0xf4>)
 80007f8:	f000 faae 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007fc:	2320      	movs	r3, #32
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_GPIO_Init+0xf4>)
 8000814:	f000 faa0 	bl	8000d58 <HAL_GPIO_Init>

}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	; 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000
 8000828:	40020800 	.word	0x40020800

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 f96e 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f806 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f7ff ff7a 	bl	8000730 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

      /* Enter the ThreadX kernel. */
  main_user();
 800083c:	f005 ffbe 	bl	80067bc <main_user>

  while (1)
 8000840:	e7fe      	b.n	8000840 <main+0x14>
	...

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	; 0x50
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	2230      	movs	r2, #48	; 0x30
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f006 fa7c 	bl	8006d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <SystemClock_Config+0xc8>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a26      	ldr	r2, [pc, #152]	; (800090c <SystemClock_Config+0xc8>)
 8000872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <SystemClock_Config+0xc8>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <SystemClock_Config+0xcc>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a20      	ldr	r2, [pc, #128]	; (8000910 <SystemClock_Config+0xcc>)
 800088e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <SystemClock_Config+0xcc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a0:	2302      	movs	r3, #2
 80008a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a8:	2310      	movs	r3, #16
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ac:	2302      	movs	r3, #2
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b0:	2300      	movs	r3, #0
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008b4:	2308      	movs	r3, #8
 80008b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008b8:	2364      	movs	r3, #100	; 0x64
 80008ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008bc:	2302      	movs	r3, #2
 80008be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 fbe3 	bl	8001094 <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d4:	f000 f830 	bl	8000938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d8:	230f      	movs	r3, #15
 80008da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008dc:	2302      	movs	r3, #2
 80008de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	2103      	movs	r1, #3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fe45 	bl	8001584 <HAL_RCC_ClockConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000900:	f000 f81a 	bl	8000938 <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	3750      	adds	r7, #80	; 0x50
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000926:	f000 f915 	bl	8000b54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40000c00 	.word	0x40000c00

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000982:	2007      	movs	r0, #7
 8000984:	f000 f9b3 	bl	8000cee <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	; 0x30
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	2032      	movs	r0, #50	; 0x32
 80009aa:	f000 f9ab 	bl	8000d04 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80009ae:	2032      	movs	r0, #50	; 0x32
 80009b0:	f000 f9c4 	bl	8000d3c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <HAL_InitTick+0xa4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <HAL_InitTick+0xa4>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	6413      	str	r3, [r2, #64]	; 0x40
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_InitTick+0xa4>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d0:	f107 0210 	add.w	r2, r7, #16
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 ffba 	bl	8001954 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009e0:	f000 ffa4 	bl	800192c <HAL_RCC_GetPCLK1Freq>
 80009e4:	4603      	mov	r3, r0
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <HAL_InitTick+0xa8>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	0c9b      	lsrs	r3, r3, #18
 80009f4:	3b01      	subs	r3, #1
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_InitTick+0xac>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <HAL_InitTick+0xb0>)
 80009fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_InitTick+0xac>)
 8000a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a04:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_InitTick+0xac>)
 8000a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_InitTick+0xac>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_InitTick+0xac>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <HAL_InitTick+0xac>)
 8000a1a:	f000 ffcd 	bl	80019b8 <HAL_TIM_Base_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d104      	bne.n	8000a2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <HAL_InitTick+0xac>)
 8000a26:	f001 f821 	bl	8001a6c <HAL_TIM_Base_Start_IT>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3730      	adds	r7, #48	; 0x30
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	431bde83 	.word	0x431bde83
 8000a40:	2000002c 	.word	0x2000002c
 8000a44:	40000c00 	.word	0x40000c00

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <TIM5_IRQHandler+0x10>)
 8000a8a:	f001 f851 	bl	8001b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000002c 	.word	0x2000002c

08000a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SystemInit+0x20>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <SystemInit+0x20>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ac2:	490e      	ldr	r1, [pc, #56]	; (8000afc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad8:	4c0b      	ldr	r4, [pc, #44]	; (8000b08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ae6:	f7ff ffd7 	bl	8000a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aea:	f006 f90d 	bl	8006d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aee:	f7ff fe9d 	bl	800082c <main>
  bx  lr    
 8000af2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b00:	08006e5c 	.word	0x08006e5c
  ldr r2, =_sbss
 8000b04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b08:	20003144 	.word	0x20003144

08000b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <HAL_Init+0x40>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_Init+0x40>)
 8000b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x40>)
 8000b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f8d8 	bl	8000cee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff ff28 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fefe 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023c00 	.word	0x40023c00

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000074 	.word	0x20000074

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000074 	.word	0x20000074

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ff4c 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d16:	f7ff ff61 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	68b9      	ldr	r1, [r7, #8]
 8000d20:	6978      	ldr	r0, [r7, #20]
 8000d22:	f7ff ffb1 	bl	8000c88 <NVIC_EncodePriority>
 8000d26:	4602      	mov	r2, r0
 8000d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff80 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff54 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	e159      	b.n	8001028 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f040 8148 	bne.w	8001022 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d005      	beq.n	8000daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d130      	bne.n	8000e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	f003 0201 	and.w	r2, r3, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d017      	beq.n	8000e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d123      	bne.n	8000e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	69b9      	ldr	r1, [r7, #24]
 8000e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0203 	and.w	r2, r3, #3
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80a2 	beq.w	8001022 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b57      	ldr	r3, [pc, #348]	; (8001040 <HAL_GPIO_Init+0x2e8>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a56      	ldr	r2, [pc, #344]	; (8001040 <HAL_GPIO_Init+0x2e8>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b54      	ldr	r3, [pc, #336]	; (8001040 <HAL_GPIO_Init+0x2e8>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efa:	4a52      	ldr	r2, [pc, #328]	; (8001044 <HAL_GPIO_Init+0x2ec>)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a49      	ldr	r2, [pc, #292]	; (8001048 <HAL_GPIO_Init+0x2f0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d019      	beq.n	8000f5a <HAL_GPIO_Init+0x202>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a48      	ldr	r2, [pc, #288]	; (800104c <HAL_GPIO_Init+0x2f4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0x1fe>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a47      	ldr	r2, [pc, #284]	; (8001050 <HAL_GPIO_Init+0x2f8>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00d      	beq.n	8000f52 <HAL_GPIO_Init+0x1fa>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a46      	ldr	r2, [pc, #280]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d007      	beq.n	8000f4e <HAL_GPIO_Init+0x1f6>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a45      	ldr	r2, [pc, #276]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_GPIO_Init+0x1f2>
 8000f46:	2304      	movs	r3, #4
 8000f48:	e008      	b.n	8000f5c <HAL_GPIO_Init+0x204>
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x204>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x204>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x204>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x204>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	f002 0203 	and.w	r2, r2, #3
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f6c:	4935      	ldr	r1, [pc, #212]	; (8001044 <HAL_GPIO_Init+0x2ec>)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7a:	4b38      	ldr	r3, [pc, #224]	; (800105c <HAL_GPIO_Init+0x304>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9e:	4a2f      	ldr	r2, [pc, #188]	; (800105c <HAL_GPIO_Init+0x304>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fa4:	4b2d      	ldr	r3, [pc, #180]	; (800105c <HAL_GPIO_Init+0x304>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc8:	4a24      	ldr	r2, [pc, #144]	; (800105c <HAL_GPIO_Init+0x304>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <HAL_GPIO_Init+0x304>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff2:	4a1a      	ldr	r2, [pc, #104]	; (800105c <HAL_GPIO_Init+0x304>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_GPIO_Init+0x304>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800101c:	4a0f      	ldr	r2, [pc, #60]	; (800105c <HAL_GPIO_Init+0x304>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3301      	adds	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2b0f      	cmp	r3, #15
 800102c:	f67f aea2 	bls.w	8000d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40013800 	.word	0x40013800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020400 	.word	0x40020400
 8001050:	40020800 	.word	0x40020800
 8001054:	40020c00 	.word	0x40020c00
 8001058:	40021000 	.word	0x40021000
 800105c:	40013c00 	.word	0x40013c00

08001060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800107c:	e003      	b.n	8001086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800107e:	887b      	ldrh	r3, [r7, #2]
 8001080:	041a      	lsls	r2, r3, #16
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	619a      	str	r2, [r3, #24]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e264      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d075      	beq.n	800119e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010b2:	4ba3      	ldr	r3, [pc, #652]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d00c      	beq.n	80010d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010be:	4ba0      	ldr	r3, [pc, #640]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d112      	bne.n	80010f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ca:	4b9d      	ldr	r3, [pc, #628]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010d6:	d10b      	bne.n	80010f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d8:	4b99      	ldr	r3, [pc, #612]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d05b      	beq.n	800119c <HAL_RCC_OscConfig+0x108>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d157      	bne.n	800119c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e23f      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f8:	d106      	bne.n	8001108 <HAL_RCC_OscConfig+0x74>
 80010fa:	4b91      	ldr	r3, [pc, #580]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a90      	ldr	r2, [pc, #576]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e01d      	b.n	8001144 <HAL_RCC_OscConfig+0xb0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0x98>
 8001112:	4b8b      	ldr	r3, [pc, #556]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a8a      	ldr	r2, [pc, #552]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	4b88      	ldr	r3, [pc, #544]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a87      	ldr	r2, [pc, #540]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e00b      	b.n	8001144 <HAL_RCC_OscConfig+0xb0>
 800112c:	4b84      	ldr	r3, [pc, #528]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a83      	ldr	r2, [pc, #524]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b81      	ldr	r3, [pc, #516]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a80      	ldr	r2, [pc, #512]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 800113e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fd16 	bl	8000b7c <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fd12 	bl	8000b7c <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	; 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e204      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	4b76      	ldr	r3, [pc, #472]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0xc0>
 8001172:	e014      	b.n	800119e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fd02 	bl	8000b7c <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fcfe 	bl	8000b7c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	; 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e1f0      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	4b6c      	ldr	r3, [pc, #432]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0xe8>
 800119a:	e000      	b.n	800119e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d063      	beq.n	8001272 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011aa:	4b65      	ldr	r3, [pc, #404]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00b      	beq.n	80011ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b6:	4b62      	ldr	r3, [pc, #392]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d11c      	bne.n	80011fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c2:	4b5f      	ldr	r3, [pc, #380]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d116      	bne.n	80011fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	4b5c      	ldr	r3, [pc, #368]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <HAL_RCC_OscConfig+0x152>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d001      	beq.n	80011e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e1c4      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e6:	4b56      	ldr	r3, [pc, #344]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4952      	ldr	r1, [pc, #328]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	e03a      	b.n	8001272 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d020      	beq.n	8001246 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001204:	4b4f      	ldr	r3, [pc, #316]	; (8001344 <HAL_RCC_OscConfig+0x2b0>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120a:	f7ff fcb7 	bl	8000b7c <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff fcb3 	bl	8000b7c <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e1a5      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	4b46      	ldr	r3, [pc, #280]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001230:	4b43      	ldr	r3, [pc, #268]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4940      	ldr	r1, [pc, #256]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	4313      	orrs	r3, r2
 8001242:	600b      	str	r3, [r1, #0]
 8001244:	e015      	b.n	8001272 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <HAL_RCC_OscConfig+0x2b0>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fc96 	bl	8000b7c <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001254:	f7ff fc92 	bl	8000b7c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e184      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d030      	beq.n	80012e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d016      	beq.n	80012b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001286:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_RCC_OscConfig+0x2b4>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128c:	f7ff fc76 	bl	8000b7c <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001294:	f7ff fc72 	bl	8000b7c <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e164      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x200>
 80012b2:	e015      	b.n	80012e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_RCC_OscConfig+0x2b4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fc5f 	bl	8000b7c <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff fc5b 	bl	8000b7c <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e14d      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80012d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f0      	bne.n	80012c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80a0 	beq.w	800142e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10f      	bne.n	800131e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131a:	2301      	movs	r3, #1
 800131c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_RCC_OscConfig+0x2b8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d121      	bne.n	800136e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_RCC_OscConfig+0x2b8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_RCC_OscConfig+0x2b8>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001336:	f7ff fc21 	bl	8000b7c <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	e011      	b.n	8001362 <HAL_RCC_OscConfig+0x2ce>
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	42470000 	.word	0x42470000
 8001348:	42470e80 	.word	0x42470e80
 800134c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001350:	f7ff fc14 	bl	8000b7c <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e106      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001362:	4b85      	ldr	r3, [pc, #532]	; (8001578 <HAL_RCC_OscConfig+0x4e4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d106      	bne.n	8001384 <HAL_RCC_OscConfig+0x2f0>
 8001376:	4b81      	ldr	r3, [pc, #516]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 8001378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137a:	4a80      	ldr	r2, [pc, #512]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6713      	str	r3, [r2, #112]	; 0x70
 8001382:	e01c      	b.n	80013be <HAL_RCC_OscConfig+0x32a>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b05      	cmp	r3, #5
 800138a:	d10c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x312>
 800138c:	4b7b      	ldr	r3, [pc, #492]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001390:	4a7a      	ldr	r2, [pc, #488]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6713      	str	r3, [r2, #112]	; 0x70
 8001398:	4b78      	ldr	r3, [pc, #480]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 800139a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139c:	4a77      	ldr	r2, [pc, #476]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6713      	str	r3, [r2, #112]	; 0x70
 80013a4:	e00b      	b.n	80013be <HAL_RCC_OscConfig+0x32a>
 80013a6:	4b75      	ldr	r3, [pc, #468]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 80013a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013aa:	4a74      	ldr	r2, [pc, #464]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	6713      	str	r3, [r2, #112]	; 0x70
 80013b2:	4b72      	ldr	r3, [pc, #456]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b6:	4a71      	ldr	r2, [pc, #452]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 80013b8:	f023 0304 	bic.w	r3, r3, #4
 80013bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d015      	beq.n	80013f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c6:	f7ff fbd9 	bl	8000b7c <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013cc:	e00a      	b.n	80013e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ce:	f7ff fbd5 	bl	8000b7c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013dc:	4293      	cmp	r3, r2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e0c5      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e4:	4b65      	ldr	r3, [pc, #404]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0ee      	beq.n	80013ce <HAL_RCC_OscConfig+0x33a>
 80013f0:	e014      	b.n	800141c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fbc3 	bl	8000b7c <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f8:	e00a      	b.n	8001410 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff fbbf 	bl	8000b7c <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	f241 3288 	movw	r2, #5000	; 0x1388
 8001408:	4293      	cmp	r3, r2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e0af      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001410:	4b5a      	ldr	r3, [pc, #360]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ee      	bne.n	80013fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d105      	bne.n	800142e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001422:	4b56      	ldr	r3, [pc, #344]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a55      	ldr	r2, [pc, #340]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 8001428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 809b 	beq.w	800156e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001438:	4b50      	ldr	r3, [pc, #320]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b08      	cmp	r3, #8
 8001442:	d05c      	beq.n	80014fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d141      	bne.n	80014d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144c:	4b4c      	ldr	r3, [pc, #304]	; (8001580 <HAL_RCC_OscConfig+0x4ec>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fb93 	bl	8000b7c <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff fb8f 	bl	8000b7c <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e081      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146c:	4b43      	ldr	r3, [pc, #268]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f0      	bne.n	800145a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69da      	ldr	r2, [r3, #28]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	019b      	lsls	r3, r3, #6
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	3b01      	subs	r3, #1
 8001492:	041b      	lsls	r3, r3, #16
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	061b      	lsls	r3, r3, #24
 800149c:	4937      	ldr	r1, [pc, #220]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a2:	4b37      	ldr	r3, [pc, #220]	; (8001580 <HAL_RCC_OscConfig+0x4ec>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb68 	bl	8000b7c <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff fb64 	bl	8000b7c <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e056      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x41c>
 80014ce:	e04e      	b.n	800156e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <HAL_RCC_OscConfig+0x4ec>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d6:	f7ff fb51 	bl	8000b7c <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014de:	f7ff fb4d 	bl	8000b7c <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e03f      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f0      	bne.n	80014de <HAL_RCC_OscConfig+0x44a>
 80014fc:	e037      	b.n	800156e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e032      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_RCC_OscConfig+0x4e8>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d028      	beq.n	800156a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	d121      	bne.n	800156a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d11a      	bne.n	800156a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800153a:	4013      	ands	r3, r2
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001540:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001542:	4293      	cmp	r3, r2
 8001544:	d111      	bne.n	800156a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	085b      	lsrs	r3, r3, #1
 8001552:	3b01      	subs	r3, #1
 8001554:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d107      	bne.n	800156a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40007000 	.word	0x40007000
 800157c:	40023800 	.word	0x40023800
 8001580:	42470060 	.word	0x42470060

08001584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0cc      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b68      	ldr	r3, [pc, #416]	; (800173c <HAL_RCC_ClockConfig+0x1b8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d90c      	bls.n	80015c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b65      	ldr	r3, [pc, #404]	; (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b63      	ldr	r3, [pc, #396]	; (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0b8      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d020      	beq.n	800160e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d8:	4b59      	ldr	r3, [pc, #356]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	4a58      	ldr	r2, [pc, #352]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f0:	4b53      	ldr	r3, [pc, #332]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a52      	ldr	r2, [pc, #328]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fc:	4b50      	ldr	r3, [pc, #320]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	494d      	ldr	r1, [pc, #308]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	4313      	orrs	r3, r2
 800160c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d044      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	4b47      	ldr	r3, [pc, #284]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d119      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e07f      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d003      	beq.n	8001642 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163e:	2b03      	cmp	r3, #3
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001642:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e06f      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e067      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001662:	4b37      	ldr	r3, [pc, #220]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f023 0203 	bic.w	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4934      	ldr	r1, [pc, #208]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	4313      	orrs	r3, r2
 8001672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001674:	f7ff fa82 	bl	8000b7c <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	e00a      	b.n	8001692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7ff fa7e 	bl	8000b7c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e04f      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 020c 	and.w	r2, r3, #12
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d1eb      	bne.n	800167c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d20c      	bcs.n	80016cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e032      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4916      	ldr	r1, [pc, #88]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d009      	beq.n	800170a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	490e      	ldr	r1, [pc, #56]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800170a:	f000 f821 	bl	8001750 <HAL_RCC_GetSysClockFreq>
 800170e:	4602      	mov	r2, r0
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	490a      	ldr	r1, [pc, #40]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	5ccb      	ldrb	r3, [r1, r3]
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	4a09      	ldr	r2, [pc, #36]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f932 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023c00 	.word	0x40023c00
 8001740:	40023800 	.word	0x40023800
 8001744:	08006e34 	.word	0x08006e34
 8001748:	20000000 	.word	0x20000000
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001750:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	2300      	movs	r3, #0
 8001762:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001768:	4b67      	ldr	r3, [pc, #412]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d00d      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x40>
 8001774:	2b08      	cmp	r3, #8
 8001776:	f200 80bd 	bhi.w	80018f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x34>
 800177e:	2b04      	cmp	r3, #4
 8001780:	d003      	beq.n	800178a <HAL_RCC_GetSysClockFreq+0x3a>
 8001782:	e0b7      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001784:	4b61      	ldr	r3, [pc, #388]	; (800190c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001786:	60bb      	str	r3, [r7, #8]
       break;
 8001788:	e0b7      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800178a:	4b61      	ldr	r3, [pc, #388]	; (8001910 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800178c:	60bb      	str	r3, [r7, #8]
      break;
 800178e:	e0b4      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001790:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001798:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800179a:	4b5b      	ldr	r3, [pc, #364]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d04d      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a6:	4b58      	ldr	r3, [pc, #352]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	099b      	lsrs	r3, r3, #6
 80017ac:	461a      	mov	r2, r3
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017b6:	f04f 0100 	mov.w	r1, #0
 80017ba:	ea02 0800 	and.w	r8, r2, r0
 80017be:	ea03 0901 	and.w	r9, r3, r1
 80017c2:	4640      	mov	r0, r8
 80017c4:	4649      	mov	r1, r9
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	014b      	lsls	r3, r1, #5
 80017d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017d4:	0142      	lsls	r2, r0, #5
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	ebb0 0008 	subs.w	r0, r0, r8
 80017de:	eb61 0109 	sbc.w	r1, r1, r9
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	018b      	lsls	r3, r1, #6
 80017ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017f0:	0182      	lsls	r2, r0, #6
 80017f2:	1a12      	subs	r2, r2, r0
 80017f4:	eb63 0301 	sbc.w	r3, r3, r1
 80017f8:	f04f 0000 	mov.w	r0, #0
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	00d9      	lsls	r1, r3, #3
 8001802:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001806:	00d0      	lsls	r0, r2, #3
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	eb12 0208 	adds.w	r2, r2, r8
 8001810:	eb43 0309 	adc.w	r3, r3, r9
 8001814:	f04f 0000 	mov.w	r0, #0
 8001818:	f04f 0100 	mov.w	r1, #0
 800181c:	0259      	lsls	r1, r3, #9
 800181e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001822:	0250      	lsls	r0, r2, #9
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	461a      	mov	r2, r3
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	f7fe fe00 	bl	8000438 <__aeabi_uldivmod>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4613      	mov	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	e04a      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	099b      	lsrs	r3, r3, #6
 8001848:	461a      	mov	r2, r3
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	ea02 0400 	and.w	r4, r2, r0
 800185a:	ea03 0501 	and.w	r5, r3, r1
 800185e:	4620      	mov	r0, r4
 8001860:	4629      	mov	r1, r5
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	014b      	lsls	r3, r1, #5
 800186c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001870:	0142      	lsls	r2, r0, #5
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	1b00      	subs	r0, r0, r4
 8001878:	eb61 0105 	sbc.w	r1, r1, r5
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	018b      	lsls	r3, r1, #6
 8001886:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800188a:	0182      	lsls	r2, r0, #6
 800188c:	1a12      	subs	r2, r2, r0
 800188e:	eb63 0301 	sbc.w	r3, r3, r1
 8001892:	f04f 0000 	mov.w	r0, #0
 8001896:	f04f 0100 	mov.w	r1, #0
 800189a:	00d9      	lsls	r1, r3, #3
 800189c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018a0:	00d0      	lsls	r0, r2, #3
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	1912      	adds	r2, r2, r4
 80018a8:	eb45 0303 	adc.w	r3, r5, r3
 80018ac:	f04f 0000 	mov.w	r0, #0
 80018b0:	f04f 0100 	mov.w	r1, #0
 80018b4:	0299      	lsls	r1, r3, #10
 80018b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018ba:	0290      	lsls	r0, r2, #10
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	461a      	mov	r2, r3
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	f7fe fdb4 	bl	8000438 <__aeabi_uldivmod>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4613      	mov	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	0c1b      	lsrs	r3, r3, #16
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	3301      	adds	r3, #1
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f0:	60bb      	str	r3, [r7, #8]
      break;
 80018f2:	e002      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018f6:	60bb      	str	r3, [r7, #8]
      break;
 80018f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018fa:	68bb      	ldr	r3, [r7, #8]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	00f42400 	.word	0x00f42400
 8001910:	007a1200 	.word	0x007a1200

08001914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <HAL_RCC_GetHCLKFreq+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000000 	.word	0x20000000

0800192c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001930:	f7ff fff0 	bl	8001914 <HAL_RCC_GetHCLKFreq>
 8001934:	4602      	mov	r2, r0
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	0a9b      	lsrs	r3, r3, #10
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	4903      	ldr	r1, [pc, #12]	; (8001950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001942:	5ccb      	ldrb	r3, [r1, r3]
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001948:	4618      	mov	r0, r3
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	08006e44 	.word	0x08006e44

08001954 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	220f      	movs	r2, #15
 8001962:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <HAL_RCC_GetClockConfig+0x5c>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_GetClockConfig+0x5c>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	08db      	lsrs	r3, r3, #3
 800198e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <HAL_RCC_GetClockConfig+0x60>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0207 	and.w	r2, r3, #7
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	601a      	str	r2, [r3, #0]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40023c00 	.word	0x40023c00

080019b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e041      	b.n	8001a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f839 	bl	8001a56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3304      	adds	r3, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4610      	mov	r0, r2
 80019f8:	f000 f9ca 	bl	8001d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d001      	beq.n	8001a84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e044      	b.n	8001b0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <HAL_TIM_Base_Start_IT+0xb0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d018      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aae:	d013      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00e      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d009      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_TIM_Base_Start_IT+0xbc>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d004      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <HAL_TIM_Base_Start_IT+0xc0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d111      	bne.n	8001afc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d010      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0201 	orr.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afa:	e007      	b.n	8001b0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	40000400 	.word	0x40000400
 8001b24:	40000800 	.word	0x40000800
 8001b28:	40000c00 	.word	0x40000c00
 8001b2c:	40014000 	.word	0x40014000

08001b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d122      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d11b      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0202 	mvn.w	r2, #2
 8001b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f8ee 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
 8001b78:	e005      	b.n	8001b86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f8e0 	bl	8001d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f8f1 	bl	8001d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d122      	bne.n	8001be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d11b      	bne.n	8001be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0204 	mvn.w	r2, #4
 8001bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f8c4 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
 8001bcc:	e005      	b.n	8001bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f8b6 	bl	8001d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f8c7 	bl	8001d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d122      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d11b      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0208 	mvn.w	r2, #8
 8001c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2204      	movs	r2, #4
 8001c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f89a 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f88c 	bl	8001d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f89d 	bl	8001d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d122      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	d11b      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0210 	mvn.w	r2, #16
 8001c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f870 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f862 	bl	8001d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f873 	bl	8001d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d10e      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d107      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0201 	mvn.w	r2, #1
 8001cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fe30 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbe:	2b80      	cmp	r3, #128	; 0x80
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d107      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8e2 	bl	8001ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cea:	2b40      	cmp	r3, #64	; 0x40
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b40      	cmp	r3, #64	; 0x40
 8001cfa:	d107      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f838 	bl	8001d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	d10e      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d107      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0220 	mvn.w	r2, #32
 8001d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8ac 	bl	8001e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a34      	ldr	r2, [pc, #208]	; (8001e74 <TIM_Base_SetConfig+0xe4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00f      	beq.n	8001dc8 <TIM_Base_SetConfig+0x38>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dae:	d00b      	beq.n	8001dc8 <TIM_Base_SetConfig+0x38>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a31      	ldr	r2, [pc, #196]	; (8001e78 <TIM_Base_SetConfig+0xe8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d007      	beq.n	8001dc8 <TIM_Base_SetConfig+0x38>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a30      	ldr	r2, [pc, #192]	; (8001e7c <TIM_Base_SetConfig+0xec>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d003      	beq.n	8001dc8 <TIM_Base_SetConfig+0x38>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a2f      	ldr	r2, [pc, #188]	; (8001e80 <TIM_Base_SetConfig+0xf0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d108      	bne.n	8001dda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a25      	ldr	r2, [pc, #148]	; (8001e74 <TIM_Base_SetConfig+0xe4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01b      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de8:	d017      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <TIM_Base_SetConfig+0xe8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a21      	ldr	r2, [pc, #132]	; (8001e7c <TIM_Base_SetConfig+0xec>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00f      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a20      	ldr	r2, [pc, #128]	; (8001e80 <TIM_Base_SetConfig+0xf0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00b      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <TIM_Base_SetConfig+0xf4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <TIM_Base_SetConfig+0xf8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d003      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <TIM_Base_SetConfig+0xfc>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d108      	bne.n	8001e2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a08      	ldr	r2, [pc, #32]	; (8001e74 <TIM_Base_SetConfig+0xe4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d103      	bne.n	8001e60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	615a      	str	r2, [r3, #20]
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40000400 	.word	0x40000400
 8001e7c:	40000800 	.word	0x40000800
 8001e80:	40000c00 	.word	0x40000c00
 8001e84:	40014000 	.word	0x40014000
 8001e88:	40014400 	.word	0x40014400
 8001e8c:	40014800 	.word	0x40014800

08001e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_tx_block_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b094      	sub	sp, #80	; 0x50
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8001ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8001ecc:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8001ece:	b672      	cpsid	i
#endif
    return(int_posture);
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
ULONG                       lower_tbu;
#endif


    /* Disable interrupts to get a block from the pool.  */
    TX_DISABLE
 8001ed2:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Determine if there is an available block.  */
    if (pool_ptr -> tx_block_pool_available != ((UINT) 0))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d022      	beq.n	8001f22 <_tx_block_allocate+0x6a>
    {

        /* Yes, a block is available.  Decrement the available count.  */
        pool_ptr -> tx_block_pool_available--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	1e5a      	subs	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	609a      	str	r2, [r3, #8]

        /* Pickup the current block pointer.  */
        work_ptr =  pool_ptr -> tx_block_pool_available_list;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30

        /* Return the first available block to the caller.  */
        temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8001eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eee:	3304      	adds	r3, #4
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        return_ptr =  TX_INDIRECT_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	647b      	str	r3, [r7, #68]	; 0x44
        *return_ptr =  temp_ptr;
 8001ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efa:	601a      	str	r2, [r3, #0]

        /* Modify the available list to point at the next block in the pool. */
        next_block_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8001efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
        pool_ptr -> tx_block_pool_available_list =  *next_block_ptr;
 8001f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	611a      	str	r2, [r3, #16]

        /* Save the pool's address in the block for when it is released!  */
        temp_ptr =  TX_BLOCK_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        *next_block_ptr =  temp_ptr;
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f10:	601a      	str	r2, [r3, #0]
        /* Store the address of the allocated block.  */
        *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_3_OFFSET)) =  (ULONG) *block_ptr;
#endif

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8001f12:	2300      	movs	r3, #0
 8001f14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f18:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f383 8810 	msr	PRIMASK, r3
}
 8001f20:	e071      	b.n	8002006 <_tx_block_allocate+0x14e>
    }
    else
    {

        /* Default the return pointer to NULL.  */
        return_ptr =   TX_INDIRECT_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	647b      	str	r3, [r7, #68]	; 0x44
        *return_ptr =  TX_NULL;
 8001f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d061      	beq.n	8001ff6 <_tx_block_allocate+0x13e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8001f32:	4b37      	ldr	r3, [pc, #220]	; (8002010 <_tx_block_allocate+0x158>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <_tx_block_allocate+0x92>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_MEMORY;
 8001f3a:	2310      	movs	r3, #16
 8001f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f40:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f383 8810 	msr	PRIMASK, r3
}
 8001f48:	e05d      	b.n	8002006 <_tx_block_allocate+0x14e>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_block_pool_performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8001f4a:	4b32      	ldr	r3, [pc, #200]	; (8002014 <_tx_block_allocate+0x15c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_block_pool_cleanup);
 8001f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f52:	4a31      	ldr	r2, [pc, #196]	; (8002018 <_tx_block_allocate+0x160>)
 8001f54:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8001f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return block pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) block_ptr;
 8001f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	67da      	str	r2, [r3, #124]	; 0x7c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8001f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  (pool_ptr -> tx_block_pool_suspended_count);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Increment the number of suspended threads.  */
                (pool_ptr -> tx_block_pool_suspended_count)++;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8001f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d109      	bne.n	8001f9a <_tx_block_allocate+0xe2>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_block_pool_suspension_list =     thread_ptr;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f8a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8001f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f90:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8001f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f96:	675a      	str	r2, [r3, #116]	; 0x74
 8001f98:	e011      	b.n	8001fbe <_tx_block_allocate+0x106>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_block_pool_suspension_list;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8001fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fa4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8001fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8001fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001fb6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8001fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001fbc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BLOCK_MEMORY;
 8001fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8001fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8001fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <_tx_block_allocate+0x158>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <_tx_block_allocate+0x158>)
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fdc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f383 8810 	msr	PRIMASK, r3
}
 8001fe4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8001fe6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001fe8:	f002 ffea 	bl	8004fc0 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_3_OFFSET)) =  (ULONG) *block_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8001fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ff4:	e007      	b.n	8002006 <_tx_block_allocate+0x14e>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8001ff6:	2310      	movs	r3, #16
 8001ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f383 8810 	msr	PRIMASK, r3
}
 8002004:	bf00      	nop
            TX_RESTORE
        }
    }

    /* Return completion status.  */
    return(status);
 8002006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002008:	4618      	mov	r0, r3
 800200a:	3750      	adds	r7, #80	; 0x50
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000144 	.word	0x20000144
 8002014:	20000148 	.word	0x20000148
 8002018:	0800201d 	.word	0x0800201d

0800201c <_tx_block_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_block_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08e      	sub	sp, #56	; 0x38
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002026:	f3ef 8310 	mrs	r3, PRIMASK
 800202a:	623b      	str	r3, [r7, #32]
    return(posture);
 800202c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800202e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002030:	b672      	cpsid	i
    return(int_posture);
 8002032:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the block pool.  */
    TX_DISABLE
 8002034:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_block_pool_cleanup))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800203a:	4a33      	ldr	r2, [pc, #204]	; (8002108 <_tx_block_pool_cleanup+0xec>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d158      	bne.n	80020f2 <_tx_block_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d152      	bne.n	80020f2 <_tx_block_pool_cleanup+0xd6>
        {

            /* Setup pointer to block pool control block.  */
            pool_ptr =  TX_VOID_TO_BLOCK_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002050:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	2b00      	cmp	r3, #0
 8002056:	d04c      	beq.n	80020f2 <_tx_block_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_block_pool_id == TX_BLOCK_POOL_ID)
 8002058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a2b      	ldr	r2, [pc, #172]	; (800210c <_tx_block_pool_cleanup+0xf0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d147      	bne.n	80020f2 <_tx_block_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_block_pool_suspended_count != TX_NO_SUSPENSIONS)
 8002062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	2b00      	cmp	r3, #0
 8002068:	d043      	beq.n	80020f2 <_tx_block_pool_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        pool_ptr -> tx_block_pool_suspended_count--;
 8002070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	1e5a      	subs	r2, r3, #1
 8002076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002078:	625a      	str	r2, [r3, #36]	; 0x24

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_block_pool_suspended_count;
 800207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8002080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <_tx_block_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_block_pool_suspension_list =  TX_NULL;
 8002086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002088:	2200      	movs	r2, #0
 800208a:	621a      	str	r2, [r3, #32]
 800208c:	e013      	b.n	80020b6 <_tx_block_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020a4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_block_pool_suspension_list == thread_ptr)
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d102      	bne.n	80020b6 <_tx_block_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_block_pool_suspension_list =     next_thread;
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020b4:	621a      	str	r2, [r3, #32]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BLOCK_MEMORY)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d119      	bne.n	80020f2 <_tx_block_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this block pool.  */
                            pool_ptr -> tx_block_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2210      	movs	r2, #16
 80020c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else
                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <_tx_block_pool_cleanup+0xf4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	4a10      	ldr	r2, [pc, #64]	; (8002110 <_tx_block_pool_cleanup+0xf4>)
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f383 8810 	msr	PRIMASK, r3
}
 80020da:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f002 fe5b 	bl	8004d98 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80020e2:	f3ef 8310 	mrs	r3, PRIMASK
 80020e6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80020e8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80020ea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80020ec:	b672      	cpsid	i
    return(int_posture);
 80020ee:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
 80020f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f383 8810 	msr	PRIMASK, r3
}
 80020fc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80020fe:	bf00      	nop
 8002100:	3738      	adds	r7, #56	; 0x38
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	0800201d 	.word	0x0800201d
 800210c:	424c4f43 	.word	0x424c4f43
 8002110:	20000144 	.word	0x20000144

08002114 <_tx_block_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size,
                    VOID *pool_start, ULONG pool_size)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b090      	sub	sp, #64	; 0x40
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
TX_BLOCK_POOL       *next_pool;
TX_BLOCK_POOL       *previous_pool;


    /* Initialize block pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BLOCK_POOL)));
 8002122:	2230      	movs	r2, #48	; 0x30
 8002124:	2100      	movs	r1, #0
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f004 fe12 	bl	8006d50 <memset>

    /* Round the block size up to something that is evenly divisible by
       an ALIGN_TYPE (typically this is a 32-bit ULONG). This helps guarantee proper alignment.  */
    block_size =  (((block_size + (sizeof(ALIGN_TYPE))) - ((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3303      	adds	r3, #3
 8002130:	f023 0303 	bic.w	r3, r3, #3
 8002134:	607b      	str	r3, [r7, #4]

    /* Round the pool size down to something that is evenly divisible by
       an ALIGN_TYPE (typically this is a 32-bit ULONG).  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8002136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002138:	f023 0303 	bic.w	r3, r3, #3
 800213c:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Setup the basic block pool fields.  */
    pool_ptr -> tx_block_pool_name =             name_ptr;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	605a      	str	r2, [r3, #4]
    pool_ptr -> tx_block_pool_start =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	615a      	str	r2, [r3, #20]
    pool_ptr -> tx_block_pool_size =             pool_size;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800214e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_block_pool_block_size =       (UINT) block_size;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	61da      	str	r2, [r3, #28]

    /* Calculate the total number of blocks.  */
    total_blocks =  pool_size/(block_size + (sizeof(UCHAR *)));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800215c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Walk through the pool area, setting up the available block list.  */
    blocks =            ((UINT) 0);
 8002162:	2300      	movs	r3, #0
 8002164:	63fb      	str	r3, [r7, #60]	; 0x3c
    block_ptr =         TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	637b      	str	r3, [r7, #52]	; 0x34
    next_block_ptr =    TX_UCHAR_POINTER_ADD(block_ptr, (block_size + (sizeof(UCHAR *))));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002170:	4413      	add	r3, r2
 8002172:	633b      	str	r3, [r7, #48]	; 0x30
    while(blocks < (UINT) total_blocks)
 8002174:	e00e      	b.n	8002194 <_tx_block_pool_create+0x80>
    {

        /* Yes, we have another block.  Increment the block count.  */
        blocks++;
 8002176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002178:	3301      	adds	r3, #1
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup the link to the next block.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800217c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
        *block_link_ptr =  next_block_ptr;
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002184:	601a      	str	r2, [r3, #0]

        /* Advance to the next block.  */
        block_ptr =   next_block_ptr;
 8002186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002188:	637b      	str	r3, [r7, #52]	; 0x34

        /* Update the next block pointer.  */
        next_block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, (block_size + (sizeof(UCHAR *))));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002190:	4413      	add	r3, r2
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
    while(blocks < (UINT) total_blocks)
 8002194:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002198:	429a      	cmp	r2, r3
 800219a:	d3ec      	bcc.n	8002176 <_tx_block_pool_create+0x62>
    }

    /* Save the remaining information in the pool control block.  */
    pool_ptr -> tx_block_pool_available =  blocks;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021a0:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_block_pool_total =      blocks;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021a6:	60da      	str	r2, [r3, #12]

    /* Quickly check to make sure at least one block is in the pool.  */
    if (blocks != ((UINT) 0))
 80021a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d047      	beq.n	800223e <_tx_block_pool_create+0x12a>
    {

        /* Backup to the last block in the pool.  */
        block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr,(block_size + (sizeof(UCHAR *))));
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	f06f 0303 	mvn.w	r3, #3
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021b8:	4413      	add	r3, r2
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the last block's forward pointer to NULL.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80021bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
        *block_link_ptr =  TX_NULL;
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]

        /* Setup the starting pool address.  */
        pool_ptr -> tx_block_pool_available_list =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80021cc:	f3ef 8310 	mrs	r3, PRIMASK
 80021d0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80021d2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80021d4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80021d6:	b672      	cpsid	i
    return(int_posture);
 80021d8:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts to place the block pool on the created list.  */
        TX_DISABLE
 80021da:	627b      	str	r3, [r7, #36]	; 0x24

        /* Setup the block pool ID to make it valid.  */
        pool_ptr -> tx_block_pool_id =  TX_BLOCK_POOL_ID;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4a1b      	ldr	r2, [pc, #108]	; (800224c <_tx_block_pool_create+0x138>)
 80021e0:	601a      	str	r2, [r3, #0]

        /* Place the block pool on the list of created block pools.  First,
           check for an empty list.  */
        if (_tx_block_pool_created_count == TX_EMPTY)
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <_tx_block_pool_create+0x13c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <_tx_block_pool_create+0xea>
        {

            /* The created block pool list is empty.  Add block pool to empty list.  */
            _tx_block_pool_created_ptr =                  pool_ptr;
 80021ea:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <_tx_block_pool_create+0x140>)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6013      	str	r3, [r2, #0]
            pool_ptr -> tx_block_pool_created_next =      pool_ptr;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28
            pool_ptr -> tx_block_pool_created_previous =  pool_ptr;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80021fc:	e011      	b.n	8002222 <_tx_block_pool_create+0x10e>
        }
        else
        {

            /* This list is not NULL, add to the end of the list.  */
            next_pool =      _tx_block_pool_created_ptr;
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <_tx_block_pool_create+0x140>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	623b      	str	r3, [r7, #32]
            previous_pool =  next_pool -> tx_block_pool_created_previous;
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	61fb      	str	r3, [r7, #28]

            /* Place the new block pool in the list.  */
            next_pool -> tx_block_pool_created_previous =  pool_ptr;
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
            previous_pool -> tx_block_pool_created_next =  pool_ptr;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	629a      	str	r2, [r3, #40]	; 0x28

            /* Setup this block pool's created links.  */
            pool_ptr -> tx_block_pool_created_previous =  previous_pool;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c
            pool_ptr -> tx_block_pool_created_next =      next_pool;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a3a      	ldr	r2, [r7, #32]
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
        }

        /* Increment the created count.  */
        _tx_block_pool_created_count++;
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <_tx_block_pool_create+0x13c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	4a09      	ldr	r2, [pc, #36]	; (8002250 <_tx_block_pool_create+0x13c>)
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f383 8810 	msr	PRIMASK, r3
}
 8002236:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return successful status.  */
        status =  TX_SUCCESS;
 8002238:	2300      	movs	r3, #0
 800223a:	63bb      	str	r3, [r7, #56]	; 0x38
 800223c:	e001      	b.n	8002242 <_tx_block_pool_create+0x12e>
    }
    else
    {

        /* Not enough memory for one block, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800223e:	2305      	movs	r3, #5
 8002240:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Return completion status.  */
    return(status);
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002244:	4618      	mov	r0, r3
 8002246:	3740      	adds	r7, #64	; 0x40
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	424c4f43 	.word	0x424c4f43
 8002250:	20000094 	.word	0x20000094
 8002254:	200000a0 	.word	0x200000a0

08002258 <_tx_block_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_release(VOID *block_ptr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b090      	sub	sp, #64	; 0x40
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002260:	f3ef 8310 	mrs	r3, PRIMASK
 8002264:	61bb      	str	r3, [r7, #24]
    return(posture);
 8002266:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8002268:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800226a:	b672      	cpsid	i
    return(int_posture);
 800226c:	697b      	ldr	r3, [r7, #20]
TX_THREAD           *next_thread;
TX_THREAD           *previous_thread;


    /* Disable interrupts to put this block back in the pool.  */
    TX_DISABLE
 800226e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Pickup the pool pointer which is just previous to the starting
       address of the block that the caller sees.  */
    work_ptr =        TX_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	63bb      	str	r3, [r7, #56]	; 0x38
    work_ptr =        TX_UCHAR_POINTER_SUB(work_ptr, (sizeof(UCHAR *)));
 8002274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002276:	3b04      	subs	r3, #4
 8002278:	63bb      	str	r3, [r7, #56]	; 0x38
    next_block_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
    pool_ptr =        TX_UCHAR_TO_BLOCK_POOL_POINTER_CONVERT((*next_block_ptr));
 800227e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_BLOCK_RELEASE_INSERT

    /* Determine if there are any threads suspended on the block pool.  */
    thread_ptr =  pool_ptr -> tx_block_pool_suspension_list;
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (thread_ptr != TX_NULL)
 800228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228c:	2b00      	cmp	r3, #0
 800228e:	d03b      	beq.n	8002308 <_tx_block_release+0xb0>
    {

        /* Remove the suspended thread from the list.  */

        /* Decrement the number of threads suspended.  */
        (pool_ptr -> tx_block_pool_suspended_count)--;
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	1e5a      	subs	r2, r3, #1
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Pickup the suspended count.  */
        suspended_count =  (pool_ptr -> tx_block_pool_suspended_count);
 800229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80022a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <_tx_block_release+0x56>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> tx_block_pool_suspension_list =  TX_NULL;
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	2200      	movs	r2, #0
 80022aa:	621a      	str	r2, [r3, #32]
 80022ac:	e00e      	b.n	80022cc <_tx_block_release+0x74>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                thread_ptr -> tx_thread_suspended_next;
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
            pool_ptr -> tx_block_pool_suspension_list =  next_thread;
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	621a      	str	r2, [r3, #32]

            /* Update the links of the adjacent threads.  */
            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022be:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	6a3a      	ldr	r2, [r7, #32]
 80022c4:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ca:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80022cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ce:	2200      	movs	r2, #0
 80022d0:	669a      	str	r2, [r3, #104]	; 0x68

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        return_block_ptr =  TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d6:	61fb      	str	r3, [r7, #28]
        work_ptr =          TX_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	63bb      	str	r3, [r7, #56]	; 0x38
        *return_block_ptr =  work_ptr;
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022e0:	601a      	str	r2, [r3, #0]

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	2200      	movs	r2, #0
 80022e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <_tx_block_release+0xe0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3301      	adds	r3, #1
 80022f0:	4a11      	ldr	r2, [pc, #68]	; (8002338 <_tx_block_release+0xe0>)
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f383 8810 	msr	PRIMASK, r3
}
 80022fe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8002300:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002302:	f002 fd49 	bl	8004d98 <_tx_thread_system_resume>
 8002306:	e011      	b.n	800232c <_tx_block_release+0xd4>
    {

        /* No thread is suspended for a memory block.  */

        /* Put the block back in the available list.  */
        *next_block_ptr =  pool_ptr -> tx_block_pool_available_list;
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230e:	601a      	str	r2, [r3, #0]

        /* Adjust the head pointer.  */
        pool_ptr -> tx_block_pool_available_list =  work_ptr;
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002314:	611a      	str	r2, [r3, #16]

        /* Increment the count of available blocks.  */
        pool_ptr -> tx_block_pool_available++;
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002322:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f383 8810 	msr	PRIMASK, r3
}
 800232a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return successful completion status.  */
    return(TX_SUCCESS);
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3740      	adds	r7, #64	; 0x40
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000144 	.word	0x20000144

0800233c <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b096      	sub	sp, #88	; 0x58
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3303      	adds	r3, #3
 800234e:	f023 0303 	bic.w	r3, r3, #3
 8002352:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002354:	f3ef 8310 	mrs	r3, PRIMASK
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800235a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800235e:	b672      	cpsid	i
    return(int_posture);
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8002362:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002364:	4b55      	ldr	r3, [pc, #340]	; (80024bc <_tx_byte_allocate+0x180>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800236a:	2300      	movs	r3, #0
 800236c:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002372:	621a      	str	r2, [r3, #32]
 8002374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	f383 8810 	msr	PRIMASK, r3
}
 800237e:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f9b2 	bl	80026ec <_tx_byte_pool_search>
 8002388:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800238a:	f3ef 8310 	mrs	r3, PRIMASK
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8002394:	b672      	cpsid	i
    return(int_posture);
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8002398:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800239a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80023a0:	2301      	movs	r3, #1
 80023a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a4:	e006      	b.n	80023b4 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d101      	bne.n	80023b4 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80023b0:	2301      	movs	r3, #1
 80023b2:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 80023b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0d9      	beq.n	800236e <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023be:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80023c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <_tx_byte_allocate+0x9c>
 80023c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	f383 8810 	msr	PRIMASK, r3
}
 80023d0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80023d2:	2300      	movs	r3, #0
 80023d4:	653b      	str	r3, [r7, #80]	; 0x50
 80023d6:	e06c      	b.n	80024b2 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d061      	beq.n	80024a2 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80023de:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <_tx_byte_allocate+0x184>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 80023e6:	2310      	movs	r3, #16
 80023e8:	653b      	str	r3, [r7, #80]	; 0x50
 80023ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f383 8810 	msr	PRIMASK, r3
}
 80023f4:	e05d      	b.n	80024b2 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 80023f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f8:	4a32      	ldr	r2, [pc, #200]	; (80024c4 <_tx_byte_allocate+0x188>)
 80023fa:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 80023fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8002402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8002408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800240e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002410:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002418:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800242c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002436:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8002438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800243a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800243c:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800243e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002442:	675a      	str	r2, [r3, #116]	; 0x74
 8002444:	e011      	b.n	800246a <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800244c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800244e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002450:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8002452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002456:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8002458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800245c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002462:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8002464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002468:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800246a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246c:	2209      	movs	r2, #9
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002472:	2201      	movs	r2, #1
 8002474:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8002476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <_tx_byte_allocate+0x184>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <_tx_byte_allocate+0x184>)
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002488:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f383 8810 	msr	PRIMASK, r3
}
 8002490:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8002492:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002494:	f002 fd94 	bl	8004fc0 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8002498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800249a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249e:	653b      	str	r3, [r7, #80]	; 0x50
 80024a0:	e007      	b.n	80024b2 <_tx_byte_allocate+0x176>
 80024a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f383 8810 	msr	PRIMASK, r3
}
 80024ac:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 80024ae:	2310      	movs	r3, #16
 80024b0:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 80024b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3758      	adds	r7, #88	; 0x58
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000148 	.word	0x20000148
 80024c0:	20000144 	.word	0x20000144
 80024c4:	080024c9 	.word	0x080024c9

080024c8 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08e      	sub	sp, #56	; 0x38
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80024d2:	f3ef 8310 	mrs	r3, PRIMASK
 80024d6:	623b      	str	r3, [r7, #32]
    return(posture);
 80024d8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80024da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80024dc:	b672      	cpsid	i
    return(int_posture);
 80024de:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e6:	4a33      	ldr	r2, [pc, #204]	; (80025b4 <_tx_byte_pool_cleanup+0xec>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d158      	bne.n	800259e <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d152      	bne.n	800259e <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	2b00      	cmp	r3, #0
 8002502:	d04c      	beq.n	800259e <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2b      	ldr	r2, [pc, #172]	; (80025b8 <_tx_byte_pool_cleanup+0xf0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d147      	bne.n	800259e <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	2b00      	cmp	r3, #0
 8002514:	d043      	beq.n	800259e <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	1e5a      	subs	r2, r3, #1
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
 8002538:	e013      	b.n	8002562 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002550:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	d102      	bne.n	8002562 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002560:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	2b09      	cmp	r3, #9
 8002568:	d119      	bne.n	800259e <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2210      	movs	r2, #16
 800256e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <_tx_byte_pool_cleanup+0xf4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3301      	adds	r3, #1
 8002578:	4a10      	ldr	r2, [pc, #64]	; (80025bc <_tx_byte_pool_cleanup+0xf4>)
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f383 8810 	msr	PRIMASK, r3
}
 8002586:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f002 fc05 	bl	8004d98 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800258e:	f3ef 8310 	mrs	r3, PRIMASK
 8002592:	61bb      	str	r3, [r7, #24]
    return(posture);
 8002594:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8002596:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002598:	b672      	cpsid	i
    return(int_posture);
 800259a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
 800259e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f383 8810 	msr	PRIMASK, r3
}
 80025a8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80025aa:	bf00      	nop
 80025ac:	3738      	adds	r7, #56	; 0x38
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	080024c9 	.word	0x080024c9
 80025b8:	42595445 	.word	0x42595445
 80025bc:	20000144 	.word	0x20000144

080025c0 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08e      	sub	sp, #56	; 0x38
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80025ce:	2234      	movs	r2, #52	; 0x34
 80025d0:	2100      	movs	r1, #0
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f004 fbbc 	bl	8006d50 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f023 0303 	bic.w	r3, r3, #3
 80025de:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f1a3 0208 	sub.w	r2, r3, #8
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2202      	movs	r2, #2
 800260c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8002612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4413      	add	r3, r2
 8002618:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800261a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261c:	3b04      	subs	r3, #4
 800261e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800262c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002630:	3b04      	subs	r3, #4
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800264a:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8002650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002652:	3304      	adds	r3, #4
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8002656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <_tx_byte_pool_create+0x11c>)
 800265e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002666:	f3ef 8310 	mrs	r3, PRIMASK
 800266a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800266c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800266e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002670:	b672      	cpsid	i
    return(int_posture);
 8002672:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8002674:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <_tx_byte_pool_create+0x120>)
 800267a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <_tx_byte_pool_create+0x124>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d109      	bne.n	8002698 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8002684:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <_tx_byte_pool_create+0x128>)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
 8002696:	e011      	b.n	80026bc <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <_tx_byte_pool_create+0x128>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a3a      	ldr	r2, [r7, #32]
 80026ba:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <_tx_byte_pool_create+0x124>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	4a08      	ldr	r2, [pc, #32]	; (80026e4 <_tx_byte_pool_create+0x124>)
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f383 8810 	msr	PRIMASK, r3
}
 80026d0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3738      	adds	r7, #56	; 0x38
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	ffffeeee 	.word	0xffffeeee
 80026e0:	42595445 	.word	0x42595445
 80026e4:	200000a8 	.word	0x200000a8
 80026e8:	2000008c 	.word	0x2000008c

080026ec <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b097      	sub	sp, #92	; 0x5c
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80026fa:	f3ef 8310 	mrs	r3, PRIMASK
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8002702:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002704:	b672      	cpsid	i
    return(int_posture);
 8002706:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8002708:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	3b02      	subs	r3, #2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271e:	429a      	cmp	r2, r3
 8002720:	d308      	bcc.n	8002734 <_tx_byte_pool_search+0x48>
 8002722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002724:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f383 8810 	msr	PRIMASK, r3
}
 800272c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800272e:	2300      	movs	r3, #0
 8002730:	653b      	str	r3, [r7, #80]	; 0x50
 8002732:	e0dd      	b.n	80028f0 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8002734:	4b72      	ldr	r3, [pc, #456]	; (8002900 <_tx_byte_pool_search+0x214>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800273e:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	3301      	adds	r3, #1
 800274c:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800274e:	2300      	movs	r3, #0
 8002750:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8002752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002754:	3304      	adds	r3, #4
 8002756:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800275c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a68      	ldr	r2, [pc, #416]	; (8002904 <_tx_byte_pool_search+0x218>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d143      	bne.n	80027ee <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8002766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002770:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8002772:	2301      	movs	r3, #1
 8002774:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8002776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8002780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8002788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278a:	3b08      	subs	r3, #8
 800278c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800278e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d257      	bcs.n	8002846 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8002796:	2300      	movs	r3, #0
 8002798:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	3304      	adds	r3, #4
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a56      	ldr	r2, [pc, #344]	; (8002904 <_tx_byte_pool_search+0x218>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d113      	bne.n	80027d6 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	1e5a      	subs	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d114      	bne.n	80027f8 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80027d2:	615a      	str	r2, [r3, #20]
 80027d4:	e010      	b.n	80027f8 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80027e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80027e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e8:	3b01      	subs	r3, #1
 80027ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ec:	e004      	b.n	80027f8 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80027ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80027f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80027fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002800:	3b01      	subs	r3, #1
 8002802:	64bb      	str	r3, [r7, #72]	; 0x48
 8002804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002806:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f383 8810 	msr	PRIMASK, r3
}
 800280e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002810:	f3ef 8310 	mrs	r3, PRIMASK
 8002814:	61bb      	str	r3, [r7, #24]
    return(posture);
 8002816:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8002818:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800281a:	b672      	cpsid	i
    return(int_posture);
 800281c:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800281e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002826:	429a      	cmp	r2, r3
 8002828:	d009      	beq.n	800283e <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	3301      	adds	r3, #1
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800283c:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800283e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002840:	2b00      	cmp	r3, #0
 8002842:	d186      	bne.n	8002752 <_tx_byte_pool_search+0x66>
 8002844:	e000      	b.n	8002848 <_tx_byte_pool_search+0x15c>
                    break;
 8002846:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8002848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284a:	2b00      	cmp	r3, #0
 800284c:	d048      	beq.n	80028e0 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800284e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b13      	cmp	r3, #19
 8002856:	d91e      	bls.n	8002896 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	3308      	adds	r3, #8
 800285c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800285e:	4413      	add	r3, r2
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8002866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	3304      	adds	r3, #4
 8002876:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8002878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287a:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800287c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287e:	4a21      	ldr	r2, [pc, #132]	; (8002904 <_tx_byte_pool_search+0x218>)
 8002880:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800288c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002890:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8002896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002898:	3304      	adds	r3, #4
 800289a:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800289c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289e:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80028a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f1a3 0208 	sub.w	r2, r3, #8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028bc:	429a      	cmp	r2, r3
 80028be:	d105      	bne.n	80028cc <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80028c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	615a      	str	r2, [r3, #20]
 80028cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f383 8810 	msr	PRIMASK, r3
}
 80028d6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80028d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028da:	3308      	adds	r3, #8
 80028dc:	653b      	str	r3, [r7, #80]	; 0x50
 80028de:	e007      	b.n	80028f0 <_tx_byte_pool_search+0x204>
 80028e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f383 8810 	msr	PRIMASK, r3
}
 80028ea:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80028f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	375c      	adds	r7, #92	; 0x5c
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000148 	.word	0x20000148
 8002904:	ffffeeee 	.word	0xffffeeee

08002908 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08e      	sub	sp, #56	; 0x38
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002912:	f3ef 8310 	mrs	r3, PRIMASK
 8002916:	61fb      	str	r3, [r7, #28]
    return(posture);
 8002918:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800291a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800291c:	b672      	cpsid	i
    return(int_posture);
 800291e:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 8002920:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002926:	4a38      	ldr	r2, [pc, #224]	; (8002a08 <_tx_event_flags_cleanup+0x100>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d162      	bne.n	80029f2 <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d15c      	bne.n	80029f2 <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800293c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002940:	2b00      	cmp	r3, #0
 8002942:	d056      	beq.n	80029f2 <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a30      	ldr	r2, [pc, #192]	; (8002a0c <_tx_event_flags_cleanup+0x104>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d151      	bne.n	80029f2 <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d04d      	beq.n	80029f2 <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	2b00      	cmp	r3, #0
 800296c:	d020      	beq.n	80029b0 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	3b01      	subs	r3, #1
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002978:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d103      	bne.n	8002988 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]
 8002986:	e016      	b.n	80029b6 <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002992:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	6a3a      	ldr	r2, [r7, #32]
 8002998:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299e:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 80029a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d106      	bne.n	80029b6 <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ac:	611a      	str	r2, [r3, #16]
 80029ae:	e002      	b.n	80029b6 <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	2201      	movs	r2, #1
 80029b4:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	2b07      	cmp	r3, #7
 80029bc:	d119      	bne.n	80029f2 <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2207      	movs	r2, #7
 80029c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <_tx_event_flags_cleanup+0x108>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <_tx_event_flags_cleanup+0x108>)
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f383 8810 	msr	PRIMASK, r3
}
 80029da:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f002 f9db 	bl	8004d98 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80029e2:	f3ef 8310 	mrs	r3, PRIMASK
 80029e6:	617b      	str	r3, [r7, #20]
    return(posture);
 80029e8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80029ea:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80029ec:	b672      	cpsid	i
    return(int_posture);
 80029ee:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
 80029f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f383 8810 	msr	PRIMASK, r3
}
 80029fc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80029fe:	bf00      	nop
 8002a00:	3738      	adds	r7, #56	; 0x38
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	08002909 	.word	0x08002909
 8002a0c:	4456444e 	.word	0x4456444e
 8002a10:	20000144 	.word	0x20000144

08002a14 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 8002a1e:	2228      	movs	r2, #40	; 0x28
 8002a20:	2100      	movs	r1, #0
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f004 f994 	bl	8006d50 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a32:	613b      	str	r3, [r7, #16]
    return(posture);
 8002a34:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8002a36:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002a38:	b672      	cpsid	i
    return(int_posture);
 8002a3a:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 8002a3c:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a18      	ldr	r2, [pc, #96]	; (8002aa4 <_tx_event_flags_create+0x90>)
 8002a42:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8002a44:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <_tx_event_flags_create+0x94>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d109      	bne.n	8002a60 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 8002a4c:	4a17      	ldr	r2, [pc, #92]	; (8002aac <_tx_event_flags_create+0x98>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	61da      	str	r2, [r3, #28]
 8002a5e:	e011      	b.n	8002a84 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <_tx_event_flags_create+0x98>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <_tx_event_flags_create+0x94>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	4a07      	ldr	r2, [pc, #28]	; (8002aa8 <_tx_event_flags_create+0x94>)
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f383 8810 	msr	PRIMASK, r3
}
 8002a98:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	4456444e 	.word	0x4456444e
 8002aa8:	2000009c 	.word	0x2000009c
 8002aac:	20000078 	.word	0x20000078

08002ab0 <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b096      	sub	sp, #88	; 0x58
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002abe:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8002ac6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002ac8:	b672      	cpsid	i
    return(int_posture);
 8002aca:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 8002acc:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 8002ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d004      	beq.n	8002af2 <_tx_event_flags_get+0x42>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 8002ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aea:	43db      	mvns	r3, r3
 8002aec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aee:	4013      	ands	r3, r2
 8002af0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 8002af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d10a      	bne.n	8002b0e <_tx_event_flags_get+0x5e>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8002af8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4013      	ands	r3, r2
 8002afe:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 8002b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d006      	beq.n	8002b16 <_tx_event_flags_get+0x66>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b0c:	e003      	b.n	8002b16 <_tx_event_flags_get+0x66>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8002b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4013      	ands	r3, r2
 8002b14:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 8002b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d029      	beq.n	8002b70 <_tx_event_flags_get+0xc0>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b20:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d11c      	bne.n	8002b6a <_tx_event_flags_get+0xba>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <_tx_event_flags_get+0x98>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <_tx_event_flags_get+0x98>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 8002b44:	2301      	movs	r3, #1
 8002b46:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 8002b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d106      	bne.n	8002b5c <_tx_event_flags_get+0xac>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a1a      	ldr	r2, [r3, #32]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	621a      	str	r2, [r3, #32]
 8002b5a:	e006      	b.n	8002b6a <_tx_event_flags_get+0xba>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8002b6e:	e070      	b.n	8002c52 <_tx_event_flags_get+0x1a2>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8002b70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d06b      	beq.n	8002c4e <_tx_event_flags_get+0x19e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8002b76:	4b3c      	ldr	r3, [pc, #240]	; (8002c68 <_tx_event_flags_get+0x1b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <_tx_event_flags_get+0xd4>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 8002b7e:	2307      	movs	r3, #7
 8002b80:	653b      	str	r3, [r7, #80]	; 0x50
 8002b82:	e066      	b.n	8002c52 <_tx_event_flags_get+0x1a2>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8002b84:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <_tx_event_flags_get+0x1bc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8002b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8c:	4a38      	ldr	r2, [pc, #224]	; (8002c70 <_tx_event_flags_get+0x1c0>)
 8002b8e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 8002b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 8002b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8002baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <_tx_event_flags_get+0x128>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bc8:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bce:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bd4:	675a      	str	r2, [r3, #116]	; 0x74
 8002bd6:	e011      	b.n	8002bfc <_tx_event_flags_get+0x14c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8002bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002be2:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bee:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bf4:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bfa:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	2207      	movs	r2, #7
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0e:	2201      	movs	r2, #1
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8002c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c16:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8002c18:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <_tx_event_flags_get+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <_tx_event_flags_get+0x1b8>)
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c24:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f383 8810 	msr	PRIMASK, r3
}
 8002c2c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8002c2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c30:	f002 f9c6 	bl	8004fc0 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002c34:	f3ef 8310 	mrs	r3, PRIMASK
 8002c38:	61fb      	str	r3, [r7, #28]
    return(posture);
 8002c3a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8002c3c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002c3e:	b672      	cpsid	i
    return(int_posture);
 8002c40:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 8002c42:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c4c:	e001      	b.n	8002c52 <_tx_event_flags_get+0x1a2>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 8002c4e:	2307      	movs	r3, #7
 8002c50:	653b      	str	r3, [r7, #80]	; 0x50
 8002c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c54:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f383 8810 	msr	PRIMASK, r3
}
 8002c5c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8002c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3758      	adds	r7, #88	; 0x58
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000144 	.word	0x20000144
 8002c6c:	20000148 	.word	0x20000148
 8002c70:	08002909 	.word	0x08002909

08002c74 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b0a8      	sub	sp, #160	; 0xa0
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002c80:	f3ef 8310 	mrs	r3, PRIMASK
 8002c84:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 8002c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 8002c88:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 8002c8a:	b672      	cpsid	i
    return(int_posture);
 8002c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8002c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d023      	beq.n	8002ce4 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	67bb      	str	r3, [r7, #120]	; 0x78
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 8002cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d107      	bne.n	8002cca <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a1a      	ldr	r2, [r3, #32]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	621a      	str	r2, [r3, #32]
 8002cc8:	e005      	b.n	8002cd6 <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cda:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cde:	f383 8810 	msr	PRIMASK, r3
}
 8002ce2:	e1f2      	b.n	80030ca <_tx_event_flags_set+0x456>
    {

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the notify callback routine for this event flag group.  */
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <_tx_event_flags_set+0x98>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 81bb 	beq.w	8003098 <_tx_event_flags_set+0x424>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 8002d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d172      	bne.n	8002e10 <_tx_event_flags_set+0x19c>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8002d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d40:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 8002d42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4a:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 8002d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	667b      	str	r3, [r7, #100]	; 0x64

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 8002d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d10e      	bne.n	8002d78 <_tx_event_flags_set+0x104>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8002d5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d60:	4013      	ands	r3, r2
 8002d62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 8002d66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d009      	beq.n	8002d84 <_tx_event_flags_set+0x110>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 8002d70:	2300      	movs	r3, #0
 8002d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d76:	e005      	b.n	8002d84 <_tx_event_flags_set+0x110>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8002d78:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d7e:	4013      	ands	r3, r2
 8002d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 8002d84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 818c 	beq.w	80030a6 <_tx_event_flags_set+0x432>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	67fb      	str	r3, [r7, #124]	; 0x7c

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8002d92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d98:	663b      	str	r3, [r7, #96]	; 0x60
                    *suspend_info_ptr =  current_event_flags;
 8002d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002da0:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8002da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	65fb      	str	r3, [r7, #92]	; 0x5c

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 8002daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d106      	bne.n	8002dbe <_tx_event_flags_set+0x14a>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db6:	43db      	mvns	r3, r3
 8002db8:	401a      	ands	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002dca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dce:	2200      	movs	r2, #0
 8002dd0:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8002dd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 8002ddc:	4bad      	ldr	r3, [pc, #692]	; (8003094 <_tx_event_flags_set+0x420>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	4aac      	ldr	r2, [pc, #688]	; (8003094 <_tx_event_flags_set+0x420>)
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dee:	f383 8810 	msr	PRIMASK, r3
}
 8002df2:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8002df4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002df8:	f001 ffce 	bl	8004d98 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8002e00:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 8002e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    int_posture = __get_interrupt_posture();
 8002e04:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 8002e06:	b672      	cpsid	i
    return(int_posture);
 8002e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 8002e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e0e:	e14a      	b.n	80030a6 <_tx_event_flags_set+0x432>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                thread_ptr =      suspended_list;
 8002e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                last_satisfied =  TX_NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 8002e3a:	4b96      	ldr	r3, [pc, #600]	; (8003094 <_tx_event_flags_set+0x420>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	4a94      	ldr	r2, [pc, #592]	; (8003094 <_tx_event_flags_set+0x420>)
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	f383 8810 	msr	PRIMASK, r3
}
 8002e50:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002e52:	f3ef 8310 	mrs	r3, PRIMASK
 8002e56:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8002e5c:	b672      	cpsid	i
    return(int_posture);
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 8002e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d011      	beq.n	8002e90 <_tx_event_flags_set+0x21c>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 8002e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8002e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	673b      	str	r3, [r7, #112]	; 0x70

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8002e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9e:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 8002ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea8:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 8002eaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 8002eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d10e      	bne.n	8002ed6 <_tx_event_flags_set+0x262>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8002eb8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 8002ec4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d009      	beq.n	8002ee2 <_tx_event_flags_set+0x26e>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ed4:	e005      	b.n	8002ee2 <_tx_event_flags_set+0x26e>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8002ed6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002edc:	4013      	ands	r3, r2
 8002ede:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8002ee2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	2b07      	cmp	r3, #7
 8002eea:	d002      	beq.n	8002ef2 <_tx_event_flags_set+0x27e>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 8002eec:	2301      	movs	r3, #1
 8002eee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 8002ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d06c      	beq.n	8002fd4 <_tx_event_flags_set+0x360>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 8002efa:	2301      	movs	r3, #1
 8002efc:	67fb      	str	r3, [r7, #124]	; 0x7c

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8002efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	2b07      	cmp	r3, #7
 8002f06:	d11e      	bne.n	8002f46 <_tx_event_flags_set+0x2d2>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8002f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f0e:	663b      	str	r3, [r7, #96]	; 0x60
                            *suspend_info_ptr =  current_event_flags;
 8002f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f12:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002f16:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8002f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	65fb      	str	r3, [r7, #92]	; 0x5c

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 8002f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d106      	bne.n	8002f34 <_tx_event_flags_set+0x2c0>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	401a      	ands	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8002f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f38:	2200      	movs	r2, #0
 8002f3a:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8002f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f40:	2200      	movs	r2, #0
 8002f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8002f46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d103      	bne.n	8002f5c <_tx_event_flags_set+0x2e8>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002f5a:	e018      	b.n	8002f8e <_tx_event_flags_set+0x31a>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8002f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	65bb      	str	r3, [r7, #88]	; 0x58
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8002f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6a:	657b      	str	r3, [r7, #84]	; 0x54
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8002f6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f70:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 8002f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f76:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 8002f78:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d104      	bne.n	8002f8e <_tx_event_flags_set+0x31a>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 8002f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	1e5a      	subs	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 8002f98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10c      	bne.n	8002fba <_tx_event_flags_set+0x346>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 8002fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            last_satisfied =  thread_ptr;
 8002fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 8002fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	671a      	str	r2, [r3, #112]	; 0x70
 8002fb8:	e00c      	b.n	8002fd4 <_tx_event_flags_set+0x360>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 8002fba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fbe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002fc2:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 8002fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fc8:	2200      	movs	r2, #0
 8002fca:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 8002fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 8002fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

                    /* Decrement the suspension count.  */
                    suspended_count--;
 8002fda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                } while (suspended_count != TX_NO_SUSPENSIONS);
 8002fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f47f af2b 	bne.w	8002e44 <_tx_event_flags_set+0x1d0>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002ff4:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <_tx_event_flags_set+0x3a0>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	43db      	mvns	r3, r3
 8003008:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	621a      	str	r2, [r3, #32]
 8003014:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	f383 8810 	msr	PRIMASK, r3
}
 8003020:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 8003022:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003026:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                while(thread_ptr != TX_NULL)
 800302a:	e01f      	b.n	800306c <_tx_event_flags_set+0x3f8>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800302c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	673b      	str	r3, [r7, #112]	; 0x70
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003034:	f3ef 8310 	mrs	r3, PRIMASK
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800303c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800303e:	b672      	cpsid	i
    return(int_posture);
 8003040:	6a3b      	ldr	r3, [r7, #32]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8003042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <_tx_event_flags_set+0x420>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	4a11      	ldr	r2, [pc, #68]	; (8003094 <_tx_event_flags_set+0x420>)
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	f383 8810 	msr	PRIMASK, r3
}
 800305c:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800305e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003062:	f001 fe99 	bl	8004d98 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 8003066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                while(thread_ptr != TX_NULL)
 800306c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1db      	bne.n	800302c <_tx_event_flags_set+0x3b8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003074:	f3ef 8310 	mrs	r3, PRIMASK
 8003078:	61fb      	str	r3, [r7, #28]
    return(posture);
 800307a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800307c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800307e:	b672      	cpsid	i
    return(int_posture);
 8003080:	69bb      	ldr	r3, [r7, #24]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 8003082:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 8003086:	4b03      	ldr	r3, [pc, #12]	; (8003094 <_tx_event_flags_set+0x420>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3b01      	subs	r3, #1
 800308c:	4a01      	ldr	r2, [pc, #4]	; (8003094 <_tx_event_flags_set+0x420>)
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	e009      	b.n	80030a6 <_tx_event_flags_set+0x432>
 8003092:	bf00      	nop
 8003094:	20000144 	.word	0x20000144
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <_tx_event_flags_set+0x432>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030aa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f383 8810 	msr	PRIMASK, r3
}
 80030b2:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if a notify callback is required.  */
        if (events_set_notify != TX_NULL)
 80030b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <_tx_event_flags_set+0x44c>
        {

            /* Call application event flags set notification.  */
            (events_set_notify)(group_ptr);
 80030ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	4798      	blx	r3
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 80030c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <_tx_event_flags_set+0x456>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 80030c6:	f001 fe2d 	bl	8004d24 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	37a0      	adds	r7, #160	; 0xa0
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80030d8:	f001 fcf4 	bl	8004ac4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80030dc:	f002 f9b0 	bl	8005440 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <_tx_initialize_high_level+0x58>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <_tx_initialize_high_level+0x5c>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <_tx_initialize_high_level+0x60>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	4b11      	ldr	r3, [pc, #68]	; (8003138 <_tx_initialize_high_level+0x64>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80030f8:	4b10      	ldr	r3, [pc, #64]	; (800313c <_tx_initialize_high_level+0x68>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	4b10      	ldr	r3, [pc, #64]	; (8003140 <_tx_initialize_high_level+0x6c>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <_tx_initialize_high_level+0x70>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <_tx_initialize_high_level+0x74>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8003110:	4b0e      	ldr	r3, [pc, #56]	; (800314c <_tx_initialize_high_level+0x78>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <_tx_initialize_high_level+0x7c>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800311c:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <_tx_initialize_high_level+0x80>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <_tx_initialize_high_level+0x84>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
#endif
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000088 	.word	0x20000088
 8003130:	20000098 	.word	0x20000098
 8003134:	200000a4 	.word	0x200000a4
 8003138:	20000084 	.word	0x20000084
 800313c:	20000078 	.word	0x20000078
 8003140:	2000009c 	.word	0x2000009c
 8003144:	200000a0 	.word	0x200000a0
 8003148:	20000094 	.word	0x20000094
 800314c:	2000008c 	.word	0x2000008c
 8003150:	200000a8 	.word	0x200000a8
 8003154:	20000080 	.word	0x20000080
 8003158:	2000007c 	.word	0x2000007c

0800315c <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8003160:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <_tx_initialize_kernel_enter+0x48>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8003168:	d00c      	beq.n	8003184 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <_tx_initialize_kernel_enter+0x48>)
 800316c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8003170:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8003172:	f7fd f835 	bl	80001e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8003176:	f7ff ffad 	bl	80030d4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <_tx_initialize_kernel_enter+0x4c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	4a09      	ldr	r2, [pc, #36]	; (80031a8 <_tx_initialize_kernel_enter+0x4c>)
 8003182:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8003184:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <_tx_initialize_kernel_enter+0x48>)
 8003186:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800318a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800318c:	4b07      	ldr	r3, [pc, #28]	; (80031ac <_tx_initialize_kernel_enter+0x50>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f003 fb1b 	bl	80067cc <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8003196:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <_tx_initialize_kernel_enter+0x48>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800319c:	f7fd f870 	bl	8000280 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	2000000c 	.word	0x2000000c
 80031a8:	20000144 	.word	0x20000144
 80031ac:	20000090 	.word	0x20000090

080031b0 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08e      	sub	sp, #56	; 0x38
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80031ba:	f3ef 8310 	mrs	r3, PRIMASK
 80031be:	623b      	str	r3, [r7, #32]
    return(posture);
 80031c0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80031c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80031c4:	b672      	cpsid	i
    return(int_posture);
 80031c6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 80031c8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ce:	4a33      	ldr	r2, [pc, #204]	; (800329c <_tx_mutex_cleanup+0xec>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d158      	bne.n	8003286 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d152      	bne.n	8003286 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d04c      	beq.n	8003286 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a2b      	ldr	r2, [pc, #172]	; (80032a0 <_tx_mutex_cleanup+0xf0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d147      	bne.n	8003286 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d043      	beq.n	8003286 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	1e5a      	subs	r2, r3, #1
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d103      	bne.n	8003222 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]
 8003220:	e013      	b.n	800324a <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003232:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003238:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	429a      	cmp	r2, r3
 8003242:	d102      	bne.n	800324a <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003248:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	2b0d      	cmp	r3, #13
 8003250:	d119      	bne.n	8003286 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	221d      	movs	r2, #29
 8003256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <_tx_mutex_cleanup+0xf4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3301      	adds	r3, #1
 8003260:	4a10      	ldr	r2, [pc, #64]	; (80032a4 <_tx_mutex_cleanup+0xf4>)
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003266:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f383 8810 	msr	PRIMASK, r3
}
 800326e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f001 fd91 	bl	8004d98 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003276:	f3ef 8310 	mrs	r3, PRIMASK
 800327a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800327c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800327e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003280:	b672      	cpsid	i
    return(int_posture);
 8003282:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
 8003286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003288:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f383 8810 	msr	PRIMASK, r3
}
 8003290:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8003292:	bf00      	nop
 8003294:	3738      	adds	r7, #56	; 0x38
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	080031b1 	.word	0x080031b1
 80032a0:	4d555445 	.word	0x4d555445
 80032a4:	20000144 	.word	0x20000144

080032a8 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80032b0:	f3ef 8310 	mrs	r3, PRIMASK
 80032b4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80032b6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80032b8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80032ba:	b672      	cpsid	i
    return(int_posture);
 80032bc:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80032be:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <_tx_mutex_thread_release+0x84>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a19      	ldr	r2, [pc, #100]	; (800332c <_tx_mutex_thread_release+0x84>)
 80032c8:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032d0:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d017      	beq.n	8003308 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	2201      	movs	r2, #1
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f383 8810 	msr	PRIMASK, r3
}
 80032e8:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 80032ea:	6a38      	ldr	r0, [r7, #32]
 80032ec:	f000 fb00 	bl	80038f0 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80032f0:	f3ef 8310 	mrs	r3, PRIMASK
 80032f4:	617b      	str	r3, [r7, #20]
    return(posture);
 80032f6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80032f8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80032fa:	b672      	cpsid	i
    return(int_posture);
 80032fc:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003306:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1dd      	bne.n	80032ca <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800330e:	4b07      	ldr	r3, [pc, #28]	; (800332c <_tx_mutex_thread_release+0x84>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3b01      	subs	r3, #1
 8003314:	4a05      	ldr	r2, [pc, #20]	; (800332c <_tx_mutex_thread_release+0x84>)
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f383 8810 	msr	PRIMASK, r3
}
 8003322:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8003324:	bf00      	nop
 8003326:	3728      	adds	r7, #40	; 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000144 	.word	0x20000144

08003330 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	; 0x28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800333c:	2234      	movs	r2, #52	; 0x34
 800333e:	2100      	movs	r1, #0
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f003 fd05 	bl	8006d50 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003352:	f3ef 8310 	mrs	r3, PRIMASK
 8003356:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003358:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800335a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800335c:	b672      	cpsid	i
    return(int_posture);
 800335e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8003360:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4a1a      	ldr	r2, [pc, #104]	; (80033d0 <_tx_mutex_create+0xa0>)
 8003366:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <_tx_mutex_create+0xa4>)
 800336a:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <_tx_mutex_create+0xa8>)
 800336c:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <_tx_mutex_create+0xac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8003376:	4a1a      	ldr	r2, [pc, #104]	; (80033e0 <_tx_mutex_create+0xb0>)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	625a      	str	r2, [r3, #36]	; 0x24
 8003388:	e011      	b.n	80033ae <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <_tx_mutex_create+0xb0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a3a      	ldr	r2, [r7, #32]
 80033ac:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <_tx_mutex_create+0xac>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	4a09      	ldr	r2, [pc, #36]	; (80033dc <_tx_mutex_create+0xac>)
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f383 8810 	msr	PRIMASK, r3
}
 80033c2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3728      	adds	r7, #40	; 0x28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	4d555445 	.word	0x4d555445
 80033d4:	2000012c 	.word	0x2000012c
 80033d8:	080032a9 	.word	0x080032a9
 80033dc:	2000007c 	.word	0x2000007c
 80033e0:	20000080 	.word	0x20000080

080033e4 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b092      	sub	sp, #72	; 0x48
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80033ee:	f3ef 8310 	mrs	r3, PRIMASK
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80033f6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80033f8:	b672      	cpsid	i
    return(int_posture);
 80033fa:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 80033fc:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80033fe:	4b7a      	ldr	r3, [pc, #488]	; (80035e8 <_tx_mutex_get+0x204>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d144      	bne.n	8003496 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003416:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8003418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341a:	2b00      	cmp	r3, #0
 800341c:	d032      	beq.n	8003484 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d106      	bne.n	8003434 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8003426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8003434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00f      	beq.n	8003462 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8003442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003460:	e009      	b.n	8003476 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8003462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8003476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003478:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003480:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8003484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003486:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f383 8810 	msr	PRIMASK, r3
}
 800348e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8003490:	2300      	movs	r3, #0
 8003492:	647b      	str	r3, [r7, #68]	; 0x44
 8003494:	e0a2      	b.n	80035dc <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800349c:	429a      	cmp	r2, r3
 800349e:	d10d      	bne.n	80034bc <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ac:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f383 8810 	msr	PRIMASK, r3
}
 80034b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80034b6:	2300      	movs	r3, #0
 80034b8:	647b      	str	r3, [r7, #68]	; 0x44
 80034ba:	e08f      	b.n	80035dc <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8084 	beq.w	80035cc <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80034c4:	4b49      	ldr	r3, [pc, #292]	; (80035ec <_tx_mutex_get+0x208>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <_tx_mutex_get+0xfa>
 80034cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ce:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f383 8810 	msr	PRIMASK, r3
}
 80034d6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 80034d8:	231d      	movs	r3, #29
 80034da:	647b      	str	r3, [r7, #68]	; 0x44
 80034dc:	e07e      	b.n	80035dc <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 80034e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e6:	4a42      	ldr	r2, [pc, #264]	; (80035f0 <_tx_mutex_get+0x20c>)
 80034e8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 80034ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80034f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800350a:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800350c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003510:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8003512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003514:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003516:	675a      	str	r2, [r3, #116]	; 0x74
 8003518:	e011      	b.n	800353e <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8003520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003524:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8003526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352a:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800352c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003530:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003536:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8003538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800353c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8003548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354a:	220d      	movs	r2, #13
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800354e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003550:	2201      	movs	r2, #1
 8003552:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8003554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800355a:	4b24      	ldr	r3, [pc, #144]	; (80035ec <_tx_mutex_get+0x208>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	4a22      	ldr	r2, [pc, #136]	; (80035ec <_tx_mutex_get+0x208>)
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003566:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d121      	bne.n	80035bc <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	429a      	cmp	r2, r3
 8003582:	d903      	bls.n	800358c <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8003584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800358c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003596:	429a      	cmp	r2, r3
 8003598:	d204      	bcs.n	80035a4 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800359a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 80035a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d905      	bls.n	80035bc <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 80035b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	4619      	mov	r1, r3
 80035b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035b8:	f000 f8ce 	bl	8003758 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80035bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80035be:	f001 fcff 	bl	8004fc0 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80035c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c8:	647b      	str	r3, [r7, #68]	; 0x44
 80035ca:	e007      	b.n	80035dc <_tx_mutex_get+0x1f8>
 80035cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 80035d8:	231d      	movs	r3, #29
 80035da:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 80035dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3748      	adds	r7, #72	; 0x48
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000148 	.word	0x20000148
 80035ec:	20000144 	.word	0x20000144
 80035f0:	080031b1 	.word	0x080031b1

080035f4 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b092      	sub	sp, #72	; 0x48
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80035fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8003604:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003606:	b672      	cpsid	i
    return(int_posture);
 8003608:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800360a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8003612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003614:	2b01      	cmp	r3, #1
 8003616:	d805      	bhi.n	8003624 <_tx_mutex_prioritize+0x30>
 8003618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800361a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f383 8810 	msr	PRIMASK, r3
}
 8003622:	e092      	b.n	800374a <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8003624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003626:	2b02      	cmp	r3, #2
 8003628:	d114      	bne.n	8003654 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	429a      	cmp	r2, r3
 8003640:	d202      	bcs.n	8003648 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003646:	619a      	str	r2, [r3, #24]
 8003648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f383 8810 	msr	PRIMASK, r3
}
 8003652:	e07a      	b.n	800374a <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800365e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8003664:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <_tx_mutex_prioritize+0x160>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	4a3a      	ldr	r2, [pc, #232]	; (8003754 <_tx_mutex_prioritize+0x160>)
 800366c:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800366e:	2300      	movs	r3, #0
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8003672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	429a      	cmp	r2, r3
 800367c:	d201      	bcs.n	8003682 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800367e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003684:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f383 8810 	msr	PRIMASK, r3
}
 800368c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800368e:	f3ef 8310 	mrs	r3, PRIMASK
 8003692:	617b      	str	r3, [r7, #20]
    return(posture);
 8003694:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8003696:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003698:	b672      	cpsid	i
    return(int_posture);
 800369a:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800369c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d002      	beq.n	80036ae <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 80036a8:	2301      	movs	r3, #1
 80036aa:	633b      	str	r3, [r7, #48]	; 0x30
 80036ac:	e006      	b.n	80036bc <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 80036b8:	2301      	movs	r3, #1
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80036c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	643b      	str	r3, [r7, #64]	; 0x40
 80036c8:	e00c      	b.n	80036e4 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 80036d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d8:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80036da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 80036e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d1c2      	bne.n	8003672 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <_tx_mutex_prioritize+0x160>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	4a18      	ldr	r2, [pc, #96]	; (8003754 <_tx_mutex_prioritize+0x160>)
 80036f4:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 80036f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d01d      	beq.n	800373a <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 80036fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8003704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8003710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003714:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8003716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800371c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800371e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003720:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8003722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003726:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800372c:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003732:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003738:	619a      	str	r2, [r3, #24]
 800373a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f383 8810 	msr	PRIMASK, r3
}
 8003744:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003746:	f001 faed 	bl	8004d24 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800374a:	2300      	movs	r3, #0
#endif
}
 800374c:	4618      	mov	r0, r3
 800374e:	3748      	adds	r7, #72	; 0x48
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000144 	.word	0x20000144

08003758 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b092      	sub	sp, #72	; 0x48
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003762:	f3ef 8310 	mrs	r3, PRIMASK
 8003766:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800376c:	b672      	cpsid	i
    return(int_posture);
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8003770:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	2b00      	cmp	r3, #0
 8003778:	d017      	beq.n	80037aa <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d905      	bls.n	8003798 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c
 8003796:	e002      	b.n	800379e <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	63da      	str	r2, [r3, #60]	; 0x3c
 800379e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	f383 8810 	msr	PRIMASK, r3
}
 80037a8:	e096      	b.n	80038d8 <_tx_mutex_priority_change+0x180>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 80037aa:	4b4d      	ldr	r3, [pc, #308]	; (80038e0 <_tx_mutex_priority_change+0x188>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	643b      	str	r3, [r7, #64]	; 0x40

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80037b6:	4b4b      	ldr	r3, [pc, #300]	; (80038e4 <_tx_mutex_priority_change+0x18c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3302      	adds	r3, #2
 80037bc:	4a49      	ldr	r2, [pc, #292]	; (80038e4 <_tx_mutex_priority_change+0x18c>)
 80037be:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	220e      	movs	r2, #14
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80037d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f383 8810 	msr	PRIMASK, r3
}
 80037dc:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f001 fbee 	bl	8004fc0 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80037e4:	f3ef 8310 	mrs	r3, PRIMASK
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80037ec:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80037ee:	b672      	cpsid	i
    return(int_posture);
 80037f0:	6a3b      	ldr	r3, [r7, #32]

        /* Disable interrupts.  */
        TX_DISABLE
 80037f2:	647b      	str	r3, [r7, #68]	; 0x44

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d905      	bls.n	8003812 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003810:	e002      	b.n	8003818 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	63da      	str	r2, [r3, #60]	; 0x3c
 8003818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f383 8810 	msr	PRIMASK, r3
}
 8003822:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f001 fab7 	bl	8004d98 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800382a:	f3ef 8310 	mrs	r3, PRIMASK
 800382e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003830:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003832:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003834:	b672      	cpsid	i
    return(int_posture);
 8003836:	697b      	ldr	r3, [r7, #20]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8003838:	647b      	str	r3, [r7, #68]	; 0x44
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800383a:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <_tx_mutex_priority_change+0x188>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	429a      	cmp	r2, r3
 8003846:	d041      	beq.n	80038cc <_tx_mutex_priority_change+0x174>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	2b00      	cmp	r3, #0
 800384e:	d13d      	bne.n	80038cc <_tx_mutex_priority_change+0x174>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	429a      	cmp	r2, r3
 800385a:	d811      	bhi.n	8003880 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003860:	429a      	cmp	r2, r3
 8003862:	d133      	bne.n	80038cc <_tx_mutex_priority_change+0x174>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8003864:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <_tx_mutex_priority_change+0x188>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800386a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d22c      	bcs.n	80038cc <_tx_mutex_priority_change+0x174>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	491c      	ldr	r1, [pc, #112]	; (80038e8 <_tx_mutex_priority_change+0x190>)
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800387e:	e025      	b.n	80038cc <_tx_mutex_priority_change+0x174>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	429a      	cmp	r2, r3
 800388a:	d21f      	bcs.n	80038cc <_tx_mutex_priority_change+0x174>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	429a      	cmp	r2, r3
 8003896:	d80d      	bhi.n	80038b4 <_tx_mutex_priority_change+0x15c>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8003898:	4a11      	ldr	r2, [pc, #68]	; (80038e0 <_tx_mutex_priority_change+0x188>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800389e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d212      	bcs.n	80038cc <_tx_mutex_priority_change+0x174>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	490f      	ldr	r1, [pc, #60]	; (80038e8 <_tx_mutex_priority_change+0x190>)
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80038b2:	e00b      	b.n	80038cc <_tx_mutex_priority_change+0x174>
                            TX_DIV32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
                            _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                            /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                            TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	2201      	movs	r2, #1
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	637b      	str	r3, [r7, #52]	; 0x34
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 80038c0:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <_tx_mutex_priority_change+0x194>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c6:	4313      	orrs	r3, r2
 80038c8:	4a08      	ldr	r2, [pc, #32]	; (80038ec <_tx_mutex_priority_change+0x194>)
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f383 8810 	msr	PRIMASK, r3
}
 80038d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80038d8:	bf00      	nop
 80038da:	3748      	adds	r7, #72	; 0x48
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	2000014c 	.word	0x2000014c
 80038e4:	20000144 	.word	0x20000144
 80038e8:	200000ac 	.word	0x200000ac
 80038ec:	20000154 	.word	0x20000154

080038f0 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b0a6      	sub	sp, #152	; 0x98
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 80038f8:	2320      	movs	r3, #32
 80038fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80038fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003902:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8003904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8003906:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8003908:	b672      	cpsid	i
    return(int_posture);
 800390a:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800390c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 81ff 	beq.w	8003d18 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8003920:	4ba3      	ldr	r3, [pc, #652]	; (8003bb0 <_tx_mutex_put+0x2c0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800392c:	429a      	cmp	r2, r3
 800392e:	d00d      	beq.n	800394c <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8003930:	4ba0      	ldr	r3, [pc, #640]	; (8003bb4 <_tx_mutex_put+0x2c4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d109      	bne.n	800394c <_tx_mutex_put+0x5c>
 8003938:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800393c:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800393e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003940:	f383 8810 	msr	PRIMASK, r3
}
 8003944:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8003946:	231e      	movs	r3, #30
 8003948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800394c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003950:	2b20      	cmp	r3, #32
 8003952:	f040 81eb 	bne.w	8003d2c <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	1e5a      	subs	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <_tx_mutex_put+0x8e>
 8003968:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800396c:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800396e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003970:	f383 8810 	msr	PRIMASK, r3
}
 8003974:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8003976:	2300      	movs	r3, #0
 8003978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800397c:	e1d6      	b.n	8003d2c <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800397e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <_tx_mutex_put+0xaa>
 8003984:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003988:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800398a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800398c:	f383 8810 	msr	PRIMASK, r3
}
 8003990:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003998:	e1c8      	b.n	8003d2c <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800399a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800399c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039a0:	1e5a      	subs	r2, r3, #1
 80039a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 80039a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d104      	bne.n	80039bc <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 80039b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039b4:	2200      	movs	r2, #0
 80039b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80039ba:	e019      	b.n	80039f0 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 80039ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 80039d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80039d8:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 80039da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d104      	bne.n	80039f0 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 80039e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80039ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d110      	bne.n	8003a1a <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10c      	bne.n	8003a1a <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a0a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0e:	f383 8810 	msr	PRIMASK, r3
}
 8003a12:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8003a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	f040 8184 	bne.w	8003d2c <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8003a2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d155      	bne.n	8003ae8 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8003a3c:	4b5d      	ldr	r3, [pc, #372]	; (8003bb4 <_tx_mutex_put+0x2c4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3301      	adds	r3, #1
 8003a42:	4a5c      	ldr	r2, [pc, #368]	; (8003bb4 <_tx_mutex_put+0x2c4>)
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a4a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4e:	f383 8810 	msr	PRIMASK, r3
}
 8003a52:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8003a54:	2320      	movs	r3, #32
 8003a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8003a5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8003a64:	e01f      	b.n	8003aa6 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8003a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10b      	bne.n	8003a88 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8003a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d904      	bls.n	8003a88 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8003a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8003a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8003a92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a98:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d102      	bne.n	8003aa6 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8003aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1db      	bne.n	8003a66 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003aae:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8003ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8003ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8003ab8:	b672      	cpsid	i
    return(int_posture);
 8003aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8003abc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8003ac0:	4b3c      	ldr	r3, [pc, #240]	; (8003bb4 <_tx_mutex_put+0x2c4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	4a3b      	ldr	r2, [pc, #236]	; (8003bb4 <_tx_mutex_put+0x2c4>)
 8003ac8:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8003aca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003acc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ad0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8003ad4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d203      	bcs.n	8003ae8 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8003ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ae4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d920      	bls.n	8003b32 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d11c      	bne.n	8003b32 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8003af8:	4b2e      	ldr	r3, [pc, #184]	; (8003bb4 <_tx_mutex_put+0x2c4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	4a2d      	ldr	r2, [pc, #180]	; (8003bb4 <_tx_mutex_put+0x2c4>)
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b06:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	f383 8810 	msr	PRIMASK, r3
}
 8003b0e:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff fd6f 	bl	80035f4 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003b16:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1a:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8003b20:	b672      	cpsid	i
    return(int_posture);
 8003b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8003b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8003b28:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <_tx_mutex_put+0x2c4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <_tx_mutex_put+0x2c4>)
 8003b30:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d13e      	bne.n	8003bb8 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8003b3a:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <_tx_mutex_put+0x2c4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	4a1c      	ldr	r2, [pc, #112]	; (8003bb4 <_tx_mutex_put+0x2c4>)
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4c:	f383 8810 	msr	PRIMASK, r3
}
 8003b50:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d006      	beq.n	8003b74 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fdf2 	bl	8003758 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003b74:	f3ef 8310 	mrs	r3, PRIMASK
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8003b7c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003b7e:	b672      	cpsid	i
    return(int_posture);
 8003b80:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8003b82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <_tx_mutex_put+0x2c4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <_tx_mutex_put+0x2c4>)
 8003b8e:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ba2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8003ba4:	f001 f8be 	bl	8004d24 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bae:	e0bd      	b.n	8003d2c <_tx_mutex_put+0x43c>
 8003bb0:	20000148 	.word	0x20000148
 8003bb4:	20000144 	.word	0x20000144
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d10a      	bne.n	8003bdc <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8003bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8003bdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003be2:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8003be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8003bea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8003bfe:	e016      	b.n	8003c2e <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8003c00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8003c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8003c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8003c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8003c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c34:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c42:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	1e5a      	subs	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8003c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	619a      	str	r2, [r3, #24]
 8003c60:	e00e      	b.n	8003c80 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8003c62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c6c:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8003c6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c72:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8003c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c78:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8003c7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c7e:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c82:	2200      	movs	r2, #0
 8003c84:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8003c86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8003c8e:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <_tx_mutex_put+0x448>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3301      	adds	r3, #1
 8003c94:	4a28      	ldr	r2, [pc, #160]	; (8003d38 <_tx_mutex_put+0x448>)
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c9c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f383 8810 	msr	PRIMASK, r3
}
 8003ca4:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d12d      	bne.n	8003d0a <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01c      	beq.n	8003cf0 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff fc9c 	bl	80035f4 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc0:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003cc2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003cc4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003cc6:	b672      	cpsid	i
    return(int_posture);
 8003cc8:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8003cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8003cd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8003cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ce2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ce6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f383 8810 	msr	PRIMASK, r3
}
 8003cee:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8003cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d005      	beq.n	8003d0a <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8003cfe:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003d02:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003d06:	f7ff fd27 	bl	8003758 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8003d0a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003d0c:	f001 f844 	bl	8004d98 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d16:	e009      	b.n	8003d2c <_tx_mutex_put+0x43c>
 8003d18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d1c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f383 8810 	msr	PRIMASK, r3
}
 8003d24:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8003d26:	231e      	movs	r3, #30
 8003d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8003d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3798      	adds	r7, #152	; 0x98
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000144 	.word	0x20000144

08003d3c <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08e      	sub	sp, #56	; 0x38
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003d46:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4a:	623b      	str	r3, [r7, #32]
    return(posture);
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8003d4e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003d50:	b672      	cpsid	i
    return(int_posture);
 8003d52:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d5a:	4a37      	ldr	r2, [pc, #220]	; (8003e38 <_tx_queue_cleanup+0xfc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d161      	bne.n	8003e24 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d15b      	bne.n	8003e24 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d70:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d055      	beq.n	8003e24 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2f      	ldr	r2, [pc, #188]	; (8003e3c <_tx_queue_cleanup+0x100>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d150      	bne.n	8003e24 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d04c      	beq.n	8003e24 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	2200      	movs	r2, #0
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28
 8003dac:	e013      	b.n	8003dd6 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbe:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d102      	bne.n	8003dd6 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd4:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d122      	bne.n	8003e24 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	220b      	movs	r2, #11
 8003dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003dee:	e003      	b.n	8003df8 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	220a      	movs	r2, #10
 8003df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8003df8:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <_tx_queue_cleanup+0x104>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	4a10      	ldr	r2, [pc, #64]	; (8003e40 <_tx_queue_cleanup+0x104>)
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e04:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f383 8810 	msr	PRIMASK, r3
}
 8003e0c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 ffc2 	bl	8004d98 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003e14:	f3ef 8310 	mrs	r3, PRIMASK
 8003e18:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003e1a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003e1c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003e1e:	b672      	cpsid	i
    return(int_posture);
 8003e20:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8003e22:	637b      	str	r3, [r7, #52]	; 0x34
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f383 8810 	msr	PRIMASK, r3
}
 8003e2e:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8003e30:	bf00      	nop
 8003e32:	3738      	adds	r7, #56	; 0x38
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	08003d3d 	.word	0x08003d3d
 8003e3c:	51554555 	.word	0x51554555
 8003e40:	20000144 	.word	0x20000144

08003e44 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08c      	sub	sp, #48	; 0x30
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8003e52:	223c      	movs	r2, #60	; 0x3c
 8003e54:	2100      	movs	r1, #0
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f002 ff7a 	bl	8006d50 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	fb02 f303 	mul.w	r3, r2, r3
 8003e7c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	441a      	add	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea2:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea8:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8003eae:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003eb0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003eb2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003eb4:	b672      	cpsid	i
    return(int_posture);
 8003eb6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <_tx_queue_create+0xdc>)
 8003ebe:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8003ec0:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <_tx_queue_create+0xe0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d109      	bne.n	8003edc <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8003ec8:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <_tx_queue_create+0xe4>)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8003eda:	e011      	b.n	8003f00 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8003edc:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <_tx_queue_create+0xe4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee6:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a3a      	ldr	r2, [r7, #32]
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <_tx_queue_create+0xe0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	4a07      	ldr	r2, [pc, #28]	; (8003f24 <_tx_queue_create+0xe0>)
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f383 8810 	msr	PRIMASK, r3
}
 8003f14:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3730      	adds	r7, #48	; 0x30
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	51554555 	.word	0x51554555
 8003f24:	20000084 	.word	0x20000084
 8003f28:	200000a4 	.word	0x200000a4

08003f2c <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b096      	sub	sp, #88	; 0x58
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f40:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8003f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8003f46:	b672      	cpsid	i
    return(int_posture);
 8003f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8003f4a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8136 	beq.w	80041c8 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8003f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d13c      	bne.n	8003fdc <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8003f72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f74:	1d13      	adds	r3, r2, #4
 8003f76:	657b      	str	r3, [r7, #84]	; 0x54
 8003f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f7a:	1d19      	adds	r1, r3, #4
 8003f7c:	6539      	str	r1, [r7, #80]	; 0x50
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d90e      	bls.n	8003fa6 <_tx_queue_receive+0x7a>
 8003f88:	e007      	b.n	8003f9a <_tx_queue_receive+0x6e>
 8003f8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f8c:	1d13      	adds	r3, r2, #4
 8003f8e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f92:	1d19      	adds	r1, r3, #4
 8003f94:	6539      	str	r1, [r7, #80]	; 0x50
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f1      	bne.n	8003f8a <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d102      	bne.n	8003fb6 <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fba:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	1e5a      	subs	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	611a      	str	r2, [r3, #16]
 8003fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	f383 8810 	msr	PRIMASK, r3
}
 8003fda:	e163      	b.n	80042a4 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d153      	bne.n	8004094 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8003fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff0:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8003ffc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ffe:	1d13      	adds	r3, r2, #4
 8004000:	657b      	str	r3, [r7, #84]	; 0x54
 8004002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004004:	1d19      	adds	r1, r3, #4
 8004006:	6539      	str	r1, [r7, #80]	; 0x50
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d90e      	bls.n	8004030 <_tx_queue_receive+0x104>
 8004012:	e007      	b.n	8004024 <_tx_queue_receive+0xf8>
 8004014:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004016:	1d13      	adds	r3, r2, #4
 8004018:	657b      	str	r3, [r7, #84]	; 0x54
 800401a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800401c:	1d19      	adds	r1, r3, #4
 800401e:	6539      	str	r1, [r7, #80]	; 0x50
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004026:	3b01      	subs	r3, #1
 8004028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800402a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f1      	bne.n	8004014 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8004030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004032:	3b01      	subs	r3, #1
 8004034:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8004036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d103      	bne.n	8004044 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
 8004042:	e00e      	b.n	8004062 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8004044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800404e:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8004050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800405a:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004060:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406a:	2200      	movs	r2, #0
 800406c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800406e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004070:	2200      	movs	r2, #0
 8004072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8004076:	4b8e      	ldr	r3, [pc, #568]	; (80042b0 <_tx_queue_receive+0x384>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	4a8c      	ldr	r2, [pc, #560]	; (80042b0 <_tx_queue_receive+0x384>)
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	f383 8810 	msr	PRIMASK, r3
}
 800408a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800408c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800408e:	f000 fe83 	bl	8004d98 <_tx_thread_system_resume>
 8004092:	e107      	b.n	80042a4 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80040a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040a6:	1d13      	adds	r3, r2, #4
 80040a8:	657b      	str	r3, [r7, #84]	; 0x54
 80040aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ac:	1d19      	adds	r1, r3, #4
 80040ae:	6539      	str	r1, [r7, #80]	; 0x50
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d90e      	bls.n	80040d8 <_tx_queue_receive+0x1ac>
 80040ba:	e007      	b.n	80040cc <_tx_queue_receive+0x1a0>
 80040bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040be:	1d13      	adds	r3, r2, #4
 80040c0:	657b      	str	r3, [r7, #84]	; 0x54
 80040c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c4:	1d19      	adds	r1, r3, #4
 80040c6:	6539      	str	r1, [r7, #80]	; 0x50
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ce:	3b01      	subs	r3, #1
 80040d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f1      	bne.n	80040bc <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040de:	429a      	cmp	r2, r3
 80040e0:	d102      	bne.n	80040e8 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040ec:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 80040ee:	4b70      	ldr	r3, [pc, #448]	; (80042b0 <_tx_queue_receive+0x384>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	4a6e      	ldr	r2, [pc, #440]	; (80042b0 <_tx_queue_receive+0x384>)
 80040f6:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 80040f8:	4b6d      	ldr	r3, [pc, #436]	; (80042b0 <_tx_queue_receive+0x384>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	4a6c      	ldr	r2, [pc, #432]	; (80042b0 <_tx_queue_receive+0x384>)
 8004100:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8004102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004106:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8004114:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004116:	1d13      	adds	r3, r2, #4
 8004118:	657b      	str	r3, [r7, #84]	; 0x54
 800411a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411c:	1d19      	adds	r1, r3, #4
 800411e:	6539      	str	r1, [r7, #80]	; 0x50
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d90e      	bls.n	8004148 <_tx_queue_receive+0x21c>
 800412a:	e007      	b.n	800413c <_tx_queue_receive+0x210>
 800412c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800412e:	1d13      	adds	r3, r2, #4
 8004130:	657b      	str	r3, [r7, #84]	; 0x54
 8004132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004134:	1d19      	adds	r1, r3, #4
 8004136:	6539      	str	r1, [r7, #80]	; 0x50
 8004138:	6812      	ldr	r2, [r2, #0]
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413e:	3b01      	subs	r3, #1
 8004140:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f1      	bne.n	800412c <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800414e:	429a      	cmp	r2, r3
 8004150:	d102      	bne.n	8004158 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800415c:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8004164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004166:	3b01      	subs	r3, #1
 8004168:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800416a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d103      	bne.n	8004178 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	629a      	str	r2, [r3, #40]	; 0x28
 8004176:	e00e      	b.n	8004196 <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8004178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004182:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8004184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800418e:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8004190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004194:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800419c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419e:	2200      	movs	r2, #0
 80041a0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80041a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a4:	2200      	movs	r2, #0
 80041a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80041aa:	4b41      	ldr	r3, [pc, #260]	; (80042b0 <_tx_queue_receive+0x384>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3301      	adds	r3, #1
 80041b0:	4a3f      	ldr	r2, [pc, #252]	; (80042b0 <_tx_queue_receive+0x384>)
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	f383 8810 	msr	PRIMASK, r3
}
 80041be:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 80041c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041c2:	f000 fde9 	bl	8004d98 <_tx_thread_system_resume>
 80041c6:	e06d      	b.n	80042a4 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d062      	beq.n	8004294 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80041ce:	4b38      	ldr	r3, [pc, #224]	; (80042b0 <_tx_queue_receive+0x384>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d008      	beq.n	80041e8 <_tx_queue_receive+0x2bc>
 80041d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	f383 8810 	msr	PRIMASK, r3
}
 80041e0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 80041e2:	230a      	movs	r3, #10
 80041e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e6:	e05d      	b.n	80042a4 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <_tx_queue_receive+0x388>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 80041ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f0:	4a31      	ldr	r2, [pc, #196]	; (80042b8 <_tx_queue_receive+0x38c>)
 80041f2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 80041f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 80041fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8004200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004202:	2200      	movs	r2, #0
 8004204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8004208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004212:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8004216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004220:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8004222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004226:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8004228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800422a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800422c:	675a      	str	r2, [r3, #116]	; 0x74
 800422e:	e011      	b.n	8004254 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8004236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800423a:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004240:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8004242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004246:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8004248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800424c:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004252:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8004254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800425c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425e:	2205      	movs	r2, #5
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004264:	2201      	movs	r2, #1
 8004266:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8004268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <_tx_queue_receive+0x384>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3301      	adds	r3, #1
 8004274:	4a0e      	ldr	r2, [pc, #56]	; (80042b0 <_tx_queue_receive+0x384>)
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800427a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f383 8810 	msr	PRIMASK, r3
}
 8004282:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8004284:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004286:	f000 fe9b 	bl	8004fc0 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800428a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
 8004292:	e007      	b.n	80042a4 <_tx_queue_receive+0x378>
 8004294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004296:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f383 8810 	msr	PRIMASK, r3
}
 800429e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 80042a0:	230a      	movs	r3, #10
 80042a2:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 80042a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3758      	adds	r7, #88	; 0x58
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000144 	.word	0x20000144
 80042b4:	20000148 	.word	0x20000148
 80042b8:	08003d3d 	.word	0x08003d3d

080042bc <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b096      	sub	sp, #88	; 0x58
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80042c8:	2300      	movs	r3, #0
 80042ca:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80042cc:	f3ef 8310 	mrs	r3, PRIMASK
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80042d4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80042d6:	b672      	cpsid	i
    return(int_posture);
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 80042da:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80af 	beq.w	800444a <_tx_queue_send+0x18e>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80042ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d147      	bne.n	8004382 <_tx_queue_send+0xc6>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	1e5a      	subs	r2, r3, #1
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  queue_ptr -> tx_queue_write;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8004316:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004318:	1d13      	adds	r3, r2, #4
 800431a:	657b      	str	r3, [r7, #84]	; 0x54
 800431c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800431e:	1d19      	adds	r1, r3, #4
 8004320:	6539      	str	r1, [r7, #80]	; 0x50
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d90e      	bls.n	800434a <_tx_queue_send+0x8e>
 800432c:	e007      	b.n	800433e <_tx_queue_send+0x82>
 800432e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004330:	1d13      	adds	r3, r2, #4
 8004332:	657b      	str	r3, [r7, #84]	; 0x54
 8004334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004336:	1d19      	adds	r1, r3, #4
 8004338:	6539      	str	r1, [r7, #80]	; 0x50
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004340:	3b01      	subs	r3, #1
 8004342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f1      	bne.n	800432e <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004350:	429a      	cmp	r2, r3
 8004352:	d102      	bne.n	800435a <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800435e:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	633b      	str	r3, [r7, #48]	; 0x30
 8004366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	f383 8810 	msr	PRIMASK, r3
}
 8004370:	bf00      	nop
            TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (queue_send_notify != TX_NULL)
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80e4 	beq.w	8004542 <_tx_queue_send+0x286>
            {

                /* Call application queue send notification.  */
                (queue_send_notify)(queue_ptr);
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	4798      	blx	r3
 8004380:	e0df      	b.n	8004542 <_tx_queue_send+0x286>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8004388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438a:	3b01      	subs	r3, #1
 800438c:	643b      	str	r3, [r7, #64]	; 0x40
            if (suspended_count == TX_NO_SUSPENSIONS)
 800438e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d103      	bne.n	800439c <_tx_queue_send+0xe0>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	629a      	str	r2, [r3, #40]	; 0x28
 800439a:	e012      	b.n	80043c2 <_tx_queue_send+0x106>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800439c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80043a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	63bb      	str	r3, [r7, #56]	; 0x38
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80043b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b4:	637b      	str	r3, [r7, #52]	; 0x34
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ba:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 80043bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043c0:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80043c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ca:	2200      	movs	r2, #0
 80043cc:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80043d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d6:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80043de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043e0:	1d13      	adds	r3, r2, #4
 80043e2:	657b      	str	r3, [r7, #84]	; 0x54
 80043e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e6:	1d19      	adds	r1, r3, #4
 80043e8:	6539      	str	r1, [r7, #80]	; 0x50
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d90e      	bls.n	8004412 <_tx_queue_send+0x156>
 80043f4:	e007      	b.n	8004406 <_tx_queue_send+0x14a>
 80043f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043f8:	1d13      	adds	r3, r2, #4
 80043fa:	657b      	str	r3, [r7, #84]	; 0x54
 80043fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043fe:	1d19      	adds	r1, r3, #4
 8004400:	6539      	str	r1, [r7, #80]	; 0x50
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004408:	3b01      	subs	r3, #1
 800440a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800440c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f1      	bne.n	80043f6 <_tx_queue_send+0x13a>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004414:	2200      	movs	r2, #0
 8004416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	633b      	str	r3, [r7, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8004420:	4b4a      	ldr	r3, [pc, #296]	; (800454c <_tx_queue_send+0x290>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3301      	adds	r3, #1
 8004426:	4a49      	ldr	r2, [pc, #292]	; (800454c <_tx_queue_send+0x290>)
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	f383 8810 	msr	PRIMASK, r3
}
 8004434:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8004436:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004438:	f000 fcae 	bl	8004d98 <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (queue_send_notify != TX_NULL)
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	2b00      	cmp	r3, #0
 8004440:	d07f      	beq.n	8004542 <_tx_queue_send+0x286>
            {

                /* Call application queue send notification.  */
                (queue_send_notify)(queue_ptr);
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	4798      	blx	r3
 8004448:	e07b      	b.n	8004542 <_tx_queue_send+0x286>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d070      	beq.n	8004532 <_tx_queue_send+0x276>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8004450:	4b3e      	ldr	r3, [pc, #248]	; (800454c <_tx_queue_send+0x290>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <_tx_queue_send+0x1ae>
 8004458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f383 8810 	msr	PRIMASK, r3
}
 8004462:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8004464:	230b      	movs	r3, #11
 8004466:	64bb      	str	r3, [r7, #72]	; 0x48
 8004468:	e06b      	b.n	8004542 <_tx_queue_send+0x286>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800446a:	4b39      	ldr	r3, [pc, #228]	; (8004550 <_tx_queue_send+0x294>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8004470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004472:	4a38      	ldr	r2, [pc, #224]	; (8004554 <_tx_queue_send+0x298>)
 8004474:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8004476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800447c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8004482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004484:	2200      	movs	r2, #0
 8004486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800448a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004494:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8004498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <_tx_queue_send+0x1f6>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80044a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044a8:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80044aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ae:	675a      	str	r2, [r3, #116]	; 0x74
 80044b0:	e011      	b.n	80044d6 <_tx_queue_send+0x21a>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80044b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044bc:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c2:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80044c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044c8:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80044ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ce:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044d4:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80044d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80044de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e0:	2205      	movs	r2, #5
 80044e2:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	633b      	str	r3, [r7, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80044ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ec:	2201      	movs	r2, #1
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80044f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80044f6:	4b15      	ldr	r3, [pc, #84]	; (800454c <_tx_queue_send+0x290>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	4a13      	ldr	r2, [pc, #76]	; (800454c <_tx_queue_send+0x290>)
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004502:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f383 8810 	msr	PRIMASK, r3
}
 800450a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800450c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800450e:	f000 fd57 	bl	8004fc0 <_tx_thread_system_suspend>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (thread_ptr -> tx_thread_suspend_status == TX_SUCCESS)
 8004512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004518:	2b00      	cmp	r3, #0
 800451a:	d105      	bne.n	8004528 <_tx_queue_send+0x26c>
            {

                /* Determine if there is a notify callback.  */
                if (queue_send_notify != TX_NULL)
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <_tx_queue_send+0x26c>
                {

                    /* Call application queue send notification.  */
                    (queue_send_notify)(queue_ptr);
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	4798      	blx	r3
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8004528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800452e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004530:	e007      	b.n	8004542 <_tx_queue_send+0x286>
 8004532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004534:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f383 8810 	msr	PRIMASK, r3
}
 800453c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800453e:	230b      	movs	r3, #11
 8004540:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 8004542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004544:	4618      	mov	r0, r3
 8004546:	3758      	adds	r7, #88	; 0x58
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000144 	.word	0x20000144
 8004550:	20000148 	.word	0x20000148
 8004554:	08003d3d 	.word	0x08003d3d

08004558 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08e      	sub	sp, #56	; 0x38
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004562:	f3ef 8310 	mrs	r3, PRIMASK
 8004566:	623b      	str	r3, [r7, #32]
    return(posture);
 8004568:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800456a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800456c:	b672      	cpsid	i
    return(int_posture);
 800456e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8004570:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004576:	4a33      	ldr	r2, [pc, #204]	; (8004644 <_tx_semaphore_cleanup+0xec>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d158      	bne.n	800462e <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d152      	bne.n	800462e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800458c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	2b00      	cmp	r3, #0
 8004592:	d04c      	beq.n	800462e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a2b      	ldr	r2, [pc, #172]	; (8004648 <_tx_semaphore_cleanup+0xf0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d147      	bne.n	800462e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d043      	beq.n	800462e <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	1e5a      	subs	r2, r3, #1
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	2200      	movs	r2, #0
 80045c6:	60da      	str	r2, [r3, #12]
 80045c8:	e013      	b.n	80045f2 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045da:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045e0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d102      	bne.n	80045f2 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045f0:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	2b06      	cmp	r3, #6
 80045f8:	d119      	bne.n	800462e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	220d      	movs	r2, #13
 80045fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8004602:	4b12      	ldr	r3, [pc, #72]	; (800464c <_tx_semaphore_cleanup+0xf4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3301      	adds	r3, #1
 8004608:	4a10      	ldr	r2, [pc, #64]	; (800464c <_tx_semaphore_cleanup+0xf4>)
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f383 8810 	msr	PRIMASK, r3
}
 8004616:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fbbd 	bl	8004d98 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800461e:	f3ef 8310 	mrs	r3, PRIMASK
 8004622:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004624:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004626:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004628:	b672      	cpsid	i
    return(int_posture);
 800462a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800462c:	637b      	str	r3, [r7, #52]	; 0x34
 800462e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004630:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f383 8810 	msr	PRIMASK, r3
}
 8004638:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800463a:	bf00      	nop
 800463c:	3738      	adds	r7, #56	; 0x38
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	08004559 	.word	0x08004559
 8004648:	53454d41 	.word	0x53454d41
 800464c:	20000144 	.word	0x20000144

08004650 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	; 0x28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800465c:	2220      	movs	r2, #32
 800465e:	2100      	movs	r1, #0
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f002 fb75 	bl	8006d50 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004672:	f3ef 8310 	mrs	r3, PRIMASK
 8004676:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004678:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800467a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800467c:	b672      	cpsid	i
    return(int_posture);
 800467e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8004680:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <_tx_semaphore_create+0x98>)
 8004686:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8004688:	4b18      	ldr	r3, [pc, #96]	; (80046ec <_tx_semaphore_create+0x9c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d109      	bne.n	80046a4 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8004690:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <_tx_semaphore_create+0xa0>)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	619a      	str	r2, [r3, #24]
 80046a2:	e011      	b.n	80046c8 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80046a4:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <_tx_semaphore_create+0xa0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 80046c8:	4b08      	ldr	r3, [pc, #32]	; (80046ec <_tx_semaphore_create+0x9c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	4a07      	ldr	r2, [pc, #28]	; (80046ec <_tx_semaphore_create+0x9c>)
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f383 8810 	msr	PRIMASK, r3
}
 80046dc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3728      	adds	r7, #40	; 0x28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	53454d41 	.word	0x53454d41
 80046ec:	20000098 	.word	0x20000098
 80046f0:	20000088 	.word	0x20000088

080046f4 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08e      	sub	sp, #56	; 0x38
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80046fe:	2300      	movs	r3, #0
 8004700:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004702:	f3ef 8310 	mrs	r3, PRIMASK
 8004706:	623b      	str	r3, [r7, #32]
    return(posture);
 8004708:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800470a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800470c:	b672      	cpsid	i
    return(int_posture);
 800470e:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8004710:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	1e5a      	subs	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f383 8810 	msr	PRIMASK, r3
}
 800472e:	e068      	b.n	8004802 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d05d      	beq.n	80047f2 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8004736:	4b35      	ldr	r3, [pc, #212]	; (800480c <_tx_semaphore_get+0x118>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d008      	beq.n	8004750 <_tx_semaphore_get+0x5c>
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f383 8810 	msr	PRIMASK, r3
}
 8004748:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800474a:	230d      	movs	r3, #13
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
 800474e:	e058      	b.n	8004802 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8004750:	4b2f      	ldr	r3, [pc, #188]	; (8004810 <_tx_semaphore_get+0x11c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <_tx_semaphore_get+0x120>)
 800475a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d109      	bne.n	800478c <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800477c:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004782:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004788:	675a      	str	r2, [r3, #116]	; 0x74
 800478a:	e011      	b.n	80047b0 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004796:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a2:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a8:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ae:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	2206      	movs	r2, #6
 80047be:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	2201      	movs	r2, #1
 80047c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <_tx_semaphore_get+0x118>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3301      	adds	r3, #1
 80047d2:	4a0e      	ldr	r2, [pc, #56]	; (800480c <_tx_semaphore_get+0x118>)
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f383 8810 	msr	PRIMASK, r3
}
 80047e0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80047e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047e4:	f000 fbec 	bl	8004fc0 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ee:	637b      	str	r3, [r7, #52]	; 0x34
 80047f0:	e007      	b.n	8004802 <_tx_semaphore_get+0x10e>
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f383 8810 	msr	PRIMASK, r3
}
 80047fc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 80047fe:	230d      	movs	r3, #13
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8004802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004804:	4618      	mov	r0, r3
 8004806:	3738      	adds	r7, #56	; 0x38
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000144 	.word	0x20000144
 8004810:	20000148 	.word	0x20000148
 8004814:	08004559 	.word	0x08004559

08004818 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08c      	sub	sp, #48	; 0x30
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004820:	f3ef 8310 	mrs	r3, PRIMASK
 8004824:	617b      	str	r3, [r7, #20]
    return(posture);
 8004826:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8004828:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800482a:	b672      	cpsid	i
    return(int_posture);
 800482c:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	2b00      	cmp	r3, #0
 800483a:	d114      	bne.n	8004866 <_tx_semaphore_put+0x4e>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	609a      	str	r2, [r3, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f383 8810 	msr	PRIMASK, r3
}
 8004856:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d040      	beq.n	80048e0 <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
 8004864:	e03c      	b.n	80048e0 <_tx_semaphore_put+0xc8>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	3b01      	subs	r3, #1
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	2b00      	cmp	r3, #0
 8004876:	d103      	bne.n	8004880 <_tx_semaphore_put+0x68>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	60da      	str	r2, [r3, #12]
 800487e:	e00e      	b.n	800489e <_tx_semaphore_put+0x86>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004884:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a3a      	ldr	r2, [r7, #32]
 800488a:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	6a3a      	ldr	r2, [r7, #32]
 800489c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a2:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	2200      	movs	r2, #0
 80048a8:	669a      	str	r2, [r3, #104]	; 0x68

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	61bb      	str	r3, [r7, #24]
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <_tx_semaphore_put+0xd4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a0b      	ldr	r2, [pc, #44]	; (80048ec <_tx_semaphore_put+0xd4>)
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f383 8810 	msr	PRIMASK, r3
}
 80048cc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80048ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048d0:	f000 fa62 	bl	8004d98 <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	4798      	blx	r3
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3730      	adds	r7, #48	; 0x30
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000144 	.word	0x20000144

080048f0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b092      	sub	sp, #72	; 0x48
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80048fe:	2300      	movs	r3, #0
 8004900:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8004902:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004904:	21ef      	movs	r1, #239	; 0xef
 8004906:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004908:	f002 fa22 	bl	8006d50 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800490c:	22b4      	movs	r2, #180	; 0xb4
 800490e:	2100      	movs	r1, #0
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f002 fa1d 	bl	8006d50 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800492c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004932:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004938:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800493e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004946:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800494c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8004956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800495a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800495c:	3b01      	subs	r3, #1
 800495e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004960:	4413      	add	r3, r2
 8004962:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004968:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800496e:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004974:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2203      	movs	r2, #3
 800497c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4a48      	ldr	r2, [pc, #288]	; (8004aa4 <_tx_thread_create+0x1b4>)
 8004982:	655a      	str	r2, [r3, #84]	; 0x54
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800498a:	4947      	ldr	r1, [pc, #284]	; (8004aa8 <_tx_thread_create+0x1b8>)
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7fb fcd7 	bl	8000340 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004992:	f3ef 8310 	mrs	r3, PRIMASK
 8004996:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800499a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800499c:	b672      	cpsid	i
    return(int_posture);
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80049a0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4a41      	ldr	r2, [pc, #260]	; (8004aac <_tx_thread_create+0x1bc>)
 80049a6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80049a8:	4b41      	ldr	r3, [pc, #260]	; (8004ab0 <_tx_thread_create+0x1c0>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10b      	bne.n	80049c8 <_tx_thread_create+0xd8>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80049b0:	4a40      	ldr	r2, [pc, #256]	; (8004ab4 <_tx_thread_create+0x1c4>)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80049c6:	e016      	b.n	80049f6 <_tx_thread_create+0x106>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80049c8:	4b3a      	ldr	r3, [pc, #232]	; (8004ab4 <_tx_thread_create+0x1c4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80049ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80049f6:	4b2e      	ldr	r3, [pc, #184]	; (8004ab0 <_tx_thread_create+0x1c0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3301      	adds	r3, #1
 80049fc:	4a2c      	ldr	r2, [pc, #176]	; (8004ab0 <_tx_thread_create+0x1c0>)
 80049fe:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004a00:	4b2d      	ldr	r3, [pc, #180]	; (8004ab8 <_tx_thread_create+0x1c8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	4a2c      	ldr	r2, [pc, #176]	; (8004ab8 <_tx_thread_create+0x1c8>)
 8004a08:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8004a0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d129      	bne.n	8004a64 <_tx_thread_create+0x174>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004a10:	f3ef 8305 	mrs	r3, IPSR
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8004a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8004a18:	4b28      	ldr	r3, [pc, #160]	; (8004abc <_tx_thread_create+0x1cc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004a22:	d30d      	bcc.n	8004a40 <_tx_thread_create+0x150>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8004a24:	4b26      	ldr	r3, [pc, #152]	; (8004ac0 <_tx_thread_create+0x1d0>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8004a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d009      	beq.n	8004a44 <_tx_thread_create+0x154>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8004a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8004a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a3e:	e001      	b.n	8004a44 <_tx_thread_create+0x154>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	647b      	str	r3, [r7, #68]	; 0x44
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	f383 8810 	msr	PRIMASK, r3
}
 8004a4e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f9a1 	bl	8004d98 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8004a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01e      	beq.n	8004a9a <_tx_thread_create+0x1aa>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8004a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a60:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a62:	e01a      	b.n	8004a9a <_tx_thread_create+0x1aa>
 8004a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a66:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f383 8810 	msr	PRIMASK, r3
}
 8004a6e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004a70:	f3ef 8310 	mrs	r3, PRIMASK
 8004a74:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004a76:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004a78:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004a7a:	b672      	cpsid	i
    return(int_posture);
 8004a7c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8004a7e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8004a80:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <_tx_thread_create+0x1c8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	4a0c      	ldr	r2, [pc, #48]	; (8004ab8 <_tx_thread_create+0x1c8>)
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f383 8810 	msr	PRIMASK, r3
}
 8004a94:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8004a96:	f000 f945 	bl	8004d24 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3748      	adds	r7, #72	; 0x48
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	08005385 	.word	0x08005385
 8004aa8:	08004b45 	.word	0x08004b45
 8004aac:	54485244 	.word	0x54485244
 8004ab0:	2000013c 	.word	0x2000013c
 8004ab4:	20000134 	.word	0x20000134
 8004ab8:	20000144 	.word	0x20000144
 8004abc:	2000000c 	.word	0x2000000c
 8004ac0:	2000014c 	.word	0x2000014c

08004ac4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8004ac8:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <_tx_thread_initialize+0x54>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8004ace:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <_tx_thread_initialize+0x58>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <_tx_thread_initialize+0x5c>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <_tx_thread_initialize+0x60>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004ae0:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <_tx_thread_initialize+0x64>)
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8004ae6:	2280      	movs	r2, #128	; 0x80
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4810      	ldr	r0, [pc, #64]	; (8004b2c <_tx_thread_initialize+0x68>)
 8004aec:	f002 f930 	bl	8006d50 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8004af0:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <_tx_thread_initialize+0x6c>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8004af6:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <_tx_thread_initialize+0x70>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8004afc:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <_tx_thread_initialize+0x74>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8004b02:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <_tx_thread_initialize+0x78>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
                            | (((ULONG) (TX_MAX_PRIORITIES/32)) << 24) 
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <_tx_thread_initialize+0x7c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    _tx_build_options =  _tx_build_options 
 8004b10:	4a0b      	ldr	r2, [pc, #44]	; (8004b40 <_tx_thread_initialize+0x7c>)
 8004b12:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8004b14:	bf00      	nop
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20000148 	.word	0x20000148
 8004b1c:	2000014c 	.word	0x2000014c
 8004b20:	20000130 	.word	0x20000130
 8004b24:	20000154 	.word	0x20000154
 8004b28:	20000150 	.word	0x20000150
 8004b2c:	200000ac 	.word	0x200000ac
 8004b30:	20000134 	.word	0x20000134
 8004b34:	2000013c 	.word	0x2000013c
 8004b38:	20000144 	.word	0x20000144
 8004b3c:	2000012c 	.word	0x2000012c
 8004b40:	20000138 	.word	0x20000138

08004b44 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08c      	sub	sp, #48	; 0x30
 8004b48:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004b4a:	4b33      	ldr	r3, [pc, #204]	; (8004c18 <_tx_thread_shell_entry+0xd4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004b50:	f3ef 8310 	mrs	r3, PRIMASK
 8004b54:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004b56:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004b58:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004b5a:	b672      	cpsid	i
    return(int_posture);
 8004b5c:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STARTED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Disable interrupts.  */
    TX_DISABLE
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f383 8810 	msr	PRIMASK, r3
}
 8004b72:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <_tx_thread_shell_entry+0x3e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b80:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8004b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8004b8e:	4b23      	ldr	r3, [pc, #140]	; (8004c1c <_tx_thread_shell_entry+0xd8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <_tx_thread_shell_entry+0x5a>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8004b96:	4b21      	ldr	r3, [pc, #132]	; (8004c1c <_tx_thread_shell_entry+0xd8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b9c:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004ba2:	607b      	str	r3, [r7, #4]
    return(posture);
 8004ba4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8004ba6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004ba8:	b672      	cpsid	i
    return(int_posture);
 8004baa:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8004bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	2201      	movs	r2, #1
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004bc8:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <_tx_thread_shell_entry+0xdc>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <_tx_thread_shell_entry+0xdc>)
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f383 8810 	msr	PRIMASK, r3
}
 8004bdc:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8004bde:	f3ef 8314 	mrs	r3, CONTROL
 8004be2:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8004be4:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8004be6:	623b      	str	r3, [r7, #32]
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	f023 0304 	bic.w	r3, r3, #4
 8004bee:	623b      	str	r3, [r7, #32]
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f383 8814 	msr	CONTROL, r3
}
 8004bfa:	bf00      	nop

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <_tx_thread_shell_entry+0xc6>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	2101      	movs	r1, #1
 8004c06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c08:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8004c0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c0c:	f000 f9d8 	bl	8004fc0 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004c10:	bf00      	nop
 8004c12:	3730      	adds	r7, #48	; 0x30
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000148 	.word	0x20000148
 8004c1c:	2000012c 	.word	0x2000012c
 8004c20:	20000144 	.word	0x20000144

08004c24 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08e      	sub	sp, #56	; 0x38
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c30:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8004c36:	b672      	cpsid	i
    return(int_posture);
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8004c3a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004c3c:	4b35      	ldr	r3, [pc, #212]	; (8004d14 <_tx_thread_sleep+0xf0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d108      	bne.n	8004c5a <_tx_thread_sleep+0x36>
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	f383 8810 	msr	PRIMASK, r3
}
 8004c52:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8004c54:	2313      	movs	r3, #19
 8004c56:	637b      	str	r3, [r7, #52]	; 0x34
 8004c58:	e056      	b.n	8004d08 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004c5a:	f3ef 8305 	mrs	r3, IPSR
 8004c5e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8004c60:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8004c62:	4b2d      	ldr	r3, [pc, #180]	; (8004d18 <_tx_thread_sleep+0xf4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <_tx_thread_sleep+0x5a>
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	f383 8810 	msr	PRIMASK, r3
}
 8004c76:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8004c78:	2313      	movs	r3, #19
 8004c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c7c:	e044      	b.n	8004d08 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <_tx_thread_sleep+0xf8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d108      	bne.n	8004c98 <_tx_thread_sleep+0x74>
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f383 8810 	msr	PRIMASK, r3
}
 8004c90:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8004c92:	2313      	movs	r3, #19
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34
 8004c96:	e037      	b.n	8004d08 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d108      	bne.n	8004cb0 <_tx_thread_sleep+0x8c>
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f383 8810 	msr	PRIMASK, r3
}
 8004ca8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8004caa:	2300      	movs	r3, #0
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
 8004cae:	e02b      	b.n	8004d08 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8004cb0:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <_tx_thread_sleep+0xfc>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d008      	beq.n	8004cca <_tx_thread_sleep+0xa6>
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f383 8810 	msr	PRIMASK, r3
}
 8004cc2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8004cc4:	2313      	movs	r3, #19
 8004cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc8:	e01e      	b.n	8004d08 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	2204      	movs	r2, #4
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <_tx_thread_sleep+0xfc>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	4a0d      	ldr	r2, [pc, #52]	; (8004d20 <_tx_thread_sleep+0xfc>)
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f383 8810 	msr	PRIMASK, r3
}
 8004cf8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8004cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cfc:	f000 f960 	bl	8004fc0 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d06:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8004d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3738      	adds	r7, #56	; 0x38
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000148 	.word	0x20000148
 8004d18:	2000000c 	.word	0x2000000c
 8004d1c:	200001ec 	.word	0x200001ec
 8004d20:	20000144 	.word	0x20000144

08004d24 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b089      	sub	sp, #36	; 0x24
 8004d28:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004d2a:	4b17      	ldr	r3, [pc, #92]	; (8004d88 <_tx_thread_system_preempt_check+0x64>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d121      	bne.n	8004d7a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8004d36:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <_tx_thread_system_preempt_check+0x68>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8004d3c:	4b14      	ldr	r3, [pc, #80]	; (8004d90 <_tx_thread_system_preempt_check+0x6c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d017      	beq.n	8004d7a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004d4a:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <_tx_thread_system_preempt_check+0x70>)
 8004d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d50:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004d52:	f3ef 8305 	mrs	r3, IPSR
 8004d56:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8004d58:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10c      	bne.n	8004d78 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d62:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004d64:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8004d66:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004d68:	b662      	cpsie	i
}
 8004d6a:	bf00      	nop
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f383 8810 	msr	PRIMASK, r3
}
 8004d76:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8004d78:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8004d7a:	bf00      	nop
 8004d7c:	3724      	adds	r7, #36	; 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000144 	.word	0x20000144
 8004d8c:	20000148 	.word	0x20000148
 8004d90:	2000014c 	.word	0x2000014c
 8004d94:	e000ed04 	.word	0xe000ed04

08004d98 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b096      	sub	sp, #88	; 0x58
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004da0:	f3ef 8310 	mrs	r3, PRIMASK
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8004da8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8004daa:	b672      	cpsid	i
    return(int_posture);
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8004dae:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	334c      	adds	r3, #76	; 0x4c
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fc1d 	bl	80055fc <_tx_timer_system_deactivate>
 8004dc2:	e002      	b.n	8004dca <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004dca:	4b75      	ldr	r3, [pc, #468]	; (8004fa0 <_tx_thread_system_resume+0x208>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	4a73      	ldr	r2, [pc, #460]	; (8004fa0 <_tx_thread_system_resume+0x208>)
 8004dd2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f040 8096 	bne.w	8004f0a <_tx_thread_system_resume+0x172>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 80aa 	beq.w	8004f3c <_tx_thread_system_resume+0x1a4>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f040 8085 	bne.w	8004efc <_tx_thread_system_resume+0x164>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8004dfe:	4a69      	ldr	r2, [pc, #420]	; (8004fa4 <_tx_thread_system_resume+0x20c>)
 8004e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e06:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8004e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d166      	bne.n	8004edc <_tx_thread_system_resume+0x144>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8004e0e:	4965      	ldr	r1, [pc, #404]	; (8004fa4 <_tx_thread_system_resume+0x20c>)
 8004e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8004e24:	2201      	movs	r2, #1
 8004e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8004e2e:	4b5e      	ldr	r3, [pc, #376]	; (8004fa8 <_tx_thread_system_resume+0x210>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e34:	4313      	orrs	r3, r2
 8004e36:	4a5c      	ldr	r2, [pc, #368]	; (8004fa8 <_tx_thread_system_resume+0x210>)
 8004e38:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8004e3a:	4b5c      	ldr	r3, [pc, #368]	; (8004fac <_tx_thread_system_resume+0x214>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d27b      	bcs.n	8004f3c <_tx_thread_system_resume+0x1a4>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8004e44:	4a59      	ldr	r2, [pc, #356]	; (8004fac <_tx_thread_system_resume+0x214>)
 8004e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e48:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8004e4a:	4b59      	ldr	r3, [pc, #356]	; (8004fb0 <_tx_thread_system_resume+0x218>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8004e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d103      	bne.n	8004e5e <_tx_thread_system_resume+0xc6>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8004e56:	4a56      	ldr	r2, [pc, #344]	; (8004fb0 <_tx_thread_system_resume+0x218>)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	e06e      	b.n	8004f3c <_tx_thread_system_resume+0x1a4>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8004e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d269      	bcs.n	8004f3c <_tx_thread_system_resume+0x1a4>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 8004e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d00b      	beq.n	8004e8c <_tx_thread_system_resume+0xf4>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 8004e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	2201      	movs	r2, #1
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	647b      	str	r3, [r7, #68]	; 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8004e80:	4b4c      	ldr	r3, [pc, #304]	; (8004fb4 <_tx_thread_system_resume+0x21c>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e86:	4313      	orrs	r3, r2
 8004e88:	4a4a      	ldr	r2, [pc, #296]	; (8004fb4 <_tx_thread_system_resume+0x21c>)
 8004e8a:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8004e8c:	4a48      	ldr	r2, [pc, #288]	; (8004fb0 <_tx_thread_system_resume+0x218>)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	f383 8810 	msr	PRIMASK, r3
}
 8004e9c:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004e9e:	4b40      	ldr	r3, [pc, #256]	; (8004fa0 <_tx_thread_system_resume+0x208>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8004ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d174      	bne.n	8004f94 <_tx_thread_system_resume+0x1fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004eaa:	4b43      	ldr	r3, [pc, #268]	; (8004fb8 <_tx_thread_system_resume+0x220>)
 8004eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004eb2:	f3ef 8305 	mrs	r3, IPSR
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10c      	bne.n	8004ed8 <_tx_thread_system_resume+0x140>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8004ec6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004ec8:	b662      	cpsie	i
}
 8004eca:	bf00      	nop
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f383 8810 	msr	PRIMASK, r3
}
 8004ed6:	bf00      	nop
}
 8004ed8:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8004eda:	e05b      	b.n	8004f94 <_tx_thread_system_resume+0x1fc>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8004edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8004ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8004ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ef8:	621a      	str	r2, [r3, #32]
 8004efa:	e01f      	b.n	8004f3c <_tx_thread_system_resume+0x1a4>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2203      	movs	r2, #3
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
 8004f08:	e018      	b.n	8004f3c <_tx_thread_system_resume+0x1a4>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d014      	beq.n	8004f3c <_tx_thread_system_resume+0x1a4>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d010      	beq.n	8004f3c <_tx_thread_system_resume+0x1a4>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <_tx_thread_system_resume+0x198>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f2e:	e005      	b.n	8004f3c <_tx_thread_system_resume+0x1a4>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2203      	movs	r2, #3
 8004f3a:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004f3c:	4b1f      	ldr	r3, [pc, #124]	; (8004fbc <_tx_thread_system_resume+0x224>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f44:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f383 8810 	msr	PRIMASK, r3
}
 8004f4c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004f4e:	4b18      	ldr	r3, [pc, #96]	; (8004fb0 <_tx_thread_system_resume+0x218>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d020      	beq.n	8004f9a <_tx_thread_system_resume+0x202>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004f58:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <_tx_thread_system_resume+0x208>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8004f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d11a      	bne.n	8004f9a <_tx_thread_system_resume+0x202>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004f64:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <_tx_thread_system_resume+0x220>)
 8004f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004f6c:	f3ef 8305 	mrs	r3, IPSR
 8004f70:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004f72:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10f      	bne.n	8004f98 <_tx_thread_system_resume+0x200>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004f78:	f3ef 8310 	mrs	r3, PRIMASK
 8004f7c:	613b      	str	r3, [r7, #16]
    return(posture);
 8004f7e:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8004f80:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004f82:	b662      	cpsie	i
}
 8004f84:	bf00      	nop
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f383 8810 	msr	PRIMASK, r3
}
 8004f90:	bf00      	nop
}
 8004f92:	e001      	b.n	8004f98 <_tx_thread_system_resume+0x200>
                                return;
 8004f94:	bf00      	nop
 8004f96:	e000      	b.n	8004f9a <_tx_thread_system_resume+0x202>
 8004f98:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8004f9a:	3758      	adds	r7, #88	; 0x58
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000144 	.word	0x20000144
 8004fa4:	200000ac 	.word	0x200000ac
 8004fa8:	20000130 	.word	0x20000130
 8004fac:	20000150 	.word	0x20000150
 8004fb0:	2000014c 	.word	0x2000014c
 8004fb4:	20000154 	.word	0x20000154
 8004fb8:	e000ed04 	.word	0xe000ed04
 8004fbc:	20000148 	.word	0x20000148

08004fc0 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b0a0      	sub	sp, #128	; 0x80
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004fc8:	4b5a      	ldr	r3, [pc, #360]	; (8005134 <_tx_thread_system_suspend+0x174>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	67bb      	str	r3, [r7, #120]	; 0x78
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004fce:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd2:	657b      	str	r3, [r7, #84]	; 0x54
    return(posture);
 8004fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int_posture = __get_interrupt_posture();
 8004fd6:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 8004fd8:	b672      	cpsid	i
    return(int_posture);
 8004fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8004fdc:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d112      	bne.n	800500c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fea:	677b      	str	r3, [r7, #116]	; 0x74

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8004fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d008      	beq.n	8005004 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8004ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff8:	d004      	beq.n	8005004 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	334c      	adds	r3, #76	; 0x4c
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fa9a 	bl	8005538 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	4a4b      	ldr	r2, [pc, #300]	; (8005138 <_tx_thread_system_suspend+0x178>)
 800500a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800500c:	4b4b      	ldr	r3, [pc, #300]	; (800513c <_tx_thread_system_suspend+0x17c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3b01      	subs	r3, #1
 8005012:	4a4a      	ldr	r2, [pc, #296]	; (800513c <_tx_thread_system_suspend+0x17c>)
 8005014:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	2b01      	cmp	r3, #1
 800501c:	f040 8122 	bne.w	8005264 <_tx_thread_system_suspend+0x2a4>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	673b      	str	r3, [r7, #112]	; 0x70

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8005032:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	d027      	beq.n	800508a <_tx_thread_system_suspend+0xca>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8005040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005042:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005044:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8005046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005048:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800504a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800504c:	4a3c      	ldr	r2, [pc, #240]	; (8005140 <_tx_thread_system_suspend+0x180>)
 800504e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	429a      	cmp	r2, r3
 8005058:	f040 808b 	bne.w	8005172 <_tx_thread_system_suspend+0x1b2>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800505c:	4938      	ldr	r1, [pc, #224]	; (8005140 <_tx_thread_system_suspend+0x180>)
 800505e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005060:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8005066:	4b37      	ldr	r3, [pc, #220]	; (8005144 <_tx_thread_system_suspend+0x184>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 8081 	beq.w	8005172 <_tx_thread_system_suspend+0x1b2>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8005070:	2201      	movs	r2, #1
 8005072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800507a:	4b32      	ldr	r3, [pc, #200]	; (8005144 <_tx_thread_system_suspend+0x184>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005080:	43db      	mvns	r3, r3
 8005082:	4013      	ands	r3, r2
 8005084:	4a2f      	ldr	r2, [pc, #188]	; (8005144 <_tx_thread_system_suspend+0x184>)
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	e073      	b.n	8005172 <_tx_thread_system_suspend+0x1b2>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800508a:	4a2d      	ldr	r2, [pc, #180]	; (8005140 <_tx_thread_system_suspend+0x180>)
 800508c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800508e:	2100      	movs	r1, #0
 8005090:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8005094:	2201      	movs	r2, #1
 8005096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800509e:	4b2a      	ldr	r3, [pc, #168]	; (8005148 <_tx_thread_system_suspend+0x188>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050a4:	43db      	mvns	r3, r3
 80050a6:	4013      	ands	r3, r2
 80050a8:	4a27      	ldr	r2, [pc, #156]	; (8005148 <_tx_thread_system_suspend+0x188>)
 80050aa:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 80050ac:	4b25      	ldr	r3, [pc, #148]	; (8005144 <_tx_thread_system_suspend+0x184>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <_tx_thread_system_suspend+0x10c>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 80050b4:	2201      	movs	r2, #1
 80050b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	66bb      	str	r3, [r7, #104]	; 0x68
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 80050be:	4b21      	ldr	r3, [pc, #132]	; (8005144 <_tx_thread_system_suspend+0x184>)
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050c4:	43db      	mvns	r3, r3
 80050c6:	4013      	ands	r3, r2
 80050c8:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <_tx_thread_system_suspend+0x184>)
 80050ca:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80050cc:	2300      	movs	r3, #0
 80050ce:	667b      	str	r3, [r7, #100]	; 0x64
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80050d0:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <_tx_thread_system_suspend+0x188>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	663b      	str	r3, [r7, #96]	; 0x60

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80050d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d13d      	bne.n	8005158 <_tx_thread_system_suspend+0x198>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80050dc:	4b1b      	ldr	r3, [pc, #108]	; (800514c <_tx_thread_system_suspend+0x18c>)
 80050de:	2220      	movs	r2, #32
 80050e0:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80050e2:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <_tx_thread_system_suspend+0x190>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ee:	f383 8810 	msr	PRIMASK, r3
}
 80050f2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80050f4:	4b11      	ldr	r3, [pc, #68]	; (800513c <_tx_thread_system_suspend+0x17c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (combined_flags == ((ULONG) 0))
 80050fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 80db 	bne.w	80052b8 <_tx_thread_system_suspend+0x2f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005102:	4b14      	ldr	r3, [pc, #80]	; (8005154 <_tx_thread_system_suspend+0x194>)
 8005104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005108:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800510a:	f3ef 8305 	mrs	r3, IPSR
 800510e:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 8005110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    if (__get_ipsr_value() == 0)
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10c      	bne.n	8005130 <_tx_thread_system_suspend+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005116:	f3ef 8310 	mrs	r3, PRIMASK
 800511a:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 800511c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        interrupt_save = __get_interrupt_posture();
 800511e:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005120:	b662      	cpsie	i
}
 8005122:	bf00      	nop
 8005124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800512a:	f383 8810 	msr	PRIMASK, r3
}
 800512e:	bf00      	nop
}
 8005130:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8005132:	e0c1      	b.n	80052b8 <_tx_thread_system_suspend+0x2f8>
 8005134:	20000148 	.word	0x20000148
 8005138:	200001e0 	.word	0x200001e0
 800513c:	20000144 	.word	0x20000144
 8005140:	200000ac 	.word	0x200000ac
 8005144:	20000154 	.word	0x20000154
 8005148:	20000130 	.word	0x20000130
 800514c:	20000150 	.word	0x20000150
 8005150:	2000014c 	.word	0x2000014c
 8005154:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8005158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800515a:	fa93 f3a3 	rbit	r3, r3
 800515e:	663b      	str	r3, [r7, #96]	; 0x60
 8005160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005162:	fab3 f383 	clz	r3, r3
 8005166:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8005168:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800516a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800516c:	4413      	add	r3, r2
 800516e:	4a56      	ldr	r2, [pc, #344]	; (80052c8 <_tx_thread_system_suspend+0x308>)
 8005170:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8005172:	4b56      	ldr	r3, [pc, #344]	; (80052cc <_tx_thread_system_suspend+0x30c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	d173      	bne.n	8005264 <_tx_thread_system_suspend+0x2a4>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800517c:	4b52      	ldr	r3, [pc, #328]	; (80052c8 <_tx_thread_system_suspend+0x308>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a53      	ldr	r2, [pc, #332]	; (80052d0 <_tx_thread_system_suspend+0x310>)
 8005182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005186:	4a51      	ldr	r2, [pc, #324]	; (80052cc <_tx_thread_system_suspend+0x30c>)
 8005188:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800518a:	4b52      	ldr	r3, [pc, #328]	; (80052d4 <_tx_thread_system_suspend+0x314>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d043      	beq.n	800521a <_tx_thread_system_suspend+0x25a>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8005192:	4b51      	ldr	r3, [pc, #324]	; (80052d8 <_tx_thread_system_suspend+0x318>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	4a4f      	ldr	r2, [pc, #316]	; (80052d8 <_tx_thread_system_suspend+0x318>)
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800519e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	f383 8810 	msr	PRIMASK, r3
}
 80051a6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80051a8:	f3ef 8310 	mrs	r3, PRIMASK
 80051ac:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80051ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80051b0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80051b2:	b672      	cpsid	i
    return(int_posture);
 80051b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 80051b6:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 80051b8:	4b47      	ldr	r3, [pc, #284]	; (80052d8 <_tx_thread_system_suspend+0x318>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3b01      	subs	r3, #1
 80051be:	4a46      	ldr	r2, [pc, #280]	; (80052d8 <_tx_thread_system_suspend+0x318>)
 80051c0:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 80051c2:	2300      	movs	r3, #0
 80051c4:	667b      	str	r3, [r7, #100]	; 0x64
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 80051c6:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <_tx_thread_system_suspend+0x314>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	663b      	str	r3, [r7, #96]	; 0x60

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80051cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051ce:	fa93 f3a3 	rbit	r3, r3
 80051d2:	663b      	str	r3, [r7, #96]	; 0x60
 80051d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051d6:	fab3 f383 	clz	r3, r3
 80051da:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 80051dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051e0:	4413      	add	r3, r2
 80051e2:	673b      	str	r3, [r7, #112]	; 0x70

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 80051e4:	4a3a      	ldr	r2, [pc, #232]	; (80052d0 <_tx_thread_system_suspend+0x310>)
 80051e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051ee:	4b36      	ldr	r3, [pc, #216]	; (80052c8 <_tx_thread_system_suspend+0x308>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d811      	bhi.n	800521a <_tx_thread_system_suspend+0x25a>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 80051f6:	4a36      	ldr	r2, [pc, #216]	; (80052d0 <_tx_thread_system_suspend+0x310>)
 80051f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051fe:	4a33      	ldr	r2, [pc, #204]	; (80052cc <_tx_thread_system_suspend+0x30c>)
 8005200:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8005202:	2201      	movs	r2, #1
 8005204:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800520c:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <_tx_thread_system_suspend+0x314>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005212:	43db      	mvns	r3, r3
 8005214:	4013      	ands	r3, r2
 8005216:	4a2f      	ldr	r2, [pc, #188]	; (80052d4 <_tx_thread_system_suspend+0x314>)
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	f383 8810 	msr	PRIMASK, r3
}
 8005224:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005226:	4b2c      	ldr	r3, [pc, #176]	; (80052d8 <_tx_thread_system_suspend+0x318>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (combined_flags == ((ULONG) 0))
 800522c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d144      	bne.n	80052bc <_tx_thread_system_suspend+0x2fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005232:	4b2a      	ldr	r3, [pc, #168]	; (80052dc <_tx_thread_system_suspend+0x31c>)
 8005234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005238:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800523a:	f3ef 8305 	mrs	r3, IPSR
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10c      	bne.n	8005260 <_tx_thread_system_suspend+0x2a0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005246:	f3ef 8310 	mrs	r3, PRIMASK
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800524e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005250:	b662      	cpsie	i
}
 8005252:	bf00      	nop
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f383 8810 	msr	PRIMASK, r3
}
 800525e:	bf00      	nop
}
 8005260:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8005262:	e02b      	b.n	80052bc <_tx_thread_system_suspend+0x2fc>
 8005264:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005266:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f383 8810 	msr	PRIMASK, r3
}
 800526e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8005270:	4b16      	ldr	r3, [pc, #88]	; (80052cc <_tx_thread_system_suspend+0x30c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005276:	429a      	cmp	r2, r3
 8005278:	d022      	beq.n	80052c0 <_tx_thread_system_suspend+0x300>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800527a:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <_tx_thread_system_suspend+0x318>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (combined_flags == ((ULONG) 0))
 8005280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d11c      	bne.n	80052c0 <_tx_thread_system_suspend+0x300>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005286:	4b15      	ldr	r3, [pc, #84]	; (80052dc <_tx_thread_system_suspend+0x31c>)
 8005288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800528e:	f3ef 8305 	mrs	r3, IPSR
 8005292:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005294:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10c      	bne.n	80052b4 <_tx_thread_system_suspend+0x2f4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800529a:	f3ef 8310 	mrs	r3, PRIMASK
 800529e:	613b      	str	r3, [r7, #16]
    return(posture);
 80052a0:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80052a2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80052a4:	b662      	cpsie	i
}
 80052a6:	bf00      	nop
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f383 8810 	msr	PRIMASK, r3
}
 80052b2:	bf00      	nop
}
 80052b4:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80052b6:	e003      	b.n	80052c0 <_tx_thread_system_suspend+0x300>
                return;
 80052b8:	bf00      	nop
 80052ba:	e002      	b.n	80052c2 <_tx_thread_system_suspend+0x302>
            return;
 80052bc:	bf00      	nop
 80052be:	e000      	b.n	80052c2 <_tx_thread_system_suspend+0x302>
    return;
 80052c0:	bf00      	nop
}
 80052c2:	3780      	adds	r7, #128	; 0x80
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000150 	.word	0x20000150
 80052cc:	2000014c 	.word	0x2000014c
 80052d0:	200000ac 	.word	0x200000ac
 80052d4:	20000154 	.word	0x20000154
 80052d8:	20000144 	.word	0x20000144
 80052dc:	e000ed04 	.word	0xe000ed04

080052e0 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80052e6:	4b21      	ldr	r3, [pc, #132]	; (800536c <_tx_thread_time_slice+0x8c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80052ec:	f3ef 8310 	mrs	r3, PRIMASK
 80052f0:	60fb      	str	r3, [r7, #12]
    return(posture);
 80052f2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80052f4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80052f6:	b672      	cpsid	i
    return(int_posture);
 80052f8:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80052fa:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80052fc:	4b1c      	ldr	r3, [pc, #112]	; (8005370 <_tx_thread_time_slice+0x90>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d024      	beq.n	8005352 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	2b00      	cmp	r3, #0
 800530e:	d120      	bne.n	8005352 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	4a15      	ldr	r2, [pc, #84]	; (8005374 <_tx_thread_time_slice+0x94>)
 800531e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	429a      	cmp	r2, r3
 8005328:	d013      	beq.n	8005352 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	429a      	cmp	r2, r3
 8005334:	d10d      	bne.n	8005352 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	6a12      	ldr	r2, [r2, #32]
 800533e:	490e      	ldr	r1, [pc, #56]	; (8005378 <_tx_thread_time_slice+0x98>)
 8005340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <_tx_thread_time_slice+0x9c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a0b      	ldr	r2, [pc, #44]	; (8005378 <_tx_thread_time_slice+0x98>)
 800534a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534e:	4a0c      	ldr	r2, [pc, #48]	; (8005380 <_tx_thread_time_slice+0xa0>)
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f383 8810 	msr	PRIMASK, r3
}
 800535c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	20000148 	.word	0x20000148
 8005370:	200006b8 	.word	0x200006b8
 8005374:	200001e0 	.word	0x200001e0
 8005378:	200000ac 	.word	0x200000ac
 800537c:	20000150 	.word	0x20000150
 8005380:	2000014c 	.word	0x2000014c

08005384 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005390:	f3ef 8310 	mrs	r3, PRIMASK
 8005394:	617b      	str	r3, [r7, #20]
    return(posture);
 8005396:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8005398:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800539a:	b672      	cpsid	i
    return(int_posture);
 800539c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800539e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d10e      	bne.n	80053c6 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80053a8:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <_tx_thread_timeout+0x74>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3301      	adds	r3, #1
 80053ae:	4a12      	ldr	r2, [pc, #72]	; (80053f8 <_tx_thread_timeout+0x74>)
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f383 8810 	msr	PRIMASK, r3
}
 80053bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80053be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053c0:	f7ff fcea 	bl	8004d98 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80053c4:	e013      	b.n	80053ee <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ca:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f383 8810 	msr	PRIMASK, r3
}
 80053de:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	69b9      	ldr	r1, [r7, #24]
 80053ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ec:	4798      	blx	r3
}
 80053ee:	bf00      	nop
 80053f0:	3728      	adds	r7, #40	; 0x28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000144 	.word	0x20000144

080053fc <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005402:	f3ef 8310 	mrs	r3, PRIMASK
 8005406:	607b      	str	r3, [r7, #4]
    return(posture);
 8005408:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800540a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800540c:	b672      	cpsid	i
    return(int_posture);
 800540e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8005410:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8005412:	4b09      	ldr	r3, [pc, #36]	; (8005438 <_tx_timer_expiration_process+0x3c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3301      	adds	r3, #1
 8005418:	4a07      	ldr	r2, [pc, #28]	; (8005438 <_tx_timer_expiration_process+0x3c>)
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f383 8810 	msr	PRIMASK, r3
}
 8005426:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8005428:	4804      	ldr	r0, [pc, #16]	; (800543c <_tx_timer_expiration_process+0x40>)
 800542a:	f7ff fcb5 	bl	8004d98 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800542e:	bf00      	nop
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20000144 	.word	0x20000144
 800543c:	200001ec 	.word	0x200001ec

08005440 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b089      	sub	sp, #36	; 0x24
 8005444:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8005446:	4b28      	ldr	r3, [pc, #160]	; (80054e8 <_tx_timer_initialize+0xa8>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800544c:	4b27      	ldr	r3, [pc, #156]	; (80054ec <_tx_timer_initialize+0xac>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005452:	4b27      	ldr	r3, [pc, #156]	; (80054f0 <_tx_timer_initialize+0xb0>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8005458:	4b26      	ldr	r3, [pc, #152]	; (80054f4 <_tx_timer_initialize+0xb4>)
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800545e:	4b26      	ldr	r3, [pc, #152]	; (80054f8 <_tx_timer_initialize+0xb8>)
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005464:	2280      	movs	r2, #128	; 0x80
 8005466:	2100      	movs	r1, #0
 8005468:	4824      	ldr	r0, [pc, #144]	; (80054fc <_tx_timer_initialize+0xbc>)
 800546a:	f001 fc71 	bl	8006d50 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800546e:	4b24      	ldr	r3, [pc, #144]	; (8005500 <_tx_timer_initialize+0xc0>)
 8005470:	4a22      	ldr	r2, [pc, #136]	; (80054fc <_tx_timer_initialize+0xbc>)
 8005472:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8005474:	4b23      	ldr	r3, [pc, #140]	; (8005504 <_tx_timer_initialize+0xc4>)
 8005476:	4a21      	ldr	r2, [pc, #132]	; (80054fc <_tx_timer_initialize+0xbc>)
 8005478:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800547a:	4b23      	ldr	r3, [pc, #140]	; (8005508 <_tx_timer_initialize+0xc8>)
 800547c:	4a23      	ldr	r2, [pc, #140]	; (800550c <_tx_timer_initialize+0xcc>)
 800547e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8005480:	4b21      	ldr	r3, [pc, #132]	; (8005508 <_tx_timer_initialize+0xc8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3304      	adds	r3, #4
 8005486:	4a20      	ldr	r2, [pc, #128]	; (8005508 <_tx_timer_initialize+0xc8>)
 8005488:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800548a:	4b21      	ldr	r3, [pc, #132]	; (8005510 <_tx_timer_initialize+0xd0>)
 800548c:	4a21      	ldr	r2, [pc, #132]	; (8005514 <_tx_timer_initialize+0xd4>)
 800548e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8005490:	4b21      	ldr	r3, [pc, #132]	; (8005518 <_tx_timer_initialize+0xd8>)
 8005492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005496:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8005498:	4b20      	ldr	r3, [pc, #128]	; (800551c <_tx_timer_initialize+0xdc>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800549e:	4b1c      	ldr	r3, [pc, #112]	; (8005510 <_tx_timer_initialize+0xd0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <_tx_timer_initialize+0xd8>)
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	491d      	ldr	r1, [pc, #116]	; (800551c <_tx_timer_initialize+0xdc>)
 80054a8:	6809      	ldr	r1, [r1, #0]
 80054aa:	481c      	ldr	r0, [pc, #112]	; (800551c <_tx_timer_initialize+0xdc>)
 80054ac:	6800      	ldr	r0, [r0, #0]
 80054ae:	2400      	movs	r4, #0
 80054b0:	9405      	str	r4, [sp, #20]
 80054b2:	2400      	movs	r4, #0
 80054b4:	9404      	str	r4, [sp, #16]
 80054b6:	9003      	str	r0, [sp, #12]
 80054b8:	9102      	str	r1, [sp, #8]
 80054ba:	9201      	str	r2, [sp, #4]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	4b18      	ldr	r3, [pc, #96]	; (8005520 <_tx_timer_initialize+0xe0>)
 80054c0:	4a18      	ldr	r2, [pc, #96]	; (8005524 <_tx_timer_initialize+0xe4>)
 80054c2:	4919      	ldr	r1, [pc, #100]	; (8005528 <_tx_timer_initialize+0xe8>)
 80054c4:	4819      	ldr	r0, [pc, #100]	; (800552c <_tx_timer_initialize+0xec>)
 80054c6:	f7ff fa13 	bl	80048f0 <_tx_thread_create>
 80054ca:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e5      	bne.n	800549e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80054d2:	4b17      	ldr	r3, [pc, #92]	; (8005530 <_tx_timer_initialize+0xf0>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80054d8:	4b16      	ldr	r3, [pc, #88]	; (8005534 <_tx_timer_initialize+0xf4>)
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd90      	pop	{r4, r7, pc}
 80054e6:	bf00      	nop
 80054e8:	200006bc 	.word	0x200006bc
 80054ec:	200001e0 	.word	0x200001e0
 80054f0:	200006b8 	.word	0x200006b8
 80054f4:	200001dc 	.word	0x200001dc
 80054f8:	200002a0 	.word	0x200002a0
 80054fc:	2000015c 	.word	0x2000015c
 8005500:	200002a4 	.word	0x200002a4
 8005504:	20000158 	.word	0x20000158
 8005508:	200001e8 	.word	0x200001e8
 800550c:	200001d8 	.word	0x200001d8
 8005510:	200006b0 	.word	0x200006b0
 8005514:	200002b0 	.word	0x200002b0
 8005518:	200002ac 	.word	0x200002ac
 800551c:	200001e4 	.word	0x200001e4
 8005520:	4154494d 	.word	0x4154494d
 8005524:	0800566d 	.word	0x0800566d
 8005528:	08006d78 	.word	0x08006d78
 800552c:	200001ec 	.word	0x200001ec
 8005530:	200002a8 	.word	0x200002a8
 8005534:	200006b4 	.word	0x200006b4

08005538 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005538:	b480      	push	{r7}
 800553a:	b089      	sub	sp, #36	; 0x24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d04a      	beq.n	80055e2 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005552:	d046      	beq.n	80055e2 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d142      	bne.n	80055e2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b20      	cmp	r3, #32
 8005560:	d902      	bls.n	8005568 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8005562:	231f      	movs	r3, #31
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	e002      	b.n	800556e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3b01      	subs	r3, #1
 800556c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800556e:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <_tx_timer_system_activate+0xb8>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800557a:	4b1e      	ldr	r3, [pc, #120]	; (80055f4 <_tx_timer_system_activate+0xbc>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	429a      	cmp	r2, r3
 8005582:	d30b      	bcc.n	800559c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8005584:	4b1b      	ldr	r3, [pc, #108]	; (80055f4 <_tx_timer_system_activate+0xbc>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	109b      	asrs	r3, r3, #2
 800558e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8005590:	4b19      	ldr	r3, [pc, #100]	; (80055f8 <_tx_timer_system_activate+0xc0>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	e011      	b.n	80055dc <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80055e2:	bf00      	nop
 80055e4:	3724      	adds	r7, #36	; 0x24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20000158 	.word	0x20000158
 80055f4:	200001e8 	.word	0x200001e8
 80055f8:	200002a4 	.word	0x200002a4

080055fc <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d026      	beq.n	800565e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	429a      	cmp	r2, r3
 800561c:	d108      	bne.n	8005630 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	429a      	cmp	r2, r3
 8005626:	d117      	bne.n	8005658 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	e013      	b.n	8005658 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	429a      	cmp	r2, r3
 800564a:	d105      	bne.n	8005658 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	619a      	str	r2, [r3, #24]
    }
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b098      	sub	sp, #96	; 0x60
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8005674:	2300      	movs	r3, #0
 8005676:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a73      	ldr	r2, [pc, #460]	; (8005848 <_tx_timer_thread_entry+0x1dc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	f040 80de 	bne.w	800583e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005682:	f3ef 8310 	mrs	r3, PRIMASK
 8005686:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8005688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800568c:	b672      	cpsid	i
    return(int_posture);
 800568e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8005690:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8005692:	4b6e      	ldr	r3, [pc, #440]	; (800584c <_tx_timer_thread_entry+0x1e0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f107 020c 	add.w	r2, r7, #12
 80056a6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80056a8:	4b68      	ldr	r3, [pc, #416]	; (800584c <_tx_timer_thread_entry+0x1e0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80056b0:	4b66      	ldr	r3, [pc, #408]	; (800584c <_tx_timer_thread_entry+0x1e0>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3304      	adds	r3, #4
 80056b6:	4a65      	ldr	r2, [pc, #404]	; (800584c <_tx_timer_thread_entry+0x1e0>)
 80056b8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80056ba:	4b64      	ldr	r3, [pc, #400]	; (800584c <_tx_timer_thread_entry+0x1e0>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b64      	ldr	r3, [pc, #400]	; (8005850 <_tx_timer_thread_entry+0x1e4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d103      	bne.n	80056ce <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80056c6:	4b63      	ldr	r3, [pc, #396]	; (8005854 <_tx_timer_thread_entry+0x1e8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a60      	ldr	r2, [pc, #384]	; (800584c <_tx_timer_thread_entry+0x1e0>)
 80056cc:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80056ce:	4b62      	ldr	r3, [pc, #392]	; (8005858 <_tx_timer_thread_entry+0x1ec>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056d6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	f383 8810 	msr	PRIMASK, r3
}
 80056de:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80056e0:	f3ef 8310 	mrs	r3, PRIMASK
 80056e4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80056ea:	b672      	cpsid	i
    return(int_posture);
 80056ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80056ee:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80056f0:	e07f      	b.n	80057f2 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8005700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005704:	429a      	cmp	r2, r3
 8005706:	d102      	bne.n	800570e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	e00e      	b.n	800572c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800570e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005718:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800571a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800571c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800571e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8005720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005722:	f107 020c 	add.w	r2, r7, #12
 8005726:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8005728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800572a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800572c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b20      	cmp	r3, #32
 8005732:	d911      	bls.n	8005758 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8005734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800573c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005746:	f107 0208 	add.w	r2, r7, #8
 800574a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800574c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800574e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005750:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8005752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005754:	60bb      	str	r3, [r7, #8]
 8005756:	e01a      	b.n	800578e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8005758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800575e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8005764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800576c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d009      	beq.n	8005788 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005776:	f107 0208 	add.w	r2, r7, #8
 800577a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800577c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800577e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005780:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8005782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	e002      	b.n	800578e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8005788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578a:	2200      	movs	r2, #0
 800578c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800578e:	4a33      	ldr	r2, [pc, #204]	; (800585c <_tx_timer_thread_entry+0x1f0>)
 8005790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	f383 8810 	msr	PRIMASK, r3
}
 800579e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80057a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80057a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80057aa:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80057ac:	f3ef 8310 	mrs	r3, PRIMASK
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80057b6:	b672      	cpsid	i
    return(int_posture);
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80057ba:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80057bc:	4b27      	ldr	r3, [pc, #156]	; (800585c <_tx_timer_thread_entry+0x1f0>)
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d105      	bne.n	80057d6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80057ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057cc:	2200      	movs	r2, #0
 80057ce:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80057d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80057d2:	f7ff feb1 	bl	8005538 <_tx_timer_system_activate>
 80057d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057d8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	f383 8810 	msr	PRIMASK, r3
}
 80057e0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80057e2:	f3ef 8310 	mrs	r3, PRIMASK
 80057e6:	623b      	str	r3, [r7, #32]
    return(posture);
 80057e8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80057ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80057ec:	b672      	cpsid	i
    return(int_posture);
 80057ee:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80057f0:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f47f af7c 	bne.w	80056f2 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80057fa:	4b17      	ldr	r3, [pc, #92]	; (8005858 <_tx_timer_thread_entry+0x1ec>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d116      	bne.n	8005830 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8005802:	4b17      	ldr	r3, [pc, #92]	; (8005860 <_tx_timer_thread_entry+0x1f4>)
 8005804:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005808:	2203      	movs	r2, #3
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800580c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800580e:	2201      	movs	r2, #1
 8005810:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8005812:	4b14      	ldr	r3, [pc, #80]	; (8005864 <_tx_timer_thread_entry+0x1f8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3301      	adds	r3, #1
 8005818:	4a12      	ldr	r2, [pc, #72]	; (8005864 <_tx_timer_thread_entry+0x1f8>)
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800581e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f383 8810 	msr	PRIMASK, r3
}
 8005826:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005828:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800582a:	f7ff fbc9 	bl	8004fc0 <_tx_thread_system_suspend>
 800582e:	e728      	b.n	8005682 <_tx_timer_thread_entry+0x16>
 8005830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005832:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f383 8810 	msr	PRIMASK, r3
}
 800583a:	bf00      	nop
            TX_DISABLE
 800583c:	e721      	b.n	8005682 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800583e:	bf00      	nop
 8005840:	3760      	adds	r7, #96	; 0x60
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	4154494d 	.word	0x4154494d
 800584c:	20000158 	.word	0x20000158
 8005850:	200001e8 	.word	0x200001e8
 8005854:	200002a4 	.word	0x200002a4
 8005858:	200001dc 	.word	0x200001dc
 800585c:	200002a0 	.word	0x200002a0
 8005860:	200001ec 	.word	0x200001ec
 8005864:	20000144 	.word	0x20000144

08005868 <_txe_block_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]

TX_THREAD       *current_thread;
#endif

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005874:	2300      	movs	r3, #0
 8005876:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid pool pointer.  */
    if (pool_ptr == TX_NULL)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d102      	bne.n	8005884 <_txe_block_allocate+0x1c>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800587e:	2302      	movs	r3, #2
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	e025      	b.n	80058d0 <_txe_block_allocate+0x68>
    }

    /* Check for an invalid pool pointer.  */
    else if (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a18      	ldr	r2, [pc, #96]	; (80058ec <_txe_block_allocate+0x84>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d002      	beq.n	8005894 <_txe_block_allocate+0x2c>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800588e:	2302      	movs	r3, #2
 8005890:	61fb      	str	r3, [r7, #28]
 8005892:	e01d      	b.n	80058d0 <_txe_block_allocate+0x68>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (block_ptr == TX_NULL)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <_txe_block_allocate+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800589a:	2303      	movs	r3, #3
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	e017      	b.n	80058d0 <_txe_block_allocate+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d014      	beq.n	80058d0 <_txe_block_allocate+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80058a6:	f3ef 8305 	mrs	r3, IPSR
 80058aa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80058ac:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80058ae:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <_txe_block_allocate+0x88>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <_txe_block_allocate+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80058b8:	2304      	movs	r3, #4
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	e008      	b.n	80058d0 <_txe_block_allocate+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80058be:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <_txe_block_allocate+0x8c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	4a0c      	ldr	r2, [pc, #48]	; (80058f8 <_txe_block_allocate+0x90>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d101      	bne.n	80058d0 <_txe_block_allocate+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80058cc:	2304      	movs	r3, #4
 80058ce:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d105      	bne.n	80058e2 <_txe_block_allocate+0x7a>
    {

        /* Call actual block allocate function.  */
        status =  _tx_block_allocate(pool_ptr, block_ptr, wait_option);
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f7fc faec 	bl	8001eb8 <_tx_block_allocate>
 80058e0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80058e2:	69fb      	ldr	r3, [r7, #28]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3720      	adds	r7, #32
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	424c4f43 	.word	0x424c4f43
 80058f0:	2000000c 	.word	0x2000000c
 80058f4:	20000148 	.word	0x20000148
 80058f8:	200001ec 	.word	0x200001ec

080058fc <_txe_block_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size,
                    VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b094      	sub	sp, #80	; 0x50
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800590a:	2300      	movs	r3, #0
 800590c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid pool pointer.  */
    if (pool_ptr == TX_NULL)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <_txe_block_pool_create+0x1e>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005914:	2302      	movs	r3, #2
 8005916:	647b      	str	r3, [r7, #68]	; 0x44
 8005918:	e07b      	b.n	8005a12 <_txe_block_pool_create+0x116>
    }

    /* Check for invalid control block size.  */
    else if (pool_control_block_size != (sizeof(TX_BLOCK_POOL)))
 800591a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800591c:	2b30      	cmp	r3, #48	; 0x30
 800591e:	d002      	beq.n	8005926 <_txe_block_pool_create+0x2a>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005920:	2302      	movs	r3, #2
 8005922:	647b      	str	r3, [r7, #68]	; 0x44
 8005924:	e075      	b.n	8005a12 <_txe_block_pool_create+0x116>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005926:	f3ef 8310 	mrs	r3, PRIMASK
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005930:	b672      	cpsid	i
    return(int_posture);
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005934:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005936:	4b3f      	ldr	r3, [pc, #252]	; (8005a34 <_txe_block_pool_create+0x138>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3301      	adds	r3, #1
 800593c:	4a3d      	ldr	r2, [pc, #244]	; (8005a34 <_txe_block_pool_create+0x138>)
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	f383 8810 	msr	PRIMASK, r3
}
 800594a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_block_pool_created_ptr;
 800594c:	4b3a      	ldr	r3, [pc, #232]	; (8005a38 <_txe_block_pool_create+0x13c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_block_pool_created_count; i++)
 8005952:	2300      	movs	r3, #0
 8005954:	643b      	str	r3, [r7, #64]	; 0x40
 8005956:	e009      	b.n	800596c <_txe_block_pool_create+0x70>
        {

            /* Determine if this block pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595c:	429a      	cmp	r2, r3
 800595e:	d00b      	beq.n	8005978 <_txe_block_pool_create+0x7c>
                break;
            }
            else
            {
                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_block_pool_created_next;
 8005960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005964:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_block_pool_created_count; i++)
 8005966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005968:	3301      	adds	r3, #1
 800596a:	643b      	str	r3, [r7, #64]	; 0x40
 800596c:	4b33      	ldr	r3, [pc, #204]	; (8005a3c <_txe_block_pool_create+0x140>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005972:	429a      	cmp	r2, r3
 8005974:	d3f0      	bcc.n	8005958 <_txe_block_pool_create+0x5c>
 8005976:	e000      	b.n	800597a <_txe_block_pool_create+0x7e>
                break;
 8005978:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800597a:	f3ef 8310 	mrs	r3, PRIMASK
 800597e:	623b      	str	r3, [r7, #32]
    return(posture);
 8005980:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005982:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005984:	b672      	cpsid	i
    return(int_posture);
 8005986:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005988:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800598a:	4b2a      	ldr	r3, [pc, #168]	; (8005a34 <_txe_block_pool_create+0x138>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3b01      	subs	r3, #1
 8005990:	4a28      	ldr	r2, [pc, #160]	; (8005a34 <_txe_block_pool_create+0x138>)
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	f383 8810 	msr	PRIMASK, r3
}
 800599e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80059a0:	f7ff f9c0 	bl	8004d24 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d102      	bne.n	80059b2 <_txe_block_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80059ac:	2302      	movs	r3, #2
 80059ae:	647b      	str	r3, [r7, #68]	; 0x44
 80059b0:	e02f      	b.n	8005a12 <_txe_block_pool_create+0x116>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <_txe_block_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80059b8:	2303      	movs	r3, #3
 80059ba:	647b      	str	r3, [r7, #68]	; 0x44
 80059bc:	e029      	b.n	8005a12 <_txe_block_pool_create+0x116>
        }
        else
        {

            /* Check for invalid pool size.  */
            if ((((block_size/(sizeof(void *)))*(sizeof(void *))) + (sizeof(void *))) >
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f023 0303 	bic.w	r3, r3, #3
 80059c4:	1d1a      	adds	r2, r3, #4
                                            ((pool_size/(sizeof(void *)))*(sizeof(void *))))
 80059c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c8:	f023 0303 	bic.w	r3, r3, #3
            if ((((block_size/(sizeof(void *)))*(sizeof(void *))) + (sizeof(void *))) >
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d902      	bls.n	80059d6 <_txe_block_pool_create+0xda>
            {

                /* Not enough memory for one block, return appropriate error.  */
                status =  TX_SIZE_ERROR;
 80059d0:	2305      	movs	r3, #5
 80059d2:	647b      	str	r3, [r7, #68]	; 0x44
 80059d4:	e01d      	b.n	8005a12 <_txe_block_pool_create+0x116>
            {

#ifndef TX_TIMER_PROCESS_IN_ISR

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 80059d6:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <_txe_block_pool_create+0x144>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	637b      	str	r3, [r7, #52]	; 0x34

                /* Check for invalid caller of this function.  First check for a calling thread.  */
                if (thread_ptr == &_tx_timer_thread)
 80059dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059de:	4a19      	ldr	r2, [pc, #100]	; (8005a44 <_txe_block_pool_create+0x148>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d101      	bne.n	80059e8 <_txe_block_pool_create+0xec>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80059e4:	2313      	movs	r3, #19
 80059e6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80059e8:	f3ef 8305 	mrs	r3, IPSR
 80059ec:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80059ee:	69ba      	ldr	r2, [r7, #24]
                }
#endif

                /* Check for interrupt call.  */
                if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80059f0:	4b15      	ldr	r3, [pc, #84]	; (8005a48 <_txe_block_pool_create+0x14c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <_txe_block_pool_create+0x116>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80059fa:	f3ef 8305 	mrs	r3, IPSR
 80059fe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005a00:	697a      	ldr	r2, [r7, #20]
                {

                    /* Now, make sure the call is from an interrupt and not initialization.  */
                    if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005a02:	4b11      	ldr	r3, [pc, #68]	; (8005a48 <_txe_block_pool_create+0x14c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005a0c:	d201      	bcs.n	8005a12 <_txe_block_pool_create+0x116>
                    {

                        /* Invalid caller of this function, return appropriate error code.  */
                        status =  TX_CALLER_ERROR;
 8005a0e:	2313      	movs	r3, #19
 8005a10:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d108      	bne.n	8005a2a <_txe_block_pool_create+0x12e>
    {

        /* Call actual block pool create function.  */
        status =  _tx_block_pool_create(pool_ptr, name_ptr, block_size, pool_start, pool_size);
 8005a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7fc fb76 	bl	8002114 <_tx_block_pool_create>
 8005a28:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8005a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3748      	adds	r7, #72	; 0x48
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20000144 	.word	0x20000144
 8005a38:	200000a0 	.word	0x200000a0
 8005a3c:	20000094 	.word	0x20000094
 8005a40:	20000148 	.word	0x20000148
 8005a44:	200001ec 	.word	0x200001ec
 8005a48:	2000000c 	.word	0x2000000c

08005a4c <_txe_block_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_release(VOID *block_ptr)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
UCHAR               **indirect_ptr;
UCHAR               *work_ptr;


    /* First check the supplied pointer.  */
    if (block_ptr == TX_NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d102      	bne.n	8005a60 <_txe_block_release+0x14>
    {

        /* The block pointer is invalid, return appropriate status.  */
        status =  TX_PTR_ERROR;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	e01d      	b.n	8005a9c <_txe_block_release+0x50>
    else
    {

        /* Pickup the pool pointer which is just previous to the starting
           address of block that the caller sees.  */
        work_ptr =      TX_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	613b      	str	r3, [r7, #16]
        work_ptr =      TX_UCHAR_POINTER_SUB(work_ptr, (sizeof(UCHAR *)));
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	3b04      	subs	r3, #4
 8005a68:	613b      	str	r3, [r7, #16]
        indirect_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	60fb      	str	r3, [r7, #12]
        work_ptr =      *indirect_ptr;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	613b      	str	r3, [r7, #16]
        pool_ptr =      TX_UCHAR_TO_BLOCK_POOL_POINTER_CONVERT(work_ptr);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	60bb      	str	r3, [r7, #8]

        /* Check for an invalid pool pointer.  */
        if (pool_ptr == TX_NULL)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d102      	bne.n	8005a84 <_txe_block_release+0x38>
        {

            /* Pool pointer is invalid, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e00b      	b.n	8005a9c <_txe_block_release+0x50>
        }

        /* Now check for invalid pool ID.  */
        else if  (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a07      	ldr	r2, [pc, #28]	; (8005aa8 <_txe_block_release+0x5c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d002      	beq.n	8005a94 <_txe_block_release+0x48>
        {

            /* Pool pointer is invalid, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	e003      	b.n	8005a9c <_txe_block_release+0x50>
        }
        else
        {

            /* Call actual block release function.  */
            status =  _tx_block_release(block_ptr);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7fc fbdf 	bl	8002258 <_tx_block_release>
 8005a9a:	6178      	str	r0, [r7, #20]
        }
    }

    /* Return completion status.  */
    return(status);
 8005a9c:	697b      	ldr	r3, [r7, #20]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	424c4f43 	.word	0x424c4f43

08005aac <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08a      	sub	sp, #40	; 0x28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005aba:	2300      	movs	r3, #0
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d102      	bne.n	8005aca <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac8:	e029      	b.n	8005b1e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a2d      	ldr	r2, [pc, #180]	; (8005b84 <_txe_byte_allocate+0xd8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d002      	beq.n	8005ada <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad8:	e021      	b.n	8005b1e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d102      	bne.n	8005ae6 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae4:	e01b      	b.n	8005b1e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8005aec:	2305      	movs	r3, #5
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
 8005af0:	e015      	b.n	8005b1e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d902      	bls.n	8005b02 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8005afc:	2305      	movs	r3, #5
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
 8005b00:	e00d      	b.n	8005b1e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005b08:	f3ef 8305 	mrs	r3, IPSR
 8005b0c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8005b0e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005b10:	4b1d      	ldr	r3, [pc, #116]	; (8005b88 <_txe_byte_allocate+0xdc>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d108      	bne.n	8005b36 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8005b24:	4b19      	ldr	r3, [pc, #100]	; (8005b8c <_txe_byte_allocate+0xe0>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <_txe_byte_allocate+0xe4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d101      	bne.n	8005b36 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8005b32:	2313      	movs	r3, #19
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d114      	bne.n	8005b66 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005b3c:	f3ef 8305 	mrs	r3, IPSR
 8005b40:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005b42:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005b44:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <_txe_byte_allocate+0xdc>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005b4e:	f3ef 8305 	mrs	r3, IPSR
 8005b52:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005b54:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005b56:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <_txe_byte_allocate+0xdc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005b60:	d201      	bcs.n	8005b66 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005b62:	2313      	movs	r3, #19
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7fc fbe2 	bl	800233c <_tx_byte_allocate>
 8005b78:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3728      	adds	r7, #40	; 0x28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	42595445 	.word	0x42595445
 8005b88:	2000000c 	.word	0x2000000c
 8005b8c:	20000148 	.word	0x20000148
 8005b90:	200001ec 	.word	0x200001ec

08005b94 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b092      	sub	sp, #72	; 0x48
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d102      	bne.n	8005bb2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005bac:	2302      	movs	r3, #2
 8005bae:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb0:	e075      	b.n	8005c9e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8005bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb4:	2b34      	cmp	r3, #52	; 0x34
 8005bb6:	d002      	beq.n	8005bbe <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005bb8:	2302      	movs	r3, #2
 8005bba:	647b      	str	r3, [r7, #68]	; 0x44
 8005bbc:	e06f      	b.n	8005c9e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005bc8:	b672      	cpsid	i
    return(int_posture);
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005bcc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005bce:	4b3b      	ldr	r3, [pc, #236]	; (8005cbc <_txe_byte_pool_create+0x128>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	4a39      	ldr	r2, [pc, #228]	; (8005cbc <_txe_byte_pool_create+0x128>)
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	f383 8810 	msr	PRIMASK, r3
}
 8005be2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8005be4:	4b36      	ldr	r3, [pc, #216]	; (8005cc0 <_txe_byte_pool_create+0x12c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005bea:	2300      	movs	r3, #0
 8005bec:	643b      	str	r3, [r7, #64]	; 0x40
 8005bee:	e009      	b.n	8005c04 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d00b      	beq.n	8005c10 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8005bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c00:	3301      	adds	r3, #1
 8005c02:	643b      	str	r3, [r7, #64]	; 0x40
 8005c04:	4b2f      	ldr	r3, [pc, #188]	; (8005cc4 <_txe_byte_pool_create+0x130>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d3f0      	bcc.n	8005bf0 <_txe_byte_pool_create+0x5c>
 8005c0e:	e000      	b.n	8005c12 <_txe_byte_pool_create+0x7e>
                break;
 8005c10:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005c12:	f3ef 8310 	mrs	r3, PRIMASK
 8005c16:	623b      	str	r3, [r7, #32]
    return(posture);
 8005c18:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005c1a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005c1c:	b672      	cpsid	i
    return(int_posture);
 8005c1e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005c20:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005c22:	4b26      	ldr	r3, [pc, #152]	; (8005cbc <_txe_byte_pool_create+0x128>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	4a24      	ldr	r2, [pc, #144]	; (8005cbc <_txe_byte_pool_create+0x128>)
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	f383 8810 	msr	PRIMASK, r3
}
 8005c36:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005c38:	f7ff f874 	bl	8004d24 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d102      	bne.n	8005c4a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8005c44:	2302      	movs	r3, #2
 8005c46:	647b      	str	r3, [r7, #68]	; 0x44
 8005c48:	e029      	b.n	8005c9e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8005c50:	2303      	movs	r3, #3
 8005c52:	647b      	str	r3, [r7, #68]	; 0x44
 8005c54:	e023      	b.n	8005c9e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b63      	cmp	r3, #99	; 0x63
 8005c5a:	d802      	bhi.n	8005c62 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8005c5c:	2305      	movs	r3, #5
 8005c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c60:	e01d      	b.n	8005c9e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005c62:	4b19      	ldr	r3, [pc, #100]	; (8005cc8 <_txe_byte_pool_create+0x134>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <_txe_byte_pool_create+0x138>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d101      	bne.n	8005c74 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005c70:	2313      	movs	r3, #19
 8005c72:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005c74:	f3ef 8305 	mrs	r3, IPSR
 8005c78:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005c7a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005c7c:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <_txe_byte_pool_create+0x13c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00b      	beq.n	8005c9e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005c86:	f3ef 8305 	mrs	r3, IPSR
 8005c8a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005c8c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005c8e:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <_txe_byte_pool_create+0x13c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005c98:	d201      	bcs.n	8005c9e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8005c9a:	2313      	movs	r3, #19
 8005c9c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	68b9      	ldr	r1, [r7, #8]
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7fc fc88 	bl	80025c0 <_tx_byte_pool_create>
 8005cb0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8005cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3748      	adds	r7, #72	; 0x48
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	20000144 	.word	0x20000144
 8005cc0:	2000008c 	.word	0x2000008c
 8005cc4:	200000a8 	.word	0x200000a8
 8005cc8:	20000148 	.word	0x20000148
 8005ccc:	200001ec 	.word	0x200001ec
 8005cd0:	2000000c 	.word	0x2000000c

08005cd4 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b092      	sub	sp, #72	; 0x48
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8005cea:	2306      	movs	r3, #6
 8005cec:	647b      	str	r3, [r7, #68]	; 0x44
 8005cee:	e069      	b.n	8005dc4 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b28      	cmp	r3, #40	; 0x28
 8005cf4:	d002      	beq.n	8005cfc <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8005cf6:	2306      	movs	r3, #6
 8005cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cfa:	e063      	b.n	8005dc4 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005d04:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005d06:	b672      	cpsid	i
    return(int_posture);
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005d0a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005d0c:	4b34      	ldr	r3, [pc, #208]	; (8005de0 <_txe_event_flags_create+0x10c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3301      	adds	r3, #1
 8005d12:	4a33      	ldr	r2, [pc, #204]	; (8005de0 <_txe_event_flags_create+0x10c>)
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	f383 8810 	msr	PRIMASK, r3
}
 8005d20:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8005d22:	4b30      	ldr	r3, [pc, #192]	; (8005de4 <_txe_event_flags_create+0x110>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d2c:	e009      	b.n	8005d42 <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d00b      	beq.n	8005d4e <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 8005d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8005d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3e:	3301      	adds	r3, #1
 8005d40:	643b      	str	r3, [r7, #64]	; 0x40
 8005d42:	4b29      	ldr	r3, [pc, #164]	; (8005de8 <_txe_event_flags_create+0x114>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d3f0      	bcc.n	8005d2e <_txe_event_flags_create+0x5a>
 8005d4c:	e000      	b.n	8005d50 <_txe_event_flags_create+0x7c>
                break;
 8005d4e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005d50:	f3ef 8310 	mrs	r3, PRIMASK
 8005d54:	623b      	str	r3, [r7, #32]
    return(posture);
 8005d56:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005d58:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005d5a:	b672      	cpsid	i
    return(int_posture);
 8005d5c:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005d5e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005d60:	4b1f      	ldr	r3, [pc, #124]	; (8005de0 <_txe_event_flags_create+0x10c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	4a1e      	ldr	r2, [pc, #120]	; (8005de0 <_txe_event_flags_create+0x10c>)
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	f383 8810 	msr	PRIMASK, r3
}
 8005d74:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005d76:	f7fe ffd5 	bl	8004d24 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d102      	bne.n	8005d88 <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 8005d82:	2306      	movs	r3, #6
 8005d84:	647b      	str	r3, [r7, #68]	; 0x44
 8005d86:	e01d      	b.n	8005dc4 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005d88:	4b18      	ldr	r3, [pc, #96]	; (8005dec <_txe_event_flags_create+0x118>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8005d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d90:	4a17      	ldr	r2, [pc, #92]	; (8005df0 <_txe_event_flags_create+0x11c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d101      	bne.n	8005d9a <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005d96:	2313      	movs	r3, #19
 8005d98:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005d9a:	f3ef 8305 	mrs	r3, IPSR
 8005d9e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005da0:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005da2:	4b14      	ldr	r3, [pc, #80]	; (8005df4 <_txe_event_flags_create+0x120>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00b      	beq.n	8005dc4 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005dac:	f3ef 8305 	mrs	r3, IPSR
 8005db0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005db2:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005db4:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <_txe_event_flags_create+0x120>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005dbe:	d201      	bcs.n	8005dc4 <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8005dc0:	2313      	movs	r3, #19
 8005dc2:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7fc fe21 	bl	8002a14 <_tx_event_flags_create>
 8005dd2:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8005dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3748      	adds	r7, #72	; 0x48
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000144 	.word	0x20000144
 8005de4:	20000078 	.word	0x20000078
 8005de8:	2000009c 	.word	0x2000009c
 8005dec:	20000148 	.word	0x20000148
 8005df0:	200001ec 	.word	0x200001ec
 8005df4:	2000000c 	.word	0x2000000c

08005df8 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08a      	sub	sp, #40	; 0x28
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8005e10:	2306      	movs	r3, #6
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	e025      	b.n	8005e62 <_txe_event_flags_get+0x6a>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1e      	ldr	r2, [pc, #120]	; (8005e94 <_txe_event_flags_get+0x9c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d002      	beq.n	8005e26 <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8005e20:	2306      	movs	r3, #6
 8005e22:	61fb      	str	r3, [r7, #28]
 8005e24:	e01d      	b.n	8005e62 <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	e017      	b.n	8005e62 <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d014      	beq.n	8005e62 <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005e38:	f3ef 8305 	mrs	r3, IPSR
 8005e3c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005e3e:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005e40:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <_txe_event_flags_get+0xa0>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8005e4a:	2304      	movs	r3, #4
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	e008      	b.n	8005e62 <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8005e50:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <_txe_event_flags_get+0xa4>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	4a11      	ldr	r2, [pc, #68]	; (8005ea0 <_txe_event_flags_get+0xa8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d101      	bne.n	8005e62 <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8005e5e:	2304      	movs	r3, #4
 8005e60:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d104      	bne.n	8005e72 <_txe_event_flags_get+0x7a>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d901      	bls.n	8005e72 <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 8005e6e:	2308      	movs	r3, #8
 8005e70:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d108      	bne.n	8005e8a <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f7fc fe14 	bl	8002ab0 <_tx_event_flags_get>
 8005e88:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8005e8a:	69fb      	ldr	r3, [r7, #28]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3720      	adds	r7, #32
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	4456444e 	.word	0x4456444e
 8005e98:	2000000c 	.word	0x2000000c
 8005e9c:	20000148 	.word	0x20000148
 8005ea0:	200001ec 	.word	0x200001ec

08005ea4 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8005eba:	2306      	movs	r3, #6
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	e00f      	b.n	8005ee0 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a0d      	ldr	r2, [pc, #52]	; (8005efc <_txe_event_flags_set+0x58>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d002      	beq.n	8005ed0 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8005eca:	2306      	movs	r3, #6
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e007      	b.n	8005ee0 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d004      	beq.n	8005ee0 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 8005edc:	2308      	movs	r3, #8
 8005ede:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d105      	bne.n	8005ef2 <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f7fc fec2 	bl	8002c74 <_tx_event_flags_set>
 8005ef0:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8005ef2:	697b      	ldr	r3, [r7, #20]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	4456444e 	.word	0x4456444e

08005f00 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b092      	sub	sp, #72	; 0x48
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8005f18:	231c      	movs	r3, #28
 8005f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f1c:	e053      	b.n	8005fc6 <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b34      	cmp	r3, #52	; 0x34
 8005f22:	d002      	beq.n	8005f2a <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8005f24:	231c      	movs	r3, #28
 8005f26:	647b      	str	r3, [r7, #68]	; 0x44
 8005f28:	e04d      	b.n	8005fc6 <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005f34:	b672      	cpsid	i
    return(int_posture);
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005f38:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005f3a:	4b3a      	ldr	r3, [pc, #232]	; (8006024 <_txe_mutex_create+0x124>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	4a38      	ldr	r2, [pc, #224]	; (8006024 <_txe_mutex_create+0x124>)
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	f383 8810 	msr	PRIMASK, r3
}
 8005f4e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8005f50:	4b35      	ldr	r3, [pc, #212]	; (8006028 <_txe_mutex_create+0x128>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8005f56:	2300      	movs	r3, #0
 8005f58:	643b      	str	r3, [r7, #64]	; 0x40
 8005f5a:	e009      	b.n	8005f70 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d00b      	beq.n	8005f7c <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8005f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8005f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8005f70:	4b2e      	ldr	r3, [pc, #184]	; (800602c <_txe_mutex_create+0x12c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d3f0      	bcc.n	8005f5c <_txe_mutex_create+0x5c>
 8005f7a:	e000      	b.n	8005f7e <_txe_mutex_create+0x7e>
                break;
 8005f7c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f82:	623b      	str	r3, [r7, #32]
    return(posture);
 8005f84:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005f86:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005f88:	b672      	cpsid	i
    return(int_posture);
 8005f8a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005f8c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005f8e:	4b25      	ldr	r3, [pc, #148]	; (8006024 <_txe_mutex_create+0x124>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	4a23      	ldr	r2, [pc, #140]	; (8006024 <_txe_mutex_create+0x124>)
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	f383 8810 	msr	PRIMASK, r3
}
 8005fa2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005fa4:	f7fe febe 	bl	8004d24 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d102      	bne.n	8005fb6 <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8005fb0:	231c      	movs	r3, #28
 8005fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb4:	e007      	b.n	8005fc6 <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d004      	beq.n	8005fc6 <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 8005fc2:	231f      	movs	r3, #31
 8005fc4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d11d      	bne.n	8006008 <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8005fcc:	4b18      	ldr	r3, [pc, #96]	; (8006030 <_txe_mutex_create+0x130>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd4:	4a17      	ldr	r2, [pc, #92]	; (8006034 <_txe_mutex_create+0x134>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d101      	bne.n	8005fde <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8005fda:	2313      	movs	r3, #19
 8005fdc:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005fde:	f3ef 8305 	mrs	r3, IPSR
 8005fe2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005fe4:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005fe6:	4b14      	ldr	r3, [pc, #80]	; (8006038 <_txe_mutex_create+0x138>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00b      	beq.n	8006008 <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005ff0:	f3ef 8305 	mrs	r3, IPSR
 8005ff4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005ff6:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005ff8:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <_txe_mutex_create+0x138>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006002:	d201      	bcs.n	8006008 <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8006004:	2313      	movs	r3, #19
 8006006:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8006008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7fd f98c 	bl	8003330 <_tx_mutex_create>
 8006018:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800601a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800601c:	4618      	mov	r0, r3
 800601e:	3748      	adds	r7, #72	; 0x48
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000144 	.word	0x20000144
 8006028:	20000080 	.word	0x20000080
 800602c:	2000007c 	.word	0x2000007c
 8006030:	20000148 	.word	0x20000148
 8006034:	200001ec 	.word	0x200001ec
 8006038:	2000000c 	.word	0x2000000c

0800603c <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8006050:	231c      	movs	r3, #28
 8006052:	61fb      	str	r3, [r7, #28]
 8006054:	e01f      	b.n	8006096 <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a21      	ldr	r2, [pc, #132]	; (80060e0 <_txe_mutex_get+0xa4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d002      	beq.n	8006066 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8006060:	231c      	movs	r3, #28
 8006062:	61fb      	str	r3, [r7, #28]
 8006064:	e017      	b.n	8006096 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d014      	beq.n	8006096 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800606c:	f3ef 8305 	mrs	r3, IPSR
 8006070:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006072:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006074:	4b1b      	ldr	r3, [pc, #108]	; (80060e4 <_txe_mutex_get+0xa8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4313      	orrs	r3, r2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800607e:	2304      	movs	r3, #4
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	e008      	b.n	8006096 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8006084:	4b18      	ldr	r3, [pc, #96]	; (80060e8 <_txe_mutex_get+0xac>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	4a17      	ldr	r2, [pc, #92]	; (80060ec <_txe_mutex_get+0xb0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d101      	bne.n	8006096 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8006092:	2304      	movs	r3, #4
 8006094:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d114      	bne.n	80060c6 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800609c:	f3ef 8305 	mrs	r3, IPSR
 80060a0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80060a2:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80060a4:	4b0f      	ldr	r3, [pc, #60]	; (80060e4 <_txe_mutex_get+0xa8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80060ae:	f3ef 8305 	mrs	r3, IPSR
 80060b2:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80060b4:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <_txe_mutex_get+0xa8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80060c0:	d201      	bcs.n	80060c6 <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80060c2:	2313      	movs	r3, #19
 80060c4:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d104      	bne.n	80060d6 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fd f988 	bl	80033e4 <_tx_mutex_get>
 80060d4:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80060d6:	69fb      	ldr	r3, [r7, #28]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3720      	adds	r7, #32
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	4d555445 	.word	0x4d555445
 80060e4:	2000000c 	.word	0x2000000c
 80060e8:	20000148 	.word	0x20000148
 80060ec:	200001ec 	.word	0x200001ec

080060f0 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80060f8:	2300      	movs	r3, #0
 80060fa:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d102      	bne.n	8006108 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8006102:	231c      	movs	r3, #28
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	e01c      	b.n	8006142 <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a13      	ldr	r2, [pc, #76]	; (800615c <_txe_mutex_put+0x6c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d002      	beq.n	8006118 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8006112:	231c      	movs	r3, #28
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	e014      	b.n	8006142 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006118:	f3ef 8305 	mrs	r3, IPSR
 800611c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800611e:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006120:	4b0f      	ldr	r3, [pc, #60]	; (8006160 <_txe_mutex_put+0x70>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00b      	beq.n	8006142 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800612a:	f3ef 8305 	mrs	r3, IPSR
 800612e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8006130:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8006132:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <_txe_mutex_put+0x70>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4313      	orrs	r3, r2
 8006138:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800613c:	d201      	bcs.n	8006142 <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800613e:	2313      	movs	r3, #19
 8006140:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d103      	bne.n	8006150 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fd fbd1 	bl	80038f0 <_tx_mutex_put>
 800614e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8006150:	697b      	ldr	r3, [r7, #20]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	4d555445 	.word	0x4d555445
 8006160:	2000000c 	.word	0x2000000c

08006164 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b094      	sub	sp, #80	; 0x50
 8006168:	af02      	add	r7, sp, #8
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8006172:	2300      	movs	r3, #0
 8006174:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800617c:	2309      	movs	r3, #9
 800617e:	647b      	str	r3, [r7, #68]	; 0x44
 8006180:	e083      	b.n	800628a <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8006182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006184:	2b3c      	cmp	r3, #60	; 0x3c
 8006186:	d002      	beq.n	800618e <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8006188:	2309      	movs	r3, #9
 800618a:	647b      	str	r3, [r7, #68]	; 0x44
 800618c:	e07d      	b.n	800628a <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800618e:	f3ef 8310 	mrs	r3, PRIMASK
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8006196:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8006198:	b672      	cpsid	i
    return(int_posture);
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800619c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800619e:	4b43      	ldr	r3, [pc, #268]	; (80062ac <_txe_queue_create+0x148>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3301      	adds	r3, #1
 80061a4:	4a41      	ldr	r2, [pc, #260]	; (80062ac <_txe_queue_create+0x148>)
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	f383 8810 	msr	PRIMASK, r3
}
 80061b2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 80061b4:	4b3e      	ldr	r3, [pc, #248]	; (80062b0 <_txe_queue_create+0x14c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 80061ba:	2300      	movs	r3, #0
 80061bc:	643b      	str	r3, [r7, #64]	; 0x40
 80061be:	e009      	b.n	80061d4 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d00b      	beq.n	80061e0 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 80061c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 80061ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d0:	3301      	adds	r3, #1
 80061d2:	643b      	str	r3, [r7, #64]	; 0x40
 80061d4:	4b37      	ldr	r3, [pc, #220]	; (80062b4 <_txe_queue_create+0x150>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061da:	429a      	cmp	r2, r3
 80061dc:	d3f0      	bcc.n	80061c0 <_txe_queue_create+0x5c>
 80061de:	e000      	b.n	80061e2 <_txe_queue_create+0x7e>
                break;
 80061e0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80061e2:	f3ef 8310 	mrs	r3, PRIMASK
 80061e6:	623b      	str	r3, [r7, #32]
    return(posture);
 80061e8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80061ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80061ec:	b672      	cpsid	i
    return(int_posture);
 80061ee:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80061f0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80061f2:	4b2e      	ldr	r3, [pc, #184]	; (80062ac <_txe_queue_create+0x148>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	4a2c      	ldr	r2, [pc, #176]	; (80062ac <_txe_queue_create+0x148>)
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	f383 8810 	msr	PRIMASK, r3
}
 8006206:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006208:	f7fe fd8c 	bl	8004d24 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006210:	429a      	cmp	r2, r3
 8006212:	d102      	bne.n	800621a <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8006214:	2309      	movs	r3, #9
 8006216:	647b      	str	r3, [r7, #68]	; 0x44
 8006218:	e037      	b.n	800628a <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8006220:	2303      	movs	r3, #3
 8006222:	647b      	str	r3, [r7, #68]	; 0x44
 8006224:	e031      	b.n	800628a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d102      	bne.n	8006232 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800622c:	2305      	movs	r3, #5
 800622e:	647b      	str	r3, [r7, #68]	; 0x44
 8006230:	e02b      	b.n	800628a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b10      	cmp	r3, #16
 8006236:	d902      	bls.n	800623e <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8006238:	2305      	movs	r3, #5
 800623a:	647b      	str	r3, [r7, #68]	; 0x44
 800623c:	e025      	b.n	800628a <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800623e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006240:	089b      	lsrs	r3, r3, #2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	429a      	cmp	r2, r3
 8006246:	d902      	bls.n	800624e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 8006248:	2305      	movs	r3, #5
 800624a:	647b      	str	r3, [r7, #68]	; 0x44
 800624c:	e01d      	b.n	800628a <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800624e:	4b1a      	ldr	r3, [pc, #104]	; (80062b8 <_txe_queue_create+0x154>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8006254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006256:	4a19      	ldr	r2, [pc, #100]	; (80062bc <_txe_queue_create+0x158>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d101      	bne.n	8006260 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800625c:	2313      	movs	r3, #19
 800625e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006260:	f3ef 8305 	mrs	r3, IPSR
 8006264:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8006266:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006268:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <_txe_queue_create+0x15c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4313      	orrs	r3, r2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006272:	f3ef 8305 	mrs	r3, IPSR
 8006276:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006278:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800627a:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <_txe_queue_create+0x15c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4313      	orrs	r3, r2
 8006280:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006284:	d201      	bcs.n	800628a <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8006286:	2313      	movs	r3, #19
 8006288:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800628a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800628c:	2b00      	cmp	r3, #0
 800628e:	d108      	bne.n	80062a2 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8006290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	68b9      	ldr	r1, [r7, #8]
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f7fd fdd2 	bl	8003e44 <_tx_queue_create>
 80062a0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80062a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3748      	adds	r7, #72	; 0x48
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000144 	.word	0x20000144
 80062b0:	200000a4 	.word	0x200000a4
 80062b4:	20000084 	.word	0x20000084
 80062b8:	20000148 	.word	0x20000148
 80062bc:	200001ec 	.word	0x200001ec
 80062c0:	2000000c 	.word	0x2000000c

080062c4 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80062d0:	2300      	movs	r3, #0
 80062d2:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d102      	bne.n	80062e0 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80062da:	2309      	movs	r3, #9
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	e025      	b.n	800632c <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a18      	ldr	r2, [pc, #96]	; (8006348 <_txe_queue_receive+0x84>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d002      	beq.n	80062f0 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80062ea:	2309      	movs	r3, #9
 80062ec:	61fb      	str	r3, [r7, #28]
 80062ee:	e01d      	b.n	800632c <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d102      	bne.n	80062fc <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80062f6:	2303      	movs	r3, #3
 80062f8:	61fb      	str	r3, [r7, #28]
 80062fa:	e017      	b.n	800632c <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d014      	beq.n	800632c <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006302:	f3ef 8305 	mrs	r3, IPSR
 8006306:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006308:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800630a:	4b10      	ldr	r3, [pc, #64]	; (800634c <_txe_queue_receive+0x88>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4313      	orrs	r3, r2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8006314:	2304      	movs	r3, #4
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	e008      	b.n	800632c <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800631a:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <_txe_queue_receive+0x8c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	4a0c      	ldr	r2, [pc, #48]	; (8006354 <_txe_queue_receive+0x90>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d101      	bne.n	800632c <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8006328:	2304      	movs	r3, #4
 800632a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d105      	bne.n	800633e <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7fd fdf8 	bl	8003f2c <_tx_queue_receive>
 800633c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800633e:	69fb      	ldr	r3, [r7, #28]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3720      	adds	r7, #32
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	51554555 	.word	0x51554555
 800634c:	2000000c 	.word	0x2000000c
 8006350:	20000148 	.word	0x20000148
 8006354:	200001ec 	.word	0x200001ec

08006358 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b088      	sub	sp, #32
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d102      	bne.n	8006374 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800636e:	2309      	movs	r3, #9
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	e025      	b.n	80063c0 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a18      	ldr	r2, [pc, #96]	; (80063dc <_txe_queue_send+0x84>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d002      	beq.n	8006384 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800637e:	2309      	movs	r3, #9
 8006380:	61fb      	str	r3, [r7, #28]
 8006382:	e01d      	b.n	80063c0 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d102      	bne.n	8006390 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800638a:	2303      	movs	r3, #3
 800638c:	61fb      	str	r3, [r7, #28]
 800638e:	e017      	b.n	80063c0 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d014      	beq.n	80063c0 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006396:	f3ef 8305 	mrs	r3, IPSR
 800639a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800639c:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800639e:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <_txe_queue_send+0x88>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80063a8:	2304      	movs	r3, #4
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	e008      	b.n	80063c0 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80063ae:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <_txe_queue_send+0x8c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	4a0c      	ldr	r2, [pc, #48]	; (80063e8 <_txe_queue_send+0x90>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d101      	bne.n	80063c0 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80063bc:	2304      	movs	r3, #4
 80063be:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d105      	bne.n	80063d2 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	68b9      	ldr	r1, [r7, #8]
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7fd ff76 	bl	80042bc <_tx_queue_send>
 80063d0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80063d2:	69fb      	ldr	r3, [r7, #28]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3720      	adds	r7, #32
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	51554555 	.word	0x51554555
 80063e0:	2000000c 	.word	0x2000000c
 80063e4:	20000148 	.word	0x20000148
 80063e8:	200001ec 	.word	0x200001ec

080063ec <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b092      	sub	sp, #72	; 0x48
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80063fa:	2300      	movs	r3, #0
 80063fc:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8006404:	230c      	movs	r3, #12
 8006406:	647b      	str	r3, [r7, #68]	; 0x44
 8006408:	e054      	b.n	80064b4 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b20      	cmp	r3, #32
 800640e:	d002      	beq.n	8006416 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8006410:	230c      	movs	r3, #12
 8006412:	647b      	str	r3, [r7, #68]	; 0x44
 8006414:	e04e      	b.n	80064b4 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006416:	f3ef 8310 	mrs	r3, PRIMASK
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8006420:	b672      	cpsid	i
    return(int_posture);
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8006424:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8006426:	4b36      	ldr	r3, [pc, #216]	; (8006500 <_txe_semaphore_create+0x114>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3301      	adds	r3, #1
 800642c:	4a34      	ldr	r2, [pc, #208]	; (8006500 <_txe_semaphore_create+0x114>)
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	f383 8810 	msr	PRIMASK, r3
}
 800643a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800643c:	4b31      	ldr	r3, [pc, #196]	; (8006504 <_txe_semaphore_create+0x118>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8006442:	2300      	movs	r3, #0
 8006444:	643b      	str	r3, [r7, #64]	; 0x40
 8006446:	e009      	b.n	800645c <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644c:	429a      	cmp	r2, r3
 800644e:	d00b      	beq.n	8006468 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8006450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8006456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006458:	3301      	adds	r3, #1
 800645a:	643b      	str	r3, [r7, #64]	; 0x40
 800645c:	4b2a      	ldr	r3, [pc, #168]	; (8006508 <_txe_semaphore_create+0x11c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006462:	429a      	cmp	r2, r3
 8006464:	d3f0      	bcc.n	8006448 <_txe_semaphore_create+0x5c>
 8006466:	e000      	b.n	800646a <_txe_semaphore_create+0x7e>
                break;
 8006468:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800646a:	f3ef 8310 	mrs	r3, PRIMASK
 800646e:	623b      	str	r3, [r7, #32]
    return(posture);
 8006470:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006472:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006474:	b672      	cpsid	i
    return(int_posture);
 8006476:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8006478:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800647a:	4b21      	ldr	r3, [pc, #132]	; (8006500 <_txe_semaphore_create+0x114>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3b01      	subs	r3, #1
 8006480:	4a1f      	ldr	r2, [pc, #124]	; (8006500 <_txe_semaphore_create+0x114>)
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	f383 8810 	msr	PRIMASK, r3
}
 800648e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006490:	f7fe fc48 	bl	8004d24 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006498:	429a      	cmp	r2, r3
 800649a:	d102      	bne.n	80064a2 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800649c:	230c      	movs	r3, #12
 800649e:	647b      	str	r3, [r7, #68]	; 0x44
 80064a0:	e008      	b.n	80064b4 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80064a2:	4b1a      	ldr	r3, [pc, #104]	; (800650c <_txe_semaphore_create+0x120>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80064a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064aa:	4a19      	ldr	r2, [pc, #100]	; (8006510 <_txe_semaphore_create+0x124>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d101      	bne.n	80064b4 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80064b0:	2313      	movs	r3, #19
 80064b2:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80064b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d114      	bne.n	80064e4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80064ba:	f3ef 8305 	mrs	r3, IPSR
 80064be:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80064c0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80064c2:	4b14      	ldr	r3, [pc, #80]	; (8006514 <_txe_semaphore_create+0x128>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00b      	beq.n	80064e4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80064cc:	f3ef 8305 	mrs	r3, IPSR
 80064d0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80064d2:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80064d4:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <_txe_semaphore_create+0x128>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4313      	orrs	r3, r2
 80064da:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80064de:	d201      	bcs.n	80064e4 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80064e0:	2313      	movs	r3, #19
 80064e2:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80064e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d105      	bne.n	80064f6 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7fe f8ae 	bl	8004650 <_tx_semaphore_create>
 80064f4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80064f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3748      	adds	r7, #72	; 0x48
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000144 	.word	0x20000144
 8006504:	20000088 	.word	0x20000088
 8006508:	20000098 	.word	0x20000098
 800650c:	20000148 	.word	0x20000148
 8006510:	200001ec 	.word	0x200001ec
 8006514:	2000000c 	.word	0x2000000c

08006518 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8006522:	2300      	movs	r3, #0
 8006524:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d102      	bne.n	8006532 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800652c:	230c      	movs	r3, #12
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	e01f      	b.n	8006572 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a15      	ldr	r2, [pc, #84]	; (800658c <_txe_semaphore_get+0x74>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d002      	beq.n	8006542 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800653c:	230c      	movs	r3, #12
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e017      	b.n	8006572 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d014      	beq.n	8006572 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006548:	f3ef 8305 	mrs	r3, IPSR
 800654c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800654e:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006550:	4b0f      	ldr	r3, [pc, #60]	; (8006590 <_txe_semaphore_get+0x78>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4313      	orrs	r3, r2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800655a:	2304      	movs	r3, #4
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	e008      	b.n	8006572 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8006560:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <_txe_semaphore_get+0x7c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	4a0b      	ldr	r2, [pc, #44]	; (8006598 <_txe_semaphore_get+0x80>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d101      	bne.n	8006572 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800656e:	2304      	movs	r3, #4
 8006570:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d104      	bne.n	8006582 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fe f8ba 	bl	80046f4 <_tx_semaphore_get>
 8006580:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8006582:	697b      	ldr	r3, [r7, #20]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	53454d41 	.word	0x53454d41
 8006590:	2000000c 	.word	0x2000000c
 8006594:	20000148 	.word	0x20000148
 8006598:	200001ec 	.word	0x200001ec

0800659c <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d102      	bne.n	80065b0 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80065aa:	230c      	movs	r3, #12
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	e00b      	b.n	80065c8 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a07      	ldr	r2, [pc, #28]	; (80065d4 <_txe_semaphore_put+0x38>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d002      	beq.n	80065c0 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80065ba:	230c      	movs	r3, #12
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e003      	b.n	80065c8 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7fe f929 	bl	8004818 <_tx_semaphore_put>
 80065c6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80065c8:	68fb      	ldr	r3, [r7, #12]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	53454d41 	.word	0x53454d41

080065d8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b09a      	sub	sp, #104	; 0x68
 80065dc:	af06      	add	r7, sp, #24
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80065e6:	2300      	movs	r3, #0
 80065e8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d102      	bne.n	80065f6 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80065f0:	230e      	movs	r3, #14
 80065f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f4:	e0bb      	b.n	800676e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80065f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065f8:	2bb4      	cmp	r3, #180	; 0xb4
 80065fa:	d002      	beq.n	8006602 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80065fc:	230e      	movs	r3, #14
 80065fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006600:	e0b5      	b.n	800676e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006602:	f3ef 8310 	mrs	r3, PRIMASK
 8006606:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800660c:	b672      	cpsid	i
    return(int_posture);
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8006612:	4b64      	ldr	r3, [pc, #400]	; (80067a4 <_txe_thread_create+0x1cc>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3301      	adds	r3, #1
 8006618:	4a62      	ldr	r2, [pc, #392]	; (80067a4 <_txe_thread_create+0x1cc>)
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	f383 8810 	msr	PRIMASK, r3
}
 8006626:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8006628:	2300      	movs	r3, #0
 800662a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800662c:	4b5e      	ldr	r3, [pc, #376]	; (80067a8 <_txe_thread_create+0x1d0>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8006632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006634:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8006636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006638:	3b01      	subs	r3, #1
 800663a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800663c:	4413      	add	r3, r2
 800663e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8006640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006642:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8006644:	2300      	movs	r3, #0
 8006646:	647b      	str	r3, [r7, #68]	; 0x44
 8006648:	e02b      	b.n	80066a2 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664e:	429a      	cmp	r2, r3
 8006650:	d101      	bne.n	8006656 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8006652:	2301      	movs	r3, #1
 8006654:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8006656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006658:	2b01      	cmp	r3, #1
 800665a:	d028      	beq.n	80066ae <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800665c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006662:	429a      	cmp	r2, r3
 8006664:	d308      	bcc.n	8006678 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8006666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800666c:	429a      	cmp	r2, r3
 800666e:	d203      	bcs.n	8006678 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8006670:	2300      	movs	r3, #0
 8006672:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8006674:	2301      	movs	r3, #1
 8006676:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8006678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800667e:	429a      	cmp	r2, r3
 8006680:	d308      	bcc.n	8006694 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8006682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006688:	429a      	cmp	r2, r3
 800668a:	d203      	bcs.n	8006694 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800668c:	2300      	movs	r3, #0
 800668e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8006690:	2301      	movs	r3, #1
 8006692:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8006694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800669c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800669e:	3301      	adds	r3, #1
 80066a0:	647b      	str	r3, [r7, #68]	; 0x44
 80066a2:	4b42      	ldr	r3, [pc, #264]	; (80067ac <_txe_thread_create+0x1d4>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d3ce      	bcc.n	800664a <_txe_thread_create+0x72>
 80066ac:	e000      	b.n	80066b0 <_txe_thread_create+0xd8>
                break;
 80066ae:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80066b0:	f3ef 8310 	mrs	r3, PRIMASK
 80066b4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80066b6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80066b8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80066ba:	b672      	cpsid	i
    return(int_posture);
 80066bc:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80066c0:	4b38      	ldr	r3, [pc, #224]	; (80067a4 <_txe_thread_create+0x1cc>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	4a37      	ldr	r2, [pc, #220]	; (80067a4 <_txe_thread_create+0x1cc>)
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066cc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	f383 8810 	msr	PRIMASK, r3
}
 80066d4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80066d6:	f7fe fb25 	bl	8004d24 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066de:	429a      	cmp	r2, r3
 80066e0:	d102      	bne.n	80066e8 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80066e2:	230e      	movs	r3, #14
 80066e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e6:	e042      	b.n	800676e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80066e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80066ee:	2303      	movs	r3, #3
 80066f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f2:	e03c      	b.n	800676e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d102      	bne.n	8006700 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80066fa:	2303      	movs	r3, #3
 80066fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066fe:	e036      	b.n	800676e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8006700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006702:	2bc7      	cmp	r3, #199	; 0xc7
 8006704:	d802      	bhi.n	800670c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8006706:	2305      	movs	r3, #5
 8006708:	64fb      	str	r3, [r7, #76]	; 0x4c
 800670a:	e030      	b.n	800676e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800670c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800670e:	2b1f      	cmp	r3, #31
 8006710:	d902      	bls.n	8006718 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8006712:	230f      	movs	r3, #15
 8006714:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006716:	e02a      	b.n	800676e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8006718:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800671a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800671c:	429a      	cmp	r2, r3
 800671e:	d902      	bls.n	8006726 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8006720:	2318      	movs	r3, #24
 8006722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006724:	e023      	b.n	800676e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8006726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d902      	bls.n	8006732 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800672c:	2310      	movs	r3, #16
 800672e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006730:	e01d      	b.n	800676e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8006732:	4b1f      	ldr	r3, [pc, #124]	; (80067b0 <_txe_thread_create+0x1d8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	4a1e      	ldr	r2, [pc, #120]	; (80067b4 <_txe_thread_create+0x1dc>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d101      	bne.n	8006744 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8006740:	2313      	movs	r3, #19
 8006742:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006744:	f3ef 8305 	mrs	r3, IPSR
 8006748:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800674a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800674c:	4b1a      	ldr	r3, [pc, #104]	; (80067b8 <_txe_thread_create+0x1e0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4313      	orrs	r3, r2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00b      	beq.n	800676e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006756:	f3ef 8305 	mrs	r3, IPSR
 800675a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800675c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800675e:	4b16      	ldr	r3, [pc, #88]	; (80067b8 <_txe_thread_create+0x1e0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4313      	orrs	r3, r2
 8006764:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006768:	d201      	bcs.n	800676e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800676a:	2313      	movs	r3, #19
 800676c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800676e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006770:	2b00      	cmp	r3, #0
 8006772:	d112      	bne.n	800679a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8006774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006776:	9305      	str	r3, [sp, #20]
 8006778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800677e:	9303      	str	r3, [sp, #12]
 8006780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006782:	9302      	str	r3, [sp, #8]
 8006784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7fe f8ac 	bl	80048f0 <_tx_thread_create>
 8006798:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800679a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800679c:	4618      	mov	r0, r3
 800679e:	3750      	adds	r7, #80	; 0x50
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	20000144 	.word	0x20000144
 80067a8:	20000134 	.word	0x20000134
 80067ac:	2000013c 	.word	0x2000013c
 80067b0:	20000148 	.word	0x20000148
 80067b4:	200001ec 	.word	0x200001ec
 80067b8:	2000000c 	.word	0x2000000c

080067bc <main_user>:


/* Define main entry point.  */

int main_user()
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0

    /* Enter the ThreadX kernel.  */
    tx_kernel_enter();
 80067c0:	f7fc fccc 	bl	800315c <_tx_initialize_kernel_enter>
    return (0);
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <tx_application_define>:


/* Define what the initial system looks like.  */

void    tx_application_define(void *first_unused_memory)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08c      	sub	sp, #48	; 0x30
 80067d0:	af08      	add	r7, sp, #32
 80067d2:	6078      	str	r0, [r7, #4]

CHAR    *pointer = TX_NULL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]


    /* Create a byte memory pool from which to allocate the thread stacks.  */
    tx_byte_pool_create(&byte_pool_0, "byte pool 0", memory_area, DEMO_BYTE_POOL_SIZE);
 80067d8:	2334      	movs	r3, #52	; 0x34
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	f242 33a0 	movw	r3, #9120	; 0x23a0
 80067e0:	4a98      	ldr	r2, [pc, #608]	; (8006a44 <tx_application_define+0x278>)
 80067e2:	4999      	ldr	r1, [pc, #612]	; (8006a48 <tx_application_define+0x27c>)
 80067e4:	4899      	ldr	r0, [pc, #612]	; (8006a4c <tx_application_define+0x280>)
 80067e6:	f7ff f9d5 	bl	8005b94 <_txe_byte_pool_create>

    /* Put system definition stuff in here, e.g. thread creates and other assorted
       create information.  */

    /* Allocate the stack for thread 0.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 80067ea:	f107 010c 	add.w	r1, r7, #12
 80067ee:	2300      	movs	r3, #0
 80067f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067f4:	4895      	ldr	r0, [pc, #596]	; (8006a4c <tx_application_define+0x280>)
 80067f6:	f7ff f959 	bl	8005aac <_txe_byte_allocate>

    /* Create the main thread.  */
    tx_thread_create(&thread_0, "thread 0", thread_0_entry, 0,  
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	22b4      	movs	r2, #180	; 0xb4
 80067fe:	9206      	str	r2, [sp, #24]
 8006800:	2201      	movs	r2, #1
 8006802:	9205      	str	r2, [sp, #20]
 8006804:	2200      	movs	r2, #0
 8006806:	9204      	str	r2, [sp, #16]
 8006808:	2201      	movs	r2, #1
 800680a:	9203      	str	r2, [sp, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	9202      	str	r2, [sp, #8]
 8006810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006814:	9201      	str	r2, [sp, #4]
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	2300      	movs	r3, #0
 800681a:	4a8d      	ldr	r2, [pc, #564]	; (8006a50 <tx_application_define+0x284>)
 800681c:	498d      	ldr	r1, [pc, #564]	; (8006a54 <tx_application_define+0x288>)
 800681e:	488e      	ldr	r0, [pc, #568]	; (8006a58 <tx_application_define+0x28c>)
 8006820:	f7ff feda 	bl	80065d8 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            1, 1, TX_NO_TIME_SLICE, TX_AUTO_START);


    /* Allocate the stack for thread 1.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 8006824:	f107 010c 	add.w	r1, r7, #12
 8006828:	2300      	movs	r3, #0
 800682a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800682e:	4887      	ldr	r0, [pc, #540]	; (8006a4c <tx_application_define+0x280>)
 8006830:	f7ff f93c 	bl	8005aac <_txe_byte_allocate>

    /* Create threads 1 and 2. These threads pass information through a ThreadX 
       message queue.  It is also interesting to note that these threads have a time
       slice.  */
    tx_thread_create(&thread_1, "thread 1", thread_1_entry, 1,  
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	22b4      	movs	r2, #180	; 0xb4
 8006838:	9206      	str	r2, [sp, #24]
 800683a:	2201      	movs	r2, #1
 800683c:	9205      	str	r2, [sp, #20]
 800683e:	2204      	movs	r2, #4
 8006840:	9204      	str	r2, [sp, #16]
 8006842:	2210      	movs	r2, #16
 8006844:	9203      	str	r2, [sp, #12]
 8006846:	2210      	movs	r2, #16
 8006848:	9202      	str	r2, [sp, #8]
 800684a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800684e:	9201      	str	r2, [sp, #4]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	2301      	movs	r3, #1
 8006854:	4a81      	ldr	r2, [pc, #516]	; (8006a5c <tx_application_define+0x290>)
 8006856:	4982      	ldr	r1, [pc, #520]	; (8006a60 <tx_application_define+0x294>)
 8006858:	4882      	ldr	r0, [pc, #520]	; (8006a64 <tx_application_define+0x298>)
 800685a:	f7ff febd 	bl	80065d8 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            16, 16, 4, TX_AUTO_START);

    /* Allocate the stack for thread 2.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 800685e:	f107 010c 	add.w	r1, r7, #12
 8006862:	2300      	movs	r3, #0
 8006864:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006868:	4878      	ldr	r0, [pc, #480]	; (8006a4c <tx_application_define+0x280>)
 800686a:	f7ff f91f 	bl	8005aac <_txe_byte_allocate>

    tx_thread_create(&thread_2, "thread 2", thread_2_entry, 2,  
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	22b4      	movs	r2, #180	; 0xb4
 8006872:	9206      	str	r2, [sp, #24]
 8006874:	2201      	movs	r2, #1
 8006876:	9205      	str	r2, [sp, #20]
 8006878:	2204      	movs	r2, #4
 800687a:	9204      	str	r2, [sp, #16]
 800687c:	2210      	movs	r2, #16
 800687e:	9203      	str	r2, [sp, #12]
 8006880:	2210      	movs	r2, #16
 8006882:	9202      	str	r2, [sp, #8]
 8006884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006888:	9201      	str	r2, [sp, #4]
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	2302      	movs	r3, #2
 800688e:	4a76      	ldr	r2, [pc, #472]	; (8006a68 <tx_application_define+0x29c>)
 8006890:	4976      	ldr	r1, [pc, #472]	; (8006a6c <tx_application_define+0x2a0>)
 8006892:	4877      	ldr	r0, [pc, #476]	; (8006a70 <tx_application_define+0x2a4>)
 8006894:	f7ff fea0 	bl	80065d8 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            16, 16, 4, TX_AUTO_START);

    /* Allocate the stack for thread 3.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 8006898:	f107 010c 	add.w	r1, r7, #12
 800689c:	2300      	movs	r3, #0
 800689e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068a2:	486a      	ldr	r0, [pc, #424]	; (8006a4c <tx_application_define+0x280>)
 80068a4:	f7ff f902 	bl	8005aac <_txe_byte_allocate>

    /* Create threads 3 and 4.  These threads compete for a ThreadX counting semaphore.  
       An interesting thing here is that both threads share the same instruction area.  */
    tx_thread_create(&thread_3, "thread 3", thread_3_and_4_entry, 3,  
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	22b4      	movs	r2, #180	; 0xb4
 80068ac:	9206      	str	r2, [sp, #24]
 80068ae:	2201      	movs	r2, #1
 80068b0:	9205      	str	r2, [sp, #20]
 80068b2:	2200      	movs	r2, #0
 80068b4:	9204      	str	r2, [sp, #16]
 80068b6:	2208      	movs	r2, #8
 80068b8:	9203      	str	r2, [sp, #12]
 80068ba:	2208      	movs	r2, #8
 80068bc:	9202      	str	r2, [sp, #8]
 80068be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068c2:	9201      	str	r2, [sp, #4]
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	2303      	movs	r3, #3
 80068c8:	4a6a      	ldr	r2, [pc, #424]	; (8006a74 <tx_application_define+0x2a8>)
 80068ca:	496b      	ldr	r1, [pc, #428]	; (8006a78 <tx_application_define+0x2ac>)
 80068cc:	486b      	ldr	r0, [pc, #428]	; (8006a7c <tx_application_define+0x2b0>)
 80068ce:	f7ff fe83 	bl	80065d8 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            8, 8, TX_NO_TIME_SLICE, TX_AUTO_START);

    /* Allocate the stack for thread 4.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 80068d2:	f107 010c 	add.w	r1, r7, #12
 80068d6:	2300      	movs	r3, #0
 80068d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068dc:	485b      	ldr	r0, [pc, #364]	; (8006a4c <tx_application_define+0x280>)
 80068de:	f7ff f8e5 	bl	8005aac <_txe_byte_allocate>

    tx_thread_create(&thread_4, "thread 4", thread_3_and_4_entry, 4,  
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	22b4      	movs	r2, #180	; 0xb4
 80068e6:	9206      	str	r2, [sp, #24]
 80068e8:	2201      	movs	r2, #1
 80068ea:	9205      	str	r2, [sp, #20]
 80068ec:	2200      	movs	r2, #0
 80068ee:	9204      	str	r2, [sp, #16]
 80068f0:	2208      	movs	r2, #8
 80068f2:	9203      	str	r2, [sp, #12]
 80068f4:	2208      	movs	r2, #8
 80068f6:	9202      	str	r2, [sp, #8]
 80068f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068fc:	9201      	str	r2, [sp, #4]
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	2304      	movs	r3, #4
 8006902:	4a5c      	ldr	r2, [pc, #368]	; (8006a74 <tx_application_define+0x2a8>)
 8006904:	495e      	ldr	r1, [pc, #376]	; (8006a80 <tx_application_define+0x2b4>)
 8006906:	485f      	ldr	r0, [pc, #380]	; (8006a84 <tx_application_define+0x2b8>)
 8006908:	f7ff fe66 	bl	80065d8 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            8, 8, TX_NO_TIME_SLICE, TX_AUTO_START);

    /* Allocate the stack for thread 5.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 800690c:	f107 010c 	add.w	r1, r7, #12
 8006910:	2300      	movs	r3, #0
 8006912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006916:	484d      	ldr	r0, [pc, #308]	; (8006a4c <tx_application_define+0x280>)
 8006918:	f7ff f8c8 	bl	8005aac <_txe_byte_allocate>

    /* Create thread 5.  This thread simply pends on an event flag which will be set
       by thread_0.  */
    tx_thread_create(&thread_5, "thread 5", thread_5_entry, 5,  
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	22b4      	movs	r2, #180	; 0xb4
 8006920:	9206      	str	r2, [sp, #24]
 8006922:	2201      	movs	r2, #1
 8006924:	9205      	str	r2, [sp, #20]
 8006926:	2200      	movs	r2, #0
 8006928:	9204      	str	r2, [sp, #16]
 800692a:	2204      	movs	r2, #4
 800692c:	9203      	str	r2, [sp, #12]
 800692e:	2204      	movs	r2, #4
 8006930:	9202      	str	r2, [sp, #8]
 8006932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006936:	9201      	str	r2, [sp, #4]
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	2305      	movs	r3, #5
 800693c:	4a52      	ldr	r2, [pc, #328]	; (8006a88 <tx_application_define+0x2bc>)
 800693e:	4953      	ldr	r1, [pc, #332]	; (8006a8c <tx_application_define+0x2c0>)
 8006940:	4853      	ldr	r0, [pc, #332]	; (8006a90 <tx_application_define+0x2c4>)
 8006942:	f7ff fe49 	bl	80065d8 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            4, 4, TX_NO_TIME_SLICE, TX_AUTO_START);

    /* Allocate the stack for thread 6.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 8006946:	f107 010c 	add.w	r1, r7, #12
 800694a:	2300      	movs	r3, #0
 800694c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006950:	483e      	ldr	r0, [pc, #248]	; (8006a4c <tx_application_define+0x280>)
 8006952:	f7ff f8ab 	bl	8005aac <_txe_byte_allocate>

    /* Create threads 6 and 7.  These threads compete for a ThreadX mutex.  */
    tx_thread_create(&thread_6, "thread 6", thread_6_and_7_entry, 6,  
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	22b4      	movs	r2, #180	; 0xb4
 800695a:	9206      	str	r2, [sp, #24]
 800695c:	2201      	movs	r2, #1
 800695e:	9205      	str	r2, [sp, #20]
 8006960:	2200      	movs	r2, #0
 8006962:	9204      	str	r2, [sp, #16]
 8006964:	2208      	movs	r2, #8
 8006966:	9203      	str	r2, [sp, #12]
 8006968:	2208      	movs	r2, #8
 800696a:	9202      	str	r2, [sp, #8]
 800696c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006970:	9201      	str	r2, [sp, #4]
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	2306      	movs	r3, #6
 8006976:	4a47      	ldr	r2, [pc, #284]	; (8006a94 <tx_application_define+0x2c8>)
 8006978:	4947      	ldr	r1, [pc, #284]	; (8006a98 <tx_application_define+0x2cc>)
 800697a:	4848      	ldr	r0, [pc, #288]	; (8006a9c <tx_application_define+0x2d0>)
 800697c:	f7ff fe2c 	bl	80065d8 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            8, 8, TX_NO_TIME_SLICE, TX_AUTO_START);

    /* Allocate the stack for thread 7.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_STACK_SIZE, TX_NO_WAIT);
 8006980:	f107 010c 	add.w	r1, r7, #12
 8006984:	2300      	movs	r3, #0
 8006986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800698a:	4830      	ldr	r0, [pc, #192]	; (8006a4c <tx_application_define+0x280>)
 800698c:	f7ff f88e 	bl	8005aac <_txe_byte_allocate>

    tx_thread_create(&thread_7, "thread 7", thread_6_and_7_entry, 7,  
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	22b4      	movs	r2, #180	; 0xb4
 8006994:	9206      	str	r2, [sp, #24]
 8006996:	2201      	movs	r2, #1
 8006998:	9205      	str	r2, [sp, #20]
 800699a:	2200      	movs	r2, #0
 800699c:	9204      	str	r2, [sp, #16]
 800699e:	2208      	movs	r2, #8
 80069a0:	9203      	str	r2, [sp, #12]
 80069a2:	2208      	movs	r2, #8
 80069a4:	9202      	str	r2, [sp, #8]
 80069a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069aa:	9201      	str	r2, [sp, #4]
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	2307      	movs	r3, #7
 80069b0:	4a38      	ldr	r2, [pc, #224]	; (8006a94 <tx_application_define+0x2c8>)
 80069b2:	493b      	ldr	r1, [pc, #236]	; (8006aa0 <tx_application_define+0x2d4>)
 80069b4:	483b      	ldr	r0, [pc, #236]	; (8006aa4 <tx_application_define+0x2d8>)
 80069b6:	f7ff fe0f 	bl	80065d8 <_txe_thread_create>
            pointer, DEMO_STACK_SIZE, 
            8, 8, TX_NO_TIME_SLICE, TX_AUTO_START);

    /* Allocate the message queue.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_QUEUE_SIZE*sizeof(ULONG), TX_NO_WAIT);
 80069ba:	f107 010c 	add.w	r1, r7, #12
 80069be:	2300      	movs	r3, #0
 80069c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80069c4:	4821      	ldr	r0, [pc, #132]	; (8006a4c <tx_application_define+0x280>)
 80069c6:	f7ff f871 	bl	8005aac <_txe_byte_allocate>

    /* Create the message queue shared by threads 1 and 2.  */
    tx_queue_create(&queue_0, "queue 0", TX_1_ULONG, pointer, DEMO_QUEUE_SIZE*sizeof(ULONG));
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	223c      	movs	r2, #60	; 0x3c
 80069ce:	9201      	str	r2, [sp, #4]
 80069d0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80069d4:	9200      	str	r2, [sp, #0]
 80069d6:	2201      	movs	r2, #1
 80069d8:	4933      	ldr	r1, [pc, #204]	; (8006aa8 <tx_application_define+0x2dc>)
 80069da:	4834      	ldr	r0, [pc, #208]	; (8006aac <tx_application_define+0x2e0>)
 80069dc:	f7ff fbc2 	bl	8006164 <_txe_queue_create>

    /* Create the semaphore used by threads 3 and 4.  */
    tx_semaphore_create(&semaphore_0, "semaphore 0", 1);
 80069e0:	2320      	movs	r3, #32
 80069e2:	2201      	movs	r2, #1
 80069e4:	4932      	ldr	r1, [pc, #200]	; (8006ab0 <tx_application_define+0x2e4>)
 80069e6:	4833      	ldr	r0, [pc, #204]	; (8006ab4 <tx_application_define+0x2e8>)
 80069e8:	f7ff fd00 	bl	80063ec <_txe_semaphore_create>

    /* Create the event flags group used by threads 1 and 5.  */
    tx_event_flags_create(&event_flags_0, "event flags 0");
 80069ec:	2228      	movs	r2, #40	; 0x28
 80069ee:	4932      	ldr	r1, [pc, #200]	; (8006ab8 <tx_application_define+0x2ec>)
 80069f0:	4832      	ldr	r0, [pc, #200]	; (8006abc <tx_application_define+0x2f0>)
 80069f2:	f7ff f96f 	bl	8005cd4 <_txe_event_flags_create>

    /* Create the mutex used by thread 6 and 7 without priority inheritance.  */
    tx_mutex_create(&mutex_0, "mutex 0", TX_NO_INHERIT);
 80069f6:	2334      	movs	r3, #52	; 0x34
 80069f8:	2200      	movs	r2, #0
 80069fa:	4931      	ldr	r1, [pc, #196]	; (8006ac0 <tx_application_define+0x2f4>)
 80069fc:	4831      	ldr	r0, [pc, #196]	; (8006ac4 <tx_application_define+0x2f8>)
 80069fe:	f7ff fa7f 	bl	8005f00 <_txe_mutex_create>

    /* Allocate the memory for a small block pool.  */
    tx_byte_allocate(&byte_pool_0, (VOID **) &pointer, DEMO_BLOCK_POOL_SIZE, TX_NO_WAIT);
 8006a02:	f107 010c 	add.w	r1, r7, #12
 8006a06:	2300      	movs	r3, #0
 8006a08:	2264      	movs	r2, #100	; 0x64
 8006a0a:	4810      	ldr	r0, [pc, #64]	; (8006a4c <tx_application_define+0x280>)
 8006a0c:	f7ff f84e 	bl	8005aac <_txe_byte_allocate>

    /* Create a block memory pool to allocate a message buffer from.  */
    tx_block_pool_create(&block_pool_0, "block pool 0", sizeof(ULONG), pointer, DEMO_BLOCK_POOL_SIZE);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2230      	movs	r2, #48	; 0x30
 8006a14:	9201      	str	r2, [sp, #4]
 8006a16:	2264      	movs	r2, #100	; 0x64
 8006a18:	9200      	str	r2, [sp, #0]
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	492a      	ldr	r1, [pc, #168]	; (8006ac8 <tx_application_define+0x2fc>)
 8006a1e:	482b      	ldr	r0, [pc, #172]	; (8006acc <tx_application_define+0x300>)
 8006a20:	f7fe ff6c 	bl	80058fc <_txe_block_pool_create>

    /* Allocate a block and release the block memory.  */
    tx_block_allocate(&block_pool_0, (VOID **) &pointer, TX_NO_WAIT);
 8006a24:	f107 030c 	add.w	r3, r7, #12
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4827      	ldr	r0, [pc, #156]	; (8006acc <tx_application_define+0x300>)
 8006a2e:	f7fe ff1b 	bl	8005868 <_txe_block_allocate>

    /* Release the block back to the pool.  */
    tx_block_release(pointer);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7ff f809 	bl	8005a4c <_txe_block_release>
}
 8006a3a:	bf00      	nop
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000b9c 	.word	0x20000b9c
 8006a48:	08006d8c 	.word	0x08006d8c
 8006a4c:	20000a80 	.word	0x20000a80
 8006a50:	08006ad1 	.word	0x08006ad1
 8006a54:	08006d98 	.word	0x08006d98
 8006a58:	20002f3c 	.word	0x20002f3c
 8006a5c:	08006b2d 	.word	0x08006b2d
 8006a60:	08006da4 	.word	0x08006da4
 8006a64:	20000914 	.word	0x20000914
 8006a68:	08006b75 	.word	0x08006b75
 8006a6c:	08006db0 	.word	0x08006db0
 8006a70:	200006c0 	.word	0x200006c0
 8006a74:	08006bc9 	.word	0x08006bc9
 8006a78:	08006dbc 	.word	0x08006dbc
 8006a7c:	20000ae8 	.word	0x20000ae8
 8006a80:	08006dc8 	.word	0x08006dc8
 8006a84:	2000085c 	.word	0x2000085c
 8006a88:	08006c31 	.word	0x08006c31
 8006a8c:	08006dd4 	.word	0x08006dd4
 8006a90:	20003090 	.word	0x20003090
 8006a94:	08006c79 	.word	0x08006c79
 8006a98:	08006de0 	.word	0x08006de0
 8006a9c:	200009c8 	.word	0x200009c8
 8006aa0:	08006dec 	.word	0x08006dec
 8006aa4:	2000079c 	.word	0x2000079c
 8006aa8:	08006df8 	.word	0x08006df8
 8006aac:	20002ff0 	.word	0x20002ff0
 8006ab0:	08006e00 	.word	0x08006e00
 8006ab4:	2000077c 	.word	0x2000077c
 8006ab8:	08006e0c 	.word	0x08006e0c
 8006abc:	20003038 	.word	0x20003038
 8006ac0:	08006e1c 	.word	0x08006e1c
 8006ac4:	20000ab4 	.word	0x20000ab4
 8006ac8:	08006e24 	.word	0x08006e24
 8006acc:	20003060 	.word	0x20003060

08006ad0 <thread_0_entry>:


/* Define the test threads.  */

void    thread_0_entry(ULONG thread_input)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
    /* This thread simply sits in while-forever-sleep loop.  */
    while(1)
    {

        /* Increment the thread counter.  */
        thread_0_counter++;
 8006ad8:	4b11      	ldr	r3, [pc, #68]	; (8006b20 <thread_0_entry+0x50>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3301      	adds	r3, #1
 8006ade:	4a10      	ldr	r2, [pc, #64]	; (8006b20 <thread_0_entry+0x50>)
 8006ae0:	6013      	str	r3, [r2, #0]

        /* Sleep for 10 ticks.  */
        tx_thread_sleep(10);
 8006ae2:	200a      	movs	r0, #10
 8006ae4:	f7fe f89e 	bl	8004c24 <_tx_thread_sleep>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2120      	movs	r1, #32
 8006aec:	480d      	ldr	r0, [pc, #52]	; (8006b24 <thread_0_entry+0x54>)
 8006aee:	f7fa fab7 	bl	8001060 <HAL_GPIO_WritePin>
        tx_thread_sleep(10);
 8006af2:	200a      	movs	r0, #10
 8006af4:	f7fe f896 	bl	8004c24 <_tx_thread_sleep>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8006af8:	2201      	movs	r2, #1
 8006afa:	2120      	movs	r1, #32
 8006afc:	4809      	ldr	r0, [pc, #36]	; (8006b24 <thread_0_entry+0x54>)
 8006afe:	f7fa faaf 	bl	8001060 <HAL_GPIO_WritePin>
        /* Set event flag 0 to wakeup thread 5.  */
        status =  tx_event_flags_set(&event_flags_0, 0x1, TX_OR);
 8006b02:	2200      	movs	r2, #0
 8006b04:	2101      	movs	r1, #1
 8006b06:	4808      	ldr	r0, [pc, #32]	; (8006b28 <thread_0_entry+0x58>)
 8006b08:	f7ff f9cc 	bl	8005ea4 <_txe_event_flags_set>
 8006b0c:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d100      	bne.n	8006b16 <thread_0_entry+0x46>
        thread_0_counter++;
 8006b14:	e7e0      	b.n	8006ad8 <thread_0_entry+0x8>
            break;
 8006b16:	bf00      	nop
    }
}
 8006b18:	bf00      	nop
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20000854 	.word	0x20000854
 8006b24:	40020000 	.word	0x40020000
 8006b28:	20003038 	.word	0x20003038

08006b2c <thread_1_entry>:


void    thread_1_entry(ULONG thread_input)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
    /* This thread simply sends messages to a queue shared by thread 2.  */
    while(1)
    {

        /* Increment the thread counter.  */
        thread_1_counter++;
 8006b34:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <thread_1_entry+0x3c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	4a0b      	ldr	r2, [pc, #44]	; (8006b68 <thread_1_entry+0x3c>)
 8006b3c:	6013      	str	r3, [r2, #0]

        /* Send message to queue 0.  */
        status =  tx_queue_send(&queue_0, &thread_1_messages_sent, TX_WAIT_FOREVER);
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b42:	490a      	ldr	r1, [pc, #40]	; (8006b6c <thread_1_entry+0x40>)
 8006b44:	480a      	ldr	r0, [pc, #40]	; (8006b70 <thread_1_entry+0x44>)
 8006b46:	f7ff fc07 	bl	8006358 <_txe_queue_send>
 8006b4a:	60f8      	str	r0, [r7, #12]

        /* Check completion status.  */
        if (status != TX_SUCCESS)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d105      	bne.n	8006b5e <thread_1_entry+0x32>
            break;

        /* Increment the message sent.  */
        thread_1_messages_sent++;
 8006b52:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <thread_1_entry+0x40>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3301      	adds	r3, #1
 8006b58:	4a04      	ldr	r2, [pc, #16]	; (8006b6c <thread_1_entry+0x40>)
 8006b5a:	6013      	str	r3, [r2, #0]
        thread_1_counter++;
 8006b5c:	e7ea      	b.n	8006b34 <thread_1_entry+0x8>
            break;
 8006b5e:	bf00      	nop
    }
}
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	20000a7c 	.word	0x20000a7c
 8006b6c:	2000302c 	.word	0x2000302c
 8006b70:	20002ff0 	.word	0x20002ff0

08006b74 <thread_2_entry>:


void    thread_2_entry(ULONG thread_input)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
    /* This thread retrieves messages placed on the queue by thread 1.  */
    while(1)
    {

        /* Increment the thread counter.  */
        thread_2_counter++;
 8006b7c:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <thread_2_entry+0x48>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3301      	adds	r3, #1
 8006b82:	4a0e      	ldr	r2, [pc, #56]	; (8006bbc <thread_2_entry+0x48>)
 8006b84:	6013      	str	r3, [r2, #0]

        /* Retrieve a message from the queue.  */
        status = tx_queue_receive(&queue_0, &received_message, TX_WAIT_FOREVER);
 8006b86:	f107 0308 	add.w	r3, r7, #8
 8006b8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b8e:	4619      	mov	r1, r3
 8006b90:	480b      	ldr	r0, [pc, #44]	; (8006bc0 <thread_2_entry+0x4c>)
 8006b92:	f7ff fb97 	bl	80062c4 <_txe_queue_receive>
 8006b96:	60f8      	str	r0, [r7, #12]

        /* Check completion status and make sure the message is what we 
           expected.  */
        if ((status != TX_SUCCESS) || (received_message != thread_2_messages_received))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <thread_2_entry+0x40>
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	4b08      	ldr	r3, [pc, #32]	; (8006bc4 <thread_2_entry+0x50>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d105      	bne.n	8006bb4 <thread_2_entry+0x40>
            break;
        
        /* Otherwise, all is okay.  Increment the received message count.  */
        thread_2_messages_received++;
 8006ba8:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <thread_2_entry+0x50>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3301      	adds	r3, #1
 8006bae:	4a05      	ldr	r2, [pc, #20]	; (8006bc4 <thread_2_entry+0x50>)
 8006bb0:	6013      	str	r3, [r2, #0]
        thread_2_counter++;
 8006bb2:	e7e3      	b.n	8006b7c <thread_2_entry+0x8>
    }
}
 8006bb4:	bf00      	nop
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20000858 	.word	0x20000858
 8006bc0:	20002ff0 	.word	0x20002ff0
 8006bc4:	20003030 	.word	0x20003030

08006bc8 <thread_3_and_4_entry>:


void    thread_3_and_4_entry(ULONG thread_input)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
       below shows, these function compete for ownership of semaphore_0.  */
    while(1)
    {

        /* Increment the thread counter.  */
        if (thread_input == 3)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d105      	bne.n	8006be2 <thread_3_and_4_entry+0x1a>
            thread_3_counter++;
 8006bd6:	4b13      	ldr	r3, [pc, #76]	; (8006c24 <thread_3_and_4_entry+0x5c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	4a11      	ldr	r2, [pc, #68]	; (8006c24 <thread_3_and_4_entry+0x5c>)
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	e004      	b.n	8006bec <thread_3_and_4_entry+0x24>
        else
            thread_4_counter++;
 8006be2:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <thread_3_and_4_entry+0x60>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3301      	adds	r3, #1
 8006be8:	4a0f      	ldr	r2, [pc, #60]	; (8006c28 <thread_3_and_4_entry+0x60>)
 8006bea:	6013      	str	r3, [r2, #0]

        /* Get the semaphore with suspension.  */
        status =  tx_semaphore_get(&semaphore_0, TX_WAIT_FOREVER);
 8006bec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006bf0:	480e      	ldr	r0, [pc, #56]	; (8006c2c <thread_3_and_4_entry+0x64>)
 8006bf2:	f7ff fc91 	bl	8006518 <_txe_semaphore_get>
 8006bf6:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10a      	bne.n	8006c14 <thread_3_and_4_entry+0x4c>
            break;

        /* Sleep for 2 ticks to hold the semaphore.  */
        tx_thread_sleep(2);
 8006bfe:	2002      	movs	r0, #2
 8006c00:	f7fe f810 	bl	8004c24 <_tx_thread_sleep>

        /* Release the semaphore.  */
        status =  tx_semaphore_put(&semaphore_0);
 8006c04:	4809      	ldr	r0, [pc, #36]	; (8006c2c <thread_3_and_4_entry+0x64>)
 8006c06:	f7ff fcc9 	bl	800659c <_txe_semaphore_put>
 8006c0a:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d102      	bne.n	8006c18 <thread_3_and_4_entry+0x50>
        if (thread_input == 3)
 8006c12:	e7dd      	b.n	8006bd0 <thread_3_and_4_entry+0x8>
            break;
 8006c14:	bf00      	nop
 8006c16:	e000      	b.n	8006c1a <thread_3_and_4_entry+0x52>
            break;
 8006c18:	bf00      	nop
    }
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000774 	.word	0x20000774
 8006c28:	20000910 	.word	0x20000910
 8006c2c:	2000077c 	.word	0x2000077c

08006c30 <thread_5_entry>:


void    thread_5_entry(ULONG thread_input)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af02      	add	r7, sp, #8
 8006c36:	6078      	str	r0, [r7, #4]
    /* This thread simply waits for an event in a forever loop.  */
    while(1)
    {

        /* Increment the thread counter.  */
        thread_5_counter++;
 8006c38:	4b0d      	ldr	r3, [pc, #52]	; (8006c70 <thread_5_entry+0x40>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	4a0c      	ldr	r2, [pc, #48]	; (8006c70 <thread_5_entry+0x40>)
 8006c40:	6013      	str	r3, [r2, #0]

        /* Wait for event flag 0.  */
        status =  tx_event_flags_get(&event_flags_0, 0x1, TX_OR_CLEAR, 
 8006c42:	f107 0308 	add.w	r3, r7, #8
 8006c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c4a:	9200      	str	r2, [sp, #0]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	2101      	movs	r1, #1
 8006c50:	4808      	ldr	r0, [pc, #32]	; (8006c74 <thread_5_entry+0x44>)
 8006c52:	f7ff f8d1 	bl	8005df8 <_txe_event_flags_get>
 8006c56:	60f8      	str	r0, [r7, #12]
                                                &actual_flags, TX_WAIT_FOREVER);

        /* Check status.  */
        if ((status != TX_SUCCESS) || (actual_flags != 0x1))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d103      	bne.n	8006c66 <thread_5_entry+0x36>
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d100      	bne.n	8006c66 <thread_5_entry+0x36>
        thread_5_counter++;
 8006c64:	e7e8      	b.n	8006c38 <thread_5_entry+0x8>
            break;
    }
}
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	20000778 	.word	0x20000778
 8006c74:	20003038 	.word	0x20003038

08006c78 <thread_6_and_7_entry>:


void    thread_6_and_7_entry(ULONG thread_input)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
       below shows, these function compete for ownership of mutex_0.  */
    while(1)
    {

        /* Increment the thread counter.  */
        if (thread_input == 6)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b06      	cmp	r3, #6
 8006c84:	d105      	bne.n	8006c92 <thread_6_and_7_entry+0x1a>
            thread_6_counter++;
 8006c86:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <thread_6_and_7_entry+0x84>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	4a1b      	ldr	r2, [pc, #108]	; (8006cfc <thread_6_and_7_entry+0x84>)
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	e004      	b.n	8006c9c <thread_6_and_7_entry+0x24>
        else
            thread_7_counter++;
 8006c92:	4b1b      	ldr	r3, [pc, #108]	; (8006d00 <thread_6_and_7_entry+0x88>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3301      	adds	r3, #1
 8006c98:	4a19      	ldr	r2, [pc, #100]	; (8006d00 <thread_6_and_7_entry+0x88>)
 8006c9a:	6013      	str	r3, [r2, #0]

        /* Get the mutex with suspension.  */
        status =  tx_mutex_get(&mutex_0, TX_WAIT_FOREVER);
 8006c9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006ca0:	4818      	ldr	r0, [pc, #96]	; (8006d04 <thread_6_and_7_entry+0x8c>)
 8006ca2:	f7ff f9cb 	bl	800603c <_txe_mutex_get>
 8006ca6:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d11a      	bne.n	8006ce4 <thread_6_and_7_entry+0x6c>
            break;

        /* Get the mutex again with suspension.  This shows
           that an owning thread may retrieve the mutex it
           owns multiple times.  */
        status =  tx_mutex_get(&mutex_0, TX_WAIT_FOREVER);
 8006cae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006cb2:	4814      	ldr	r0, [pc, #80]	; (8006d04 <thread_6_and_7_entry+0x8c>)
 8006cb4:	f7ff f9c2 	bl	800603c <_txe_mutex_get>
 8006cb8:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d113      	bne.n	8006ce8 <thread_6_and_7_entry+0x70>
            break;

        /* Sleep for 2 ticks to hold the mutex.  */
        tx_thread_sleep(2);
 8006cc0:	2002      	movs	r0, #2
 8006cc2:	f7fd ffaf 	bl	8004c24 <_tx_thread_sleep>

        /* Release the mutex.  */
        status =  tx_mutex_put(&mutex_0);
 8006cc6:	480f      	ldr	r0, [pc, #60]	; (8006d04 <thread_6_and_7_entry+0x8c>)
 8006cc8:	f7ff fa12 	bl	80060f0 <_txe_mutex_put>
 8006ccc:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10b      	bne.n	8006cec <thread_6_and_7_entry+0x74>
            break;

        /* Release the mutex again.  This will actually 
           release ownership since it was obtained twice.  */
        status =  tx_mutex_put(&mutex_0);
 8006cd4:	480b      	ldr	r0, [pc, #44]	; (8006d04 <thread_6_and_7_entry+0x8c>)
 8006cd6:	f7ff fa0b 	bl	80060f0 <_txe_mutex_put>
 8006cda:	60f8      	str	r0, [r7, #12]

        /* Check status.  */
        if (status != TX_SUCCESS)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <thread_6_and_7_entry+0x78>
        if (thread_input == 6)
 8006ce2:	e7cd      	b.n	8006c80 <thread_6_and_7_entry+0x8>
            break;
 8006ce4:	bf00      	nop
 8006ce6:	e004      	b.n	8006cf2 <thread_6_and_7_entry+0x7a>
            break;
 8006ce8:	bf00      	nop
 8006cea:	e002      	b.n	8006cf2 <thread_6_and_7_entry+0x7a>
            break;
 8006cec:	bf00      	nop
 8006cee:	e000      	b.n	8006cf2 <thread_6_and_7_entry+0x7a>
            break;
 8006cf0:	bf00      	nop
    }
}
 8006cf2:	bf00      	nop
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20003034 	.word	0x20003034
 8006d00:	20000850 	.word	0x20000850
 8006d04:	20000ab4 	.word	0x20000ab4

08006d08 <__libc_init_array>:
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	4d0d      	ldr	r5, [pc, #52]	; (8006d40 <__libc_init_array+0x38>)
 8006d0c:	4c0d      	ldr	r4, [pc, #52]	; (8006d44 <__libc_init_array+0x3c>)
 8006d0e:	1b64      	subs	r4, r4, r5
 8006d10:	10a4      	asrs	r4, r4, #2
 8006d12:	2600      	movs	r6, #0
 8006d14:	42a6      	cmp	r6, r4
 8006d16:	d109      	bne.n	8006d2c <__libc_init_array+0x24>
 8006d18:	4d0b      	ldr	r5, [pc, #44]	; (8006d48 <__libc_init_array+0x40>)
 8006d1a:	4c0c      	ldr	r4, [pc, #48]	; (8006d4c <__libc_init_array+0x44>)
 8006d1c:	f000 f820 	bl	8006d60 <_init>
 8006d20:	1b64      	subs	r4, r4, r5
 8006d22:	10a4      	asrs	r4, r4, #2
 8006d24:	2600      	movs	r6, #0
 8006d26:	42a6      	cmp	r6, r4
 8006d28:	d105      	bne.n	8006d36 <__libc_init_array+0x2e>
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d30:	4798      	blx	r3
 8006d32:	3601      	adds	r6, #1
 8006d34:	e7ee      	b.n	8006d14 <__libc_init_array+0xc>
 8006d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3a:	4798      	blx	r3
 8006d3c:	3601      	adds	r6, #1
 8006d3e:	e7f2      	b.n	8006d26 <__libc_init_array+0x1e>
 8006d40:	08006e54 	.word	0x08006e54
 8006d44:	08006e54 	.word	0x08006e54
 8006d48:	08006e54 	.word	0x08006e54
 8006d4c:	08006e58 	.word	0x08006e58

08006d50 <memset>:
 8006d50:	4402      	add	r2, r0
 8006d52:	4603      	mov	r3, r0
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d100      	bne.n	8006d5a <memset+0xa>
 8006d58:	4770      	bx	lr
 8006d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5e:	e7f9      	b.n	8006d54 <memset+0x4>

08006d60 <_init>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr

08006d6c <_fini>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	bf00      	nop
 8006d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d72:	bc08      	pop	{r3}
 8006d74:	469e      	mov	lr, r3
 8006d76:	4770      	bx	lr
