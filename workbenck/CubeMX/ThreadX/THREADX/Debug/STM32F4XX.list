
STM32F4XX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004368  08004368  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004368  08004368  00014368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004370  08004370  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004370  08004370  00014370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002880  20000078  080043ec  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200028f8  080043ec  000228f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022444  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048ed  00000000  00000000  000424e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00046dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00047d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191dd  00000000  00000000  00048a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015df9  00000000  00000000  00061bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009607b  00000000  00000000  000779ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010da69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de0  00000000  00000000  0010dabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004284 	.word	0x08004284

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004284 	.word	0x08004284

080001e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001e0:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 80001e2:	481d      	ldr	r0, [pc, #116]	; (8000258 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address
 80001e4:	491d      	ldr	r1, [pc, #116]	; (800025c <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @
 80001e6:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
 80001ea:	6001      	str	r1, [r0, #0]
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001ec:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =_vectors                           @ Pickup address of vector table
 80001f0:	491b      	ldr	r1, [pc, #108]	; (8000260 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80001f2:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001f6:	481b      	ldr	r0, [pc, #108]	; (8000264 <__tx_DBGHandler+0x12>)
    LDR     r1, =_vectors                           @ Pickup address of vector table
 80001f8:	4919      	ldr	r1, [pc, #100]	; (8000260 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80001fa:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80001fc:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001fe:	481a      	ldr	r0, [pc, #104]	; (8000268 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000200:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000202:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 8000206:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000208:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800020c:	4917      	ldr	r1, [pc, #92]	; (800026c <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 800020e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000210:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 8000214:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 8000216:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 800021a:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 800021e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000222:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000226:	4912      	ldr	r1, [pc, #72]	; (8000270 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000228:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF

@
@    /* Return to caller.  */
@
    BX      lr
 800022c:	4770      	bx	lr

0800022e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800022e:	f7ff bffe 	b.w	800022e <__tx_BadHandler>

08000232 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000232:	f7ff bffe 	b.w	8000232 <__tx_HardfaultHandler>

08000236 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 8000236:	f7ff bffe 	b.w	8000236 <__tx_SVCallHandler>

0800023a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800023a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800023c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000240:	4770      	bx	lr

08000242 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000242:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000244:	f000 f89c 	bl	8000380 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000248:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800024c:	4770      	bx	lr

0800024e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 800024e:	f7ff bffe 	b.w	800024e <__tx_NMIHandler>

08000252 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000252:	f7ff bffe 	b.w	8000252 <__tx_DBGHandler>
 8000256:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000258:	200022b8 	.word	0x200022b8
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address
 800025c:	20002ef8 	.word	0x20002ef8
    LDR     r1, =_vectors                           @ Pickup address of vector table
 8000260:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000264:	20002368 	.word	0x20002368
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000268:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 800026c:	000f423f 	.word	0x000f423f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000270:	40ff0000 	.word	0x40ff0000
	...

08000280 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000280:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000284:	4a2a      	ldr	r2, [pc, #168]	; (8000330 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000286:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000288:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800028c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000290:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000294:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000296:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800029a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800029e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002a2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002a6:	f3bf 8f6f 	isb	sy

080002aa <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002aa:	e7fe      	b.n	80002aa <__tx_wait_here>

080002ac <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002ac:	4821      	ldr	r0, [pc, #132]	; (8000334 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ae:	4a22      	ldr	r2, [pc, #136]	; (8000338 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002b0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002b4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002b6:	b191      	cbz	r1, 80002de <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002b8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002ba:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002be:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002c2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002c6:	d101      	bne.n	80002cc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002c8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002cc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002cc:	4c1b      	ldr	r4, [pc, #108]	; (800033c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ce:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002d2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002d4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002d8:	b10d      	cbz	r5, 80002de <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002da:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002dc:	6023      	str	r3, [r4, #0]

080002de <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002de:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002e0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002e2:	b1b1      	cbz	r1, 8000312 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002e4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002e6:	b662      	cpsie	i

080002e8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002e8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ea:	4c14      	ldr	r4, [pc, #80]	; (800033c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002ec:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ee:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002f2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002f4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002f6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002fa:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002fe:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000302:	d101      	bne.n	8000308 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000304:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000308 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000308:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800030c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000310:	4770      	bx	lr

08000312 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000312:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000314:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000316:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000318:	b909      	cbnz	r1, 800031e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800031c:	e7f9      	b.n	8000312 <__tx_ts_wait>

0800031e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800031e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000322:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000326:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800032c:	e7dc      	b.n	80002e8 <__tx_ts_restore>

0800032e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800032e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000330:	2000236c 	.word	0x2000236c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	20002370 	.word	0x20002370
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000338:	20002374 	.word	0x20002374
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	20002408 	.word	0x20002408

08000340 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000340:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000342:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000346:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800034a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800034e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000350:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000354:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000356:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000358:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800035a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800035c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800035e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000360:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000362:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000364:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000366:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000368:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800036c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800036e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 8000372:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000374:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800037a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800037c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800037e:	4770      	bx	lr

08000380 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000380:	4922      	ldr	r1, [pc, #136]	; (800040c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000382:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000384:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000388:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800038a:	4b21      	ldr	r3, [pc, #132]	; (8000410 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800038c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800038e:	b13a      	cbz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000390:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000394:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000396:	b91a      	cbnz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800039a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800039e:	6018      	str	r0, [r3, #0]

080003a0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003a0:	491d      	ldr	r1, [pc, #116]	; (8000418 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003a2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003a4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003a6:	b122      	cbz	r2, 80003b2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003aa:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ae:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003b0:	e008      	b.n	80003c4 <__tx_timer_done>

080003b2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003b2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003b8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003ba:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003bc:	d101      	bne.n	80003c2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003c0:	6818      	ldr	r0, [r3, #0]

080003c2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003c2:	6008      	str	r0, [r1, #0]

080003c4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003c6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003c8:	b912      	cbnz	r2, 80003d0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ca:	4914      	ldr	r1, [pc, #80]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003cc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ce:	b1d0      	cbz	r0, 8000406 <__tx_timer_nothing_expired>

080003d0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003d0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003d4:	4911      	ldr	r1, [pc, #68]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003d6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003d8:	b108      	cbz	r0, 80003de <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003da:	f002 fe77 	bl	80030cc <_tx_timer_expiration_process>

080003de <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003e0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003e2:	b172      	cbz	r2, 8000402 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003e4:	f002 fde4 	bl	8002fb0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003e8:	480f      	ldr	r0, [pc, #60]	; (8000428 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003ea:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003ec:	b949      	cbnz	r1, 8000402 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ee:	480f      	ldr	r0, [pc, #60]	; (800042c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003f0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f2:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003f4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003f6:	480f      	ldr	r0, [pc, #60]	; (8000434 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003fc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003fe:	d000      	beq.n	8000402 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000400:	6002      	str	r2, [r0, #0]

08000402 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000402:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000406 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000406:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	200028e4 	.word	0x200028e4
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000410:	20002408 	.word	0x20002408
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000414:	200028e0 	.word	0x200028e0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	20002380 	.word	0x20002380
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800041c:	20002404 	.word	0x20002404
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000420:	20002410 	.word	0x20002410
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000424:	200024cc 	.word	0x200024cc
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000428:	2000236c 	.word	0x2000236c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800042c:	20002370 	.word	0x20002370
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000430:	20002374 	.word	0x20002374
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000434:	e000ed04 	.word	0xe000ed04

08000438 <__aeabi_uldivmod>:
 8000438:	b953      	cbnz	r3, 8000450 <__aeabi_uldivmod+0x18>
 800043a:	b94a      	cbnz	r2, 8000450 <__aeabi_uldivmod+0x18>
 800043c:	2900      	cmp	r1, #0
 800043e:	bf08      	it	eq
 8000440:	2800      	cmpeq	r0, #0
 8000442:	bf1c      	itt	ne
 8000444:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000448:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800044c:	f000 b96e 	b.w	800072c <__aeabi_idiv0>
 8000450:	f1ad 0c08 	sub.w	ip, sp, #8
 8000454:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000464:	b004      	add	sp, #16
 8000466:	4770      	bx	lr

08000468 <__udivmoddi4>:
 8000468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800046c:	9d08      	ldr	r5, [sp, #32]
 800046e:	4604      	mov	r4, r0
 8000470:	468c      	mov	ip, r1
 8000472:	2b00      	cmp	r3, #0
 8000474:	f040 8083 	bne.w	800057e <__udivmoddi4+0x116>
 8000478:	428a      	cmp	r2, r1
 800047a:	4617      	mov	r7, r2
 800047c:	d947      	bls.n	800050e <__udivmoddi4+0xa6>
 800047e:	fab2 f282 	clz	r2, r2
 8000482:	b142      	cbz	r2, 8000496 <__udivmoddi4+0x2e>
 8000484:	f1c2 0020 	rsb	r0, r2, #32
 8000488:	fa24 f000 	lsr.w	r0, r4, r0
 800048c:	4091      	lsls	r1, r2
 800048e:	4097      	lsls	r7, r2
 8000490:	ea40 0c01 	orr.w	ip, r0, r1
 8000494:	4094      	lsls	r4, r2
 8000496:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800049a:	0c23      	lsrs	r3, r4, #16
 800049c:	fbbc f6f8 	udiv	r6, ip, r8
 80004a0:	fa1f fe87 	uxth.w	lr, r7
 80004a4:	fb08 c116 	mls	r1, r8, r6, ip
 80004a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ac:	fb06 f10e 	mul.w	r1, r6, lr
 80004b0:	4299      	cmp	r1, r3
 80004b2:	d909      	bls.n	80004c8 <__udivmoddi4+0x60>
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80004ba:	f080 8119 	bcs.w	80006f0 <__udivmoddi4+0x288>
 80004be:	4299      	cmp	r1, r3
 80004c0:	f240 8116 	bls.w	80006f0 <__udivmoddi4+0x288>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	443b      	add	r3, r7
 80004c8:	1a5b      	subs	r3, r3, r1
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	45a6      	cmp	lr, r4
 80004de:	d909      	bls.n	80004f4 <__udivmoddi4+0x8c>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e6:	f080 8105 	bcs.w	80006f4 <__udivmoddi4+0x28c>
 80004ea:	45a6      	cmp	lr, r4
 80004ec:	f240 8102 	bls.w	80006f4 <__udivmoddi4+0x28c>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004f8:	eba4 040e 	sub.w	r4, r4, lr
 80004fc:	2600      	movs	r6, #0
 80004fe:	b11d      	cbz	r5, 8000508 <__udivmoddi4+0xa0>
 8000500:	40d4      	lsrs	r4, r2
 8000502:	2300      	movs	r3, #0
 8000504:	e9c5 4300 	strd	r4, r3, [r5]
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	b902      	cbnz	r2, 8000512 <__udivmoddi4+0xaa>
 8000510:	deff      	udf	#255	; 0xff
 8000512:	fab2 f282 	clz	r2, r2
 8000516:	2a00      	cmp	r2, #0
 8000518:	d150      	bne.n	80005bc <__udivmoddi4+0x154>
 800051a:	1bcb      	subs	r3, r1, r7
 800051c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	2601      	movs	r6, #1
 8000526:	fbb3 fcfe 	udiv	ip, r3, lr
 800052a:	0c21      	lsrs	r1, r4, #16
 800052c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000530:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000534:	fb08 f30c 	mul.w	r3, r8, ip
 8000538:	428b      	cmp	r3, r1
 800053a:	d907      	bls.n	800054c <__udivmoddi4+0xe4>
 800053c:	1879      	adds	r1, r7, r1
 800053e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000542:	d202      	bcs.n	800054a <__udivmoddi4+0xe2>
 8000544:	428b      	cmp	r3, r1
 8000546:	f200 80e9 	bhi.w	800071c <__udivmoddi4+0x2b4>
 800054a:	4684      	mov	ip, r0
 800054c:	1ac9      	subs	r1, r1, r3
 800054e:	b2a3      	uxth	r3, r4
 8000550:	fbb1 f0fe 	udiv	r0, r1, lr
 8000554:	fb0e 1110 	mls	r1, lr, r0, r1
 8000558:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800055c:	fb08 f800 	mul.w	r8, r8, r0
 8000560:	45a0      	cmp	r8, r4
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x10c>
 8000564:	193c      	adds	r4, r7, r4
 8000566:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800056a:	d202      	bcs.n	8000572 <__udivmoddi4+0x10a>
 800056c:	45a0      	cmp	r8, r4
 800056e:	f200 80d9 	bhi.w	8000724 <__udivmoddi4+0x2bc>
 8000572:	4618      	mov	r0, r3
 8000574:	eba4 0408 	sub.w	r4, r4, r8
 8000578:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800057c:	e7bf      	b.n	80004fe <__udivmoddi4+0x96>
 800057e:	428b      	cmp	r3, r1
 8000580:	d909      	bls.n	8000596 <__udivmoddi4+0x12e>
 8000582:	2d00      	cmp	r5, #0
 8000584:	f000 80b1 	beq.w	80006ea <__udivmoddi4+0x282>
 8000588:	2600      	movs	r6, #0
 800058a:	e9c5 0100 	strd	r0, r1, [r5]
 800058e:	4630      	mov	r0, r6
 8000590:	4631      	mov	r1, r6
 8000592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000596:	fab3 f683 	clz	r6, r3
 800059a:	2e00      	cmp	r6, #0
 800059c:	d14a      	bne.n	8000634 <__udivmoddi4+0x1cc>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d302      	bcc.n	80005a8 <__udivmoddi4+0x140>
 80005a2:	4282      	cmp	r2, r0
 80005a4:	f200 80b8 	bhi.w	8000718 <__udivmoddi4+0x2b0>
 80005a8:	1a84      	subs	r4, r0, r2
 80005aa:	eb61 0103 	sbc.w	r1, r1, r3
 80005ae:	2001      	movs	r0, #1
 80005b0:	468c      	mov	ip, r1
 80005b2:	2d00      	cmp	r5, #0
 80005b4:	d0a8      	beq.n	8000508 <__udivmoddi4+0xa0>
 80005b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80005ba:	e7a5      	b.n	8000508 <__udivmoddi4+0xa0>
 80005bc:	f1c2 0320 	rsb	r3, r2, #32
 80005c0:	fa20 f603 	lsr.w	r6, r0, r3
 80005c4:	4097      	lsls	r7, r2
 80005c6:	fa01 f002 	lsl.w	r0, r1, r2
 80005ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005ce:	40d9      	lsrs	r1, r3
 80005d0:	4330      	orrs	r0, r6
 80005d2:	0c03      	lsrs	r3, r0, #16
 80005d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80005d8:	fa1f f887 	uxth.w	r8, r7
 80005dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80005e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e4:	fb06 f108 	mul.w	r1, r6, r8
 80005e8:	4299      	cmp	r1, r3
 80005ea:	fa04 f402 	lsl.w	r4, r4, r2
 80005ee:	d909      	bls.n	8000604 <__udivmoddi4+0x19c>
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80005f6:	f080 808d 	bcs.w	8000714 <__udivmoddi4+0x2ac>
 80005fa:	4299      	cmp	r1, r3
 80005fc:	f240 808a 	bls.w	8000714 <__udivmoddi4+0x2ac>
 8000600:	3e02      	subs	r6, #2
 8000602:	443b      	add	r3, r7
 8000604:	1a5b      	subs	r3, r3, r1
 8000606:	b281      	uxth	r1, r0
 8000608:	fbb3 f0fe 	udiv	r0, r3, lr
 800060c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000610:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000614:	fb00 f308 	mul.w	r3, r0, r8
 8000618:	428b      	cmp	r3, r1
 800061a:	d907      	bls.n	800062c <__udivmoddi4+0x1c4>
 800061c:	1879      	adds	r1, r7, r1
 800061e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000622:	d273      	bcs.n	800070c <__udivmoddi4+0x2a4>
 8000624:	428b      	cmp	r3, r1
 8000626:	d971      	bls.n	800070c <__udivmoddi4+0x2a4>
 8000628:	3802      	subs	r0, #2
 800062a:	4439      	add	r1, r7
 800062c:	1acb      	subs	r3, r1, r3
 800062e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000632:	e778      	b.n	8000526 <__udivmoddi4+0xbe>
 8000634:	f1c6 0c20 	rsb	ip, r6, #32
 8000638:	fa03 f406 	lsl.w	r4, r3, r6
 800063c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000640:	431c      	orrs	r4, r3
 8000642:	fa20 f70c 	lsr.w	r7, r0, ip
 8000646:	fa01 f306 	lsl.w	r3, r1, r6
 800064a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800064e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000652:	431f      	orrs	r7, r3
 8000654:	0c3b      	lsrs	r3, r7, #16
 8000656:	fbb1 f9fe 	udiv	r9, r1, lr
 800065a:	fa1f f884 	uxth.w	r8, r4
 800065e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000662:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000666:	fb09 fa08 	mul.w	sl, r9, r8
 800066a:	458a      	cmp	sl, r1
 800066c:	fa02 f206 	lsl.w	r2, r2, r6
 8000670:	fa00 f306 	lsl.w	r3, r0, r6
 8000674:	d908      	bls.n	8000688 <__udivmoddi4+0x220>
 8000676:	1861      	adds	r1, r4, r1
 8000678:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800067c:	d248      	bcs.n	8000710 <__udivmoddi4+0x2a8>
 800067e:	458a      	cmp	sl, r1
 8000680:	d946      	bls.n	8000710 <__udivmoddi4+0x2a8>
 8000682:	f1a9 0902 	sub.w	r9, r9, #2
 8000686:	4421      	add	r1, r4
 8000688:	eba1 010a 	sub.w	r1, r1, sl
 800068c:	b2bf      	uxth	r7, r7
 800068e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000692:	fb0e 1110 	mls	r1, lr, r0, r1
 8000696:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800069a:	fb00 f808 	mul.w	r8, r0, r8
 800069e:	45b8      	cmp	r8, r7
 80006a0:	d907      	bls.n	80006b2 <__udivmoddi4+0x24a>
 80006a2:	19e7      	adds	r7, r4, r7
 80006a4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80006a8:	d22e      	bcs.n	8000708 <__udivmoddi4+0x2a0>
 80006aa:	45b8      	cmp	r8, r7
 80006ac:	d92c      	bls.n	8000708 <__udivmoddi4+0x2a0>
 80006ae:	3802      	subs	r0, #2
 80006b0:	4427      	add	r7, r4
 80006b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006b6:	eba7 0708 	sub.w	r7, r7, r8
 80006ba:	fba0 8902 	umull	r8, r9, r0, r2
 80006be:	454f      	cmp	r7, r9
 80006c0:	46c6      	mov	lr, r8
 80006c2:	4649      	mov	r1, r9
 80006c4:	d31a      	bcc.n	80006fc <__udivmoddi4+0x294>
 80006c6:	d017      	beq.n	80006f8 <__udivmoddi4+0x290>
 80006c8:	b15d      	cbz	r5, 80006e2 <__udivmoddi4+0x27a>
 80006ca:	ebb3 020e 	subs.w	r2, r3, lr
 80006ce:	eb67 0701 	sbc.w	r7, r7, r1
 80006d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006d6:	40f2      	lsrs	r2, r6
 80006d8:	ea4c 0202 	orr.w	r2, ip, r2
 80006dc:	40f7      	lsrs	r7, r6
 80006de:	e9c5 2700 	strd	r2, r7, [r5]
 80006e2:	2600      	movs	r6, #0
 80006e4:	4631      	mov	r1, r6
 80006e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ea:	462e      	mov	r6, r5
 80006ec:	4628      	mov	r0, r5
 80006ee:	e70b      	b.n	8000508 <__udivmoddi4+0xa0>
 80006f0:	4606      	mov	r6, r0
 80006f2:	e6e9      	b.n	80004c8 <__udivmoddi4+0x60>
 80006f4:	4618      	mov	r0, r3
 80006f6:	e6fd      	b.n	80004f4 <__udivmoddi4+0x8c>
 80006f8:	4543      	cmp	r3, r8
 80006fa:	d2e5      	bcs.n	80006c8 <__udivmoddi4+0x260>
 80006fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000700:	eb69 0104 	sbc.w	r1, r9, r4
 8000704:	3801      	subs	r0, #1
 8000706:	e7df      	b.n	80006c8 <__udivmoddi4+0x260>
 8000708:	4608      	mov	r0, r1
 800070a:	e7d2      	b.n	80006b2 <__udivmoddi4+0x24a>
 800070c:	4660      	mov	r0, ip
 800070e:	e78d      	b.n	800062c <__udivmoddi4+0x1c4>
 8000710:	4681      	mov	r9, r0
 8000712:	e7b9      	b.n	8000688 <__udivmoddi4+0x220>
 8000714:	4666      	mov	r6, ip
 8000716:	e775      	b.n	8000604 <__udivmoddi4+0x19c>
 8000718:	4630      	mov	r0, r6
 800071a:	e74a      	b.n	80005b2 <__udivmoddi4+0x14a>
 800071c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000720:	4439      	add	r1, r7
 8000722:	e713      	b.n	800054c <__udivmoddi4+0xe4>
 8000724:	3802      	subs	r0, #2
 8000726:	443c      	add	r4, r7
 8000728:	e724      	b.n	8000574 <__udivmoddi4+0x10c>
 800072a:	bf00      	nop

0800072c <__aeabi_idiv0>:
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a2c      	ldr	r2, [pc, #176]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a25      	ldr	r2, [pc, #148]	; (8000800 <MX_GPIO_Init+0xd0>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <MX_GPIO_Init+0xd0>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	4812      	ldr	r0, [pc, #72]	; (8000804 <MX_GPIO_Init+0xd4>)
 80007bc:	f000 fd3c 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <MX_GPIO_Init+0xd8>)
 80007d8:	f000 fbaa 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007dc:	2320      	movs	r3, #32
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_GPIO_Init+0xd4>)
 80007f4:	f000 fb9c 	bl	8000f30 <HAL_GPIO_Init>

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000
 8000808:	40020800 	.word	0x40020800

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 fa6a 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f808 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f7ff ff8a 	bl	8000730 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800081c:	f000 f9c8 	bl	8000bb0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  main_user();
 8000820:	f003 f830 	bl	8003884 <main_user>
  while (1)
 8000824:	e7fe      	b.n	8000824 <main+0x18>
	...

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	2230      	movs	r2, #48	; 0x30
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f003 f856 	bl	80038e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <SystemClock_Config+0xc8>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a26      	ldr	r2, [pc, #152]	; (80008f0 <SystemClock_Config+0xc8>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <SystemClock_Config+0xc8>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <SystemClock_Config+0xcc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a20      	ldr	r2, [pc, #128]	; (80008f4 <SystemClock_Config+0xcc>)
 8000872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <SystemClock_Config+0xcc>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000888:	2301      	movs	r3, #1
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088c:	2310      	movs	r3, #16
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2302      	movs	r3, #2
 8000892:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000894:	2300      	movs	r3, #0
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000898:	2308      	movs	r3, #8
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fcdd 	bl	800126c <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b8:	f000 f830 	bl	800091c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2302      	movs	r3, #2
 80008c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	2103      	movs	r1, #3
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 ff3f 	bl	800175c <HAL_RCC_ClockConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008e4:	f000 f81a 	bl	800091c <Error_Handler>
  }
}
 80008e8:	bf00      	nop
 80008ea:	3750      	adds	r7, #80	; 0x50
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d101      	bne.n	800090e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090a:	f000 fa0f 	bl	8000d2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40000c00 	.word	0x40000c00

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	2032      	movs	r0, #50	; 0x32
 800098e:	f000 faa5 	bl	8000edc <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000992:	2032      	movs	r0, #50	; 0x32
 8000994:	f000 fabe 	bl	8000f14 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <HAL_InitTick+0xa4>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a1e      	ldr	r2, [pc, #120]	; (8000a1c <HAL_InitTick+0xa4>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <HAL_InitTick+0xa4>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b4:	f107 0210 	add.w	r2, r7, #16
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 f8c8 	bl	8001b54 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009c4:	f001 f89e 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 80009c8:	4603      	mov	r3, r0
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d0:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <HAL_InitTick+0xa8>)
 80009d2:	fba2 2303 	umull	r2, r3, r2, r3
 80009d6:	0c9b      	lsrs	r3, r3, #18
 80009d8:	3b01      	subs	r3, #1
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_InitTick+0xac>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <HAL_InitTick+0xb0>)
 80009e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_InitTick+0xac>)
 80009e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_InitTick+0xac>)
 80009ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ee:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_InitTick+0xac>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_InitTick+0xac>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <HAL_InitTick+0xac>)
 80009fe:	f001 f8db 	bl	8001bb8 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d104      	bne.n	8000a12 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000a08:	4806      	ldr	r0, [pc, #24]	; (8000a24 <HAL_InitTick+0xac>)
 8000a0a:	f001 f92f 	bl	8001c6c <HAL_TIM_Base_Start_IT>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3730      	adds	r7, #48	; 0x30
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	431bde83 	.word	0x431bde83
 8000a24:	20002210 	.word	0x20002210
 8000a28:	40000c00 	.word	0x40000c00

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <NMI_Handler+0x4>

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <TIM5_IRQHandler+0x10>)
 8000a6e:	f001 f95f 	bl	8001d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20002210 	.word	0x20002210

08000a7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e00a      	b.n	8000aa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a8e:	f3af 8000 	nop.w
 8000a92:	4601      	mov	r1, r0
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	b2ca      	uxtb	r2, r1
 8000a9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dbf0      	blt.n	8000a8e <_read+0x12>
	}

return len;
 8000aac:	687b      	ldr	r3, [r7, #4]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
	return -1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ade:	605a      	str	r2, [r3, #4]
	return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_isatty>:

int _isatty(int file)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	return 1;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f002 fea0 	bl	8003894 <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20020000 	.word	0x20020000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	20000094 	.word	0x20000094
 8000b88:	200028f8 	.word	0x200028f8

08000b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_USART2_UART_Init+0x50>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000be8:	f001 fa66 	bl	80020b8 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bf2:	f7ff fe93 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20002258 	.word	0x20002258
 8000c00:	40004400 	.word	0x40004400

08000c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <HAL_UART_MspInit+0x84>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d12b      	bne.n	8000c7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c5e:	230c      	movs	r3, #12
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c6e:	2307      	movs	r3, #7
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_UART_MspInit+0x8c>)
 8000c7a:	f000 f959 	bl	8000f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	; 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ccc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c9a:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb0:	4c0b      	ldr	r4, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cbe:	f7ff ff65 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f002 fded 	bl	80038a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fda1 	bl	800080c <main>
  bx  lr    
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ccc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cd8:	08004378 	.word	0x08004378
  ldr r2, =_sbss
 8000cdc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ce0:	200028f8 	.word	0x200028f8

08000ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <HAL_Init+0x40>)
 8000cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_Init+0x40>)
 8000cfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x40>)
 8000d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f8d8 	bl	8000ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fe2e 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fe04 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023c00 	.word	0x40023c00

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	2000229c 	.word	0x2000229c

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	2000229c 	.word	0x2000229c

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0b      	blt.n	8000dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	4907      	ldr	r1, [pc, #28]	; (8000e08 <__NVIC_EnableIRQ+0x38>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	; (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	; (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff4c 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eee:	f7ff ff61 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000ef2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	6978      	ldr	r0, [r7, #20]
 8000efa:	f7ff ffb1 	bl	8000e60 <NVIC_EncodePriority>
 8000efe:	4602      	mov	r2, r0
 8000f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff80 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff54 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e159      	b.n	8001200 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 8148 	bne.w	80011fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d005      	beq.n	8000f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d130      	bne.n	8000fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 0201 	and.w	r2, r3, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d017      	beq.n	8001020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d123      	bne.n	8001074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	69b9      	ldr	r1, [r7, #24]
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0203 	and.w	r2, r3, #3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80a2 	beq.w	80011fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b57      	ldr	r3, [pc, #348]	; (8001218 <HAL_GPIO_Init+0x2e8>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a56      	ldr	r2, [pc, #344]	; (8001218 <HAL_GPIO_Init+0x2e8>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b54      	ldr	r3, [pc, #336]	; (8001218 <HAL_GPIO_Init+0x2e8>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d2:	4a52      	ldr	r2, [pc, #328]	; (800121c <HAL_GPIO_Init+0x2ec>)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a49      	ldr	r2, [pc, #292]	; (8001220 <HAL_GPIO_Init+0x2f0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d019      	beq.n	8001132 <HAL_GPIO_Init+0x202>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a48      	ldr	r2, [pc, #288]	; (8001224 <HAL_GPIO_Init+0x2f4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0x1fe>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a47      	ldr	r2, [pc, #284]	; (8001228 <HAL_GPIO_Init+0x2f8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00d      	beq.n	800112a <HAL_GPIO_Init+0x1fa>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a46      	ldr	r2, [pc, #280]	; (800122c <HAL_GPIO_Init+0x2fc>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0x1f6>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a45      	ldr	r2, [pc, #276]	; (8001230 <HAL_GPIO_Init+0x300>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_GPIO_Init+0x1f2>
 800111e:	2304      	movs	r3, #4
 8001120:	e008      	b.n	8001134 <HAL_GPIO_Init+0x204>
 8001122:	2307      	movs	r3, #7
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x204>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x204>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x204>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x204>
 8001132:	2300      	movs	r3, #0
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001144:	4935      	ldr	r1, [pc, #212]	; (800121c <HAL_GPIO_Init+0x2ec>)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001152:	4b38      	ldr	r3, [pc, #224]	; (8001234 <HAL_GPIO_Init+0x304>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001176:	4a2f      	ldr	r2, [pc, #188]	; (8001234 <HAL_GPIO_Init+0x304>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_GPIO_Init+0x304>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a0:	4a24      	ldr	r2, [pc, #144]	; (8001234 <HAL_GPIO_Init+0x304>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <HAL_GPIO_Init+0x304>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ca:	4a1a      	ldr	r2, [pc, #104]	; (8001234 <HAL_GPIO_Init+0x304>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_GPIO_Init+0x304>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f4:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <HAL_GPIO_Init+0x304>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	f67f aea2 	bls.w	8000f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40021000 	.word	0x40021000
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e264      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d075      	beq.n	8001376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800128a:	4ba3      	ldr	r3, [pc, #652]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b04      	cmp	r3, #4
 8001294:	d00c      	beq.n	80012b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001296:	4ba0      	ldr	r3, [pc, #640]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d112      	bne.n	80012c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a2:	4b9d      	ldr	r3, [pc, #628]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ae:	d10b      	bne.n	80012c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	4b99      	ldr	r3, [pc, #612]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d05b      	beq.n	8001374 <HAL_RCC_OscConfig+0x108>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d157      	bne.n	8001374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e23f      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d0:	d106      	bne.n	80012e0 <HAL_RCC_OscConfig+0x74>
 80012d2:	4b91      	ldr	r3, [pc, #580]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a90      	ldr	r2, [pc, #576]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e01d      	b.n	800131c <HAL_RCC_OscConfig+0xb0>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x98>
 80012ea:	4b8b      	ldr	r3, [pc, #556]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a8a      	ldr	r2, [pc, #552]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a87      	ldr	r2, [pc, #540]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e00b      	b.n	800131c <HAL_RCC_OscConfig+0xb0>
 8001304:	4b84      	ldr	r3, [pc, #528]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a83      	ldr	r2, [pc, #524]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b81      	ldr	r3, [pc, #516]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a80      	ldr	r2, [pc, #512]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d013      	beq.n	800134c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fd16 	bl	8000d54 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fd12 	bl	8000d54 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e204      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b76      	ldr	r3, [pc, #472]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0xc0>
 800134a:	e014      	b.n	8001376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fd02 	bl	8000d54 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fcfe 	bl	8000d54 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e1f0      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	4b6c      	ldr	r3, [pc, #432]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0xe8>
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d063      	beq.n	800144a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001382:	4b65      	ldr	r3, [pc, #404]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138e:	4b62      	ldr	r3, [pc, #392]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001396:	2b08      	cmp	r3, #8
 8001398:	d11c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d116      	bne.n	80013d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	4b5c      	ldr	r3, [pc, #368]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d005      	beq.n	80013be <HAL_RCC_OscConfig+0x152>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e1c4      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4b56      	ldr	r3, [pc, #344]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4952      	ldr	r1, [pc, #328]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	e03a      	b.n	800144a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d020      	beq.n	800141e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013dc:	4b4f      	ldr	r3, [pc, #316]	; (800151c <HAL_RCC_OscConfig+0x2b0>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fcb7 	bl	8000d54 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fcb3 	bl	8000d54 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e1a5      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	4b46      	ldr	r3, [pc, #280]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4940      	ldr	r1, [pc, #256]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
 800141c:	e015      	b.n	800144a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141e:	4b3f      	ldr	r3, [pc, #252]	; (800151c <HAL_RCC_OscConfig+0x2b0>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fc96 	bl	8000d54 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142c:	f7ff fc92 	bl	8000d54 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e184      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d030      	beq.n	80014b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d016      	beq.n	800148c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_RCC_OscConfig+0x2b4>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff fc76 	bl	8000d54 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff fc72 	bl	8000d54 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e164      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x200>
 800148a:	e015      	b.n	80014b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_RCC_OscConfig+0x2b4>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff fc5f 	bl	8000d54 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149a:	f7ff fc5b 	bl	8000d54 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e14d      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80a0 	beq.w	8001606 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f2:	2301      	movs	r3, #1
 80014f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d121      	bne.n	8001546 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150e:	f7ff fc21 	bl	8000d54 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	e011      	b.n	800153a <HAL_RCC_OscConfig+0x2ce>
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	42470000 	.word	0x42470000
 8001520:	42470e80 	.word	0x42470e80
 8001524:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001528:	f7ff fc14 	bl	8000d54 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e106      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b85      	ldr	r3, [pc, #532]	; (8001750 <HAL_RCC_OscConfig+0x4e4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d106      	bne.n	800155c <HAL_RCC_OscConfig+0x2f0>
 800154e:	4b81      	ldr	r3, [pc, #516]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a80      	ldr	r2, [pc, #512]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
 800155a:	e01c      	b.n	8001596 <HAL_RCC_OscConfig+0x32a>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x312>
 8001564:	4b7b      	ldr	r3, [pc, #492]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a7a      	ldr	r2, [pc, #488]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
 8001570:	4b78      	ldr	r3, [pc, #480]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001574:	4a77      	ldr	r2, [pc, #476]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6713      	str	r3, [r2, #112]	; 0x70
 800157c:	e00b      	b.n	8001596 <HAL_RCC_OscConfig+0x32a>
 800157e:	4b75      	ldr	r3, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	4a74      	ldr	r2, [pc, #464]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6713      	str	r3, [r2, #112]	; 0x70
 800158a:	4b72      	ldr	r3, [pc, #456]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	4a71      	ldr	r2, [pc, #452]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d015      	beq.n	80015ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159e:	f7ff fbd9 	bl	8000d54 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fbd5 	bl	8000d54 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0c5      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	4b65      	ldr	r3, [pc, #404]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ee      	beq.n	80015a6 <HAL_RCC_OscConfig+0x33a>
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fbc3 	bl	8000d54 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff fbbf 	bl	8000d54 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0af      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	4b5a      	ldr	r3, [pc, #360]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d105      	bne.n	8001606 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fa:	4b56      	ldr	r3, [pc, #344]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a55      	ldr	r2, [pc, #340]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 809b 	beq.w	8001746 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001610:	4b50      	ldr	r3, [pc, #320]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d05c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d141      	bne.n	80016a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001624:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <HAL_RCC_OscConfig+0x4ec>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fb93 	bl	8000d54 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff fb8f 	bl	8000d54 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e081      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001644:	4b43      	ldr	r3, [pc, #268]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69da      	ldr	r2, [r3, #28]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	019b      	lsls	r3, r3, #6
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	3b01      	subs	r3, #1
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	4937      	ldr	r1, [pc, #220]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_RCC_OscConfig+0x4ec>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb68 	bl	8000d54 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb64 	bl	8000d54 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e056      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x41c>
 80016a6:	e04e      	b.n	8001746 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_OscConfig+0x4ec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fb51 	bl	8000d54 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff fb4d 	bl	8000d54 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e03f      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x44a>
 80016d4:	e037      	b.n	8001746 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e032      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d028      	beq.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d121      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d11a      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001712:	4013      	ands	r3, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001718:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800171a:	4293      	cmp	r3, r2
 800171c:	d111      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	3b01      	subs	r3, #1
 800172c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d107      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40007000 	.word	0x40007000
 8001754:	40023800 	.word	0x40023800
 8001758:	42470060 	.word	0x42470060

0800175c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0cc      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d90c      	bls.n	8001798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	4b65      	ldr	r3, [pc, #404]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0b8      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b0:	4b59      	ldr	r3, [pc, #356]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a52      	ldr	r2, [pc, #328]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b50      	ldr	r3, [pc, #320]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	494d      	ldr	r1, [pc, #308]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d044      	beq.n	800187c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d119      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e07f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d003      	beq.n	800181a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	2b03      	cmp	r3, #3
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181a:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e06f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e067      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183a:	4b37      	ldr	r3, [pc, #220]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f023 0203 	bic.w	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4934      	ldr	r1, [pc, #208]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800184c:	f7ff fa82 	bl	8000d54 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	e00a      	b.n	800186a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001854:	f7ff fa7e 	bl	8000d54 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e04f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 020c 	and.w	r2, r3, #12
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	429a      	cmp	r2, r3
 800187a:	d1eb      	bne.n	8001854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800187c:	4b25      	ldr	r3, [pc, #148]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d20c      	bcs.n	80018a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b22      	ldr	r3, [pc, #136]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e032      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4916      	ldr	r1, [pc, #88]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	490e      	ldr	r1, [pc, #56]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018e2:	f000 f821 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	490a      	ldr	r1, [pc, #40]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	5ccb      	ldrb	r3, [r1, r3]
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f838 	bl	8000978 <HAL_InitTick>

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00
 8001918:	40023800 	.word	0x40023800
 800191c:	080042ec 	.word	0x080042ec
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	2300      	movs	r3, #0
 800193a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001940:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d00d      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x40>
 800194c:	2b08      	cmp	r3, #8
 800194e:	f200 80bd 	bhi.w	8001acc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x34>
 8001956:	2b04      	cmp	r3, #4
 8001958:	d003      	beq.n	8001962 <HAL_RCC_GetSysClockFreq+0x3a>
 800195a:	e0b7      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b61      	ldr	r3, [pc, #388]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800195e:	60bb      	str	r3, [r7, #8]
       break;
 8001960:	e0b7      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001962:	4b61      	ldr	r3, [pc, #388]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001964:	60bb      	str	r3, [r7, #8]
      break;
 8001966:	e0b4      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001968:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001970:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001972:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d04d      	beq.n	8001a1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197e:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	099b      	lsrs	r3, r3, #6
 8001984:	461a      	mov	r2, r3
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	ea02 0800 	and.w	r8, r2, r0
 8001996:	ea03 0901 	and.w	r9, r3, r1
 800199a:	4640      	mov	r0, r8
 800199c:	4649      	mov	r1, r9
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	014b      	lsls	r3, r1, #5
 80019a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019ac:	0142      	lsls	r2, r0, #5
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	ebb0 0008 	subs.w	r0, r0, r8
 80019b6:	eb61 0109 	sbc.w	r1, r1, r9
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	018b      	lsls	r3, r1, #6
 80019c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019c8:	0182      	lsls	r2, r0, #6
 80019ca:	1a12      	subs	r2, r2, r0
 80019cc:	eb63 0301 	sbc.w	r3, r3, r1
 80019d0:	f04f 0000 	mov.w	r0, #0
 80019d4:	f04f 0100 	mov.w	r1, #0
 80019d8:	00d9      	lsls	r1, r3, #3
 80019da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019de:	00d0      	lsls	r0, r2, #3
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	eb12 0208 	adds.w	r2, r2, r8
 80019e8:	eb43 0309 	adc.w	r3, r3, r9
 80019ec:	f04f 0000 	mov.w	r0, #0
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	0259      	lsls	r1, r3, #9
 80019f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019fa:	0250      	lsls	r0, r2, #9
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	f7fe fd14 	bl	8000438 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	e04a      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	099b      	lsrs	r3, r3, #6
 8001a20:	461a      	mov	r2, r3
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	ea02 0400 	and.w	r4, r2, r0
 8001a32:	ea03 0501 	and.w	r5, r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	014b      	lsls	r3, r1, #5
 8001a44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a48:	0142      	lsls	r2, r0, #5
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	1b00      	subs	r0, r0, r4
 8001a50:	eb61 0105 	sbc.w	r1, r1, r5
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	018b      	lsls	r3, r1, #6
 8001a5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a62:	0182      	lsls	r2, r0, #6
 8001a64:	1a12      	subs	r2, r2, r0
 8001a66:	eb63 0301 	sbc.w	r3, r3, r1
 8001a6a:	f04f 0000 	mov.w	r0, #0
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	00d9      	lsls	r1, r3, #3
 8001a74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a78:	00d0      	lsls	r0, r2, #3
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	1912      	adds	r2, r2, r4
 8001a80:	eb45 0303 	adc.w	r3, r5, r3
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	0299      	lsls	r1, r3, #10
 8001a8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a92:	0290      	lsls	r0, r2, #10
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	f7fe fcc8 	bl	8000438 <__aeabi_uldivmod>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4613      	mov	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	3301      	adds	r3, #1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	60bb      	str	r3, [r7, #8]
      break;
 8001aca:	e002      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ace:	60bb      	str	r3, [r7, #8]
      break;
 8001ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	00f42400 	.word	0x00f42400
 8001ae8:	007a1200 	.word	0x007a1200

08001aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000000 	.word	0x20000000

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b08:	f7ff fff0 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0a9b      	lsrs	r3, r3, #10
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4903      	ldr	r1, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	080042fc 	.word	0x080042fc

08001b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b30:	f7ff ffdc 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0b5b      	lsrs	r3, r3, #13
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4903      	ldr	r1, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	080042fc 	.word	0x080042fc

08001b54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	220f      	movs	r2, #15
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_RCC_GetClockConfig+0x60>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0207 	and.w	r2, r3, #7
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e041      	b.n	8001c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f839 	bl	8001c56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f000 f9ca 	bl	8001f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d001      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e044      	b.n	8001d0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <HAL_TIM_Base_Start_IT+0xb0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d018      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cae:	d013      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x6c>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1a      	ldr	r2, [pc, #104]	; (8001d20 <HAL_TIM_Base_Start_IT+0xb4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00e      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x6c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d009      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x6c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_TIM_Base_Start_IT+0xbc>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d004      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x6c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a16      	ldr	r2, [pc, #88]	; (8001d2c <HAL_TIM_Base_Start_IT+0xc0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d111      	bne.n	8001cfc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d010      	beq.n	8001d0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfa:	e007      	b.n	8001d0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	40000400 	.word	0x40000400
 8001d24:	40000800 	.word	0x40000800
 8001d28:	40000c00 	.word	0x40000c00
 8001d2c:	40014000 	.word	0x40014000

08001d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d122      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d11b      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0202 	mvn.w	r2, #2
 8001d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8ee 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001d78:	e005      	b.n	8001d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f8e0 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f8f1 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d122      	bne.n	8001de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d11b      	bne.n	8001de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0204 	mvn.w	r2, #4
 8001db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2202      	movs	r2, #2
 8001db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8c4 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8b6 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8c7 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d122      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d11b      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0208 	mvn.w	r2, #8
 8001e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2204      	movs	r2, #4
 8001e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f89a 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f88c 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f89d 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d122      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d11b      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0210 	mvn.w	r2, #16
 8001e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f870 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001e74:	e005      	b.n	8001e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f862 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f873 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0201 	mvn.w	r2, #1
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fd22 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	2b80      	cmp	r3, #128	; 0x80
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b80      	cmp	r3, #128	; 0x80
 8001ece:	d107      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f8e2 	bl	80020a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eea:	2b40      	cmp	r3, #64	; 0x40
 8001eec:	d10e      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d107      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f838 	bl	8001f7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	2b20      	cmp	r3, #32
 8001f18:	d10e      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d107      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0220 	mvn.w	r2, #32
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8ac 	bl	8002090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a34      	ldr	r2, [pc, #208]	; (8002074 <TIM_Base_SetConfig+0xe4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00f      	beq.n	8001fc8 <TIM_Base_SetConfig+0x38>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fae:	d00b      	beq.n	8001fc8 <TIM_Base_SetConfig+0x38>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a31      	ldr	r2, [pc, #196]	; (8002078 <TIM_Base_SetConfig+0xe8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d007      	beq.n	8001fc8 <TIM_Base_SetConfig+0x38>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a30      	ldr	r2, [pc, #192]	; (800207c <TIM_Base_SetConfig+0xec>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d003      	beq.n	8001fc8 <TIM_Base_SetConfig+0x38>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a2f      	ldr	r2, [pc, #188]	; (8002080 <TIM_Base_SetConfig+0xf0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d108      	bne.n	8001fda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a25      	ldr	r2, [pc, #148]	; (8002074 <TIM_Base_SetConfig+0xe4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d01b      	beq.n	800201a <TIM_Base_SetConfig+0x8a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe8:	d017      	beq.n	800201a <TIM_Base_SetConfig+0x8a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a22      	ldr	r2, [pc, #136]	; (8002078 <TIM_Base_SetConfig+0xe8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <TIM_Base_SetConfig+0x8a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a21      	ldr	r2, [pc, #132]	; (800207c <TIM_Base_SetConfig+0xec>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00f      	beq.n	800201a <TIM_Base_SetConfig+0x8a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a20      	ldr	r2, [pc, #128]	; (8002080 <TIM_Base_SetConfig+0xf0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00b      	beq.n	800201a <TIM_Base_SetConfig+0x8a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <TIM_Base_SetConfig+0xf4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <TIM_Base_SetConfig+0x8a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <TIM_Base_SetConfig+0xf8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d003      	beq.n	800201a <TIM_Base_SetConfig+0x8a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a1d      	ldr	r2, [pc, #116]	; (800208c <TIM_Base_SetConfig+0xfc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d108      	bne.n	800202c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a08      	ldr	r2, [pc, #32]	; (8002074 <TIM_Base_SetConfig+0xe4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d103      	bne.n	8002060 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	615a      	str	r2, [r3, #20]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40010000 	.word	0x40010000
 8002078:	40000400 	.word	0x40000400
 800207c:	40000800 	.word	0x40000800
 8002080:	40000c00 	.word	0x40000c00
 8002084:	40014000 	.word	0x40014000
 8002088:	40014400 	.word	0x40014400
 800208c:	40014800 	.word	0x40014800

08002090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e03f      	b.n	800214a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fd90 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2224      	movs	r2, #36	; 0x24
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f829 	bl	8002154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002158:	b09f      	sub	sp, #124	; 0x7c
 800215a:	af00      	add	r7, sp, #0
 800215c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800215e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216a:	68d9      	ldr	r1, [r3, #12]
 800216c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	ea40 0301 	orr.w	r3, r0, r1
 8002174:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	431a      	orrs	r2, r3
 8002180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	431a      	orrs	r2, r3
 8002186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4313      	orrs	r3, r2
 800218c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800218e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002198:	f021 010c 	bic.w	r1, r1, #12
 800219c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021a2:	430b      	orrs	r3, r1
 80021a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b2:	6999      	ldr	r1, [r3, #24]
 80021b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	ea40 0301 	orr.w	r3, r0, r1
 80021bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4bc5      	ldr	r3, [pc, #788]	; (80024d8 <UART_SetConfig+0x384>)
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d004      	beq.n	80021d2 <UART_SetConfig+0x7e>
 80021c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4bc3      	ldr	r3, [pc, #780]	; (80024dc <UART_SetConfig+0x388>)
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d103      	bne.n	80021da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021d2:	f7ff fcab 	bl	8001b2c <HAL_RCC_GetPCLK2Freq>
 80021d6:	6778      	str	r0, [r7, #116]	; 0x74
 80021d8:	e002      	b.n	80021e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021da:	f7ff fc93 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 80021de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e8:	f040 80b6 	bne.w	8002358 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ee:	461c      	mov	r4, r3
 80021f0:	f04f 0500 	mov.w	r5, #0
 80021f4:	4622      	mov	r2, r4
 80021f6:	462b      	mov	r3, r5
 80021f8:	1891      	adds	r1, r2, r2
 80021fa:	6439      	str	r1, [r7, #64]	; 0x40
 80021fc:	415b      	adcs	r3, r3
 80021fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002200:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002204:	1912      	adds	r2, r2, r4
 8002206:	eb45 0303 	adc.w	r3, r5, r3
 800220a:	f04f 0000 	mov.w	r0, #0
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	00d9      	lsls	r1, r3, #3
 8002214:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002218:	00d0      	lsls	r0, r2, #3
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	1911      	adds	r1, r2, r4
 8002220:	6639      	str	r1, [r7, #96]	; 0x60
 8002222:	416b      	adcs	r3, r5
 8002224:	667b      	str	r3, [r7, #100]	; 0x64
 8002226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	461a      	mov	r2, r3
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	1891      	adds	r1, r2, r2
 8002232:	63b9      	str	r1, [r7, #56]	; 0x38
 8002234:	415b      	adcs	r3, r3
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800223c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002240:	f7fe f8fa 	bl	8000438 <__aeabi_uldivmod>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4ba5      	ldr	r3, [pc, #660]	; (80024e0 <UART_SetConfig+0x38c>)
 800224a:	fba3 2302 	umull	r2, r3, r3, r2
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	011e      	lsls	r6, r3, #4
 8002252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002254:	461c      	mov	r4, r3
 8002256:	f04f 0500 	mov.w	r5, #0
 800225a:	4622      	mov	r2, r4
 800225c:	462b      	mov	r3, r5
 800225e:	1891      	adds	r1, r2, r2
 8002260:	6339      	str	r1, [r7, #48]	; 0x30
 8002262:	415b      	adcs	r3, r3
 8002264:	637b      	str	r3, [r7, #52]	; 0x34
 8002266:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800226a:	1912      	adds	r2, r2, r4
 800226c:	eb45 0303 	adc.w	r3, r5, r3
 8002270:	f04f 0000 	mov.w	r0, #0
 8002274:	f04f 0100 	mov.w	r1, #0
 8002278:	00d9      	lsls	r1, r3, #3
 800227a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800227e:	00d0      	lsls	r0, r2, #3
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	1911      	adds	r1, r2, r4
 8002286:	65b9      	str	r1, [r7, #88]	; 0x58
 8002288:	416b      	adcs	r3, r5
 800228a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800228c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	461a      	mov	r2, r3
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	1891      	adds	r1, r2, r2
 8002298:	62b9      	str	r1, [r7, #40]	; 0x28
 800229a:	415b      	adcs	r3, r3
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800229e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80022a6:	f7fe f8c7 	bl	8000438 <__aeabi_uldivmod>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4b8c      	ldr	r3, [pc, #560]	; (80024e0 <UART_SetConfig+0x38c>)
 80022b0:	fba3 1302 	umull	r1, r3, r3, r2
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	2164      	movs	r1, #100	; 0x64
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	3332      	adds	r3, #50	; 0x32
 80022c2:	4a87      	ldr	r2, [pc, #540]	; (80024e0 <UART_SetConfig+0x38c>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022d0:	441e      	add	r6, r3
 80022d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d4:	4618      	mov	r0, r3
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	1894      	adds	r4, r2, r2
 80022e0:	623c      	str	r4, [r7, #32]
 80022e2:	415b      	adcs	r3, r3
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
 80022e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022ea:	1812      	adds	r2, r2, r0
 80022ec:	eb41 0303 	adc.w	r3, r1, r3
 80022f0:	f04f 0400 	mov.w	r4, #0
 80022f4:	f04f 0500 	mov.w	r5, #0
 80022f8:	00dd      	lsls	r5, r3, #3
 80022fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022fe:	00d4      	lsls	r4, r2, #3
 8002300:	4622      	mov	r2, r4
 8002302:	462b      	mov	r3, r5
 8002304:	1814      	adds	r4, r2, r0
 8002306:	653c      	str	r4, [r7, #80]	; 0x50
 8002308:	414b      	adcs	r3, r1
 800230a:	657b      	str	r3, [r7, #84]	; 0x54
 800230c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	461a      	mov	r2, r3
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	1891      	adds	r1, r2, r2
 8002318:	61b9      	str	r1, [r7, #24]
 800231a:	415b      	adcs	r3, r3
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002322:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002326:	f7fe f887 	bl	8000438 <__aeabi_uldivmod>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4b6c      	ldr	r3, [pc, #432]	; (80024e0 <UART_SetConfig+0x38c>)
 8002330:	fba3 1302 	umull	r1, r3, r3, r2
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	2164      	movs	r1, #100	; 0x64
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	3332      	adds	r3, #50	; 0x32
 8002342:	4a67      	ldr	r2, [pc, #412]	; (80024e0 <UART_SetConfig+0x38c>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	f003 0207 	and.w	r2, r3, #7
 800234e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4432      	add	r2, r6
 8002354:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002356:	e0b9      	b.n	80024cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800235a:	461c      	mov	r4, r3
 800235c:	f04f 0500 	mov.w	r5, #0
 8002360:	4622      	mov	r2, r4
 8002362:	462b      	mov	r3, r5
 8002364:	1891      	adds	r1, r2, r2
 8002366:	6139      	str	r1, [r7, #16]
 8002368:	415b      	adcs	r3, r3
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002370:	1912      	adds	r2, r2, r4
 8002372:	eb45 0303 	adc.w	r3, r5, r3
 8002376:	f04f 0000 	mov.w	r0, #0
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	00d9      	lsls	r1, r3, #3
 8002380:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002384:	00d0      	lsls	r0, r2, #3
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	eb12 0804 	adds.w	r8, r2, r4
 800238e:	eb43 0905 	adc.w	r9, r3, r5
 8002392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	f04f 0100 	mov.w	r1, #0
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	008b      	lsls	r3, r1, #2
 80023a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023aa:	0082      	lsls	r2, r0, #2
 80023ac:	4640      	mov	r0, r8
 80023ae:	4649      	mov	r1, r9
 80023b0:	f7fe f842 	bl	8000438 <__aeabi_uldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <UART_SetConfig+0x38c>)
 80023ba:	fba3 2302 	umull	r2, r3, r3, r2
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	011e      	lsls	r6, r3, #4
 80023c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c4:	4618      	mov	r0, r3
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	1894      	adds	r4, r2, r2
 80023d0:	60bc      	str	r4, [r7, #8]
 80023d2:	415b      	adcs	r3, r3
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023da:	1812      	adds	r2, r2, r0
 80023dc:	eb41 0303 	adc.w	r3, r1, r3
 80023e0:	f04f 0400 	mov.w	r4, #0
 80023e4:	f04f 0500 	mov.w	r5, #0
 80023e8:	00dd      	lsls	r5, r3, #3
 80023ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023ee:	00d4      	lsls	r4, r2, #3
 80023f0:	4622      	mov	r2, r4
 80023f2:	462b      	mov	r3, r5
 80023f4:	1814      	adds	r4, r2, r0
 80023f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80023f8:	414b      	adcs	r3, r1
 80023fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	f04f 0100 	mov.w	r1, #0
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	008b      	lsls	r3, r1, #2
 8002410:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002414:	0082      	lsls	r2, r0, #2
 8002416:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800241a:	f7fe f80d 	bl	8000438 <__aeabi_uldivmod>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <UART_SetConfig+0x38c>)
 8002424:	fba3 1302 	umull	r1, r3, r3, r2
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	2164      	movs	r1, #100	; 0x64
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	3332      	adds	r3, #50	; 0x32
 8002436:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <UART_SetConfig+0x38c>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	095b      	lsrs	r3, r3, #5
 800243e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002442:	441e      	add	r6, r3
 8002444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002446:	4618      	mov	r0, r3
 8002448:	f04f 0100 	mov.w	r1, #0
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	1894      	adds	r4, r2, r2
 8002452:	603c      	str	r4, [r7, #0]
 8002454:	415b      	adcs	r3, r3
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800245c:	1812      	adds	r2, r2, r0
 800245e:	eb41 0303 	adc.w	r3, r1, r3
 8002462:	f04f 0400 	mov.w	r4, #0
 8002466:	f04f 0500 	mov.w	r5, #0
 800246a:	00dd      	lsls	r5, r3, #3
 800246c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002470:	00d4      	lsls	r4, r2, #3
 8002472:	4622      	mov	r2, r4
 8002474:	462b      	mov	r3, r5
 8002476:	eb12 0a00 	adds.w	sl, r2, r0
 800247a:	eb43 0b01 	adc.w	fp, r3, r1
 800247e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4618      	mov	r0, r3
 8002484:	f04f 0100 	mov.w	r1, #0
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	008b      	lsls	r3, r1, #2
 8002492:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002496:	0082      	lsls	r2, r0, #2
 8002498:	4650      	mov	r0, sl
 800249a:	4659      	mov	r1, fp
 800249c:	f7fd ffcc 	bl	8000438 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <UART_SetConfig+0x38c>)
 80024a6:	fba3 1302 	umull	r1, r3, r3, r2
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2164      	movs	r1, #100	; 0x64
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	3332      	adds	r3, #50	; 0x32
 80024b8:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <UART_SetConfig+0x38c>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	f003 020f 	and.w	r2, r3, #15
 80024c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4432      	add	r2, r6
 80024ca:	609a      	str	r2, [r3, #8]
}
 80024cc:	bf00      	nop
 80024ce:	377c      	adds	r7, #124	; 0x7c
 80024d0:	46bd      	mov	sp, r7
 80024d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024d6:	bf00      	nop
 80024d8:	40011000 	.word	0x40011000
 80024dc:	40011400 	.word	0x40011400
 80024e0:	51eb851f 	.word	0x51eb851f

080024e4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80024e8:	f000 f954 	bl	8002794 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80024ec:	f000 fe10 	bl	8003110 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <_tx_initialize_high_level+0x58>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <_tx_initialize_high_level+0x5c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <_tx_initialize_high_level+0x60>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <_tx_initialize_high_level+0x64>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <_tx_initialize_high_level+0x68>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <_tx_initialize_high_level+0x6c>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <_tx_initialize_high_level+0x70>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <_tx_initialize_high_level+0x74>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <_tx_initialize_high_level+0x78>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <_tx_initialize_high_level+0x7c>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <_tx_initialize_high_level+0x80>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <_tx_initialize_high_level+0x84>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
#endif
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200022b0 	.word	0x200022b0
 8002540:	200022c0 	.word	0x200022c0
 8002544:	200022cc 	.word	0x200022cc
 8002548:	200022ac 	.word	0x200022ac
 800254c:	200022a0 	.word	0x200022a0
 8002550:	200022c4 	.word	0x200022c4
 8002554:	200022c8 	.word	0x200022c8
 8002558:	200022bc 	.word	0x200022bc
 800255c:	200022b4 	.word	0x200022b4
 8002560:	200022d0 	.word	0x200022d0
 8002564:	200022a8 	.word	0x200022a8
 8002568:	200022a4 	.word	0x200022a4

0800256c <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8002570:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <_tx_initialize_kernel_enter+0x48>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8002578:	d00c      	beq.n	8002594 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800257a:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <_tx_initialize_kernel_enter+0x48>)
 800257c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8002580:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8002582:	f7fd fe2d 	bl	80001e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8002586:	f7ff ffad 	bl	80024e4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <_tx_initialize_kernel_enter+0x4c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <_tx_initialize_kernel_enter+0x4c>)
 8002592:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8002594:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <_tx_initialize_kernel_enter+0x48>)
 8002596:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800259a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <_tx_initialize_kernel_enter+0x50>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 f901 	bl	80037a8 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80025a6:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <_tx_initialize_kernel_enter+0x48>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80025ac:	f7fd fe68 	bl	8000280 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	2000000c 	.word	0x2000000c
 80025b8:	2000236c 	.word	0x2000236c
 80025bc:	200022b8 	.word	0x200022b8

080025c0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b092      	sub	sp, #72	; 0x48
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80025ce:	2300      	movs	r3, #0
 80025d0:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80025d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025d4:	21ef      	movs	r1, #239	; 0xef
 80025d6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80025d8:	f001 f986 	bl	80038e8 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80025dc:	22b4      	movs	r2, #180	; 0xb4
 80025de:	2100      	movs	r1, #0
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f001 f981 	bl	80038e8 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025fc:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002602:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002608:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800260e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002616:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800261c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8002626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002628:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800262a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262c:	3b01      	subs	r3, #1
 800262e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002630:	4413      	add	r3, r2
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002638:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002644:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2203      	movs	r2, #3
 800264c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a48      	ldr	r2, [pc, #288]	; (8002774 <_tx_thread_create+0x1b4>)
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800265a:	4947      	ldr	r1, [pc, #284]	; (8002778 <_tx_thread_create+0x1b8>)
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f7fd fe6f 	bl	8000340 <_tx_thread_stack_build>
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002662:	f3ef 8310 	mrs	r3, PRIMASK
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
    return(posture);
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800266c:	b672      	cpsid	i
#endif
    return(int_posture);
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4a41      	ldr	r2, [pc, #260]	; (800277c <_tx_thread_create+0x1bc>)
 8002676:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8002678:	4b41      	ldr	r3, [pc, #260]	; (8002780 <_tx_thread_create+0x1c0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10b      	bne.n	8002698 <_tx_thread_create+0xd8>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8002680:	4a40      	ldr	r2, [pc, #256]	; (8002784 <_tx_thread_create+0x1c4>)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002696:	e016      	b.n	80026c6 <_tx_thread_create+0x106>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8002698:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <_tx_thread_create+0x1c4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800269e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80026a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80026c6:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <_tx_thread_create+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	4a2c      	ldr	r2, [pc, #176]	; (8002780 <_tx_thread_create+0x1c0>)
 80026ce:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80026d0:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <_tx_thread_create+0x1c8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	4a2c      	ldr	r2, [pc, #176]	; (8002788 <_tx_thread_create+0x1c8>)
 80026d8:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80026da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d129      	bne.n	8002734 <_tx_thread_create+0x174>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80026e0:	f3ef 8305 	mrs	r3, IPSR
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80026e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80026e8:	4b28      	ldr	r3, [pc, #160]	; (800278c <_tx_thread_create+0x1cc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80026f2:	d30d      	bcc.n	8002710 <_tx_thread_create+0x150>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80026f4:	4b26      	ldr	r3, [pc, #152]	; (8002790 <_tx_thread_create+0x1d0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80026fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d009      	beq.n	8002714 <_tx_thread_create+0x154>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8002700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8002706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800270c:	63da      	str	r2, [r3, #60]	; 0x3c
 800270e:	e001      	b.n	8002714 <_tx_thread_create+0x154>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8002710:	2300      	movs	r3, #0
 8002712:	647b      	str	r3, [r7, #68]	; 0x44
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	f383 8810 	msr	PRIMASK, r3
}
 800271e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f9a1 	bl	8002a68 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8002726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01e      	beq.n	800276a <_tx_thread_create+0x1aa>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800272c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800272e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002730:	63da      	str	r2, [r3, #60]	; 0x3c
 8002732:	e01a      	b.n	800276a <_tx_thread_create+0x1aa>
 8002734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002736:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f383 8810 	msr	PRIMASK, r3
}
 800273e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002740:	f3ef 8310 	mrs	r3, PRIMASK
 8002744:	61bb      	str	r3, [r7, #24]
    return(posture);
 8002746:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8002748:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800274a:	b672      	cpsid	i
    return(int_posture);
 800274c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800274e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <_tx_thread_create+0x1c8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3b01      	subs	r3, #1
 8002756:	4a0c      	ldr	r2, [pc, #48]	; (8002788 <_tx_thread_create+0x1c8>)
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f383 8810 	msr	PRIMASK, r3
}
 8002764:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8002766:	f000 f945 	bl	80029f4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3748      	adds	r7, #72	; 0x48
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	08003055 	.word	0x08003055
 8002778:	08002815 	.word	0x08002815
 800277c:	54485244 	.word	0x54485244
 8002780:	20002364 	.word	0x20002364
 8002784:	2000235c 	.word	0x2000235c
 8002788:	2000236c 	.word	0x2000236c
 800278c:	2000000c 	.word	0x2000000c
 8002790:	20002374 	.word	0x20002374

08002794 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <_tx_thread_initialize+0x54>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <_tx_thread_initialize+0x58>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <_tx_thread_initialize+0x5c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <_tx_thread_initialize+0x60>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <_tx_thread_initialize+0x64>)
 80027b2:	2220      	movs	r2, #32
 80027b4:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	2100      	movs	r1, #0
 80027ba:	4810      	ldr	r0, [pc, #64]	; (80027fc <_tx_thread_initialize+0x68>)
 80027bc:	f001 f894 	bl	80038e8 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <_tx_thread_initialize+0x6c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <_tx_thread_initialize+0x70>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <_tx_thread_initialize+0x74>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <_tx_thread_initialize+0x78>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
                            | (((ULONG) (TX_MAX_PRIORITIES/32)) << 24) 
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <_tx_thread_initialize+0x7c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    _tx_build_options =  _tx_build_options 
 80027e0:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <_tx_thread_initialize+0x7c>)
 80027e2:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20002370 	.word	0x20002370
 80027ec:	20002374 	.word	0x20002374
 80027f0:	20002358 	.word	0x20002358
 80027f4:	2000237c 	.word	0x2000237c
 80027f8:	20002378 	.word	0x20002378
 80027fc:	200022d4 	.word	0x200022d4
 8002800:	2000235c 	.word	0x2000235c
 8002804:	20002364 	.word	0x20002364
 8002808:	2000236c 	.word	0x2000236c
 800280c:	20002354 	.word	0x20002354
 8002810:	20002360 	.word	0x20002360

08002814 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08c      	sub	sp, #48	; 0x30
 8002818:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800281a:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <_tx_thread_shell_entry+0xd4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002820:	f3ef 8310 	mrs	r3, PRIMASK
 8002824:	61bb      	str	r3, [r7, #24]
    return(posture);
 8002826:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8002828:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800282a:	b672      	cpsid	i
    return(int_posture);
 800282c:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STARTED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Disable interrupts.  */
    TX_DISABLE
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8002830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002832:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f383 8810 	msr	PRIMASK, r3
}
 8002842:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <_tx_thread_shell_entry+0x3e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	2100      	movs	r1, #0
 800284e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002850:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002858:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800285a:	4610      	mov	r0, r2
 800285c:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800285e:	4b23      	ldr	r3, [pc, #140]	; (80028ec <_tx_thread_shell_entry+0xd8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <_tx_thread_shell_entry+0x5a>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <_tx_thread_shell_entry+0xd8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800286c:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800286e:	f3ef 8310 	mrs	r3, PRIMASK
 8002872:	607b      	str	r3, [r7, #4]
    return(posture);
 8002874:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8002876:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002878:	b672      	cpsid	i
    return(int_posture);
 800287a:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002880:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	2201      	movs	r2, #1
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288e:	2201      	movs	r2, #1
 8002890:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	2200      	movs	r2, #0
 8002896:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <_tx_thread_shell_entry+0xdc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <_tx_thread_shell_entry+0xdc>)
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f383 8810 	msr	PRIMASK, r3
}
 80028ac:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80028ae:	f3ef 8314 	mrs	r3, CONTROL
 80028b2:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80028b4:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80028b6:	623b      	str	r3, [r7, #32]
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	623b      	str	r3, [r7, #32]
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f383 8814 	msr	CONTROL, r3
}
 80028ca:	bf00      	nop

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <_tx_thread_shell_entry+0xc6>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	2101      	movs	r1, #1
 80028d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028d8:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80028da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028dc:	f000 f9d8 	bl	8002c90 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80028e0:	bf00      	nop
 80028e2:	3730      	adds	r7, #48	; 0x30
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20002370 	.word	0x20002370
 80028ec:	20002354 	.word	0x20002354
 80028f0:	2000236c 	.word	0x2000236c

080028f4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08e      	sub	sp, #56	; 0x38
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80028fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8002906:	b672      	cpsid	i
    return(int_posture);
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800290a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800290c:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <_tx_thread_sleep+0xf0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8002912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d108      	bne.n	800292a <_tx_thread_sleep+0x36>
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	f383 8810 	msr	PRIMASK, r3
}
 8002922:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002924:	2313      	movs	r3, #19
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
 8002928:	e056      	b.n	80029d8 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800292a:	f3ef 8305 	mrs	r3, IPSR
 800292e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8002930:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8002932:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <_tx_thread_sleep+0xf4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <_tx_thread_sleep+0x5a>
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	f383 8810 	msr	PRIMASK, r3
}
 8002946:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002948:	2313      	movs	r3, #19
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
 800294c:	e044      	b.n	80029d8 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	4a26      	ldr	r2, [pc, #152]	; (80029ec <_tx_thread_sleep+0xf8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d108      	bne.n	8002968 <_tx_thread_sleep+0x74>
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f383 8810 	msr	PRIMASK, r3
}
 8002960:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002962:	2313      	movs	r3, #19
 8002964:	637b      	str	r3, [r7, #52]	; 0x34
 8002966:	e037      	b.n	80029d8 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d108      	bne.n	8002980 <_tx_thread_sleep+0x8c>
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f383 8810 	msr	PRIMASK, r3
}
 8002978:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800297a:	2300      	movs	r3, #0
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
 800297e:	e02b      	b.n	80029d8 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <_tx_thread_sleep+0xfc>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <_tx_thread_sleep+0xa6>
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f383 8810 	msr	PRIMASK, r3
}
 8002992:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8002994:	2313      	movs	r3, #19
 8002996:	637b      	str	r3, [r7, #52]	; 0x34
 8002998:	e01e      	b.n	80029d8 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	2204      	movs	r2, #4
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80029a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a2:	2201      	movs	r2, #1
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	2200      	movs	r2, #0
 80029aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <_tx_thread_sleep+0xfc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <_tx_thread_sleep+0xfc>)
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f383 8810 	msr	PRIMASK, r3
}
 80029c8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80029ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029cc:	f000 f960 	bl	8002c90 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80029d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3738      	adds	r7, #56	; 0x38
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20002370 	.word	0x20002370
 80029e8:	2000000c 	.word	0x2000000c
 80029ec:	20002414 	.word	0x20002414
 80029f0:	2000236c 	.word	0x2000236c

080029f4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	; 0x24
 80029f8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <_tx_thread_system_preempt_check+0x64>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d121      	bne.n	8002a4a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <_tx_thread_system_preempt_check+0x68>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <_tx_thread_system_preempt_check+0x6c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d017      	beq.n	8002a4a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <_tx_thread_system_preempt_check+0x70>)
 8002a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a20:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002a22:	f3ef 8305 	mrs	r3, IPSR
 8002a26:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8002a28:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a32:	60fb      	str	r3, [r7, #12]
    return(posture);
 8002a34:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8002a36:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002a38:	b662      	cpsie	i
}
 8002a3a:	bf00      	nop
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f383 8810 	msr	PRIMASK, r3
}
 8002a46:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8002a48:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8002a4a:	bf00      	nop
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	2000236c 	.word	0x2000236c
 8002a5c:	20002370 	.word	0x20002370
 8002a60:	20002374 	.word	0x20002374
 8002a64:	e000ed04 	.word	0xe000ed04

08002a68 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b096      	sub	sp, #88	; 0x58
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002a70:	f3ef 8310 	mrs	r3, PRIMASK
 8002a74:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8002a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8002a7a:	b672      	cpsid	i
    return(int_posture);
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8002a7e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	334c      	adds	r3, #76	; 0x4c
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fc1d 	bl	80032cc <_tx_timer_system_deactivate>
 8002a92:	e002      	b.n	8002a9a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8002a9a:	4b75      	ldr	r3, [pc, #468]	; (8002c70 <_tx_thread_system_resume+0x208>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	4a73      	ldr	r2, [pc, #460]	; (8002c70 <_tx_thread_system_resume+0x208>)
 8002aa2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f040 8096 	bne.w	8002bda <_tx_thread_system_resume+0x172>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80aa 	beq.w	8002c0c <_tx_thread_system_resume+0x1a4>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 8085 	bne.w	8002bcc <_tx_thread_system_resume+0x164>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8002ace:	4a69      	ldr	r2, [pc, #420]	; (8002c74 <_tx_thread_system_resume+0x20c>)
 8002ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8002ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d166      	bne.n	8002bac <_tx_thread_system_resume+0x144>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8002ade:	4965      	ldr	r1, [pc, #404]	; (8002c74 <_tx_thread_system_resume+0x20c>)
 8002ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8002af4:	2201      	movs	r2, #1
 8002af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8002afe:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <_tx_thread_system_resume+0x210>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b04:	4313      	orrs	r3, r2
 8002b06:	4a5c      	ldr	r2, [pc, #368]	; (8002c78 <_tx_thread_system_resume+0x210>)
 8002b08:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8002b0a:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <_tx_thread_system_resume+0x214>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d27b      	bcs.n	8002c0c <_tx_thread_system_resume+0x1a4>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8002b14:	4a59      	ldr	r2, [pc, #356]	; (8002c7c <_tx_thread_system_resume+0x214>)
 8002b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b18:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8002b1a:	4b59      	ldr	r3, [pc, #356]	; (8002c80 <_tx_thread_system_resume+0x218>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8002b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <_tx_thread_system_resume+0xc6>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8002b26:	4a56      	ldr	r2, [pc, #344]	; (8002c80 <_tx_thread_system_resume+0x218>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	e06e      	b.n	8002c0c <_tx_thread_system_resume+0x1a4>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8002b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d269      	bcs.n	8002c0c <_tx_thread_system_resume+0x1a4>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 8002b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d00b      	beq.n	8002b5c <_tx_thread_system_resume+0xf4>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 8002b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	2201      	movs	r2, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	647b      	str	r3, [r7, #68]	; 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8002b50:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <_tx_thread_system_resume+0x21c>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b56:	4313      	orrs	r3, r2
 8002b58:	4a4a      	ldr	r2, [pc, #296]	; (8002c84 <_tx_thread_system_resume+0x21c>)
 8002b5a:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8002b5c:	4a48      	ldr	r2, [pc, #288]	; (8002c80 <_tx_thread_system_resume+0x218>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	f383 8810 	msr	PRIMASK, r3
}
 8002b6c:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002b6e:	4b40      	ldr	r3, [pc, #256]	; (8002c70 <_tx_thread_system_resume+0x208>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8002b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d174      	bne.n	8002c64 <_tx_thread_system_resume+0x1fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002b7a:	4b43      	ldr	r3, [pc, #268]	; (8002c88 <_tx_thread_system_resume+0x220>)
 8002b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b80:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002b82:	f3ef 8305 	mrs	r3, IPSR
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10c      	bne.n	8002ba8 <_tx_thread_system_resume+0x140>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8002b96:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002b98:	b662      	cpsie	i
}
 8002b9a:	bf00      	nop
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f383 8810 	msr	PRIMASK, r3
}
 8002ba6:	bf00      	nop
}
 8002ba8:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8002baa:	e05b      	b.n	8002c64 <_tx_thread_system_resume+0x1fc>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8002bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8002bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8002bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bc8:	621a      	str	r2, [r3, #32]
 8002bca:	e01f      	b.n	8002c0c <_tx_thread_system_resume+0x1a4>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bd8:	e018      	b.n	8002c0c <_tx_thread_system_resume+0x1a4>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d014      	beq.n	8002c0c <_tx_thread_system_resume+0x1a4>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d010      	beq.n	8002c0c <_tx_thread_system_resume+0x1a4>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <_tx_thread_system_resume+0x198>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8002bfe:	e005      	b.n	8002c0c <_tx_thread_system_resume+0x1a4>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2203      	movs	r2, #3
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <_tx_thread_system_resume+0x224>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c14:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f383 8810 	msr	PRIMASK, r3
}
 8002c1c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <_tx_thread_system_resume+0x218>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d020      	beq.n	8002c6a <_tx_thread_system_resume+0x202>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <_tx_thread_system_resume+0x208>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8002c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d11a      	bne.n	8002c6a <_tx_thread_system_resume+0x202>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <_tx_thread_system_resume+0x220>)
 8002c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c3a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002c3c:	f3ef 8305 	mrs	r3, IPSR
 8002c40:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8002c42:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10f      	bne.n	8002c68 <_tx_thread_system_resume+0x200>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002c48:	f3ef 8310 	mrs	r3, PRIMASK
 8002c4c:	613b      	str	r3, [r7, #16]
    return(posture);
 8002c4e:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8002c50:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002c52:	b662      	cpsie	i
}
 8002c54:	bf00      	nop
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f383 8810 	msr	PRIMASK, r3
}
 8002c60:	bf00      	nop
}
 8002c62:	e001      	b.n	8002c68 <_tx_thread_system_resume+0x200>
                                return;
 8002c64:	bf00      	nop
 8002c66:	e000      	b.n	8002c6a <_tx_thread_system_resume+0x202>
 8002c68:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8002c6a:	3758      	adds	r7, #88	; 0x58
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	2000236c 	.word	0x2000236c
 8002c74:	200022d4 	.word	0x200022d4
 8002c78:	20002358 	.word	0x20002358
 8002c7c:	20002378 	.word	0x20002378
 8002c80:	20002374 	.word	0x20002374
 8002c84:	2000237c 	.word	0x2000237c
 8002c88:	e000ed04 	.word	0xe000ed04
 8002c8c:	20002370 	.word	0x20002370

08002c90 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b0a0      	sub	sp, #128	; 0x80
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8002c98:	4b5a      	ldr	r3, [pc, #360]	; (8002e04 <_tx_thread_system_suspend+0x174>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	67bb      	str	r3, [r7, #120]	; 0x78
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca2:	657b      	str	r3, [r7, #84]	; 0x54
    return(posture);
 8002ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int_posture = __get_interrupt_posture();
 8002ca6:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 8002ca8:	b672      	cpsid	i
    return(int_posture);
 8002caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8002cac:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d112      	bne.n	8002cdc <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	677b      	str	r3, [r7, #116]	; 0x74

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8002cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8002cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc8:	d004      	beq.n	8002cd4 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	334c      	adds	r3, #76	; 0x4c
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fa9a 	bl	8003208 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	4a4b      	ldr	r2, [pc, #300]	; (8002e08 <_tx_thread_system_suspend+0x178>)
 8002cda:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8002cdc:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <_tx_thread_system_suspend+0x17c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	4a4a      	ldr	r2, [pc, #296]	; (8002e0c <_tx_thread_system_suspend+0x17c>)
 8002ce4:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	f040 8122 	bne.w	8002f34 <_tx_thread_system_suspend+0x2a4>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	673b      	str	r3, [r7, #112]	; 0x70

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8002d02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d027      	beq.n	8002d5a <_tx_thread_system_suspend+0xca>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8002d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8002d16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d1a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8002d1c:	4a3c      	ldr	r2, [pc, #240]	; (8002e10 <_tx_thread_system_suspend+0x180>)
 8002d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	f040 808b 	bne.w	8002e42 <_tx_thread_system_suspend+0x1b2>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8002d2c:	4938      	ldr	r1, [pc, #224]	; (8002e10 <_tx_thread_system_suspend+0x180>)
 8002d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8002d36:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <_tx_thread_system_suspend+0x184>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8081 	beq.w	8002e42 <_tx_thread_system_suspend+0x1b2>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8002d40:	2201      	movs	r2, #1
 8002d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8002d4a:	4b32      	ldr	r3, [pc, #200]	; (8002e14 <_tx_thread_system_suspend+0x184>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d50:	43db      	mvns	r3, r3
 8002d52:	4013      	ands	r3, r2
 8002d54:	4a2f      	ldr	r2, [pc, #188]	; (8002e14 <_tx_thread_system_suspend+0x184>)
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	e073      	b.n	8002e42 <_tx_thread_system_suspend+0x1b2>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8002d5a:	4a2d      	ldr	r2, [pc, #180]	; (8002e10 <_tx_thread_system_suspend+0x180>)
 8002d5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d5e:	2100      	movs	r1, #0
 8002d60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8002d64:	2201      	movs	r2, #1
 8002d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8002d6e:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <_tx_thread_system_suspend+0x188>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d74:	43db      	mvns	r3, r3
 8002d76:	4013      	ands	r3, r2
 8002d78:	4a27      	ldr	r2, [pc, #156]	; (8002e18 <_tx_thread_system_suspend+0x188>)
 8002d7a:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8002d7c:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <_tx_thread_system_suspend+0x184>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00b      	beq.n	8002d9c <_tx_thread_system_suspend+0x10c>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 8002d84:	2201      	movs	r2, #1
 8002d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	66bb      	str	r3, [r7, #104]	; 0x68
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8002d8e:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <_tx_thread_system_suspend+0x184>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d94:	43db      	mvns	r3, r3
 8002d96:	4013      	ands	r3, r2
 8002d98:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <_tx_thread_system_suspend+0x184>)
 8002d9a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	667b      	str	r3, [r7, #100]	; 0x64
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <_tx_thread_system_suspend+0x188>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	663b      	str	r3, [r7, #96]	; 0x60

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8002da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d13d      	bne.n	8002e28 <_tx_thread_system_suspend+0x198>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <_tx_thread_system_suspend+0x18c>)
 8002dae:	2220      	movs	r2, #32
 8002db0:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8002db2:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <_tx_thread_system_suspend+0x190>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dba:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbe:	f383 8810 	msr	PRIMASK, r3
}
 8002dc2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <_tx_thread_system_suspend+0x17c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (combined_flags == ((ULONG) 0))
 8002dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f040 80db 	bne.w	8002f88 <_tx_thread_system_suspend+0x2f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <_tx_thread_system_suspend+0x194>)
 8002dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002dda:	f3ef 8305 	mrs	r3, IPSR
 8002dde:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 8002de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    if (__get_ipsr_value() == 0)
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10c      	bne.n	8002e00 <_tx_thread_system_suspend+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002de6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dea:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 8002dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        interrupt_save = __get_interrupt_posture();
 8002dee:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002df0:	b662      	cpsie	i
}
 8002df2:	bf00      	nop
 8002df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfa:	f383 8810 	msr	PRIMASK, r3
}
 8002dfe:	bf00      	nop
}
 8002e00:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8002e02:	e0c1      	b.n	8002f88 <_tx_thread_system_suspend+0x2f8>
 8002e04:	20002370 	.word	0x20002370
 8002e08:	20002408 	.word	0x20002408
 8002e0c:	2000236c 	.word	0x2000236c
 8002e10:	200022d4 	.word	0x200022d4
 8002e14:	2000237c 	.word	0x2000237c
 8002e18:	20002358 	.word	0x20002358
 8002e1c:	20002378 	.word	0x20002378
 8002e20:	20002374 	.word	0x20002374
 8002e24:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8002e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	663b      	str	r3, [r7, #96]	; 0x60
 8002e30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8002e38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002e3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4a56      	ldr	r2, [pc, #344]	; (8002f98 <_tx_thread_system_suspend+0x308>)
 8002e40:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8002e42:	4b56      	ldr	r3, [pc, #344]	; (8002f9c <_tx_thread_system_suspend+0x30c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d173      	bne.n	8002f34 <_tx_thread_system_suspend+0x2a4>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8002e4c:	4b52      	ldr	r3, [pc, #328]	; (8002f98 <_tx_thread_system_suspend+0x308>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a53      	ldr	r2, [pc, #332]	; (8002fa0 <_tx_thread_system_suspend+0x310>)
 8002e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e56:	4a51      	ldr	r2, [pc, #324]	; (8002f9c <_tx_thread_system_suspend+0x30c>)
 8002e58:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8002e5a:	4b52      	ldr	r3, [pc, #328]	; (8002fa4 <_tx_thread_system_suspend+0x314>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d043      	beq.n	8002eea <_tx_thread_system_suspend+0x25a>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <_tx_thread_system_suspend+0x318>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4a4f      	ldr	r2, [pc, #316]	; (8002fa8 <_tx_thread_system_suspend+0x318>)
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e6e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002e78:	f3ef 8310 	mrs	r3, PRIMASK
 8002e7c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8002e82:	b672      	cpsid	i
    return(int_posture);
 8002e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 8002e86:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8002e88:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <_tx_thread_system_suspend+0x318>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	4a46      	ldr	r2, [pc, #280]	; (8002fa8 <_tx_thread_system_suspend+0x318>)
 8002e90:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 8002e92:	2300      	movs	r3, #0
 8002e94:	667b      	str	r3, [r7, #100]	; 0x64
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 8002e96:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <_tx_thread_system_suspend+0x314>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8002e9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 8002eac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002eae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eb0:	4413      	add	r3, r2
 8002eb2:	673b      	str	r3, [r7, #112]	; 0x70

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 8002eb4:	4a3a      	ldr	r2, [pc, #232]	; (8002fa0 <_tx_thread_system_suspend+0x310>)
 8002eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ebe:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <_tx_thread_system_suspend+0x308>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d811      	bhi.n	8002eea <_tx_thread_system_suspend+0x25a>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 8002ec6:	4a36      	ldr	r2, [pc, #216]	; (8002fa0 <_tx_thread_system_suspend+0x310>)
 8002ec8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ece:	4a33      	ldr	r2, [pc, #204]	; (8002f9c <_tx_thread_system_suspend+0x30c>)
 8002ed0:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <_tx_thread_system_suspend+0x314>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	4a2f      	ldr	r2, [pc, #188]	; (8002fa4 <_tx_thread_system_suspend+0x314>)
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	f383 8810 	msr	PRIMASK, r3
}
 8002ef4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002ef6:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <_tx_thread_system_suspend+0x318>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (combined_flags == ((ULONG) 0))
 8002efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d144      	bne.n	8002f8c <_tx_thread_system_suspend+0x2fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <_tx_thread_system_suspend+0x31c>)
 8002f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f08:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002f0a:	f3ef 8305 	mrs	r3, IPSR
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10c      	bne.n	8002f30 <_tx_thread_system_suspend+0x2a0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002f16:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8002f1e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002f20:	b662      	cpsie	i
}
 8002f22:	bf00      	nop
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f383 8810 	msr	PRIMASK, r3
}
 8002f2e:	bf00      	nop
}
 8002f30:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8002f32:	e02b      	b.n	8002f8c <_tx_thread_system_suspend+0x2fc>
 8002f34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f36:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f383 8810 	msr	PRIMASK, r3
}
 8002f3e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8002f40:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <_tx_thread_system_suspend+0x30c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d022      	beq.n	8002f90 <_tx_thread_system_suspend+0x300>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <_tx_thread_system_suspend+0x318>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (combined_flags == ((ULONG) 0))
 8002f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d11c      	bne.n	8002f90 <_tx_thread_system_suspend+0x300>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <_tx_thread_system_suspend+0x31c>)
 8002f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002f5e:	f3ef 8305 	mrs	r3, IPSR
 8002f62:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8002f64:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10c      	bne.n	8002f84 <_tx_thread_system_suspend+0x2f4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f6e:	613b      	str	r3, [r7, #16]
    return(posture);
 8002f70:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8002f72:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002f74:	b662      	cpsie	i
}
 8002f76:	bf00      	nop
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f383 8810 	msr	PRIMASK, r3
}
 8002f82:	bf00      	nop
}
 8002f84:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8002f86:	e003      	b.n	8002f90 <_tx_thread_system_suspend+0x300>
                return;
 8002f88:	bf00      	nop
 8002f8a:	e002      	b.n	8002f92 <_tx_thread_system_suspend+0x302>
            return;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <_tx_thread_system_suspend+0x302>
    return;
 8002f90:	bf00      	nop
}
 8002f92:	3780      	adds	r7, #128	; 0x80
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20002378 	.word	0x20002378
 8002f9c:	20002374 	.word	0x20002374
 8002fa0:	200022d4 	.word	0x200022d4
 8002fa4:	2000237c 	.word	0x2000237c
 8002fa8:	2000236c 	.word	0x2000236c
 8002fac:	e000ed04 	.word	0xe000ed04

08002fb0 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002fb6:	4b21      	ldr	r3, [pc, #132]	; (800303c <_tx_thread_time_slice+0x8c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc0:	60fb      	str	r3, [r7, #12]
    return(posture);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8002fc4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002fc6:	b672      	cpsid	i
    return(int_posture);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8002fca:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <_tx_thread_time_slice+0x90>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d024      	beq.n	8003022 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d120      	bne.n	8003022 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <_tx_thread_time_slice+0x94>)
 8002fee:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d013      	beq.n	8003022 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	429a      	cmp	r2, r3
 8003004:	d10d      	bne.n	8003022 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	6a12      	ldr	r2, [r2, #32]
 800300e:	490e      	ldr	r1, [pc, #56]	; (8003048 <_tx_thread_time_slice+0x98>)
 8003010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <_tx_thread_time_slice+0x9c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <_tx_thread_time_slice+0x98>)
 800301a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301e:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <_tx_thread_time_slice+0xa0>)
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f383 8810 	msr	PRIMASK, r3
}
 800302c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20002370 	.word	0x20002370
 8003040:	200028e0 	.word	0x200028e0
 8003044:	20002408 	.word	0x20002408
 8003048:	200022d4 	.word	0x200022d4
 800304c:	20002378 	.word	0x20002378
 8003050:	20002374 	.word	0x20002374

08003054 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003060:	f3ef 8310 	mrs	r3, PRIMASK
 8003064:	617b      	str	r3, [r7, #20]
    return(posture);
 8003066:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8003068:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800306a:	b672      	cpsid	i
    return(int_posture);
 800306c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800306e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	2b04      	cmp	r3, #4
 8003076:	d10e      	bne.n	8003096 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8003078:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <_tx_thread_timeout+0x74>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <_tx_thread_timeout+0x74>)
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f383 8810 	msr	PRIMASK, r3
}
 800308c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800308e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003090:	f7ff fcea 	bl	8002a68 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8003094:	e013      	b.n	80030be <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800309a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f383 8810 	msr	PRIMASK, r3
}
 80030ae:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	69b9      	ldr	r1, [r7, #24]
 80030ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030bc:	4798      	blx	r3
}
 80030be:	bf00      	nop
 80030c0:	3728      	adds	r7, #40	; 0x28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	2000236c 	.word	0x2000236c

080030cc <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80030d2:	f3ef 8310 	mrs	r3, PRIMASK
 80030d6:	607b      	str	r3, [r7, #4]
    return(posture);
 80030d8:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80030da:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80030dc:	b672      	cpsid	i
    return(int_posture);
 80030de:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80030e0:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <_tx_timer_expiration_process+0x3c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3301      	adds	r3, #1
 80030e8:	4a07      	ldr	r2, [pc, #28]	; (8003108 <_tx_timer_expiration_process+0x3c>)
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f383 8810 	msr	PRIMASK, r3
}
 80030f6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80030f8:	4804      	ldr	r0, [pc, #16]	; (800310c <_tx_timer_expiration_process+0x40>)
 80030fa:	f7ff fcb5 	bl	8002a68 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	2000236c 	.word	0x2000236c
 800310c:	20002414 	.word	0x20002414

08003110 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8003116:	4b28      	ldr	r3, [pc, #160]	; (80031b8 <_tx_timer_initialize+0xa8>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <_tx_timer_initialize+0xac>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8003122:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <_tx_timer_initialize+0xb0>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8003128:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <_tx_timer_initialize+0xb4>)
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <_tx_timer_initialize+0xb8>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8003134:	2280      	movs	r2, #128	; 0x80
 8003136:	2100      	movs	r1, #0
 8003138:	4824      	ldr	r0, [pc, #144]	; (80031cc <_tx_timer_initialize+0xbc>)
 800313a:	f000 fbd5 	bl	80038e8 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <_tx_timer_initialize+0xc0>)
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <_tx_timer_initialize+0xbc>)
 8003142:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8003144:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <_tx_timer_initialize+0xc4>)
 8003146:	4a21      	ldr	r2, [pc, #132]	; (80031cc <_tx_timer_initialize+0xbc>)
 8003148:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800314a:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <_tx_timer_initialize+0xc8>)
 800314c:	4a23      	ldr	r2, [pc, #140]	; (80031dc <_tx_timer_initialize+0xcc>)
 800314e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8003150:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <_tx_timer_initialize+0xc8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3304      	adds	r3, #4
 8003156:	4a20      	ldr	r2, [pc, #128]	; (80031d8 <_tx_timer_initialize+0xc8>)
 8003158:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800315a:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <_tx_timer_initialize+0xd0>)
 800315c:	4a21      	ldr	r2, [pc, #132]	; (80031e4 <_tx_timer_initialize+0xd4>)
 800315e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8003160:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <_tx_timer_initialize+0xd8>)
 8003162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003166:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8003168:	4b20      	ldr	r3, [pc, #128]	; (80031ec <_tx_timer_initialize+0xdc>)
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <_tx_timer_initialize+0xd0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1d      	ldr	r2, [pc, #116]	; (80031e8 <_tx_timer_initialize+0xd8>)
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	491d      	ldr	r1, [pc, #116]	; (80031ec <_tx_timer_initialize+0xdc>)
 8003178:	6809      	ldr	r1, [r1, #0]
 800317a:	481c      	ldr	r0, [pc, #112]	; (80031ec <_tx_timer_initialize+0xdc>)
 800317c:	6800      	ldr	r0, [r0, #0]
 800317e:	2400      	movs	r4, #0
 8003180:	9405      	str	r4, [sp, #20]
 8003182:	2400      	movs	r4, #0
 8003184:	9404      	str	r4, [sp, #16]
 8003186:	9003      	str	r0, [sp, #12]
 8003188:	9102      	str	r1, [sp, #8]
 800318a:	9201      	str	r2, [sp, #4]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <_tx_timer_initialize+0xe0>)
 8003190:	4a18      	ldr	r2, [pc, #96]	; (80031f4 <_tx_timer_initialize+0xe4>)
 8003192:	4919      	ldr	r1, [pc, #100]	; (80031f8 <_tx_timer_initialize+0xe8>)
 8003194:	4819      	ldr	r0, [pc, #100]	; (80031fc <_tx_timer_initialize+0xec>)
 8003196:	f7ff fa13 	bl	80025c0 <_tx_thread_create>
 800319a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e5      	bne.n	800316e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80031a2:	4b17      	ldr	r3, [pc, #92]	; (8003200 <_tx_timer_initialize+0xf0>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80031a8:	4b16      	ldr	r3, [pc, #88]	; (8003204 <_tx_timer_initialize+0xf4>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200028e4 	.word	0x200028e4
 80031bc:	20002408 	.word	0x20002408
 80031c0:	200028e0 	.word	0x200028e0
 80031c4:	20002404 	.word	0x20002404
 80031c8:	200024c8 	.word	0x200024c8
 80031cc:	20002384 	.word	0x20002384
 80031d0:	200024cc 	.word	0x200024cc
 80031d4:	20002380 	.word	0x20002380
 80031d8:	20002410 	.word	0x20002410
 80031dc:	20002400 	.word	0x20002400
 80031e0:	200028d8 	.word	0x200028d8
 80031e4:	200024d8 	.word	0x200024d8
 80031e8:	200024d4 	.word	0x200024d4
 80031ec:	2000240c 	.word	0x2000240c
 80031f0:	4154494d 	.word	0x4154494d
 80031f4:	0800333d 	.word	0x0800333d
 80031f8:	0800429c 	.word	0x0800429c
 80031fc:	20002414 	.word	0x20002414
 8003200:	200024d0 	.word	0x200024d0
 8003204:	200028dc 	.word	0x200028dc

08003208 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d04a      	beq.n	80032b2 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003222:	d046      	beq.n	80032b2 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d142      	bne.n	80032b2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b20      	cmp	r3, #32
 8003230:	d902      	bls.n	8003238 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8003232:	231f      	movs	r3, #31
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	e002      	b.n	800323e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	3b01      	subs	r3, #1
 800323c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <_tx_timer_system_activate+0xb8>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <_tx_timer_system_activate+0xbc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	429a      	cmp	r2, r3
 8003252:	d30b      	bcc.n	800326c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8003254:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <_tx_timer_system_activate+0xbc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	109b      	asrs	r3, r3, #2
 800325e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8003260:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <_tx_timer_system_activate+0xc0>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d109      	bne.n	8003288 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e011      	b.n	80032ac <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80032b2:	bf00      	nop
 80032b4:	3724      	adds	r7, #36	; 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20002380 	.word	0x20002380
 80032c4:	20002410 	.word	0x20002410
 80032c8:	200024cc 	.word	0x200024cc

080032cc <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d026      	beq.n	800332e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d108      	bne.n	8003300 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d117      	bne.n	8003328 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e013      	b.n	8003328 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	429a      	cmp	r2, r3
 800331a:	d105      	bne.n	8003328 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	619a      	str	r2, [r3, #24]
    }
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b098      	sub	sp, #96	; 0x60
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8003344:	2300      	movs	r3, #0
 8003346:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a73      	ldr	r2, [pc, #460]	; (8003518 <_tx_timer_thread_entry+0x1dc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	f040 80de 	bne.w	800350e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003352:	f3ef 8310 	mrs	r3, PRIMASK
 8003356:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8003358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800335c:	b672      	cpsid	i
    return(int_posture);
 800335e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8003360:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8003362:	4b6e      	ldr	r3, [pc, #440]	; (800351c <_tx_timer_thread_entry+0x1e0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f107 020c 	add.w	r2, r7, #12
 8003376:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8003378:	4b68      	ldr	r3, [pc, #416]	; (800351c <_tx_timer_thread_entry+0x1e0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8003380:	4b66      	ldr	r3, [pc, #408]	; (800351c <_tx_timer_thread_entry+0x1e0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3304      	adds	r3, #4
 8003386:	4a65      	ldr	r2, [pc, #404]	; (800351c <_tx_timer_thread_entry+0x1e0>)
 8003388:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800338a:	4b64      	ldr	r3, [pc, #400]	; (800351c <_tx_timer_thread_entry+0x1e0>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b64      	ldr	r3, [pc, #400]	; (8003520 <_tx_timer_thread_entry+0x1e4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d103      	bne.n	800339e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8003396:	4b63      	ldr	r3, [pc, #396]	; (8003524 <_tx_timer_thread_entry+0x1e8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a60      	ldr	r2, [pc, #384]	; (800351c <_tx_timer_thread_entry+0x1e0>)
 800339c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800339e:	4b62      	ldr	r3, [pc, #392]	; (8003528 <_tx_timer_thread_entry+0x1ec>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	f383 8810 	msr	PRIMASK, r3
}
 80033ae:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80033b0:	f3ef 8310 	mrs	r3, PRIMASK
 80033b4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80033b8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80033ba:	b672      	cpsid	i
    return(int_posture);
 80033bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80033be:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80033c0:	e07f      	b.n	80034c2 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80033d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d102      	bne.n	80033de <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e00e      	b.n	80033fc <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80033de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80033e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033e8:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80033ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033ee:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80033f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f2:	f107 020c 	add.w	r2, r7, #12
 80033f6:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80033f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033fa:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80033fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b20      	cmp	r3, #32
 8003402:	d911      	bls.n	8003428 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8003404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800340c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8003410:	2300      	movs	r3, #0
 8003412:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8003414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003416:	f107 0208 	add.w	r2, r7, #8
 800341a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800341c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800341e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003420:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8003422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	e01a      	b.n	800345e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8003428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800342e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8003434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800343c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d009      	beq.n	8003458 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8003444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003446:	f107 0208 	add.w	r2, r7, #8
 800344a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800344c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800344e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003450:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8003452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	e002      	b.n	800345e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8003458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345a:	2200      	movs	r2, #0
 800345c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800345e:	4a33      	ldr	r2, [pc, #204]	; (800352c <_tx_timer_thread_entry+0x1f0>)
 8003460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	f383 8810 	msr	PRIMASK, r3
}
 800346e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8003470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8003476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003478:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800347a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800347c:	f3ef 8310 	mrs	r3, PRIMASK
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8003486:	b672      	cpsid	i
    return(int_posture);
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800348a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800348c:	4b27      	ldr	r3, [pc, #156]	; (800352c <_tx_timer_thread_entry+0x1f0>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003496:	429a      	cmp	r2, r3
 8003498:	d105      	bne.n	80034a6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800349a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800349c:	2200      	movs	r2, #0
 800349e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80034a0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80034a2:	f7ff feb1 	bl	8003208 <_tx_timer_system_activate>
 80034a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80034b2:	f3ef 8310 	mrs	r3, PRIMASK
 80034b6:	623b      	str	r3, [r7, #32]
    return(posture);
 80034b8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80034ba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80034bc:	b672      	cpsid	i
    return(int_posture);
 80034be:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80034c0:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f47f af7c 	bne.w	80033c2 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80034ca:	4b17      	ldr	r3, [pc, #92]	; (8003528 <_tx_timer_thread_entry+0x1ec>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d116      	bne.n	8003500 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80034d2:	4b17      	ldr	r3, [pc, #92]	; (8003530 <_tx_timer_thread_entry+0x1f4>)
 80034d4:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80034d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d8:	2203      	movs	r2, #3
 80034da:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80034dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034de:	2201      	movs	r2, #1
 80034e0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80034e2:	4b14      	ldr	r3, [pc, #80]	; (8003534 <_tx_timer_thread_entry+0x1f8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	4a12      	ldr	r2, [pc, #72]	; (8003534 <_tx_timer_thread_entry+0x1f8>)
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f383 8810 	msr	PRIMASK, r3
}
 80034f6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80034f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80034fa:	f7ff fbc9 	bl	8002c90 <_tx_thread_system_suspend>
 80034fe:	e728      	b.n	8003352 <_tx_timer_thread_entry+0x16>
 8003500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003502:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f383 8810 	msr	PRIMASK, r3
}
 800350a:	bf00      	nop
            TX_DISABLE
 800350c:	e721      	b.n	8003352 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800350e:	bf00      	nop
 8003510:	3760      	adds	r7, #96	; 0x60
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	4154494d 	.word	0x4154494d
 800351c:	20002380 	.word	0x20002380
 8003520:	20002410 	.word	0x20002410
 8003524:	200024cc 	.word	0x200024cc
 8003528:	20002404 	.word	0x20002404
 800352c:	200024c8 	.word	0x200024c8
 8003530:	20002414 	.word	0x20002414
 8003534:	2000236c 	.word	0x2000236c

08003538 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b09a      	sub	sp, #104	; 0x68
 800353c:	af06      	add	r7, sp, #24
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8003546:	2300      	movs	r3, #0
 8003548:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8003550:	230e      	movs	r3, #14
 8003552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003554:	e0bb      	b.n	80036ce <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8003556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003558:	2bb4      	cmp	r3, #180	; 0xb4
 800355a:	d002      	beq.n	8003562 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800355c:	230e      	movs	r3, #14
 800355e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003560:	e0b5      	b.n	80036ce <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003562:	f3ef 8310 	mrs	r3, PRIMASK
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800356c:	b672      	cpsid	i
    return(int_posture);
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8003570:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8003572:	4b64      	ldr	r3, [pc, #400]	; (8003704 <_txe_thread_create+0x1cc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3301      	adds	r3, #1
 8003578:	4a62      	ldr	r2, [pc, #392]	; (8003704 <_txe_thread_create+0x1cc>)
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	f383 8810 	msr	PRIMASK, r3
}
 8003586:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8003588:	2300      	movs	r3, #0
 800358a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800358c:	4b5e      	ldr	r3, [pc, #376]	; (8003708 <_txe_thread_create+0x1d0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8003592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003594:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8003596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003598:	3b01      	subs	r3, #1
 800359a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800359c:	4413      	add	r3, r2
 800359e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80035a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a2:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	647b      	str	r3, [r7, #68]	; 0x44
 80035a8:	e02b      	b.n	8003602 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d101      	bne.n	80035b6 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80035b2:	2301      	movs	r3, #1
 80035b4:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80035b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d028      	beq.n	800360e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80035bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d308      	bcc.n	80035d8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80035c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d203      	bcs.n	80035d8 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80035d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035de:	429a      	cmp	r2, r3
 80035e0:	d308      	bcc.n	80035f4 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80035e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d203      	bcs.n	80035f4 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80035f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80035fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fe:	3301      	adds	r3, #1
 8003600:	647b      	str	r3, [r7, #68]	; 0x44
 8003602:	4b42      	ldr	r3, [pc, #264]	; (800370c <_txe_thread_create+0x1d4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003608:	429a      	cmp	r2, r3
 800360a:	d3ce      	bcc.n	80035aa <_txe_thread_create+0x72>
 800360c:	e000      	b.n	8003610 <_txe_thread_create+0xd8>
                break;
 800360e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003610:	f3ef 8310 	mrs	r3, PRIMASK
 8003614:	61fb      	str	r3, [r7, #28]
    return(posture);
 8003616:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8003618:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800361a:	b672      	cpsid	i
    return(int_posture);
 800361c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8003620:	4b38      	ldr	r3, [pc, #224]	; (8003704 <_txe_thread_create+0x1cc>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3b01      	subs	r3, #1
 8003626:	4a37      	ldr	r2, [pc, #220]	; (8003704 <_txe_thread_create+0x1cc>)
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	f383 8810 	msr	PRIMASK, r3
}
 8003634:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003636:	f7ff f9dd 	bl	80029f4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800363e:	429a      	cmp	r2, r3
 8003640:	d102      	bne.n	8003648 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8003642:	230e      	movs	r3, #14
 8003644:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003646:	e042      	b.n	80036ce <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8003648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800364e:	2303      	movs	r3, #3
 8003650:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003652:	e03c      	b.n	80036ce <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800365a:	2303      	movs	r3, #3
 800365c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800365e:	e036      	b.n	80036ce <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8003660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003662:	2bc7      	cmp	r3, #199	; 0xc7
 8003664:	d802      	bhi.n	800366c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8003666:	2305      	movs	r3, #5
 8003668:	64fb      	str	r3, [r7, #76]	; 0x4c
 800366a:	e030      	b.n	80036ce <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800366c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800366e:	2b1f      	cmp	r3, #31
 8003670:	d902      	bls.n	8003678 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8003672:	230f      	movs	r3, #15
 8003674:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003676:	e02a      	b.n	80036ce <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8003678:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800367a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800367c:	429a      	cmp	r2, r3
 800367e:	d902      	bls.n	8003686 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8003680:	2318      	movs	r3, #24
 8003682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003684:	e023      	b.n	80036ce <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8003686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d902      	bls.n	8003692 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800368c:	2310      	movs	r3, #16
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003690:	e01d      	b.n	80036ce <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8003692:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <_txe_thread_create+0x1d8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	4a1e      	ldr	r2, [pc, #120]	; (8003714 <_txe_thread_create+0x1dc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d101      	bne.n	80036a4 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80036a0:	2313      	movs	r3, #19
 80036a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80036a4:	f3ef 8305 	mrs	r3, IPSR
 80036a8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80036aa:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80036ac:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <_txe_thread_create+0x1e0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80036b6:	f3ef 8305 	mrs	r3, IPSR
 80036ba:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80036bc:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80036be:	4b16      	ldr	r3, [pc, #88]	; (8003718 <_txe_thread_create+0x1e0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80036c8:	d201      	bcs.n	80036ce <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80036ca:	2313      	movs	r3, #19
 80036cc:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80036ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d112      	bne.n	80036fa <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80036d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d6:	9305      	str	r3, [sp, #20]
 80036d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036da:	9304      	str	r3, [sp, #16]
 80036dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036de:	9303      	str	r3, [sp, #12]
 80036e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036e2:	9302      	str	r3, [sp, #8]
 80036e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f7fe ff64 	bl	80025c0 <_tx_thread_create>
 80036f8:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80036fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3750      	adds	r7, #80	; 0x50
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	2000236c 	.word	0x2000236c
 8003708:	2000235c 	.word	0x2000235c
 800370c:	20002364 	.word	0x20002364
 8003710:	20002370 	.word	0x20002370
 8003714:	20002414 	.word	0x20002414
 8003718:	2000000c 	.word	0x2000000c

0800371c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003724:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003728:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003734:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003738:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800373c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00b      	beq.n	800375c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003744:	e000      	b.n	8003748 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003746:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003748:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f9      	beq.n	8003746 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003752:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800375c:	687b      	ldr	r3, [r7, #4]
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <_write>:

// SWV调试系统
//_____________________________________________________________
#include "stdio.h"
int _write(int file, char *ptr, int len)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
        int i = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
        for (i = 0; i < len; i++) {
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e009      	b.n	8003794 <_write+0x2a>
            ITM_SendChar((*ptr++));
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	60ba      	str	r2, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff ffc7 	bl	800371c <ITM_SendChar>
        for (i = 0; i < len; i++) {
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	3301      	adds	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	dbf1      	blt.n	8003780 <_write+0x16>
        }
        return len;
 800379c:	687b      	ldr	r3, [r7, #4]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <tx_application_define>:
void thread00_entry(ULONG thread_input);
void thread11_entry(ULONG thread_input);


void tx_application_define(void *first_unused_memory)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	; 0x28
 80037ac:	af08      	add	r7, sp, #32
 80037ae:	6078      	str	r0, [r7, #4]
        tx_thread_create(
 80037b0:	23b4      	movs	r3, #180	; 0xb4
 80037b2:	9306      	str	r3, [sp, #24]
 80037b4:	2301      	movs	r3, #1
 80037b6:	9305      	str	r3, [sp, #20]
 80037b8:	2300      	movs	r3, #0
 80037ba:	9304      	str	r3, [sp, #16]
 80037bc:	2302      	movs	r3, #2
 80037be:	9303      	str	r3, [sp, #12]
 80037c0:	2302      	movs	r3, #2
 80037c2:	9302      	str	r3, [sp, #8]
 80037c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <tx_application_define+0x6c>)
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	2300      	movs	r3, #0
 80037d0:	4a11      	ldr	r2, [pc, #68]	; (8003818 <tx_application_define+0x70>)
 80037d2:	4912      	ldr	r1, [pc, #72]	; (800381c <tx_application_define+0x74>)
 80037d4:	4812      	ldr	r0, [pc, #72]	; (8003820 <tx_application_define+0x78>)
 80037d6:	f7ff feaf 	bl	8003538 <_txe_thread_create>
                THREAD00_STACK_SIZE,    //线程栈大小
                THREAD00_PRIO,          //线程优先级
                THREAD00_PRIORITY,      //线程抢占阈值
                TX_NO_TIME_SLICE,       //不开启时间片
                TX_AUTO_START   );      //创建后立即启动
        tx_thread_create(
 80037da:	23b4      	movs	r3, #180	; 0xb4
 80037dc:	9306      	str	r3, [sp, #24]
 80037de:	2301      	movs	r3, #1
 80037e0:	9305      	str	r3, [sp, #20]
 80037e2:	2300      	movs	r3, #0
 80037e4:	9304      	str	r3, [sp, #16]
 80037e6:	2302      	movs	r3, #2
 80037e8:	9303      	str	r3, [sp, #12]
 80037ea:	2302      	movs	r3, #2
 80037ec:	9302      	str	r3, [sp, #8]
 80037ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <tx_application_define+0x7c>)
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2300      	movs	r3, #0
 80037fa:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <tx_application_define+0x80>)
 80037fc:	490b      	ldr	r1, [pc, #44]	; (800382c <tx_application_define+0x84>)
 80037fe:	480c      	ldr	r0, [pc, #48]	; (8003830 <tx_application_define+0x88>)
 8003800:	f7ff fe9a 	bl	8003538 <_txe_thread_create>
                THREAD11_STACK_SIZE,    //线程栈大小
                THREAD11_PRIO,          //线程优先级
                THREAD11_PRIORITY,      //线程抢占阈值
                TX_NO_TIME_SLICE,       //不开启时间片
                TX_AUTO_START   );      //创建后立即启动
        printf("9999911 ...\n");
 8003804:	480b      	ldr	r0, [pc, #44]	; (8003834 <tx_application_define+0x8c>)
 8003806:	f000 f8e5 	bl	80039d4 <puts>
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000150 	.word	0x20000150
 8003818:	08003839 	.word	0x08003839
 800381c:	080042b0 	.word	0x080042b0
 8003820:	20000098 	.word	0x20000098
 8003824:	20001208 	.word	0x20001208
 8003828:	08003869 	.word	0x08003869
 800382c:	080042c0 	.word	0x080042c0
 8003830:	20001150 	.word	0x20001150
 8003834:	080042d0 	.word	0x080042d0

08003838 <thread00_entry>:
void thread00_entry(ULONG thread_input)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
        while (1) {
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003840:	2200      	movs	r2, #0
 8003842:	2120      	movs	r1, #32
 8003844:	4807      	ldr	r0, [pc, #28]	; (8003864 <thread00_entry+0x2c>)
 8003846:	f7fd fcf7 	bl	8001238 <HAL_GPIO_WritePin>
                tx_thread_sleep(100);
 800384a:	2064      	movs	r0, #100	; 0x64
 800384c:	f7ff f852 	bl	80028f4 <_tx_thread_sleep>
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003850:	2201      	movs	r2, #1
 8003852:	2120      	movs	r1, #32
 8003854:	4803      	ldr	r0, [pc, #12]	; (8003864 <thread00_entry+0x2c>)
 8003856:	f7fd fcef 	bl	8001238 <HAL_GPIO_WritePin>
                tx_thread_sleep(100);
 800385a:	2064      	movs	r0, #100	; 0x64
 800385c:	f7ff f84a 	bl	80028f4 <_tx_thread_sleep>
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003860:	e7ee      	b.n	8003840 <thread00_entry+0x8>
 8003862:	bf00      	nop
 8003864:	40020000 	.word	0x40020000

08003868 <thread11_entry>:
        }
}
void thread11_entry(ULONG thread_input)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
        while (1) {
                printf("THREADX 11 ...\n");
 8003870:	4803      	ldr	r0, [pc, #12]	; (8003880 <thread11_entry+0x18>)
 8003872:	f000 f8af 	bl	80039d4 <puts>
                tx_thread_sleep(100);
 8003876:	2064      	movs	r0, #100	; 0x64
 8003878:	f7ff f83c 	bl	80028f4 <_tx_thread_sleep>
                printf("THREADX 11 ...\n");
 800387c:	e7f8      	b.n	8003870 <thread11_entry+0x8>
 800387e:	bf00      	nop
 8003880:	080042dc 	.word	0x080042dc

08003884 <main_user>:
}



int main_user(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0

    /* Enter the ThreadX kernel.  */
    tx_kernel_enter();
 8003888:	f7fe fe70 	bl	800256c <_tx_initialize_kernel_enter>
    return 0;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <__errno>:
 8003894:	4b01      	ldr	r3, [pc, #4]	; (800389c <__errno+0x8>)
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000010 	.word	0x20000010

080038a0 <__libc_init_array>:
 80038a0:	b570      	push	{r4, r5, r6, lr}
 80038a2:	4d0d      	ldr	r5, [pc, #52]	; (80038d8 <__libc_init_array+0x38>)
 80038a4:	4c0d      	ldr	r4, [pc, #52]	; (80038dc <__libc_init_array+0x3c>)
 80038a6:	1b64      	subs	r4, r4, r5
 80038a8:	10a4      	asrs	r4, r4, #2
 80038aa:	2600      	movs	r6, #0
 80038ac:	42a6      	cmp	r6, r4
 80038ae:	d109      	bne.n	80038c4 <__libc_init_array+0x24>
 80038b0:	4d0b      	ldr	r5, [pc, #44]	; (80038e0 <__libc_init_array+0x40>)
 80038b2:	4c0c      	ldr	r4, [pc, #48]	; (80038e4 <__libc_init_array+0x44>)
 80038b4:	f000 fce6 	bl	8004284 <_init>
 80038b8:	1b64      	subs	r4, r4, r5
 80038ba:	10a4      	asrs	r4, r4, #2
 80038bc:	2600      	movs	r6, #0
 80038be:	42a6      	cmp	r6, r4
 80038c0:	d105      	bne.n	80038ce <__libc_init_array+0x2e>
 80038c2:	bd70      	pop	{r4, r5, r6, pc}
 80038c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c8:	4798      	blx	r3
 80038ca:	3601      	adds	r6, #1
 80038cc:	e7ee      	b.n	80038ac <__libc_init_array+0xc>
 80038ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d2:	4798      	blx	r3
 80038d4:	3601      	adds	r6, #1
 80038d6:	e7f2      	b.n	80038be <__libc_init_array+0x1e>
 80038d8:	08004370 	.word	0x08004370
 80038dc:	08004370 	.word	0x08004370
 80038e0:	08004370 	.word	0x08004370
 80038e4:	08004374 	.word	0x08004374

080038e8 <memset>:
 80038e8:	4402      	add	r2, r0
 80038ea:	4603      	mov	r3, r0
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d100      	bne.n	80038f2 <memset+0xa>
 80038f0:	4770      	bx	lr
 80038f2:	f803 1b01 	strb.w	r1, [r3], #1
 80038f6:	e7f9      	b.n	80038ec <memset+0x4>

080038f8 <_puts_r>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	460e      	mov	r6, r1
 80038fc:	4605      	mov	r5, r0
 80038fe:	b118      	cbz	r0, 8003908 <_puts_r+0x10>
 8003900:	6983      	ldr	r3, [r0, #24]
 8003902:	b90b      	cbnz	r3, 8003908 <_puts_r+0x10>
 8003904:	f000 fa48 	bl	8003d98 <__sinit>
 8003908:	69ab      	ldr	r3, [r5, #24]
 800390a:	68ac      	ldr	r4, [r5, #8]
 800390c:	b913      	cbnz	r3, 8003914 <_puts_r+0x1c>
 800390e:	4628      	mov	r0, r5
 8003910:	f000 fa42 	bl	8003d98 <__sinit>
 8003914:	4b2c      	ldr	r3, [pc, #176]	; (80039c8 <_puts_r+0xd0>)
 8003916:	429c      	cmp	r4, r3
 8003918:	d120      	bne.n	800395c <_puts_r+0x64>
 800391a:	686c      	ldr	r4, [r5, #4]
 800391c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800391e:	07db      	lsls	r3, r3, #31
 8003920:	d405      	bmi.n	800392e <_puts_r+0x36>
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	0598      	lsls	r0, r3, #22
 8003926:	d402      	bmi.n	800392e <_puts_r+0x36>
 8003928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800392a:	f000 fad3 	bl	8003ed4 <__retarget_lock_acquire_recursive>
 800392e:	89a3      	ldrh	r3, [r4, #12]
 8003930:	0719      	lsls	r1, r3, #28
 8003932:	d51d      	bpl.n	8003970 <_puts_r+0x78>
 8003934:	6923      	ldr	r3, [r4, #16]
 8003936:	b1db      	cbz	r3, 8003970 <_puts_r+0x78>
 8003938:	3e01      	subs	r6, #1
 800393a:	68a3      	ldr	r3, [r4, #8]
 800393c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003940:	3b01      	subs	r3, #1
 8003942:	60a3      	str	r3, [r4, #8]
 8003944:	bb39      	cbnz	r1, 8003996 <_puts_r+0x9e>
 8003946:	2b00      	cmp	r3, #0
 8003948:	da38      	bge.n	80039bc <_puts_r+0xc4>
 800394a:	4622      	mov	r2, r4
 800394c:	210a      	movs	r1, #10
 800394e:	4628      	mov	r0, r5
 8003950:	f000 f848 	bl	80039e4 <__swbuf_r>
 8003954:	3001      	adds	r0, #1
 8003956:	d011      	beq.n	800397c <_puts_r+0x84>
 8003958:	250a      	movs	r5, #10
 800395a:	e011      	b.n	8003980 <_puts_r+0x88>
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <_puts_r+0xd4>)
 800395e:	429c      	cmp	r4, r3
 8003960:	d101      	bne.n	8003966 <_puts_r+0x6e>
 8003962:	68ac      	ldr	r4, [r5, #8]
 8003964:	e7da      	b.n	800391c <_puts_r+0x24>
 8003966:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <_puts_r+0xd8>)
 8003968:	429c      	cmp	r4, r3
 800396a:	bf08      	it	eq
 800396c:	68ec      	ldreq	r4, [r5, #12]
 800396e:	e7d5      	b.n	800391c <_puts_r+0x24>
 8003970:	4621      	mov	r1, r4
 8003972:	4628      	mov	r0, r5
 8003974:	f000 f888 	bl	8003a88 <__swsetup_r>
 8003978:	2800      	cmp	r0, #0
 800397a:	d0dd      	beq.n	8003938 <_puts_r+0x40>
 800397c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003980:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003982:	07da      	lsls	r2, r3, #31
 8003984:	d405      	bmi.n	8003992 <_puts_r+0x9a>
 8003986:	89a3      	ldrh	r3, [r4, #12]
 8003988:	059b      	lsls	r3, r3, #22
 800398a:	d402      	bmi.n	8003992 <_puts_r+0x9a>
 800398c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800398e:	f000 faa2 	bl	8003ed6 <__retarget_lock_release_recursive>
 8003992:	4628      	mov	r0, r5
 8003994:	bd70      	pop	{r4, r5, r6, pc}
 8003996:	2b00      	cmp	r3, #0
 8003998:	da04      	bge.n	80039a4 <_puts_r+0xac>
 800399a:	69a2      	ldr	r2, [r4, #24]
 800399c:	429a      	cmp	r2, r3
 800399e:	dc06      	bgt.n	80039ae <_puts_r+0xb6>
 80039a0:	290a      	cmp	r1, #10
 80039a2:	d004      	beq.n	80039ae <_puts_r+0xb6>
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	6022      	str	r2, [r4, #0]
 80039aa:	7019      	strb	r1, [r3, #0]
 80039ac:	e7c5      	b.n	800393a <_puts_r+0x42>
 80039ae:	4622      	mov	r2, r4
 80039b0:	4628      	mov	r0, r5
 80039b2:	f000 f817 	bl	80039e4 <__swbuf_r>
 80039b6:	3001      	adds	r0, #1
 80039b8:	d1bf      	bne.n	800393a <_puts_r+0x42>
 80039ba:	e7df      	b.n	800397c <_puts_r+0x84>
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	250a      	movs	r5, #10
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	6022      	str	r2, [r4, #0]
 80039c4:	701d      	strb	r5, [r3, #0]
 80039c6:	e7db      	b.n	8003980 <_puts_r+0x88>
 80039c8:	08004328 	.word	0x08004328
 80039cc:	08004348 	.word	0x08004348
 80039d0:	08004308 	.word	0x08004308

080039d4 <puts>:
 80039d4:	4b02      	ldr	r3, [pc, #8]	; (80039e0 <puts+0xc>)
 80039d6:	4601      	mov	r1, r0
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	f7ff bf8d 	b.w	80038f8 <_puts_r>
 80039de:	bf00      	nop
 80039e0:	20000010 	.word	0x20000010

080039e4 <__swbuf_r>:
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	460e      	mov	r6, r1
 80039e8:	4614      	mov	r4, r2
 80039ea:	4605      	mov	r5, r0
 80039ec:	b118      	cbz	r0, 80039f6 <__swbuf_r+0x12>
 80039ee:	6983      	ldr	r3, [r0, #24]
 80039f0:	b90b      	cbnz	r3, 80039f6 <__swbuf_r+0x12>
 80039f2:	f000 f9d1 	bl	8003d98 <__sinit>
 80039f6:	4b21      	ldr	r3, [pc, #132]	; (8003a7c <__swbuf_r+0x98>)
 80039f8:	429c      	cmp	r4, r3
 80039fa:	d12b      	bne.n	8003a54 <__swbuf_r+0x70>
 80039fc:	686c      	ldr	r4, [r5, #4]
 80039fe:	69a3      	ldr	r3, [r4, #24]
 8003a00:	60a3      	str	r3, [r4, #8]
 8003a02:	89a3      	ldrh	r3, [r4, #12]
 8003a04:	071a      	lsls	r2, r3, #28
 8003a06:	d52f      	bpl.n	8003a68 <__swbuf_r+0x84>
 8003a08:	6923      	ldr	r3, [r4, #16]
 8003a0a:	b36b      	cbz	r3, 8003a68 <__swbuf_r+0x84>
 8003a0c:	6923      	ldr	r3, [r4, #16]
 8003a0e:	6820      	ldr	r0, [r4, #0]
 8003a10:	1ac0      	subs	r0, r0, r3
 8003a12:	6963      	ldr	r3, [r4, #20]
 8003a14:	b2f6      	uxtb	r6, r6
 8003a16:	4283      	cmp	r3, r0
 8003a18:	4637      	mov	r7, r6
 8003a1a:	dc04      	bgt.n	8003a26 <__swbuf_r+0x42>
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	4628      	mov	r0, r5
 8003a20:	f000 f926 	bl	8003c70 <_fflush_r>
 8003a24:	bb30      	cbnz	r0, 8003a74 <__swbuf_r+0x90>
 8003a26:	68a3      	ldr	r3, [r4, #8]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	60a3      	str	r3, [r4, #8]
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	6022      	str	r2, [r4, #0]
 8003a32:	701e      	strb	r6, [r3, #0]
 8003a34:	6963      	ldr	r3, [r4, #20]
 8003a36:	3001      	adds	r0, #1
 8003a38:	4283      	cmp	r3, r0
 8003a3a:	d004      	beq.n	8003a46 <__swbuf_r+0x62>
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	07db      	lsls	r3, r3, #31
 8003a40:	d506      	bpl.n	8003a50 <__swbuf_r+0x6c>
 8003a42:	2e0a      	cmp	r6, #10
 8003a44:	d104      	bne.n	8003a50 <__swbuf_r+0x6c>
 8003a46:	4621      	mov	r1, r4
 8003a48:	4628      	mov	r0, r5
 8003a4a:	f000 f911 	bl	8003c70 <_fflush_r>
 8003a4e:	b988      	cbnz	r0, 8003a74 <__swbuf_r+0x90>
 8003a50:	4638      	mov	r0, r7
 8003a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <__swbuf_r+0x9c>)
 8003a56:	429c      	cmp	r4, r3
 8003a58:	d101      	bne.n	8003a5e <__swbuf_r+0x7a>
 8003a5a:	68ac      	ldr	r4, [r5, #8]
 8003a5c:	e7cf      	b.n	80039fe <__swbuf_r+0x1a>
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <__swbuf_r+0xa0>)
 8003a60:	429c      	cmp	r4, r3
 8003a62:	bf08      	it	eq
 8003a64:	68ec      	ldreq	r4, [r5, #12]
 8003a66:	e7ca      	b.n	80039fe <__swbuf_r+0x1a>
 8003a68:	4621      	mov	r1, r4
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f000 f80c 	bl	8003a88 <__swsetup_r>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d0cb      	beq.n	8003a0c <__swbuf_r+0x28>
 8003a74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003a78:	e7ea      	b.n	8003a50 <__swbuf_r+0x6c>
 8003a7a:	bf00      	nop
 8003a7c:	08004328 	.word	0x08004328
 8003a80:	08004348 	.word	0x08004348
 8003a84:	08004308 	.word	0x08004308

08003a88 <__swsetup_r>:
 8003a88:	4b32      	ldr	r3, [pc, #200]	; (8003b54 <__swsetup_r+0xcc>)
 8003a8a:	b570      	push	{r4, r5, r6, lr}
 8003a8c:	681d      	ldr	r5, [r3, #0]
 8003a8e:	4606      	mov	r6, r0
 8003a90:	460c      	mov	r4, r1
 8003a92:	b125      	cbz	r5, 8003a9e <__swsetup_r+0x16>
 8003a94:	69ab      	ldr	r3, [r5, #24]
 8003a96:	b913      	cbnz	r3, 8003a9e <__swsetup_r+0x16>
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f000 f97d 	bl	8003d98 <__sinit>
 8003a9e:	4b2e      	ldr	r3, [pc, #184]	; (8003b58 <__swsetup_r+0xd0>)
 8003aa0:	429c      	cmp	r4, r3
 8003aa2:	d10f      	bne.n	8003ac4 <__swsetup_r+0x3c>
 8003aa4:	686c      	ldr	r4, [r5, #4]
 8003aa6:	89a3      	ldrh	r3, [r4, #12]
 8003aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003aac:	0719      	lsls	r1, r3, #28
 8003aae:	d42c      	bmi.n	8003b0a <__swsetup_r+0x82>
 8003ab0:	06dd      	lsls	r5, r3, #27
 8003ab2:	d411      	bmi.n	8003ad8 <__swsetup_r+0x50>
 8003ab4:	2309      	movs	r3, #9
 8003ab6:	6033      	str	r3, [r6, #0]
 8003ab8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003abc:	81a3      	strh	r3, [r4, #12]
 8003abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ac2:	e03e      	b.n	8003b42 <__swsetup_r+0xba>
 8003ac4:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <__swsetup_r+0xd4>)
 8003ac6:	429c      	cmp	r4, r3
 8003ac8:	d101      	bne.n	8003ace <__swsetup_r+0x46>
 8003aca:	68ac      	ldr	r4, [r5, #8]
 8003acc:	e7eb      	b.n	8003aa6 <__swsetup_r+0x1e>
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <__swsetup_r+0xd8>)
 8003ad0:	429c      	cmp	r4, r3
 8003ad2:	bf08      	it	eq
 8003ad4:	68ec      	ldreq	r4, [r5, #12]
 8003ad6:	e7e6      	b.n	8003aa6 <__swsetup_r+0x1e>
 8003ad8:	0758      	lsls	r0, r3, #29
 8003ada:	d512      	bpl.n	8003b02 <__swsetup_r+0x7a>
 8003adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ade:	b141      	cbz	r1, 8003af2 <__swsetup_r+0x6a>
 8003ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ae4:	4299      	cmp	r1, r3
 8003ae6:	d002      	beq.n	8003aee <__swsetup_r+0x66>
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f000 fa59 	bl	8003fa0 <_free_r>
 8003aee:	2300      	movs	r3, #0
 8003af0:	6363      	str	r3, [r4, #52]	; 0x34
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003af8:	81a3      	strh	r3, [r4, #12]
 8003afa:	2300      	movs	r3, #0
 8003afc:	6063      	str	r3, [r4, #4]
 8003afe:	6923      	ldr	r3, [r4, #16]
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	f043 0308 	orr.w	r3, r3, #8
 8003b08:	81a3      	strh	r3, [r4, #12]
 8003b0a:	6923      	ldr	r3, [r4, #16]
 8003b0c:	b94b      	cbnz	r3, 8003b22 <__swsetup_r+0x9a>
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b18:	d003      	beq.n	8003b22 <__swsetup_r+0x9a>
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f000 f9ff 	bl	8003f20 <__smakebuf_r>
 8003b22:	89a0      	ldrh	r0, [r4, #12]
 8003b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b28:	f010 0301 	ands.w	r3, r0, #1
 8003b2c:	d00a      	beq.n	8003b44 <__swsetup_r+0xbc>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60a3      	str	r3, [r4, #8]
 8003b32:	6963      	ldr	r3, [r4, #20]
 8003b34:	425b      	negs	r3, r3
 8003b36:	61a3      	str	r3, [r4, #24]
 8003b38:	6923      	ldr	r3, [r4, #16]
 8003b3a:	b943      	cbnz	r3, 8003b4e <__swsetup_r+0xc6>
 8003b3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b40:	d1ba      	bne.n	8003ab8 <__swsetup_r+0x30>
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
 8003b44:	0781      	lsls	r1, r0, #30
 8003b46:	bf58      	it	pl
 8003b48:	6963      	ldrpl	r3, [r4, #20]
 8003b4a:	60a3      	str	r3, [r4, #8]
 8003b4c:	e7f4      	b.n	8003b38 <__swsetup_r+0xb0>
 8003b4e:	2000      	movs	r0, #0
 8003b50:	e7f7      	b.n	8003b42 <__swsetup_r+0xba>
 8003b52:	bf00      	nop
 8003b54:	20000010 	.word	0x20000010
 8003b58:	08004328 	.word	0x08004328
 8003b5c:	08004348 	.word	0x08004348
 8003b60:	08004308 	.word	0x08004308

08003b64 <__sflush_r>:
 8003b64:	898a      	ldrh	r2, [r1, #12]
 8003b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b6a:	4605      	mov	r5, r0
 8003b6c:	0710      	lsls	r0, r2, #28
 8003b6e:	460c      	mov	r4, r1
 8003b70:	d458      	bmi.n	8003c24 <__sflush_r+0xc0>
 8003b72:	684b      	ldr	r3, [r1, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	dc05      	bgt.n	8003b84 <__sflush_r+0x20>
 8003b78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	dc02      	bgt.n	8003b84 <__sflush_r+0x20>
 8003b7e:	2000      	movs	r0, #0
 8003b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b86:	2e00      	cmp	r6, #0
 8003b88:	d0f9      	beq.n	8003b7e <__sflush_r+0x1a>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b90:	682f      	ldr	r7, [r5, #0]
 8003b92:	602b      	str	r3, [r5, #0]
 8003b94:	d032      	beq.n	8003bfc <__sflush_r+0x98>
 8003b96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	075a      	lsls	r2, r3, #29
 8003b9c:	d505      	bpl.n	8003baa <__sflush_r+0x46>
 8003b9e:	6863      	ldr	r3, [r4, #4]
 8003ba0:	1ac0      	subs	r0, r0, r3
 8003ba2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ba4:	b10b      	cbz	r3, 8003baa <__sflush_r+0x46>
 8003ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ba8:	1ac0      	subs	r0, r0, r3
 8003baa:	2300      	movs	r3, #0
 8003bac:	4602      	mov	r2, r0
 8003bae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bb0:	6a21      	ldr	r1, [r4, #32]
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	47b0      	blx	r6
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	d106      	bne.n	8003bca <__sflush_r+0x66>
 8003bbc:	6829      	ldr	r1, [r5, #0]
 8003bbe:	291d      	cmp	r1, #29
 8003bc0:	d82c      	bhi.n	8003c1c <__sflush_r+0xb8>
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <__sflush_r+0x108>)
 8003bc4:	40ca      	lsrs	r2, r1
 8003bc6:	07d6      	lsls	r6, r2, #31
 8003bc8:	d528      	bpl.n	8003c1c <__sflush_r+0xb8>
 8003bca:	2200      	movs	r2, #0
 8003bcc:	6062      	str	r2, [r4, #4]
 8003bce:	04d9      	lsls	r1, r3, #19
 8003bd0:	6922      	ldr	r2, [r4, #16]
 8003bd2:	6022      	str	r2, [r4, #0]
 8003bd4:	d504      	bpl.n	8003be0 <__sflush_r+0x7c>
 8003bd6:	1c42      	adds	r2, r0, #1
 8003bd8:	d101      	bne.n	8003bde <__sflush_r+0x7a>
 8003bda:	682b      	ldr	r3, [r5, #0]
 8003bdc:	b903      	cbnz	r3, 8003be0 <__sflush_r+0x7c>
 8003bde:	6560      	str	r0, [r4, #84]	; 0x54
 8003be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003be2:	602f      	str	r7, [r5, #0]
 8003be4:	2900      	cmp	r1, #0
 8003be6:	d0ca      	beq.n	8003b7e <__sflush_r+0x1a>
 8003be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bec:	4299      	cmp	r1, r3
 8003bee:	d002      	beq.n	8003bf6 <__sflush_r+0x92>
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	f000 f9d5 	bl	8003fa0 <_free_r>
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	6360      	str	r0, [r4, #52]	; 0x34
 8003bfa:	e7c1      	b.n	8003b80 <__sflush_r+0x1c>
 8003bfc:	6a21      	ldr	r1, [r4, #32]
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4628      	mov	r0, r5
 8003c02:	47b0      	blx	r6
 8003c04:	1c41      	adds	r1, r0, #1
 8003c06:	d1c7      	bne.n	8003b98 <__sflush_r+0x34>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0c4      	beq.n	8003b98 <__sflush_r+0x34>
 8003c0e:	2b1d      	cmp	r3, #29
 8003c10:	d001      	beq.n	8003c16 <__sflush_r+0xb2>
 8003c12:	2b16      	cmp	r3, #22
 8003c14:	d101      	bne.n	8003c1a <__sflush_r+0xb6>
 8003c16:	602f      	str	r7, [r5, #0]
 8003c18:	e7b1      	b.n	8003b7e <__sflush_r+0x1a>
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c20:	81a3      	strh	r3, [r4, #12]
 8003c22:	e7ad      	b.n	8003b80 <__sflush_r+0x1c>
 8003c24:	690f      	ldr	r7, [r1, #16]
 8003c26:	2f00      	cmp	r7, #0
 8003c28:	d0a9      	beq.n	8003b7e <__sflush_r+0x1a>
 8003c2a:	0793      	lsls	r3, r2, #30
 8003c2c:	680e      	ldr	r6, [r1, #0]
 8003c2e:	bf08      	it	eq
 8003c30:	694b      	ldreq	r3, [r1, #20]
 8003c32:	600f      	str	r7, [r1, #0]
 8003c34:	bf18      	it	ne
 8003c36:	2300      	movne	r3, #0
 8003c38:	eba6 0807 	sub.w	r8, r6, r7
 8003c3c:	608b      	str	r3, [r1, #8]
 8003c3e:	f1b8 0f00 	cmp.w	r8, #0
 8003c42:	dd9c      	ble.n	8003b7e <__sflush_r+0x1a>
 8003c44:	6a21      	ldr	r1, [r4, #32]
 8003c46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c48:	4643      	mov	r3, r8
 8003c4a:	463a      	mov	r2, r7
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	47b0      	blx	r6
 8003c50:	2800      	cmp	r0, #0
 8003c52:	dc06      	bgt.n	8003c62 <__sflush_r+0xfe>
 8003c54:	89a3      	ldrh	r3, [r4, #12]
 8003c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5a:	81a3      	strh	r3, [r4, #12]
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c60:	e78e      	b.n	8003b80 <__sflush_r+0x1c>
 8003c62:	4407      	add	r7, r0
 8003c64:	eba8 0800 	sub.w	r8, r8, r0
 8003c68:	e7e9      	b.n	8003c3e <__sflush_r+0xda>
 8003c6a:	bf00      	nop
 8003c6c:	20400001 	.word	0x20400001

08003c70 <_fflush_r>:
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	690b      	ldr	r3, [r1, #16]
 8003c74:	4605      	mov	r5, r0
 8003c76:	460c      	mov	r4, r1
 8003c78:	b913      	cbnz	r3, 8003c80 <_fflush_r+0x10>
 8003c7a:	2500      	movs	r5, #0
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	bd38      	pop	{r3, r4, r5, pc}
 8003c80:	b118      	cbz	r0, 8003c8a <_fflush_r+0x1a>
 8003c82:	6983      	ldr	r3, [r0, #24]
 8003c84:	b90b      	cbnz	r3, 8003c8a <_fflush_r+0x1a>
 8003c86:	f000 f887 	bl	8003d98 <__sinit>
 8003c8a:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <_fflush_r+0x6c>)
 8003c8c:	429c      	cmp	r4, r3
 8003c8e:	d11b      	bne.n	8003cc8 <_fflush_r+0x58>
 8003c90:	686c      	ldr	r4, [r5, #4]
 8003c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0ef      	beq.n	8003c7a <_fflush_r+0xa>
 8003c9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c9c:	07d0      	lsls	r0, r2, #31
 8003c9e:	d404      	bmi.n	8003caa <_fflush_r+0x3a>
 8003ca0:	0599      	lsls	r1, r3, #22
 8003ca2:	d402      	bmi.n	8003caa <_fflush_r+0x3a>
 8003ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ca6:	f000 f915 	bl	8003ed4 <__retarget_lock_acquire_recursive>
 8003caa:	4628      	mov	r0, r5
 8003cac:	4621      	mov	r1, r4
 8003cae:	f7ff ff59 	bl	8003b64 <__sflush_r>
 8003cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cb4:	07da      	lsls	r2, r3, #31
 8003cb6:	4605      	mov	r5, r0
 8003cb8:	d4e0      	bmi.n	8003c7c <_fflush_r+0xc>
 8003cba:	89a3      	ldrh	r3, [r4, #12]
 8003cbc:	059b      	lsls	r3, r3, #22
 8003cbe:	d4dd      	bmi.n	8003c7c <_fflush_r+0xc>
 8003cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cc2:	f000 f908 	bl	8003ed6 <__retarget_lock_release_recursive>
 8003cc6:	e7d9      	b.n	8003c7c <_fflush_r+0xc>
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <_fflush_r+0x70>)
 8003cca:	429c      	cmp	r4, r3
 8003ccc:	d101      	bne.n	8003cd2 <_fflush_r+0x62>
 8003cce:	68ac      	ldr	r4, [r5, #8]
 8003cd0:	e7df      	b.n	8003c92 <_fflush_r+0x22>
 8003cd2:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <_fflush_r+0x74>)
 8003cd4:	429c      	cmp	r4, r3
 8003cd6:	bf08      	it	eq
 8003cd8:	68ec      	ldreq	r4, [r5, #12]
 8003cda:	e7da      	b.n	8003c92 <_fflush_r+0x22>
 8003cdc:	08004328 	.word	0x08004328
 8003ce0:	08004348 	.word	0x08004348
 8003ce4:	08004308 	.word	0x08004308

08003ce8 <std>:
 8003ce8:	2300      	movs	r3, #0
 8003cea:	b510      	push	{r4, lr}
 8003cec:	4604      	mov	r4, r0
 8003cee:	e9c0 3300 	strd	r3, r3, [r0]
 8003cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cf6:	6083      	str	r3, [r0, #8]
 8003cf8:	8181      	strh	r1, [r0, #12]
 8003cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8003cfc:	81c2      	strh	r2, [r0, #14]
 8003cfe:	6183      	str	r3, [r0, #24]
 8003d00:	4619      	mov	r1, r3
 8003d02:	2208      	movs	r2, #8
 8003d04:	305c      	adds	r0, #92	; 0x5c
 8003d06:	f7ff fdef 	bl	80038e8 <memset>
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <std+0x38>)
 8003d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <std+0x3c>)
 8003d10:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d12:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <std+0x40>)
 8003d14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <std+0x44>)
 8003d18:	6224      	str	r4, [r4, #32]
 8003d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d1c:	bd10      	pop	{r4, pc}
 8003d1e:	bf00      	nop
 8003d20:	08004115 	.word	0x08004115
 8003d24:	08004137 	.word	0x08004137
 8003d28:	0800416f 	.word	0x0800416f
 8003d2c:	08004193 	.word	0x08004193

08003d30 <_cleanup_r>:
 8003d30:	4901      	ldr	r1, [pc, #4]	; (8003d38 <_cleanup_r+0x8>)
 8003d32:	f000 b8af 	b.w	8003e94 <_fwalk_reent>
 8003d36:	bf00      	nop
 8003d38:	08003c71 	.word	0x08003c71

08003d3c <__sfmoreglue>:
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	1e4a      	subs	r2, r1, #1
 8003d40:	2568      	movs	r5, #104	; 0x68
 8003d42:	4355      	muls	r5, r2
 8003d44:	460e      	mov	r6, r1
 8003d46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d4a:	f000 f979 	bl	8004040 <_malloc_r>
 8003d4e:	4604      	mov	r4, r0
 8003d50:	b140      	cbz	r0, 8003d64 <__sfmoreglue+0x28>
 8003d52:	2100      	movs	r1, #0
 8003d54:	e9c0 1600 	strd	r1, r6, [r0]
 8003d58:	300c      	adds	r0, #12
 8003d5a:	60a0      	str	r0, [r4, #8]
 8003d5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d60:	f7ff fdc2 	bl	80038e8 <memset>
 8003d64:	4620      	mov	r0, r4
 8003d66:	bd70      	pop	{r4, r5, r6, pc}

08003d68 <__sfp_lock_acquire>:
 8003d68:	4801      	ldr	r0, [pc, #4]	; (8003d70 <__sfp_lock_acquire+0x8>)
 8003d6a:	f000 b8b3 	b.w	8003ed4 <__retarget_lock_acquire_recursive>
 8003d6e:	bf00      	nop
 8003d70:	200028f0 	.word	0x200028f0

08003d74 <__sfp_lock_release>:
 8003d74:	4801      	ldr	r0, [pc, #4]	; (8003d7c <__sfp_lock_release+0x8>)
 8003d76:	f000 b8ae 	b.w	8003ed6 <__retarget_lock_release_recursive>
 8003d7a:	bf00      	nop
 8003d7c:	200028f0 	.word	0x200028f0

08003d80 <__sinit_lock_acquire>:
 8003d80:	4801      	ldr	r0, [pc, #4]	; (8003d88 <__sinit_lock_acquire+0x8>)
 8003d82:	f000 b8a7 	b.w	8003ed4 <__retarget_lock_acquire_recursive>
 8003d86:	bf00      	nop
 8003d88:	200028eb 	.word	0x200028eb

08003d8c <__sinit_lock_release>:
 8003d8c:	4801      	ldr	r0, [pc, #4]	; (8003d94 <__sinit_lock_release+0x8>)
 8003d8e:	f000 b8a2 	b.w	8003ed6 <__retarget_lock_release_recursive>
 8003d92:	bf00      	nop
 8003d94:	200028eb 	.word	0x200028eb

08003d98 <__sinit>:
 8003d98:	b510      	push	{r4, lr}
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	f7ff fff0 	bl	8003d80 <__sinit_lock_acquire>
 8003da0:	69a3      	ldr	r3, [r4, #24]
 8003da2:	b11b      	cbz	r3, 8003dac <__sinit+0x14>
 8003da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003da8:	f7ff bff0 	b.w	8003d8c <__sinit_lock_release>
 8003dac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003db0:	6523      	str	r3, [r4, #80]	; 0x50
 8003db2:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <__sinit+0x68>)
 8003db4:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <__sinit+0x6c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	62a2      	str	r2, [r4, #40]	; 0x28
 8003dba:	42a3      	cmp	r3, r4
 8003dbc:	bf04      	itt	eq
 8003dbe:	2301      	moveq	r3, #1
 8003dc0:	61a3      	streq	r3, [r4, #24]
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f000 f820 	bl	8003e08 <__sfp>
 8003dc8:	6060      	str	r0, [r4, #4]
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f000 f81c 	bl	8003e08 <__sfp>
 8003dd0:	60a0      	str	r0, [r4, #8]
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	f000 f818 	bl	8003e08 <__sfp>
 8003dd8:	2200      	movs	r2, #0
 8003dda:	60e0      	str	r0, [r4, #12]
 8003ddc:	2104      	movs	r1, #4
 8003dde:	6860      	ldr	r0, [r4, #4]
 8003de0:	f7ff ff82 	bl	8003ce8 <std>
 8003de4:	68a0      	ldr	r0, [r4, #8]
 8003de6:	2201      	movs	r2, #1
 8003de8:	2109      	movs	r1, #9
 8003dea:	f7ff ff7d 	bl	8003ce8 <std>
 8003dee:	68e0      	ldr	r0, [r4, #12]
 8003df0:	2202      	movs	r2, #2
 8003df2:	2112      	movs	r1, #18
 8003df4:	f7ff ff78 	bl	8003ce8 <std>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	61a3      	str	r3, [r4, #24]
 8003dfc:	e7d2      	b.n	8003da4 <__sinit+0xc>
 8003dfe:	bf00      	nop
 8003e00:	08004304 	.word	0x08004304
 8003e04:	08003d31 	.word	0x08003d31

08003e08 <__sfp>:
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	4607      	mov	r7, r0
 8003e0c:	f7ff ffac 	bl	8003d68 <__sfp_lock_acquire>
 8003e10:	4b1e      	ldr	r3, [pc, #120]	; (8003e8c <__sfp+0x84>)
 8003e12:	681e      	ldr	r6, [r3, #0]
 8003e14:	69b3      	ldr	r3, [r6, #24]
 8003e16:	b913      	cbnz	r3, 8003e1e <__sfp+0x16>
 8003e18:	4630      	mov	r0, r6
 8003e1a:	f7ff ffbd 	bl	8003d98 <__sinit>
 8003e1e:	3648      	adds	r6, #72	; 0x48
 8003e20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	d503      	bpl.n	8003e30 <__sfp+0x28>
 8003e28:	6833      	ldr	r3, [r6, #0]
 8003e2a:	b30b      	cbz	r3, 8003e70 <__sfp+0x68>
 8003e2c:	6836      	ldr	r6, [r6, #0]
 8003e2e:	e7f7      	b.n	8003e20 <__sfp+0x18>
 8003e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e34:	b9d5      	cbnz	r5, 8003e6c <__sfp+0x64>
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <__sfp+0x88>)
 8003e38:	60e3      	str	r3, [r4, #12]
 8003e3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e3e:	6665      	str	r5, [r4, #100]	; 0x64
 8003e40:	f000 f847 	bl	8003ed2 <__retarget_lock_init_recursive>
 8003e44:	f7ff ff96 	bl	8003d74 <__sfp_lock_release>
 8003e48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e50:	6025      	str	r5, [r4, #0]
 8003e52:	61a5      	str	r5, [r4, #24]
 8003e54:	2208      	movs	r2, #8
 8003e56:	4629      	mov	r1, r5
 8003e58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e5c:	f7ff fd44 	bl	80038e8 <memset>
 8003e60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e68:	4620      	mov	r0, r4
 8003e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e6c:	3468      	adds	r4, #104	; 0x68
 8003e6e:	e7d9      	b.n	8003e24 <__sfp+0x1c>
 8003e70:	2104      	movs	r1, #4
 8003e72:	4638      	mov	r0, r7
 8003e74:	f7ff ff62 	bl	8003d3c <__sfmoreglue>
 8003e78:	4604      	mov	r4, r0
 8003e7a:	6030      	str	r0, [r6, #0]
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d1d5      	bne.n	8003e2c <__sfp+0x24>
 8003e80:	f7ff ff78 	bl	8003d74 <__sfp_lock_release>
 8003e84:	230c      	movs	r3, #12
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	e7ee      	b.n	8003e68 <__sfp+0x60>
 8003e8a:	bf00      	nop
 8003e8c:	08004304 	.word	0x08004304
 8003e90:	ffff0001 	.word	0xffff0001

08003e94 <_fwalk_reent>:
 8003e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e98:	4606      	mov	r6, r0
 8003e9a:	4688      	mov	r8, r1
 8003e9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ea0:	2700      	movs	r7, #0
 8003ea2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ea6:	f1b9 0901 	subs.w	r9, r9, #1
 8003eaa:	d505      	bpl.n	8003eb8 <_fwalk_reent+0x24>
 8003eac:	6824      	ldr	r4, [r4, #0]
 8003eae:	2c00      	cmp	r4, #0
 8003eb0:	d1f7      	bne.n	8003ea2 <_fwalk_reent+0xe>
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eb8:	89ab      	ldrh	r3, [r5, #12]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d907      	bls.n	8003ece <_fwalk_reent+0x3a>
 8003ebe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	d003      	beq.n	8003ece <_fwalk_reent+0x3a>
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	4630      	mov	r0, r6
 8003eca:	47c0      	blx	r8
 8003ecc:	4307      	orrs	r7, r0
 8003ece:	3568      	adds	r5, #104	; 0x68
 8003ed0:	e7e9      	b.n	8003ea6 <_fwalk_reent+0x12>

08003ed2 <__retarget_lock_init_recursive>:
 8003ed2:	4770      	bx	lr

08003ed4 <__retarget_lock_acquire_recursive>:
 8003ed4:	4770      	bx	lr

08003ed6 <__retarget_lock_release_recursive>:
 8003ed6:	4770      	bx	lr

08003ed8 <__swhatbuf_r>:
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	460e      	mov	r6, r1
 8003edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	b096      	sub	sp, #88	; 0x58
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	461d      	mov	r5, r3
 8003ee8:	da07      	bge.n	8003efa <__swhatbuf_r+0x22>
 8003eea:	2300      	movs	r3, #0
 8003eec:	602b      	str	r3, [r5, #0]
 8003eee:	89b3      	ldrh	r3, [r6, #12]
 8003ef0:	061a      	lsls	r2, r3, #24
 8003ef2:	d410      	bmi.n	8003f16 <__swhatbuf_r+0x3e>
 8003ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef8:	e00e      	b.n	8003f18 <__swhatbuf_r+0x40>
 8003efa:	466a      	mov	r2, sp
 8003efc:	f000 f970 	bl	80041e0 <_fstat_r>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	dbf2      	blt.n	8003eea <__swhatbuf_r+0x12>
 8003f04:	9a01      	ldr	r2, [sp, #4]
 8003f06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f0e:	425a      	negs	r2, r3
 8003f10:	415a      	adcs	r2, r3
 8003f12:	602a      	str	r2, [r5, #0]
 8003f14:	e7ee      	b.n	8003ef4 <__swhatbuf_r+0x1c>
 8003f16:	2340      	movs	r3, #64	; 0x40
 8003f18:	2000      	movs	r0, #0
 8003f1a:	6023      	str	r3, [r4, #0]
 8003f1c:	b016      	add	sp, #88	; 0x58
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}

08003f20 <__smakebuf_r>:
 8003f20:	898b      	ldrh	r3, [r1, #12]
 8003f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f24:	079d      	lsls	r5, r3, #30
 8003f26:	4606      	mov	r6, r0
 8003f28:	460c      	mov	r4, r1
 8003f2a:	d507      	bpl.n	8003f3c <__smakebuf_r+0x1c>
 8003f2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	6123      	str	r3, [r4, #16]
 8003f34:	2301      	movs	r3, #1
 8003f36:	6163      	str	r3, [r4, #20]
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	ab01      	add	r3, sp, #4
 8003f3e:	466a      	mov	r2, sp
 8003f40:	f7ff ffca 	bl	8003ed8 <__swhatbuf_r>
 8003f44:	9900      	ldr	r1, [sp, #0]
 8003f46:	4605      	mov	r5, r0
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f000 f879 	bl	8004040 <_malloc_r>
 8003f4e:	b948      	cbnz	r0, 8003f64 <__smakebuf_r+0x44>
 8003f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f54:	059a      	lsls	r2, r3, #22
 8003f56:	d4ef      	bmi.n	8003f38 <__smakebuf_r+0x18>
 8003f58:	f023 0303 	bic.w	r3, r3, #3
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	e7e3      	b.n	8003f2c <__smakebuf_r+0xc>
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <__smakebuf_r+0x7c>)
 8003f66:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	6020      	str	r0, [r4, #0]
 8003f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	9b00      	ldr	r3, [sp, #0]
 8003f74:	6163      	str	r3, [r4, #20]
 8003f76:	9b01      	ldr	r3, [sp, #4]
 8003f78:	6120      	str	r0, [r4, #16]
 8003f7a:	b15b      	cbz	r3, 8003f94 <__smakebuf_r+0x74>
 8003f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f80:	4630      	mov	r0, r6
 8003f82:	f000 f93f 	bl	8004204 <_isatty_r>
 8003f86:	b128      	cbz	r0, 8003f94 <__smakebuf_r+0x74>
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	81a3      	strh	r3, [r4, #12]
 8003f94:	89a0      	ldrh	r0, [r4, #12]
 8003f96:	4305      	orrs	r5, r0
 8003f98:	81a5      	strh	r5, [r4, #12]
 8003f9a:	e7cd      	b.n	8003f38 <__smakebuf_r+0x18>
 8003f9c:	08003d31 	.word	0x08003d31

08003fa0 <_free_r>:
 8003fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fa2:	2900      	cmp	r1, #0
 8003fa4:	d048      	beq.n	8004038 <_free_r+0x98>
 8003fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003faa:	9001      	str	r0, [sp, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f1a1 0404 	sub.w	r4, r1, #4
 8003fb2:	bfb8      	it	lt
 8003fb4:	18e4      	addlt	r4, r4, r3
 8003fb6:	f000 f947 	bl	8004248 <__malloc_lock>
 8003fba:	4a20      	ldr	r2, [pc, #128]	; (800403c <_free_r+0x9c>)
 8003fbc:	9801      	ldr	r0, [sp, #4]
 8003fbe:	6813      	ldr	r3, [r2, #0]
 8003fc0:	4615      	mov	r5, r2
 8003fc2:	b933      	cbnz	r3, 8003fd2 <_free_r+0x32>
 8003fc4:	6063      	str	r3, [r4, #4]
 8003fc6:	6014      	str	r4, [r2, #0]
 8003fc8:	b003      	add	sp, #12
 8003fca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fce:	f000 b941 	b.w	8004254 <__malloc_unlock>
 8003fd2:	42a3      	cmp	r3, r4
 8003fd4:	d90b      	bls.n	8003fee <_free_r+0x4e>
 8003fd6:	6821      	ldr	r1, [r4, #0]
 8003fd8:	1862      	adds	r2, r4, r1
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	bf04      	itt	eq
 8003fde:	681a      	ldreq	r2, [r3, #0]
 8003fe0:	685b      	ldreq	r3, [r3, #4]
 8003fe2:	6063      	str	r3, [r4, #4]
 8003fe4:	bf04      	itt	eq
 8003fe6:	1852      	addeq	r2, r2, r1
 8003fe8:	6022      	streq	r2, [r4, #0]
 8003fea:	602c      	str	r4, [r5, #0]
 8003fec:	e7ec      	b.n	8003fc8 <_free_r+0x28>
 8003fee:	461a      	mov	r2, r3
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	b10b      	cbz	r3, 8003ff8 <_free_r+0x58>
 8003ff4:	42a3      	cmp	r3, r4
 8003ff6:	d9fa      	bls.n	8003fee <_free_r+0x4e>
 8003ff8:	6811      	ldr	r1, [r2, #0]
 8003ffa:	1855      	adds	r5, r2, r1
 8003ffc:	42a5      	cmp	r5, r4
 8003ffe:	d10b      	bne.n	8004018 <_free_r+0x78>
 8004000:	6824      	ldr	r4, [r4, #0]
 8004002:	4421      	add	r1, r4
 8004004:	1854      	adds	r4, r2, r1
 8004006:	42a3      	cmp	r3, r4
 8004008:	6011      	str	r1, [r2, #0]
 800400a:	d1dd      	bne.n	8003fc8 <_free_r+0x28>
 800400c:	681c      	ldr	r4, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	6053      	str	r3, [r2, #4]
 8004012:	4421      	add	r1, r4
 8004014:	6011      	str	r1, [r2, #0]
 8004016:	e7d7      	b.n	8003fc8 <_free_r+0x28>
 8004018:	d902      	bls.n	8004020 <_free_r+0x80>
 800401a:	230c      	movs	r3, #12
 800401c:	6003      	str	r3, [r0, #0]
 800401e:	e7d3      	b.n	8003fc8 <_free_r+0x28>
 8004020:	6825      	ldr	r5, [r4, #0]
 8004022:	1961      	adds	r1, r4, r5
 8004024:	428b      	cmp	r3, r1
 8004026:	bf04      	itt	eq
 8004028:	6819      	ldreq	r1, [r3, #0]
 800402a:	685b      	ldreq	r3, [r3, #4]
 800402c:	6063      	str	r3, [r4, #4]
 800402e:	bf04      	itt	eq
 8004030:	1949      	addeq	r1, r1, r5
 8004032:	6021      	streq	r1, [r4, #0]
 8004034:	6054      	str	r4, [r2, #4]
 8004036:	e7c7      	b.n	8003fc8 <_free_r+0x28>
 8004038:	b003      	add	sp, #12
 800403a:	bd30      	pop	{r4, r5, pc}
 800403c:	20002208 	.word	0x20002208

08004040 <_malloc_r>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	1ccd      	adds	r5, r1, #3
 8004044:	f025 0503 	bic.w	r5, r5, #3
 8004048:	3508      	adds	r5, #8
 800404a:	2d0c      	cmp	r5, #12
 800404c:	bf38      	it	cc
 800404e:	250c      	movcc	r5, #12
 8004050:	2d00      	cmp	r5, #0
 8004052:	4606      	mov	r6, r0
 8004054:	db01      	blt.n	800405a <_malloc_r+0x1a>
 8004056:	42a9      	cmp	r1, r5
 8004058:	d903      	bls.n	8004062 <_malloc_r+0x22>
 800405a:	230c      	movs	r3, #12
 800405c:	6033      	str	r3, [r6, #0]
 800405e:	2000      	movs	r0, #0
 8004060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004062:	f000 f8f1 	bl	8004248 <__malloc_lock>
 8004066:	4921      	ldr	r1, [pc, #132]	; (80040ec <_malloc_r+0xac>)
 8004068:	680a      	ldr	r2, [r1, #0]
 800406a:	4614      	mov	r4, r2
 800406c:	b99c      	cbnz	r4, 8004096 <_malloc_r+0x56>
 800406e:	4f20      	ldr	r7, [pc, #128]	; (80040f0 <_malloc_r+0xb0>)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	b923      	cbnz	r3, 800407e <_malloc_r+0x3e>
 8004074:	4621      	mov	r1, r4
 8004076:	4630      	mov	r0, r6
 8004078:	f000 f83c 	bl	80040f4 <_sbrk_r>
 800407c:	6038      	str	r0, [r7, #0]
 800407e:	4629      	mov	r1, r5
 8004080:	4630      	mov	r0, r6
 8004082:	f000 f837 	bl	80040f4 <_sbrk_r>
 8004086:	1c43      	adds	r3, r0, #1
 8004088:	d123      	bne.n	80040d2 <_malloc_r+0x92>
 800408a:	230c      	movs	r3, #12
 800408c:	6033      	str	r3, [r6, #0]
 800408e:	4630      	mov	r0, r6
 8004090:	f000 f8e0 	bl	8004254 <__malloc_unlock>
 8004094:	e7e3      	b.n	800405e <_malloc_r+0x1e>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	1b5b      	subs	r3, r3, r5
 800409a:	d417      	bmi.n	80040cc <_malloc_r+0x8c>
 800409c:	2b0b      	cmp	r3, #11
 800409e:	d903      	bls.n	80040a8 <_malloc_r+0x68>
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	441c      	add	r4, r3
 80040a4:	6025      	str	r5, [r4, #0]
 80040a6:	e004      	b.n	80040b2 <_malloc_r+0x72>
 80040a8:	6863      	ldr	r3, [r4, #4]
 80040aa:	42a2      	cmp	r2, r4
 80040ac:	bf0c      	ite	eq
 80040ae:	600b      	streq	r3, [r1, #0]
 80040b0:	6053      	strne	r3, [r2, #4]
 80040b2:	4630      	mov	r0, r6
 80040b4:	f000 f8ce 	bl	8004254 <__malloc_unlock>
 80040b8:	f104 000b 	add.w	r0, r4, #11
 80040bc:	1d23      	adds	r3, r4, #4
 80040be:	f020 0007 	bic.w	r0, r0, #7
 80040c2:	1ac2      	subs	r2, r0, r3
 80040c4:	d0cc      	beq.n	8004060 <_malloc_r+0x20>
 80040c6:	1a1b      	subs	r3, r3, r0
 80040c8:	50a3      	str	r3, [r4, r2]
 80040ca:	e7c9      	b.n	8004060 <_malloc_r+0x20>
 80040cc:	4622      	mov	r2, r4
 80040ce:	6864      	ldr	r4, [r4, #4]
 80040d0:	e7cc      	b.n	800406c <_malloc_r+0x2c>
 80040d2:	1cc4      	adds	r4, r0, #3
 80040d4:	f024 0403 	bic.w	r4, r4, #3
 80040d8:	42a0      	cmp	r0, r4
 80040da:	d0e3      	beq.n	80040a4 <_malloc_r+0x64>
 80040dc:	1a21      	subs	r1, r4, r0
 80040de:	4630      	mov	r0, r6
 80040e0:	f000 f808 	bl	80040f4 <_sbrk_r>
 80040e4:	3001      	adds	r0, #1
 80040e6:	d1dd      	bne.n	80040a4 <_malloc_r+0x64>
 80040e8:	e7cf      	b.n	800408a <_malloc_r+0x4a>
 80040ea:	bf00      	nop
 80040ec:	20002208 	.word	0x20002208
 80040f0:	2000220c 	.word	0x2000220c

080040f4 <_sbrk_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4d06      	ldr	r5, [pc, #24]	; (8004110 <_sbrk_r+0x1c>)
 80040f8:	2300      	movs	r3, #0
 80040fa:	4604      	mov	r4, r0
 80040fc:	4608      	mov	r0, r1
 80040fe:	602b      	str	r3, [r5, #0]
 8004100:	f7fc fd0e 	bl	8000b20 <_sbrk>
 8004104:	1c43      	adds	r3, r0, #1
 8004106:	d102      	bne.n	800410e <_sbrk_r+0x1a>
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	b103      	cbz	r3, 800410e <_sbrk_r+0x1a>
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	bd38      	pop	{r3, r4, r5, pc}
 8004110:	200028f4 	.word	0x200028f4

08004114 <__sread>:
 8004114:	b510      	push	{r4, lr}
 8004116:	460c      	mov	r4, r1
 8004118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800411c:	f000 f8a0 	bl	8004260 <_read_r>
 8004120:	2800      	cmp	r0, #0
 8004122:	bfab      	itete	ge
 8004124:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004126:	89a3      	ldrhlt	r3, [r4, #12]
 8004128:	181b      	addge	r3, r3, r0
 800412a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800412e:	bfac      	ite	ge
 8004130:	6563      	strge	r3, [r4, #84]	; 0x54
 8004132:	81a3      	strhlt	r3, [r4, #12]
 8004134:	bd10      	pop	{r4, pc}

08004136 <__swrite>:
 8004136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800413a:	461f      	mov	r7, r3
 800413c:	898b      	ldrh	r3, [r1, #12]
 800413e:	05db      	lsls	r3, r3, #23
 8004140:	4605      	mov	r5, r0
 8004142:	460c      	mov	r4, r1
 8004144:	4616      	mov	r6, r2
 8004146:	d505      	bpl.n	8004154 <__swrite+0x1e>
 8004148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800414c:	2302      	movs	r3, #2
 800414e:	2200      	movs	r2, #0
 8004150:	f000 f868 	bl	8004224 <_lseek_r>
 8004154:	89a3      	ldrh	r3, [r4, #12]
 8004156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800415a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800415e:	81a3      	strh	r3, [r4, #12]
 8004160:	4632      	mov	r2, r6
 8004162:	463b      	mov	r3, r7
 8004164:	4628      	mov	r0, r5
 8004166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800416a:	f000 b817 	b.w	800419c <_write_r>

0800416e <__sseek>:
 800416e:	b510      	push	{r4, lr}
 8004170:	460c      	mov	r4, r1
 8004172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004176:	f000 f855 	bl	8004224 <_lseek_r>
 800417a:	1c43      	adds	r3, r0, #1
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	bf15      	itete	ne
 8004180:	6560      	strne	r0, [r4, #84]	; 0x54
 8004182:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004186:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800418a:	81a3      	strheq	r3, [r4, #12]
 800418c:	bf18      	it	ne
 800418e:	81a3      	strhne	r3, [r4, #12]
 8004190:	bd10      	pop	{r4, pc}

08004192 <__sclose>:
 8004192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004196:	f000 b813 	b.w	80041c0 <_close_r>
	...

0800419c <_write_r>:
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4d07      	ldr	r5, [pc, #28]	; (80041bc <_write_r+0x20>)
 80041a0:	4604      	mov	r4, r0
 80041a2:	4608      	mov	r0, r1
 80041a4:	4611      	mov	r1, r2
 80041a6:	2200      	movs	r2, #0
 80041a8:	602a      	str	r2, [r5, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	f7ff fadd 	bl	800376a <_write>
 80041b0:	1c43      	adds	r3, r0, #1
 80041b2:	d102      	bne.n	80041ba <_write_r+0x1e>
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	b103      	cbz	r3, 80041ba <_write_r+0x1e>
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	bd38      	pop	{r3, r4, r5, pc}
 80041bc:	200028f4 	.word	0x200028f4

080041c0 <_close_r>:
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	4d06      	ldr	r5, [pc, #24]	; (80041dc <_close_r+0x1c>)
 80041c4:	2300      	movs	r3, #0
 80041c6:	4604      	mov	r4, r0
 80041c8:	4608      	mov	r0, r1
 80041ca:	602b      	str	r3, [r5, #0]
 80041cc:	f7fc fc73 	bl	8000ab6 <_close>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	d102      	bne.n	80041da <_close_r+0x1a>
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	b103      	cbz	r3, 80041da <_close_r+0x1a>
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	bd38      	pop	{r3, r4, r5, pc}
 80041dc:	200028f4 	.word	0x200028f4

080041e0 <_fstat_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	4d07      	ldr	r5, [pc, #28]	; (8004200 <_fstat_r+0x20>)
 80041e4:	2300      	movs	r3, #0
 80041e6:	4604      	mov	r4, r0
 80041e8:	4608      	mov	r0, r1
 80041ea:	4611      	mov	r1, r2
 80041ec:	602b      	str	r3, [r5, #0]
 80041ee:	f7fc fc6e 	bl	8000ace <_fstat>
 80041f2:	1c43      	adds	r3, r0, #1
 80041f4:	d102      	bne.n	80041fc <_fstat_r+0x1c>
 80041f6:	682b      	ldr	r3, [r5, #0]
 80041f8:	b103      	cbz	r3, 80041fc <_fstat_r+0x1c>
 80041fa:	6023      	str	r3, [r4, #0]
 80041fc:	bd38      	pop	{r3, r4, r5, pc}
 80041fe:	bf00      	nop
 8004200:	200028f4 	.word	0x200028f4

08004204 <_isatty_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4d06      	ldr	r5, [pc, #24]	; (8004220 <_isatty_r+0x1c>)
 8004208:	2300      	movs	r3, #0
 800420a:	4604      	mov	r4, r0
 800420c:	4608      	mov	r0, r1
 800420e:	602b      	str	r3, [r5, #0]
 8004210:	f7fc fc6d 	bl	8000aee <_isatty>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_isatty_r+0x1a>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	b103      	cbz	r3, 800421e <_isatty_r+0x1a>
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	200028f4 	.word	0x200028f4

08004224 <_lseek_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4d07      	ldr	r5, [pc, #28]	; (8004244 <_lseek_r+0x20>)
 8004228:	4604      	mov	r4, r0
 800422a:	4608      	mov	r0, r1
 800422c:	4611      	mov	r1, r2
 800422e:	2200      	movs	r2, #0
 8004230:	602a      	str	r2, [r5, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	f7fc fc66 	bl	8000b04 <_lseek>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d102      	bne.n	8004242 <_lseek_r+0x1e>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	b103      	cbz	r3, 8004242 <_lseek_r+0x1e>
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	bd38      	pop	{r3, r4, r5, pc}
 8004244:	200028f4 	.word	0x200028f4

08004248 <__malloc_lock>:
 8004248:	4801      	ldr	r0, [pc, #4]	; (8004250 <__malloc_lock+0x8>)
 800424a:	f7ff be43 	b.w	8003ed4 <__retarget_lock_acquire_recursive>
 800424e:	bf00      	nop
 8004250:	200028ec 	.word	0x200028ec

08004254 <__malloc_unlock>:
 8004254:	4801      	ldr	r0, [pc, #4]	; (800425c <__malloc_unlock+0x8>)
 8004256:	f7ff be3e 	b.w	8003ed6 <__retarget_lock_release_recursive>
 800425a:	bf00      	nop
 800425c:	200028ec 	.word	0x200028ec

08004260 <_read_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4d07      	ldr	r5, [pc, #28]	; (8004280 <_read_r+0x20>)
 8004264:	4604      	mov	r4, r0
 8004266:	4608      	mov	r0, r1
 8004268:	4611      	mov	r1, r2
 800426a:	2200      	movs	r2, #0
 800426c:	602a      	str	r2, [r5, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	f7fc fc04 	bl	8000a7c <_read>
 8004274:	1c43      	adds	r3, r0, #1
 8004276:	d102      	bne.n	800427e <_read_r+0x1e>
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	b103      	cbz	r3, 800427e <_read_r+0x1e>
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	bd38      	pop	{r3, r4, r5, pc}
 8004280:	200028f4 	.word	0x200028f4

08004284 <_init>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	bf00      	nop
 8004288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428a:	bc08      	pop	{r3}
 800428c:	469e      	mov	lr, r3
 800428e:	4770      	bx	lr

08004290 <_fini>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	bf00      	nop
 8004294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004296:	bc08      	pop	{r3}
 8004298:	469e      	mov	lr, r3
 800429a:	4770      	bx	lr
