ARM GAS  /tmp/ccSJ9y3V.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_thread_performance_info_get.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_thread_performance_info_get,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_thread_performance_info_get
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_thread_performance_info_get:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_thread_performance_info_get.c"
   1:ThreadX/common/src/tx_thread_performance_info_get.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
   3:ThreadX/common/src/tx_thread_performance_info_get.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
   5:ThreadX/common/src/tx_thread_performance_info_get.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_thread_performance_info_get.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_thread_performance_info_get.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_thread_performance_info_get.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  10:ThreadX/common/src/tx_thread_performance_info_get.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_thread_performance_info_get.c **** 
  12:ThreadX/common/src/tx_thread_performance_info_get.c **** 
  13:ThreadX/common/src/tx_thread_performance_info_get.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_thread_performance_info_get.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_thread_performance_info_get.c **** /**                                                                       */
  16:ThreadX/common/src/tx_thread_performance_info_get.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_thread_performance_info_get.c **** /**                                                                       */
  18:ThreadX/common/src/tx_thread_performance_info_get.c **** /**   Thread                                                              */
  19:ThreadX/common/src/tx_thread_performance_info_get.c **** /**                                                                       */
  20:ThreadX/common/src/tx_thread_performance_info_get.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_thread_performance_info_get.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_thread_performance_info_get.c **** 
  23:ThreadX/common/src/tx_thread_performance_info_get.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_thread_performance_info_get.c **** 
  25:ThreadX/common/src/tx_thread_performance_info_get.c **** 
  26:ThreadX/common/src/tx_thread_performance_info_get.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_thread_performance_info_get.c **** 
  28:ThreadX/common/src/tx_thread_performance_info_get.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_thread_performance_info_get.c **** #include "tx_thread.h"
  30:ThreadX/common/src/tx_thread_performance_info_get.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
  31:ThreadX/common/src/tx_thread_performance_info_get.c **** #include "tx_trace.h"
ARM GAS  /tmp/ccSJ9y3V.s 			page 2


  32:ThreadX/common/src/tx_thread_performance_info_get.c **** #endif
  33:ThreadX/common/src/tx_thread_performance_info_get.c **** 
  34:ThreadX/common/src/tx_thread_performance_info_get.c **** 
  35:ThreadX/common/src/tx_thread_performance_info_get.c **** /**************************************************************************/
  36:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  37:ThreadX/common/src/tx_thread_performance_info_get.c **** /*  FUNCTION                                               RELEASE        */
  38:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  39:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    _tx_thread_performance_info_get                     PORTABLE C      */
  40:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                           6.1          */
  41:ThreadX/common/src/tx_thread_performance_info_get.c **** /*  AUTHOR                                                                */
  42:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  43:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    William E. Lamie, Microsoft Corporation                             */
  44:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  45:ThreadX/common/src/tx_thread_performance_info_get.c **** /*  DESCRIPTION                                                           */
  46:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  47:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    This function retrieves performance information from the specified  */
  48:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    thread.                                                             */
  49:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  50:ThreadX/common/src/tx_thread_performance_info_get.c **** /*  INPUT                                                                 */
  51:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  52:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    thread_ptr                        Pointer to thread control block   */
  53:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    resumptions                       Destination for number of times   */
  54:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        thread was resumed              */
  55:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    suspensions                       Destination for number of times   */
  56:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        thread was suspended            */
  57:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    solicited_preemptions             Destination for number of times   */
  58:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        thread called another service   */
  59:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        that resulted in preemption     */
  60:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    interrupt_preemptions             Destination for number of times   */
  61:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        thread was preempted by another */
  62:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        thread made ready in Interrupt  */
  63:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        Service Routine (ISR)           */
  64:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    priority_inversions               Destination for number of times   */
  65:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        a priority inversion was        */
  66:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        detected for this thread        */
  67:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    time_slices                       Destination for number of times   */
  68:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        thread was time-sliced          */
  69:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    relinquishes                      Destination for number of thread  */
  70:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        relinquishes                    */
  71:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    timeouts                          Destination for number of timeouts*/
  72:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        for thread                      */
  73:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    wait_aborts                       Destination for number of wait    */
  74:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        aborts for thread               */
  75:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    last_preempted_by                 Destination for pointer of the    */
  76:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        thread that last preempted this */
  77:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                        thread                          */
  78:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  79:ThreadX/common/src/tx_thread_performance_info_get.c **** /*  OUTPUT                                                                */
  80:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  81:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    status                            Completion status                 */
  82:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  83:ThreadX/common/src/tx_thread_performance_info_get.c **** /*  CALLS                                                                 */
  84:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  85:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    None                                                                */
  86:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  87:ThreadX/common/src/tx_thread_performance_info_get.c **** /*  CALLED BY                                                             */
  88:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
ARM GAS  /tmp/ccSJ9y3V.s 			page 3


  89:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    Application Code                                                    */
  90:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  91:ThreadX/common/src/tx_thread_performance_info_get.c **** /*  RELEASE HISTORY                                                       */
  92:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  93:ThreadX/common/src/tx_thread_performance_info_get.c **** /*    DATE              NAME                      DESCRIPTION             */
  94:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  95:ThreadX/common/src/tx_thread_performance_info_get.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  96:ThreadX/common/src/tx_thread_performance_info_get.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  97:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                            resulting in version 6.1    */
  98:ThreadX/common/src/tx_thread_performance_info_get.c **** /*                                                                        */
  99:ThreadX/common/src/tx_thread_performance_info_get.c **** /**************************************************************************/
 100:ThreadX/common/src/tx_thread_performance_info_get.c **** UINT  _tx_thread_performance_info_get(TX_THREAD *thread_ptr, ULONG *resumptions, ULONG *suspensions
 101:ThreadX/common/src/tx_thread_performance_info_get.c ****                 ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversi
 102:ThreadX/common/src/tx_thread_performance_info_get.c ****                 ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, TX_TH
 103:ThreadX/common/src/tx_thread_performance_info_get.c **** {
  28              		.loc 1 103 0
  29              		.cfi_startproc
  30              		@ args = 28, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 104:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 105:ThreadX/common/src/tx_thread_performance_info_get.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 106:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 107:ThreadX/common/src/tx_thread_performance_info_get.c **** TX_INTERRUPT_SAVE_AREA
 108:ThreadX/common/src/tx_thread_performance_info_get.c **** UINT                    status;
 109:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 110:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 111:ThreadX/common/src/tx_thread_performance_info_get.c ****     /* Determine if this is a legal request.  */
 112:ThreadX/common/src/tx_thread_performance_info_get.c ****     if (thread_ptr == TX_NULL)
 113:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 114:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 115:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Thread pointer is illegal, return error.  */
 116:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_PTR_ERROR;
 117:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 118:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 119:ThreadX/common/src/tx_thread_performance_info_get.c ****     /* Determine if the thread ID is invalid.  */
 120:ThreadX/common/src/tx_thread_performance_info_get.c ****     else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 121:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 122:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 123:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Thread pointer is illegal, return error.  */
 124:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_PTR_ERROR;
 125:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 126:ThreadX/common/src/tx_thread_performance_info_get.c ****     else
 127:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 128:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 129:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Disable interrupts.  */
 130:ThreadX/common/src/tx_thread_performance_info_get.c ****         TX_DISABLE
 131:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 132:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* If trace is enabled, insert this event into the trace buffer.  */
 133:ThreadX/common/src/tx_thread_performance_info_get.c ****         TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_PERFORMANCE_INFO_GET, thread_ptr, thread_ptr -> tx_
 134:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 135:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Log this kernel call.  */
 136:ThreadX/common/src/tx_thread_performance_info_get.c ****         TX_EL_THREAD_PERFORMANCE_INFO_GET_INSERT
 137:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 138:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Retrieve all the pertinent information and return it in the supplied
 139:ThreadX/common/src/tx_thread_performance_info_get.c ****            destinations.  */
ARM GAS  /tmp/ccSJ9y3V.s 			page 4


 140:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 141:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Retrieve number of resumptions for this thread.  */
 142:ThreadX/common/src/tx_thread_performance_info_get.c ****         if (resumptions != TX_NULL)
 143:ThreadX/common/src/tx_thread_performance_info_get.c ****         {
 144:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 145:ThreadX/common/src/tx_thread_performance_info_get.c ****             *resumptions =  thread_ptr -> tx_thread_performance_resume_count;
 146:ThreadX/common/src/tx_thread_performance_info_get.c ****         }
 147:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 148:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Retrieve number of suspensions for this thread.  */
 149:ThreadX/common/src/tx_thread_performance_info_get.c ****         if (suspensions != TX_NULL)
 150:ThreadX/common/src/tx_thread_performance_info_get.c ****         {
 151:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 152:ThreadX/common/src/tx_thread_performance_info_get.c ****             *suspensions =  thread_ptr -> tx_thread_performance_suspend_count;
 153:ThreadX/common/src/tx_thread_performance_info_get.c ****         }
 154:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 155:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Retrieve number of solicited preemptions for this thread.  */
 156:ThreadX/common/src/tx_thread_performance_info_get.c ****         if (solicited_preemptions != TX_NULL)
 157:ThreadX/common/src/tx_thread_performance_info_get.c ****         {
 158:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 159:ThreadX/common/src/tx_thread_performance_info_get.c ****             *solicited_preemptions =  thread_ptr -> tx_thread_performance_solicited_preemption_coun
 160:ThreadX/common/src/tx_thread_performance_info_get.c ****         }
 161:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 162:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Retrieve number of interrupt preemptions for this thread.  */
 163:ThreadX/common/src/tx_thread_performance_info_get.c ****         if (interrupt_preemptions != TX_NULL)
 164:ThreadX/common/src/tx_thread_performance_info_get.c ****         {
 165:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 166:ThreadX/common/src/tx_thread_performance_info_get.c ****             *interrupt_preemptions =  thread_ptr -> tx_thread_performance_interrupt_preemption_coun
 167:ThreadX/common/src/tx_thread_performance_info_get.c ****         }
 168:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 169:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Retrieve number of priority inversions for this thread.  */
 170:ThreadX/common/src/tx_thread_performance_info_get.c ****         if (priority_inversions != TX_NULL)
 171:ThreadX/common/src/tx_thread_performance_info_get.c ****         {
 172:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 173:ThreadX/common/src/tx_thread_performance_info_get.c ****             *priority_inversions =  thread_ptr -> tx_thread_performance_priority_inversion_count;
 174:ThreadX/common/src/tx_thread_performance_info_get.c ****         }
 175:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 176:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Retrieve number of time-slices for this thread.  */
 177:ThreadX/common/src/tx_thread_performance_info_get.c ****         if (time_slices != TX_NULL)
 178:ThreadX/common/src/tx_thread_performance_info_get.c ****         {
 179:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 180:ThreadX/common/src/tx_thread_performance_info_get.c ****             *time_slices =  thread_ptr -> tx_thread_performance_time_slice_count;
 181:ThreadX/common/src/tx_thread_performance_info_get.c ****         }
 182:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 183:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Retrieve number of relinquishes for this thread.  */
 184:ThreadX/common/src/tx_thread_performance_info_get.c ****         if (relinquishes != TX_NULL)
 185:ThreadX/common/src/tx_thread_performance_info_get.c ****         {
 186:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 187:ThreadX/common/src/tx_thread_performance_info_get.c ****             *relinquishes =  thread_ptr -> tx_thread_performance_relinquish_count;
 188:ThreadX/common/src/tx_thread_performance_info_get.c ****         }
 189:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 190:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Retrieve number of timeouts for this thread.  */
 191:ThreadX/common/src/tx_thread_performance_info_get.c ****         if (timeouts != TX_NULL)
 192:ThreadX/common/src/tx_thread_performance_info_get.c ****         {
 193:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 194:ThreadX/common/src/tx_thread_performance_info_get.c ****             *timeouts =  thread_ptr -> tx_thread_performance_timeout_count;
 195:ThreadX/common/src/tx_thread_performance_info_get.c ****         }
 196:ThreadX/common/src/tx_thread_performance_info_get.c **** 
ARM GAS  /tmp/ccSJ9y3V.s 			page 5


 197:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Retrieve number of wait aborts for this thread.  */
 198:ThreadX/common/src/tx_thread_performance_info_get.c ****         if (wait_aborts != TX_NULL)
 199:ThreadX/common/src/tx_thread_performance_info_get.c ****         {
 200:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 201:ThreadX/common/src/tx_thread_performance_info_get.c ****             *wait_aborts =  thread_ptr -> tx_thread_performance_wait_abort_count;
 202:ThreadX/common/src/tx_thread_performance_info_get.c ****         }
 203:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 204:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Retrieve the pointer of the last thread that preempted this thread.  */
 205:ThreadX/common/src/tx_thread_performance_info_get.c ****         if (last_preempted_by != TX_NULL)
 206:ThreadX/common/src/tx_thread_performance_info_get.c ****         {
 207:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 208:ThreadX/common/src/tx_thread_performance_info_get.c ****             *last_preempted_by =  thread_ptr -> tx_thread_performance_last_preempting_thread;
 209:ThreadX/common/src/tx_thread_performance_info_get.c ****         }
 210:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 211:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Restore interrupts.  */
 212:ThreadX/common/src/tx_thread_performance_info_get.c ****         TX_RESTORE
 213:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 214:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Return completion status.  */
 215:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_SUCCESS;
 216:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 217:ThreadX/common/src/tx_thread_performance_info_get.c **** #else
 218:ThreadX/common/src/tx_thread_performance_info_get.c **** UINT                    status;
 219:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 220:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 221:ThreadX/common/src/tx_thread_performance_info_get.c ****     /* Access input arguments just for the sake of lint, MISRA, etc.  */
 222:ThreadX/common/src/tx_thread_performance_info_get.c ****     if (thread_ptr != TX_NULL)
 223:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 224:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 225:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Not enabled, return error.  */
 226:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 227:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 228:ThreadX/common/src/tx_thread_performance_info_get.c ****     else if (resumptions != TX_NULL)
 229:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 230:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 231:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Not enabled, return error.  */
 232:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 233:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 234:ThreadX/common/src/tx_thread_performance_info_get.c ****     else if (suspensions != TX_NULL)
 235:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 236:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 237:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Not enabled, return error.  */
 238:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 239:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 240:ThreadX/common/src/tx_thread_performance_info_get.c ****     else if (solicited_preemptions != TX_NULL)
 241:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 242:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 243:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Not enabled, return error.  */
 244:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 245:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 246:ThreadX/common/src/tx_thread_performance_info_get.c ****     else if (interrupt_preemptions != TX_NULL)
 247:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 248:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 249:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Not enabled, return error.  */
 250:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 251:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 252:ThreadX/common/src/tx_thread_performance_info_get.c ****     else if (priority_inversions != TX_NULL)
 253:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
ARM GAS  /tmp/ccSJ9y3V.s 			page 6


 254:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 255:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Not enabled, return error.  */
 256:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 257:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 258:ThreadX/common/src/tx_thread_performance_info_get.c ****     else if (time_slices != TX_NULL)
 259:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 260:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 261:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Not enabled, return error.  */
 262:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 263:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 264:ThreadX/common/src/tx_thread_performance_info_get.c ****     else if (relinquishes != TX_NULL)
 265:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 266:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 267:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Not enabled, return error.  */
 268:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 269:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 270:ThreadX/common/src/tx_thread_performance_info_get.c ****     else if (timeouts != TX_NULL)
 271:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 272:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 273:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Not enabled, return error.  */
 274:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 275:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 276:ThreadX/common/src/tx_thread_performance_info_get.c ****     else if (wait_aborts != TX_NULL)
 277:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 278:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 279:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Not enabled, return error.  */
 280:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 281:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 282:ThreadX/common/src/tx_thread_performance_info_get.c ****     else if (last_preempted_by != TX_NULL)
 283:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 284:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 285:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Not enabled, return error.  */
 286:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 287:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 288:ThreadX/common/src/tx_thread_performance_info_get.c ****     else
 289:ThreadX/common/src/tx_thread_performance_info_get.c ****     {
 290:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 291:ThreadX/common/src/tx_thread_performance_info_get.c ****         /* Not enabled, return error.  */
 292:ThreadX/common/src/tx_thread_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 293:ThreadX/common/src/tx_thread_performance_info_get.c ****     }
 294:ThreadX/common/src/tx_thread_performance_info_get.c **** #endif
 295:ThreadX/common/src/tx_thread_performance_info_get.c **** 
 296:ThreadX/common/src/tx_thread_performance_info_get.c ****     /* Return completion status.  */
 297:ThreadX/common/src/tx_thread_performance_info_get.c ****     return(status);
 298:ThreadX/common/src/tx_thread_performance_info_get.c **** }
  34              		.loc 1 298 0
  35 0000 FF20     		movs	r0, #255
  36              	.LVL1:
  37 0002 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE8:
  41              		.text
  42              	.Letext0:
  43              		.file 2 "/usr/include/newlib/sys/lock.h"
  44              		.file 3 "/usr/include/newlib/sys/_types.h"
  45              		.file 4 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
  46              		.file 5 "/usr/include/newlib/sys/reent.h"
ARM GAS  /tmp/ccSJ9y3V.s 			page 7


  47              		.file 6 "/usr/include/newlib/stdlib.h"
  48              		.file 7 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
  49              		.file 8 "ThreadX/common/inc/tx_api.h"
  50              		.file 9 "ThreadX/common/inc/tx_thread.h"
ARM GAS  /tmp/ccSJ9y3V.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_thread_performance_info_get.c
     /tmp/ccSJ9y3V.s:18     .text._tx_thread_performance_info_get:0000000000000000 $t
     /tmp/ccSJ9y3V.s:25     .text._tx_thread_performance_info_get:0000000000000000 _tx_thread_performance_info_get

NO UNDEFINED SYMBOLS
