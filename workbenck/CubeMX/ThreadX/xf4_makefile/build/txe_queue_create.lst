ARM GAS  /tmp/ccoYAId5.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"txe_queue_create.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._txe_queue_create,"ax",%progbits
  18              		.align	1
  19              		.global	_txe_queue_create
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_txe_queue_create:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/txe_queue_create.c"
   1:ThreadX/common/src/txe_queue_create.c **** /**************************************************************************/
   2:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
   3:ThreadX/common/src/txe_queue_create.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
   5:ThreadX/common/src/txe_queue_create.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/txe_queue_create.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/txe_queue_create.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/txe_queue_create.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  10:ThreadX/common/src/txe_queue_create.c **** /**************************************************************************/
  11:ThreadX/common/src/txe_queue_create.c **** 
  12:ThreadX/common/src/txe_queue_create.c **** 
  13:ThreadX/common/src/txe_queue_create.c **** /**************************************************************************/
  14:ThreadX/common/src/txe_queue_create.c **** /**************************************************************************/
  15:ThreadX/common/src/txe_queue_create.c **** /**                                                                       */
  16:ThreadX/common/src/txe_queue_create.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/txe_queue_create.c **** /**                                                                       */
  18:ThreadX/common/src/txe_queue_create.c **** /**   Queue                                                               */
  19:ThreadX/common/src/txe_queue_create.c **** /**                                                                       */
  20:ThreadX/common/src/txe_queue_create.c **** /**************************************************************************/
  21:ThreadX/common/src/txe_queue_create.c **** /**************************************************************************/
  22:ThreadX/common/src/txe_queue_create.c **** 
  23:ThreadX/common/src/txe_queue_create.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/txe_queue_create.c **** 
  25:ThreadX/common/src/txe_queue_create.c **** 
  26:ThreadX/common/src/txe_queue_create.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/txe_queue_create.c **** 
  28:ThreadX/common/src/txe_queue_create.c **** #include "tx_api.h"
  29:ThreadX/common/src/txe_queue_create.c **** #include "tx_initialize.h"
  30:ThreadX/common/src/txe_queue_create.c **** #include "tx_timer.h"
  31:ThreadX/common/src/txe_queue_create.c **** #include "tx_thread.h"
ARM GAS  /tmp/ccoYAId5.s 			page 2


  32:ThreadX/common/src/txe_queue_create.c **** #include "tx_queue.h"
  33:ThreadX/common/src/txe_queue_create.c **** 
  34:ThreadX/common/src/txe_queue_create.c **** 
  35:ThreadX/common/src/txe_queue_create.c **** /**************************************************************************/
  36:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  37:ThreadX/common/src/txe_queue_create.c **** /*  FUNCTION                                               RELEASE        */
  38:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  39:ThreadX/common/src/txe_queue_create.c **** /*    _txe_queue_create                                   PORTABLE C      */
  40:ThreadX/common/src/txe_queue_create.c **** /*                                                           6.1          */
  41:ThreadX/common/src/txe_queue_create.c **** /*  AUTHOR                                                                */
  42:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  43:ThreadX/common/src/txe_queue_create.c **** /*    William E. Lamie, Microsoft Corporation                             */
  44:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  45:ThreadX/common/src/txe_queue_create.c **** /*  DESCRIPTION                                                           */
  46:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  47:ThreadX/common/src/txe_queue_create.c **** /*    This function checks for errors in the queue create function call.  */
  48:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  49:ThreadX/common/src/txe_queue_create.c **** /*  INPUT                                                                 */
  50:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  51:ThreadX/common/src/txe_queue_create.c **** /*    queue_ptr                         Pointer to queue control block    */
  52:ThreadX/common/src/txe_queue_create.c **** /*    name_ptr                          Pointer to queue name             */
  53:ThreadX/common/src/txe_queue_create.c **** /*    message_size                      Size of each queue message        */
  54:ThreadX/common/src/txe_queue_create.c **** /*    queue_start                       Starting address of the queue area*/
  55:ThreadX/common/src/txe_queue_create.c **** /*    queue_size                        Number of bytes in the queue      */
  56:ThreadX/common/src/txe_queue_create.c **** /*    queue_control_block_size          Size of queue control block       */
  57:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  58:ThreadX/common/src/txe_queue_create.c **** /*  OUTPUT                                                                */
  59:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  60:ThreadX/common/src/txe_queue_create.c **** /*    TX_QUEUE_ERROR                    Invalid queue pointer             */
  61:ThreadX/common/src/txe_queue_create.c **** /*    TX_PTR_ERROR                      Invalid starting address of queue */
  62:ThreadX/common/src/txe_queue_create.c **** /*    TX_SIZE_ERROR                     Invalid message queue size        */
  63:ThreadX/common/src/txe_queue_create.c **** /*    status                            Actual completion status          */
  64:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  65:ThreadX/common/src/txe_queue_create.c **** /*  CALLS                                                                 */
  66:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  67:ThreadX/common/src/txe_queue_create.c **** /*    _tx_queue_create                  Actual queue create function      */
  68:ThreadX/common/src/txe_queue_create.c **** /*    _tx_thread_system_preempt_check   Check for preemption              */
  69:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  70:ThreadX/common/src/txe_queue_create.c **** /*  CALLED BY                                                             */
  71:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  72:ThreadX/common/src/txe_queue_create.c **** /*    Application Code                                                    */
  73:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  74:ThreadX/common/src/txe_queue_create.c **** /*  RELEASE HISTORY                                                       */
  75:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  76:ThreadX/common/src/txe_queue_create.c **** /*    DATE              NAME                      DESCRIPTION             */
  77:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  78:ThreadX/common/src/txe_queue_create.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  79:ThreadX/common/src/txe_queue_create.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  80:ThreadX/common/src/txe_queue_create.c **** /*                                            resulting in version 6.1    */
  81:ThreadX/common/src/txe_queue_create.c **** /*                                                                        */
  82:ThreadX/common/src/txe_queue_create.c **** /**************************************************************************/
  83:ThreadX/common/src/txe_queue_create.c **** UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
  84:ThreadX/common/src/txe_queue_create.c ****                         VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
  85:ThreadX/common/src/txe_queue_create.c **** {
  28              		.loc 1 85 0
  29              		.cfi_startproc
  30              		@ args = 8, pretend = 0, frame = 0
ARM GAS  /tmp/ccoYAId5.s 			page 3


  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  86:ThreadX/common/src/txe_queue_create.c **** 
  87:ThreadX/common/src/txe_queue_create.c **** TX_INTERRUPT_SAVE_AREA
  88:ThreadX/common/src/txe_queue_create.c **** 
  89:ThreadX/common/src/txe_queue_create.c **** UINT            status;
  90:ThreadX/common/src/txe_queue_create.c **** ULONG           i;
  91:ThreadX/common/src/txe_queue_create.c **** TX_QUEUE        *next_queue;
  92:ThreadX/common/src/txe_queue_create.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
  93:ThreadX/common/src/txe_queue_create.c **** TX_THREAD       *thread_ptr;
  94:ThreadX/common/src/txe_queue_create.c **** #endif
  95:ThreadX/common/src/txe_queue_create.c **** 
  96:ThreadX/common/src/txe_queue_create.c **** 
  97:ThreadX/common/src/txe_queue_create.c ****     /* Default status to success.  */
  98:ThreadX/common/src/txe_queue_create.c ****     status =  TX_SUCCESS;
  99:ThreadX/common/src/txe_queue_create.c **** 
 100:ThreadX/common/src/txe_queue_create.c ****     /* Check for an invalid queue pointer.  */
 101:ThreadX/common/src/txe_queue_create.c ****     if (queue_ptr == TX_NULL)
  33              		.loc 1 101 0
  34 0000 0028     		cmp	r0, #0
  35 0002 53D0     		beq	.L8
  85:ThreadX/common/src/txe_queue_create.c **** 
  36              		.loc 1 85 0
  37 0004 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 24
  40              		.cfi_offset 4, -24
  41              		.cfi_offset 5, -20
  42              		.cfi_offset 6, -16
  43              		.cfi_offset 7, -12
  44              		.cfi_offset 8, -8
  45              		.cfi_offset 14, -4
  46 0008 82B0     		sub	sp, sp, #8
  47              	.LCFI1:
  48              		.cfi_def_cfa_offset 32
  49 000a 0746     		mov	r7, r0
 102:ThreadX/common/src/txe_queue_create.c ****     {
 103:ThreadX/common/src/txe_queue_create.c **** 
 104:ThreadX/common/src/txe_queue_create.c ****         /* Queue pointer is invalid, return appropriate error code.  */
 105:ThreadX/common/src/txe_queue_create.c ****         status =  TX_QUEUE_ERROR;
 106:ThreadX/common/src/txe_queue_create.c ****     }
 107:ThreadX/common/src/txe_queue_create.c **** 
 108:ThreadX/common/src/txe_queue_create.c ****     /* Now check for a valid control block size.  */
 109:ThreadX/common/src/txe_queue_create.c ****     else if (queue_control_block_size != (sizeof(TX_QUEUE)))
  50              		.loc 1 109 0
  51 000c 0998     		ldr	r0, [sp, #36]
  52              	.LVL1:
  53 000e 3C28     		cmp	r0, #60
  54 0010 4ED1     		bne	.L9
  55              	.LBB20:
  56              	.LBB21:
  57              	.LBB22:
  58              	.LBB23:
  59              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
ARM GAS  /tmp/ccoYAId5.s 			page 4


   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
ARM GAS  /tmp/ccoYAId5.s 			page 5


  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
ARM GAS  /tmp/ccoYAId5.s 			page 6


 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccoYAId5.s 			page 7


 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
ARM GAS  /tmp/ccoYAId5.s 			page 8


 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccoYAId5.s 			page 9


 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
ARM GAS  /tmp/ccoYAId5.s 			page 10


 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
ARM GAS  /tmp/ccoYAId5.s 			page 11


 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
ARM GAS  /tmp/ccoYAId5.s 			page 12


 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
ARM GAS  /tmp/ccoYAId5.s 			page 13


 517:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  60              		.loc 2 539 0
  61              		.syntax unified
  62              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  63 0012 EFF31085 		MRS  r5, PRIMASK 
  64              	@ 0 "" 2
  65              		.thumb
  66              		.syntax unified
  67              	.LBE23:
  68              	.LBE22:
 540:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
ARM GAS  /tmp/ccoYAId5.s 			page 14


 565:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
 567:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
 569:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
 571:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  69              		.loc 2 575 0
  70              		.syntax unified
  71              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  72 0016 72B6     		CPSID i
  73              	@ 0 "" 2
  74              		.thumb
  75              		.syntax unified
  76              	.LBE21:
  77              	.LBE20:
 110:ThreadX/common/src/txe_queue_create.c ****     {
 111:ThreadX/common/src/txe_queue_create.c **** 
 112:ThreadX/common/src/txe_queue_create.c ****         /* Queue pointer is invalid, return appropriate error code.  */
 113:ThreadX/common/src/txe_queue_create.c ****         status =  TX_QUEUE_ERROR;
 114:ThreadX/common/src/txe_queue_create.c ****     }
 115:ThreadX/common/src/txe_queue_create.c ****     else
 116:ThreadX/common/src/txe_queue_create.c ****     {
 117:ThreadX/common/src/txe_queue_create.c **** 
 118:ThreadX/common/src/txe_queue_create.c ****         /* Disable interrupts.  */
 119:ThreadX/common/src/txe_queue_create.c ****         TX_DISABLE
 120:ThreadX/common/src/txe_queue_create.c **** 
 121:ThreadX/common/src/txe_queue_create.c ****         /* Increment the preempt disable flag.  */
 122:ThreadX/common/src/txe_queue_create.c ****         _tx_thread_preempt_disable++;
  78              		.loc 1 122 0
  79 0018 2D4C     		ldr	r4, .L21
  80 001a 2068     		ldr	r0, [r4]
  81 001c 0130     		adds	r0, r0, #1
  82 001e 2060     		str	r0, [r4]
  83              	.LBB24:
  84              	.LBB25:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  85              		.loc 2 562 0
  86              		.syntax unified
  87              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  88 0020 85F31088 		MSR  PRIMASK,r5
  89              	@ 0 "" 2
  90              		.thumb
  91              		.syntax unified
  92              	.LBE25:
  93              	.LBE24:
 123:ThreadX/common/src/txe_queue_create.c **** 
 124:ThreadX/common/src/txe_queue_create.c ****         /* Restore interrupts.  */
 125:ThreadX/common/src/txe_queue_create.c ****         TX_RESTORE
 126:ThreadX/common/src/txe_queue_create.c **** 
 127:ThreadX/common/src/txe_queue_create.c ****         /* Next see if it is already in the created list.  */
 128:ThreadX/common/src/txe_queue_create.c ****         next_queue =   _tx_queue_created_ptr;
  94              		.loc 1 128 0
ARM GAS  /tmp/ccoYAId5.s 			page 15


  95 0024 2B48     		ldr	r0, .L21+4
  96 0026 0468     		ldr	r4, [r0]
  97              	.LVL2:
 129:ThreadX/common/src/txe_queue_create.c ****         for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
  98              		.loc 1 129 0
  99 0028 0025     		movs	r5, #0
 100              	.LVL3:
 101              	.L3:
 102              		.loc 1 129 0 is_stmt 0 discriminator 1
 103 002a 2B4E     		ldr	r6, .L21+8
 104 002c 3668     		ldr	r6, [r6]
 105 002e AE42     		cmp	r6, r5
 106 0030 04D9     		bls	.L4
 130:ThreadX/common/src/txe_queue_create.c ****         {
 131:ThreadX/common/src/txe_queue_create.c **** 
 132:ThreadX/common/src/txe_queue_create.c ****             /* Determine if this queue matches the queue in the list.  */
 133:ThreadX/common/src/txe_queue_create.c ****             if (queue_ptr == next_queue)
 107              		.loc 1 133 0 is_stmt 1
 108 0032 BC42     		cmp	r4, r7
 109 0034 02D0     		beq	.L4
 134:ThreadX/common/src/txe_queue_create.c ****             {
 135:ThreadX/common/src/txe_queue_create.c **** 
 136:ThreadX/common/src/txe_queue_create.c ****                 break;
 137:ThreadX/common/src/txe_queue_create.c ****             }
 138:ThreadX/common/src/txe_queue_create.c ****             else
 139:ThreadX/common/src/txe_queue_create.c ****             {
 140:ThreadX/common/src/txe_queue_create.c **** 
 141:ThreadX/common/src/txe_queue_create.c ****                 /* Move to the next queue.  */
 142:ThreadX/common/src/txe_queue_create.c ****                 next_queue =  next_queue -> tx_queue_created_next;
 110              		.loc 1 142 0 discriminator 2
 111 0036 246B     		ldr	r4, [r4, #48]
 112              	.LVL4:
 129:ThreadX/common/src/txe_queue_create.c ****         {
 113              		.loc 1 129 0 discriminator 2
 114 0038 0135     		adds	r5, r5, #1
 115              	.LVL5:
 116 003a F6E7     		b	.L3
 117              	.L4:
 118 003c 1D46     		mov	r5, r3
 119              	.LVL6:
 120 003e 1646     		mov	r6, r2
 121 0040 8846     		mov	r8, r1
 122              	.LBB26:
 123              	.LBB27:
 124              	.LBB28:
 125              	.LBB29:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 126              		.loc 2 539 0
 127              		.syntax unified
 128              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 129 0042 EFF31081 		MRS  r1, PRIMASK 
 130              	@ 0 "" 2
 131              	.LVL7:
 132              		.thumb
 133              		.syntax unified
 134              	.LBE29:
 135              	.LBE28:
ARM GAS  /tmp/ccoYAId5.s 			page 16


 136              		.loc 2 575 0
 137              		.syntax unified
 138              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 139 0046 72B6     		CPSID i
 140              	@ 0 "" 2
 141              		.thumb
 142              		.syntax unified
 143              	.LBE27:
 144              	.LBE26:
 143:ThreadX/common/src/txe_queue_create.c ****             }
 144:ThreadX/common/src/txe_queue_create.c ****         }
 145:ThreadX/common/src/txe_queue_create.c **** 
 146:ThreadX/common/src/txe_queue_create.c ****         /* Disable interrupts.  */
 147:ThreadX/common/src/txe_queue_create.c ****         TX_DISABLE
 148:ThreadX/common/src/txe_queue_create.c **** 
 149:ThreadX/common/src/txe_queue_create.c ****         /* Decrement the preempt disable flag.  */
 150:ThreadX/common/src/txe_queue_create.c ****         _tx_thread_preempt_disable--;
 145              		.loc 1 150 0
 146 0048 214B     		ldr	r3, .L21
 147              	.LVL8:
 148 004a 1A68     		ldr	r2, [r3]
 149              	.LVL9:
 150 004c 013A     		subs	r2, r2, #1
 151 004e 1A60     		str	r2, [r3]
 152              	.LBB30:
 153              	.LBB31:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 154              		.loc 2 562 0
 155              		.syntax unified
 156              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 157 0050 81F31088 		MSR  PRIMASK,r1
 158              	@ 0 "" 2
 159              		.thumb
 160              		.syntax unified
 161              	.LBE31:
 162              	.LBE30:
 151:ThreadX/common/src/txe_queue_create.c **** 
 152:ThreadX/common/src/txe_queue_create.c ****         /* Restore interrupts.  */
 153:ThreadX/common/src/txe_queue_create.c ****         TX_RESTORE
 154:ThreadX/common/src/txe_queue_create.c **** 
 155:ThreadX/common/src/txe_queue_create.c ****         /* Check for preemption.  */
 156:ThreadX/common/src/txe_queue_create.c ****         _tx_thread_system_preempt_check();
 163              		.loc 1 156 0
 164 0054 FFF7FEFF 		bl	_tx_thread_system_preempt_check
 165              	.LVL10:
 157:ThreadX/common/src/txe_queue_create.c **** 
 158:ThreadX/common/src/txe_queue_create.c ****         /* At this point, check to see if there is a duplicate queue.  */
 159:ThreadX/common/src/txe_queue_create.c ****         if (queue_ptr == next_queue)
 166              		.loc 1 159 0
 167 0058 BC42     		cmp	r4, r7
 168 005a 2DD0     		beq	.L10
 160:ThreadX/common/src/txe_queue_create.c ****         {
 161:ThreadX/common/src/txe_queue_create.c **** 
 162:ThreadX/common/src/txe_queue_create.c ****             /* Queue is already created, return appropriate error code.  */
 163:ThreadX/common/src/txe_queue_create.c ****             status =  TX_QUEUE_ERROR;
 164:ThreadX/common/src/txe_queue_create.c ****         }
 165:ThreadX/common/src/txe_queue_create.c **** 
ARM GAS  /tmp/ccoYAId5.s 			page 17


 166:ThreadX/common/src/txe_queue_create.c ****         /* Check the starting address of the queue.  */
 167:ThreadX/common/src/txe_queue_create.c ****         else if (queue_start == TX_NULL)
 169              		.loc 1 167 0
 170 005c 75B3     		cbz	r5, .L11
 168:ThreadX/common/src/txe_queue_create.c ****         {
 169:ThreadX/common/src/txe_queue_create.c **** 
 170:ThreadX/common/src/txe_queue_create.c ****             /* Invalid starting address of queue.  */
 171:ThreadX/common/src/txe_queue_create.c ****             status =  TX_PTR_ERROR;
 172:ThreadX/common/src/txe_queue_create.c ****         }
 173:ThreadX/common/src/txe_queue_create.c **** 
 174:ThreadX/common/src/txe_queue_create.c ****         /* Check for an invalid message size - less than 1.  */
 175:ThreadX/common/src/txe_queue_create.c ****         else if (message_size < TX_1_ULONG)
 171              		.loc 1 175 0
 172 005e 7EB3     		cbz	r6, .L12
 176:ThreadX/common/src/txe_queue_create.c ****         {
 177:ThreadX/common/src/txe_queue_create.c **** 
 178:ThreadX/common/src/txe_queue_create.c ****             /* Invalid message size specified.  */
 179:ThreadX/common/src/txe_queue_create.c ****             status =  TX_SIZE_ERROR;
 180:ThreadX/common/src/txe_queue_create.c ****         }
 181:ThreadX/common/src/txe_queue_create.c **** 
 182:ThreadX/common/src/txe_queue_create.c ****         /* Check for an invalid message size - greater than 16.  */
 183:ThreadX/common/src/txe_queue_create.c ****         else if (message_size > TX_16_ULONG)
 173              		.loc 1 183 0
 174 0060 102E     		cmp	r6, #16
 175 0062 2FD8     		bhi	.L13
 184:ThreadX/common/src/txe_queue_create.c ****         {
 185:ThreadX/common/src/txe_queue_create.c **** 
 186:ThreadX/common/src/txe_queue_create.c ****             /* Invalid message size specified.  */
 187:ThreadX/common/src/txe_queue_create.c ****             status =  TX_SIZE_ERROR;
 188:ThreadX/common/src/txe_queue_create.c ****         }
 189:ThreadX/common/src/txe_queue_create.c **** 
 190:ThreadX/common/src/txe_queue_create.c ****         /* Check on the queue size.  */
 191:ThreadX/common/src/txe_queue_create.c ****         else if ((queue_size/(sizeof(ULONG))) < message_size)
 176              		.loc 1 191 0
 177 0064 089B     		ldr	r3, [sp, #32]
 178 0066 B6EB930F 		cmp	r6, r3, lsr #2
 179 006a 2DD8     		bhi	.L14
 192:ThreadX/common/src/txe_queue_create.c ****         {
 193:ThreadX/common/src/txe_queue_create.c **** 
 194:ThreadX/common/src/txe_queue_create.c ****             /* Invalid queue size specified.  */
 195:ThreadX/common/src/txe_queue_create.c ****             status =  TX_SIZE_ERROR;
 196:ThreadX/common/src/txe_queue_create.c ****         }
 197:ThreadX/common/src/txe_queue_create.c ****         else
 198:ThreadX/common/src/txe_queue_create.c ****         {
 199:ThreadX/common/src/txe_queue_create.c **** 
 200:ThreadX/common/src/txe_queue_create.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
 201:ThreadX/common/src/txe_queue_create.c **** 
 202:ThreadX/common/src/txe_queue_create.c ****             /* Pickup thread pointer.  */
 203:ThreadX/common/src/txe_queue_create.c ****             TX_THREAD_GET_CURRENT(thread_ptr)
 180              		.loc 1 203 0
 181 006c 1B4B     		ldr	r3, .L21+12
 182 006e 1A68     		ldr	r2, [r3]
 183              	.LVL11:
 204:ThreadX/common/src/txe_queue_create.c **** 
 205:ThreadX/common/src/txe_queue_create.c ****             /* Check for invalid caller of this function.  First check for a calling thread.  */
 206:ThreadX/common/src/txe_queue_create.c ****             if (thread_ptr == &_tx_timer_thread)
 184              		.loc 1 206 0
ARM GAS  /tmp/ccoYAId5.s 			page 18


 185 0070 1B4B     		ldr	r3, .L21+16
 186 0072 9A42     		cmp	r2, r3
 187 0074 18D0     		beq	.L15
  98:ThreadX/common/src/txe_queue_create.c **** 
 188              		.loc 1 98 0
 189 0076 0020     		movs	r0, #0
 190              	.L6:
 191              	.LVL12:
 192              	.LBB32:
 193              	.LBB33:
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 194              		.loc 2 477 0
 195              		.syntax unified
 196              	@ 477 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 197 0078 EFF30583 		 MRS  r3,IPSR 
 198              	@ 0 "" 2
 199              		.thumb
 200              		.syntax unified
 201              	.LBE33:
 202              	.LBE32:
 207:ThreadX/common/src/txe_queue_create.c ****             {
 208:ThreadX/common/src/txe_queue_create.c **** 
 209:ThreadX/common/src/txe_queue_create.c ****                 /* Invalid caller of this function, return appropriate error code.  */
 210:ThreadX/common/src/txe_queue_create.c ****                 status =  TX_CALLER_ERROR;
 211:ThreadX/common/src/txe_queue_create.c ****             }
 212:ThreadX/common/src/txe_queue_create.c **** #endif
 213:ThreadX/common/src/txe_queue_create.c **** 
 214:ThreadX/common/src/txe_queue_create.c ****             /* Check for interrupt call.  */
 215:ThreadX/common/src/txe_queue_create.c ****             if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 203              		.loc 1 215 0
 204 007c 194A     		ldr	r2, .L21+20
 205              	.LVL13:
 206 007e 1268     		ldr	r2, [r2]
 207 0080 1343     		orrs	r3, r2, r3
 208 0082 07D0     		beq	.L7
 209              	.LBB34:
 210              	.LBB35:
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 211              		.loc 2 477 0
 212              		.syntax unified
 213              	@ 477 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 214 0084 EFF30582 		 MRS  r2,IPSR 
 215              	@ 0 "" 2
 216              		.thumb
 217              		.syntax unified
 218              	.LBE35:
 219              	.LBE34:
 216:ThreadX/common/src/txe_queue_create.c ****             {
 217:ThreadX/common/src/txe_queue_create.c **** 
 218:ThreadX/common/src/txe_queue_create.c ****                 /* Now, make sure the call is from an interrupt and not initialization.  */
 219:ThreadX/common/src/txe_queue_create.c ****                 if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 220              		.loc 1 219 0
 221 0088 164B     		ldr	r3, .L21+20
 222 008a 1B68     		ldr	r3, [r3]
 223 008c 1343     		orrs	r3, r3, r2
 224 008e B3F1F03F 		cmp	r3, #-252645136
 225 0092 1BD3     		bcc	.L16
ARM GAS  /tmp/ccoYAId5.s 			page 19


 226              	.L7:
 220:ThreadX/common/src/txe_queue_create.c ****                 {
 221:ThreadX/common/src/txe_queue_create.c **** 
 222:ThreadX/common/src/txe_queue_create.c ****                     /* Invalid caller of this function, return appropriate error code.  */
 223:ThreadX/common/src/txe_queue_create.c ****                     status =  TX_CALLER_ERROR;
 224:ThreadX/common/src/txe_queue_create.c ****                 }
 225:ThreadX/common/src/txe_queue_create.c ****             }
 226:ThreadX/common/src/txe_queue_create.c ****         }
 227:ThreadX/common/src/txe_queue_create.c ****     }
 228:ThreadX/common/src/txe_queue_create.c **** 
 229:ThreadX/common/src/txe_queue_create.c ****     /* Determine if everything is okay.  */
 230:ThreadX/common/src/txe_queue_create.c ****     if (status == TX_SUCCESS)
 227              		.loc 1 230 0
 228 0094 68B9     		cbnz	r0, .L1
 231:ThreadX/common/src/txe_queue_create.c ****     {
 232:ThreadX/common/src/txe_queue_create.c **** 
 233:ThreadX/common/src/txe_queue_create.c ****         /* Call actual queue create function.  */
 234:ThreadX/common/src/txe_queue_create.c ****         status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 229              		.loc 1 234 0
 230 0096 089B     		ldr	r3, [sp, #32]
 231 0098 0093     		str	r3, [sp]
 232 009a 2B46     		mov	r3, r5
 233 009c 3246     		mov	r2, r6
 234 009e 4146     		mov	r1, r8
 235 00a0 3846     		mov	r0, r7
 236              	.LVL14:
 237 00a2 FFF7FEFF 		bl	_tx_queue_create
 238              	.LVL15:
 239 00a6 04E0     		b	.L1
 240              	.LVL16:
 241              	.L15:
 210:ThreadX/common/src/txe_queue_create.c ****             }
 242              		.loc 1 210 0
 243 00a8 1320     		movs	r0, #19
 244 00aa E5E7     		b	.L6
 245              	.LVL17:
 246              	.L8:
 247              	.LCFI2:
 248              		.cfi_def_cfa_offset 0
 249              		.cfi_restore 4
 250              		.cfi_restore 5
 251              		.cfi_restore 6
 252              		.cfi_restore 7
 253              		.cfi_restore 8
 254              		.cfi_restore 14
 105:ThreadX/common/src/txe_queue_create.c ****     }
 255              		.loc 1 105 0
 256 00ac 0920     		movs	r0, #9
 257              	.LVL18:
 235:ThreadX/common/src/txe_queue_create.c ****     }
 236:ThreadX/common/src/txe_queue_create.c **** 
 237:ThreadX/common/src/txe_queue_create.c ****     /* Return completion status.  */
 238:ThreadX/common/src/txe_queue_create.c ****     return(status);
 239:ThreadX/common/src/txe_queue_create.c **** }
 258              		.loc 1 239 0
 259 00ae 7047     		bx	lr
 260              	.LVL19:
ARM GAS  /tmp/ccoYAId5.s 			page 20


 261              	.L9:
 262              	.LCFI3:
 263              		.cfi_def_cfa_offset 32
 264              		.cfi_offset 4, -24
 265              		.cfi_offset 5, -20
 266              		.cfi_offset 6, -16
 267              		.cfi_offset 7, -12
 268              		.cfi_offset 8, -8
 269              		.cfi_offset 14, -4
 113:ThreadX/common/src/txe_queue_create.c ****     }
 270              		.loc 1 113 0
 271 00b0 0920     		movs	r0, #9
 272              	.LVL20:
 273              	.L1:
 274              		.loc 1 239 0
 275 00b2 02B0     		add	sp, sp, #8
 276              	.LCFI4:
 277              		.cfi_remember_state
 278              		.cfi_def_cfa_offset 24
 279              		@ sp needed
 280 00b4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 281              	.LVL21:
 282              	.L10:
 283              	.LCFI5:
 284              		.cfi_restore_state
 163:ThreadX/common/src/txe_queue_create.c ****         }
 285              		.loc 1 163 0
 286 00b8 0920     		movs	r0, #9
 287 00ba FAE7     		b	.L1
 288              	.L11:
 171:ThreadX/common/src/txe_queue_create.c ****         }
 289              		.loc 1 171 0
 290 00bc 0320     		movs	r0, #3
 291 00be F8E7     		b	.L1
 292              	.L12:
 179:ThreadX/common/src/txe_queue_create.c ****         }
 293              		.loc 1 179 0
 294 00c0 0520     		movs	r0, #5
 295 00c2 F6E7     		b	.L1
 296              	.L13:
 187:ThreadX/common/src/txe_queue_create.c ****         }
 297              		.loc 1 187 0
 298 00c4 0520     		movs	r0, #5
 299 00c6 F4E7     		b	.L1
 300              	.L14:
 195:ThreadX/common/src/txe_queue_create.c ****         }
 301              		.loc 1 195 0
 302 00c8 0520     		movs	r0, #5
 303 00ca F2E7     		b	.L1
 304              	.LVL22:
 305              	.L16:
 223:ThreadX/common/src/txe_queue_create.c ****                 }
 306              		.loc 1 223 0
 307 00cc 1320     		movs	r0, #19
 308              	.LVL23:
 238:ThreadX/common/src/txe_queue_create.c **** }
 309              		.loc 1 238 0
ARM GAS  /tmp/ccoYAId5.s 			page 21


 310 00ce F0E7     		b	.L1
 311              	.L22:
 312              		.align	2
 313              	.L21:
 314 00d0 00000000 		.word	_tx_thread_preempt_disable
 315 00d4 00000000 		.word	_tx_queue_created_ptr
 316 00d8 00000000 		.word	_tx_queue_created_count
 317 00dc 00000000 		.word	_tx_thread_current_ptr
 318 00e0 00000000 		.word	_tx_timer_thread
 319 00e4 00000000 		.word	_tx_thread_system_state
 320              		.cfi_endproc
 321              	.LFE8:
 323              		.text
 324              	.Letext0:
 325              		.file 3 "/usr/include/newlib/sys/lock.h"
 326              		.file 4 "/usr/include/newlib/sys/_types.h"
 327              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 328              		.file 6 "/usr/include/newlib/sys/reent.h"
 329              		.file 7 "/usr/include/newlib/stdlib.h"
 330              		.file 8 "ThreadX/common/inc/tx_api.h"
 331              		.file 9 "ThreadX/common/inc/tx_initialize.h"
 332              		.file 10 "ThreadX/common/inc/tx_timer.h"
 333              		.file 11 "ThreadX/common/inc/tx_thread.h"
 334              		.file 12 "ThreadX/common/inc/tx_queue.h"
ARM GAS  /tmp/ccoYAId5.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 txe_queue_create.c
     /tmp/ccoYAId5.s:18     .text._txe_queue_create:0000000000000000 $t
     /tmp/ccoYAId5.s:25     .text._txe_queue_create:0000000000000000 _txe_queue_create
     /tmp/ccoYAId5.s:314    .text._txe_queue_create:00000000000000d0 $d

UNDEFINED SYMBOLS
_tx_thread_system_preempt_check
_tx_queue_create
_tx_thread_preempt_disable
_tx_queue_created_ptr
_tx_queue_created_count
_tx_thread_current_ptr
_tx_timer_thread
_tx_thread_system_state
