ARM GAS  /tmp/cceREi6Q.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_thread_initialize.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_thread_initialize,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_thread_initialize
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_thread_initialize:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_thread_initialize.c"
   1:ThreadX/common/src/tx_thread_initialize.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
   3:ThreadX/common/src/tx_thread_initialize.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
   5:ThreadX/common/src/tx_thread_initialize.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_thread_initialize.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_thread_initialize.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_thread_initialize.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
  10:ThreadX/common/src/tx_thread_initialize.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_thread_initialize.c **** 
  12:ThreadX/common/src/tx_thread_initialize.c **** 
  13:ThreadX/common/src/tx_thread_initialize.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_thread_initialize.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_thread_initialize.c **** /**                                                                       */
  16:ThreadX/common/src/tx_thread_initialize.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_thread_initialize.c **** /**                                                                       */
  18:ThreadX/common/src/tx_thread_initialize.c **** /**   Thread                                                              */
  19:ThreadX/common/src/tx_thread_initialize.c **** /**                                                                       */
  20:ThreadX/common/src/tx_thread_initialize.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_thread_initialize.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_thread_initialize.c **** 
  23:ThreadX/common/src/tx_thread_initialize.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_thread_initialize.c **** 
  25:ThreadX/common/src/tx_thread_initialize.c **** 
  26:ThreadX/common/src/tx_thread_initialize.c **** #ifndef TX_MISRA_ENABLE
  27:ThreadX/common/src/tx_thread_initialize.c **** #define TX_THREAD_INIT
  28:ThreadX/common/src/tx_thread_initialize.c **** #endif
  29:ThreadX/common/src/tx_thread_initialize.c **** 
  30:ThreadX/common/src/tx_thread_initialize.c **** 
  31:ThreadX/common/src/tx_thread_initialize.c **** /* Include necessary system files.  */
ARM GAS  /tmp/cceREi6Q.s 			page 2


  32:ThreadX/common/src/tx_thread_initialize.c **** 
  33:ThreadX/common/src/tx_thread_initialize.c **** #include "tx_api.h"
  34:ThreadX/common/src/tx_thread_initialize.c **** #include "tx_initialize.h"
  35:ThreadX/common/src/tx_thread_initialize.c **** #include "tx_thread.h"
  36:ThreadX/common/src/tx_thread_initialize.c **** 
  37:ThreadX/common/src/tx_thread_initialize.c **** 
  38:ThreadX/common/src/tx_thread_initialize.c **** /* Define the pointer that contains the system stack pointer.  This is
  39:ThreadX/common/src/tx_thread_initialize.c ****    utilized when control returns from a thread to the system to reset the
  40:ThreadX/common/src/tx_thread_initialize.c ****    current stack.  This is setup in the low-level initialization function. */
  41:ThreadX/common/src/tx_thread_initialize.c **** 
  42:ThreadX/common/src/tx_thread_initialize.c **** VOID *          _tx_thread_system_stack_ptr;
  43:ThreadX/common/src/tx_thread_initialize.c **** 
  44:ThreadX/common/src/tx_thread_initialize.c **** 
  45:ThreadX/common/src/tx_thread_initialize.c **** /* Define the current thread pointer.  This variable points to the currently
  46:ThreadX/common/src/tx_thread_initialize.c ****    executing thread.  If this variable is NULL, no thread is executing.  */
  47:ThreadX/common/src/tx_thread_initialize.c **** 
  48:ThreadX/common/src/tx_thread_initialize.c **** TX_THREAD *     _tx_thread_current_ptr;
  49:ThreadX/common/src/tx_thread_initialize.c **** 
  50:ThreadX/common/src/tx_thread_initialize.c **** 
  51:ThreadX/common/src/tx_thread_initialize.c **** /* Define the variable that holds the next thread to execute.  It is important
  52:ThreadX/common/src/tx_thread_initialize.c ****    to remember that this is not necessarily equal to the current thread 
  53:ThreadX/common/src/tx_thread_initialize.c ****    pointer.  */
  54:ThreadX/common/src/tx_thread_initialize.c **** 
  55:ThreadX/common/src/tx_thread_initialize.c **** TX_THREAD *     _tx_thread_execute_ptr;
  56:ThreadX/common/src/tx_thread_initialize.c **** 
  57:ThreadX/common/src/tx_thread_initialize.c **** 
  58:ThreadX/common/src/tx_thread_initialize.c **** /* Define the head pointer of the created thread list.  */
  59:ThreadX/common/src/tx_thread_initialize.c **** 
  60:ThreadX/common/src/tx_thread_initialize.c **** TX_THREAD *     _tx_thread_created_ptr;
  61:ThreadX/common/src/tx_thread_initialize.c **** 
  62:ThreadX/common/src/tx_thread_initialize.c **** 
  63:ThreadX/common/src/tx_thread_initialize.c **** /* Define the variable that holds the number of created threads. */
  64:ThreadX/common/src/tx_thread_initialize.c **** 
  65:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_created_count;
  66:ThreadX/common/src/tx_thread_initialize.c **** 
  67:ThreadX/common/src/tx_thread_initialize.c **** 
  68:ThreadX/common/src/tx_thread_initialize.c **** /* Define the current state variable.  When this value is 0, a thread
  69:ThreadX/common/src/tx_thread_initialize.c ****    is executing or the system is idle.  Other values indicate that 
  70:ThreadX/common/src/tx_thread_initialize.c ****    interrupt or initialization processing is active.  This variable is
  71:ThreadX/common/src/tx_thread_initialize.c ****    initialized to TX_INITIALIZE_IN_PROGRESS to indicate initialization is
  72:ThreadX/common/src/tx_thread_initialize.c ****    active.  */
  73:ThreadX/common/src/tx_thread_initialize.c **** 
  74:ThreadX/common/src/tx_thread_initialize.c **** volatile ULONG  _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
  75:ThreadX/common/src/tx_thread_initialize.c **** 
  76:ThreadX/common/src/tx_thread_initialize.c **** 
  77:ThreadX/common/src/tx_thread_initialize.c **** /* Define the 32-bit priority bit-maps. There is one priority bit map for each
  78:ThreadX/common/src/tx_thread_initialize.c ****    32 priority levels supported. If only 32 priorities are supported there is 
  79:ThreadX/common/src/tx_thread_initialize.c ****    only one bit map. Each bit within a priority bit map represents that one 
  80:ThreadX/common/src/tx_thread_initialize.c ****    or more threads at the associated thread priority are ready.  */
  81:ThreadX/common/src/tx_thread_initialize.c **** 
  82:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_priority_maps[TX_MAX_PRIORITIES/32];
  83:ThreadX/common/src/tx_thread_initialize.c **** 
  84:ThreadX/common/src/tx_thread_initialize.c **** 
  85:ThreadX/common/src/tx_thread_initialize.c **** /* Define the priority map active bit map that specifies which of the previously 
  86:ThreadX/common/src/tx_thread_initialize.c ****    defined priority maps have something set. This is only necessary if more than 
  87:ThreadX/common/src/tx_thread_initialize.c ****    32 priorities are supported.  */
  88:ThreadX/common/src/tx_thread_initialize.c **** 
ARM GAS  /tmp/cceREi6Q.s 			page 3


  89:ThreadX/common/src/tx_thread_initialize.c **** #if TX_MAX_PRIORITIES > 32
  90:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_priority_map_active;
  91:ThreadX/common/src/tx_thread_initialize.c **** #endif
  92:ThreadX/common/src/tx_thread_initialize.c **** 
  93:ThreadX/common/src/tx_thread_initialize.c **** 
  94:ThreadX/common/src/tx_thread_initialize.c **** #ifndef TX_DISABLE_PREEMPTION_THRESHOLD
  95:ThreadX/common/src/tx_thread_initialize.c **** 
  96:ThreadX/common/src/tx_thread_initialize.c **** /* Define the 32-bit preempt priority bit maps.  There is one preempt bit map 
  97:ThreadX/common/src/tx_thread_initialize.c ****    for each 32 priority levels supported. If only 32 priorities are supported 
  98:ThreadX/common/src/tx_thread_initialize.c ****    there is only one bit map. Each set set bit corresponds to a preempted priority 
  99:ThreadX/common/src/tx_thread_initialize.c ****    level that had preemption-threshold active to protect against preemption of a 
 100:ThreadX/common/src/tx_thread_initialize.c ****    range of relatively higher priority threads.  */
 101:ThreadX/common/src/tx_thread_initialize.c **** 
 102:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_preempted_maps[TX_MAX_PRIORITIES/32];
 103:ThreadX/common/src/tx_thread_initialize.c **** 
 104:ThreadX/common/src/tx_thread_initialize.c **** 
 105:ThreadX/common/src/tx_thread_initialize.c **** /* Define the preempt map active bit map that specifies which of the previously 
 106:ThreadX/common/src/tx_thread_initialize.c ****    defined preempt maps have something set. This is only necessary if more than 
 107:ThreadX/common/src/tx_thread_initialize.c ****    32 priorities are supported.  */
 108:ThreadX/common/src/tx_thread_initialize.c **** 
 109:ThreadX/common/src/tx_thread_initialize.c **** #if TX_MAX_PRIORITIES > 32
 110:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_preempted_map_active;
 111:ThreadX/common/src/tx_thread_initialize.c **** #endif
 112:ThreadX/common/src/tx_thread_initialize.c **** #endif
 113:ThreadX/common/src/tx_thread_initialize.c **** 
 114:ThreadX/common/src/tx_thread_initialize.c **** /* Define the variable that holds the highest priority group ready for 
 115:ThreadX/common/src/tx_thread_initialize.c ****    execution.  It is important to note that this is not necessarily the same
 116:ThreadX/common/src/tx_thread_initialize.c ****    as the priority of the thread pointed to by _tx_execute_thread.  */
 117:ThreadX/common/src/tx_thread_initialize.c **** 
 118:ThreadX/common/src/tx_thread_initialize.c **** UINT            _tx_thread_highest_priority;
 119:ThreadX/common/src/tx_thread_initialize.c **** 
 120:ThreadX/common/src/tx_thread_initialize.c **** 
 121:ThreadX/common/src/tx_thread_initialize.c **** /* Define the array of thread pointers.  Each entry represents the threads that
 122:ThreadX/common/src/tx_thread_initialize.c ****    are ready at that priority group.  For example, index 10 in this array
 123:ThreadX/common/src/tx_thread_initialize.c ****    represents the first thread ready at priority 10.  If this entry is NULL,
 124:ThreadX/common/src/tx_thread_initialize.c ****    no threads are ready at that priority.  */
 125:ThreadX/common/src/tx_thread_initialize.c **** 
 126:ThreadX/common/src/tx_thread_initialize.c **** TX_THREAD *     _tx_thread_priority_list[TX_MAX_PRIORITIES];
 127:ThreadX/common/src/tx_thread_initialize.c **** 
 128:ThreadX/common/src/tx_thread_initialize.c **** 
 129:ThreadX/common/src/tx_thread_initialize.c **** /* Define the global preempt disable variable.  If this is non-zero, preemption is
 130:ThreadX/common/src/tx_thread_initialize.c ****    disabled.  It is used internally by ThreadX to prevent preemption of a thread in 
 131:ThreadX/common/src/tx_thread_initialize.c ****    the middle of a service that is resuming or suspending another thread.  */
 132:ThreadX/common/src/tx_thread_initialize.c **** 
 133:ThreadX/common/src/tx_thread_initialize.c **** volatile UINT   _tx_thread_preempt_disable;
 134:ThreadX/common/src/tx_thread_initialize.c **** 
 135:ThreadX/common/src/tx_thread_initialize.c **** 
 136:ThreadX/common/src/tx_thread_initialize.c **** /* Define the global function pointer for mutex cleanup on thread completion or 
 137:ThreadX/common/src/tx_thread_initialize.c ****    termination. This pointer is setup during mutex initialization.  */
 138:ThreadX/common/src/tx_thread_initialize.c **** 
 139:ThreadX/common/src/tx_thread_initialize.c **** VOID            (*_tx_thread_mutex_release)(TX_THREAD *thread_ptr);
 140:ThreadX/common/src/tx_thread_initialize.c **** 
 141:ThreadX/common/src/tx_thread_initialize.c **** 
 142:ThreadX/common/src/tx_thread_initialize.c **** /* Define the global build options variable.  This contains a bit map representing
 143:ThreadX/common/src/tx_thread_initialize.c ****    how the ThreadX library was built. The following are the bit field definitions:
 144:ThreadX/common/src/tx_thread_initialize.c **** 
 145:ThreadX/common/src/tx_thread_initialize.c ****                     Bit(s)                   Meaning
ARM GAS  /tmp/cceREi6Q.s 			page 4


 146:ThreadX/common/src/tx_thread_initialize.c **** 
 147:ThreadX/common/src/tx_thread_initialize.c ****                     31                  TX_NOT_INTERRUPTABLE defined
 148:ThreadX/common/src/tx_thread_initialize.c ****                     30                  TX_INLINE_THREAD_RESUME_SUSPEND define
 149:ThreadX/common/src/tx_thread_initialize.c ****                     29-24               Priority groups 1  -> 32 priorities
 150:ThreadX/common/src/tx_thread_initialize.c ****                                                         2  -> 64 priorities
 151:ThreadX/common/src/tx_thread_initialize.c ****                                                         3  -> 96 priorities
 152:ThreadX/common/src/tx_thread_initialize.c **** 
 153:ThreadX/common/src/tx_thread_initialize.c ****                                                         ...
 154:ThreadX/common/src/tx_thread_initialize.c **** 
 155:ThreadX/common/src/tx_thread_initialize.c ****                                                         32 -> 1024 priorities
 156:ThreadX/common/src/tx_thread_initialize.c ****                     23                  TX_TIMER_PROCESS_IN_ISR defined
 157:ThreadX/common/src/tx_thread_initialize.c ****                     22                  TX_REACTIVATE_INLINE defined
 158:ThreadX/common/src/tx_thread_initialize.c ****                     21                  TX_DISABLE_STACK_FILLING defined
 159:ThreadX/common/src/tx_thread_initialize.c ****                     20                  TX_ENABLE_STACK_CHECKING defined
 160:ThreadX/common/src/tx_thread_initialize.c ****                     19                  TX_DISABLE_PREEMPTION_THRESHOLD defined
 161:ThreadX/common/src/tx_thread_initialize.c ****                     18                  TX_DISABLE_REDUNDANT_CLEARING defined
 162:ThreadX/common/src/tx_thread_initialize.c ****                     17                  TX_DISABLE_NOTIFY_CALLBACKS defined
 163:ThreadX/common/src/tx_thread_initialize.c ****                     16                  TX_BLOCK_POOL_ENABLE_PERFORMANCE_INFO defined
 164:ThreadX/common/src/tx_thread_initialize.c ****                     15                  TX_BYTE_POOL_ENABLE_PERFORMANCE_INFO defined
 165:ThreadX/common/src/tx_thread_initialize.c ****                     14                  TX_EVENT_FLAGS_ENABLE_PERFORMANCE_INFO defined
 166:ThreadX/common/src/tx_thread_initialize.c ****                     13                  TX_MUTEX_ENABLE_PERFORMANCE_INFO defined
 167:ThreadX/common/src/tx_thread_initialize.c ****                     12                  TX_QUEUE_ENABLE_PERFORMANCE_INFO defined
 168:ThreadX/common/src/tx_thread_initialize.c ****                     11                  TX_SEMAPHORE_ENABLE_PERFORMANCE_INFO defined
 169:ThreadX/common/src/tx_thread_initialize.c ****                     10                  TX_THREAD_ENABLE_PERFORMANCE_INFO defined
 170:ThreadX/common/src/tx_thread_initialize.c ****                     9                   TX_TIMER_ENABLE_PERFORMANCE_INFO defined
 171:ThreadX/common/src/tx_thread_initialize.c ****                     8                   TX_ENABLE_EVENT_TRACE defined
 172:ThreadX/common/src/tx_thread_initialize.c ****                     7                   TX_ENABLE_EXECUTION_CHANGE_NOTIFY defined
 173:ThreadX/common/src/tx_thread_initialize.c ****                     6-0                 Port Specific   */
 174:ThreadX/common/src/tx_thread_initialize.c **** 
 175:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_build_options;
 176:ThreadX/common/src/tx_thread_initialize.c **** 
 177:ThreadX/common/src/tx_thread_initialize.c **** 
 178:ThreadX/common/src/tx_thread_initialize.c **** #if defined(TX_ENABLE_STACK_CHECKING) || defined(TX_PORT_THREAD_STACK_ERROR_HANDLING)
 179:ThreadX/common/src/tx_thread_initialize.c **** 
 180:ThreadX/common/src/tx_thread_initialize.c **** /* Define the global function pointer for stack error handling. If a stack error is 
 181:ThreadX/common/src/tx_thread_initialize.c ****    detected and the application has registered a stack error handler, it will be 
 182:ThreadX/common/src/tx_thread_initialize.c ****    called via this function pointer.  */
 183:ThreadX/common/src/tx_thread_initialize.c **** 
 184:ThreadX/common/src/tx_thread_initialize.c **** VOID            (*_tx_thread_application_stack_error_handler)(TX_THREAD *thread_ptr);
 185:ThreadX/common/src/tx_thread_initialize.c **** 
 186:ThreadX/common/src/tx_thread_initialize.c **** #endif
 187:ThreadX/common/src/tx_thread_initialize.c **** 
 188:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 189:ThreadX/common/src/tx_thread_initialize.c **** 
 190:ThreadX/common/src/tx_thread_initialize.c **** /* Define the total number of thread resumptions. Each time a thread enters the
 191:ThreadX/common/src/tx_thread_initialize.c ****    ready state this variable is incremented.  */
 192:ThreadX/common/src/tx_thread_initialize.c **** 
 193:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_performance_resume_count;
 194:ThreadX/common/src/tx_thread_initialize.c **** 
 195:ThreadX/common/src/tx_thread_initialize.c **** 
 196:ThreadX/common/src/tx_thread_initialize.c **** /* Define the total number of thread suspensions. Each time a thread enters a 
 197:ThreadX/common/src/tx_thread_initialize.c ****    suspended state this variable is incremented.  */
 198:ThreadX/common/src/tx_thread_initialize.c **** 
 199:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_performance_suspend_count;
 200:ThreadX/common/src/tx_thread_initialize.c **** 
 201:ThreadX/common/src/tx_thread_initialize.c **** 
 202:ThreadX/common/src/tx_thread_initialize.c **** /* Define the total number of solicited thread preemptions. Each time a thread is 
ARM GAS  /tmp/cceREi6Q.s 			page 5


 203:ThreadX/common/src/tx_thread_initialize.c ****    preempted by directly calling a ThreadX service, this variable is incremented.  */
 204:ThreadX/common/src/tx_thread_initialize.c **** 
 205:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_performance_solicited_preemption_count;
 206:ThreadX/common/src/tx_thread_initialize.c **** 
 207:ThreadX/common/src/tx_thread_initialize.c **** 
 208:ThreadX/common/src/tx_thread_initialize.c **** /* Define the total number of interrupt thread preemptions. Each time a thread is 
 209:ThreadX/common/src/tx_thread_initialize.c ****    preempted as a result of an ISR calling a ThreadX service, this variable is 
 210:ThreadX/common/src/tx_thread_initialize.c ****    incremented.  */
 211:ThreadX/common/src/tx_thread_initialize.c **** 
 212:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_performance_interrupt_preemption_count;
 213:ThreadX/common/src/tx_thread_initialize.c **** 
 214:ThreadX/common/src/tx_thread_initialize.c **** 
 215:ThreadX/common/src/tx_thread_initialize.c **** /* Define the total number of priority inversions. Each time a thread is blocked by
 216:ThreadX/common/src/tx_thread_initialize.c ****    a mutex owned by a lower-priority thread, this variable is incremented.  */
 217:ThreadX/common/src/tx_thread_initialize.c **** 
 218:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_performance_priority_inversion_count;
 219:ThreadX/common/src/tx_thread_initialize.c **** 
 220:ThreadX/common/src/tx_thread_initialize.c **** 
 221:ThreadX/common/src/tx_thread_initialize.c **** /* Define the total number of time-slices.  Each time a time-slice operation is 
 222:ThreadX/common/src/tx_thread_initialize.c ****    actually performed (another thread is setup for running) this variable is 
 223:ThreadX/common/src/tx_thread_initialize.c ****    incremented.  */
 224:ThreadX/common/src/tx_thread_initialize.c **** 
 225:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_performance_time_slice_count;
 226:ThreadX/common/src/tx_thread_initialize.c **** 
 227:ThreadX/common/src/tx_thread_initialize.c **** 
 228:ThreadX/common/src/tx_thread_initialize.c **** /* Define the total number of thread relinquish operations.  Each time a thread 
 229:ThreadX/common/src/tx_thread_initialize.c ****    relinquish operation is actually performed (another thread is setup for running)
 230:ThreadX/common/src/tx_thread_initialize.c ****    this variable is incremented.  */
 231:ThreadX/common/src/tx_thread_initialize.c **** 
 232:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_performance_relinquish_count;
 233:ThreadX/common/src/tx_thread_initialize.c **** 
 234:ThreadX/common/src/tx_thread_initialize.c **** 
 235:ThreadX/common/src/tx_thread_initialize.c **** /* Define the total number of thread timeouts. Each time a thread has a 
 236:ThreadX/common/src/tx_thread_initialize.c ****    timeout this variable is incremented.  */
 237:ThreadX/common/src/tx_thread_initialize.c **** 
 238:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_performance_timeout_count;
 239:ThreadX/common/src/tx_thread_initialize.c **** 
 240:ThreadX/common/src/tx_thread_initialize.c **** 
 241:ThreadX/common/src/tx_thread_initialize.c **** /* Define the total number of thread wait aborts. Each time a thread's suspension 
 242:ThreadX/common/src/tx_thread_initialize.c ****    is lifted by the tx_thread_wait_abort call this variable is incremented.  */
 243:ThreadX/common/src/tx_thread_initialize.c **** 
 244:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_performance_wait_abort_count;
 245:ThreadX/common/src/tx_thread_initialize.c **** 
 246:ThreadX/common/src/tx_thread_initialize.c **** 
 247:ThreadX/common/src/tx_thread_initialize.c **** /* Define the total number of idle system thread returns. Each time a thread returns to 
 248:ThreadX/common/src/tx_thread_initialize.c ****    an idle system (no other thread is ready to run) this variable is incremented.  */
 249:ThreadX/common/src/tx_thread_initialize.c **** 
 250:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_performance_idle_return_count;
 251:ThreadX/common/src/tx_thread_initialize.c **** 
 252:ThreadX/common/src/tx_thread_initialize.c **** 
 253:ThreadX/common/src/tx_thread_initialize.c **** /* Define the total number of non-idle system thread returns. Each time a thread returns to 
 254:ThreadX/common/src/tx_thread_initialize.c ****    a non-idle system (another thread is ready to run) this variable is incremented.  */
 255:ThreadX/common/src/tx_thread_initialize.c **** 
 256:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_performance_non_idle_return_count;
 257:ThreadX/common/src/tx_thread_initialize.c **** 
 258:ThreadX/common/src/tx_thread_initialize.c **** 
 259:ThreadX/common/src/tx_thread_initialize.c **** /* Define the last TX_THREAD_EXECUTE_LOG_SIZE threads scheduled in ThreadX. This 
ARM GAS  /tmp/cceREi6Q.s 			page 6


 260:ThreadX/common/src/tx_thread_initialize.c ****    is a circular list, where the index points to the oldest entry.  */
 261:ThreadX/common/src/tx_thread_initialize.c **** 
 262:ThreadX/common/src/tx_thread_initialize.c **** ULONG           _tx_thread_performance__execute_log_index;
 263:ThreadX/common/src/tx_thread_initialize.c **** TX_THREAD *     _tx_thread_performance_execute_log[TX_THREAD_EXECUTE_LOG_SIZE];
 264:ThreadX/common/src/tx_thread_initialize.c **** #endif
 265:ThreadX/common/src/tx_thread_initialize.c **** 
 266:ThreadX/common/src/tx_thread_initialize.c **** 
 267:ThreadX/common/src/tx_thread_initialize.c **** /* Define special string.  */
 268:ThreadX/common/src/tx_thread_initialize.c **** 
 269:ThreadX/common/src/tx_thread_initialize.c **** #ifndef TX_MISRA_ENABLE
 270:ThreadX/common/src/tx_thread_initialize.c **** const CHAR _tx_thread_special_string[] = 
 271:ThreadX/common/src/tx_thread_initialize.c ****   "G-ML-EL-ML-BL-DL-BL-GB-GL-M-D-DL-GZ-KH-EL-CM-NH-HA-GF-DD-JC-YZ-CT-AT-DW-USA-CA-SD-SDSU";
 272:ThreadX/common/src/tx_thread_initialize.c **** #endif
 273:ThreadX/common/src/tx_thread_initialize.c **** 
 274:ThreadX/common/src/tx_thread_initialize.c **** 
 275:ThreadX/common/src/tx_thread_initialize.c **** /**************************************************************************/
 276:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 277:ThreadX/common/src/tx_thread_initialize.c **** /*  FUNCTION                                               RELEASE        */
 278:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 279:ThreadX/common/src/tx_thread_initialize.c **** /*    _tx_thread_initialize                               PORTABLE C      */
 280:ThreadX/common/src/tx_thread_initialize.c **** /*                                                           6.1.9        */
 281:ThreadX/common/src/tx_thread_initialize.c **** /*  AUTHOR                                                                */
 282:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 283:ThreadX/common/src/tx_thread_initialize.c **** /*    William E. Lamie, Microsoft Corporation                             */
 284:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 285:ThreadX/common/src/tx_thread_initialize.c **** /*  DESCRIPTION                                                           */
 286:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 287:ThreadX/common/src/tx_thread_initialize.c **** /*    This function initializes the various control data structures for   */
 288:ThreadX/common/src/tx_thread_initialize.c **** /*    the thread control component.                                       */
 289:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 290:ThreadX/common/src/tx_thread_initialize.c **** /*  INPUT                                                                 */
 291:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 292:ThreadX/common/src/tx_thread_initialize.c **** /*    None                                                                */
 293:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 294:ThreadX/common/src/tx_thread_initialize.c **** /*  OUTPUT                                                                */
 295:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 296:ThreadX/common/src/tx_thread_initialize.c **** /*    None                                                                */
 297:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 298:ThreadX/common/src/tx_thread_initialize.c **** /*  CALLS                                                                 */
 299:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 300:ThreadX/common/src/tx_thread_initialize.c **** /*    None                                                                */
 301:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 302:ThreadX/common/src/tx_thread_initialize.c **** /*  CALLED BY                                                             */
 303:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 304:ThreadX/common/src/tx_thread_initialize.c **** /*    _tx_initialize_high_level         High level initialization         */
 305:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 306:ThreadX/common/src/tx_thread_initialize.c **** /*  RELEASE HISTORY                                                       */
 307:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 308:ThreadX/common/src/tx_thread_initialize.c **** /*    DATE              NAME                      DESCRIPTION             */
 309:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 310:ThreadX/common/src/tx_thread_initialize.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
 311:ThreadX/common/src/tx_thread_initialize.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
 312:ThreadX/common/src/tx_thread_initialize.c **** /*                                            resulting in version 6.1    */
 313:ThreadX/common/src/tx_thread_initialize.c **** /*  06-02-2021     Yuxin Zhou               Modified comment(s), added    */
 314:ThreadX/common/src/tx_thread_initialize.c **** /*                                            Execution Profile support,  */
 315:ThreadX/common/src/tx_thread_initialize.c **** /*                                            resulting in version 6.1.7  */
 316:ThreadX/common/src/tx_thread_initialize.c **** /*  10-15-2021     Yuxin Zhou               Modified comment(s), improved */
ARM GAS  /tmp/cceREi6Q.s 			page 7


 317:ThreadX/common/src/tx_thread_initialize.c **** /*                                            stack check error handling, */
 318:ThreadX/common/src/tx_thread_initialize.c **** /*                                            resulting in version 6.1.9  */   
 319:ThreadX/common/src/tx_thread_initialize.c **** /*                                                                        */
 320:ThreadX/common/src/tx_thread_initialize.c **** /**************************************************************************/
 321:ThreadX/common/src/tx_thread_initialize.c **** VOID  _tx_thread_initialize(VOID)
 322:ThreadX/common/src/tx_thread_initialize.c **** {
  28              		.loc 1 322 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
 323:ThreadX/common/src/tx_thread_initialize.c **** 
 324:ThreadX/common/src/tx_thread_initialize.c ****     /* Note: the system stack pointer and the system state variables are 
 325:ThreadX/common/src/tx_thread_initialize.c ****        initialized by the low and high-level initialization functions,
 326:ThreadX/common/src/tx_thread_initialize.c ****        respectively.  */
 327:ThreadX/common/src/tx_thread_initialize.c **** 
 328:ThreadX/common/src/tx_thread_initialize.c **** #ifndef TX_DISABLE_REDUNDANT_CLEARING
 329:ThreadX/common/src/tx_thread_initialize.c **** 
 330:ThreadX/common/src/tx_thread_initialize.c ****     /* Set current thread pointer to NULL.  */
 331:ThreadX/common/src/tx_thread_initialize.c ****     TX_THREAD_SET_CURRENT(TX_NULL)
  37              		.loc 1 331 0
  38 0002 0024     		movs	r4, #0
  39 0004 0E4B     		ldr	r3, .L3
  40 0006 1C60     		str	r4, [r3]
 332:ThreadX/common/src/tx_thread_initialize.c **** 
 333:ThreadX/common/src/tx_thread_initialize.c ****     /* Initialize the execute thread pointer to NULL.  */
 334:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_execute_ptr =  TX_NULL;
  41              		.loc 1 334 0
  42 0008 0E4B     		ldr	r3, .L3+4
  43 000a 1C60     		str	r4, [r3]
 335:ThreadX/common/src/tx_thread_initialize.c **** 
 336:ThreadX/common/src/tx_thread_initialize.c ****     /* Initialize the priority information.  */
 337:ThreadX/common/src/tx_thread_initialize.c ****     TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
  44              		.loc 1 337 0
  45 000c 0E4B     		ldr	r3, .L3+8
  46 000e 1C60     		str	r4, [r3]
 338:ThreadX/common/src/tx_thread_initialize.c **** 
 339:ThreadX/common/src/tx_thread_initialize.c **** #ifndef TX_DISABLE_PREEMPTION_THRESHOLD
 340:ThreadX/common/src/tx_thread_initialize.c ****     TX_MEMSET(&_tx_thread_preempted_maps[0], 0, (sizeof(_tx_thread_preempted_maps)));
  47              		.loc 1 340 0
  48 0010 0E4B     		ldr	r3, .L3+12
  49 0012 1C60     		str	r4, [r3]
 341:ThreadX/common/src/tx_thread_initialize.c **** #endif
 342:ThreadX/common/src/tx_thread_initialize.c **** #endif
 343:ThreadX/common/src/tx_thread_initialize.c **** 
 344:ThreadX/common/src/tx_thread_initialize.c ****     /* Setup the highest priority variable to the max, indicating no thread is currently
 345:ThreadX/common/src/tx_thread_initialize.c ****        ready.  */
 346:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
  50              		.loc 1 346 0
  51 0014 0E4B     		ldr	r3, .L3+16
  52 0016 2022     		movs	r2, #32
  53 0018 1A60     		str	r2, [r3]
 347:ThreadX/common/src/tx_thread_initialize.c **** 
ARM GAS  /tmp/cceREi6Q.s 			page 8


 348:ThreadX/common/src/tx_thread_initialize.c **** 
 349:ThreadX/common/src/tx_thread_initialize.c **** #ifndef TX_DISABLE_REDUNDANT_CLEARING
 350:ThreadX/common/src/tx_thread_initialize.c **** 
 351:ThreadX/common/src/tx_thread_initialize.c ****     /* Initialize the array of priority head pointers.  */
 352:ThreadX/common/src/tx_thread_initialize.c ****     TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
  54              		.loc 1 352 0
  55 001a 8022     		movs	r2, #128
  56 001c 2146     		mov	r1, r4
  57 001e 0D48     		ldr	r0, .L3+20
  58 0020 FFF7FEFF 		bl	memset
  59              	.LVL0:
 353:ThreadX/common/src/tx_thread_initialize.c **** 
 354:ThreadX/common/src/tx_thread_initialize.c ****     /* Initialize the head pointer of the created threads list and the
 355:ThreadX/common/src/tx_thread_initialize.c ****        number of threads created.  */
 356:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_created_ptr =        TX_NULL;
  60              		.loc 1 356 0
  61 0024 0C4B     		ldr	r3, .L3+24
  62 0026 1C60     		str	r4, [r3]
 357:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_created_count =      TX_EMPTY;
  63              		.loc 1 357 0
  64 0028 0C4B     		ldr	r3, .L3+28
  65 002a 1C60     		str	r4, [r3]
 358:ThreadX/common/src/tx_thread_initialize.c **** 
 359:ThreadX/common/src/tx_thread_initialize.c ****     /* Clear the global preempt disable variable.  */
 360:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_preempt_disable =    ((UINT) 0);
  66              		.loc 1 360 0
  67 002c 0C4B     		ldr	r3, .L3+32
  68 002e 1C60     		str	r4, [r3]
 361:ThreadX/common/src/tx_thread_initialize.c **** 
 362:ThreadX/common/src/tx_thread_initialize.c ****     /* Initialize the thread mutex release function pointer.  */
 363:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_mutex_release =      TX_NULL;
  69              		.loc 1 363 0
  70 0030 0C4B     		ldr	r3, .L3+36
  71 0032 1C60     		str	r4, [r3]
 364:ThreadX/common/src/tx_thread_initialize.c **** 
 365:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_ENABLE_STACK_CHECKING
 366:ThreadX/common/src/tx_thread_initialize.c **** 
 367:ThreadX/common/src/tx_thread_initialize.c ****     /* Clear application registered stack error handler.  */
 368:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_application_stack_error_handler =  TX_NULL;
 369:ThreadX/common/src/tx_thread_initialize.c **** #endif
 370:ThreadX/common/src/tx_thread_initialize.c **** 
 371:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 372:ThreadX/common/src/tx_thread_initialize.c **** 
 373:ThreadX/common/src/tx_thread_initialize.c ****     /* Clear performance counters.  */
 374:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_performance_resume_count =                ((ULONG) 0);
 375:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_performance_suspend_count =               ((ULONG) 0);
 376:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_performance_solicited_preemption_count =  ((ULONG) 0);
 377:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_performance_interrupt_preemption_count =  ((ULONG) 0);
 378:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_performance_priority_inversion_count =    ((ULONG) 0);
 379:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_performance_time_slice_count =            ((ULONG) 0);
 380:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_performance_relinquish_count =            ((ULONG) 0);
 381:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_performance_timeout_count =               ((ULONG) 0);
 382:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_performance_wait_abort_count =            ((ULONG) 0);
 383:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_performance_idle_return_count =           ((ULONG) 0);
 384:ThreadX/common/src/tx_thread_initialize.c ****     _tx_thread_performance_non_idle_return_count =       ((ULONG) 0);
 385:ThreadX/common/src/tx_thread_initialize.c **** 
 386:ThreadX/common/src/tx_thread_initialize.c ****     /* Initialize the execute thread log.  */
ARM GAS  /tmp/cceREi6Q.s 			page 9


 387:ThreadX/common/src/tx_thread_initialize.c ****     TX_MEMSET(&_tx_thread_performance_execute_log[0], 0, (sizeof(_tx_thread_performance_execute_log
 388:ThreadX/common/src/tx_thread_initialize.c **** #endif
 389:ThreadX/common/src/tx_thread_initialize.c **** #endif
 390:ThreadX/common/src/tx_thread_initialize.c **** 
 391:ThreadX/common/src/tx_thread_initialize.c ****     /* Setup the build options flag. This is used to identify how the ThreadX library was construct
 392:ThreadX/common/src/tx_thread_initialize.c ****     _tx_build_options =  _tx_build_options 
 393:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) (TX_MAX_PRIORITIES/32)) << 24) 
  72              		.loc 1 393 0
  73 0034 0C4A     		ldr	r2, .L3+40
  74 0036 1368     		ldr	r3, [r2]
  75 0038 43F08073 		orr	r3, r3, #16777216
 392:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) (TX_MAX_PRIORITIES/32)) << 24) 
  76              		.loc 1 392 0
  77 003c 1360     		str	r3, [r2]
 394:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_NOT_INTERRUPTABLE
 395:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 31)
 396:ThreadX/common/src/tx_thread_initialize.c **** #endif
 397:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_INLINE_THREAD_RESUME_SUSPEND
 398:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 30)
 399:ThreadX/common/src/tx_thread_initialize.c **** #endif
 400:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_TIMER_PROCESS_IN_ISR
 401:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 23)
 402:ThreadX/common/src/tx_thread_initialize.c **** #endif
 403:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_REACTIVATE_INLINE
 404:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 22)
 405:ThreadX/common/src/tx_thread_initialize.c **** #endif
 406:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_DISABLE_STACK_FILLING
 407:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 21)
 408:ThreadX/common/src/tx_thread_initialize.c **** #endif
 409:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_ENABLE_STACK_CHECKING
 410:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 20)
 411:ThreadX/common/src/tx_thread_initialize.c **** #endif
 412:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_DISABLE_PREEMPTION_THRESHOLD
 413:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 19)
 414:ThreadX/common/src/tx_thread_initialize.c **** #endif
 415:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_DISABLE_REDUNDANT_CLEARING
 416:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 18)
 417:ThreadX/common/src/tx_thread_initialize.c **** #endif
 418:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_DISABLE_NOTIFY_CALLBACKS
 419:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 17)
 420:ThreadX/common/src/tx_thread_initialize.c **** #endif
 421:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_BLOCK_POOL_ENABLE_PERFORMANCE_INFO
 422:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 16)
 423:ThreadX/common/src/tx_thread_initialize.c **** #endif
 424:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_BYTE_POOL_ENABLE_PERFORMANCE_INFO
 425:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 15)
 426:ThreadX/common/src/tx_thread_initialize.c **** #endif
 427:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_EVENT_FLAGS_ENABLE_PERFORMANCE_INFO
 428:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 14)
 429:ThreadX/common/src/tx_thread_initialize.c **** #endif
 430:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_MUTEX_ENABLE_PERFORMANCE_INFO
 431:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 13)
 432:ThreadX/common/src/tx_thread_initialize.c **** #endif
 433:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_QUEUE_ENABLE_PERFORMANCE_INFO
 434:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 12)
 435:ThreadX/common/src/tx_thread_initialize.c **** #endif
 436:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_SEMAPHORE_ENABLE_PERFORMANCE_INFO
ARM GAS  /tmp/cceREi6Q.s 			page 10


 437:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 11)
 438:ThreadX/common/src/tx_thread_initialize.c **** #endif
 439:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 440:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 10)
 441:ThreadX/common/src/tx_thread_initialize.c **** #endif
 442:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
 443:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 9)
 444:ThreadX/common/src/tx_thread_initialize.c **** #endif
 445:ThreadX/common/src/tx_thread_initialize.c **** #ifdef TX_ENABLE_EVENT_TRACE
 446:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 8)
 447:ThreadX/common/src/tx_thread_initialize.c **** #endif
 448:ThreadX/common/src/tx_thread_initialize.c **** #if defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE)
 449:ThreadX/common/src/tx_thread_initialize.c ****                             | (((ULONG) 1) << 7)
 450:ThreadX/common/src/tx_thread_initialize.c **** #endif
 451:ThreadX/common/src/tx_thread_initialize.c **** #if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
 452:ThreadX/common/src/tx_thread_initialize.c ****                             | TX_PORT_SPECIFIC_BUILD_OPTIONS
 453:ThreadX/common/src/tx_thread_initialize.c **** #endif
 454:ThreadX/common/src/tx_thread_initialize.c ****                             ;
 455:ThreadX/common/src/tx_thread_initialize.c **** }
  78              		.loc 1 455 0
  79 003e 10BD     		pop	{r4, pc}
  80              	.L4:
  81              		.align	2
  82              	.L3:
  83 0040 00000000 		.word	_tx_thread_current_ptr
  84 0044 00000000 		.word	_tx_thread_execute_ptr
  85 0048 00000000 		.word	_tx_thread_priority_maps
  86 004c 00000000 		.word	_tx_thread_preempted_maps
  87 0050 00000000 		.word	_tx_thread_highest_priority
  88 0054 00000000 		.word	_tx_thread_priority_list
  89 0058 00000000 		.word	_tx_thread_created_ptr
  90 005c 00000000 		.word	_tx_thread_created_count
  91 0060 00000000 		.word	_tx_thread_preempt_disable
  92 0064 00000000 		.word	_tx_thread_mutex_release
  93 0068 00000000 		.word	_tx_build_options
  94              		.cfi_endproc
  95              	.LFE8:
  97              		.global	_tx_thread_special_string
  98              		.comm	_tx_build_options,4,4
  99              		.comm	_tx_thread_mutex_release,4,4
 100              		.comm	_tx_thread_preempt_disable,4,4
 101              		.comm	_tx_thread_priority_list,128,4
 102              		.comm	_tx_thread_highest_priority,4,4
 103              		.comm	_tx_thread_preempted_maps,4,4
 104              		.comm	_tx_thread_priority_maps,4,4
 105              		.global	_tx_thread_system_state
 106              		.comm	_tx_thread_created_count,4,4
 107              		.comm	_tx_thread_created_ptr,4,4
 108              		.comm	_tx_thread_execute_ptr,4,4
 109              		.comm	_tx_thread_current_ptr,4,4
 110              		.comm	_tx_thread_system_stack_ptr,4,4
 111              		.global	_tx_version_id
 112              		.section	.data._tx_thread_system_state,"aw",%progbits
 113              		.align	2
 116              	_tx_thread_system_state:
 117 0000 F0F0F0F0 		.word	-252645136
 118              		.section	.data._tx_version_id,"aw",%progbits
ARM GAS  /tmp/cceREi6Q.s 			page 11


 119              		.align	2
 122              	_tx_version_id:
 123 0000 436F7079 		.ascii	"Copyright (c) Microsoft Corporation. All rights res"
 123      72696768 
 123      74202863 
 123      29204D69 
 123      63726F73 
 124 0033 65727665 		.ascii	"erved.  *  ThreadX Cortex-M4/GNU Version 6.1.9 *\000"
 124      642E2020 
 124      2A202054 
 124      68726561 
 124      64582043 
 125              		.section	.rodata._tx_thread_special_string,"a",%progbits
 126              		.align	2
 129              	_tx_thread_special_string:
 130 0000 472D4D4C 		.ascii	"G-ML-EL-ML-BL-DL-BL-GB-GL-M-D-DL-GZ-KH-EL-CM-NH-HA-"
 130      2D454C2D 
 130      4D4C2D42 
 130      4C2D444C 
 130      2D424C2D 
 131 0033 47462D44 		.ascii	"GF-DD-JC-YZ-CT-AT-DW-USA-CA-SD-SDSU\000"
 131      442D4A43 
 131      2D595A2D 
 131      43542D41 
 131      542D4457 
 132              		.text
 133              	.Letext0:
 134              		.file 2 "/usr/include/newlib/sys/lock.h"
 135              		.file 3 "/usr/include/newlib/sys/_types.h"
 136              		.file 4 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 137              		.file 5 "/usr/include/newlib/sys/reent.h"
 138              		.file 6 "/usr/include/newlib/stdlib.h"
 139              		.file 7 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
 140              		.file 8 "ThreadX/common/inc/tx_api.h"
 141              		.file 9 "ThreadX/common/inc/tx_initialize.h"
 142              		.file 10 "ThreadX/common/inc/tx_thread.h"
 143              		.file 11 "<built-in>"
ARM GAS  /tmp/cceREi6Q.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_thread_initialize.c
     /tmp/cceREi6Q.s:18     .text._tx_thread_initialize:0000000000000000 $t
     /tmp/cceREi6Q.s:25     .text._tx_thread_initialize:0000000000000000 _tx_thread_initialize
     /tmp/cceREi6Q.s:83     .text._tx_thread_initialize:0000000000000040 $d
                            *COM*:0000000000000004 _tx_thread_current_ptr
                            *COM*:0000000000000004 _tx_thread_execute_ptr
                            *COM*:0000000000000004 _tx_thread_priority_maps
                            *COM*:0000000000000004 _tx_thread_preempted_maps
                            *COM*:0000000000000004 _tx_thread_highest_priority
                            *COM*:0000000000000080 _tx_thread_priority_list
                            *COM*:0000000000000004 _tx_thread_created_ptr
                            *COM*:0000000000000004 _tx_thread_created_count
                            *COM*:0000000000000004 _tx_thread_preempt_disable
                            *COM*:0000000000000004 _tx_thread_mutex_release
                            *COM*:0000000000000004 _tx_build_options
     /tmp/cceREi6Q.s:129    .rodata._tx_thread_special_string:0000000000000000 _tx_thread_special_string
     /tmp/cceREi6Q.s:116    .data._tx_thread_system_state:0000000000000000 _tx_thread_system_state
                            *COM*:0000000000000004 _tx_thread_system_stack_ptr
     /tmp/cceREi6Q.s:122    .data._tx_version_id:0000000000000000 _tx_version_id
     /tmp/cceREi6Q.s:113    .data._tx_thread_system_state:0000000000000000 $d
     /tmp/cceREi6Q.s:119    .data._tx_version_id:0000000000000000 $d
     /tmp/cceREi6Q.s:126    .rodata._tx_thread_special_string:0000000000000000 $d

UNDEFINED SYMBOLS
memset
