ARM GAS  /tmp/ccUiOl77.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_block_allocate.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_block_allocate,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_block_allocate
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_block_allocate:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_block_allocate.c"
   1:ThreadX/common/src/tx_block_allocate.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
   3:ThreadX/common/src/tx_block_allocate.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
   5:ThreadX/common/src/tx_block_allocate.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_block_allocate.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_block_allocate.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_block_allocate.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  10:ThreadX/common/src/tx_block_allocate.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_block_allocate.c **** 
  12:ThreadX/common/src/tx_block_allocate.c **** 
  13:ThreadX/common/src/tx_block_allocate.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_block_allocate.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_block_allocate.c **** /**                                                                       */
  16:ThreadX/common/src/tx_block_allocate.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_block_allocate.c **** /**                                                                       */
  18:ThreadX/common/src/tx_block_allocate.c **** /**   Block Pool                                                          */
  19:ThreadX/common/src/tx_block_allocate.c **** /**                                                                       */
  20:ThreadX/common/src/tx_block_allocate.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_block_allocate.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_block_allocate.c **** 
  23:ThreadX/common/src/tx_block_allocate.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_block_allocate.c **** 
  25:ThreadX/common/src/tx_block_allocate.c **** 
  26:ThreadX/common/src/tx_block_allocate.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_block_allocate.c **** 
  28:ThreadX/common/src/tx_block_allocate.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_ENABLE_EVENT_TRACE
  30:ThreadX/common/src/tx_block_allocate.c **** #include "tx_trace.h"
  31:ThreadX/common/src/tx_block_allocate.c **** #endif
ARM GAS  /tmp/ccUiOl77.s 			page 2


  32:ThreadX/common/src/tx_block_allocate.c **** #include "tx_thread.h"
  33:ThreadX/common/src/tx_block_allocate.c **** #include "tx_block_pool.h"
  34:ThreadX/common/src/tx_block_allocate.c **** 
  35:ThreadX/common/src/tx_block_allocate.c **** 
  36:ThreadX/common/src/tx_block_allocate.c **** /**************************************************************************/
  37:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  38:ThreadX/common/src/tx_block_allocate.c **** /*  FUNCTION                                               RELEASE        */
  39:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  40:ThreadX/common/src/tx_block_allocate.c **** /*    _tx_block_allocate                                  PORTABLE C      */
  41:ThreadX/common/src/tx_block_allocate.c **** /*                                                           6.1          */
  42:ThreadX/common/src/tx_block_allocate.c **** /*  AUTHOR                                                                */
  43:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  44:ThreadX/common/src/tx_block_allocate.c **** /*    William E. Lamie, Microsoft Corporation                             */
  45:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  46:ThreadX/common/src/tx_block_allocate.c **** /*  DESCRIPTION                                                           */
  47:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  48:ThreadX/common/src/tx_block_allocate.c **** /*    This function allocates a block from the specified memory block     */
  49:ThreadX/common/src/tx_block_allocate.c **** /*    pool.                                                               */
  50:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  51:ThreadX/common/src/tx_block_allocate.c **** /*  INPUT                                                                 */
  52:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  53:ThreadX/common/src/tx_block_allocate.c **** /*    pool_ptr                          Pointer to pool control block     */
  54:ThreadX/common/src/tx_block_allocate.c **** /*    block_ptr                         Pointer to place allocated block  */
  55:ThreadX/common/src/tx_block_allocate.c **** /*                                        pointer                         */
  56:ThreadX/common/src/tx_block_allocate.c **** /*    wait_option                       Suspension option                 */
  57:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  58:ThreadX/common/src/tx_block_allocate.c **** /*  OUTPUT                                                                */
  59:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  60:ThreadX/common/src/tx_block_allocate.c **** /*    status                            Completion status                 */
  61:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  62:ThreadX/common/src/tx_block_allocate.c **** /*  CALLS                                                                 */
  63:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  64:ThreadX/common/src/tx_block_allocate.c **** /*    _tx_thread_system_suspend         Suspend thread                    */
  65:ThreadX/common/src/tx_block_allocate.c **** /*    _tx_thread_system_ni_suspend      Non-interruptable suspend thread  */
  66:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  67:ThreadX/common/src/tx_block_allocate.c **** /*  CALLED BY                                                             */
  68:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  69:ThreadX/common/src/tx_block_allocate.c **** /*    Application Code                                                    */
  70:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  71:ThreadX/common/src/tx_block_allocate.c **** /*  RELEASE HISTORY                                                       */
  72:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  73:ThreadX/common/src/tx_block_allocate.c **** /*    DATE              NAME                      DESCRIPTION             */
  74:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  75:ThreadX/common/src/tx_block_allocate.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  76:ThreadX/common/src/tx_block_allocate.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  77:ThreadX/common/src/tx_block_allocate.c **** /*                                            resulting in version 6.1    */
  78:ThreadX/common/src/tx_block_allocate.c **** /*                                                                        */
  79:ThreadX/common/src/tx_block_allocate.c **** /**************************************************************************/
  80:ThreadX/common/src/tx_block_allocate.c **** UINT  _tx_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
  81:ThreadX/common/src/tx_block_allocate.c **** {
  28              		.loc 1 81 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              	.LCFI0:
ARM GAS  /tmp/ccUiOl77.s 			page 3


  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 3, -16
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40              	.LBB16:
  41              	.LBB17:
  42              	.LBB18:
  43              	.LBB19:
  44              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
ARM GAS  /tmp/ccUiOl77.s 			page 4


  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccUiOl77.s 			page 5


 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccUiOl77.s 			page 6


 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccUiOl77.s 			page 7


 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
ARM GAS  /tmp/ccUiOl77.s 			page 8


 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
ARM GAS  /tmp/ccUiOl77.s 			page 9


 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
ARM GAS  /tmp/ccUiOl77.s 			page 10


 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
ARM GAS  /tmp/ccUiOl77.s 			page 11


 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/ccUiOl77.s 			page 12


 504:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  45              		.loc 2 539 0
  46              		.syntax unified
  47              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  48 0002 EFF31085 		MRS  r5, PRIMASK 
  49              	@ 0 "" 2
  50              		.thumb
  51              		.syntax unified
  52              	.LBE19:
  53              	.LBE18:
 540:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
ARM GAS  /tmp/ccUiOl77.s 			page 13


 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
 567:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
 569:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
 571:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  54              		.loc 2 575 0
  55              		.syntax unified
  56              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  57 0006 72B6     		CPSID i
  58              	@ 0 "" 2
  59              		.thumb
  60              		.syntax unified
  61              	.LBE17:
  62              	.LBE16:
  82:ThreadX/common/src/tx_block_allocate.c **** 
  83:ThreadX/common/src/tx_block_allocate.c **** TX_INTERRUPT_SAVE_AREA
  84:ThreadX/common/src/tx_block_allocate.c **** 
  85:ThreadX/common/src/tx_block_allocate.c **** UINT                        status;
  86:ThreadX/common/src/tx_block_allocate.c **** TX_THREAD                   *thread_ptr;
  87:ThreadX/common/src/tx_block_allocate.c **** UCHAR                       *work_ptr;
  88:ThreadX/common/src/tx_block_allocate.c **** UCHAR                       *temp_ptr;
  89:ThreadX/common/src/tx_block_allocate.c **** UCHAR                       **next_block_ptr;
  90:ThreadX/common/src/tx_block_allocate.c **** UCHAR                       **return_ptr;
  91:ThreadX/common/src/tx_block_allocate.c **** UINT                        suspended_count;
  92:ThreadX/common/src/tx_block_allocate.c **** TX_THREAD                   *next_thread;
  93:ThreadX/common/src/tx_block_allocate.c **** TX_THREAD                   *previous_thread;
  94:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_ENABLE_EVENT_TRACE
  95:ThreadX/common/src/tx_block_allocate.c **** TX_TRACE_BUFFER_ENTRY       *entry_ptr;
  96:ThreadX/common/src/tx_block_allocate.c **** ULONG                       time_stamp =  ((ULONG) 0);
  97:ThreadX/common/src/tx_block_allocate.c **** #endif
  98:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_ENABLE_EVENT_LOGGING
  99:ThreadX/common/src/tx_block_allocate.c **** UCHAR                       *log_entry_ptr;
 100:ThreadX/common/src/tx_block_allocate.c **** ULONG                       upper_tbu;
 101:ThreadX/common/src/tx_block_allocate.c **** ULONG                       lower_tbu;
 102:ThreadX/common/src/tx_block_allocate.c **** #endif
 103:ThreadX/common/src/tx_block_allocate.c **** 
 104:ThreadX/common/src/tx_block_allocate.c **** 
 105:ThreadX/common/src/tx_block_allocate.c ****     /* Disable interrupts to get a block from the pool.  */
ARM GAS  /tmp/ccUiOl77.s 			page 14


 106:ThreadX/common/src/tx_block_allocate.c ****     TX_DISABLE
 107:ThreadX/common/src/tx_block_allocate.c **** 
 108:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_BLOCK_POOL_ENABLE_PERFORMANCE_INFO
 109:ThreadX/common/src/tx_block_allocate.c **** 
 110:ThreadX/common/src/tx_block_allocate.c ****     /* Increment the total allocations counter.  */
 111:ThreadX/common/src/tx_block_allocate.c ****     _tx_block_pool_performance_allocate_count++;
 112:ThreadX/common/src/tx_block_allocate.c **** 
 113:ThreadX/common/src/tx_block_allocate.c ****     /* Increment the number of allocations on this pool.  */
 114:ThreadX/common/src/tx_block_allocate.c ****     pool_ptr -> tx_block_pool_performance_allocate_count++;
 115:ThreadX/common/src/tx_block_allocate.c **** #endif
 116:ThreadX/common/src/tx_block_allocate.c **** 
 117:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_ENABLE_EVENT_TRACE
 118:ThreadX/common/src/tx_block_allocate.c **** 
 119:ThreadX/common/src/tx_block_allocate.c ****     /* If trace is enabled, save the current event pointer.  */
 120:ThreadX/common/src/tx_block_allocate.c ****     entry_ptr =  _tx_trace_buffer_current_ptr;
 121:ThreadX/common/src/tx_block_allocate.c **** 
 122:ThreadX/common/src/tx_block_allocate.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 123:ThreadX/common/src/tx_block_allocate.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_BLOCK_ALLOCATE, pool_ptr, 0, wait_option, pool_ptr -> tx_block
 124:ThreadX/common/src/tx_block_allocate.c **** 
 125:ThreadX/common/src/tx_block_allocate.c ****     /* Save the time stamp for later comparison to verify that
 126:ThreadX/common/src/tx_block_allocate.c ****        the event hasn't been overwritten by the time the allocate
 127:ThreadX/common/src/tx_block_allocate.c ****        call succeeds.  */
 128:ThreadX/common/src/tx_block_allocate.c ****     if (entry_ptr != TX_NULL)
 129:ThreadX/common/src/tx_block_allocate.c ****     {
 130:ThreadX/common/src/tx_block_allocate.c **** 
 131:ThreadX/common/src/tx_block_allocate.c ****         time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 132:ThreadX/common/src/tx_block_allocate.c ****     }
 133:ThreadX/common/src/tx_block_allocate.c **** #endif
 134:ThreadX/common/src/tx_block_allocate.c **** 
 135:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_ENABLE_EVENT_LOGGING
 136:ThreadX/common/src/tx_block_allocate.c ****     log_entry_ptr =  *(UCHAR **) _tx_el_current_event;
 137:ThreadX/common/src/tx_block_allocate.c **** 
 138:ThreadX/common/src/tx_block_allocate.c ****     /* Log this kernel call.  */
 139:ThreadX/common/src/tx_block_allocate.c ****     TX_EL_BLOCK_ALLOCATE_INSERT
 140:ThreadX/common/src/tx_block_allocate.c **** 
 141:ThreadX/common/src/tx_block_allocate.c ****     /* Store -1 in the third event slot.  */
 142:ThreadX/common/src/tx_block_allocate.c ****     *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_3_OFFSET)) =  (ULONG) -1;
 143:ThreadX/common/src/tx_block_allocate.c **** 
 144:ThreadX/common/src/tx_block_allocate.c ****     /* Save the time stamp for later comparison to verify that
 145:ThreadX/common/src/tx_block_allocate.c ****        the event hasn't been overwritten by the time the allocate
 146:ThreadX/common/src/tx_block_allocate.c ****        call succeeds.  */
 147:ThreadX/common/src/tx_block_allocate.c ****     lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
 148:ThreadX/common/src/tx_block_allocate.c ****     upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
 149:ThreadX/common/src/tx_block_allocate.c **** #endif
 150:ThreadX/common/src/tx_block_allocate.c **** 
 151:ThreadX/common/src/tx_block_allocate.c ****     /* Determine if there is an available block.  */
 152:ThreadX/common/src/tx_block_allocate.c ****     if (pool_ptr -> tx_block_pool_available != ((UINT) 0))
  63              		.loc 1 152 0
  64 0008 8368     		ldr	r3, [r0, #8]
  65 000a 002B     		cmp	r3, #0
  66 000c 2AD1     		bne	.L9
  67              	.LVL1:
 153:ThreadX/common/src/tx_block_allocate.c ****     {
 154:ThreadX/common/src/tx_block_allocate.c **** 
 155:ThreadX/common/src/tx_block_allocate.c ****         /* Yes, a block is available.  Decrement the available count.  */
 156:ThreadX/common/src/tx_block_allocate.c ****         pool_ptr -> tx_block_pool_available--;
 157:ThreadX/common/src/tx_block_allocate.c **** 
ARM GAS  /tmp/ccUiOl77.s 			page 15


 158:ThreadX/common/src/tx_block_allocate.c ****         /* Pickup the current block pointer.  */
 159:ThreadX/common/src/tx_block_allocate.c ****         work_ptr =  pool_ptr -> tx_block_pool_available_list;
 160:ThreadX/common/src/tx_block_allocate.c **** 
 161:ThreadX/common/src/tx_block_allocate.c ****         /* Return the first available block to the caller.  */
 162:ThreadX/common/src/tx_block_allocate.c ****         temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 163:ThreadX/common/src/tx_block_allocate.c ****         return_ptr =  TX_INDIRECT_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 164:ThreadX/common/src/tx_block_allocate.c ****         *return_ptr =  temp_ptr;
 165:ThreadX/common/src/tx_block_allocate.c **** 
 166:ThreadX/common/src/tx_block_allocate.c ****         /* Modify the available list to point at the next block in the pool. */
 167:ThreadX/common/src/tx_block_allocate.c ****         next_block_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 168:ThreadX/common/src/tx_block_allocate.c ****         pool_ptr -> tx_block_pool_available_list =  *next_block_ptr;
 169:ThreadX/common/src/tx_block_allocate.c **** 
 170:ThreadX/common/src/tx_block_allocate.c ****         /* Save the pool's address in the block for when it is released!  */
 171:ThreadX/common/src/tx_block_allocate.c ****         temp_ptr =  TX_BLOCK_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 172:ThreadX/common/src/tx_block_allocate.c ****         *next_block_ptr =  temp_ptr;
 173:ThreadX/common/src/tx_block_allocate.c **** 
 174:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_ENABLE_EVENT_TRACE
 175:ThreadX/common/src/tx_block_allocate.c **** 
 176:ThreadX/common/src/tx_block_allocate.c ****         /* Check that the event time stamp is unchanged.  A different
 177:ThreadX/common/src/tx_block_allocate.c ****            timestamp means that a later event wrote over the byte
 178:ThreadX/common/src/tx_block_allocate.c ****            allocate event.  In that case, do nothing here.  */
 179:ThreadX/common/src/tx_block_allocate.c ****         if (entry_ptr != TX_NULL)
 180:ThreadX/common/src/tx_block_allocate.c ****         {
 181:ThreadX/common/src/tx_block_allocate.c **** 
 182:ThreadX/common/src/tx_block_allocate.c ****             /* Is the time stamp the same?  */
 183:ThreadX/common/src/tx_block_allocate.c ****             if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 184:ThreadX/common/src/tx_block_allocate.c ****             {
 185:ThreadX/common/src/tx_block_allocate.c **** 
 186:ThreadX/common/src/tx_block_allocate.c ****                 /* Timestamp is the same, update the entry with the address.  */
 187:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_MISRA_ENABLE
 188:ThreadX/common/src/tx_block_allocate.c ****                 entry_ptr -> tx_trace_buffer_entry_info_2 =  TX_POINTER_TO_ULONG_CONVERT(*block_ptr
 189:ThreadX/common/src/tx_block_allocate.c **** #else
 190:ThreadX/common/src/tx_block_allocate.c ****                 entry_ptr -> tx_trace_buffer_entry_information_field_2 =  TX_POINTER_TO_ULONG_CONVE
 191:ThreadX/common/src/tx_block_allocate.c **** #endif
 192:ThreadX/common/src/tx_block_allocate.c ****             }
 193:ThreadX/common/src/tx_block_allocate.c ****         }
 194:ThreadX/common/src/tx_block_allocate.c **** #endif
 195:ThreadX/common/src/tx_block_allocate.c **** 
 196:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_ENABLE_EVENT_LOGGING
 197:ThreadX/common/src/tx_block_allocate.c ****         /* Store the address of the allocated block.  */
 198:ThreadX/common/src/tx_block_allocate.c ****         *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_3_OFFSET)) =  (ULONG) *block_ptr;
 199:ThreadX/common/src/tx_block_allocate.c **** #endif
 200:ThreadX/common/src/tx_block_allocate.c **** 
 201:ThreadX/common/src/tx_block_allocate.c ****         /* Set status to success.  */
 202:ThreadX/common/src/tx_block_allocate.c ****         status =  TX_SUCCESS;
 203:ThreadX/common/src/tx_block_allocate.c **** 
 204:ThreadX/common/src/tx_block_allocate.c ****         /* Restore interrupts.  */
 205:ThreadX/common/src/tx_block_allocate.c ****         TX_RESTORE
 206:ThreadX/common/src/tx_block_allocate.c ****     }
 207:ThreadX/common/src/tx_block_allocate.c ****     else
 208:ThreadX/common/src/tx_block_allocate.c ****     {
 209:ThreadX/common/src/tx_block_allocate.c **** 
 210:ThreadX/common/src/tx_block_allocate.c ****         /* Default the return pointer to NULL.  */
 211:ThreadX/common/src/tx_block_allocate.c ****         return_ptr =   TX_INDIRECT_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 212:ThreadX/common/src/tx_block_allocate.c ****         *return_ptr =  TX_NULL;
  68              		.loc 1 212 0
  69 000e 0023     		movs	r3, #0
ARM GAS  /tmp/ccUiOl77.s 			page 16


  70 0010 0B60     		str	r3, [r1]
 213:ThreadX/common/src/tx_block_allocate.c **** 
 214:ThreadX/common/src/tx_block_allocate.c ****         /* Determine if the request specifies suspension.  */
 215:ThreadX/common/src/tx_block_allocate.c ****         if (wait_option != TX_NO_WAIT)
  71              		.loc 1 215 0
  72 0012 002A     		cmp	r2, #0
  73 0014 3DD0     		beq	.L4
 216:ThreadX/common/src/tx_block_allocate.c ****         {
 217:ThreadX/common/src/tx_block_allocate.c **** 
 218:ThreadX/common/src/tx_block_allocate.c ****             /* Determine if the preempt disable flag is non-zero.  */
 219:ThreadX/common/src/tx_block_allocate.c ****             if (_tx_thread_preempt_disable != ((UINT) 0))
  74              		.loc 1 219 0
  75 0016 214B     		ldr	r3, .L11
  76 0018 1B68     		ldr	r3, [r3]
  77 001a 002B     		cmp	r3, #0
  78 001c 2ED1     		bne	.L10
 220:ThreadX/common/src/tx_block_allocate.c ****             {
 221:ThreadX/common/src/tx_block_allocate.c **** 
 222:ThreadX/common/src/tx_block_allocate.c ****                 /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
 223:ThreadX/common/src/tx_block_allocate.c ****                 status =  TX_NO_MEMORY;
 224:ThreadX/common/src/tx_block_allocate.c **** 
 225:ThreadX/common/src/tx_block_allocate.c ****                 /* Restore interrupts.  */
 226:ThreadX/common/src/tx_block_allocate.c ****                 TX_RESTORE
 227:ThreadX/common/src/tx_block_allocate.c ****             }
 228:ThreadX/common/src/tx_block_allocate.c ****             else
 229:ThreadX/common/src/tx_block_allocate.c ****             {
 230:ThreadX/common/src/tx_block_allocate.c **** 
 231:ThreadX/common/src/tx_block_allocate.c ****                 /* Prepare for suspension of this thread.  */
 232:ThreadX/common/src/tx_block_allocate.c **** 
 233:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_BLOCK_POOL_ENABLE_PERFORMANCE_INFO
 234:ThreadX/common/src/tx_block_allocate.c **** 
 235:ThreadX/common/src/tx_block_allocate.c ****                 /* Increment the total suspensions counter.  */
 236:ThreadX/common/src/tx_block_allocate.c ****                 _tx_block_pool_performance_suspension_count++;
 237:ThreadX/common/src/tx_block_allocate.c **** 
 238:ThreadX/common/src/tx_block_allocate.c ****                 /* Increment the number of suspensions on this pool.  */
 239:ThreadX/common/src/tx_block_allocate.c ****                 pool_ptr -> tx_block_pool_performance_suspension_count++;
 240:ThreadX/common/src/tx_block_allocate.c **** #endif
 241:ThreadX/common/src/tx_block_allocate.c **** 
 242:ThreadX/common/src/tx_block_allocate.c ****                 /* Pickup thread pointer.  */
 243:ThreadX/common/src/tx_block_allocate.c ****                 TX_THREAD_GET_CURRENT(thread_ptr)
  79              		.loc 1 243 0
  80 001e 204B     		ldr	r3, .L11+4
  81 0020 1C68     		ldr	r4, [r3]
  82              	.LVL2:
 244:ThreadX/common/src/tx_block_allocate.c **** 
 245:ThreadX/common/src/tx_block_allocate.c ****                 /* Setup cleanup routine pointer.  */
 246:ThreadX/common/src/tx_block_allocate.c ****                 thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_block_pool_cleanup);
  83              		.loc 1 246 0
  84 0022 204B     		ldr	r3, .L11+8
  85 0024 A366     		str	r3, [r4, #104]
 247:ThreadX/common/src/tx_block_allocate.c **** 
 248:ThreadX/common/src/tx_block_allocate.c ****                 /* Setup cleanup information, i.e. this pool control
 249:ThreadX/common/src/tx_block_allocate.c ****                    block.  */
 250:ThreadX/common/src/tx_block_allocate.c ****                 thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
  86              		.loc 1 250 0
  87 0026 E066     		str	r0, [r4, #108]
 251:ThreadX/common/src/tx_block_allocate.c **** 
ARM GAS  /tmp/ccUiOl77.s 			page 17


 252:ThreadX/common/src/tx_block_allocate.c ****                 /* Save the return block pointer address as well.  */
 253:ThreadX/common/src/tx_block_allocate.c ****                 thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) block_ptr;
  88              		.loc 1 253 0
  89 0028 E167     		str	r1, [r4, #124]
 254:ThreadX/common/src/tx_block_allocate.c **** 
 255:ThreadX/common/src/tx_block_allocate.c **** #ifndef TX_NOT_INTERRUPTABLE
 256:ThreadX/common/src/tx_block_allocate.c **** 
 257:ThreadX/common/src/tx_block_allocate.c ****                 /* Increment the suspension sequence number, which is used to identify
 258:ThreadX/common/src/tx_block_allocate.c ****                    this suspension event.  */
 259:ThreadX/common/src/tx_block_allocate.c ****                 thread_ptr -> tx_thread_suspension_sequence++;
  90              		.loc 1 259 0
  91 002a D4F8B030 		ldr	r3, [r4, #176]
  92 002e 0133     		adds	r3, r3, #1
  93 0030 C4F8B030 		str	r3, [r4, #176]
 260:ThreadX/common/src/tx_block_allocate.c **** #endif
 261:ThreadX/common/src/tx_block_allocate.c **** 
 262:ThreadX/common/src/tx_block_allocate.c ****                 /* Pickup the number of suspended threads.  */
 263:ThreadX/common/src/tx_block_allocate.c ****                 suspended_count =  (pool_ptr -> tx_block_pool_suspended_count);
  94              		.loc 1 263 0
  95 0034 436A     		ldr	r3, [r0, #36]
  96              	.LVL3:
 264:ThreadX/common/src/tx_block_allocate.c **** 
 265:ThreadX/common/src/tx_block_allocate.c ****                 /* Increment the number of suspended threads.  */
 266:ThreadX/common/src/tx_block_allocate.c ****                 (pool_ptr -> tx_block_pool_suspended_count)++;
  97              		.loc 1 266 0
  98 0036 591C     		adds	r1, r3, #1
  99              	.LVL4:
 100 0038 4162     		str	r1, [r0, #36]
 101              	.LVL5:
 267:ThreadX/common/src/tx_block_allocate.c **** 
 268:ThreadX/common/src/tx_block_allocate.c ****                 /* Setup suspension list.  */
 269:ThreadX/common/src/tx_block_allocate.c ****                 if (suspended_count == TX_NO_SUSPENSIONS)
 102              		.loc 1 269 0
 103 003a 1BBB     		cbnz	r3, .L6
 270:ThreadX/common/src/tx_block_allocate.c ****                 {
 271:ThreadX/common/src/tx_block_allocate.c **** 
 272:ThreadX/common/src/tx_block_allocate.c ****                     /* No other threads are suspended.  Setup the head pointer and
 273:ThreadX/common/src/tx_block_allocate.c ****                        just setup this threads pointers to itself.  */
 274:ThreadX/common/src/tx_block_allocate.c ****                     pool_ptr -> tx_block_pool_suspension_list =     thread_ptr;
 104              		.loc 1 274 0
 105 003c 0462     		str	r4, [r0, #32]
 275:ThreadX/common/src/tx_block_allocate.c ****                     thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 106              		.loc 1 275 0
 107 003e 2467     		str	r4, [r4, #112]
 276:ThreadX/common/src/tx_block_allocate.c ****                     thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 108              		.loc 1 276 0
 109 0040 6467     		str	r4, [r4, #116]
 110              	.LVL6:
 111              	.L7:
 277:ThreadX/common/src/tx_block_allocate.c ****                 }
 278:ThreadX/common/src/tx_block_allocate.c ****                 else
 279:ThreadX/common/src/tx_block_allocate.c ****                 {
 280:ThreadX/common/src/tx_block_allocate.c **** 
 281:ThreadX/common/src/tx_block_allocate.c ****                     /* This list is not NULL, add current thread to the end. */
 282:ThreadX/common/src/tx_block_allocate.c ****                     next_thread =                                   pool_ptr -> tx_block_pool_suspe
 283:ThreadX/common/src/tx_block_allocate.c ****                     thread_ptr -> tx_thread_suspended_next =        next_thread;
 284:ThreadX/common/src/tx_block_allocate.c ****                     previous_thread =                               next_thread -> tx_thread_suspen
ARM GAS  /tmp/ccUiOl77.s 			page 18


 285:ThreadX/common/src/tx_block_allocate.c ****                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 286:ThreadX/common/src/tx_block_allocate.c ****                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
 287:ThreadX/common/src/tx_block_allocate.c ****                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
 288:ThreadX/common/src/tx_block_allocate.c ****                 }
 289:ThreadX/common/src/tx_block_allocate.c **** 
 290:ThreadX/common/src/tx_block_allocate.c ****                 /* Set the state to suspended.  */
 291:ThreadX/common/src/tx_block_allocate.c ****                 thread_ptr -> tx_thread_state =       TX_BLOCK_MEMORY;
 112              		.loc 1 291 0
 113 0042 0823     		movs	r3, #8
 114 0044 2363     		str	r3, [r4, #48]
 292:ThreadX/common/src/tx_block_allocate.c **** 
 293:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_NOT_INTERRUPTABLE
 294:ThreadX/common/src/tx_block_allocate.c **** 
 295:ThreadX/common/src/tx_block_allocate.c ****                 /* Call actual non-interruptable thread suspension routine.  */
 296:ThreadX/common/src/tx_block_allocate.c ****                 _tx_thread_system_ni_suspend(thread_ptr, wait_option);
 297:ThreadX/common/src/tx_block_allocate.c **** 
 298:ThreadX/common/src/tx_block_allocate.c ****                 /* Restore interrupts.  */
 299:ThreadX/common/src/tx_block_allocate.c ****                 TX_RESTORE
 300:ThreadX/common/src/tx_block_allocate.c **** #else
 301:ThreadX/common/src/tx_block_allocate.c **** 
 302:ThreadX/common/src/tx_block_allocate.c ****                 /* Set the suspending flag.  */
 303:ThreadX/common/src/tx_block_allocate.c ****                 thread_ptr -> tx_thread_suspending =  TX_TRUE;
 115              		.loc 1 303 0
 116 0046 0123     		movs	r3, #1
 117 0048 A363     		str	r3, [r4, #56]
 304:ThreadX/common/src/tx_block_allocate.c **** 
 305:ThreadX/common/src/tx_block_allocate.c ****                 /* Setup the timeout period.  */
 306:ThreadX/common/src/tx_block_allocate.c ****                 thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 118              		.loc 1 306 0
 119 004a E264     		str	r2, [r4, #76]
 307:ThreadX/common/src/tx_block_allocate.c **** 
 308:ThreadX/common/src/tx_block_allocate.c ****                 /* Temporarily disable preemption.  */
 309:ThreadX/common/src/tx_block_allocate.c ****                 _tx_thread_preempt_disable++;
 120              		.loc 1 309 0
 121 004c 134A     		ldr	r2, .L11
 122              	.LVL7:
 123 004e 1368     		ldr	r3, [r2]
 124 0050 0133     		adds	r3, r3, #1
 125 0052 1360     		str	r3, [r2]
 126              	.LVL8:
 127              	.LBB20:
 128              	.LBB21:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 129              		.loc 2 562 0
 130              		.syntax unified
 131              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 132 0054 85F31088 		MSR  PRIMASK,r5
 133              	@ 0 "" 2
 134              	.LVL9:
 135              		.thumb
 136              		.syntax unified
 137              	.LBE21:
 138              	.LBE20:
 310:ThreadX/common/src/tx_block_allocate.c **** 
 311:ThreadX/common/src/tx_block_allocate.c ****                 /* Restore interrupts.  */
 312:ThreadX/common/src/tx_block_allocate.c ****                 TX_RESTORE
 313:ThreadX/common/src/tx_block_allocate.c **** 
ARM GAS  /tmp/ccUiOl77.s 			page 19


 314:ThreadX/common/src/tx_block_allocate.c ****                 /* Call actual thread suspension routine.  */
 315:ThreadX/common/src/tx_block_allocate.c ****                 _tx_thread_system_suspend(thread_ptr);
 139              		.loc 1 315 0
 140 0058 2046     		mov	r0, r4
 141              	.LVL10:
 142 005a FFF7FEFF 		bl	_tx_thread_system_suspend
 143              	.LVL11:
 316:ThreadX/common/src/tx_block_allocate.c **** #endif
 317:ThreadX/common/src/tx_block_allocate.c **** 
 318:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_ENABLE_EVENT_TRACE
 319:ThreadX/common/src/tx_block_allocate.c **** 
 320:ThreadX/common/src/tx_block_allocate.c ****                 /* Check that the event time stamp is unchanged.  A different
 321:ThreadX/common/src/tx_block_allocate.c ****                    timestamp means that a later event wrote over the byte
 322:ThreadX/common/src/tx_block_allocate.c ****                    allocate event.  In that case, do nothing here.  */
 323:ThreadX/common/src/tx_block_allocate.c ****                 if (entry_ptr != TX_NULL)
 324:ThreadX/common/src/tx_block_allocate.c ****                 {
 325:ThreadX/common/src/tx_block_allocate.c **** 
 326:ThreadX/common/src/tx_block_allocate.c ****                     /* Is the time-stamp the same?  */
 327:ThreadX/common/src/tx_block_allocate.c ****                     if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 328:ThreadX/common/src/tx_block_allocate.c ****                     {
 329:ThreadX/common/src/tx_block_allocate.c **** 
 330:ThreadX/common/src/tx_block_allocate.c ****                         /* Timestamp is the same, update the entry with the address.  */
 331:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_MISRA_ENABLE
 332:ThreadX/common/src/tx_block_allocate.c ****                         entry_ptr -> tx_trace_buffer_entry_info_2 =  TX_POINTER_TO_ULONG_CONVERT(*b
 333:ThreadX/common/src/tx_block_allocate.c **** #else
 334:ThreadX/common/src/tx_block_allocate.c ****                         entry_ptr -> tx_trace_buffer_entry_information_field_2 =  TX_POINTER_TO_ULO
 335:ThreadX/common/src/tx_block_allocate.c **** #endif
 336:ThreadX/common/src/tx_block_allocate.c ****                     }
 337:ThreadX/common/src/tx_block_allocate.c ****                 }
 338:ThreadX/common/src/tx_block_allocate.c **** #endif
 339:ThreadX/common/src/tx_block_allocate.c **** 
 340:ThreadX/common/src/tx_block_allocate.c **** #ifdef TX_ENABLE_EVENT_LOGGING
 341:ThreadX/common/src/tx_block_allocate.c ****                 /* Check that the event time stamp is unchanged and the call is about
 342:ThreadX/common/src/tx_block_allocate.c ****                    to return success.  A different timestamp means that a later event
 343:ThreadX/common/src/tx_block_allocate.c ****                    wrote over the block allocate event.  A return value other than
 344:ThreadX/common/src/tx_block_allocate.c ****                    TX_SUCCESS indicates that no block was available. In those cases,
 345:ThreadX/common/src/tx_block_allocate.c ****                    do nothing here.  */
 346:ThreadX/common/src/tx_block_allocate.c ****                 if (lower_tbu ==  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET)) &&
 347:ThreadX/common/src/tx_block_allocate.c ****                     upper_tbu ==  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET)) &&
 348:ThreadX/common/src/tx_block_allocate.c ****                     ((thread_ptr -> tx_thread_suspend_status) == TX_SUCCESS))
 349:ThreadX/common/src/tx_block_allocate.c ****                 {
 350:ThreadX/common/src/tx_block_allocate.c **** 
 351:ThreadX/common/src/tx_block_allocate.c ****                     /* Store the address of the allocated block.  */
 352:ThreadX/common/src/tx_block_allocate.c ****                     *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_3_OFFSET)) =  (ULONG) *block_ptr;
 353:ThreadX/common/src/tx_block_allocate.c ****                 }
 354:ThreadX/common/src/tx_block_allocate.c **** #endif
 355:ThreadX/common/src/tx_block_allocate.c **** 
 356:ThreadX/common/src/tx_block_allocate.c ****                 /* Return the completion status.  */
 357:ThreadX/common/src/tx_block_allocate.c ****                 status =  thread_ptr -> tx_thread_suspend_status;
 144              		.loc 1 357 0
 145 005e D4F88400 		ldr	r0, [r4, #132]
 146              	.LVL12:
 147 0062 0AE0     		b	.L1
 148              	.LVL13:
 149              	.L9:
 156:ThreadX/common/src/tx_block_allocate.c **** 
 150              		.loc 1 156 0
ARM GAS  /tmp/ccUiOl77.s 			page 20


 151 0064 013B     		subs	r3, r3, #1
 152 0066 8360     		str	r3, [r0, #8]
 159:ThreadX/common/src/tx_block_allocate.c **** 
 153              		.loc 1 159 0
 154 0068 0369     		ldr	r3, [r0, #16]
 155              	.LVL14:
 162:ThreadX/common/src/tx_block_allocate.c ****         return_ptr =  TX_INDIRECT_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 156              		.loc 1 162 0
 157 006a 1A1D     		adds	r2, r3, #4
 158              	.LVL15:
 164:ThreadX/common/src/tx_block_allocate.c **** 
 159              		.loc 1 164 0
 160 006c 0A60     		str	r2, [r1]
 161              	.LVL16:
 168:ThreadX/common/src/tx_block_allocate.c **** 
 162              		.loc 1 168 0
 163 006e 1A68     		ldr	r2, [r3]
 164              	.LVL17:
 165 0070 0261     		str	r2, [r0, #16]
 166              	.LVL18:
 172:ThreadX/common/src/tx_block_allocate.c **** 
 167              		.loc 1 172 0
 168 0072 1860     		str	r0, [r3]
 169              	.LVL19:
 170              	.LBB22:
 171              	.LBB23:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 172              		.loc 2 562 0
 173              		.syntax unified
 174              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 175 0074 85F31088 		MSR  PRIMASK,r5
 176              	@ 0 "" 2
 177              		.thumb
 178              		.syntax unified
 179              	.LBE23:
 180              	.LBE22:
 202:ThreadX/common/src/tx_block_allocate.c **** 
 181              		.loc 1 202 0
 182 0078 0020     		movs	r0, #0
 183              	.LVL20:
 184              	.L1:
 358:ThreadX/common/src/tx_block_allocate.c ****             }
 359:ThreadX/common/src/tx_block_allocate.c ****         }
 360:ThreadX/common/src/tx_block_allocate.c ****         else
 361:ThreadX/common/src/tx_block_allocate.c ****         {
 362:ThreadX/common/src/tx_block_allocate.c **** 
 363:ThreadX/common/src/tx_block_allocate.c ****             /* Immediate return, return error completion.  */
 364:ThreadX/common/src/tx_block_allocate.c ****             status =  TX_NO_MEMORY;
 365:ThreadX/common/src/tx_block_allocate.c **** 
 366:ThreadX/common/src/tx_block_allocate.c ****             /* Restore interrupts.  */
 367:ThreadX/common/src/tx_block_allocate.c ****             TX_RESTORE
 368:ThreadX/common/src/tx_block_allocate.c ****         }
 369:ThreadX/common/src/tx_block_allocate.c ****     }
 370:ThreadX/common/src/tx_block_allocate.c **** 
 371:ThreadX/common/src/tx_block_allocate.c ****     /* Return completion status.  */
 372:ThreadX/common/src/tx_block_allocate.c ****     return(status);
 373:ThreadX/common/src/tx_block_allocate.c **** }
ARM GAS  /tmp/ccUiOl77.s 			page 21


 185              		.loc 1 373 0
 186 007a 38BD     		pop	{r3, r4, r5, pc}
 187              	.LVL21:
 188              	.L10:
 189              	.LBB24:
 190              	.LBB25:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 191              		.loc 2 562 0
 192              		.syntax unified
 193              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 194 007c 85F31088 		MSR  PRIMASK,r5
 195              	@ 0 "" 2
 196              		.thumb
 197              		.syntax unified
 198              	.LBE25:
 199              	.LBE24:
 223:ThreadX/common/src/tx_block_allocate.c **** 
 200              		.loc 1 223 0
 201 0080 1020     		movs	r0, #16
 202              	.LVL22:
 203 0082 FAE7     		b	.L1
 204              	.LVL23:
 205              	.L6:
 282:ThreadX/common/src/tx_block_allocate.c ****                     thread_ptr -> tx_thread_suspended_next =        next_thread;
 206              		.loc 1 282 0
 207 0084 036A     		ldr	r3, [r0, #32]
 208              	.LVL24:
 283:ThreadX/common/src/tx_block_allocate.c ****                     previous_thread =                               next_thread -> tx_thread_suspen
 209              		.loc 1 283 0
 210 0086 2367     		str	r3, [r4, #112]
 284:ThreadX/common/src/tx_block_allocate.c ****                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 211              		.loc 1 284 0
 212 0088 596F     		ldr	r1, [r3, #116]
 213              	.LVL25:
 285:ThreadX/common/src/tx_block_allocate.c ****                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
 214              		.loc 1 285 0
 215 008a 6167     		str	r1, [r4, #116]
 286:ThreadX/common/src/tx_block_allocate.c ****                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
 216              		.loc 1 286 0
 217 008c 0C67     		str	r4, [r1, #112]
 287:ThreadX/common/src/tx_block_allocate.c ****                 }
 218              		.loc 1 287 0
 219 008e 5C67     		str	r4, [r3, #116]
 220 0090 D7E7     		b	.L7
 221              	.LVL26:
 222              	.L4:
 223              	.LBB26:
 224              	.LBB27:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 225              		.loc 2 562 0
 226              		.syntax unified
 227              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 228 0092 85F31088 		MSR  PRIMASK,r5
 229              	@ 0 "" 2
 230              		.thumb
 231              		.syntax unified
 232              	.LBE27:
ARM GAS  /tmp/ccUiOl77.s 			page 22


 233              	.LBE26:
 364:ThreadX/common/src/tx_block_allocate.c **** 
 234              		.loc 1 364 0
 235 0096 1020     		movs	r0, #16
 236              	.LVL27:
 372:ThreadX/common/src/tx_block_allocate.c **** }
 237              		.loc 1 372 0
 238 0098 EFE7     		b	.L1
 239              	.L12:
 240 009a 00BF     		.align	2
 241              	.L11:
 242 009c 00000000 		.word	_tx_thread_preempt_disable
 243 00a0 00000000 		.word	_tx_thread_current_ptr
 244 00a4 00000000 		.word	_tx_block_pool_cleanup
 245              		.cfi_endproc
 246              	.LFE8:
 248              		.text
 249              	.Letext0:
 250              		.file 3 "/usr/include/newlib/sys/lock.h"
 251              		.file 4 "/usr/include/newlib/sys/_types.h"
 252              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 253              		.file 6 "/usr/include/newlib/sys/reent.h"
 254              		.file 7 "/usr/include/newlib/stdlib.h"
 255              		.file 8 "ThreadX/common/inc/tx_api.h"
 256              		.file 9 "ThreadX/common/inc/tx_thread.h"
 257              		.file 10 "ThreadX/common/inc/tx_block_pool.h"
ARM GAS  /tmp/ccUiOl77.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_block_allocate.c
     /tmp/ccUiOl77.s:18     .text._tx_block_allocate:0000000000000000 $t
     /tmp/ccUiOl77.s:25     .text._tx_block_allocate:0000000000000000 _tx_block_allocate
     /tmp/ccUiOl77.s:242    .text._tx_block_allocate:000000000000009c $d

UNDEFINED SYMBOLS
_tx_thread_system_suspend
_tx_thread_preempt_disable
_tx_thread_current_ptr
_tx_block_pool_cleanup
