ARM GAS  /tmp/ccOk6TxG.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_timer_initialize.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_timer_initialize,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_timer_initialize
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_timer_initialize:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_timer_initialize.c"
   1:ThreadX/common/src/tx_timer_initialize.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
   3:ThreadX/common/src/tx_timer_initialize.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
   5:ThreadX/common/src/tx_timer_initialize.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_timer_initialize.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_timer_initialize.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_timer_initialize.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
  10:ThreadX/common/src/tx_timer_initialize.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_timer_initialize.c **** 
  12:ThreadX/common/src/tx_timer_initialize.c **** 
  13:ThreadX/common/src/tx_timer_initialize.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_timer_initialize.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_timer_initialize.c **** /**                                                                       */
  16:ThreadX/common/src/tx_timer_initialize.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_timer_initialize.c **** /**                                                                       */
  18:ThreadX/common/src/tx_timer_initialize.c **** /**   Timer                                                               */
  19:ThreadX/common/src/tx_timer_initialize.c **** /**                                                                       */
  20:ThreadX/common/src/tx_timer_initialize.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_timer_initialize.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_timer_initialize.c **** 
  23:ThreadX/common/src/tx_timer_initialize.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_timer_initialize.c **** 
  25:ThreadX/common/src/tx_timer_initialize.c **** 
  26:ThreadX/common/src/tx_timer_initialize.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_timer_initialize.c **** 
  28:ThreadX/common/src/tx_timer_initialize.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_timer_initialize.c **** #include "tx_thread.h"
  30:ThreadX/common/src/tx_timer_initialize.c **** #include "tx_timer.h"
  31:ThreadX/common/src/tx_timer_initialize.c **** 
ARM GAS  /tmp/ccOk6TxG.s 			page 2


  32:ThreadX/common/src/tx_timer_initialize.c **** 
  33:ThreadX/common/src/tx_timer_initialize.c **** /* Check for the TX_NO_TIMER option. When defined, do not define all of the
  34:ThreadX/common/src/tx_timer_initialize.c ****    timer component global variables.  */
  35:ThreadX/common/src/tx_timer_initialize.c **** 
  36:ThreadX/common/src/tx_timer_initialize.c **** #ifndef TX_NO_TIMER
  37:ThreadX/common/src/tx_timer_initialize.c **** 
  38:ThreadX/common/src/tx_timer_initialize.c **** 
  39:ThreadX/common/src/tx_timer_initialize.c **** /* Define the system clock value that is continually incremented by the
  40:ThreadX/common/src/tx_timer_initialize.c ****    periodic timer interrupt processing.  */
  41:ThreadX/common/src/tx_timer_initialize.c **** 
  42:ThreadX/common/src/tx_timer_initialize.c **** volatile ULONG      _tx_timer_system_clock;
  43:ThreadX/common/src/tx_timer_initialize.c **** 
  44:ThreadX/common/src/tx_timer_initialize.c **** 
  45:ThreadX/common/src/tx_timer_initialize.c **** /* Define the time-slice expiration flag.  This is used to indicate that a time-slice
  46:ThreadX/common/src/tx_timer_initialize.c ****    has happened.  */
  47:ThreadX/common/src/tx_timer_initialize.c **** 
  48:ThreadX/common/src/tx_timer_initialize.c **** UINT                _tx_timer_expired_time_slice;
  49:ThreadX/common/src/tx_timer_initialize.c **** 
  50:ThreadX/common/src/tx_timer_initialize.c **** 
  51:ThreadX/common/src/tx_timer_initialize.c **** /* Define the thread and application timer entry list.  This list provides a direct access
  52:ThreadX/common/src/tx_timer_initialize.c ****    method for insertion of times less than TX_TIMER_ENTRIES.  */
  53:ThreadX/common/src/tx_timer_initialize.c **** 
  54:ThreadX/common/src/tx_timer_initialize.c **** TX_TIMER_INTERNAL   *_tx_timer_list[TX_TIMER_ENTRIES];
  55:ThreadX/common/src/tx_timer_initialize.c **** 
  56:ThreadX/common/src/tx_timer_initialize.c **** 
  57:ThreadX/common/src/tx_timer_initialize.c **** /* Define the boundary pointers to the list.  These are setup to easily manage
  58:ThreadX/common/src/tx_timer_initialize.c ****    wrapping the list.  */
  59:ThreadX/common/src/tx_timer_initialize.c **** 
  60:ThreadX/common/src/tx_timer_initialize.c **** TX_TIMER_INTERNAL   **_tx_timer_list_start;
  61:ThreadX/common/src/tx_timer_initialize.c **** TX_TIMER_INTERNAL   **_tx_timer_list_end;
  62:ThreadX/common/src/tx_timer_initialize.c **** 
  63:ThreadX/common/src/tx_timer_initialize.c **** 
  64:ThreadX/common/src/tx_timer_initialize.c **** /* Define the current timer pointer in the list.  This pointer is moved sequentially
  65:ThreadX/common/src/tx_timer_initialize.c ****    through the timer list by the timer interrupt handler.  */
  66:ThreadX/common/src/tx_timer_initialize.c **** 
  67:ThreadX/common/src/tx_timer_initialize.c **** TX_TIMER_INTERNAL   **_tx_timer_current_ptr;
  68:ThreadX/common/src/tx_timer_initialize.c **** 
  69:ThreadX/common/src/tx_timer_initialize.c **** 
  70:ThreadX/common/src/tx_timer_initialize.c **** /* Define the timer expiration flag.  This is used to indicate that a timer
  71:ThreadX/common/src/tx_timer_initialize.c ****    has expired.  */
  72:ThreadX/common/src/tx_timer_initialize.c **** 
  73:ThreadX/common/src/tx_timer_initialize.c **** UINT                _tx_timer_expired;
  74:ThreadX/common/src/tx_timer_initialize.c **** 
  75:ThreadX/common/src/tx_timer_initialize.c **** 
  76:ThreadX/common/src/tx_timer_initialize.c **** /* Define the created timer list head pointer.  */
  77:ThreadX/common/src/tx_timer_initialize.c **** 
  78:ThreadX/common/src/tx_timer_initialize.c **** TX_TIMER            *_tx_timer_created_ptr;
  79:ThreadX/common/src/tx_timer_initialize.c **** 
  80:ThreadX/common/src/tx_timer_initialize.c **** 
  81:ThreadX/common/src/tx_timer_initialize.c **** /* Define the created timer count.  */
  82:ThreadX/common/src/tx_timer_initialize.c **** 
  83:ThreadX/common/src/tx_timer_initialize.c **** ULONG               _tx_timer_created_count;
  84:ThreadX/common/src/tx_timer_initialize.c **** 
  85:ThreadX/common/src/tx_timer_initialize.c **** 
  86:ThreadX/common/src/tx_timer_initialize.c **** /* Define the pointer to the timer that has expired and is being processed.  */
  87:ThreadX/common/src/tx_timer_initialize.c **** 
  88:ThreadX/common/src/tx_timer_initialize.c **** TX_TIMER_INTERNAL  *_tx_timer_expired_timer_ptr;
ARM GAS  /tmp/ccOk6TxG.s 			page 3


  89:ThreadX/common/src/tx_timer_initialize.c **** 
  90:ThreadX/common/src/tx_timer_initialize.c **** 
  91:ThreadX/common/src/tx_timer_initialize.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
  92:ThreadX/common/src/tx_timer_initialize.c **** 
  93:ThreadX/common/src/tx_timer_initialize.c **** /* Define the timer thread's control block.  */
  94:ThreadX/common/src/tx_timer_initialize.c **** 
  95:ThreadX/common/src/tx_timer_initialize.c **** TX_THREAD           _tx_timer_thread;
  96:ThreadX/common/src/tx_timer_initialize.c **** 
  97:ThreadX/common/src/tx_timer_initialize.c **** 
  98:ThreadX/common/src/tx_timer_initialize.c **** /* Define the variable that holds the timer thread's starting stack address.  */
  99:ThreadX/common/src/tx_timer_initialize.c **** 
 100:ThreadX/common/src/tx_timer_initialize.c **** VOID                *_tx_timer_stack_start;
 101:ThreadX/common/src/tx_timer_initialize.c **** 
 102:ThreadX/common/src/tx_timer_initialize.c **** 
 103:ThreadX/common/src/tx_timer_initialize.c **** /* Define the variable that holds the timer thread's stack size.  */
 104:ThreadX/common/src/tx_timer_initialize.c **** 
 105:ThreadX/common/src/tx_timer_initialize.c **** ULONG               _tx_timer_stack_size;
 106:ThreadX/common/src/tx_timer_initialize.c **** 
 107:ThreadX/common/src/tx_timer_initialize.c **** 
 108:ThreadX/common/src/tx_timer_initialize.c **** /* Define the variable that holds the timer thread's priority.  */
 109:ThreadX/common/src/tx_timer_initialize.c **** 
 110:ThreadX/common/src/tx_timer_initialize.c **** UINT                _tx_timer_priority;
 111:ThreadX/common/src/tx_timer_initialize.c **** 
 112:ThreadX/common/src/tx_timer_initialize.c **** /* Define the system timer thread's stack.   The default size is defined
 113:ThreadX/common/src/tx_timer_initialize.c ****    in tx_port.h.  */
 114:ThreadX/common/src/tx_timer_initialize.c **** 
 115:ThreadX/common/src/tx_timer_initialize.c **** ULONG               _tx_timer_thread_stack_area[(((UINT) TX_TIMER_THREAD_STACK_SIZE)+((sizeof(ULONG
 116:ThreadX/common/src/tx_timer_initialize.c **** 
 117:ThreadX/common/src/tx_timer_initialize.c **** #else
 118:ThreadX/common/src/tx_timer_initialize.c **** 
 119:ThreadX/common/src/tx_timer_initialize.c **** 
 120:ThreadX/common/src/tx_timer_initialize.c **** /* Define the busy flag that will prevent nested timer ISR processing.  */
 121:ThreadX/common/src/tx_timer_initialize.c **** 
 122:ThreadX/common/src/tx_timer_initialize.c **** UINT                _tx_timer_processing_active;
 123:ThreadX/common/src/tx_timer_initialize.c **** 
 124:ThreadX/common/src/tx_timer_initialize.c **** #endif
 125:ThreadX/common/src/tx_timer_initialize.c **** 
 126:ThreadX/common/src/tx_timer_initialize.c **** #ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
 127:ThreadX/common/src/tx_timer_initialize.c **** 
 128:ThreadX/common/src/tx_timer_initialize.c **** /* Define the total number of timer activations.  */
 129:ThreadX/common/src/tx_timer_initialize.c **** 
 130:ThreadX/common/src/tx_timer_initialize.c **** ULONG               _tx_timer_performance_activate_count;
 131:ThreadX/common/src/tx_timer_initialize.c **** 
 132:ThreadX/common/src/tx_timer_initialize.c **** 
 133:ThreadX/common/src/tx_timer_initialize.c **** /* Define the total number of timer reactivations.  */
 134:ThreadX/common/src/tx_timer_initialize.c **** 
 135:ThreadX/common/src/tx_timer_initialize.c **** ULONG               _tx_timer_performance_reactivate_count;
 136:ThreadX/common/src/tx_timer_initialize.c **** 
 137:ThreadX/common/src/tx_timer_initialize.c **** 
 138:ThreadX/common/src/tx_timer_initialize.c **** /* Define the total number of timer deactivations.  */
 139:ThreadX/common/src/tx_timer_initialize.c **** 
 140:ThreadX/common/src/tx_timer_initialize.c **** ULONG               _tx_timer_performance_deactivate_count;
 141:ThreadX/common/src/tx_timer_initialize.c **** 
 142:ThreadX/common/src/tx_timer_initialize.c **** 
 143:ThreadX/common/src/tx_timer_initialize.c **** /* Define the total number of timer expirations.  */
 144:ThreadX/common/src/tx_timer_initialize.c **** 
 145:ThreadX/common/src/tx_timer_initialize.c **** ULONG               _tx_timer_performance_expiration_count;
ARM GAS  /tmp/ccOk6TxG.s 			page 4


 146:ThreadX/common/src/tx_timer_initialize.c **** 
 147:ThreadX/common/src/tx_timer_initialize.c **** 
 148:ThreadX/common/src/tx_timer_initialize.c **** /* Define the total number of timer expiration adjustments. These are required
 149:ThreadX/common/src/tx_timer_initialize.c ****    if the expiration time is greater than the size of the timer list. In such
 150:ThreadX/common/src/tx_timer_initialize.c ****    cases, the timer is placed at the end of the list and then reactivated
 151:ThreadX/common/src/tx_timer_initialize.c ****    as many times as necessary to finally achieve the resulting timeout. */
 152:ThreadX/common/src/tx_timer_initialize.c **** 
 153:ThreadX/common/src/tx_timer_initialize.c **** ULONG               _tx_timer_performance__expiration_adjust_count;
 154:ThreadX/common/src/tx_timer_initialize.c **** 
 155:ThreadX/common/src/tx_timer_initialize.c **** #endif
 156:ThreadX/common/src/tx_timer_initialize.c **** #endif
 157:ThreadX/common/src/tx_timer_initialize.c **** 
 158:ThreadX/common/src/tx_timer_initialize.c **** 
 159:ThreadX/common/src/tx_timer_initialize.c **** /* Define the current time slice value.  If non-zero, a time-slice is active.
 160:ThreadX/common/src/tx_timer_initialize.c ****    Otherwise, the time_slice is not active.  */
 161:ThreadX/common/src/tx_timer_initialize.c **** 
 162:ThreadX/common/src/tx_timer_initialize.c **** ULONG               _tx_timer_time_slice;
 163:ThreadX/common/src/tx_timer_initialize.c **** 
 164:ThreadX/common/src/tx_timer_initialize.c **** 
 165:ThreadX/common/src/tx_timer_initialize.c **** /**************************************************************************/
 166:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 167:ThreadX/common/src/tx_timer_initialize.c **** /*  FUNCTION                                               RELEASE        */
 168:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 169:ThreadX/common/src/tx_timer_initialize.c **** /*    _tx_timer_initialize                                PORTABLE C      */
 170:ThreadX/common/src/tx_timer_initialize.c **** /*                                                           6.1          */
 171:ThreadX/common/src/tx_timer_initialize.c **** /*  AUTHOR                                                                */
 172:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 173:ThreadX/common/src/tx_timer_initialize.c **** /*    William E. Lamie, Microsoft Corporation                             */
 174:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 175:ThreadX/common/src/tx_timer_initialize.c **** /*  DESCRIPTION                                                           */
 176:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 177:ThreadX/common/src/tx_timer_initialize.c **** /*    This function initializes the various control data structures for   */
 178:ThreadX/common/src/tx_timer_initialize.c **** /*    the clock control component.                                        */
 179:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 180:ThreadX/common/src/tx_timer_initialize.c **** /*  INPUT                                                                 */
 181:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 182:ThreadX/common/src/tx_timer_initialize.c **** /*    None                                                                */
 183:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 184:ThreadX/common/src/tx_timer_initialize.c **** /*  OUTPUT                                                                */
 185:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 186:ThreadX/common/src/tx_timer_initialize.c **** /*    None                                                                */
 187:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 188:ThreadX/common/src/tx_timer_initialize.c **** /*  CALLS                                                                 */
 189:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 190:ThreadX/common/src/tx_timer_initialize.c **** /*    _tx_thread_create                 Create the system timer thread    */
 191:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 192:ThreadX/common/src/tx_timer_initialize.c **** /*  CALLED BY                                                             */
 193:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 194:ThreadX/common/src/tx_timer_initialize.c **** /*    _tx_initialize_high_level         High level initialization         */
 195:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 196:ThreadX/common/src/tx_timer_initialize.c **** /*  RELEASE HISTORY                                                       */
 197:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 198:ThreadX/common/src/tx_timer_initialize.c **** /*    DATE              NAME                      DESCRIPTION             */
 199:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 200:ThreadX/common/src/tx_timer_initialize.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
 201:ThreadX/common/src/tx_timer_initialize.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
 202:ThreadX/common/src/tx_timer_initialize.c **** /*                                            resulting in version 6.1    */
ARM GAS  /tmp/ccOk6TxG.s 			page 5


 203:ThreadX/common/src/tx_timer_initialize.c **** /*                                                                        */
 204:ThreadX/common/src/tx_timer_initialize.c **** /**************************************************************************/
 205:ThreadX/common/src/tx_timer_initialize.c **** VOID  _tx_timer_initialize(VOID)
 206:ThreadX/common/src/tx_timer_initialize.c **** {
  28              		.loc 1 206 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 87B0     		sub	sp, sp, #28
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 40
 207:ThreadX/common/src/tx_timer_initialize.c **** #ifndef TX_NO_TIMER
 208:ThreadX/common/src/tx_timer_initialize.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
 209:ThreadX/common/src/tx_timer_initialize.c **** UINT    status;
 210:ThreadX/common/src/tx_timer_initialize.c **** #endif
 211:ThreadX/common/src/tx_timer_initialize.c **** 
 212:ThreadX/common/src/tx_timer_initialize.c **** #ifndef TX_DISABLE_REDUNDANT_CLEARING
 213:ThreadX/common/src/tx_timer_initialize.c **** 
 214:ThreadX/common/src/tx_timer_initialize.c ****     /* Initialize the system clock to 0.  */
 215:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_system_clock =  ((ULONG) 0);
  41              		.loc 1 215 0
  42 0004 0024     		movs	r4, #0
  43 0006 1E4B     		ldr	r3, .L4
  44 0008 1C60     		str	r4, [r3]
 216:ThreadX/common/src/tx_timer_initialize.c **** 
 217:ThreadX/common/src/tx_timer_initialize.c ****     /* Initialize the time-slice value to 0 to make sure it is disabled.  */
 218:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_time_slice =  ((ULONG) 0);
  45              		.loc 1 218 0
  46 000a 1E4B     		ldr	r3, .L4+4
  47 000c 1C60     		str	r4, [r3]
 219:ThreadX/common/src/tx_timer_initialize.c **** 
 220:ThreadX/common/src/tx_timer_initialize.c ****     /* Clear the expired flags.  */
 221:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_expired_time_slice =  TX_FALSE;
  48              		.loc 1 221 0
  49 000e 1E4B     		ldr	r3, .L4+8
  50 0010 1C60     		str	r4, [r3]
 222:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_expired =             TX_FALSE;
  51              		.loc 1 222 0
  52 0012 1E4B     		ldr	r3, .L4+12
  53 0014 1C60     		str	r4, [r3]
 223:ThreadX/common/src/tx_timer_initialize.c **** 
 224:ThreadX/common/src/tx_timer_initialize.c ****     /* Set the currently expired timer being processed pointer to NULL.  */
 225:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_expired_timer_ptr =  TX_NULL;
  54              		.loc 1 225 0
  55 0016 1E4B     		ldr	r3, .L4+16
  56 0018 1C60     		str	r4, [r3]
 226:ThreadX/common/src/tx_timer_initialize.c **** 
 227:ThreadX/common/src/tx_timer_initialize.c ****     /* Initialize the thread and application timer management control structures.  */
 228:ThreadX/common/src/tx_timer_initialize.c **** 
 229:ThreadX/common/src/tx_timer_initialize.c ****     /* First, initialize the timer list.  */
 230:ThreadX/common/src/tx_timer_initialize.c ****     TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
ARM GAS  /tmp/ccOk6TxG.s 			page 6


  57              		.loc 1 230 0
  58 001a 1E4D     		ldr	r5, .L4+20
  59 001c 8022     		movs	r2, #128
  60 001e 2146     		mov	r1, r4
  61 0020 2846     		mov	r0, r5
  62 0022 FFF7FEFF 		bl	memset
  63              	.LVL0:
 231:ThreadX/common/src/tx_timer_initialize.c **** #endif
 232:ThreadX/common/src/tx_timer_initialize.c **** 
 233:ThreadX/common/src/tx_timer_initialize.c ****     /* Initialize all of the list pointers.  */
 234:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_list_start =   &_tx_timer_list[0];
  64              		.loc 1 234 0
  65 0026 1C4B     		ldr	r3, .L4+24
  66 0028 1D60     		str	r5, [r3]
 235:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_current_ptr =  &_tx_timer_list[0];
  67              		.loc 1 235 0
  68 002a 1C4B     		ldr	r3, .L4+28
  69 002c 1D60     		str	r5, [r3]
 236:ThreadX/common/src/tx_timer_initialize.c **** 
 237:ThreadX/common/src/tx_timer_initialize.c ****     /* Set the timer list end pointer to one past the actual timer list.  This is done
 238:ThreadX/common/src/tx_timer_initialize.c ****        to make the timer interrupt handling in assembly language a little easier.  */
 239:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 240:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
  70              		.loc 1 240 0
  71 002e 8035     		adds	r5, r5, #128
  72 0030 1B4B     		ldr	r3, .L4+32
  73 0032 1D60     		str	r5, [r3]
 241:ThreadX/common/src/tx_timer_initialize.c **** 
 242:ThreadX/common/src/tx_timer_initialize.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
 243:ThreadX/common/src/tx_timer_initialize.c **** 
 244:ThreadX/common/src/tx_timer_initialize.c ****     /* Setup the variables associated with the system timer thread's stack and
 245:ThreadX/common/src/tx_timer_initialize.c ****        priority.  */
 246:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
  74              		.loc 1 246 0
  75 0034 1B4B     		ldr	r3, .L4+36
  76 0036 1C4A     		ldr	r2, .L4+40
  77 0038 1A60     		str	r2, [r3]
 247:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
  78              		.loc 1 247 0
  79 003a 1C4B     		ldr	r3, .L4+44
  80 003c 4FF48062 		mov	r2, #1024
  81 0040 1A60     		str	r2, [r3]
 248:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
  82              		.loc 1 248 0
  83 0042 1B4B     		ldr	r3, .L4+48
  84 0044 1C60     		str	r4, [r3]
  85              	.L2:
 249:ThreadX/common/src/tx_timer_initialize.c **** 
 250:ThreadX/common/src/tx_timer_initialize.c ****     /* Create the system timer thread.  This thread processes all of the timer
 251:ThreadX/common/src/tx_timer_initialize.c ****        expirations and reschedules.  Its stack and priority are defined in the
 252:ThreadX/common/src/tx_timer_initialize.c ****        low-level initialization component.  */
 253:ThreadX/common/src/tx_timer_initialize.c ****     do
 254:ThreadX/common/src/tx_timer_initialize.c ****     {
 255:ThreadX/common/src/tx_timer_initialize.c **** 
 256:ThreadX/common/src/tx_timer_initialize.c ****         /* Create the system timer thread.  */
 257:ThreadX/common/src/tx_timer_initialize.c ****         status =  _tx_thread_create(&_tx_timer_thread,
  86              		.loc 1 257 0 discriminator 1
ARM GAS  /tmp/ccOk6TxG.s 			page 7


  87 0046 174B     		ldr	r3, .L4+36
  88 0048 1968     		ldr	r1, [r3]
  89 004a 184B     		ldr	r3, .L4+44
  90 004c 1868     		ldr	r0, [r3]
  91 004e 184B     		ldr	r3, .L4+48
  92 0050 1B68     		ldr	r3, [r3]
  93 0052 0022     		movs	r2, #0
  94 0054 0592     		str	r2, [sp, #20]
  95 0056 0492     		str	r2, [sp, #16]
  96 0058 0393     		str	r3, [sp, #12]
  97 005a 0293     		str	r3, [sp, #8]
  98 005c 0190     		str	r0, [sp, #4]
  99 005e 0091     		str	r1, [sp]
 100 0060 144B     		ldr	r3, .L4+52
 101 0062 154A     		ldr	r2, .L4+56
 102 0064 1549     		ldr	r1, .L4+60
 103 0066 1648     		ldr	r0, .L4+64
 104 0068 FFF7FEFF 		bl	_tx_thread_create
 105              	.LVL1:
 258:ThreadX/common/src/tx_timer_initialize.c ****                                     TX_CONST_CHAR_TO_CHAR_POINTER_CONVERT("System Timer Thread"),
 259:ThreadX/common/src/tx_timer_initialize.c ****                                     _tx_timer_thread_entry,
 260:ThreadX/common/src/tx_timer_initialize.c ****                                     ((ULONG) TX_TIMER_ID),
 261:ThreadX/common/src/tx_timer_initialize.c ****                                     _tx_timer_stack_start, _tx_timer_stack_size,
 262:ThreadX/common/src/tx_timer_initialize.c ****                                     _tx_timer_priority, _tx_timer_priority, TX_NO_TIME_SLICE, TX_DO
 263:ThreadX/common/src/tx_timer_initialize.c **** 
 264:ThreadX/common/src/tx_timer_initialize.c **** #ifdef TX_SAFETY_CRITICAL
 265:ThreadX/common/src/tx_timer_initialize.c **** 
 266:ThreadX/common/src/tx_timer_initialize.c ****         /* Check return from thread create - if an error is detected throw an exception.  */
 267:ThreadX/common/src/tx_timer_initialize.c ****         if (status != TX_SUCCESS)
 268:ThreadX/common/src/tx_timer_initialize.c ****         {
 269:ThreadX/common/src/tx_timer_initialize.c **** 
 270:ThreadX/common/src/tx_timer_initialize.c ****             /* Raise safety critical exception.  */
 271:ThreadX/common/src/tx_timer_initialize.c ****             TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, status);
 272:ThreadX/common/src/tx_timer_initialize.c ****         }
 273:ThreadX/common/src/tx_timer_initialize.c **** #endif
 274:ThreadX/common/src/tx_timer_initialize.c **** 
 275:ThreadX/common/src/tx_timer_initialize.c ****         /* Define timer initialize extension.  */
 276:ThreadX/common/src/tx_timer_initialize.c ****         TX_TIMER_INITIALIZE_EXTENSION(status)
 277:ThreadX/common/src/tx_timer_initialize.c **** 
 278:ThreadX/common/src/tx_timer_initialize.c ****     } while (status != TX_SUCCESS);
 106              		.loc 1 278 0 discriminator 1
 107 006c 0028     		cmp	r0, #0
 108 006e EAD1     		bne	.L2
 279:ThreadX/common/src/tx_timer_initialize.c **** 
 280:ThreadX/common/src/tx_timer_initialize.c **** #else
 281:ThreadX/common/src/tx_timer_initialize.c **** 
 282:ThreadX/common/src/tx_timer_initialize.c ****     /* Clear the timer interrupt processing active flag.  */
 283:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_processing_active =  TX_FALSE;
 284:ThreadX/common/src/tx_timer_initialize.c **** #endif
 285:ThreadX/common/src/tx_timer_initialize.c **** 
 286:ThreadX/common/src/tx_timer_initialize.c **** #ifndef TX_DISABLE_REDUNDANT_CLEARING
 287:ThreadX/common/src/tx_timer_initialize.c **** 
 288:ThreadX/common/src/tx_timer_initialize.c ****     /* Initialize the head pointer of the created application timer list.  */
 289:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_created_ptr =  TX_NULL;
 109              		.loc 1 289 0
 110 0070 0023     		movs	r3, #0
 111 0072 144A     		ldr	r2, .L4+68
ARM GAS  /tmp/ccOk6TxG.s 			page 8


 112 0074 1360     		str	r3, [r2]
 290:ThreadX/common/src/tx_timer_initialize.c **** 
 291:ThreadX/common/src/tx_timer_initialize.c ****     /* Set the created count to zero.  */
 292:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_created_count =  TX_EMPTY;
 113              		.loc 1 292 0
 114 0076 144A     		ldr	r2, .L4+72
 115 0078 1360     		str	r3, [r2]
 293:ThreadX/common/src/tx_timer_initialize.c **** 
 294:ThreadX/common/src/tx_timer_initialize.c **** #ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
 295:ThreadX/common/src/tx_timer_initialize.c **** 
 296:ThreadX/common/src/tx_timer_initialize.c ****     /* Initialize timer performance counters.  */
 297:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_performance_activate_count =           ((ULONG) 0);
 298:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_performance_reactivate_count =         ((ULONG) 0);
 299:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_performance_deactivate_count =         ((ULONG) 0);
 300:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_performance_expiration_count =         ((ULONG) 0);
 301:ThreadX/common/src/tx_timer_initialize.c ****     _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
 302:ThreadX/common/src/tx_timer_initialize.c **** #endif
 303:ThreadX/common/src/tx_timer_initialize.c **** #endif
 304:ThreadX/common/src/tx_timer_initialize.c **** #endif
 305:ThreadX/common/src/tx_timer_initialize.c **** }
 116              		.loc 1 305 0
 117 007a 07B0     		add	sp, sp, #28
 118              	.LCFI2:
 119              		.cfi_def_cfa_offset 12
 120              		@ sp needed
 121 007c 30BD     		pop	{r4, r5, pc}
 122              	.L5:
 123 007e 00BF     		.align	2
 124              	.L4:
 125 0080 00000000 		.word	_tx_timer_system_clock
 126 0084 00000000 		.word	_tx_timer_time_slice
 127 0088 00000000 		.word	_tx_timer_expired_time_slice
 128 008c 00000000 		.word	_tx_timer_expired
 129 0090 00000000 		.word	_tx_timer_expired_timer_ptr
 130 0094 00000000 		.word	_tx_timer_list
 131 0098 00000000 		.word	_tx_timer_list_start
 132 009c 00000000 		.word	_tx_timer_current_ptr
 133 00a0 00000000 		.word	_tx_timer_list_end
 134 00a4 00000000 		.word	_tx_timer_stack_start
 135 00a8 00000000 		.word	_tx_timer_thread_stack_area
 136 00ac 00000000 		.word	_tx_timer_stack_size
 137 00b0 00000000 		.word	_tx_timer_priority
 138 00b4 4D495441 		.word	1096042829
 139 00b8 00000000 		.word	_tx_timer_thread_entry
 140 00bc 00000000 		.word	.LC0
 141 00c0 00000000 		.word	_tx_timer_thread
 142 00c4 00000000 		.word	_tx_timer_created_ptr
 143 00c8 00000000 		.word	_tx_timer_created_count
 144              		.cfi_endproc
 145              	.LFE8:
 147              		.comm	_tx_timer_time_slice,4,4
 148              		.comm	_tx_timer_thread_stack_area,1024,4
 149              		.comm	_tx_timer_priority,4,4
 150              		.comm	_tx_timer_stack_size,4,4
 151              		.comm	_tx_timer_stack_start,4,4
 152              		.comm	_tx_timer_thread,180,4
 153              		.comm	_tx_timer_expired_timer_ptr,4,4
ARM GAS  /tmp/ccOk6TxG.s 			page 9


 154              		.comm	_tx_timer_created_count,4,4
 155              		.comm	_tx_timer_created_ptr,4,4
 156              		.comm	_tx_timer_expired,4,4
 157              		.comm	_tx_timer_current_ptr,4,4
 158              		.comm	_tx_timer_list_end,4,4
 159              		.comm	_tx_timer_list_start,4,4
 160              		.comm	_tx_timer_list,128,4
 161              		.comm	_tx_timer_expired_time_slice,4,4
 162              		.comm	_tx_timer_system_clock,4,4
 163              		.section	.rodata._tx_timer_initialize.str1.4,"aMS",%progbits,1
 164              		.align	2
 165              	.LC0:
 166 0000 53797374 		.ascii	"System Timer Thread\000"
 166      656D2054 
 166      696D6572 
 166      20546872 
 166      65616400 
 167              		.text
 168              	.Letext0:
 169              		.file 2 "/usr/include/newlib/sys/lock.h"
 170              		.file 3 "/usr/include/newlib/sys/_types.h"
 171              		.file 4 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 172              		.file 5 "/usr/include/newlib/sys/reent.h"
 173              		.file 6 "/usr/include/newlib/stdlib.h"
 174              		.file 7 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
 175              		.file 8 "ThreadX/common/inc/tx_api.h"
 176              		.file 9 "ThreadX/common/inc/tx_thread.h"
 177              		.file 10 "ThreadX/common/inc/tx_timer.h"
 178              		.file 11 "<built-in>"
ARM GAS  /tmp/ccOk6TxG.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_timer_initialize.c
     /tmp/ccOk6TxG.s:18     .text._tx_timer_initialize:0000000000000000 $t
     /tmp/ccOk6TxG.s:25     .text._tx_timer_initialize:0000000000000000 _tx_timer_initialize
     /tmp/ccOk6TxG.s:125    .text._tx_timer_initialize:0000000000000080 $d
                            *COM*:0000000000000004 _tx_timer_system_clock
                            *COM*:0000000000000004 _tx_timer_time_slice
                            *COM*:0000000000000004 _tx_timer_expired_time_slice
                            *COM*:0000000000000004 _tx_timer_expired
                            *COM*:0000000000000004 _tx_timer_expired_timer_ptr
                            *COM*:0000000000000080 _tx_timer_list
                            *COM*:0000000000000004 _tx_timer_list_start
                            *COM*:0000000000000004 _tx_timer_current_ptr
                            *COM*:0000000000000004 _tx_timer_list_end
                            *COM*:0000000000000004 _tx_timer_stack_start
                            *COM*:0000000000000400 _tx_timer_thread_stack_area
                            *COM*:0000000000000004 _tx_timer_stack_size
                            *COM*:0000000000000004 _tx_timer_priority
                            *COM*:00000000000000b4 _tx_timer_thread
                            *COM*:0000000000000004 _tx_timer_created_ptr
                            *COM*:0000000000000004 _tx_timer_created_count
     /tmp/ccOk6TxG.s:164    .rodata._tx_timer_initialize.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
memset
_tx_thread_create
_tx_timer_thread_entry
