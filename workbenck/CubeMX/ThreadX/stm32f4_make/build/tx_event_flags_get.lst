ARM GAS  /tmp/ccul4tRP.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_event_flags_get.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_event_flags_get,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_event_flags_get
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_event_flags_get:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_event_flags_get.c"
   1:ThreadX/common/src/tx_event_flags_get.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
   3:ThreadX/common/src/tx_event_flags_get.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
   5:ThreadX/common/src/tx_event_flags_get.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_event_flags_get.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_event_flags_get.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_event_flags_get.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  10:ThreadX/common/src/tx_event_flags_get.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_event_flags_get.c **** 
  12:ThreadX/common/src/tx_event_flags_get.c **** 
  13:ThreadX/common/src/tx_event_flags_get.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_event_flags_get.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_event_flags_get.c **** /**                                                                       */
  16:ThreadX/common/src/tx_event_flags_get.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_event_flags_get.c **** /**                                                                       */
  18:ThreadX/common/src/tx_event_flags_get.c **** /**   Event Flags                                                         */
  19:ThreadX/common/src/tx_event_flags_get.c **** /**                                                                       */
  20:ThreadX/common/src/tx_event_flags_get.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_event_flags_get.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_event_flags_get.c **** 
  23:ThreadX/common/src/tx_event_flags_get.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_event_flags_get.c **** 
  25:ThreadX/common/src/tx_event_flags_get.c **** 
  26:ThreadX/common/src/tx_event_flags_get.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_event_flags_get.c **** 
  28:ThreadX/common/src/tx_event_flags_get.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_event_flags_get.c **** #include "tx_trace.h"
  30:ThreadX/common/src/tx_event_flags_get.c **** #include "tx_thread.h"
  31:ThreadX/common/src/tx_event_flags_get.c **** #include "tx_event_flags.h"
ARM GAS  /tmp/ccul4tRP.s 			page 2


  32:ThreadX/common/src/tx_event_flags_get.c **** 
  33:ThreadX/common/src/tx_event_flags_get.c **** 
  34:ThreadX/common/src/tx_event_flags_get.c **** /**************************************************************************/
  35:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  36:ThreadX/common/src/tx_event_flags_get.c **** /*  FUNCTION                                               RELEASE        */
  37:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  38:ThreadX/common/src/tx_event_flags_get.c **** /*    _tx_event_flags_get                                 PORTABLE C      */
  39:ThreadX/common/src/tx_event_flags_get.c **** /*                                                           6.1          */
  40:ThreadX/common/src/tx_event_flags_get.c **** /*  AUTHOR                                                                */
  41:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  42:ThreadX/common/src/tx_event_flags_get.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  44:ThreadX/common/src/tx_event_flags_get.c **** /*  DESCRIPTION                                                           */
  45:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  46:ThreadX/common/src/tx_event_flags_get.c **** /*    This function gets the specified event flags from the group,        */
  47:ThreadX/common/src/tx_event_flags_get.c **** /*    according to the get option.  The get option also specifies whether */
  48:ThreadX/common/src/tx_event_flags_get.c **** /*    or not the retrieved flags are cleared.                             */
  49:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  50:ThreadX/common/src/tx_event_flags_get.c **** /*  INPUT                                                                 */
  51:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  52:ThreadX/common/src/tx_event_flags_get.c **** /*    group_ptr                         Pointer to group control block    */
  53:ThreadX/common/src/tx_event_flags_get.c **** /*    requested_event_flags             Event flags requested             */
  54:ThreadX/common/src/tx_event_flags_get.c **** /*    get_option                        Specifies and/or and clear options*/
  55:ThreadX/common/src/tx_event_flags_get.c **** /*    actual_flags_ptr                  Pointer to place the actual flags */
  56:ThreadX/common/src/tx_event_flags_get.c **** /*                                        the service retrieved           */
  57:ThreadX/common/src/tx_event_flags_get.c **** /*    wait_option                       Suspension option                 */
  58:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  59:ThreadX/common/src/tx_event_flags_get.c **** /*  OUTPUT                                                                */
  60:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  61:ThreadX/common/src/tx_event_flags_get.c **** /*    status                            Completion status                 */
  62:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  63:ThreadX/common/src/tx_event_flags_get.c **** /*  CALLS                                                                 */
  64:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  65:ThreadX/common/src/tx_event_flags_get.c **** /*    _tx_thread_system_suspend         Suspend thread service            */
  66:ThreadX/common/src/tx_event_flags_get.c **** /*    _tx_thread_system_ni_suspend      Non-interruptable suspend thread  */
  67:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  68:ThreadX/common/src/tx_event_flags_get.c **** /*  CALLED BY                                                             */
  69:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  70:ThreadX/common/src/tx_event_flags_get.c **** /*    Application Code                                                    */
  71:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  72:ThreadX/common/src/tx_event_flags_get.c **** /*  RELEASE HISTORY                                                       */
  73:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  74:ThreadX/common/src/tx_event_flags_get.c **** /*    DATE              NAME                      DESCRIPTION             */
  75:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  76:ThreadX/common/src/tx_event_flags_get.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  77:ThreadX/common/src/tx_event_flags_get.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  78:ThreadX/common/src/tx_event_flags_get.c **** /*                                            resulting in version 6.1    */
  79:ThreadX/common/src/tx_event_flags_get.c **** /*                                                                        */
  80:ThreadX/common/src/tx_event_flags_get.c **** /**************************************************************************/
  81:ThreadX/common/src/tx_event_flags_get.c **** UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
  82:ThreadX/common/src/tx_event_flags_get.c ****                     UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
  83:ThreadX/common/src/tx_event_flags_get.c **** {
  28              		.loc 1 83 0
  29              		.cfi_startproc
  30              		@ args = 4, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
ARM GAS  /tmp/ccul4tRP.s 			page 3


  33 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 3, -24
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42              	.LBB16:
  43              	.LBB17:
  44              	.LBB18:
  45              	.LBB19:
  46              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
ARM GAS  /tmp/ccul4tRP.s 			page 4


  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccul4tRP.s 			page 5


 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
ARM GAS  /tmp/ccul4tRP.s 			page 6


 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
ARM GAS  /tmp/ccul4tRP.s 			page 7


 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
ARM GAS  /tmp/ccul4tRP.s 			page 8


 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
ARM GAS  /tmp/ccul4tRP.s 			page 9


 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
ARM GAS  /tmp/ccul4tRP.s 			page 10


 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
ARM GAS  /tmp/ccul4tRP.s 			page 11


 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
ARM GAS  /tmp/ccul4tRP.s 			page 12


 500:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  47              		.loc 2 539 0
  48              		.syntax unified
  49              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  50 0002 EFF31085 		MRS  r5, PRIMASK 
  51              	@ 0 "" 2
  52              		.thumb
  53              		.syntax unified
  54              	.LBE19:
  55              	.LBE18:
 540:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
ARM GAS  /tmp/ccul4tRP.s 			page 13


 548:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
 567:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
 569:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
 571:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  56              		.loc 2 575 0
  57              		.syntax unified
  58              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  59 0006 72B6     		CPSID i
  60              	@ 0 "" 2
  61              		.thumb
  62              		.syntax unified
  63              	.LBE17:
  64              	.LBE16:
  84:ThreadX/common/src/tx_event_flags_get.c **** 
  85:ThreadX/common/src/tx_event_flags_get.c **** TX_INTERRUPT_SAVE_AREA
  86:ThreadX/common/src/tx_event_flags_get.c **** 
  87:ThreadX/common/src/tx_event_flags_get.c **** UINT            status;
  88:ThreadX/common/src/tx_event_flags_get.c **** UINT            and_request;
  89:ThreadX/common/src/tx_event_flags_get.c **** UINT            clear_request;
  90:ThreadX/common/src/tx_event_flags_get.c **** ULONG           current_flags;
  91:ThreadX/common/src/tx_event_flags_get.c **** ULONG           flags_satisfied;
  92:ThreadX/common/src/tx_event_flags_get.c **** #ifndef TX_NOT_INTERRUPTABLE
  93:ThreadX/common/src/tx_event_flags_get.c **** ULONG           delayed_clear_flags;
  94:ThreadX/common/src/tx_event_flags_get.c **** #endif
  95:ThreadX/common/src/tx_event_flags_get.c **** UINT            suspended_count;
  96:ThreadX/common/src/tx_event_flags_get.c **** TX_THREAD       *thread_ptr;
  97:ThreadX/common/src/tx_event_flags_get.c **** TX_THREAD       *next_thread;
  98:ThreadX/common/src/tx_event_flags_get.c **** TX_THREAD       *previous_thread;
  99:ThreadX/common/src/tx_event_flags_get.c **** #ifndef TX_NOT_INTERRUPTABLE
 100:ThreadX/common/src/tx_event_flags_get.c **** UINT            interrupted_set_request;
 101:ThreadX/common/src/tx_event_flags_get.c **** #endif
 102:ThreadX/common/src/tx_event_flags_get.c **** 
 103:ThreadX/common/src/tx_event_flags_get.c **** 
ARM GAS  /tmp/ccul4tRP.s 			page 14


 104:ThreadX/common/src/tx_event_flags_get.c ****     /* Disable interrupts to examine the event flags group.  */
 105:ThreadX/common/src/tx_event_flags_get.c ****     TX_DISABLE
 106:ThreadX/common/src/tx_event_flags_get.c **** 
 107:ThreadX/common/src/tx_event_flags_get.c **** #ifdef TX_EVENT_FLAGS_ENABLE_PERFORMANCE_INFO
 108:ThreadX/common/src/tx_event_flags_get.c **** 
 109:ThreadX/common/src/tx_event_flags_get.c ****     /* Increment the total event flags get counter.  */
 110:ThreadX/common/src/tx_event_flags_get.c ****     _tx_event_flags_performance_get_count++;
 111:ThreadX/common/src/tx_event_flags_get.c **** 
 112:ThreadX/common/src/tx_event_flags_get.c ****     /* Increment the number of event flags gets on this semaphore.  */
 113:ThreadX/common/src/tx_event_flags_get.c ****     group_ptr -> tx_event_flags_group__performance_get_count++;
 114:ThreadX/common/src/tx_event_flags_get.c **** #endif
 115:ThreadX/common/src/tx_event_flags_get.c **** 
 116:ThreadX/common/src/tx_event_flags_get.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 117:ThreadX/common/src/tx_event_flags_get.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_EVENT_FLAGS_GET, group_ptr, requested_flags, group_ptr -> tx_e
 118:ThreadX/common/src/tx_event_flags_get.c **** 
 119:ThreadX/common/src/tx_event_flags_get.c ****     /* Log this kernel call.  */
 120:ThreadX/common/src/tx_event_flags_get.c ****     TX_EL_EVENT_FLAGS_GET_INSERT
 121:ThreadX/common/src/tx_event_flags_get.c **** 
 122:ThreadX/common/src/tx_event_flags_get.c ****     /* Pickup current flags.  */
 123:ThreadX/common/src/tx_event_flags_get.c ****     current_flags =  group_ptr -> tx_event_flags_group_current;
  65              		.loc 1 123 0
  66 0008 8468     		ldr	r4, [r0, #8]
  67              	.LVL1:
 124:ThreadX/common/src/tx_event_flags_get.c **** 
 125:ThreadX/common/src/tx_event_flags_get.c ****     /* Apply the event flag option mask.  */
 126:ThreadX/common/src/tx_event_flags_get.c ****     and_request =  (get_option & TX_AND);
  68              		.loc 1 126 0
  69 000a 02F00207 		and	r7, r2, #2
  70              	.LVL2:
 127:ThreadX/common/src/tx_event_flags_get.c **** 
 128:ThreadX/common/src/tx_event_flags_get.c **** #ifdef TX_NOT_INTERRUPTABLE
 129:ThreadX/common/src/tx_event_flags_get.c **** 
 130:ThreadX/common/src/tx_event_flags_get.c ****     /* Check for AND condition. All flags must be present to satisfy request.  */
 131:ThreadX/common/src/tx_event_flags_get.c ****     if (and_request == TX_AND)
 132:ThreadX/common/src/tx_event_flags_get.c ****     {
 133:ThreadX/common/src/tx_event_flags_get.c **** 
 134:ThreadX/common/src/tx_event_flags_get.c ****         /* AND request is present.  */
 135:ThreadX/common/src/tx_event_flags_get.c **** 
 136:ThreadX/common/src/tx_event_flags_get.c ****         /* Calculate the flags present.  */
 137:ThreadX/common/src/tx_event_flags_get.c ****         flags_satisfied =  (current_flags & requested_flags);
 138:ThreadX/common/src/tx_event_flags_get.c **** 
 139:ThreadX/common/src/tx_event_flags_get.c ****         /* Determine if they satisfy the AND request.  */
 140:ThreadX/common/src/tx_event_flags_get.c ****         if (flags_satisfied != requested_flags)
 141:ThreadX/common/src/tx_event_flags_get.c ****         {
 142:ThreadX/common/src/tx_event_flags_get.c **** 
 143:ThreadX/common/src/tx_event_flags_get.c ****             /* No, not all the requested flags are present. Clear the flags present variable.  */
 144:ThreadX/common/src/tx_event_flags_get.c ****             flags_satisfied =  ((ULONG) 0);
 145:ThreadX/common/src/tx_event_flags_get.c ****         }
 146:ThreadX/common/src/tx_event_flags_get.c ****     }
 147:ThreadX/common/src/tx_event_flags_get.c ****     else
 148:ThreadX/common/src/tx_event_flags_get.c ****     {
 149:ThreadX/common/src/tx_event_flags_get.c **** 
 150:ThreadX/common/src/tx_event_flags_get.c ****         /* OR request is present. Simply or the requested flags and the current flags.  */
 151:ThreadX/common/src/tx_event_flags_get.c ****         flags_satisfied =  (current_flags & requested_flags);
 152:ThreadX/common/src/tx_event_flags_get.c ****     }
 153:ThreadX/common/src/tx_event_flags_get.c **** 
 154:ThreadX/common/src/tx_event_flags_get.c ****     /* Determine if the request is satisfied.  */
ARM GAS  /tmp/ccul4tRP.s 			page 15


 155:ThreadX/common/src/tx_event_flags_get.c ****     if (flags_satisfied != ((ULONG) 0))
 156:ThreadX/common/src/tx_event_flags_get.c ****     {
 157:ThreadX/common/src/tx_event_flags_get.c **** 
 158:ThreadX/common/src/tx_event_flags_get.c ****         /* Return the actual event flags that satisfied the request.  */
 159:ThreadX/common/src/tx_event_flags_get.c ****         *actual_flags_ptr =  current_flags;
 160:ThreadX/common/src/tx_event_flags_get.c **** 
 161:ThreadX/common/src/tx_event_flags_get.c ****         /* Pickup the clear bit.  */
 162:ThreadX/common/src/tx_event_flags_get.c ****         clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 163:ThreadX/common/src/tx_event_flags_get.c **** 
 164:ThreadX/common/src/tx_event_flags_get.c ****         /* Determine whether or not clearing needs to take place.  */
 165:ThreadX/common/src/tx_event_flags_get.c ****         if (clear_request == TX_TRUE)
 166:ThreadX/common/src/tx_event_flags_get.c ****         {
 167:ThreadX/common/src/tx_event_flags_get.c **** 
 168:ThreadX/common/src/tx_event_flags_get.c ****              /* Yes, clear the flags that satisfied this request.  */
 169:ThreadX/common/src/tx_event_flags_get.c ****              group_ptr -> tx_event_flags_group_current =
 170:ThreadX/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_current & (~requested_fla
 171:ThreadX/common/src/tx_event_flags_get.c ****         }
 172:ThreadX/common/src/tx_event_flags_get.c **** 
 173:ThreadX/common/src/tx_event_flags_get.c ****         /* Return success.  */
 174:ThreadX/common/src/tx_event_flags_get.c ****         status =  TX_SUCCESS;
 175:ThreadX/common/src/tx_event_flags_get.c ****     }
 176:ThreadX/common/src/tx_event_flags_get.c **** 
 177:ThreadX/common/src/tx_event_flags_get.c **** #else
 178:ThreadX/common/src/tx_event_flags_get.c **** 
 179:ThreadX/common/src/tx_event_flags_get.c ****     /* Pickup delayed clear flags.  */
 180:ThreadX/common/src/tx_event_flags_get.c ****     delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
  71              		.loc 1 180 0
  72 000e 066A     		ldr	r6, [r0, #32]
  73              	.LVL3:
 181:ThreadX/common/src/tx_event_flags_get.c **** 
 182:ThreadX/common/src/tx_event_flags_get.c ****     /* Determine if there are any delayed clear operations pending.  */
 183:ThreadX/common/src/tx_event_flags_get.c ****     if (delayed_clear_flags != ((ULONG) 0))
  74              		.loc 1 183 0
  75 0010 0EB1     		cbz	r6, .L2
 184:ThreadX/common/src/tx_event_flags_get.c ****     {
 185:ThreadX/common/src/tx_event_flags_get.c **** 
 186:ThreadX/common/src/tx_event_flags_get.c ****         /* Yes, apply them to the current flags.  */
 187:ThreadX/common/src/tx_event_flags_get.c ****         current_flags =  current_flags & (~delayed_clear_flags);
  76              		.loc 1 187 0
  77 0012 24EA0604 		bic	r4, r4, r6
  78              	.LVL4:
  79              	.L2:
 188:ThreadX/common/src/tx_event_flags_get.c ****     }
 189:ThreadX/common/src/tx_event_flags_get.c **** 
 190:ThreadX/common/src/tx_event_flags_get.c ****     /* Check for AND condition. All flags must be present to satisfy request.  */
 191:ThreadX/common/src/tx_event_flags_get.c ****     if (and_request == TX_AND)
  80              		.loc 1 191 0
  81 0016 002F     		cmp	r7, #0
  82 0018 38D0     		beq	.L3
 192:ThreadX/common/src/tx_event_flags_get.c ****     {
 193:ThreadX/common/src/tx_event_flags_get.c **** 
 194:ThreadX/common/src/tx_event_flags_get.c ****         /* AND request is present.  */
 195:ThreadX/common/src/tx_event_flags_get.c **** 
 196:ThreadX/common/src/tx_event_flags_get.c ****         /* Calculate the flags present.  */
 197:ThreadX/common/src/tx_event_flags_get.c ****         flags_satisfied =  (current_flags & requested_flags);
  83              		.loc 1 197 0
  84 001a 04EA0106 		and	r6, r4, r1
ARM GAS  /tmp/ccul4tRP.s 			page 16


  85              	.LVL5:
 198:ThreadX/common/src/tx_event_flags_get.c **** 
 199:ThreadX/common/src/tx_event_flags_get.c ****         /* Determine if they satisfy the AND request.  */
 200:ThreadX/common/src/tx_event_flags_get.c ****         if (flags_satisfied != requested_flags)
  86              		.loc 1 200 0
  87 001e B142     		cmp	r1, r6
  88 0020 36D0     		beq	.L5
  89              	.L4:
 201:ThreadX/common/src/tx_event_flags_get.c ****         {
 202:ThreadX/common/src/tx_event_flags_get.c **** 
 203:ThreadX/common/src/tx_event_flags_get.c ****             /* No, not all the requested flags are present. Clear the flags present variable.  */
 204:ThreadX/common/src/tx_event_flags_get.c ****             flags_satisfied =  ((ULONG) 0);
 205:ThreadX/common/src/tx_event_flags_get.c ****         }
 206:ThreadX/common/src/tx_event_flags_get.c ****     }
 207:ThreadX/common/src/tx_event_flags_get.c ****     else
 208:ThreadX/common/src/tx_event_flags_get.c ****     {
 209:ThreadX/common/src/tx_event_flags_get.c **** 
 210:ThreadX/common/src/tx_event_flags_get.c ****         /* OR request is present. Simply AND together the requested flags and the current flags
 211:ThreadX/common/src/tx_event_flags_get.c ****            to see if any are present.  */
 212:ThreadX/common/src/tx_event_flags_get.c ****         flags_satisfied =  (current_flags & requested_flags);
 213:ThreadX/common/src/tx_event_flags_get.c ****     }
 214:ThreadX/common/src/tx_event_flags_get.c **** 
 215:ThreadX/common/src/tx_event_flags_get.c ****     /* Determine if the request is satisfied.  */
 216:ThreadX/common/src/tx_event_flags_get.c ****     if (flags_satisfied != ((ULONG) 0))
 217:ThreadX/common/src/tx_event_flags_get.c ****     {
 218:ThreadX/common/src/tx_event_flags_get.c **** 
 219:ThreadX/common/src/tx_event_flags_get.c ****         /* Yes, this request can be handled immediately.  */
 220:ThreadX/common/src/tx_event_flags_get.c **** 
 221:ThreadX/common/src/tx_event_flags_get.c ****         /* Return the actual event flags that satisfied the request.  */
 222:ThreadX/common/src/tx_event_flags_get.c ****         *actual_flags_ptr =  current_flags;
 223:ThreadX/common/src/tx_event_flags_get.c **** 
 224:ThreadX/common/src/tx_event_flags_get.c ****         /* Pickup the clear bit.  */
 225:ThreadX/common/src/tx_event_flags_get.c ****         clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 226:ThreadX/common/src/tx_event_flags_get.c **** 
 227:ThreadX/common/src/tx_event_flags_get.c ****         /* Determine whether or not clearing needs to take place.  */
 228:ThreadX/common/src/tx_event_flags_get.c ****         if (clear_request == TX_TRUE)
 229:ThreadX/common/src/tx_event_flags_get.c ****         {
 230:ThreadX/common/src/tx_event_flags_get.c **** 
 231:ThreadX/common/src/tx_event_flags_get.c ****             /* Set interrupted set request flag to false.  */
 232:ThreadX/common/src/tx_event_flags_get.c ****             interrupted_set_request =  TX_FALSE;
 233:ThreadX/common/src/tx_event_flags_get.c **** 
 234:ThreadX/common/src/tx_event_flags_get.c ****             /* Determine if the suspension list is being processed by an interrupted
 235:ThreadX/common/src/tx_event_flags_get.c ****                set request.  */
 236:ThreadX/common/src/tx_event_flags_get.c ****             if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 237:ThreadX/common/src/tx_event_flags_get.c ****             {
 238:ThreadX/common/src/tx_event_flags_get.c **** 
 239:ThreadX/common/src/tx_event_flags_get.c ****                 if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 240:ThreadX/common/src/tx_event_flags_get.c ****                 {
 241:ThreadX/common/src/tx_event_flags_get.c **** 
 242:ThreadX/common/src/tx_event_flags_get.c ****                     /* Set the interrupted set request flag.  */
 243:ThreadX/common/src/tx_event_flags_get.c ****                     interrupted_set_request =  TX_TRUE;
 244:ThreadX/common/src/tx_event_flags_get.c ****                 }
 245:ThreadX/common/src/tx_event_flags_get.c ****             }
 246:ThreadX/common/src/tx_event_flags_get.c **** 
 247:ThreadX/common/src/tx_event_flags_get.c ****             /* Was a set request interrupted?  */
 248:ThreadX/common/src/tx_event_flags_get.c ****             if (interrupted_set_request == TX_TRUE)
 249:ThreadX/common/src/tx_event_flags_get.c ****             {
ARM GAS  /tmp/ccul4tRP.s 			page 17


 250:ThreadX/common/src/tx_event_flags_get.c **** 
 251:ThreadX/common/src/tx_event_flags_get.c ****                 /* A previous set operation is was interrupted, we need to defer the
 252:ThreadX/common/src/tx_event_flags_get.c ****                    event clearing until the set operation is complete.  */
 253:ThreadX/common/src/tx_event_flags_get.c **** 
 254:ThreadX/common/src/tx_event_flags_get.c ****                 /* Remember the events to clear.  */
 255:ThreadX/common/src/tx_event_flags_get.c ****                 group_ptr -> tx_event_flags_group_delayed_clear =
 256:ThreadX/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_delayed_clear | requested
 257:ThreadX/common/src/tx_event_flags_get.c ****             }
 258:ThreadX/common/src/tx_event_flags_get.c ****             else
 259:ThreadX/common/src/tx_event_flags_get.c ****             {
 260:ThreadX/common/src/tx_event_flags_get.c **** 
 261:ThreadX/common/src/tx_event_flags_get.c ****                 /* Yes, clear the flags that satisfied this request.  */
 262:ThreadX/common/src/tx_event_flags_get.c ****                 group_ptr -> tx_event_flags_group_current =
 263:ThreadX/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_current & ~requested_flag
 264:ThreadX/common/src/tx_event_flags_get.c ****             }
 265:ThreadX/common/src/tx_event_flags_get.c ****         }
 266:ThreadX/common/src/tx_event_flags_get.c **** 
 267:ThreadX/common/src/tx_event_flags_get.c ****         /* Set status to success.  */
 268:ThreadX/common/src/tx_event_flags_get.c ****         status =  TX_SUCCESS;
 269:ThreadX/common/src/tx_event_flags_get.c ****     }
 270:ThreadX/common/src/tx_event_flags_get.c **** 
 271:ThreadX/common/src/tx_event_flags_get.c **** #endif
 272:ThreadX/common/src/tx_event_flags_get.c ****     else
 273:ThreadX/common/src/tx_event_flags_get.c ****     {
 274:ThreadX/common/src/tx_event_flags_get.c **** 
 275:ThreadX/common/src/tx_event_flags_get.c ****         /* Determine if the request specifies suspension.  */
 276:ThreadX/common/src/tx_event_flags_get.c ****         if (wait_option != TX_NO_WAIT)
  90              		.loc 1 276 0
  91 0022 069C     		ldr	r4, [sp, #24]
  92              	.LVL6:
  93 0024 002C     		cmp	r4, #0
  94 0026 51D0     		beq	.L11
 277:ThreadX/common/src/tx_event_flags_get.c ****         {
 278:ThreadX/common/src/tx_event_flags_get.c **** 
 279:ThreadX/common/src/tx_event_flags_get.c ****             /* Determine if the preempt disable flag is non-zero.  */
 280:ThreadX/common/src/tx_event_flags_get.c ****             if (_tx_thread_preempt_disable != ((UINT) 0))
  95              		.loc 1 280 0
  96 0028 2A4C     		ldr	r4, .L15
  97 002a 2468     		ldr	r4, [r4]
  98 002c 002C     		cmp	r4, #0
  99 002e 4FD1     		bne	.L12
 281:ThreadX/common/src/tx_event_flags_get.c ****             {
 282:ThreadX/common/src/tx_event_flags_get.c **** 
 283:ThreadX/common/src/tx_event_flags_get.c ****                 /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
 284:ThreadX/common/src/tx_event_flags_get.c ****                 status =  TX_NO_EVENTS;
 285:ThreadX/common/src/tx_event_flags_get.c ****             }
 286:ThreadX/common/src/tx_event_flags_get.c ****             else
 287:ThreadX/common/src/tx_event_flags_get.c ****             {
 288:ThreadX/common/src/tx_event_flags_get.c **** 
 289:ThreadX/common/src/tx_event_flags_get.c ****                 /* Prepare for suspension of this thread.  */
 290:ThreadX/common/src/tx_event_flags_get.c **** 
 291:ThreadX/common/src/tx_event_flags_get.c **** #ifdef TX_EVENT_FLAGS_ENABLE_PERFORMANCE_INFO
 292:ThreadX/common/src/tx_event_flags_get.c **** 
 293:ThreadX/common/src/tx_event_flags_get.c ****                 /* Increment the total event flags suspensions counter.  */
 294:ThreadX/common/src/tx_event_flags_get.c ****                 _tx_event_flags_performance_suspension_count++;
 295:ThreadX/common/src/tx_event_flags_get.c **** 
 296:ThreadX/common/src/tx_event_flags_get.c ****                 /* Increment the number of event flags suspensions on this semaphore.  */
ARM GAS  /tmp/ccul4tRP.s 			page 18


 297:ThreadX/common/src/tx_event_flags_get.c ****                 group_ptr -> tx_event_flags_group___performance_suspension_count++;
 298:ThreadX/common/src/tx_event_flags_get.c **** #endif
 299:ThreadX/common/src/tx_event_flags_get.c **** 
 300:ThreadX/common/src/tx_event_flags_get.c ****                 /* Pickup thread pointer.  */
 301:ThreadX/common/src/tx_event_flags_get.c ****                 TX_THREAD_GET_CURRENT(thread_ptr)
 100              		.loc 1 301 0
 101 0030 294C     		ldr	r4, .L15+4
 102 0032 2468     		ldr	r4, [r4]
 103              	.LVL7:
 302:ThreadX/common/src/tx_event_flags_get.c **** 
 303:ThreadX/common/src/tx_event_flags_get.c ****                 /* Setup cleanup routine pointer.  */
 304:ThreadX/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 104              		.loc 1 304 0
 105 0034 294E     		ldr	r6, .L15+8
 106              	.LVL8:
 107 0036 A666     		str	r6, [r4, #104]
 108              	.LVL9:
 305:ThreadX/common/src/tx_event_flags_get.c **** 
 306:ThreadX/common/src/tx_event_flags_get.c ****                 /* Remember which event flags we are looking for.  */
 307:ThreadX/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspend_info =  requested_flags;
 109              		.loc 1 307 0
 110 0038 A167     		str	r1, [r4, #120]
 308:ThreadX/common/src/tx_event_flags_get.c **** 
 309:ThreadX/common/src/tx_event_flags_get.c ****                 /* Save the get option as well.  */
 310:ThreadX/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspend_option =  get_option;
 111              		.loc 1 310 0
 112 003a C4F88020 		str	r2, [r4, #128]
 311:ThreadX/common/src/tx_event_flags_get.c **** 
 312:ThreadX/common/src/tx_event_flags_get.c ****                 /* Save the destination for the current events.  */
 313:ThreadX/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 113              		.loc 1 313 0
 114 003e E367     		str	r3, [r4, #124]
 314:ThreadX/common/src/tx_event_flags_get.c **** 
 315:ThreadX/common/src/tx_event_flags_get.c ****                 /* Setup cleanup information, i.e. this event flags group control
 316:ThreadX/common/src/tx_event_flags_get.c ****                    block.  */
 317:ThreadX/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 115              		.loc 1 317 0
 116 0040 E066     		str	r0, [r4, #108]
 318:ThreadX/common/src/tx_event_flags_get.c **** 
 319:ThreadX/common/src/tx_event_flags_get.c **** #ifndef TX_NOT_INTERRUPTABLE
 320:ThreadX/common/src/tx_event_flags_get.c **** 
 321:ThreadX/common/src/tx_event_flags_get.c ****                 /* Increment the suspension sequence number, which is used to identify
 322:ThreadX/common/src/tx_event_flags_get.c ****                    this suspension event.  */
 323:ThreadX/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspension_sequence++;
 117              		.loc 1 323 0
 118 0042 D4F8B030 		ldr	r3, [r4, #176]
 119              	.LVL10:
 120 0046 0133     		adds	r3, r3, #1
 121 0048 C4F8B030 		str	r3, [r4, #176]
 324:ThreadX/common/src/tx_event_flags_get.c **** #endif
 325:ThreadX/common/src/tx_event_flags_get.c **** 
 326:ThreadX/common/src/tx_event_flags_get.c ****                 /* Pickup the suspended count.  */
 327:ThreadX/common/src/tx_event_flags_get.c ****                 suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 122              		.loc 1 327 0
 123 004c 4369     		ldr	r3, [r0, #20]
 124              	.LVL11:
 328:ThreadX/common/src/tx_event_flags_get.c **** 
ARM GAS  /tmp/ccul4tRP.s 			page 19


 329:ThreadX/common/src/tx_event_flags_get.c ****                 /* Setup suspension list.  */
 330:ThreadX/common/src/tx_event_flags_get.c ****                 if (suspended_count == TX_NO_SUSPENSIONS)
 125              		.loc 1 330 0
 126 004e 002B     		cmp	r3, #0
 127 0050 33D1     		bne	.L8
 331:ThreadX/common/src/tx_event_flags_get.c ****                 {
 332:ThreadX/common/src/tx_event_flags_get.c **** 
 333:ThreadX/common/src/tx_event_flags_get.c ****                     /* No other threads are suspended.  Setup the head pointer and
 334:ThreadX/common/src/tx_event_flags_get.c ****                        just setup this threads pointers to itself.  */
 335:ThreadX/common/src/tx_event_flags_get.c ****                     group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 128              		.loc 1 335 0
 129 0052 0461     		str	r4, [r0, #16]
 130              	.LVL12:
 336:ThreadX/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 131              		.loc 1 336 0
 132 0054 2467     		str	r4, [r4, #112]
 337:ThreadX/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 133              		.loc 1 337 0
 134 0056 6467     		str	r4, [r4, #116]
 135              	.LVL13:
 136              	.L9:
 338:ThreadX/common/src/tx_event_flags_get.c ****                 }
 339:ThreadX/common/src/tx_event_flags_get.c ****                 else
 340:ThreadX/common/src/tx_event_flags_get.c ****                 {
 341:ThreadX/common/src/tx_event_flags_get.c **** 
 342:ThreadX/common/src/tx_event_flags_get.c ****                     /* This list is not NULL, add current thread to the end. */
 343:ThreadX/common/src/tx_event_flags_get.c ****                     next_thread =                                   group_ptr -> tx_event_flags_gro
 344:ThreadX/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_next =        next_thread;
 345:ThreadX/common/src/tx_event_flags_get.c ****                     previous_thread =                               next_thread -> tx_thread_suspen
 346:ThreadX/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 347:ThreadX/common/src/tx_event_flags_get.c ****                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
 348:ThreadX/common/src/tx_event_flags_get.c ****                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
 349:ThreadX/common/src/tx_event_flags_get.c ****                 }
 350:ThreadX/common/src/tx_event_flags_get.c **** 
 351:ThreadX/common/src/tx_event_flags_get.c ****                 /* Increment the number of threads suspended.  */
 352:ThreadX/common/src/tx_event_flags_get.c ****                 group_ptr -> tx_event_flags_group_suspended_count++;
 137              		.loc 1 352 0
 138 0058 4369     		ldr	r3, [r0, #20]
 139 005a 0133     		adds	r3, r3, #1
 140 005c 4361     		str	r3, [r0, #20]
 353:ThreadX/common/src/tx_event_flags_get.c **** 
 354:ThreadX/common/src/tx_event_flags_get.c ****                 /* Set the state to suspended.  */
 355:ThreadX/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 141              		.loc 1 355 0
 142 005e 0723     		movs	r3, #7
 143 0060 2363     		str	r3, [r4, #48]
 356:ThreadX/common/src/tx_event_flags_get.c **** 
 357:ThreadX/common/src/tx_event_flags_get.c **** #ifdef TX_NOT_INTERRUPTABLE
 358:ThreadX/common/src/tx_event_flags_get.c **** 
 359:ThreadX/common/src/tx_event_flags_get.c ****                 /* Call actual non-interruptable thread suspension routine.  */
 360:ThreadX/common/src/tx_event_flags_get.c ****                 _tx_thread_system_ni_suspend(thread_ptr, wait_option);
 361:ThreadX/common/src/tx_event_flags_get.c **** 
 362:ThreadX/common/src/tx_event_flags_get.c ****                 /* Return the completion status.  */
 363:ThreadX/common/src/tx_event_flags_get.c ****                 status =  thread_ptr -> tx_thread_suspend_status;
 364:ThreadX/common/src/tx_event_flags_get.c **** #else
 365:ThreadX/common/src/tx_event_flags_get.c **** 
 366:ThreadX/common/src/tx_event_flags_get.c ****                 /* Set the suspending flag.  */
ARM GAS  /tmp/ccul4tRP.s 			page 20


 367:ThreadX/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_suspending =  TX_TRUE;
 144              		.loc 1 367 0
 145 0062 0123     		movs	r3, #1
 146 0064 A363     		str	r3, [r4, #56]
 368:ThreadX/common/src/tx_event_flags_get.c **** 
 369:ThreadX/common/src/tx_event_flags_get.c ****                 /* Setup the timeout period.  */
 370:ThreadX/common/src/tx_event_flags_get.c ****                 thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 147              		.loc 1 370 0
 148 0066 069B     		ldr	r3, [sp, #24]
 149 0068 E364     		str	r3, [r4, #76]
 371:ThreadX/common/src/tx_event_flags_get.c **** 
 372:ThreadX/common/src/tx_event_flags_get.c ****                 /* Temporarily disable preemption.  */
 373:ThreadX/common/src/tx_event_flags_get.c ****                 _tx_thread_preempt_disable++;
 150              		.loc 1 373 0
 151 006a 1A4A     		ldr	r2, .L15
 152 006c 1368     		ldr	r3, [r2]
 153 006e 0133     		adds	r3, r3, #1
 154 0070 1360     		str	r3, [r2]
 155              	.LVL14:
 156              	.LBB20:
 157              	.LBB21:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 158              		.loc 2 562 0
 159              		.syntax unified
 160              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 161 0072 85F31088 		MSR  PRIMASK,r5
 162              	@ 0 "" 2
 163              	.LVL15:
 164              		.thumb
 165              		.syntax unified
 166              	.LBE21:
 167              	.LBE20:
 374:ThreadX/common/src/tx_event_flags_get.c **** 
 375:ThreadX/common/src/tx_event_flags_get.c ****                 /* Restore interrupts.  */
 376:ThreadX/common/src/tx_event_flags_get.c ****                 TX_RESTORE
 377:ThreadX/common/src/tx_event_flags_get.c **** 
 378:ThreadX/common/src/tx_event_flags_get.c ****                 /* Call actual thread suspension routine.  */
 379:ThreadX/common/src/tx_event_flags_get.c ****                 _tx_thread_system_suspend(thread_ptr);
 168              		.loc 1 379 0
 169 0076 2046     		mov	r0, r4
 170              	.LVL16:
 171 0078 FFF7FEFF 		bl	_tx_thread_system_suspend
 172              	.LVL17:
 173              	.LBB22:
 174              	.LBB23:
 175              	.LBB24:
 176              	.LBB25:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 177              		.loc 2 539 0
 178              		.syntax unified
 179              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 180 007c EFF31085 		MRS  r5, PRIMASK 
 181              	@ 0 "" 2
 182              		.thumb
 183              		.syntax unified
 184              	.LBE25:
 185              	.LBE24:
ARM GAS  /tmp/ccul4tRP.s 			page 21


 186              		.loc 2 575 0
 187              		.syntax unified
 188              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 189 0080 72B6     		CPSID i
 190              	@ 0 "" 2
 191              		.thumb
 192              		.syntax unified
 193              	.LBE23:
 194              	.LBE22:
 380:ThreadX/common/src/tx_event_flags_get.c **** 
 381:ThreadX/common/src/tx_event_flags_get.c ****                 /* Disable interrupts.  */
 382:ThreadX/common/src/tx_event_flags_get.c ****                 TX_DISABLE
 383:ThreadX/common/src/tx_event_flags_get.c **** 
 384:ThreadX/common/src/tx_event_flags_get.c ****                 /* Return the completion status.  */
 385:ThreadX/common/src/tx_event_flags_get.c ****                 status =  thread_ptr -> tx_thread_suspend_status;
 195              		.loc 1 385 0
 196 0082 D4F88400 		ldr	r0, [r4, #132]
 197              	.LVL18:
 198              	.L6:
 199              	.LBB26:
 200              	.LBB27:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 201              		.loc 2 562 0
 202              		.syntax unified
 203              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 204 0086 85F31088 		MSR  PRIMASK,r5
 205              	@ 0 "" 2
 206              	.LVL19:
 207              		.thumb
 208              		.syntax unified
 209              	.LBE27:
 210              	.LBE26:
 386:ThreadX/common/src/tx_event_flags_get.c **** #endif
 387:ThreadX/common/src/tx_event_flags_get.c ****             }
 388:ThreadX/common/src/tx_event_flags_get.c ****         }
 389:ThreadX/common/src/tx_event_flags_get.c ****         else
 390:ThreadX/common/src/tx_event_flags_get.c ****         {
 391:ThreadX/common/src/tx_event_flags_get.c **** 
 392:ThreadX/common/src/tx_event_flags_get.c ****             /* Immediate return, return error completion.  */
 393:ThreadX/common/src/tx_event_flags_get.c ****             status =  TX_NO_EVENTS;
 394:ThreadX/common/src/tx_event_flags_get.c ****         }
 395:ThreadX/common/src/tx_event_flags_get.c ****     }
 396:ThreadX/common/src/tx_event_flags_get.c **** 
 397:ThreadX/common/src/tx_event_flags_get.c ****     /* Restore interrupts.  */
 398:ThreadX/common/src/tx_event_flags_get.c ****     TX_RESTORE
 399:ThreadX/common/src/tx_event_flags_get.c **** 
 400:ThreadX/common/src/tx_event_flags_get.c ****     /* Return completion status.  */
 401:ThreadX/common/src/tx_event_flags_get.c ****     return(status);
 402:ThreadX/common/src/tx_event_flags_get.c **** }
 211              		.loc 1 402 0
 212 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 213              	.LVL20:
 214              	.L3:
 212:ThreadX/common/src/tx_event_flags_get.c ****     }
 215              		.loc 1 212 0
 216 008c 04EA0106 		and	r6, r4, r1
 217              	.LVL21:
ARM GAS  /tmp/ccul4tRP.s 			page 22


 218              	.L5:
 216:ThreadX/common/src/tx_event_flags_get.c ****     {
 219              		.loc 1 216 0
 220 0090 002E     		cmp	r6, #0
 221 0092 C6D0     		beq	.L4
 222:ThreadX/common/src/tx_event_flags_get.c **** 
 222              		.loc 1 222 0
 223 0094 1C60     		str	r4, [r3]
 224              	.LVL22:
 228:ThreadX/common/src/tx_event_flags_get.c ****         {
 225              		.loc 1 228 0
 226 0096 12F0010F 		tst	r2, #1
 227 009a 15D0     		beq	.L10
 228              	.LVL23:
 236:ThreadX/common/src/tx_event_flags_get.c ****             {
 229              		.loc 1 236 0
 230 009c 4369     		ldr	r3, [r0, #20]
 231              	.LVL24:
 232 009e 0BB1     		cbz	r3, .L7
 239:ThreadX/common/src/tx_event_flags_get.c ****                 {
 233              		.loc 1 239 0
 234 00a0 0369     		ldr	r3, [r0, #16]
 235 00a2 2BB1     		cbz	r3, .L14
 236              	.L7:
 263:ThreadX/common/src/tx_event_flags_get.c ****             }
 237              		.loc 1 263 0
 238 00a4 8368     		ldr	r3, [r0, #8]
 239 00a6 23EA0101 		bic	r1, r3, r1
 240              	.LVL25:
 262:ThreadX/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_current & ~requested_flag
 241              		.loc 1 262 0
 242 00aa 8160     		str	r1, [r0, #8]
 268:ThreadX/common/src/tx_event_flags_get.c ****     }
 243              		.loc 1 268 0
 244 00ac 0020     		movs	r0, #0
 245              	.LVL26:
 246 00ae EAE7     		b	.L6
 247              	.LVL27:
 248              	.L14:
 256:ThreadX/common/src/tx_event_flags_get.c ****             }
 249              		.loc 1 256 0
 250 00b0 036A     		ldr	r3, [r0, #32]
 251 00b2 1943     		orrs	r1, r1, r3
 252              	.LVL28:
 255:ThreadX/common/src/tx_event_flags_get.c ****                                         group_ptr -> tx_event_flags_group_delayed_clear | requested
 253              		.loc 1 255 0
 254 00b4 0162     		str	r1, [r0, #32]
 268:ThreadX/common/src/tx_event_flags_get.c ****     }
 255              		.loc 1 268 0
 256 00b6 0020     		movs	r0, #0
 257              	.LVL29:
 258 00b8 E5E7     		b	.L6
 259              	.LVL30:
 260              	.L8:
 343:ThreadX/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_next =        next_thread;
 261              		.loc 1 343 0
 262 00ba 0369     		ldr	r3, [r0, #16]
ARM GAS  /tmp/ccul4tRP.s 			page 23


 263              	.LVL31:
 344:ThreadX/common/src/tx_event_flags_get.c ****                     previous_thread =                               next_thread -> tx_thread_suspen
 264              		.loc 1 344 0
 265 00bc 2367     		str	r3, [r4, #112]
 266              	.LVL32:
 345:ThreadX/common/src/tx_event_flags_get.c ****                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 267              		.loc 1 345 0
 268 00be 5A6F     		ldr	r2, [r3, #116]
 269              	.LVL33:
 346:ThreadX/common/src/tx_event_flags_get.c ****                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
 270              		.loc 1 346 0
 271 00c0 6267     		str	r2, [r4, #116]
 347:ThreadX/common/src/tx_event_flags_get.c ****                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
 272              		.loc 1 347 0
 273 00c2 1467     		str	r4, [r2, #112]
 274              	.LVL34:
 348:ThreadX/common/src/tx_event_flags_get.c ****                 }
 275              		.loc 1 348 0
 276 00c4 5C67     		str	r4, [r3, #116]
 277 00c6 C7E7     		b	.L9
 278              	.LVL35:
 279              	.L10:
 268:ThreadX/common/src/tx_event_flags_get.c ****     }
 280              		.loc 1 268 0
 281 00c8 0020     		movs	r0, #0
 282              	.LVL36:
 283 00ca DCE7     		b	.L6
 284              	.LVL37:
 285              	.L11:
 393:ThreadX/common/src/tx_event_flags_get.c ****         }
 286              		.loc 1 393 0
 287 00cc 0720     		movs	r0, #7
 288              	.LVL38:
 289 00ce DAE7     		b	.L6
 290              	.LVL39:
 291              	.L12:
 284:ThreadX/common/src/tx_event_flags_get.c ****             }
 292              		.loc 1 284 0
 293 00d0 0720     		movs	r0, #7
 294              	.LVL40:
 295 00d2 D8E7     		b	.L6
 296              	.L16:
 297              		.align	2
 298              	.L15:
 299 00d4 00000000 		.word	_tx_thread_preempt_disable
 300 00d8 00000000 		.word	_tx_thread_current_ptr
 301 00dc 00000000 		.word	_tx_event_flags_cleanup
 302              		.cfi_endproc
 303              	.LFE8:
 305              		.text
 306              	.Letext0:
 307              		.file 3 "/usr/include/newlib/sys/lock.h"
 308              		.file 4 "/usr/include/newlib/sys/_types.h"
 309              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 310              		.file 6 "/usr/include/newlib/sys/reent.h"
 311              		.file 7 "/usr/include/newlib/stdlib.h"
 312              		.file 8 "ThreadX/common/inc/tx_api.h"
ARM GAS  /tmp/ccul4tRP.s 			page 24


 313              		.file 9 "ThreadX/common/inc/tx_thread.h"
 314              		.file 10 "ThreadX/common/inc/tx_event_flags.h"
ARM GAS  /tmp/ccul4tRP.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_event_flags_get.c
     /tmp/ccul4tRP.s:18     .text._tx_event_flags_get:0000000000000000 $t
     /tmp/ccul4tRP.s:25     .text._tx_event_flags_get:0000000000000000 _tx_event_flags_get
     /tmp/ccul4tRP.s:299    .text._tx_event_flags_get:00000000000000d4 $d

UNDEFINED SYMBOLS
_tx_thread_system_suspend
_tx_thread_preempt_disable
_tx_thread_current_ptr
_tx_event_flags_cleanup
