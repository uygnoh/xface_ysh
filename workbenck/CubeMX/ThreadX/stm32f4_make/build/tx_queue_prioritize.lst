ARM GAS  /tmp/ccqnLnid.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_queue_prioritize.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_queue_prioritize,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_queue_prioritize
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_queue_prioritize:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_queue_prioritize.c"
   1:ThreadX/common/src/tx_queue_prioritize.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
   3:ThreadX/common/src/tx_queue_prioritize.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
   5:ThreadX/common/src/tx_queue_prioritize.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_queue_prioritize.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_queue_prioritize.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_queue_prioritize.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  10:ThreadX/common/src/tx_queue_prioritize.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_queue_prioritize.c **** 
  12:ThreadX/common/src/tx_queue_prioritize.c **** 
  13:ThreadX/common/src/tx_queue_prioritize.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_queue_prioritize.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_queue_prioritize.c **** /**                                                                       */
  16:ThreadX/common/src/tx_queue_prioritize.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_queue_prioritize.c **** /**                                                                       */
  18:ThreadX/common/src/tx_queue_prioritize.c **** /**   Queue                                                               */
  19:ThreadX/common/src/tx_queue_prioritize.c **** /**                                                                       */
  20:ThreadX/common/src/tx_queue_prioritize.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_queue_prioritize.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_queue_prioritize.c **** 
  23:ThreadX/common/src/tx_queue_prioritize.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_queue_prioritize.c **** 
  25:ThreadX/common/src/tx_queue_prioritize.c **** 
  26:ThreadX/common/src/tx_queue_prioritize.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_queue_prioritize.c **** 
  28:ThreadX/common/src/tx_queue_prioritize.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_queue_prioritize.c **** #include "tx_trace.h"
  30:ThreadX/common/src/tx_queue_prioritize.c **** #include "tx_thread.h"
  31:ThreadX/common/src/tx_queue_prioritize.c **** #include "tx_queue.h"
ARM GAS  /tmp/ccqnLnid.s 			page 2


  32:ThreadX/common/src/tx_queue_prioritize.c **** 
  33:ThreadX/common/src/tx_queue_prioritize.c **** 
  34:ThreadX/common/src/tx_queue_prioritize.c **** /**************************************************************************/
  35:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  36:ThreadX/common/src/tx_queue_prioritize.c **** /*  FUNCTION                                               RELEASE        */
  37:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  38:ThreadX/common/src/tx_queue_prioritize.c **** /*    _tx_queue_prioritize                                PORTABLE C      */
  39:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                           6.1          */
  40:ThreadX/common/src/tx_queue_prioritize.c **** /*  AUTHOR                                                                */
  41:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  42:ThreadX/common/src/tx_queue_prioritize.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  44:ThreadX/common/src/tx_queue_prioritize.c **** /*  DESCRIPTION                                                           */
  45:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  46:ThreadX/common/src/tx_queue_prioritize.c **** /*    This function places the highest priority suspended thread at the   */
  47:ThreadX/common/src/tx_queue_prioritize.c **** /*    front of the suspension list.  All other threads remain in the same */
  48:ThreadX/common/src/tx_queue_prioritize.c **** /*    FIFO suspension order.                                              */
  49:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  50:ThreadX/common/src/tx_queue_prioritize.c **** /*  INPUT                                                                 */
  51:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  52:ThreadX/common/src/tx_queue_prioritize.c **** /*    queue_ptr                         Pointer to queue control block    */
  53:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  54:ThreadX/common/src/tx_queue_prioritize.c **** /*  OUTPUT                                                                */
  55:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  56:ThreadX/common/src/tx_queue_prioritize.c **** /*    status                            Completion status                 */
  57:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  58:ThreadX/common/src/tx_queue_prioritize.c **** /*  CALLS                                                                 */
  59:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  60:ThreadX/common/src/tx_queue_prioritize.c **** /*    _tx_thread_system_preempt_check   Check for preemption              */
  61:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  62:ThreadX/common/src/tx_queue_prioritize.c **** /*  CALLED BY                                                             */
  63:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  64:ThreadX/common/src/tx_queue_prioritize.c **** /*    Application Code                                                    */
  65:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  66:ThreadX/common/src/tx_queue_prioritize.c **** /*  RELEASE HISTORY                                                       */
  67:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  68:ThreadX/common/src/tx_queue_prioritize.c **** /*    DATE              NAME                      DESCRIPTION             */
  69:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  70:ThreadX/common/src/tx_queue_prioritize.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  71:ThreadX/common/src/tx_queue_prioritize.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  72:ThreadX/common/src/tx_queue_prioritize.c **** /*                                            resulting in version 6.1    */
  73:ThreadX/common/src/tx_queue_prioritize.c **** /*                                                                        */
  74:ThreadX/common/src/tx_queue_prioritize.c **** /**************************************************************************/
  75:ThreadX/common/src/tx_queue_prioritize.c **** UINT  _tx_queue_prioritize(TX_QUEUE *queue_ptr)
  76:ThreadX/common/src/tx_queue_prioritize.c **** {
  28              		.loc 1 76 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 3, -24
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
ARM GAS  /tmp/ccqnLnid.s 			page 3


  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42              	.LBB20:
  43              	.LBB21:
  44              	.LBB22:
  45              	.LBB23:
  46              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
ARM GAS  /tmp/ccqnLnid.s 			page 4


  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
ARM GAS  /tmp/ccqnLnid.s 			page 5


 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
ARM GAS  /tmp/ccqnLnid.s 			page 6


 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
ARM GAS  /tmp/ccqnLnid.s 			page 7


 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
ARM GAS  /tmp/ccqnLnid.s 			page 8


 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccqnLnid.s 			page 9


 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
ARM GAS  /tmp/ccqnLnid.s 			page 10


 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccqnLnid.s 			page 11


 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
ARM GAS  /tmp/ccqnLnid.s 			page 12


 507:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  47              		.loc 2 539 0
  48              		.syntax unified
  49              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  50 0002 EFF31084 		MRS  r4, PRIMASK 
  51              	@ 0 "" 2
  52              		.thumb
  53              		.syntax unified
  54              	.LBE23:
  55              	.LBE22:
 540:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/ccqnLnid.s 			page 13


 555:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
 567:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
 569:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
 571:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  56              		.loc 2 575 0
  57              		.syntax unified
  58              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  59 0006 72B6     		CPSID i
  60              	@ 0 "" 2
  61              		.thumb
  62              		.syntax unified
  63              	.LBE21:
  64              	.LBE20:
  77:ThreadX/common/src/tx_queue_prioritize.c **** 
  78:ThreadX/common/src/tx_queue_prioritize.c **** TX_INTERRUPT_SAVE_AREA
  79:ThreadX/common/src/tx_queue_prioritize.c **** 
  80:ThreadX/common/src/tx_queue_prioritize.c **** TX_THREAD       *thread_ptr;
  81:ThreadX/common/src/tx_queue_prioritize.c **** TX_THREAD       *priority_thread_ptr;
  82:ThreadX/common/src/tx_queue_prioritize.c **** TX_THREAD       *head_ptr;
  83:ThreadX/common/src/tx_queue_prioritize.c **** UINT            suspended_count;
  84:ThreadX/common/src/tx_queue_prioritize.c **** TX_THREAD       *next_thread;
  85:ThreadX/common/src/tx_queue_prioritize.c **** TX_THREAD       *previous_thread;
  86:ThreadX/common/src/tx_queue_prioritize.c **** UINT            list_changed;
  87:ThreadX/common/src/tx_queue_prioritize.c **** 
  88:ThreadX/common/src/tx_queue_prioritize.c **** 
  89:ThreadX/common/src/tx_queue_prioritize.c ****     /* Disable interrupts to place message in the queue.  */
  90:ThreadX/common/src/tx_queue_prioritize.c ****     TX_DISABLE
  91:ThreadX/common/src/tx_queue_prioritize.c **** 
  92:ThreadX/common/src/tx_queue_prioritize.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
  93:ThreadX/common/src/tx_queue_prioritize.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_PRIORITIZE, queue_ptr, queue_ptr -> tx_queue_suspended_c
  94:ThreadX/common/src/tx_queue_prioritize.c **** 
  95:ThreadX/common/src/tx_queue_prioritize.c ****     /* Log this kernel call.  */
  96:ThreadX/common/src/tx_queue_prioritize.c ****     TX_EL_QUEUE_PRIORITIZE_INSERT
  97:ThreadX/common/src/tx_queue_prioritize.c **** 
  98:ThreadX/common/src/tx_queue_prioritize.c ****     /* Pickup the suspended count.  */
  99:ThreadX/common/src/tx_queue_prioritize.c ****     suspended_count =  queue_ptr -> tx_queue_suspended_count;
  65              		.loc 1 99 0
  66 0008 C56A     		ldr	r5, [r0, #44]
  67              	.LVL1:
 100:ThreadX/common/src/tx_queue_prioritize.c **** 
ARM GAS  /tmp/ccqnLnid.s 			page 14


 101:ThreadX/common/src/tx_queue_prioritize.c ****     /* Determine if there are fewer than 2 suspended threads.  */
 102:ThreadX/common/src/tx_queue_prioritize.c ****     if (suspended_count < ((UINT) 2))
  68              		.loc 1 102 0
  69 000a 012D     		cmp	r5, #1
  70 000c 09D9     		bls	.L13
 103:ThreadX/common/src/tx_queue_prioritize.c ****     {
 104:ThreadX/common/src/tx_queue_prioritize.c **** 
 105:ThreadX/common/src/tx_queue_prioritize.c ****         /* Restore interrupts.  */
 106:ThreadX/common/src/tx_queue_prioritize.c ****         TX_RESTORE
 107:ThreadX/common/src/tx_queue_prioritize.c ****     }
 108:ThreadX/common/src/tx_queue_prioritize.c **** 
 109:ThreadX/common/src/tx_queue_prioritize.c ****     /* Determine if there how many threads are suspended on this queue.  */
 110:ThreadX/common/src/tx_queue_prioritize.c ****     else if (suspended_count == ((UINT) 2))
  71              		.loc 1 110 0
  72 000e 022D     		cmp	r5, #2
  73 0010 0AD0     		beq	.L14
 111:ThreadX/common/src/tx_queue_prioritize.c ****     {
 112:ThreadX/common/src/tx_queue_prioritize.c **** 
 113:ThreadX/common/src/tx_queue_prioritize.c ****         /* Pickup the head pointer and the next pointer.  */
 114:ThreadX/common/src/tx_queue_prioritize.c ****         head_ptr =  queue_ptr -> tx_queue_suspension_list;
 115:ThreadX/common/src/tx_queue_prioritize.c ****         next_thread =  head_ptr -> tx_thread_suspended_next;
 116:ThreadX/common/src/tx_queue_prioritize.c **** 
 117:ThreadX/common/src/tx_queue_prioritize.c ****         /* Determine if the next suspended thread has a higher priority.  */
 118:ThreadX/common/src/tx_queue_prioritize.c ****         if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 119:ThreadX/common/src/tx_queue_prioritize.c ****         {
 120:ThreadX/common/src/tx_queue_prioritize.c **** 
 121:ThreadX/common/src/tx_queue_prioritize.c ****             /* Yes, move the list head to the next thread.  */
 122:ThreadX/common/src/tx_queue_prioritize.c ****             queue_ptr -> tx_queue_suspension_list =  next_thread;
 123:ThreadX/common/src/tx_queue_prioritize.c ****         }
 124:ThreadX/common/src/tx_queue_prioritize.c **** 
 125:ThreadX/common/src/tx_queue_prioritize.c ****         /* Restore interrupts.  */
 126:ThreadX/common/src/tx_queue_prioritize.c ****         TX_RESTORE
 127:ThreadX/common/src/tx_queue_prioritize.c ****     }
 128:ThreadX/common/src/tx_queue_prioritize.c ****     else
 129:ThreadX/common/src/tx_queue_prioritize.c ****     {
 130:ThreadX/common/src/tx_queue_prioritize.c **** 
 131:ThreadX/common/src/tx_queue_prioritize.c ****         /* Remember the suspension count and head pointer.  */
 132:ThreadX/common/src/tx_queue_prioritize.c ****         head_ptr =   queue_ptr -> tx_queue_suspension_list;
  74              		.loc 1 132 0
  75 0012 836A     		ldr	r3, [r0, #40]
  76              	.LVL2:
 133:ThreadX/common/src/tx_queue_prioritize.c **** 
 134:ThreadX/common/src/tx_queue_prioritize.c ****         /* Default the highest priority thread to the thread at the front of the list.  */
 135:ThreadX/common/src/tx_queue_prioritize.c ****         priority_thread_ptr =  head_ptr;
 136:ThreadX/common/src/tx_queue_prioritize.c **** 
 137:ThreadX/common/src/tx_queue_prioritize.c ****         /* Setup search pointer.  */
 138:ThreadX/common/src/tx_queue_prioritize.c ****         thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
  77              		.loc 1 138 0
  78 0014 1A6F     		ldr	r2, [r3, #112]
  79              	.LVL3:
 139:ThreadX/common/src/tx_queue_prioritize.c **** 
 140:ThreadX/common/src/tx_queue_prioritize.c ****         /* Disable preemption.  */
 141:ThreadX/common/src/tx_queue_prioritize.c ****         _tx_thread_preempt_disable++;
  80              		.loc 1 141 0
  81 0016 214E     		ldr	r6, .L17
  82 0018 3168     		ldr	r1, [r6]
  83 001a 0131     		adds	r1, r1, #1
ARM GAS  /tmp/ccqnLnid.s 			page 15


  84 001c 3160     		str	r1, [r6]
  85              	.LVL4:
 132:ThreadX/common/src/tx_queue_prioritize.c **** 
  86              		.loc 1 132 0
  87 001e 1946     		mov	r1, r3
  88 0020 1AE0     		b	.L9
  89              	.LVL5:
  90              	.L13:
  91              	.LBB24:
  92              	.LBB25:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  93              		.loc 2 562 0
  94              		.syntax unified
  95              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  96 0022 84F31088 		MSR  PRIMASK,r4
  97              	@ 0 "" 2
  98              		.thumb
  99              		.syntax unified
 100 0026 37E0     		b	.L3
 101              	.LVL6:
 102              	.L14:
 103              	.LBE25:
 104              	.LBE24:
 114:ThreadX/common/src/tx_queue_prioritize.c ****         next_thread =  head_ptr -> tx_thread_suspended_next;
 105              		.loc 1 114 0
 106 0028 836A     		ldr	r3, [r0, #40]
 107              	.LVL7:
 115:ThreadX/common/src/tx_queue_prioritize.c **** 
 108              		.loc 1 115 0
 109 002a 1A6F     		ldr	r2, [r3, #112]
 110              	.LVL8:
 118:ThreadX/common/src/tx_queue_prioritize.c ****         {
 111              		.loc 1 118 0
 112 002c D16A     		ldr	r1, [r2, #44]
 113 002e DB6A     		ldr	r3, [r3, #44]
 114              	.LVL9:
 115 0030 9942     		cmp	r1, r3
 116 0032 00D2     		bcs	.L5
 122:ThreadX/common/src/tx_queue_prioritize.c ****         }
 117              		.loc 1 122 0
 118 0034 8262     		str	r2, [r0, #40]
 119              	.LVL10:
 120              	.L5:
 121              	.LBB26:
 122              	.LBB27:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 123              		.loc 2 562 0
 124              		.syntax unified
 125              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 126 0036 84F31088 		MSR  PRIMASK,r4
 127              	@ 0 "" 2
 128              		.thumb
 129              		.syntax unified
 130 003a 2DE0     		b	.L3
 131              	.LVL11:
 132              	.L11:
 133              	.LBE27:
ARM GAS  /tmp/ccqnLnid.s 			page 16


 134              	.LBE26:
 142:ThreadX/common/src/tx_queue_prioritize.c **** 
 143:ThreadX/common/src/tx_queue_prioritize.c ****         /* Set the list changed flag to false.  */
 144:ThreadX/common/src/tx_queue_prioritize.c ****         list_changed =  TX_FALSE;
 145:ThreadX/common/src/tx_queue_prioritize.c **** 
 146:ThreadX/common/src/tx_queue_prioritize.c ****         /* Search through the list to find the highest priority thread.  */
 147:ThreadX/common/src/tx_queue_prioritize.c ****         do
 148:ThreadX/common/src/tx_queue_prioritize.c ****         {
 149:ThreadX/common/src/tx_queue_prioritize.c **** 
 150:ThreadX/common/src/tx_queue_prioritize.c ****             /* Is the current thread higher priority?  */
 151:ThreadX/common/src/tx_queue_prioritize.c ****             if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 152:ThreadX/common/src/tx_queue_prioritize.c ****             {
 153:ThreadX/common/src/tx_queue_prioritize.c **** 
 154:ThreadX/common/src/tx_queue_prioritize.c ****                 /* Yes, remember that this thread is the highest priority.  */
 155:ThreadX/common/src/tx_queue_prioritize.c ****                 priority_thread_ptr =  thread_ptr;
 135              		.loc 1 155 0
 136 003c 1646     		mov	r6, r2
 137              	.L6:
 138              	.LVL12:
 139              	.LBB28:
 140              	.LBB29:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141              		.loc 2 562 0
 142              		.syntax unified
 143              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 144 003e 84F31088 		MSR  PRIMASK,r4
 145              	@ 0 "" 2
 146              	.LVL13:
 147              		.thumb
 148              		.syntax unified
 149              	.LBE29:
 150              	.LBE28:
 151              	.LBB30:
 152              	.LBB31:
 153              	.LBB32:
 154              	.LBB33:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 155              		.loc 2 539 0
 156              		.syntax unified
 157              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 158 0042 EFF31084 		MRS  r4, PRIMASK 
 159              	@ 0 "" 2
 160              	.LVL14:
 161              		.thumb
 162              		.syntax unified
 163              	.LBE33:
 164              	.LBE32:
 165              		.loc 2 575 0
 166              		.syntax unified
 167              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 168 0046 72B6     		CPSID i
 169              	@ 0 "" 2
 170              		.thumb
 171              		.syntax unified
 172              	.LBE31:
 173              	.LBE30:
 156:ThreadX/common/src/tx_queue_prioritize.c ****             }
ARM GAS  /tmp/ccqnLnid.s 			page 17


 157:ThreadX/common/src/tx_queue_prioritize.c **** 
 158:ThreadX/common/src/tx_queue_prioritize.c ****             /* Restore interrupts temporarily.  */
 159:ThreadX/common/src/tx_queue_prioritize.c ****             TX_RESTORE
 160:ThreadX/common/src/tx_queue_prioritize.c **** 
 161:ThreadX/common/src/tx_queue_prioritize.c ****             /* Disable interrupts again.  */
 162:ThreadX/common/src/tx_queue_prioritize.c ****             TX_DISABLE
 163:ThreadX/common/src/tx_queue_prioritize.c **** 
 164:ThreadX/common/src/tx_queue_prioritize.c ****             /* Determine if any changes to the list have occurred while
 165:ThreadX/common/src/tx_queue_prioritize.c ****                interrupts were enabled.  */
 166:ThreadX/common/src/tx_queue_prioritize.c **** 
 167:ThreadX/common/src/tx_queue_prioritize.c ****             /* Is the list head the same?  */
 168:ThreadX/common/src/tx_queue_prioritize.c ****             if (head_ptr != queue_ptr -> tx_queue_suspension_list)
 174              		.loc 1 168 0
 175 0048 836A     		ldr	r3, [r0, #40]
 176 004a 8B42     		cmp	r3, r1
 177 004c 0AD0     		beq	.L15
 178              	.L7:
 179              	.LVL15:
 169:ThreadX/common/src/tx_queue_prioritize.c ****             {
 170:ThreadX/common/src/tx_queue_prioritize.c **** 
 171:ThreadX/common/src/tx_queue_prioritize.c ****                 /* The list head has changed, set the list changed flag.  */
 172:ThreadX/common/src/tx_queue_prioritize.c ****                 list_changed =  TX_TRUE;
 173:ThreadX/common/src/tx_queue_prioritize.c ****             }
 174:ThreadX/common/src/tx_queue_prioritize.c ****             else
 175:ThreadX/common/src/tx_queue_prioritize.c ****             {
 176:ThreadX/common/src/tx_queue_prioritize.c **** 
 177:ThreadX/common/src/tx_queue_prioritize.c ****                 /* Is the suspended count the same?  */
 178:ThreadX/common/src/tx_queue_prioritize.c ****                 if (suspended_count != queue_ptr -> tx_queue_suspended_count)
 179:ThreadX/common/src/tx_queue_prioritize.c ****                 {
 180:ThreadX/common/src/tx_queue_prioritize.c **** 
 181:ThreadX/common/src/tx_queue_prioritize.c ****                     /* The list head has changed, set the list changed flag.  */
 182:ThreadX/common/src/tx_queue_prioritize.c ****                     list_changed =  TX_TRUE;
 183:ThreadX/common/src/tx_queue_prioritize.c ****                 }
 184:ThreadX/common/src/tx_queue_prioritize.c ****             }
 185:ThreadX/common/src/tx_queue_prioritize.c **** 
 186:ThreadX/common/src/tx_queue_prioritize.c ****             /* Determine if the list has changed.  */
 187:ThreadX/common/src/tx_queue_prioritize.c ****             if (list_changed == TX_FALSE)
 188:ThreadX/common/src/tx_queue_prioritize.c ****             {
 189:ThreadX/common/src/tx_queue_prioritize.c **** 
 190:ThreadX/common/src/tx_queue_prioritize.c ****                 /* Move the thread pointer to the next thread.  */
 191:ThreadX/common/src/tx_queue_prioritize.c ****                 thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 192:ThreadX/common/src/tx_queue_prioritize.c ****             }
 193:ThreadX/common/src/tx_queue_prioritize.c ****             else
 194:ThreadX/common/src/tx_queue_prioritize.c ****             {
 195:ThreadX/common/src/tx_queue_prioritize.c **** 
 196:ThreadX/common/src/tx_queue_prioritize.c ****                 /* Save the suspension count and head pointer.  */
 197:ThreadX/common/src/tx_queue_prioritize.c ****                 head_ptr =   queue_ptr -> tx_queue_suspension_list;
 198:ThreadX/common/src/tx_queue_prioritize.c ****                 suspended_count =  queue_ptr -> tx_queue_suspended_count;
 180              		.loc 1 198 0
 181 004e C56A     		ldr	r5, [r0, #44]
 182              	.LVL16:
 199:ThreadX/common/src/tx_queue_prioritize.c **** 
 200:ThreadX/common/src/tx_queue_prioritize.c ****                 /* Default the highest priority thread to the thread at the front of the list.  */
 201:ThreadX/common/src/tx_queue_prioritize.c ****                 priority_thread_ptr =  head_ptr;
 202:ThreadX/common/src/tx_queue_prioritize.c **** 
 203:ThreadX/common/src/tx_queue_prioritize.c ****                 /* Setup search pointer.  */
 204:ThreadX/common/src/tx_queue_prioritize.c ****                 thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
ARM GAS  /tmp/ccqnLnid.s 			page 18


 183              		.loc 1 204 0
 184 0050 1A6F     		ldr	r2, [r3, #112]
 185              	.LVL17:
 197:ThreadX/common/src/tx_queue_prioritize.c ****                 suspended_count =  queue_ptr -> tx_queue_suspended_count;
 186              		.loc 1 197 0
 187 0052 1946     		mov	r1, r3
 188              	.LVL18:
 189              	.L8:
 205:ThreadX/common/src/tx_queue_prioritize.c **** 
 206:ThreadX/common/src/tx_queue_prioritize.c ****                 /* Reset the list changed flag.  */
 207:ThreadX/common/src/tx_queue_prioritize.c ****                 list_changed =  TX_FALSE;
 208:ThreadX/common/src/tx_queue_prioritize.c ****             }
 209:ThreadX/common/src/tx_queue_prioritize.c **** 
 210:ThreadX/common/src/tx_queue_prioritize.c ****         } while (thread_ptr != head_ptr);
 190              		.loc 1 210 0
 191 0054 8A42     		cmp	r2, r1
 192 0056 0BD0     		beq	.L16
 193              	.L9:
 194              	.LVL19:
 151:ThreadX/common/src/tx_queue_prioritize.c ****             {
 195              		.loc 1 151 0
 196 0058 D76A     		ldr	r7, [r2, #44]
 197 005a DE6A     		ldr	r6, [r3, #44]
 198 005c B742     		cmp	r7, r6
 199 005e EDD3     		bcc	.L11
 200 0060 1E46     		mov	r6, r3
 201 0062 ECE7     		b	.L6
 202              	.LVL20:
 203              	.L15:
 178:ThreadX/common/src/tx_queue_prioritize.c ****                 {
 204              		.loc 1 178 0
 205 0064 C76A     		ldr	r7, [r0, #44]
 206 0066 AF42     		cmp	r7, r5
 207 0068 F1D1     		bne	.L7
 191:ThreadX/common/src/tx_queue_prioritize.c ****             }
 208              		.loc 1 191 0
 209 006a 126F     		ldr	r2, [r2, #112]
 210              	.LVL21:
 211 006c 3346     		mov	r3, r6
 212 006e F1E7     		b	.L8
 213              	.LVL22:
 214              	.L16:
 211:ThreadX/common/src/tx_queue_prioritize.c **** 
 212:ThreadX/common/src/tx_queue_prioritize.c ****         /* Release preemption.  */
 213:ThreadX/common/src/tx_queue_prioritize.c ****         _tx_thread_preempt_disable--;
 215              		.loc 1 213 0
 216 0070 0A4D     		ldr	r5, .L17
 217              	.LVL23:
 218 0072 2A68     		ldr	r2, [r5]
 219              	.LVL24:
 220 0074 013A     		subs	r2, r2, #1
 221 0076 2A60     		str	r2, [r5]
 214:ThreadX/common/src/tx_queue_prioritize.c **** 
 215:ThreadX/common/src/tx_queue_prioritize.c ****         /* Now determine if the highest priority thread is at the front
 216:ThreadX/common/src/tx_queue_prioritize.c ****            of the list.  */
 217:ThreadX/common/src/tx_queue_prioritize.c ****         if (priority_thread_ptr != head_ptr)
 222              		.loc 1 217 0
ARM GAS  /tmp/ccqnLnid.s 			page 19


 223 0078 8B42     		cmp	r3, r1
 224 007a 09D0     		beq	.L10
 218:ThreadX/common/src/tx_queue_prioritize.c ****         {
 219:ThreadX/common/src/tx_queue_prioritize.c **** 
 220:ThreadX/common/src/tx_queue_prioritize.c ****             /* No, we need to move the highest priority suspended thread to the
 221:ThreadX/common/src/tx_queue_prioritize.c ****                front of the list.  */
 222:ThreadX/common/src/tx_queue_prioritize.c **** 
 223:ThreadX/common/src/tx_queue_prioritize.c ****             /* First, remove the highest priority thread by updating the
 224:ThreadX/common/src/tx_queue_prioritize.c ****                adjacent suspended threads.  */
 225:ThreadX/common/src/tx_queue_prioritize.c ****             next_thread =                                  priority_thread_ptr -> tx_thread_suspend
 225              		.loc 1 225 0
 226 007c 1D6F     		ldr	r5, [r3, #112]
 227              	.LVL25:
 226:ThreadX/common/src/tx_queue_prioritize.c ****             previous_thread =                              priority_thread_ptr -> tx_thread_suspend
 228              		.loc 1 226 0
 229 007e 5A6F     		ldr	r2, [r3, #116]
 230              	.LVL26:
 227:ThreadX/common/src/tx_queue_prioritize.c ****             next_thread -> tx_thread_suspended_previous =  previous_thread;
 231              		.loc 1 227 0
 232 0080 6A67     		str	r2, [r5, #116]
 228:ThreadX/common/src/tx_queue_prioritize.c ****             previous_thread -> tx_thread_suspended_next =  next_thread;
 233              		.loc 1 228 0
 234 0082 1567     		str	r5, [r2, #112]
 229:ThreadX/common/src/tx_queue_prioritize.c **** 
 230:ThreadX/common/src/tx_queue_prioritize.c ****             /* Now, link the highest priority thread at the front of the list.  */
 231:ThreadX/common/src/tx_queue_prioritize.c ****             previous_thread =                                      head_ptr -> tx_thread_suspended_
 235              		.loc 1 231 0
 236 0084 4A6F     		ldr	r2, [r1, #116]
 237              	.LVL27:
 232:ThreadX/common/src/tx_queue_prioritize.c ****             priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 238              		.loc 1 232 0
 239 0086 1967     		str	r1, [r3, #112]
 233:ThreadX/common/src/tx_queue_prioritize.c ****             priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 240              		.loc 1 233 0
 241 0088 5A67     		str	r2, [r3, #116]
 234:ThreadX/common/src/tx_queue_prioritize.c ****             previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 242              		.loc 1 234 0
 243 008a 1367     		str	r3, [r2, #112]
 235:ThreadX/common/src/tx_queue_prioritize.c ****             head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 244              		.loc 1 235 0
 245 008c 4B67     		str	r3, [r1, #116]
 236:ThreadX/common/src/tx_queue_prioritize.c **** 
 237:ThreadX/common/src/tx_queue_prioritize.c ****             /* Move the list head pointer to the highest priority suspended thread.  */
 238:ThreadX/common/src/tx_queue_prioritize.c ****             queue_ptr -> tx_queue_suspension_list =  priority_thread_ptr;
 246              		.loc 1 238 0
 247 008e 8362     		str	r3, [r0, #40]
 248              	.LVL28:
 249              	.L10:
 250              	.LBB34:
 251              	.LBB35:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 252              		.loc 2 562 0
 253              		.syntax unified
 254              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 255 0090 84F31088 		MSR  PRIMASK,r4
 256              	@ 0 "" 2
 257              	.LVL29:
ARM GAS  /tmp/ccqnLnid.s 			page 20


 258              		.thumb
 259              		.syntax unified
 260              	.LBE35:
 261              	.LBE34:
 239:ThreadX/common/src/tx_queue_prioritize.c ****         }
 240:ThreadX/common/src/tx_queue_prioritize.c **** 
 241:ThreadX/common/src/tx_queue_prioritize.c ****         /* Restore interrupts.  */
 242:ThreadX/common/src/tx_queue_prioritize.c ****         TX_RESTORE
 243:ThreadX/common/src/tx_queue_prioritize.c **** 
 244:ThreadX/common/src/tx_queue_prioritize.c ****         /* Check for preemption.  */
 245:ThreadX/common/src/tx_queue_prioritize.c ****         _tx_thread_system_preempt_check();
 262              		.loc 1 245 0
 263 0094 FFF7FEFF 		bl	_tx_thread_system_preempt_check
 264              	.LVL30:
 265              	.L3:
 246:ThreadX/common/src/tx_queue_prioritize.c ****     }
 247:ThreadX/common/src/tx_queue_prioritize.c **** 
 248:ThreadX/common/src/tx_queue_prioritize.c ****     /* Return successful status.  */
 249:ThreadX/common/src/tx_queue_prioritize.c ****     return(TX_SUCCESS);
 250:ThreadX/common/src/tx_queue_prioritize.c **** }
 266              		.loc 1 250 0
 267 0098 0020     		movs	r0, #0
 268 009a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 269              	.L18:
 270              		.align	2
 271              	.L17:
 272 009c 00000000 		.word	_tx_thread_preempt_disable
 273              		.cfi_endproc
 274              	.LFE8:
 276              		.text
 277              	.Letext0:
 278              		.file 3 "/usr/include/newlib/sys/lock.h"
 279              		.file 4 "/usr/include/newlib/sys/_types.h"
 280              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 281              		.file 6 "/usr/include/newlib/sys/reent.h"
 282              		.file 7 "/usr/include/newlib/stdlib.h"
 283              		.file 8 "ThreadX/common/inc/tx_api.h"
 284              		.file 9 "ThreadX/common/inc/tx_thread.h"
 285              		.file 10 "ThreadX/common/inc/tx_queue.h"
ARM GAS  /tmp/ccqnLnid.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_queue_prioritize.c
     /tmp/ccqnLnid.s:18     .text._tx_queue_prioritize:0000000000000000 $t
     /tmp/ccqnLnid.s:25     .text._tx_queue_prioritize:0000000000000000 _tx_queue_prioritize
     /tmp/ccqnLnid.s:272    .text._tx_queue_prioritize:000000000000009c $d

UNDEFINED SYMBOLS
_tx_thread_system_preempt_check
_tx_thread_preempt_disable
