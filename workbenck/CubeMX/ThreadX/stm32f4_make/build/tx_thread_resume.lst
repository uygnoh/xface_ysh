ARM GAS  /tmp/ccmR3o88.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_thread_resume.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_thread_resume,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_thread_resume
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_thread_resume:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_thread_resume.c"
   1:ThreadX/common/src/tx_thread_resume.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
   3:ThreadX/common/src/tx_thread_resume.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
   5:ThreadX/common/src/tx_thread_resume.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_thread_resume.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_thread_resume.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_thread_resume.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  10:ThreadX/common/src/tx_thread_resume.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_thread_resume.c **** 
  12:ThreadX/common/src/tx_thread_resume.c **** 
  13:ThreadX/common/src/tx_thread_resume.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_thread_resume.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_thread_resume.c **** /**                                                                       */
  16:ThreadX/common/src/tx_thread_resume.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_thread_resume.c **** /**                                                                       */
  18:ThreadX/common/src/tx_thread_resume.c **** /**   Thread                                                              */
  19:ThreadX/common/src/tx_thread_resume.c **** /**                                                                       */
  20:ThreadX/common/src/tx_thread_resume.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_thread_resume.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_thread_resume.c **** 
  23:ThreadX/common/src/tx_thread_resume.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_thread_resume.c **** 
  25:ThreadX/common/src/tx_thread_resume.c **** 
  26:ThreadX/common/src/tx_thread_resume.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_thread_resume.c **** 
  28:ThreadX/common/src/tx_thread_resume.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_thread_resume.c **** #include "tx_trace.h"
  30:ThreadX/common/src/tx_thread_resume.c **** #include "tx_thread.h"
  31:ThreadX/common/src/tx_thread_resume.c **** #include "tx_initialize.h"
ARM GAS  /tmp/ccmR3o88.s 			page 2


  32:ThreadX/common/src/tx_thread_resume.c **** 
  33:ThreadX/common/src/tx_thread_resume.c **** 
  34:ThreadX/common/src/tx_thread_resume.c **** /**************************************************************************/
  35:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  36:ThreadX/common/src/tx_thread_resume.c **** /*  FUNCTION                                               RELEASE        */
  37:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  38:ThreadX/common/src/tx_thread_resume.c **** /*    _tx_thread_resume                                   PORTABLE C      */
  39:ThreadX/common/src/tx_thread_resume.c **** /*                                                           6.1          */
  40:ThreadX/common/src/tx_thread_resume.c **** /*  AUTHOR                                                                */
  41:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  42:ThreadX/common/src/tx_thread_resume.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  44:ThreadX/common/src/tx_thread_resume.c **** /*  DESCRIPTION                                                           */
  45:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  46:ThreadX/common/src/tx_thread_resume.c **** /*    This function processes application resume thread services. Actual  */
  47:ThreadX/common/src/tx_thread_resume.c **** /*    thread resumption is performed in the core service.                 */
  48:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  49:ThreadX/common/src/tx_thread_resume.c **** /*  INPUT                                                                 */
  50:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  51:ThreadX/common/src/tx_thread_resume.c **** /*    thread_ptr                            Pointer to thread to resume   */
  52:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  53:ThreadX/common/src/tx_thread_resume.c **** /*  OUTPUT                                                                */
  54:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  55:ThreadX/common/src/tx_thread_resume.c **** /*    status                                Service return status         */
  56:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  57:ThreadX/common/src/tx_thread_resume.c **** /*  CALLS                                                                 */
  58:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  59:ThreadX/common/src/tx_thread_resume.c **** /*    _tx_thread_system_resume          Resume thread                     */
  60:ThreadX/common/src/tx_thread_resume.c **** /*    _tx_thread_system_ni_resume       Non-interruptable resume thread   */
  61:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  62:ThreadX/common/src/tx_thread_resume.c **** /*  CALLED BY                                                             */
  63:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  64:ThreadX/common/src/tx_thread_resume.c **** /*    Application Code                                                    */
  65:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  66:ThreadX/common/src/tx_thread_resume.c **** /*  RELEASE HISTORY                                                       */
  67:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  68:ThreadX/common/src/tx_thread_resume.c **** /*    DATE              NAME                      DESCRIPTION             */
  69:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  70:ThreadX/common/src/tx_thread_resume.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  71:ThreadX/common/src/tx_thread_resume.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  72:ThreadX/common/src/tx_thread_resume.c **** /*                                            resulting in version 6.1    */
  73:ThreadX/common/src/tx_thread_resume.c **** /*                                                                        */
  74:ThreadX/common/src/tx_thread_resume.c **** /**************************************************************************/
  75:ThreadX/common/src/tx_thread_resume.c **** UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
  76:ThreadX/common/src/tx_thread_resume.c **** {
  28              		.loc 1 76 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 3, -16
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
ARM GAS  /tmp/ccmR3o88.s 			page 3


  40              	.LVL1:
  41              	.LBB14:
  42              	.LBB15:
  43              	.LBB16:
  44              	.LBB17:
  45              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
ARM GAS  /tmp/ccmR3o88.s 			page 4


  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
ARM GAS  /tmp/ccmR3o88.s 			page 5


 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/ccmR3o88.s 			page 6


 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
ARM GAS  /tmp/ccmR3o88.s 			page 7


 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/ccmR3o88.s 			page 8


 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
ARM GAS  /tmp/ccmR3o88.s 			page 9


 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
ARM GAS  /tmp/ccmR3o88.s 			page 10


 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccmR3o88.s 			page 11


 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccmR3o88.s 			page 12


 508:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  46              		.loc 2 539 0
  47              		.syntax unified
  48              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  49 0002 EFF31083 		MRS  r3, PRIMASK 
  50              	@ 0 "" 2
  51              		.thumb
  52              		.syntax unified
  53              	.LBE17:
  54              	.LBE16:
 540:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccmR3o88.s 			page 13


 556:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
 567:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
 569:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
 571:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  55              		.loc 2 575 0
  56              		.syntax unified
  57              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  58 0006 72B6     		CPSID i
  59              	@ 0 "" 2
  60              		.thumb
  61              		.syntax unified
  62              	.LBE15:
  63              	.LBE14:
  77:ThreadX/common/src/tx_thread_resume.c **** 
  78:ThreadX/common/src/tx_thread_resume.c **** TX_INTERRUPT_SAVE_AREA
  79:ThreadX/common/src/tx_thread_resume.c **** 
  80:ThreadX/common/src/tx_thread_resume.c **** UINT        status;
  81:ThreadX/common/src/tx_thread_resume.c **** TX_THREAD   *saved_thread_ptr;
  82:ThreadX/common/src/tx_thread_resume.c **** UINT        saved_threshold =  ((UINT) 0);
  83:ThreadX/common/src/tx_thread_resume.c **** 
  84:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_INLINE_THREAD_RESUME_SUSPEND
  85:ThreadX/common/src/tx_thread_resume.c **** UINT            priority;
  86:ThreadX/common/src/tx_thread_resume.c **** ULONG           priority_bit;
  87:ThreadX/common/src/tx_thread_resume.c **** TX_THREAD       *head_ptr;
  88:ThreadX/common/src/tx_thread_resume.c **** TX_THREAD       *tail_ptr;
  89:ThreadX/common/src/tx_thread_resume.c **** TX_THREAD       *execute_ptr;
  90:ThreadX/common/src/tx_thread_resume.c **** TX_THREAD       *current_thread;
  91:ThreadX/common/src/tx_thread_resume.c **** ULONG           combined_flags;
  92:ThreadX/common/src/tx_thread_resume.c **** 
  93:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_EVENT_TRACE
  94:ThreadX/common/src/tx_thread_resume.c **** TX_TRACE_BUFFER_ENTRY       *entry_ptr;
  95:ThreadX/common/src/tx_thread_resume.c **** ULONG                       time_stamp =  ((ULONG) 0);
  96:ThreadX/common/src/tx_thread_resume.c **** #endif
  97:ThreadX/common/src/tx_thread_resume.c **** 
  98:ThreadX/common/src/tx_thread_resume.c **** #if TX_MAX_PRIORITIES > 32
  99:ThreadX/common/src/tx_thread_resume.c **** UINT            map_index;
 100:ThreadX/common/src/tx_thread_resume.c **** #endif
 101:ThreadX/common/src/tx_thread_resume.c **** 
 102:ThreadX/common/src/tx_thread_resume.c **** 
 103:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_STACK_CHECKING
 104:ThreadX/common/src/tx_thread_resume.c **** 
ARM GAS  /tmp/ccmR3o88.s 			page 14


 105:ThreadX/common/src/tx_thread_resume.c ****     /* Check this thread's stack.  */
 106:ThreadX/common/src/tx_thread_resume.c ****     TX_THREAD_STACK_CHECK(thread_ptr)
 107:ThreadX/common/src/tx_thread_resume.c **** #endif
 108:ThreadX/common/src/tx_thread_resume.c **** #endif
 109:ThreadX/common/src/tx_thread_resume.c **** 
 110:ThreadX/common/src/tx_thread_resume.c ****     /* Lockout interrupts while the thread is being resumed.  */
 111:ThreadX/common/src/tx_thread_resume.c ****     TX_DISABLE
 112:ThreadX/common/src/tx_thread_resume.c **** 
 113:ThreadX/common/src/tx_thread_resume.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 114:ThreadX/common/src/tx_thread_resume.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME_API, thread_ptr, thread_ptr -> tx_thread_state, 
 115:ThreadX/common/src/tx_thread_resume.c **** 
 116:ThreadX/common/src/tx_thread_resume.c ****     /* Log this kernel call.  */
 117:ThreadX/common/src/tx_thread_resume.c ****     TX_EL_THREAD_RESUME_INSERT
 118:ThreadX/common/src/tx_thread_resume.c **** 
 119:ThreadX/common/src/tx_thread_resume.c ****     /* Determine if the thread is suspended or in the process of suspending.
 120:ThreadX/common/src/tx_thread_resume.c ****        If so, call the thread resume processing.  */
 121:ThreadX/common/src/tx_thread_resume.c ****     if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
  64              		.loc 1 121 0
  65 0008 026B     		ldr	r2, [r0, #48]
  66 000a 032A     		cmp	r2, #3
  67 000c 06D0     		beq	.L11
 122:ThreadX/common/src/tx_thread_resume.c ****     {
 123:ThreadX/common/src/tx_thread_resume.c **** 
 124:ThreadX/common/src/tx_thread_resume.c ****         /* Determine if the create call is being called from initialization.  */
 125:ThreadX/common/src/tx_thread_resume.c ****         if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 126:ThreadX/common/src/tx_thread_resume.c ****         {
 127:ThreadX/common/src/tx_thread_resume.c **** 
 128:ThreadX/common/src/tx_thread_resume.c ****             /* Yes, this resume call was made from initialization.  */
 129:ThreadX/common/src/tx_thread_resume.c **** 
 130:ThreadX/common/src/tx_thread_resume.c ****             /* Pickup the current thread execute pointer, which corresponds to the
 131:ThreadX/common/src/tx_thread_resume.c ****                highest priority thread ready to execute.  Interrupt lockout is
 132:ThreadX/common/src/tx_thread_resume.c ****                not required, since interrupts are assumed to be disabled during
 133:ThreadX/common/src/tx_thread_resume.c ****                initialization.  */
 134:ThreadX/common/src/tx_thread_resume.c ****             saved_thread_ptr =  _tx_thread_execute_ptr;
 135:ThreadX/common/src/tx_thread_resume.c **** 
 136:ThreadX/common/src/tx_thread_resume.c ****             /* Determine if there is thread ready for execution.  */
 137:ThreadX/common/src/tx_thread_resume.c ****             if (saved_thread_ptr != TX_NULL)
 138:ThreadX/common/src/tx_thread_resume.c ****             {
 139:ThreadX/common/src/tx_thread_resume.c **** 
 140:ThreadX/common/src/tx_thread_resume.c ****                 /* Yes, a thread is ready for execution when initialization completes.  */
 141:ThreadX/common/src/tx_thread_resume.c **** 
 142:ThreadX/common/src/tx_thread_resume.c ****                 /* Save the current preemption-threshold.  */
 143:ThreadX/common/src/tx_thread_resume.c ****                 saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 144:ThreadX/common/src/tx_thread_resume.c **** 
 145:ThreadX/common/src/tx_thread_resume.c ****                 /* For initialization, temporarily set the preemption-threshold to the
 146:ThreadX/common/src/tx_thread_resume.c ****                    priority level to make sure the highest-priority thread runs once
 147:ThreadX/common/src/tx_thread_resume.c ****                    initialization is complete.  */
 148:ThreadX/common/src/tx_thread_resume.c ****                 saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_pr
 149:ThreadX/common/src/tx_thread_resume.c ****             }
 150:ThreadX/common/src/tx_thread_resume.c ****         }
 151:ThreadX/common/src/tx_thread_resume.c ****         else
 152:ThreadX/common/src/tx_thread_resume.c ****         {
 153:ThreadX/common/src/tx_thread_resume.c **** 
 154:ThreadX/common/src/tx_thread_resume.c ****             /* Simply set the saved thread pointer to NULL.  */
 155:ThreadX/common/src/tx_thread_resume.c ****             saved_thread_ptr =  TX_NULL;
 156:ThreadX/common/src/tx_thread_resume.c ****         }
 157:ThreadX/common/src/tx_thread_resume.c **** 
ARM GAS  /tmp/ccmR3o88.s 			page 15


 158:ThreadX/common/src/tx_thread_resume.c **** #ifndef TX_INLINE_THREAD_RESUME_SUSPEND
 159:ThreadX/common/src/tx_thread_resume.c **** 
 160:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_NOT_INTERRUPTABLE
 161:ThreadX/common/src/tx_thread_resume.c **** 
 162:ThreadX/common/src/tx_thread_resume.c ****         /* Resume the thread!  */
 163:ThreadX/common/src/tx_thread_resume.c ****         _tx_thread_system_ni_resume(thread_ptr);
 164:ThreadX/common/src/tx_thread_resume.c **** 
 165:ThreadX/common/src/tx_thread_resume.c ****         /* Restore interrupts.  */
 166:ThreadX/common/src/tx_thread_resume.c ****         TX_RESTORE
 167:ThreadX/common/src/tx_thread_resume.c **** #else
 168:ThreadX/common/src/tx_thread_resume.c **** 
 169:ThreadX/common/src/tx_thread_resume.c ****         /* Temporarily disable preemption.  */
 170:ThreadX/common/src/tx_thread_resume.c ****         _tx_thread_preempt_disable++;
 171:ThreadX/common/src/tx_thread_resume.c **** 
 172:ThreadX/common/src/tx_thread_resume.c ****         /* Restore interrupts.  */
 173:ThreadX/common/src/tx_thread_resume.c ****         TX_RESTORE
 174:ThreadX/common/src/tx_thread_resume.c **** 
 175:ThreadX/common/src/tx_thread_resume.c ****         /* Call the actual resume service to resume the thread.  */
 176:ThreadX/common/src/tx_thread_resume.c ****         _tx_thread_system_resume(thread_ptr);
 177:ThreadX/common/src/tx_thread_resume.c **** #endif
 178:ThreadX/common/src/tx_thread_resume.c **** 
 179:ThreadX/common/src/tx_thread_resume.c ****         /* Determine if the thread's preemption-threshold needs to be restored.  */
 180:ThreadX/common/src/tx_thread_resume.c ****         if (saved_thread_ptr != TX_NULL)
 181:ThreadX/common/src/tx_thread_resume.c ****         {
 182:ThreadX/common/src/tx_thread_resume.c **** 
 183:ThreadX/common/src/tx_thread_resume.c ****             /* Yes, restore the previous highest-priority thread's preemption-threshold. This
 184:ThreadX/common/src/tx_thread_resume.c ****                can only happen if this routine is called from initialization.  */
 185:ThreadX/common/src/tx_thread_resume.c ****             saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 186:ThreadX/common/src/tx_thread_resume.c ****         }
 187:ThreadX/common/src/tx_thread_resume.c **** 
 188:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_MISRA_ENABLE
 189:ThreadX/common/src/tx_thread_resume.c **** 
 190:ThreadX/common/src/tx_thread_resume.c ****         /* Disable interrupts.  */
 191:ThreadX/common/src/tx_thread_resume.c ****         TX_DISABLE
 192:ThreadX/common/src/tx_thread_resume.c **** 
 193:ThreadX/common/src/tx_thread_resume.c ****         /* Setup successful return status.  */
 194:ThreadX/common/src/tx_thread_resume.c ****         status =  TX_SUCCESS;
 195:ThreadX/common/src/tx_thread_resume.c **** #else
 196:ThreadX/common/src/tx_thread_resume.c **** 
 197:ThreadX/common/src/tx_thread_resume.c ****         /* Return successful completion.  */
 198:ThreadX/common/src/tx_thread_resume.c ****         return(TX_SUCCESS);
 199:ThreadX/common/src/tx_thread_resume.c **** #endif
 200:ThreadX/common/src/tx_thread_resume.c **** 
 201:ThreadX/common/src/tx_thread_resume.c **** 
 202:ThreadX/common/src/tx_thread_resume.c **** #else
 203:ThreadX/common/src/tx_thread_resume.c **** 
 204:ThreadX/common/src/tx_thread_resume.c ****         /* In-line thread resumption processing follows, which is effectively just taking the
 205:ThreadX/common/src/tx_thread_resume.c ****            logic in tx_thread_system_resume.c and placing it here!  */
 206:ThreadX/common/src/tx_thread_resume.c **** 
 207:ThreadX/common/src/tx_thread_resume.c ****         /* Resume the thread!  */
 208:ThreadX/common/src/tx_thread_resume.c **** 
 209:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_EVENT_TRACE
 210:ThreadX/common/src/tx_thread_resume.c **** 
 211:ThreadX/common/src/tx_thread_resume.c ****         /* If trace is enabled, save the current event pointer.  */
 212:ThreadX/common/src/tx_thread_resume.c ****         entry_ptr =  _tx_trace_buffer_current_ptr;
 213:ThreadX/common/src/tx_thread_resume.c **** #endif
 214:ThreadX/common/src/tx_thread_resume.c **** 
ARM GAS  /tmp/ccmR3o88.s 			page 16


 215:ThreadX/common/src/tx_thread_resume.c ****         /* Log the thread status change.  */
 216:ThreadX/common/src/tx_thread_resume.c ****         TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, 
 217:ThreadX/common/src/tx_thread_resume.c **** 
 218:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_EVENT_TRACE
 219:ThreadX/common/src/tx_thread_resume.c **** 
 220:ThreadX/common/src/tx_thread_resume.c ****         /* Save the time stamp for later comparison to verify that
 221:ThreadX/common/src/tx_thread_resume.c ****            the event hasn't been overwritten by the time we have
 222:ThreadX/common/src/tx_thread_resume.c ****            computed the next thread to execute.  */
 223:ThreadX/common/src/tx_thread_resume.c ****         if (entry_ptr != TX_NULL)
 224:ThreadX/common/src/tx_thread_resume.c ****         {
 225:ThreadX/common/src/tx_thread_resume.c **** 
 226:ThreadX/common/src/tx_thread_resume.c ****             /* Save time stamp.  */
 227:ThreadX/common/src/tx_thread_resume.c ****             time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 228:ThreadX/common/src/tx_thread_resume.c ****         }
 229:ThreadX/common/src/tx_thread_resume.c **** #endif
 230:ThreadX/common/src/tx_thread_resume.c **** 
 231:ThreadX/common/src/tx_thread_resume.c ****         /* Make this thread ready.  */
 232:ThreadX/common/src/tx_thread_resume.c **** 
 233:ThreadX/common/src/tx_thread_resume.c ****         /* Change the state to ready.  */
 234:ThreadX/common/src/tx_thread_resume.c ****         thread_ptr -> tx_thread_state =  TX_READY;
 235:ThreadX/common/src/tx_thread_resume.c **** 
 236:ThreadX/common/src/tx_thread_resume.c ****         /* Pickup priority of thread.  */
 237:ThreadX/common/src/tx_thread_resume.c ****         priority =  thread_ptr -> tx_thread_priority;
 238:ThreadX/common/src/tx_thread_resume.c **** 
 239:ThreadX/common/src/tx_thread_resume.c ****         /* Thread state change.  */
 240:ThreadX/common/src/tx_thread_resume.c ****         TX_THREAD_STATE_CHANGE(thread_ptr, TX_READY)
 241:ThreadX/common/src/tx_thread_resume.c **** 
 242:ThreadX/common/src/tx_thread_resume.c ****         /* Log the thread status change.  */
 243:ThreadX/common/src/tx_thread_resume.c ****         TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, TX_READY)
 244:ThreadX/common/src/tx_thread_resume.c **** 
 245:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 246:ThreadX/common/src/tx_thread_resume.c **** 
 247:ThreadX/common/src/tx_thread_resume.c ****         /* Increment the total number of thread resumptions.  */
 248:ThreadX/common/src/tx_thread_resume.c ****         _tx_thread_performance_resume_count++;
 249:ThreadX/common/src/tx_thread_resume.c **** 
 250:ThreadX/common/src/tx_thread_resume.c ****         /* Increment this thread's resume count.  */
 251:ThreadX/common/src/tx_thread_resume.c ****         thread_ptr -> tx_thread_performance_resume_count++;
 252:ThreadX/common/src/tx_thread_resume.c **** #endif
 253:ThreadX/common/src/tx_thread_resume.c **** 
 254:ThreadX/common/src/tx_thread_resume.c ****         /* Determine if there are other threads at this priority that are
 255:ThreadX/common/src/tx_thread_resume.c ****            ready.  */
 256:ThreadX/common/src/tx_thread_resume.c ****         head_ptr =  _tx_thread_priority_list[priority];
 257:ThreadX/common/src/tx_thread_resume.c ****         if (head_ptr == TX_NULL)
 258:ThreadX/common/src/tx_thread_resume.c ****         {
 259:ThreadX/common/src/tx_thread_resume.c **** 
 260:ThreadX/common/src/tx_thread_resume.c ****             /* First thread at this priority ready.  Add to the front of the list.  */
 261:ThreadX/common/src/tx_thread_resume.c ****             _tx_thread_priority_list[priority] =       thread_ptr;
 262:ThreadX/common/src/tx_thread_resume.c ****             thread_ptr -> tx_thread_ready_next =       thread_ptr;
 263:ThreadX/common/src/tx_thread_resume.c ****             thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 264:ThreadX/common/src/tx_thread_resume.c **** 
 265:ThreadX/common/src/tx_thread_resume.c **** #if TX_MAX_PRIORITIES > 32
 266:ThreadX/common/src/tx_thread_resume.c **** 
 267:ThreadX/common/src/tx_thread_resume.c ****             /* Calculate the index into the bit map array.  */
 268:ThreadX/common/src/tx_thread_resume.c ****             map_index =  priority/((UINT) 32);
 269:ThreadX/common/src/tx_thread_resume.c **** 
 270:ThreadX/common/src/tx_thread_resume.c ****             /* Set the active bit to remember that the priority map has something set.  */
 271:ThreadX/common/src/tx_thread_resume.c ****             TX_DIV32_BIT_SET(priority, priority_bit)
ARM GAS  /tmp/ccmR3o88.s 			page 17


 272:ThreadX/common/src/tx_thread_resume.c ****             _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
 273:ThreadX/common/src/tx_thread_resume.c **** #endif
 274:ThreadX/common/src/tx_thread_resume.c **** 
 275:ThreadX/common/src/tx_thread_resume.c ****             /* Or in the thread's priority bit.  */
 276:ThreadX/common/src/tx_thread_resume.c ****             TX_MOD32_BIT_SET(priority, priority_bit)
 277:ThreadX/common/src/tx_thread_resume.c ****             _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_b
 278:ThreadX/common/src/tx_thread_resume.c **** 
 279:ThreadX/common/src/tx_thread_resume.c ****             /* Determine if this newly ready thread is the highest priority.  */
 280:ThreadX/common/src/tx_thread_resume.c ****             if (priority < _tx_thread_highest_priority)
 281:ThreadX/common/src/tx_thread_resume.c ****             {
 282:ThreadX/common/src/tx_thread_resume.c **** 
 283:ThreadX/common/src/tx_thread_resume.c ****                 /* A new highest priority thread is present. */
 284:ThreadX/common/src/tx_thread_resume.c **** 
 285:ThreadX/common/src/tx_thread_resume.c ****                 /* Update the highest priority variable.  */
 286:ThreadX/common/src/tx_thread_resume.c ****                 _tx_thread_highest_priority =  priority;
 287:ThreadX/common/src/tx_thread_resume.c **** 
 288:ThreadX/common/src/tx_thread_resume.c ****                 /* Pickup the execute pointer. Since it is going to be referenced multiple
 289:ThreadX/common/src/tx_thread_resume.c ****                    times, it is placed in a local variable.  */
 290:ThreadX/common/src/tx_thread_resume.c ****                 execute_ptr =  _tx_thread_execute_ptr;
 291:ThreadX/common/src/tx_thread_resume.c **** 
 292:ThreadX/common/src/tx_thread_resume.c ****                 /* Determine if no thread is currently executing.  */
 293:ThreadX/common/src/tx_thread_resume.c ****                 if (execute_ptr == TX_NULL)
 294:ThreadX/common/src/tx_thread_resume.c ****                 {
 295:ThreadX/common/src/tx_thread_resume.c **** 
 296:ThreadX/common/src/tx_thread_resume.c ****                     /* Simply setup the execute pointer.  */
 297:ThreadX/common/src/tx_thread_resume.c ****                     _tx_thread_execute_ptr =  thread_ptr;
 298:ThreadX/common/src/tx_thread_resume.c ****                 }
 299:ThreadX/common/src/tx_thread_resume.c ****                 else
 300:ThreadX/common/src/tx_thread_resume.c ****                 {
 301:ThreadX/common/src/tx_thread_resume.c **** 
 302:ThreadX/common/src/tx_thread_resume.c ****                     /* Another thread has been scheduled for execution.  */
 303:ThreadX/common/src/tx_thread_resume.c **** 
 304:ThreadX/common/src/tx_thread_resume.c ****                     /* Check to see if this is a higher priority thread and determine if preemption
 305:ThreadX/common/src/tx_thread_resume.c ****                     if (priority < execute_ptr -> tx_thread_preempt_threshold)
 306:ThreadX/common/src/tx_thread_resume.c ****                     {
 307:ThreadX/common/src/tx_thread_resume.c **** 
 308:ThreadX/common/src/tx_thread_resume.c **** #ifndef TX_DISABLE_PREEMPTION_THRESHOLD
 309:ThreadX/common/src/tx_thread_resume.c **** 
 310:ThreadX/common/src/tx_thread_resume.c ****                         /* Determine if the preempted thread had preemption-threshold set.  */
 311:ThreadX/common/src/tx_thread_resume.c ****                         if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_
 312:ThreadX/common/src/tx_thread_resume.c ****                         {
 313:ThreadX/common/src/tx_thread_resume.c **** 
 314:ThreadX/common/src/tx_thread_resume.c **** #if TX_MAX_PRIORITIES > 32
 315:ThreadX/common/src/tx_thread_resume.c **** 
 316:ThreadX/common/src/tx_thread_resume.c ****                             /* Calculate the index into the bit map array.  */
 317:ThreadX/common/src/tx_thread_resume.c ****                             map_index =  (execute_ptr -> tx_thread_priority)/((UINT) 32);
 318:ThreadX/common/src/tx_thread_resume.c **** 
 319:ThreadX/common/src/tx_thread_resume.c ****                             /* Set the active bit to remember that the preempt map has something se
 320:ThreadX/common/src/tx_thread_resume.c ****                             TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 321:ThreadX/common/src/tx_thread_resume.c ****                             _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | pr
 322:ThreadX/common/src/tx_thread_resume.c **** #endif
 323:ThreadX/common/src/tx_thread_resume.c **** 
 324:ThreadX/common/src/tx_thread_resume.c ****                             /* Remember that this thread was preempted by a thread above the thread
 325:ThreadX/common/src/tx_thread_resume.c ****                             TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 326:ThreadX/common/src/tx_thread_resume.c ****                             _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_I
 327:ThreadX/common/src/tx_thread_resume.c ****                         }
 328:ThreadX/common/src/tx_thread_resume.c **** #endif
ARM GAS  /tmp/ccmR3o88.s 			page 18


 329:ThreadX/common/src/tx_thread_resume.c **** 
 330:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 331:ThreadX/common/src/tx_thread_resume.c **** 
 332:ThreadX/common/src/tx_thread_resume.c ****                         /* Determine if the caller is an interrupt or from a thread.  */
 333:ThreadX/common/src/tx_thread_resume.c ****                         if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 334:ThreadX/common/src/tx_thread_resume.c ****                         {
 335:ThreadX/common/src/tx_thread_resume.c **** 
 336:ThreadX/common/src/tx_thread_resume.c ****                             /* Caller is a thread, so this is a solicited preemption.  */
 337:ThreadX/common/src/tx_thread_resume.c ****                             _tx_thread_performance_solicited_preemption_count++;
 338:ThreadX/common/src/tx_thread_resume.c **** 
 339:ThreadX/common/src/tx_thread_resume.c ****                             /* Increment the thread's solicited preemption counter.  */
 340:ThreadX/common/src/tx_thread_resume.c ****                             execute_ptr -> tx_thread_performance_solicited_preemption_count++;
 341:ThreadX/common/src/tx_thread_resume.c ****                         }
 342:ThreadX/common/src/tx_thread_resume.c ****                         else
 343:ThreadX/common/src/tx_thread_resume.c ****                         {
 344:ThreadX/common/src/tx_thread_resume.c **** 
 345:ThreadX/common/src/tx_thread_resume.c ****                             if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 346:ThreadX/common/src/tx_thread_resume.c ****                             {
 347:ThreadX/common/src/tx_thread_resume.c **** 
 348:ThreadX/common/src/tx_thread_resume.c ****                                 /* Caller is an interrupt, so this is an interrupt preemption.  */
 349:ThreadX/common/src/tx_thread_resume.c ****                                 _tx_thread_performance_interrupt_preemption_count++;
 350:ThreadX/common/src/tx_thread_resume.c **** 
 351:ThreadX/common/src/tx_thread_resume.c ****                                 /* Increment the thread's interrupt preemption counter.  */
 352:ThreadX/common/src/tx_thread_resume.c ****                                 execute_ptr -> tx_thread_performance_interrupt_preemption_count++;
 353:ThreadX/common/src/tx_thread_resume.c ****                             }
 354:ThreadX/common/src/tx_thread_resume.c ****                         }
 355:ThreadX/common/src/tx_thread_resume.c **** 
 356:ThreadX/common/src/tx_thread_resume.c ****                         /* Remember the thread that preempted this thread.  */
 357:ThreadX/common/src/tx_thread_resume.c ****                         execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;
 358:ThreadX/common/src/tx_thread_resume.c **** #endif
 359:ThreadX/common/src/tx_thread_resume.c **** 
 360:ThreadX/common/src/tx_thread_resume.c ****                         /* Yes, modify the execute thread pointer.  */
 361:ThreadX/common/src/tx_thread_resume.c ****                         _tx_thread_execute_ptr =  thread_ptr;
 362:ThreadX/common/src/tx_thread_resume.c **** 
 363:ThreadX/common/src/tx_thread_resume.c **** #ifndef TX_MISRA_ENABLE
 364:ThreadX/common/src/tx_thread_resume.c **** 
 365:ThreadX/common/src/tx_thread_resume.c ****                         /* If MISRA is not-enabled, insert a preemption and return in-line for perf
 366:ThreadX/common/src/tx_thread_resume.c **** 
 367:ThreadX/common/src/tx_thread_resume.c ****                         /* Determine if the thread's preemption-threshold needs to be restored.  */
 368:ThreadX/common/src/tx_thread_resume.c ****                         if (saved_thread_ptr != TX_NULL)
 369:ThreadX/common/src/tx_thread_resume.c ****                         {
 370:ThreadX/common/src/tx_thread_resume.c **** 
 371:ThreadX/common/src/tx_thread_resume.c ****                             /* Yes, restore the previous highest-priority thread's preemption-thres
 372:ThreadX/common/src/tx_thread_resume.c ****                                can only happen if this routine is called from initialization.  */
 373:ThreadX/common/src/tx_thread_resume.c ****                             saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 374:ThreadX/common/src/tx_thread_resume.c ****                         }
 375:ThreadX/common/src/tx_thread_resume.c **** 
 376:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 377:ThreadX/common/src/tx_thread_resume.c **** 
 378:ThreadX/common/src/tx_thread_resume.c ****                         /* Is the execute pointer different?  */
 379:ThreadX/common/src/tx_thread_resume.c ****                         if (_tx_thread_performance_execute_log[_tx_thread_performance__execute_log_
 380:ThreadX/common/src/tx_thread_resume.c ****                         {
 381:ThreadX/common/src/tx_thread_resume.c **** 
 382:ThreadX/common/src/tx_thread_resume.c ****                             /* Move to next entry.  */
 383:ThreadX/common/src/tx_thread_resume.c ****                             _tx_thread_performance__execute_log_index++;
 384:ThreadX/common/src/tx_thread_resume.c **** 
 385:ThreadX/common/src/tx_thread_resume.c ****                             /* Check for wrap condition.  */
ARM GAS  /tmp/ccmR3o88.s 			page 19


 386:ThreadX/common/src/tx_thread_resume.c ****                             if (_tx_thread_performance__execute_log_index >= TX_THREAD_EXECUTE_LOG_
 387:ThreadX/common/src/tx_thread_resume.c ****                             {
 388:ThreadX/common/src/tx_thread_resume.c **** 
 389:ThreadX/common/src/tx_thread_resume.c ****                                 /* Set the index to the beginning.  */
 390:ThreadX/common/src/tx_thread_resume.c ****                                 _tx_thread_performance__execute_log_index =  ((UINT) 0);
 391:ThreadX/common/src/tx_thread_resume.c ****                             }
 392:ThreadX/common/src/tx_thread_resume.c **** 
 393:ThreadX/common/src/tx_thread_resume.c ****                             /* Log the new execute pointer.  */
 394:ThreadX/common/src/tx_thread_resume.c ****                             _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_
 395:ThreadX/common/src/tx_thread_resume.c ****                         }
 396:ThreadX/common/src/tx_thread_resume.c **** #endif
 397:ThreadX/common/src/tx_thread_resume.c **** 
 398:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_EVENT_TRACE
 399:ThreadX/common/src/tx_thread_resume.c **** 
 400:ThreadX/common/src/tx_thread_resume.c ****                         /* Check that the event time stamp is unchanged.  A different
 401:ThreadX/common/src/tx_thread_resume.c ****                            timestamp means that a later event wrote over the thread
 402:ThreadX/common/src/tx_thread_resume.c ****                            resume event. In that case, do nothing here.  */
 403:ThreadX/common/src/tx_thread_resume.c ****                         if (entry_ptr != TX_NULL)
 404:ThreadX/common/src/tx_thread_resume.c ****                         {
 405:ThreadX/common/src/tx_thread_resume.c **** 
 406:ThreadX/common/src/tx_thread_resume.c ****                             /* Is the timestamp the same?  */
 407:ThreadX/common/src/tx_thread_resume.c ****                             if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 408:ThreadX/common/src/tx_thread_resume.c ****                             {
 409:ThreadX/common/src/tx_thread_resume.c **** 
 410:ThreadX/common/src/tx_thread_resume.c ****                                 /* Timestamp is the same, set the "next thread pointer" to NULL. Th
 411:ThreadX/common/src/tx_thread_resume.c ****                                    be used by the trace analysis tool to show idle system condition
 412:ThreadX/common/src/tx_thread_resume.c ****                                 entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTE
 413:ThreadX/common/src/tx_thread_resume.c ****                             }
 414:ThreadX/common/src/tx_thread_resume.c ****                         }
 415:ThreadX/common/src/tx_thread_resume.c **** #endif
 416:ThreadX/common/src/tx_thread_resume.c **** 
 417:ThreadX/common/src/tx_thread_resume.c ****                         /* Restore interrupts.  */
 418:ThreadX/common/src/tx_thread_resume.c ****                         TX_RESTORE
 419:ThreadX/common/src/tx_thread_resume.c **** 
 420:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_STACK_CHECKING
 421:ThreadX/common/src/tx_thread_resume.c **** 
 422:ThreadX/common/src/tx_thread_resume.c ****                         /* Pickup the next execute pointer.  */
 423:ThreadX/common/src/tx_thread_resume.c ****                         thread_ptr =  _tx_thread_execute_ptr;
 424:ThreadX/common/src/tx_thread_resume.c **** 
 425:ThreadX/common/src/tx_thread_resume.c ****                         /* Check this thread's stack.  */
 426:ThreadX/common/src/tx_thread_resume.c ****                         TX_THREAD_STACK_CHECK(thread_ptr)
 427:ThreadX/common/src/tx_thread_resume.c **** #endif
 428:ThreadX/common/src/tx_thread_resume.c **** 
 429:ThreadX/common/src/tx_thread_resume.c ****                         /* Now determine if preemption should take place. This is only possible if 
 430:ThreadX/common/src/tx_thread_resume.c ****                            not the same as the execute thread pointer AND the system state and pree
 431:ThreadX/common/src/tx_thread_resume.c ****                         TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 432:ThreadX/common/src/tx_thread_resume.c ****                         if (combined_flags == ((ULONG) 0))
 433:ThreadX/common/src/tx_thread_resume.c ****                         {
 434:ThreadX/common/src/tx_thread_resume.c **** 
 435:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 436:ThreadX/common/src/tx_thread_resume.c **** 
 437:ThreadX/common/src/tx_thread_resume.c ****                             /* There is another thread ready to run and will be scheduled upon retu
 438:ThreadX/common/src/tx_thread_resume.c ****                             _tx_thread_performance_non_idle_return_count++;
 439:ThreadX/common/src/tx_thread_resume.c **** #endif
 440:ThreadX/common/src/tx_thread_resume.c **** 
 441:ThreadX/common/src/tx_thread_resume.c ****                             /* Preemption is needed - return to the system!  */
 442:ThreadX/common/src/tx_thread_resume.c ****                             _tx_thread_system_return();
ARM GAS  /tmp/ccmR3o88.s 			page 20


 443:ThreadX/common/src/tx_thread_resume.c ****                         }
 444:ThreadX/common/src/tx_thread_resume.c **** 
 445:ThreadX/common/src/tx_thread_resume.c ****                         /* Return in-line when MISRA is not enabled.  */
 446:ThreadX/common/src/tx_thread_resume.c ****                         return(TX_SUCCESS);
 447:ThreadX/common/src/tx_thread_resume.c **** #endif
 448:ThreadX/common/src/tx_thread_resume.c ****                     }
 449:ThreadX/common/src/tx_thread_resume.c ****                 }
 450:ThreadX/common/src/tx_thread_resume.c ****             }
 451:ThreadX/common/src/tx_thread_resume.c ****         }
 452:ThreadX/common/src/tx_thread_resume.c ****         else
 453:ThreadX/common/src/tx_thread_resume.c ****         {
 454:ThreadX/common/src/tx_thread_resume.c **** 
 455:ThreadX/common/src/tx_thread_resume.c ****             /* No, there are other threads at this priority already ready.  */
 456:ThreadX/common/src/tx_thread_resume.c **** 
 457:ThreadX/common/src/tx_thread_resume.c ****             /* Just add this thread to the priority list.  */
 458:ThreadX/common/src/tx_thread_resume.c ****             tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 459:ThreadX/common/src/tx_thread_resume.c ****             tail_ptr -> tx_thread_ready_next =         thread_ptr;
 460:ThreadX/common/src/tx_thread_resume.c ****             head_ptr -> tx_thread_ready_previous =     thread_ptr;
 461:ThreadX/common/src/tx_thread_resume.c ****             thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 462:ThreadX/common/src/tx_thread_resume.c ****             thread_ptr -> tx_thread_ready_next =       head_ptr;
 463:ThreadX/common/src/tx_thread_resume.c ****         }
 464:ThreadX/common/src/tx_thread_resume.c **** 
 465:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 466:ThreadX/common/src/tx_thread_resume.c **** 
 467:ThreadX/common/src/tx_thread_resume.c ****         /* Determine if we should log the execute pointer.  */
 468:ThreadX/common/src/tx_thread_resume.c **** 
 469:ThreadX/common/src/tx_thread_resume.c ****         /* Is the execute pointer different?  */
 470:ThreadX/common/src/tx_thread_resume.c ****         if (_tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] != _tx_th
 471:ThreadX/common/src/tx_thread_resume.c ****         {
 472:ThreadX/common/src/tx_thread_resume.c **** 
 473:ThreadX/common/src/tx_thread_resume.c ****             /* Move to next entry.  */
 474:ThreadX/common/src/tx_thread_resume.c ****             _tx_thread_performance__execute_log_index++;
 475:ThreadX/common/src/tx_thread_resume.c **** 
 476:ThreadX/common/src/tx_thread_resume.c ****             /* Check for wrap condition.  */
 477:ThreadX/common/src/tx_thread_resume.c ****             if (_tx_thread_performance__execute_log_index >= TX_THREAD_EXECUTE_LOG_SIZE)
 478:ThreadX/common/src/tx_thread_resume.c ****             {
 479:ThreadX/common/src/tx_thread_resume.c **** 
 480:ThreadX/common/src/tx_thread_resume.c ****                 /* Set the index to the beginning.  */
 481:ThreadX/common/src/tx_thread_resume.c ****                 _tx_thread_performance__execute_log_index =  ((UINT) 0);
 482:ThreadX/common/src/tx_thread_resume.c ****             }
 483:ThreadX/common/src/tx_thread_resume.c **** 
 484:ThreadX/common/src/tx_thread_resume.c ****             /* Log the new execute pointer.  */
 485:ThreadX/common/src/tx_thread_resume.c ****             _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_th
 486:ThreadX/common/src/tx_thread_resume.c ****         }
 487:ThreadX/common/src/tx_thread_resume.c **** #endif
 488:ThreadX/common/src/tx_thread_resume.c **** 
 489:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_EVENT_TRACE
 490:ThreadX/common/src/tx_thread_resume.c **** 
 491:ThreadX/common/src/tx_thread_resume.c ****         /* Check that the event time stamp is unchanged.  A different
 492:ThreadX/common/src/tx_thread_resume.c ****            timestamp means that a later event wrote over the thread
 493:ThreadX/common/src/tx_thread_resume.c ****            resume event. In that case, do nothing here.  */
 494:ThreadX/common/src/tx_thread_resume.c ****         if (entry_ptr != TX_NULL)
 495:ThreadX/common/src/tx_thread_resume.c ****         {
 496:ThreadX/common/src/tx_thread_resume.c **** 
 497:ThreadX/common/src/tx_thread_resume.c ****             /* Is the timestamp the same?  */
 498:ThreadX/common/src/tx_thread_resume.c ****             if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 499:ThreadX/common/src/tx_thread_resume.c ****             {
ARM GAS  /tmp/ccmR3o88.s 			page 21


 500:ThreadX/common/src/tx_thread_resume.c **** 
 501:ThreadX/common/src/tx_thread_resume.c ****                 /* Timestamp is the same, set the "next thread pointer" to NULL. This can
 502:ThreadX/common/src/tx_thread_resume.c ****                    be used by the trace analysis tool to show idle system conditions.  */
 503:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_MISRA_ENABLE
 504:ThreadX/common/src/tx_thread_resume.c ****               entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_e
 505:ThreadX/common/src/tx_thread_resume.c **** #else
 506:ThreadX/common/src/tx_thread_resume.c ****               entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT
 507:ThreadX/common/src/tx_thread_resume.c **** #endif
 508:ThreadX/common/src/tx_thread_resume.c ****             }
 509:ThreadX/common/src/tx_thread_resume.c ****         }
 510:ThreadX/common/src/tx_thread_resume.c **** #endif
 511:ThreadX/common/src/tx_thread_resume.c **** 
 512:ThreadX/common/src/tx_thread_resume.c ****         /* Determine if the thread's preemption-threshold needs to be restored.  */
 513:ThreadX/common/src/tx_thread_resume.c ****         if (saved_thread_ptr != TX_NULL)
 514:ThreadX/common/src/tx_thread_resume.c ****         {
 515:ThreadX/common/src/tx_thread_resume.c **** 
 516:ThreadX/common/src/tx_thread_resume.c ****             /* Yes, restore the previous highest-priority thread's preemption-threshold. This
 517:ThreadX/common/src/tx_thread_resume.c ****                can only happen if this routine is called from initialization.  */
 518:ThreadX/common/src/tx_thread_resume.c ****             saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 519:ThreadX/common/src/tx_thread_resume.c ****         }
 520:ThreadX/common/src/tx_thread_resume.c **** 
 521:ThreadX/common/src/tx_thread_resume.c ****         /* Setup successful return status.  */
 522:ThreadX/common/src/tx_thread_resume.c ****         status =  TX_SUCCESS;
 523:ThreadX/common/src/tx_thread_resume.c **** #endif
 524:ThreadX/common/src/tx_thread_resume.c ****     }
 525:ThreadX/common/src/tx_thread_resume.c ****     else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
  68              		.loc 1 525 0
  69 000e 426B     		ldr	r2, [r0, #52]
  70 0010 012A     		cmp	r2, #1
  71 0012 22D0     		beq	.L12
 526:ThreadX/common/src/tx_thread_resume.c ****     {
 527:ThreadX/common/src/tx_thread_resume.c **** 
 528:ThreadX/common/src/tx_thread_resume.c ****         /* Clear the delayed suspension.  */
 529:ThreadX/common/src/tx_thread_resume.c ****         thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 530:ThreadX/common/src/tx_thread_resume.c **** 
 531:ThreadX/common/src/tx_thread_resume.c ****         /* Setup delayed suspend lifted return status.  */
 532:ThreadX/common/src/tx_thread_resume.c ****         status =  TX_SUSPEND_LIFTED;
 533:ThreadX/common/src/tx_thread_resume.c ****     }
 534:ThreadX/common/src/tx_thread_resume.c ****     else
 535:ThreadX/common/src/tx_thread_resume.c ****     {
 536:ThreadX/common/src/tx_thread_resume.c **** 
 537:ThreadX/common/src/tx_thread_resume.c ****         /* Setup invalid resume return status.  */
 538:ThreadX/common/src/tx_thread_resume.c ****         status =  TX_RESUME_ERROR;
  72              		.loc 1 538 0
  73 0014 1220     		movs	r0, #18
  74              	.LVL2:
  75              	.L5:
  76              	.LBB18:
  77              	.LBB19:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  78              		.loc 2 562 0
  79              		.syntax unified
  80              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  81 0016 83F31088 		MSR  PRIMASK,r3
  82              	@ 0 "" 2
  83              	.LVL3:
  84              		.thumb
ARM GAS  /tmp/ccmR3o88.s 			page 22


  85              		.syntax unified
  86              	.L1:
  87              	.LBE19:
  88              	.LBE18:
 539:ThreadX/common/src/tx_thread_resume.c ****     }
 540:ThreadX/common/src/tx_thread_resume.c **** 
 541:ThreadX/common/src/tx_thread_resume.c ****     /* Restore interrupts.  */
 542:ThreadX/common/src/tx_thread_resume.c ****     TX_RESTORE
 543:ThreadX/common/src/tx_thread_resume.c **** 
 544:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_INLINE_THREAD_RESUME_SUSPEND
 545:ThreadX/common/src/tx_thread_resume.c **** 
 546:ThreadX/common/src/tx_thread_resume.c ****     /* Pickup thread pointer.  */
 547:ThreadX/common/src/tx_thread_resume.c ****     TX_THREAD_GET_CURRENT(current_thread)
 548:ThreadX/common/src/tx_thread_resume.c **** 
 549:ThreadX/common/src/tx_thread_resume.c ****     /* Determine if a preemption condition is present.  */
 550:ThreadX/common/src/tx_thread_resume.c ****     if (current_thread != _tx_thread_execute_ptr)
 551:ThreadX/common/src/tx_thread_resume.c ****     {
 552:ThreadX/common/src/tx_thread_resume.c **** 
 553:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_ENABLE_STACK_CHECKING
 554:ThreadX/common/src/tx_thread_resume.c **** 
 555:ThreadX/common/src/tx_thread_resume.c ****         /* Pickup the next execute pointer.  */
 556:ThreadX/common/src/tx_thread_resume.c ****         thread_ptr =  _tx_thread_execute_ptr;
 557:ThreadX/common/src/tx_thread_resume.c **** 
 558:ThreadX/common/src/tx_thread_resume.c ****         /* Check this thread's stack.  */
 559:ThreadX/common/src/tx_thread_resume.c ****         TX_THREAD_STACK_CHECK(thread_ptr)
 560:ThreadX/common/src/tx_thread_resume.c **** #endif
 561:ThreadX/common/src/tx_thread_resume.c **** 
 562:ThreadX/common/src/tx_thread_resume.c ****         /* Now determine if preemption should take place. This is only possible if the current thre
 563:ThreadX/common/src/tx_thread_resume.c ****            not the same as the execute thread pointer AND the system state and preempt disable flag
 564:ThreadX/common/src/tx_thread_resume.c ****         TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 565:ThreadX/common/src/tx_thread_resume.c ****         if (combined_flags == ((ULONG) 0))
 566:ThreadX/common/src/tx_thread_resume.c ****         {
 567:ThreadX/common/src/tx_thread_resume.c **** 
 568:ThreadX/common/src/tx_thread_resume.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 569:ThreadX/common/src/tx_thread_resume.c **** 
 570:ThreadX/common/src/tx_thread_resume.c ****             /* There is another thread ready to run and will be scheduled upon return.  */
 571:ThreadX/common/src/tx_thread_resume.c ****             _tx_thread_performance_non_idle_return_count++;
 572:ThreadX/common/src/tx_thread_resume.c **** #endif
 573:ThreadX/common/src/tx_thread_resume.c **** 
 574:ThreadX/common/src/tx_thread_resume.c ****             /* Preemption is needed - return to the system!  */
 575:ThreadX/common/src/tx_thread_resume.c ****             _tx_thread_system_return();
 576:ThreadX/common/src/tx_thread_resume.c ****         }
 577:ThreadX/common/src/tx_thread_resume.c ****     }
 578:ThreadX/common/src/tx_thread_resume.c **** #endif
 579:ThreadX/common/src/tx_thread_resume.c **** 
 580:ThreadX/common/src/tx_thread_resume.c ****     /* Return completion status. */
 581:ThreadX/common/src/tx_thread_resume.c ****     return(status);
 582:ThreadX/common/src/tx_thread_resume.c **** }
  89              		.loc 1 582 0
  90 001a 38BD     		pop	{r3, r4, r5, pc}
  91              	.LVL4:
  92              	.L11:
  93              	.LBB20:
  94              	.LBB21:
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
  95              		.loc 2 477 0
  96              		.syntax unified
ARM GAS  /tmp/ccmR3o88.s 			page 23


  97              	@ 477 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  98 001c EFF30581 		 MRS  r1,IPSR 
  99              	@ 0 "" 2
 100              		.thumb
 101              		.syntax unified
 102              	.LBE21:
 103              	.LBE20:
 125:ThreadX/common/src/tx_thread_resume.c ****         {
 104              		.loc 1 125 0
 105 0020 114A     		ldr	r2, .L13
 106 0022 1268     		ldr	r2, [r2]
 107 0024 0A43     		orrs	r2, r2, r1
 108 0026 B2F1F03F 		cmp	r2, #-252645136
 109 002a 06D3     		bcc	.L6
 134:ThreadX/common/src/tx_thread_resume.c **** 
 110              		.loc 1 134 0
 111 002c 0F4A     		ldr	r2, .L13+4
 112 002e 1468     		ldr	r4, [r2]
 113              	.LVL5:
 137:ThreadX/common/src/tx_thread_resume.c ****             {
 114              		.loc 1 137 0
 115 0030 8CB1     		cbz	r4, .L7
 143:ThreadX/common/src/tx_thread_resume.c **** 
 116              		.loc 1 143 0
 117 0032 E56B     		ldr	r5, [r4, #60]
 118              	.LVL6:
 148:ThreadX/common/src/tx_thread_resume.c ****             }
 119              		.loc 1 148 0
 120 0034 E26A     		ldr	r2, [r4, #44]
 121 0036 E263     		str	r2, [r4, #60]
 122 0038 01E0     		b	.L3
 123              	.LVL7:
 124              	.L6:
  82:ThreadX/common/src/tx_thread_resume.c **** 
 125              		.loc 1 82 0
 126 003a 0025     		movs	r5, #0
 155:ThreadX/common/src/tx_thread_resume.c ****         }
 127              		.loc 1 155 0
 128 003c 2C46     		mov	r4, r5
 129              	.LVL8:
 130              	.L3:
 170:ThreadX/common/src/tx_thread_resume.c **** 
 131              		.loc 1 170 0
 132 003e 0C49     		ldr	r1, .L13+8
 133 0040 0A68     		ldr	r2, [r1]
 134 0042 0132     		adds	r2, r2, #1
 135 0044 0A60     		str	r2, [r1]
 136              	.LVL9:
 137              	.LBB22:
 138              	.LBB23:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 139              		.loc 2 562 0
 140              		.syntax unified
 141              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 142 0046 83F31088 		MSR  PRIMASK,r3
 143              	@ 0 "" 2
 144              	.LVL10:
ARM GAS  /tmp/ccmR3o88.s 			page 24


 145              		.thumb
 146              		.syntax unified
 147              	.LBE23:
 148              	.LBE22:
 176:ThreadX/common/src/tx_thread_resume.c **** #endif
 149              		.loc 1 176 0
 150 004a FFF7FEFF 		bl	_tx_thread_system_resume
 151              	.LVL11:
 180:ThreadX/common/src/tx_thread_resume.c ****         {
 152              		.loc 1 180 0
 153 004e 44B1     		cbz	r4, .L8
 185:ThreadX/common/src/tx_thread_resume.c ****         }
 154              		.loc 1 185 0
 155 0050 E563     		str	r5, [r4, #60]
 198:ThreadX/common/src/tx_thread_resume.c **** #endif
 156              		.loc 1 198 0
 157 0052 0020     		movs	r0, #0
 158 0054 E1E7     		b	.L1
 159              	.LVL12:
 160              	.L7:
  82:ThreadX/common/src/tx_thread_resume.c **** 
 161              		.loc 1 82 0
 162 0056 0025     		movs	r5, #0
 163 0058 F1E7     		b	.L3
 164              	.LVL13:
 165              	.L12:
 529:ThreadX/common/src/tx_thread_resume.c **** 
 166              		.loc 1 529 0
 167 005a 0022     		movs	r2, #0
 168 005c 4263     		str	r2, [r0, #52]
 169              	.LVL14:
 532:ThreadX/common/src/tx_thread_resume.c ****     }
 170              		.loc 1 532 0
 171 005e 1920     		movs	r0, #25
 172              	.LVL15:
 173 0060 D9E7     		b	.L5
 174              	.LVL16:
 175              	.L8:
 198:ThreadX/common/src/tx_thread_resume.c **** #endif
 176              		.loc 1 198 0
 177 0062 0020     		movs	r0, #0
 178 0064 D9E7     		b	.L1
 179              	.L14:
 180 0066 00BF     		.align	2
 181              	.L13:
 182 0068 00000000 		.word	_tx_thread_system_state
 183 006c 00000000 		.word	_tx_thread_execute_ptr
 184 0070 00000000 		.word	_tx_thread_preempt_disable
 185              		.cfi_endproc
 186              	.LFE8:
 188              		.text
 189              	.Letext0:
 190              		.file 3 "/usr/include/newlib/sys/lock.h"
 191              		.file 4 "/usr/include/newlib/sys/_types.h"
 192              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 193              		.file 6 "/usr/include/newlib/sys/reent.h"
 194              		.file 7 "/usr/include/newlib/stdlib.h"
ARM GAS  /tmp/ccmR3o88.s 			page 25


 195              		.file 8 "ThreadX/common/inc/tx_api.h"
 196              		.file 9 "ThreadX/common/inc/tx_thread.h"
 197              		.file 10 "ThreadX/common/inc/tx_initialize.h"
ARM GAS  /tmp/ccmR3o88.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_thread_resume.c
     /tmp/ccmR3o88.s:18     .text._tx_thread_resume:0000000000000000 $t
     /tmp/ccmR3o88.s:25     .text._tx_thread_resume:0000000000000000 _tx_thread_resume
     /tmp/ccmR3o88.s:182    .text._tx_thread_resume:0000000000000068 $d

UNDEFINED SYMBOLS
_tx_thread_system_resume
_tx_thread_system_state
_tx_thread_execute_ptr
_tx_thread_preempt_disable
