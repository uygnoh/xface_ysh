ARM GAS  /tmp/ccU0PMSq.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_thread_stack_error_notify.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_thread_stack_error_notify,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_thread_stack_error_notify
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_thread_stack_error_notify:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_thread_stack_error_notify.c"
   1:ThreadX/common/src/tx_thread_stack_error_notify.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
   3:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
   5:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  10:ThreadX/common/src/tx_thread_stack_error_notify.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
  12:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
  13:ThreadX/common/src/tx_thread_stack_error_notify.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_thread_stack_error_notify.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_thread_stack_error_notify.c **** /**                                                                       */
  16:ThreadX/common/src/tx_thread_stack_error_notify.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_thread_stack_error_notify.c **** /**                                                                       */
  18:ThreadX/common/src/tx_thread_stack_error_notify.c **** /**   Thread                                                              */
  19:ThreadX/common/src/tx_thread_stack_error_notify.c **** /**                                                                       */
  20:ThreadX/common/src/tx_thread_stack_error_notify.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_thread_stack_error_notify.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
  23:ThreadX/common/src/tx_thread_stack_error_notify.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
  25:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
  26:ThreadX/common/src/tx_thread_stack_error_notify.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
  28:ThreadX/common/src/tx_thread_stack_error_notify.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_thread_stack_error_notify.c **** #include "tx_thread.h"
  30:ThreadX/common/src/tx_thread_stack_error_notify.c **** #if defined(TX_ENABLE_STACK_CHECKING) || defined(TX_PORT_THREAD_STACK_ERROR_HANDLING)
  31:ThreadX/common/src/tx_thread_stack_error_notify.c **** #include "tx_trace.h"
ARM GAS  /tmp/ccU0PMSq.s 			page 2


  32:ThreadX/common/src/tx_thread_stack_error_notify.c **** #endif
  33:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
  34:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
  35:ThreadX/common/src/tx_thread_stack_error_notify.c **** /**************************************************************************/
  36:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  37:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*  FUNCTION                                               RELEASE        */
  38:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  39:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*    _tx_thread_stack_error_notify                       PORTABLE C      */
  40:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                           6.1.9        */
  41:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*  AUTHOR                                                                */
  42:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  43:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*    William E. Lamie, Microsoft Corporation                             */
  44:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  45:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*  DESCRIPTION                                                           */
  46:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  47:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*    This function registers an application stack error handler. If      */
  48:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*    ThreadX detects a stack error, this application handler is called.  */
  49:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  50:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*    Note: stack checking must be enabled for this routine to serve any  */
  51:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*    purpose via the TX_ENABLE_STACK_CHECKING define.                    */
  52:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  53:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*  INPUT                                                                 */
  54:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  55:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*    stack_error_handler                   Pointer to stack error        */
  56:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                            handler, TX_NULL to disable */
  57:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  58:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*  OUTPUT                                                                */
  59:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  60:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*    status                                Service return status         */
  61:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  62:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*  CALLS                                                                 */
  63:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  64:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*    None                                                                */
  65:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  66:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*  CALLED BY                                                             */
  67:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  68:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*    Application Code                                                    */
  69:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  70:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*  RELEASE HISTORY                                                       */
  71:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  72:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*    DATE              NAME                      DESCRIPTION             */
  73:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  74:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  75:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  76:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                            resulting in version 6.1    */
  77:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*  06-02-2021     Yuxin Zhou               Modified comment(s), added    */
  78:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                            conditional compilation     */
  79:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                            for ARMv8-M (Cortex M23/33) */
  80:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                            resulting in version 6.1.7  */
  81:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*  10-15-2021     Yuxin Zhou               Modified comment(s), improved */
  82:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                            stack check error handling, */
  83:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                            resulting in version 6.1.9  */
  84:ThreadX/common/src/tx_thread_stack_error_notify.c **** /*                                                                        */
  85:ThreadX/common/src/tx_thread_stack_error_notify.c **** /**************************************************************************/
  86:ThreadX/common/src/tx_thread_stack_error_notify.c **** UINT  _tx_thread_stack_error_notify(VOID (*stack_error_handler)(TX_THREAD *thread_ptr))
  87:ThreadX/common/src/tx_thread_stack_error_notify.c **** {
  28              		.loc 1 87 0
ARM GAS  /tmp/ccU0PMSq.s 			page 3


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  88:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
  89:ThreadX/common/src/tx_thread_stack_error_notify.c **** #if !defined(TX_ENABLE_STACK_CHECKING) && !defined(TX_PORT_THREAD_STACK_ERROR_HANDLING)
  90:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
  91:ThreadX/common/src/tx_thread_stack_error_notify.c **** UINT        status;
  92:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
  93:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
  94:ThreadX/common/src/tx_thread_stack_error_notify.c ****     /* Access input argument just for the sake of lint, MISRA, etc.  */
  95:ThreadX/common/src/tx_thread_stack_error_notify.c ****     if (stack_error_handler != TX_NULL)
  96:ThreadX/common/src/tx_thread_stack_error_notify.c ****     {
  97:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
  98:ThreadX/common/src/tx_thread_stack_error_notify.c ****         /* Stack checking is not enabled, just return an error.  */
  99:ThreadX/common/src/tx_thread_stack_error_notify.c ****         status =  TX_FEATURE_NOT_ENABLED;
 100:ThreadX/common/src/tx_thread_stack_error_notify.c ****     }
 101:ThreadX/common/src/tx_thread_stack_error_notify.c ****     else
 102:ThreadX/common/src/tx_thread_stack_error_notify.c ****     {
 103:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
 104:ThreadX/common/src/tx_thread_stack_error_notify.c ****         /* Stack checking is not enabled, just return an error.  */
 105:ThreadX/common/src/tx_thread_stack_error_notify.c ****         status =  TX_FEATURE_NOT_ENABLED;
 106:ThreadX/common/src/tx_thread_stack_error_notify.c ****     }
 107:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
 108:ThreadX/common/src/tx_thread_stack_error_notify.c ****     /* Return completion status.  */
 109:ThreadX/common/src/tx_thread_stack_error_notify.c ****     return(status);
 110:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
 111:ThreadX/common/src/tx_thread_stack_error_notify.c **** #else
 112:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
 113:ThreadX/common/src/tx_thread_stack_error_notify.c **** TX_INTERRUPT_SAVE_AREA
 114:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
 115:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
 116:ThreadX/common/src/tx_thread_stack_error_notify.c ****     /* Disable interrupts.  */
 117:ThreadX/common/src/tx_thread_stack_error_notify.c ****     TX_DISABLE
 118:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
 119:ThreadX/common/src/tx_thread_stack_error_notify.c ****     /* Make entry in event log.  */
 120:ThreadX/common/src/tx_thread_stack_error_notify.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_STACK_ERROR_NOTIFY, 0, 0, 0, 0, TX_TRACE_THREAD_EVENTS)
 121:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
 122:ThreadX/common/src/tx_thread_stack_error_notify.c ****     /* Make entry in event log.  */
 123:ThreadX/common/src/tx_thread_stack_error_notify.c ****     TX_EL_THREAD_STACK_ERROR_NOTIFY_INSERT
 124:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
 125:ThreadX/common/src/tx_thread_stack_error_notify.c ****     /* Setup global thread stack error handler.  */
 126:ThreadX/common/src/tx_thread_stack_error_notify.c ****     _tx_thread_application_stack_error_handler =  stack_error_handler;
 127:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
 128:ThreadX/common/src/tx_thread_stack_error_notify.c ****     /* Restore interrupts.  */
 129:ThreadX/common/src/tx_thread_stack_error_notify.c ****     TX_RESTORE
 130:ThreadX/common/src/tx_thread_stack_error_notify.c **** 
 131:ThreadX/common/src/tx_thread_stack_error_notify.c ****     /* Return success to caller.  */
 132:ThreadX/common/src/tx_thread_stack_error_notify.c ****     return(TX_SUCCESS);
 133:ThreadX/common/src/tx_thread_stack_error_notify.c **** #endif
 134:ThreadX/common/src/tx_thread_stack_error_notify.c **** }
  34              		.loc 1 134 0
  35 0000 FF20     		movs	r0, #255
  36              	.LVL1:
  37 0002 7047     		bx	lr
  38              		.cfi_endproc
ARM GAS  /tmp/ccU0PMSq.s 			page 4


  39              	.LFE8:
  41              		.text
  42              	.Letext0:
  43              		.file 2 "/usr/include/newlib/sys/lock.h"
  44              		.file 3 "/usr/include/newlib/sys/_types.h"
  45              		.file 4 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
  46              		.file 5 "/usr/include/newlib/sys/reent.h"
  47              		.file 6 "/usr/include/newlib/stdlib.h"
  48              		.file 7 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
  49              		.file 8 "ThreadX/common/inc/tx_api.h"
  50              		.file 9 "ThreadX/common/inc/tx_thread.h"
ARM GAS  /tmp/ccU0PMSq.s 			page 5


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_thread_stack_error_notify.c
     /tmp/ccU0PMSq.s:18     .text._tx_thread_stack_error_notify:0000000000000000 $t
     /tmp/ccU0PMSq.s:25     .text._tx_thread_stack_error_notify:0000000000000000 _tx_thread_stack_error_notify

NO UNDEFINED SYMBOLS
