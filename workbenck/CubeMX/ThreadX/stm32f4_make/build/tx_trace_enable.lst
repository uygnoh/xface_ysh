ARM GAS  /tmp/cc7kEQCY.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_trace_enable.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_trace_enable,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_trace_enable
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_trace_enable:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_trace_enable.c"
   1:ThreadX/common/src/tx_trace_enable.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
   3:ThreadX/common/src/tx_trace_enable.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
   5:ThreadX/common/src/tx_trace_enable.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_trace_enable.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_trace_enable.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_trace_enable.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  10:ThreadX/common/src/tx_trace_enable.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_trace_enable.c **** 
  12:ThreadX/common/src/tx_trace_enable.c **** 
  13:ThreadX/common/src/tx_trace_enable.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_trace_enable.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_trace_enable.c **** /**                                                                       */
  16:ThreadX/common/src/tx_trace_enable.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_trace_enable.c **** /**                                                                       */
  18:ThreadX/common/src/tx_trace_enable.c **** /**   Trace                                                               */
  19:ThreadX/common/src/tx_trace_enable.c **** /**                                                                       */
  20:ThreadX/common/src/tx_trace_enable.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_trace_enable.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_trace_enable.c **** 
  23:ThreadX/common/src/tx_trace_enable.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_trace_enable.c **** 
  25:ThreadX/common/src/tx_trace_enable.c **** 
  26:ThreadX/common/src/tx_trace_enable.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_trace_enable.c **** 
  28:ThreadX/common/src/tx_trace_enable.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_trace_enable.c **** #ifdef TX_ENABLE_EVENT_TRACE
  30:ThreadX/common/src/tx_trace_enable.c **** #include "tx_thread.h"
  31:ThreadX/common/src/tx_trace_enable.c **** #include "tx_timer.h"
ARM GAS  /tmp/cc7kEQCY.s 			page 2


  32:ThreadX/common/src/tx_trace_enable.c **** #include "tx_event_flags.h"
  33:ThreadX/common/src/tx_trace_enable.c **** #include "tx_queue.h"
  34:ThreadX/common/src/tx_trace_enable.c **** #include "tx_semaphore.h"
  35:ThreadX/common/src/tx_trace_enable.c **** #include "tx_mutex.h"
  36:ThreadX/common/src/tx_trace_enable.c **** #include "tx_block_pool.h"
  37:ThreadX/common/src/tx_trace_enable.c **** #include "tx_byte_pool.h"
  38:ThreadX/common/src/tx_trace_enable.c **** #endif
  39:ThreadX/common/src/tx_trace_enable.c **** #include "tx_trace.h"
  40:ThreadX/common/src/tx_trace_enable.c **** 
  41:ThreadX/common/src/tx_trace_enable.c **** 
  42:ThreadX/common/src/tx_trace_enable.c **** /**************************************************************************/
  43:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  44:ThreadX/common/src/tx_trace_enable.c **** /*  FUNCTION                                               RELEASE        */
  45:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  46:ThreadX/common/src/tx_trace_enable.c **** /*    _tx_trace_enable                                    PORTABLE C      */
  47:ThreadX/common/src/tx_trace_enable.c **** /*                                                           6.1          */
  48:ThreadX/common/src/tx_trace_enable.c **** /*  AUTHOR                                                                */
  49:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  50:ThreadX/common/src/tx_trace_enable.c **** /*    William E. Lamie, Microsoft Corporation                             */
  51:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  52:ThreadX/common/src/tx_trace_enable.c **** /*  DESCRIPTION                                                           */
  53:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  54:ThreadX/common/src/tx_trace_enable.c **** /*    This function initializes the ThreadX trace buffer and the          */
  55:ThreadX/common/src/tx_trace_enable.c **** /*    associated control variables, enabling it for operation.            */
  56:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  57:ThreadX/common/src/tx_trace_enable.c **** /*  INPUT                                                                 */
  58:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  59:ThreadX/common/src/tx_trace_enable.c **** /*    trace_buffer_start                    Start of trace buffer         */
  60:ThreadX/common/src/tx_trace_enable.c **** /*    trace_buffer_size                     Size (bytes) of trace buffer  */
  61:ThreadX/common/src/tx_trace_enable.c **** /*    registry_entries                      Number of object registry     */
  62:ThreadX/common/src/tx_trace_enable.c **** /*                                            entries.                    */
  63:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  64:ThreadX/common/src/tx_trace_enable.c **** /*  OUTPUT                                                                */
  65:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  66:ThreadX/common/src/tx_trace_enable.c **** /*    Completion Status                                                   */
  67:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  68:ThreadX/common/src/tx_trace_enable.c **** /*  CALLS                                                                 */
  69:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  70:ThreadX/common/src/tx_trace_enable.c **** /*    _tx_thread_system_preempt_check       Check for preemption          */
  71:ThreadX/common/src/tx_trace_enable.c **** /*    _tx_trace_object_register             Register existing objects     */
  72:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  73:ThreadX/common/src/tx_trace_enable.c **** /*  CALLED BY                                                             */
  74:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  75:ThreadX/common/src/tx_trace_enable.c **** /*    Application Code                                                    */
  76:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  77:ThreadX/common/src/tx_trace_enable.c **** /*  RELEASE HISTORY                                                       */
  78:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  79:ThreadX/common/src/tx_trace_enable.c **** /*    DATE              NAME                      DESCRIPTION             */
  80:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  81:ThreadX/common/src/tx_trace_enable.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  82:ThreadX/common/src/tx_trace_enable.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  83:ThreadX/common/src/tx_trace_enable.c **** /*                                            resulting in version 6.1    */
  84:ThreadX/common/src/tx_trace_enable.c **** /*                                                                        */
  85:ThreadX/common/src/tx_trace_enable.c **** /**************************************************************************/
  86:ThreadX/common/src/tx_trace_enable.c **** UINT  _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
  87:ThreadX/common/src/tx_trace_enable.c **** {
  28              		.loc 1 87 0
ARM GAS  /tmp/cc7kEQCY.s 			page 3


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  88:ThreadX/common/src/tx_trace_enable.c **** 
  89:ThreadX/common/src/tx_trace_enable.c **** #ifdef TX_ENABLE_EVENT_TRACE
  90:ThreadX/common/src/tx_trace_enable.c **** 
  91:ThreadX/common/src/tx_trace_enable.c **** TX_INTERRUPT_SAVE_AREA
  92:ThreadX/common/src/tx_trace_enable.c **** 
  93:ThreadX/common/src/tx_trace_enable.c **** TX_THREAD                       *thread_ptr;
  94:ThreadX/common/src/tx_trace_enable.c **** TX_TIMER                        *timer_ptr;
  95:ThreadX/common/src/tx_trace_enable.c **** TX_EVENT_FLAGS_GROUP            *event_flags_ptr;
  96:ThreadX/common/src/tx_trace_enable.c **** TX_QUEUE                        *queue_ptr;
  97:ThreadX/common/src/tx_trace_enable.c **** TX_SEMAPHORE                    *semaphore_ptr;
  98:ThreadX/common/src/tx_trace_enable.c **** TX_MUTEX                        *mutex_ptr;
  99:ThreadX/common/src/tx_trace_enable.c **** TX_BLOCK_POOL                   *block_pool_ptr;
 100:ThreadX/common/src/tx_trace_enable.c **** TX_BYTE_POOL                    *byte_pool_ptr;
 101:ThreadX/common/src/tx_trace_enable.c **** UCHAR                           *work_ptr;
 102:ThreadX/common/src/tx_trace_enable.c **** UCHAR                           *event_start_ptr;
 103:ThreadX/common/src/tx_trace_enable.c **** TX_TRACE_OBJECT_ENTRY           *entry_ptr;
 104:ThreadX/common/src/tx_trace_enable.c **** TX_TRACE_BUFFER_ENTRY           *event_ptr;
 105:ThreadX/common/src/tx_trace_enable.c **** ULONG                           i;
 106:ThreadX/common/src/tx_trace_enable.c **** UINT                            status;
 107:ThreadX/common/src/tx_trace_enable.c **** 
 108:ThreadX/common/src/tx_trace_enable.c **** 
 109:ThreadX/common/src/tx_trace_enable.c ****     /* First, see if there is enough room for the control header, the registry entries, and at leas
 110:ThreadX/common/src/tx_trace_enable.c ****        memory supplied to this call.  */
 111:ThreadX/common/src/tx_trace_enable.c ****     if (trace_buffer_size < ((sizeof(TX_TRACE_HEADER)) + ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registr
 112:ThreadX/common/src/tx_trace_enable.c ****     {
 113:ThreadX/common/src/tx_trace_enable.c **** 
 114:ThreadX/common/src/tx_trace_enable.c ****         /* No, the memory isn't big enough to hold one trace buffer entry.  Return an error.  */
 115:ThreadX/common/src/tx_trace_enable.c ****         status =  TX_SIZE_ERROR;
 116:ThreadX/common/src/tx_trace_enable.c ****     }
 117:ThreadX/common/src/tx_trace_enable.c **** 
 118:ThreadX/common/src/tx_trace_enable.c ****     /* Determine if trace is already enabled.  */
 119:ThreadX/common/src/tx_trace_enable.c ****     else if (_tx_trace_buffer_current_ptr != TX_NULL)
 120:ThreadX/common/src/tx_trace_enable.c ****     {
 121:ThreadX/common/src/tx_trace_enable.c **** 
 122:ThreadX/common/src/tx_trace_enable.c ****         /* Yes, trace is already enabled.  */
 123:ThreadX/common/src/tx_trace_enable.c ****         status =  TX_NOT_DONE;
 124:ThreadX/common/src/tx_trace_enable.c ****     }
 125:ThreadX/common/src/tx_trace_enable.c ****     else
 126:ThreadX/common/src/tx_trace_enable.c ****     {
 127:ThreadX/common/src/tx_trace_enable.c **** 
 128:ThreadX/common/src/tx_trace_enable.c ****         /* Set the enable bits for all events enabled.  */
 129:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_event_enable_bits =  0xFFFFFFFFUL;
 130:ThreadX/common/src/tx_trace_enable.c **** 
 131:ThreadX/common/src/tx_trace_enable.c ****         /* Setup working pointer to the supplied memory.  */
 132:ThreadX/common/src/tx_trace_enable.c ****         work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(trace_buffer_start);
 133:ThreadX/common/src/tx_trace_enable.c **** 
 134:ThreadX/common/src/tx_trace_enable.c ****         /* Setup pointer to the trace control area.  */
 135:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr =  TX_UCHAR_TO_HEADER_POINTER_CONVERT(work_ptr);
 136:ThreadX/common/src/tx_trace_enable.c **** 
 137:ThreadX/common/src/tx_trace_enable.c ****         /* Move the working pointer past the control area.  */
 138:ThreadX/common/src/tx_trace_enable.c ****         work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_HEADER)));
 139:ThreadX/common/src/tx_trace_enable.c **** 
ARM GAS  /tmp/cc7kEQCY.s 			page 4


 140:ThreadX/common/src/tx_trace_enable.c ****         /* Save the start of the trace object registry.  */
 141:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_registry_start_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 142:ThreadX/common/src/tx_trace_enable.c **** 
 143:ThreadX/common/src/tx_trace_enable.c ****         /* Setup the end of the trace object registry.  */
 144:ThreadX/common/src/tx_trace_enable.c ****         work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*registry_entries
 145:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_registry_end_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 146:ThreadX/common/src/tx_trace_enable.c **** 
 147:ThreadX/common/src/tx_trace_enable.c ****         /* Loop to make all trace object registry entries empty and valid.  */
 148:ThreadX/common/src/tx_trace_enable.c ****         for (i = ((ULONG) 0); i < registry_entries; i++)
 149:ThreadX/common/src/tx_trace_enable.c ****         {
 150:ThreadX/common/src/tx_trace_enable.c **** 
 151:ThreadX/common/src/tx_trace_enable.c ****             /* Setup the work pointer.  */
 152:ThreadX/common/src/tx_trace_enable.c ****             work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 153:ThreadX/common/src/tx_trace_enable.c ****             work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*i);
 154:ThreadX/common/src/tx_trace_enable.c **** 
 155:ThreadX/common/src/tx_trace_enable.c ****             /* Convert to a registry entry pointer.  */
 156:ThreadX/common/src/tx_trace_enable.c ****             entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 157:ThreadX/common/src/tx_trace_enable.c **** 
 158:ThreadX/common/src/tx_trace_enable.c ****             /* Initialize object registry entry.  */
 159:ThreadX/common/src/tx_trace_enable.c ****             entry_ptr -> tx_trace_object_entry_available =         (UCHAR) TX_TRUE;
 160:ThreadX/common/src/tx_trace_enable.c ****             entry_ptr -> tx_trace_object_entry_type =              (UCHAR) TX_TRACE_OBJECT_TYPE_NOT
 161:ThreadX/common/src/tx_trace_enable.c ****             entry_ptr -> tx_trace_object_entry_reserved1 =         (UCHAR) 0;
 162:ThreadX/common/src/tx_trace_enable.c ****             entry_ptr -> tx_trace_object_entry_reserved2 =         (UCHAR) 0;
 163:ThreadX/common/src/tx_trace_enable.c ****             entry_ptr -> tx_trace_object_entry_thread_pointer =    (ULONG) 0;
 164:ThreadX/common/src/tx_trace_enable.c ****         }
 165:ThreadX/common/src/tx_trace_enable.c **** 
 166:ThreadX/common/src/tx_trace_enable.c ****         /* Setup the total number of registry entries.  */
 167:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_total_registry_entries =  registry_entries;
 168:ThreadX/common/src/tx_trace_enable.c **** 
 169:ThreadX/common/src/tx_trace_enable.c ****         /* Setup the object registry available count to the total number of registry entries.  */
 170:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_available_registry_entries =  registry_entries;
 171:ThreadX/common/src/tx_trace_enable.c **** 
 172:ThreadX/common/src/tx_trace_enable.c ****         /* Setup the search starting index to the first entry.  */
 173:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_registry_search_start =  ((ULONG) 0);
 174:ThreadX/common/src/tx_trace_enable.c **** 
 175:ThreadX/common/src/tx_trace_enable.c ****         /* Setup the work pointer to after the trace object registry.  */
 176:ThreadX/common/src/tx_trace_enable.c ****         work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_end_ptr);
 177:ThreadX/common/src/tx_trace_enable.c **** 
 178:ThreadX/common/src/tx_trace_enable.c ****         /* Adjust the remaining trace buffer size.  */
 179:ThreadX/common/src/tx_trace_enable.c ****         trace_buffer_size =  trace_buffer_size - ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registry_entrie
 180:ThreadX/common/src/tx_trace_enable.c **** 
 181:ThreadX/common/src/tx_trace_enable.c ****         /* Setup pointer to the start of the actual event trace log.  */
 182:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_buffer_start_ptr =      TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 183:ThreadX/common/src/tx_trace_enable.c **** 
 184:ThreadX/common/src/tx_trace_enable.c ****         /* Save the event trace log start address.  */
 185:ThreadX/common/src/tx_trace_enable.c ****         event_start_ptr =  work_ptr;
 186:ThreadX/common/src/tx_trace_enable.c **** 
 187:ThreadX/common/src/tx_trace_enable.c ****         /* Calculate the end of the trace buffer.  */
 188:ThreadX/common/src/tx_trace_enable.c ****         work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, ((trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTR
 189:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_buffer_end_ptr =        TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 190:ThreadX/common/src/tx_trace_enable.c **** 
 191:ThreadX/common/src/tx_trace_enable.c ****         /* Loop to mark all entries in the trace buffer as invalid.  */
 192:ThreadX/common/src/tx_trace_enable.c ****         for (i = ((ULONG) 0); i < (trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY))); i++)
 193:ThreadX/common/src/tx_trace_enable.c ****         {
 194:ThreadX/common/src/tx_trace_enable.c **** 
 195:ThreadX/common/src/tx_trace_enable.c ****             /* Setup the work pointer.  */
 196:ThreadX/common/src/tx_trace_enable.c ****             work_ptr =  TX_UCHAR_POINTER_ADD(event_start_ptr, (sizeof(TX_TRACE_BUFFER_ENTRY))*i);
ARM GAS  /tmp/cc7kEQCY.s 			page 5


 197:ThreadX/common/src/tx_trace_enable.c **** 
 198:ThreadX/common/src/tx_trace_enable.c ****             /* Convert to a trace event pointer.  */
 199:ThreadX/common/src/tx_trace_enable.c ****             event_ptr =  TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 200:ThreadX/common/src/tx_trace_enable.c **** 
 201:ThreadX/common/src/tx_trace_enable.c ****             /* Mark this trace event as invalid.  */
 202:ThreadX/common/src/tx_trace_enable.c ****             event_ptr -> tx_trace_buffer_entry_thread_pointer =  ((ULONG) 0);
 203:ThreadX/common/src/tx_trace_enable.c ****         }
 204:ThreadX/common/src/tx_trace_enable.c **** 
 205:ThreadX/common/src/tx_trace_enable.c ****         /* Now, fill in the event trace control header.  */
 206:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr -> tx_trace_header_id =                             TX_TRACE_VALID;
 207:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr -> tx_trace_header_timer_valid_mask =               TX_TRACE_TIME_MASK
 208:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr -> tx_trace_header_trace_base_address =             TX_POINTER_TO_ULON
 209:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr -> tx_trace_header_registry_start_pointer =         TX_POINTER_TO_ULON
 210:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr -> tx_trace_header_reserved1 =                      ((USHORT) 0);
 211:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr -> tx_trace_header_object_name_size =               ((USHORT) TX_TRACE
 212:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr -> tx_trace_header_registry_end_pointer =           TX_POINTER_TO_ULON
 213:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr -> tx_trace_header_buffer_start_pointer =           TX_POINTER_TO_ULON
 214:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr -> tx_trace_header_buffer_end_pointer =             TX_POINTER_TO_ULON
 215:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr -> tx_trace_header_buffer_current_pointer =         TX_POINTER_TO_ULON
 216:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr -> tx_trace_header_reserved2 =                      0xAAAAAAAAUL;
 217:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr -> tx_trace_header_reserved3 =                      0xBBBBBBBBUL;
 218:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_header_ptr -> tx_trace_header_reserved4 =                      0xCCCCCCCCUL;
 219:ThreadX/common/src/tx_trace_enable.c **** 
 220:ThreadX/common/src/tx_trace_enable.c ****         /* Now, loop through all existing ThreadX objects and register them in the newly setup trac
 221:ThreadX/common/src/tx_trace_enable.c **** 
 222:ThreadX/common/src/tx_trace_enable.c ****         /* Disable interrupts.  */
 223:ThreadX/common/src/tx_trace_enable.c ****         TX_DISABLE
 224:ThreadX/common/src/tx_trace_enable.c **** 
 225:ThreadX/common/src/tx_trace_enable.c ****         /* First, disable preemption.  */
 226:ThreadX/common/src/tx_trace_enable.c ****         _tx_thread_preempt_disable++;
 227:ThreadX/common/src/tx_trace_enable.c **** 
 228:ThreadX/common/src/tx_trace_enable.c ****         /* Restore interrupts.  */
 229:ThreadX/common/src/tx_trace_enable.c ****         TX_RESTORE
 230:ThreadX/common/src/tx_trace_enable.c **** 
 231:ThreadX/common/src/tx_trace_enable.c ****         /* Pickup the first thread and the number of created threads.  */
 232:ThreadX/common/src/tx_trace_enable.c ****         thread_ptr =  _tx_thread_created_ptr;
 233:ThreadX/common/src/tx_trace_enable.c ****         i =           _tx_thread_created_count;
 234:ThreadX/common/src/tx_trace_enable.c **** 
 235:ThreadX/common/src/tx_trace_enable.c ****         /* Loop to register all threads.  */
 236:ThreadX/common/src/tx_trace_enable.c ****         while (i != ((ULONG) 0))
 237:ThreadX/common/src/tx_trace_enable.c ****         {
 238:ThreadX/common/src/tx_trace_enable.c **** 
 239:ThreadX/common/src/tx_trace_enable.c ****             /* Decrement the counter.  */
 240:ThreadX/common/src/tx_trace_enable.c ****             i--;
 241:ThreadX/common/src/tx_trace_enable.c **** 
 242:ThreadX/common/src/tx_trace_enable.c ****             /* Register this thread.  */
 243:ThreadX/common/src/tx_trace_enable.c ****             _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thr
 244:ThreadX/common/src/tx_trace_enable.c ****                                         TX_POINTER_TO_ULONG_CONVERT(thread_ptr -> tx_thread_stack_s
 245:ThreadX/common/src/tx_trace_enable.c **** 
 246:ThreadX/common/src/tx_trace_enable.c ****             /* Move to the next thread.  */
 247:ThreadX/common/src/tx_trace_enable.c ****             thread_ptr =  thread_ptr -> tx_thread_created_next;
 248:ThreadX/common/src/tx_trace_enable.c ****         }
 249:ThreadX/common/src/tx_trace_enable.c **** 
 250:ThreadX/common/src/tx_trace_enable.c ****         /* Pickup the first timer and the number of created timers.  */
 251:ThreadX/common/src/tx_trace_enable.c ****         timer_ptr =  _tx_timer_created_ptr;
 252:ThreadX/common/src/tx_trace_enable.c ****         i =          _tx_timer_created_count;
 253:ThreadX/common/src/tx_trace_enable.c **** 
ARM GAS  /tmp/cc7kEQCY.s 			page 6


 254:ThreadX/common/src/tx_trace_enable.c ****         /* Loop to register all timers.  */
 255:ThreadX/common/src/tx_trace_enable.c ****         while (i != ((ULONG) 0))
 256:ThreadX/common/src/tx_trace_enable.c ****         {
 257:ThreadX/common/src/tx_trace_enable.c **** 
 258:ThreadX/common/src/tx_trace_enable.c ****             /* Decrement the counter.  */
 259:ThreadX/common/src/tx_trace_enable.c ****             i--;
 260:ThreadX/common/src/tx_trace_enable.c **** 
 261:ThreadX/common/src/tx_trace_enable.c ****             /* Register this timer.  */
 262:ThreadX/common/src/tx_trace_enable.c ****             _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_TIMER, timer_ptr, timer_ptr -> tx_timer_
 263:ThreadX/common/src/tx_trace_enable.c ****                                                        ((ULONG) 0), timer_ptr -> tx_timer_internal.
 264:ThreadX/common/src/tx_trace_enable.c **** 
 265:ThreadX/common/src/tx_trace_enable.c ****             /* Move to the next timer.  */
 266:ThreadX/common/src/tx_trace_enable.c ****             timer_ptr =  timer_ptr -> tx_timer_created_next;
 267:ThreadX/common/src/tx_trace_enable.c ****         }
 268:ThreadX/common/src/tx_trace_enable.c **** 
 269:ThreadX/common/src/tx_trace_enable.c **** 
 270:ThreadX/common/src/tx_trace_enable.c ****         /* Pickup the first event flag group and the number of created groups.  */
 271:ThreadX/common/src/tx_trace_enable.c ****         event_flags_ptr =  _tx_event_flags_created_ptr;
 272:ThreadX/common/src/tx_trace_enable.c ****         i =                _tx_event_flags_created_count;
 273:ThreadX/common/src/tx_trace_enable.c **** 
 274:ThreadX/common/src/tx_trace_enable.c ****         /* Loop to register all event flags groups.  */
 275:ThreadX/common/src/tx_trace_enable.c ****         while (i != ((ULONG) 0))
 276:ThreadX/common/src/tx_trace_enable.c ****         {
 277:ThreadX/common/src/tx_trace_enable.c **** 
 278:ThreadX/common/src/tx_trace_enable.c ****             /* Decrement the counter.  */
 279:ThreadX/common/src/tx_trace_enable.c ****             i--;
 280:ThreadX/common/src/tx_trace_enable.c **** 
 281:ThreadX/common/src/tx_trace_enable.c ****             /* Register this event flags group.  */
 282:ThreadX/common/src/tx_trace_enable.c ****             _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_EVENT_FLAGS, event_flags_ptr, event_flag
 283:ThreadX/common/src/tx_trace_enable.c **** 
 284:ThreadX/common/src/tx_trace_enable.c ****             /* Move to the next event flags group.  */
 285:ThreadX/common/src/tx_trace_enable.c ****             event_flags_ptr =  event_flags_ptr -> tx_event_flags_group_created_next;
 286:ThreadX/common/src/tx_trace_enable.c ****         }
 287:ThreadX/common/src/tx_trace_enable.c **** 
 288:ThreadX/common/src/tx_trace_enable.c ****         /* Pickup the first queue and the number of created queues.  */
 289:ThreadX/common/src/tx_trace_enable.c ****         queue_ptr =  _tx_queue_created_ptr;
 290:ThreadX/common/src/tx_trace_enable.c ****         i =          _tx_queue_created_count;
 291:ThreadX/common/src/tx_trace_enable.c **** 
 292:ThreadX/common/src/tx_trace_enable.c ****         /* Loop to register all queues.  */
 293:ThreadX/common/src/tx_trace_enable.c ****         while (i != ((ULONG) 0))
 294:ThreadX/common/src/tx_trace_enable.c ****         {
 295:ThreadX/common/src/tx_trace_enable.c **** 
 296:ThreadX/common/src/tx_trace_enable.c ****             /* Decrement the counter.  */
 297:ThreadX/common/src/tx_trace_enable.c ****             i--;
 298:ThreadX/common/src/tx_trace_enable.c **** 
 299:ThreadX/common/src/tx_trace_enable.c ****             /* Register this queue.  */
 300:ThreadX/common/src/tx_trace_enable.c ****             _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, queue_ptr -> tx_queue_
 301:ThreadX/common/src/tx_trace_enable.c ****                                                                     (queue_ptr -> tx_queue_capacity
 302:ThreadX/common/src/tx_trace_enable.c **** 
 303:ThreadX/common/src/tx_trace_enable.c ****             /* Move to the next queue.  */
 304:ThreadX/common/src/tx_trace_enable.c ****             queue_ptr =  queue_ptr -> tx_queue_created_next;
 305:ThreadX/common/src/tx_trace_enable.c ****         }
 306:ThreadX/common/src/tx_trace_enable.c **** 
 307:ThreadX/common/src/tx_trace_enable.c ****         /* Pickup the first semaphore and the number of created semaphores.  */
 308:ThreadX/common/src/tx_trace_enable.c ****         semaphore_ptr =  _tx_semaphore_created_ptr;
 309:ThreadX/common/src/tx_trace_enable.c ****         i =              _tx_semaphore_created_count;
 310:ThreadX/common/src/tx_trace_enable.c **** 
ARM GAS  /tmp/cc7kEQCY.s 			page 7


 311:ThreadX/common/src/tx_trace_enable.c ****         /* Loop to register all semaphores.  */
 312:ThreadX/common/src/tx_trace_enable.c ****         while (i != ((ULONG) 0))
 313:ThreadX/common/src/tx_trace_enable.c ****         {
 314:ThreadX/common/src/tx_trace_enable.c **** 
 315:ThreadX/common/src/tx_trace_enable.c ****             /* Decrement the counter.  */
 316:ThreadX/common/src/tx_trace_enable.c ****             i--;
 317:ThreadX/common/src/tx_trace_enable.c **** 
 318:ThreadX/common/src/tx_trace_enable.c ****             /* Register this semaphore.  */
 319:ThreadX/common/src/tx_trace_enable.c ****             _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, semaphore_ptr 
 320:ThreadX/common/src/tx_trace_enable.c **** 
 321:ThreadX/common/src/tx_trace_enable.c ****             /* Move to the next semaphore.  */
 322:ThreadX/common/src/tx_trace_enable.c ****             semaphore_ptr =  semaphore_ptr -> tx_semaphore_created_next;
 323:ThreadX/common/src/tx_trace_enable.c ****         }
 324:ThreadX/common/src/tx_trace_enable.c **** 
 325:ThreadX/common/src/tx_trace_enable.c ****         /* Pickup the first mutex and the number of created mutexes.  */
 326:ThreadX/common/src/tx_trace_enable.c ****         mutex_ptr =  _tx_mutex_created_ptr;
 327:ThreadX/common/src/tx_trace_enable.c ****         i =          _tx_mutex_created_count;
 328:ThreadX/common/src/tx_trace_enable.c **** 
 329:ThreadX/common/src/tx_trace_enable.c ****         /* Loop to register all mutexes.  */
 330:ThreadX/common/src/tx_trace_enable.c ****         while (i != ((ULONG) 0))
 331:ThreadX/common/src/tx_trace_enable.c ****         {
 332:ThreadX/common/src/tx_trace_enable.c **** 
 333:ThreadX/common/src/tx_trace_enable.c ****             /* Decrement the counter.  */
 334:ThreadX/common/src/tx_trace_enable.c ****             i--;
 335:ThreadX/common/src/tx_trace_enable.c **** 
 336:ThreadX/common/src/tx_trace_enable.c ****             /* Register this mutex.  */
 337:ThreadX/common/src/tx_trace_enable.c ****             _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, mutex_ptr -> tx_mutex_
 338:ThreadX/common/src/tx_trace_enable.c ****                                                                         (ULONG) mutex_ptr -> tx_mut
 339:ThreadX/common/src/tx_trace_enable.c **** 
 340:ThreadX/common/src/tx_trace_enable.c ****             /* Move to the next mutex.  */
 341:ThreadX/common/src/tx_trace_enable.c ****             mutex_ptr =  mutex_ptr -> tx_mutex_created_next;
 342:ThreadX/common/src/tx_trace_enable.c ****         }
 343:ThreadX/common/src/tx_trace_enable.c **** 
 344:ThreadX/common/src/tx_trace_enable.c ****         /* Pickup the first block pool and the number of created block pools.  */
 345:ThreadX/common/src/tx_trace_enable.c ****         block_pool_ptr =  _tx_block_pool_created_ptr;
 346:ThreadX/common/src/tx_trace_enable.c ****         i =               _tx_block_pool_created_count;
 347:ThreadX/common/src/tx_trace_enable.c **** 
 348:ThreadX/common/src/tx_trace_enable.c ****         /* Loop to register all block pools.  */
 349:ThreadX/common/src/tx_trace_enable.c ****         while (i != ((ULONG) 0))
 350:ThreadX/common/src/tx_trace_enable.c ****         {
 351:ThreadX/common/src/tx_trace_enable.c **** 
 352:ThreadX/common/src/tx_trace_enable.c ****              /* Decrement the counter.  */
 353:ThreadX/common/src/tx_trace_enable.c ****             i--;
 354:ThreadX/common/src/tx_trace_enable.c **** 
 355:ThreadX/common/src/tx_trace_enable.c ****             /* Register this block pool.  */
 356:ThreadX/common/src/tx_trace_enable.c ****             _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BLOCK_POOL, block_pool_ptr, block_pool_p
 357:ThreadX/common/src/tx_trace_enable.c ****                                                                             block_pool_ptr -> tx_bl
 358:ThreadX/common/src/tx_trace_enable.c **** 
 359:ThreadX/common/src/tx_trace_enable.c ****             /* Move to the next block pool.  */
 360:ThreadX/common/src/tx_trace_enable.c ****             block_pool_ptr =  block_pool_ptr -> tx_block_pool_created_next;
 361:ThreadX/common/src/tx_trace_enable.c ****         }
 362:ThreadX/common/src/tx_trace_enable.c **** 
 363:ThreadX/common/src/tx_trace_enable.c ****         /* Pickup the first byte pool and the number of created byte pools.  */
 364:ThreadX/common/src/tx_trace_enable.c ****         byte_pool_ptr =  _tx_byte_pool_created_ptr;
 365:ThreadX/common/src/tx_trace_enable.c ****         i =              _tx_byte_pool_created_count;
 366:ThreadX/common/src/tx_trace_enable.c **** 
 367:ThreadX/common/src/tx_trace_enable.c ****         /* Loop to register all byte pools.  */
ARM GAS  /tmp/cc7kEQCY.s 			page 8


 368:ThreadX/common/src/tx_trace_enable.c ****         while (i != ((ULONG) 0))
 369:ThreadX/common/src/tx_trace_enable.c ****         {
 370:ThreadX/common/src/tx_trace_enable.c **** 
 371:ThreadX/common/src/tx_trace_enable.c ****             /* Decrement the counter.  */
 372:ThreadX/common/src/tx_trace_enable.c ****             i--;
 373:ThreadX/common/src/tx_trace_enable.c **** 
 374:ThreadX/common/src/tx_trace_enable.c ****             /* Register this byte pool.  */
 375:ThreadX/common/src/tx_trace_enable.c ****             _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BYTE_POOL, byte_pool_ptr, byte_pool_ptr 
 376:ThreadX/common/src/tx_trace_enable.c ****                                                                             byte_pool_ptr -> tx_byt
 377:ThreadX/common/src/tx_trace_enable.c **** 
 378:ThreadX/common/src/tx_trace_enable.c ****             /* Move to the next byte pool.  */
 379:ThreadX/common/src/tx_trace_enable.c ****             byte_pool_ptr =  byte_pool_ptr -> tx_byte_pool_created_next;
 380:ThreadX/common/src/tx_trace_enable.c ****         }
 381:ThreadX/common/src/tx_trace_enable.c **** 
 382:ThreadX/common/src/tx_trace_enable.c ****         /* Disable interrupts.  */
 383:ThreadX/common/src/tx_trace_enable.c ****         TX_DISABLE
 384:ThreadX/common/src/tx_trace_enable.c **** 
 385:ThreadX/common/src/tx_trace_enable.c ****         /* Release the preeemption.  */
 386:ThreadX/common/src/tx_trace_enable.c ****         _tx_thread_preempt_disable--;
 387:ThreadX/common/src/tx_trace_enable.c **** 
 388:ThreadX/common/src/tx_trace_enable.c ****         /* Finally, setup the current buffer pointer, which effectively enables the trace!  */
 389:ThreadX/common/src/tx_trace_enable.c ****         _tx_trace_buffer_current_ptr =    (TX_TRACE_BUFFER_ENTRY *) _tx_trace_buffer_start_ptr;
 390:ThreadX/common/src/tx_trace_enable.c **** 
 391:ThreadX/common/src/tx_trace_enable.c ****         /* Insert two RUNNING events so the buffer is not empty.  */
 392:ThreadX/common/src/tx_trace_enable.c ****         TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
 393:ThreadX/common/src/tx_trace_enable.c ****         TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
 394:ThreadX/common/src/tx_trace_enable.c **** 
 395:ThreadX/common/src/tx_trace_enable.c ****         /* Restore interrupts.  */
 396:ThreadX/common/src/tx_trace_enable.c ****         TX_RESTORE
 397:ThreadX/common/src/tx_trace_enable.c **** 
 398:ThreadX/common/src/tx_trace_enable.c ****         /* Check for preemption.  */
 399:ThreadX/common/src/tx_trace_enable.c ****         _tx_thread_system_preempt_check();
 400:ThreadX/common/src/tx_trace_enable.c **** 
 401:ThreadX/common/src/tx_trace_enable.c ****         /* Return successful completion.  */
 402:ThreadX/common/src/tx_trace_enable.c ****         status =  TX_SUCCESS;
 403:ThreadX/common/src/tx_trace_enable.c ****     }
 404:ThreadX/common/src/tx_trace_enable.c **** 
 405:ThreadX/common/src/tx_trace_enable.c ****     /* Return completion status.  */
 406:ThreadX/common/src/tx_trace_enable.c ****     return(status);
 407:ThreadX/common/src/tx_trace_enable.c **** #else
 408:ThreadX/common/src/tx_trace_enable.c **** 
 409:ThreadX/common/src/tx_trace_enable.c **** UINT        status;
 410:ThreadX/common/src/tx_trace_enable.c **** 
 411:ThreadX/common/src/tx_trace_enable.c **** 
 412:ThreadX/common/src/tx_trace_enable.c ****     /* Access input arguments just for the sake of lint, MISRA, etc.  */
 413:ThreadX/common/src/tx_trace_enable.c ****     if (trace_buffer_start != TX_NULL)
 414:ThreadX/common/src/tx_trace_enable.c ****     {
 415:ThreadX/common/src/tx_trace_enable.c **** 
 416:ThreadX/common/src/tx_trace_enable.c ****         /* Trace not enabled, return an error.  */
 417:ThreadX/common/src/tx_trace_enable.c ****         status =  TX_FEATURE_NOT_ENABLED;
 418:ThreadX/common/src/tx_trace_enable.c ****     }
 419:ThreadX/common/src/tx_trace_enable.c ****     else if (trace_buffer_size == ((ULONG) 0))
 420:ThreadX/common/src/tx_trace_enable.c ****     {
 421:ThreadX/common/src/tx_trace_enable.c **** 
 422:ThreadX/common/src/tx_trace_enable.c ****         /* Trace not enabled, return an error.  */
 423:ThreadX/common/src/tx_trace_enable.c ****         status =  TX_FEATURE_NOT_ENABLED;
 424:ThreadX/common/src/tx_trace_enable.c ****     }
ARM GAS  /tmp/cc7kEQCY.s 			page 9


 425:ThreadX/common/src/tx_trace_enable.c ****     else if (registry_entries == ((ULONG) 0))
 426:ThreadX/common/src/tx_trace_enable.c ****     {
 427:ThreadX/common/src/tx_trace_enable.c **** 
 428:ThreadX/common/src/tx_trace_enable.c ****         /* Trace not enabled, return an error.  */
 429:ThreadX/common/src/tx_trace_enable.c ****         status =  TX_FEATURE_NOT_ENABLED;
 430:ThreadX/common/src/tx_trace_enable.c ****     }
 431:ThreadX/common/src/tx_trace_enable.c ****     else
 432:ThreadX/common/src/tx_trace_enable.c ****     {
 433:ThreadX/common/src/tx_trace_enable.c **** 
 434:ThreadX/common/src/tx_trace_enable.c ****         /* Trace not enabled, return an error.  */
 435:ThreadX/common/src/tx_trace_enable.c ****         status =  TX_FEATURE_NOT_ENABLED;
 436:ThreadX/common/src/tx_trace_enable.c ****     }
 437:ThreadX/common/src/tx_trace_enable.c **** 
 438:ThreadX/common/src/tx_trace_enable.c ****     /* Return completion status.  */
 439:ThreadX/common/src/tx_trace_enable.c ****     return(status);
 440:ThreadX/common/src/tx_trace_enable.c **** #endif
 441:ThreadX/common/src/tx_trace_enable.c **** }
  34              		.loc 1 441 0
  35 0000 FF20     		movs	r0, #255
  36              	.LVL1:
  37 0002 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE8:
  41              		.text
  42              	.Letext0:
  43              		.file 2 "/usr/include/newlib/sys/lock.h"
  44              		.file 3 "/usr/include/newlib/sys/_types.h"
  45              		.file 4 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
  46              		.file 5 "/usr/include/newlib/sys/reent.h"
  47              		.file 6 "/usr/include/newlib/stdlib.h"
  48              		.file 7 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
ARM GAS  /tmp/cc7kEQCY.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_trace_enable.c
     /tmp/cc7kEQCY.s:18     .text._tx_trace_enable:0000000000000000 $t
     /tmp/cc7kEQCY.s:25     .text._tx_trace_enable:0000000000000000 _tx_trace_enable

NO UNDEFINED SYMBOLS
