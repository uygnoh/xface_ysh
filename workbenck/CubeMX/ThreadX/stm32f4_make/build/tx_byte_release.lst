ARM GAS  /tmp/ccKKXbNi.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_byte_release.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_byte_release,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_byte_release
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_byte_release:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_byte_release.c"
   1:ThreadX/common/src/tx_byte_release.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
   3:ThreadX/common/src/tx_byte_release.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
   5:ThreadX/common/src/tx_byte_release.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_byte_release.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_byte_release.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_byte_release.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  10:ThreadX/common/src/tx_byte_release.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_byte_release.c **** 
  12:ThreadX/common/src/tx_byte_release.c **** 
  13:ThreadX/common/src/tx_byte_release.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_byte_release.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_byte_release.c **** /**                                                                       */
  16:ThreadX/common/src/tx_byte_release.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_byte_release.c **** /**                                                                       */
  18:ThreadX/common/src/tx_byte_release.c **** /**   Byte Memory                                                         */
  19:ThreadX/common/src/tx_byte_release.c **** /**                                                                       */
  20:ThreadX/common/src/tx_byte_release.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_byte_release.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_byte_release.c **** 
  23:ThreadX/common/src/tx_byte_release.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_byte_release.c **** 
  25:ThreadX/common/src/tx_byte_release.c **** 
  26:ThreadX/common/src/tx_byte_release.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_byte_release.c **** 
  28:ThreadX/common/src/tx_byte_release.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_byte_release.c **** #include "tx_trace.h"
  30:ThreadX/common/src/tx_byte_release.c **** #include "tx_thread.h"
  31:ThreadX/common/src/tx_byte_release.c **** #include "tx_byte_pool.h"
ARM GAS  /tmp/ccKKXbNi.s 			page 2


  32:ThreadX/common/src/tx_byte_release.c **** 
  33:ThreadX/common/src/tx_byte_release.c **** 
  34:ThreadX/common/src/tx_byte_release.c **** /**************************************************************************/
  35:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  36:ThreadX/common/src/tx_byte_release.c **** /*  FUNCTION                                               RELEASE        */
  37:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  38:ThreadX/common/src/tx_byte_release.c **** /*    _tx_byte_release                                    PORTABLE C      */
  39:ThreadX/common/src/tx_byte_release.c **** /*                                                           6.1          */
  40:ThreadX/common/src/tx_byte_release.c **** /*  AUTHOR                                                                */
  41:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  42:ThreadX/common/src/tx_byte_release.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  44:ThreadX/common/src/tx_byte_release.c **** /*  DESCRIPTION                                                           */
  45:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  46:ThreadX/common/src/tx_byte_release.c **** /*    This function returns previously allocated memory to its            */
  47:ThreadX/common/src/tx_byte_release.c **** /*    associated memory byte pool.                                        */
  48:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  49:ThreadX/common/src/tx_byte_release.c **** /*  INPUT                                                                 */
  50:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  51:ThreadX/common/src/tx_byte_release.c **** /*    memory_ptr                        Pointer to allocated memory       */
  52:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  53:ThreadX/common/src/tx_byte_release.c **** /*  OUTPUT                                                                */
  54:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  55:ThreadX/common/src/tx_byte_release.c **** /*    [TX_PTR_ERROR | TX_SUCCESS]       Completion status                 */
  56:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  57:ThreadX/common/src/tx_byte_release.c **** /*  CALLS                                                                 */
  58:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  59:ThreadX/common/src/tx_byte_release.c **** /*    _tx_thread_system_preempt_check   Check for preemption              */
  60:ThreadX/common/src/tx_byte_release.c **** /*    _tx_thread_system_resume          Resume thread service             */
  61:ThreadX/common/src/tx_byte_release.c **** /*    _tx_thread_system_ni_resume       Non-interruptable resume thread   */
  62:ThreadX/common/src/tx_byte_release.c **** /*    _tx_byte_pool_search              Search the byte pool for memory   */
  63:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  64:ThreadX/common/src/tx_byte_release.c **** /*  CALLED BY                                                             */
  65:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  66:ThreadX/common/src/tx_byte_release.c **** /*    Application Code                                                    */
  67:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  68:ThreadX/common/src/tx_byte_release.c **** /*  RELEASE HISTORY                                                       */
  69:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  70:ThreadX/common/src/tx_byte_release.c **** /*    DATE              NAME                      DESCRIPTION             */
  71:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  72:ThreadX/common/src/tx_byte_release.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  73:ThreadX/common/src/tx_byte_release.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  74:ThreadX/common/src/tx_byte_release.c **** /*                                            resulting in version 6.1    */
  75:ThreadX/common/src/tx_byte_release.c **** /*                                                                        */
  76:ThreadX/common/src/tx_byte_release.c **** /**************************************************************************/
  77:ThreadX/common/src/tx_byte_release.c **** UINT  _tx_byte_release(VOID *memory_ptr)
  78:ThreadX/common/src/tx_byte_release.c **** {
  28              		.loc 1 78 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 4, -24
  37              		.cfi_offset 5, -20
ARM GAS  /tmp/ccKKXbNi.s 			page 3


  38              		.cfi_offset 6, -16
  39              		.cfi_offset 7, -12
  40              		.cfi_offset 8, -8
  41              		.cfi_offset 14, -4
  42              	.LVL1:
  43              	.LBB26:
  44              	.LBB27:
  45              	.LBB28:
  46              	.LBB29:
  47              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
ARM GAS  /tmp/ccKKXbNi.s 			page 4


  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccKKXbNi.s 			page 5


 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccKKXbNi.s 			page 6


 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccKKXbNi.s 			page 7


 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
ARM GAS  /tmp/ccKKXbNi.s 			page 8


 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
ARM GAS  /tmp/ccKKXbNi.s 			page 9


 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
ARM GAS  /tmp/ccKKXbNi.s 			page 10


 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
ARM GAS  /tmp/ccKKXbNi.s 			page 11


 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/ccKKXbNi.s 			page 12


 504:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  48              		.loc 2 539 0
  49              		.syntax unified
  50              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  51 0004 EFF31081 		MRS  r1, PRIMASK 
  52              	@ 0 "" 2
  53              		.thumb
  54              		.syntax unified
  55              	.LBE29:
  56              	.LBE28:
 540:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
ARM GAS  /tmp/ccKKXbNi.s 			page 13


 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
 567:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
 569:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
 571:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  57              		.loc 2 575 0
  58              		.syntax unified
  59              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  60 0008 72B6     		CPSID i
  61              	@ 0 "" 2
  62              	.LVL2:
  63              		.thumb
  64              		.syntax unified
  65              	.LBE27:
  66              	.LBE26:
  79:ThreadX/common/src/tx_byte_release.c **** 
  80:ThreadX/common/src/tx_byte_release.c **** TX_INTERRUPT_SAVE_AREA
  81:ThreadX/common/src/tx_byte_release.c **** 
  82:ThreadX/common/src/tx_byte_release.c **** UINT                status;
  83:ThreadX/common/src/tx_byte_release.c **** TX_BYTE_POOL        *pool_ptr;
  84:ThreadX/common/src/tx_byte_release.c **** TX_THREAD           *thread_ptr;
  85:ThreadX/common/src/tx_byte_release.c **** UCHAR               *work_ptr;
  86:ThreadX/common/src/tx_byte_release.c **** UCHAR               *temp_ptr;
  87:ThreadX/common/src/tx_byte_release.c **** UCHAR               *next_block_ptr;
  88:ThreadX/common/src/tx_byte_release.c **** TX_THREAD           *susp_thread_ptr;
  89:ThreadX/common/src/tx_byte_release.c **** UINT                suspended_count;
  90:ThreadX/common/src/tx_byte_release.c **** TX_THREAD           *next_thread;
  91:ThreadX/common/src/tx_byte_release.c **** TX_THREAD           *previous_thread;
  92:ThreadX/common/src/tx_byte_release.c **** ULONG               memory_size;
  93:ThreadX/common/src/tx_byte_release.c **** ALIGN_TYPE          *free_ptr;
  94:ThreadX/common/src/tx_byte_release.c **** TX_BYTE_POOL        **byte_pool_ptr;
  95:ThreadX/common/src/tx_byte_release.c **** UCHAR               **block_link_ptr;
  96:ThreadX/common/src/tx_byte_release.c **** UCHAR               **suspend_info_ptr;
  97:ThreadX/common/src/tx_byte_release.c **** 
  98:ThreadX/common/src/tx_byte_release.c **** 
  99:ThreadX/common/src/tx_byte_release.c ****     /* Default to successful status.  */
 100:ThreadX/common/src/tx_byte_release.c ****     status =  TX_SUCCESS;
 101:ThreadX/common/src/tx_byte_release.c **** 
ARM GAS  /tmp/ccKKXbNi.s 			page 14


 102:ThreadX/common/src/tx_byte_release.c ****     /* Set the pool pointer to NULL.  */
 103:ThreadX/common/src/tx_byte_release.c ****     pool_ptr =  TX_NULL;
 104:ThreadX/common/src/tx_byte_release.c **** 
 105:ThreadX/common/src/tx_byte_release.c ****     /* Lockout interrupts.  */
 106:ThreadX/common/src/tx_byte_release.c ****     TX_DISABLE
 107:ThreadX/common/src/tx_byte_release.c **** 
 108:ThreadX/common/src/tx_byte_release.c ****     /* Determine if the memory pointer is valid.  */
 109:ThreadX/common/src/tx_byte_release.c ****     work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(memory_ptr);
 110:ThreadX/common/src/tx_byte_release.c ****     if (work_ptr != TX_NULL)
  67              		.loc 1 110 0
  68 000a 08B3     		cbz	r0, .L14
 111:ThreadX/common/src/tx_byte_release.c ****     {
 112:ThreadX/common/src/tx_byte_release.c **** 
 113:ThreadX/common/src/tx_byte_release.c ****         /* Back off the memory pointer to pickup its header.  */
 114:ThreadX/common/src/tx_byte_release.c ****         work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
  69              		.loc 1 114 0
  70 000c A0F10803 		sub	r3, r0, #8
  71              	.LVL3:
 115:ThreadX/common/src/tx_byte_release.c **** 
 116:ThreadX/common/src/tx_byte_release.c ****         /* There is a pointer, pickup the pool pointer address.  */
 117:ThreadX/common/src/tx_byte_release.c ****         temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 118:ThreadX/common/src/tx_byte_release.c ****         free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 119:ThreadX/common/src/tx_byte_release.c ****         if ((*free_ptr) != TX_BYTE_BLOCK_FREE)
  72              		.loc 1 119 0
  73 0010 50F8042C 		ldr	r2, [r0, #-4]
  74 0014 3B48     		ldr	r0, .L22
  75              	.LVL4:
  76 0016 8242     		cmp	r2, r0
  77 0018 1ED0     		beq	.L15
  78              	.LVL5:
  79 001a 1446     		mov	r4, r2
  80              	.LVL6:
 120:ThreadX/common/src/tx_byte_release.c ****         {
 121:ThreadX/common/src/tx_byte_release.c **** 
 122:ThreadX/common/src/tx_byte_release.c ****             /* Pickup the pool pointer.  */
 123:ThreadX/common/src/tx_byte_release.c ****             temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 124:ThreadX/common/src/tx_byte_release.c ****             byte_pool_ptr =  TX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 125:ThreadX/common/src/tx_byte_release.c ****             pool_ptr =  *byte_pool_ptr;
 126:ThreadX/common/src/tx_byte_release.c **** 
 127:ThreadX/common/src/tx_byte_release.c ****             /* See if we have a valid pool pointer.  */
 128:ThreadX/common/src/tx_byte_release.c ****             if (pool_ptr == TX_NULL)
  81              		.loc 1 128 0
  82 001c FAB1     		cbz	r2, .L16
 129:ThreadX/common/src/tx_byte_release.c ****             {
 130:ThreadX/common/src/tx_byte_release.c **** 
 131:ThreadX/common/src/tx_byte_release.c ****                 /* Return pointer error.  */
 132:ThreadX/common/src/tx_byte_release.c ****                 status =  TX_PTR_ERROR;
 133:ThreadX/common/src/tx_byte_release.c ****             }
 134:ThreadX/common/src/tx_byte_release.c ****             else
 135:ThreadX/common/src/tx_byte_release.c ****             {
 136:ThreadX/common/src/tx_byte_release.c **** 
 137:ThreadX/common/src/tx_byte_release.c ****                 /* See if we have a valid pool.  */
 138:ThreadX/common/src/tx_byte_release.c ****                 if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
  83              		.loc 1 138 0
  84 001e 1068     		ldr	r0, [r2]
  85 0020 394A     		ldr	r2, .L22+4
  86              	.LVL7:
ARM GAS  /tmp/ccKKXbNi.s 			page 15


  87 0022 9042     		cmp	r0, r2
  88 0024 1DD1     		bne	.L17
 100:ThreadX/common/src/tx_byte_release.c **** 
  89              		.loc 1 100 0
  90 0026 0027     		movs	r7, #0
  91              	.LVL8:
  92              	.L2:
 139:ThreadX/common/src/tx_byte_release.c ****                 {
 140:ThreadX/common/src/tx_byte_release.c **** 
 141:ThreadX/common/src/tx_byte_release.c ****                     /* Return pointer error.  */
 142:ThreadX/common/src/tx_byte_release.c ****                     status =  TX_PTR_ERROR;
 143:ThreadX/common/src/tx_byte_release.c **** 
 144:ThreadX/common/src/tx_byte_release.c ****                     /* Reset the pool pointer is NULL.  */
 145:ThreadX/common/src/tx_byte_release.c ****                     pool_ptr =  TX_NULL;
 146:ThreadX/common/src/tx_byte_release.c ****                 }
 147:ThreadX/common/src/tx_byte_release.c ****             }
 148:ThreadX/common/src/tx_byte_release.c ****         }
 149:ThreadX/common/src/tx_byte_release.c ****         else
 150:ThreadX/common/src/tx_byte_release.c ****         {
 151:ThreadX/common/src/tx_byte_release.c **** 
 152:ThreadX/common/src/tx_byte_release.c ****             /* Return pointer error.  */
 153:ThreadX/common/src/tx_byte_release.c ****             status =  TX_PTR_ERROR;
 154:ThreadX/common/src/tx_byte_release.c ****         }
 155:ThreadX/common/src/tx_byte_release.c ****     }
 156:ThreadX/common/src/tx_byte_release.c ****     else
 157:ThreadX/common/src/tx_byte_release.c ****     {
 158:ThreadX/common/src/tx_byte_release.c **** 
 159:ThreadX/common/src/tx_byte_release.c ****         /* Return pointer error.  */
 160:ThreadX/common/src/tx_byte_release.c ****         status =  TX_PTR_ERROR;
 161:ThreadX/common/src/tx_byte_release.c ****     }
 162:ThreadX/common/src/tx_byte_release.c **** 
 163:ThreadX/common/src/tx_byte_release.c ****     /* Determine if the pointer is valid.  */
 164:ThreadX/common/src/tx_byte_release.c ****     if (pool_ptr == TX_NULL)
  93              		.loc 1 164 0
  94 0028 F4B1     		cbz	r4, .L20
 165:ThreadX/common/src/tx_byte_release.c ****     {
 166:ThreadX/common/src/tx_byte_release.c **** 
 167:ThreadX/common/src/tx_byte_release.c ****         /* Restore interrupts.  */
 168:ThreadX/common/src/tx_byte_release.c ****         TX_RESTORE
 169:ThreadX/common/src/tx_byte_release.c ****     }
 170:ThreadX/common/src/tx_byte_release.c ****     else
 171:ThreadX/common/src/tx_byte_release.c ****     {
 172:ThreadX/common/src/tx_byte_release.c **** 
 173:ThreadX/common/src/tx_byte_release.c ****         /* At this point, we know that the pointer is valid.  */
 174:ThreadX/common/src/tx_byte_release.c **** 
 175:ThreadX/common/src/tx_byte_release.c ****         /* Pickup thread pointer.  */
 176:ThreadX/common/src/tx_byte_release.c ****         TX_THREAD_GET_CURRENT(thread_ptr)
  95              		.loc 1 176 0
  96 002a 384A     		ldr	r2, .L22+8
  97 002c 1668     		ldr	r6, [r2]
  98              	.LVL9:
 177:ThreadX/common/src/tx_byte_release.c **** 
 178:ThreadX/common/src/tx_byte_release.c ****         /* Indicate that this thread is the current owner.  */
 179:ThreadX/common/src/tx_byte_release.c ****         pool_ptr -> tx_byte_pool_owner =  thread_ptr;
  99              		.loc 1 179 0
 100 002e 2662     		str	r6, [r4, #32]
 101              	.LVL10:
ARM GAS  /tmp/ccKKXbNi.s 			page 16


 180:ThreadX/common/src/tx_byte_release.c **** 
 181:ThreadX/common/src/tx_byte_release.c **** #ifdef TX_BYTE_POOL_ENABLE_PERFORMANCE_INFO
 182:ThreadX/common/src/tx_byte_release.c **** 
 183:ThreadX/common/src/tx_byte_release.c ****         /* Increment the total release counter.  */
 184:ThreadX/common/src/tx_byte_release.c ****         _tx_byte_pool_performance_release_count++;
 185:ThreadX/common/src/tx_byte_release.c **** 
 186:ThreadX/common/src/tx_byte_release.c ****         /* Increment the number of releases on this pool.  */
 187:ThreadX/common/src/tx_byte_release.c ****         pool_ptr -> tx_byte_pool_performance_release_count++;
 188:ThreadX/common/src/tx_byte_release.c **** #endif
 189:ThreadX/common/src/tx_byte_release.c **** 
 190:ThreadX/common/src/tx_byte_release.c ****         /* If trace is enabled, insert this event into the trace buffer.  */
 191:ThreadX/common/src/tx_byte_release.c ****         TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_RELEASE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(memory
 192:ThreadX/common/src/tx_byte_release.c **** 
 193:ThreadX/common/src/tx_byte_release.c ****         /* Log this kernel call.  */
 194:ThreadX/common/src/tx_byte_release.c ****         TX_EL_BYTE_RELEASE_INSERT
 195:ThreadX/common/src/tx_byte_release.c **** 
 196:ThreadX/common/src/tx_byte_release.c ****         /* Release the memory.  */
 197:ThreadX/common/src/tx_byte_release.c ****         temp_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 198:ThreadX/common/src/tx_byte_release.c ****         free_ptr =   TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 199:ThreadX/common/src/tx_byte_release.c ****         *free_ptr =  TX_BYTE_BLOCK_FREE;
 102              		.loc 1 199 0
 103 0030 344A     		ldr	r2, .L22
 104 0032 5A60     		str	r2, [r3, #4]
 105              	.LVL11:
 200:ThreadX/common/src/tx_byte_release.c **** 
 201:ThreadX/common/src/tx_byte_release.c ****         /* Update the number of available bytes in the pool.  */
 202:ThreadX/common/src/tx_byte_release.c ****         block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 203:ThreadX/common/src/tx_byte_release.c ****         next_block_ptr =  *block_link_ptr;
 106              		.loc 1 203 0
 107 0034 1868     		ldr	r0, [r3]
 108              	.LVL12:
 204:ThreadX/common/src/tx_byte_release.c ****         pool_ptr -> tx_byte_pool_available =
 205:ThreadX/common/src/tx_byte_release.c ****             pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 109              		.loc 1 205 0
 110 0036 A268     		ldr	r2, [r4, #8]
 111 0038 C01A     		subs	r0, r0, r3
 112              	.LVL13:
 113 003a 0244     		add	r2, r2, r0
 204:ThreadX/common/src/tx_byte_release.c ****         pool_ptr -> tx_byte_pool_available =
 114              		.loc 1 204 0
 115 003c A260     		str	r2, [r4, #8]
 116              	.LVL14:
 206:ThreadX/common/src/tx_byte_release.c **** 
 207:ThreadX/common/src/tx_byte_release.c ****         /* Determine if the free block is prior to current search pointer.  */
 208:ThreadX/common/src/tx_byte_release.c ****         if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 117              		.loc 1 208 0
 118 003e 6269     		ldr	r2, [r4, #20]
 119 0040 9A42     		cmp	r2, r3
 120 0042 00D9     		bls	.L5
 209:ThreadX/common/src/tx_byte_release.c ****         {
 210:ThreadX/common/src/tx_byte_release.c **** 
 211:ThreadX/common/src/tx_byte_release.c ****             /* Yes, update the search pointer to the released block.  */
 212:ThreadX/common/src/tx_byte_release.c ****             pool_ptr -> tx_byte_pool_search =  work_ptr;
 121              		.loc 1 212 0
 122 0044 6361     		str	r3, [r4, #20]
 123              	.L5:
 213:ThreadX/common/src/tx_byte_release.c ****         }
ARM GAS  /tmp/ccKKXbNi.s 			page 17


 214:ThreadX/common/src/tx_byte_release.c **** 
 215:ThreadX/common/src/tx_byte_release.c ****         /* Determine if there are threads suspended on this byte pool.  */
 216:ThreadX/common/src/tx_byte_release.c ****         if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 124              		.loc 1 216 0
 125 0046 A36A     		ldr	r3, [r4, #40]
 126              	.LVL15:
 127 0048 63BB     		cbnz	r3, .L6
 128              	.LVL16:
 129              	.LBB30:
 130              	.LBB31:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 131              		.loc 2 562 0
 132              		.syntax unified
 133              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 134 004a 81F31088 		MSR  PRIMASK,r1
 135              	@ 0 "" 2
 136              		.thumb
 137              		.syntax unified
 138              	.LBE31:
 139              	.LBE30:
 217:ThreadX/common/src/tx_byte_release.c ****         {
 218:ThreadX/common/src/tx_byte_release.c **** 
 219:ThreadX/common/src/tx_byte_release.c ****             /* Now examine the suspension list to find threads waiting for
 220:ThreadX/common/src/tx_byte_release.c ****                memory.  Maybe it is now available!  */
 221:ThreadX/common/src/tx_byte_release.c ****             while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 222:ThreadX/common/src/tx_byte_release.c ****             {
 223:ThreadX/common/src/tx_byte_release.c **** 
 224:ThreadX/common/src/tx_byte_release.c ****                 /* Pickup the first suspended thread pointer.  */
 225:ThreadX/common/src/tx_byte_release.c ****                 susp_thread_ptr =  pool_ptr -> tx_byte_pool_suspension_list;
 226:ThreadX/common/src/tx_byte_release.c **** 
 227:ThreadX/common/src/tx_byte_release.c ****                 /* Pickup the size of the memory the thread is requesting.  */
 228:ThreadX/common/src/tx_byte_release.c ****                 memory_size =  susp_thread_ptr -> tx_thread_suspend_info;
 229:ThreadX/common/src/tx_byte_release.c **** 
 230:ThreadX/common/src/tx_byte_release.c ****                 /* Restore interrupts.  */
 231:ThreadX/common/src/tx_byte_release.c ****                 TX_RESTORE
 232:ThreadX/common/src/tx_byte_release.c **** 
 233:ThreadX/common/src/tx_byte_release.c ****                 /* See if the request can be satisfied.  */
 234:ThreadX/common/src/tx_byte_release.c ****                 work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 235:ThreadX/common/src/tx_byte_release.c **** 
 236:ThreadX/common/src/tx_byte_release.c ****                 /* Optional processing extension.  */
 237:ThreadX/common/src/tx_byte_release.c ****                 TX_BYTE_RELEASE_EXTENSION
 238:ThreadX/common/src/tx_byte_release.c **** 
 239:ThreadX/common/src/tx_byte_release.c ****                 /* Disable interrupts.  */
 240:ThreadX/common/src/tx_byte_release.c ****                 TX_DISABLE
 241:ThreadX/common/src/tx_byte_release.c **** 
 242:ThreadX/common/src/tx_byte_release.c ****                 /* Indicate that this thread is the current owner.  */
 243:ThreadX/common/src/tx_byte_release.c ****                 pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 244:ThreadX/common/src/tx_byte_release.c **** 
 245:ThreadX/common/src/tx_byte_release.c ****                 /* If there is not enough memory, break this loop!  */
 246:ThreadX/common/src/tx_byte_release.c ****                 if (work_ptr == TX_NULL)
 247:ThreadX/common/src/tx_byte_release.c ****                 {
 248:ThreadX/common/src/tx_byte_release.c **** 
 249:ThreadX/common/src/tx_byte_release.c ****                   /* Break out of the loop.  */
 250:ThreadX/common/src/tx_byte_release.c ****                     break;
 251:ThreadX/common/src/tx_byte_release.c ****                 }
 252:ThreadX/common/src/tx_byte_release.c **** 
 253:ThreadX/common/src/tx_byte_release.c ****                 /* Check to make sure the thread is still suspended.  */
ARM GAS  /tmp/ccKKXbNi.s 			page 18


 254:ThreadX/common/src/tx_byte_release.c ****                 if (susp_thread_ptr ==  pool_ptr -> tx_byte_pool_suspension_list)
 255:ThreadX/common/src/tx_byte_release.c ****                 {
 256:ThreadX/common/src/tx_byte_release.c **** 
 257:ThreadX/common/src/tx_byte_release.c ****                     /* Also, makes sure the memory size is the same.  */
 258:ThreadX/common/src/tx_byte_release.c ****                     if (susp_thread_ptr -> tx_thread_suspend_info == memory_size)
 259:ThreadX/common/src/tx_byte_release.c ****                     {
 260:ThreadX/common/src/tx_byte_release.c **** 
 261:ThreadX/common/src/tx_byte_release.c ****                         /* Remove the suspended thread from the list.  */
 262:ThreadX/common/src/tx_byte_release.c **** 
 263:ThreadX/common/src/tx_byte_release.c ****                         /* Decrement the number of threads suspended.  */
 264:ThreadX/common/src/tx_byte_release.c ****                         pool_ptr -> tx_byte_pool_suspended_count--;
 265:ThreadX/common/src/tx_byte_release.c **** 
 266:ThreadX/common/src/tx_byte_release.c ****                         /* Pickup the suspended count.  */
 267:ThreadX/common/src/tx_byte_release.c ****                         suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 268:ThreadX/common/src/tx_byte_release.c **** 
 269:ThreadX/common/src/tx_byte_release.c ****                         /* See if this is the only suspended thread on the list.  */
 270:ThreadX/common/src/tx_byte_release.c ****                         if (suspended_count == TX_NO_SUSPENSIONS)
 271:ThreadX/common/src/tx_byte_release.c ****                         {
 272:ThreadX/common/src/tx_byte_release.c **** 
 273:ThreadX/common/src/tx_byte_release.c ****                             /* Yes, the only suspended thread.  */
 274:ThreadX/common/src/tx_byte_release.c **** 
 275:ThreadX/common/src/tx_byte_release.c ****                             /* Update the head pointer.  */
 276:ThreadX/common/src/tx_byte_release.c ****                             pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 277:ThreadX/common/src/tx_byte_release.c ****                         }
 278:ThreadX/common/src/tx_byte_release.c ****                         else
 279:ThreadX/common/src/tx_byte_release.c ****                         {
 280:ThreadX/common/src/tx_byte_release.c **** 
 281:ThreadX/common/src/tx_byte_release.c ****                             /* At least one more thread is on the same expiration list.  */
 282:ThreadX/common/src/tx_byte_release.c **** 
 283:ThreadX/common/src/tx_byte_release.c ****                             /* Update the list head pointer.  */
 284:ThreadX/common/src/tx_byte_release.c ****                             next_thread =                                susp_thread_ptr -> tx_thre
 285:ThreadX/common/src/tx_byte_release.c ****                             pool_ptr -> tx_byte_pool_suspension_list =   next_thread;
 286:ThreadX/common/src/tx_byte_release.c **** 
 287:ThreadX/common/src/tx_byte_release.c ****                             /* Update the links of the adjacent threads.  */
 288:ThreadX/common/src/tx_byte_release.c ****                             previous_thread =                              susp_thread_ptr -> tx_th
 289:ThreadX/common/src/tx_byte_release.c ****                             next_thread -> tx_thread_suspended_previous =  previous_thread;
 290:ThreadX/common/src/tx_byte_release.c ****                             previous_thread -> tx_thread_suspended_next =  next_thread;
 291:ThreadX/common/src/tx_byte_release.c ****                         }
 292:ThreadX/common/src/tx_byte_release.c **** 
 293:ThreadX/common/src/tx_byte_release.c ****                         /* Prepare for resumption of the thread.  */
 294:ThreadX/common/src/tx_byte_release.c **** 
 295:ThreadX/common/src/tx_byte_release.c ****                         /* Clear cleanup routine to avoid timeout.  */
 296:ThreadX/common/src/tx_byte_release.c ****                         susp_thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 297:ThreadX/common/src/tx_byte_release.c **** 
 298:ThreadX/common/src/tx_byte_release.c ****                         /* Return this block pointer to the suspended thread waiting for
 299:ThreadX/common/src/tx_byte_release.c ****                            a block.  */
 300:ThreadX/common/src/tx_byte_release.c ****                         suspend_info_ptr =   TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(susp_thread_
 301:ThreadX/common/src/tx_byte_release.c ****                         *suspend_info_ptr =  work_ptr;
 302:ThreadX/common/src/tx_byte_release.c **** 
 303:ThreadX/common/src/tx_byte_release.c ****                         /* Clear the memory pointer to indicate that it was given to the suspended 
 304:ThreadX/common/src/tx_byte_release.c ****                         work_ptr =  TX_NULL;
 305:ThreadX/common/src/tx_byte_release.c **** 
 306:ThreadX/common/src/tx_byte_release.c ****                         /* Put return status into the thread control block.  */
 307:ThreadX/common/src/tx_byte_release.c ****                         susp_thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 308:ThreadX/common/src/tx_byte_release.c **** 
 309:ThreadX/common/src/tx_byte_release.c **** #ifdef TX_NOT_INTERRUPTABLE
 310:ThreadX/common/src/tx_byte_release.c **** 
ARM GAS  /tmp/ccKKXbNi.s 			page 19


 311:ThreadX/common/src/tx_byte_release.c ****                         /* Resume the thread!  */
 312:ThreadX/common/src/tx_byte_release.c ****                         _tx_thread_system_ni_resume(susp_thread_ptr);
 313:ThreadX/common/src/tx_byte_release.c **** 
 314:ThreadX/common/src/tx_byte_release.c ****                         /* Restore interrupts.  */
 315:ThreadX/common/src/tx_byte_release.c ****                         TX_RESTORE
 316:ThreadX/common/src/tx_byte_release.c **** #else
 317:ThreadX/common/src/tx_byte_release.c ****                         /* Temporarily disable preemption.  */
 318:ThreadX/common/src/tx_byte_release.c ****                         _tx_thread_preempt_disable++;
 319:ThreadX/common/src/tx_byte_release.c **** 
 320:ThreadX/common/src/tx_byte_release.c ****                         /* Restore interrupts.  */
 321:ThreadX/common/src/tx_byte_release.c ****                         TX_RESTORE
 322:ThreadX/common/src/tx_byte_release.c **** 
 323:ThreadX/common/src/tx_byte_release.c ****                         /* Resume thread.  */
 324:ThreadX/common/src/tx_byte_release.c ****                         _tx_thread_system_resume(susp_thread_ptr);
 325:ThreadX/common/src/tx_byte_release.c **** #endif
 326:ThreadX/common/src/tx_byte_release.c **** 
 327:ThreadX/common/src/tx_byte_release.c ****                         /* Lockout interrupts.  */
 328:ThreadX/common/src/tx_byte_release.c ****                         TX_DISABLE
 329:ThreadX/common/src/tx_byte_release.c ****                     }
 330:ThreadX/common/src/tx_byte_release.c ****                 }
 331:ThreadX/common/src/tx_byte_release.c **** 
 332:ThreadX/common/src/tx_byte_release.c ****                 /* Determine if the memory was given to the suspended thread.  */
 333:ThreadX/common/src/tx_byte_release.c ****                 if (work_ptr != TX_NULL)
 334:ThreadX/common/src/tx_byte_release.c ****                 {
 335:ThreadX/common/src/tx_byte_release.c **** 
 336:ThreadX/common/src/tx_byte_release.c ****                     /* No, it wasn't given to the suspended thread.  */
 337:ThreadX/common/src/tx_byte_release.c **** 
 338:ThreadX/common/src/tx_byte_release.c ****                     /* Put the memory back on the available list since this thread is no longer
 339:ThreadX/common/src/tx_byte_release.c ****                        suspended.  */
 340:ThreadX/common/src/tx_byte_release.c ****                     work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_
 341:ThreadX/common/src/tx_byte_release.c ****                     temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 342:ThreadX/common/src/tx_byte_release.c ****                     free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 343:ThreadX/common/src/tx_byte_release.c ****                     *free_ptr =  TX_BYTE_BLOCK_FREE;
 344:ThreadX/common/src/tx_byte_release.c **** 
 345:ThreadX/common/src/tx_byte_release.c ****                     /* Update the number of available bytes in the pool.  */
 346:ThreadX/common/src/tx_byte_release.c ****                     block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 347:ThreadX/common/src/tx_byte_release.c ****                     next_block_ptr =  *block_link_ptr;
 348:ThreadX/common/src/tx_byte_release.c ****                     pool_ptr -> tx_byte_pool_available =
 349:ThreadX/common/src/tx_byte_release.c ****                         pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, w
 350:ThreadX/common/src/tx_byte_release.c **** 
 351:ThreadX/common/src/tx_byte_release.c ****                     /* Determine if the current pointer is before the search pointer.  */
 352:ThreadX/common/src/tx_byte_release.c ****                     if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 353:ThreadX/common/src/tx_byte_release.c ****                     {
 354:ThreadX/common/src/tx_byte_release.c **** 
 355:ThreadX/common/src/tx_byte_release.c ****                         /* Yes, update the search pointer.  */
 356:ThreadX/common/src/tx_byte_release.c ****                         pool_ptr -> tx_byte_pool_search =  work_ptr;
 357:ThreadX/common/src/tx_byte_release.c ****                     }
 358:ThreadX/common/src/tx_byte_release.c ****                 }
 359:ThreadX/common/src/tx_byte_release.c ****             }
 360:ThreadX/common/src/tx_byte_release.c **** 
 361:ThreadX/common/src/tx_byte_release.c ****             /* Restore interrupts.  */
 362:ThreadX/common/src/tx_byte_release.c ****             TX_RESTORE
 363:ThreadX/common/src/tx_byte_release.c **** 
 364:ThreadX/common/src/tx_byte_release.c ****             /* Check for preemption.  */
 365:ThreadX/common/src/tx_byte_release.c ****             _tx_thread_system_preempt_check();
 366:ThreadX/common/src/tx_byte_release.c ****         }
 367:ThreadX/common/src/tx_byte_release.c ****         else
ARM GAS  /tmp/ccKKXbNi.s 			page 20


 368:ThreadX/common/src/tx_byte_release.c ****         {
 369:ThreadX/common/src/tx_byte_release.c **** 
 370:ThreadX/common/src/tx_byte_release.c ****             /* No, threads suspended, restore interrupts.  */
 371:ThreadX/common/src/tx_byte_release.c ****             TX_RESTORE
 372:ThreadX/common/src/tx_byte_release.c ****         }
 373:ThreadX/common/src/tx_byte_release.c ****     }
 374:ThreadX/common/src/tx_byte_release.c **** 
 375:ThreadX/common/src/tx_byte_release.c ****     /* Return completion status.  */
 376:ThreadX/common/src/tx_byte_release.c ****     return(status);
 140              		.loc 1 376 0
 141 004e 56E0     		b	.L1
 142              	.LVL17:
 143              	.L14:
 109:ThreadX/common/src/tx_byte_release.c ****     if (work_ptr != TX_NULL)
 144              		.loc 1 109 0
 145 0050 0346     		mov	r3, r0
 103:ThreadX/common/src/tx_byte_release.c **** 
 146              		.loc 1 103 0
 147 0052 0024     		movs	r4, #0
 160:ThreadX/common/src/tx_byte_release.c ****     }
 148              		.loc 1 160 0
 149 0054 0327     		movs	r7, #3
 150 0056 E7E7     		b	.L2
 151              	.LVL18:
 152              	.L15:
 103:ThreadX/common/src/tx_byte_release.c **** 
 153              		.loc 1 103 0
 154 0058 0024     		movs	r4, #0
 153:ThreadX/common/src/tx_byte_release.c ****         }
 155              		.loc 1 153 0
 156 005a 0327     		movs	r7, #3
 157 005c E4E7     		b	.L2
 158              	.LVL19:
 159              	.L16:
 132:ThreadX/common/src/tx_byte_release.c ****             }
 160              		.loc 1 132 0
 161 005e 0327     		movs	r7, #3
 162 0060 E2E7     		b	.L2
 163              	.LVL20:
 164              	.L17:
 145:ThreadX/common/src/tx_byte_release.c ****                 }
 165              		.loc 1 145 0
 166 0062 0024     		movs	r4, #0
 167              	.LVL21:
 142:ThreadX/common/src/tx_byte_release.c **** 
 168              		.loc 1 142 0
 169 0064 0327     		movs	r7, #3
 170 0066 DFE7     		b	.L2
 171              	.LVL22:
 172              	.L20:
 173              	.LBB32:
 174              	.LBB33:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 175              		.loc 2 562 0
 176              		.syntax unified
 177              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 178 0068 81F31088 		MSR  PRIMASK,r1
ARM GAS  /tmp/ccKKXbNi.s 			page 21


 179              	@ 0 "" 2
 180              		.thumb
 181              		.syntax unified
 182 006c 47E0     		b	.L1
 183              	.LVL23:
 184              	.L21:
 185              	.LBE33:
 186              	.LBE32:
 258:ThreadX/common/src/tx_byte_release.c ****                     {
 187              		.loc 1 258 0
 188 006e AB6F     		ldr	r3, [r5, #120]
 189 0070 4345     		cmp	r3, r8
 190 0072 2AD1     		bne	.L9
 264:ThreadX/common/src/tx_byte_release.c **** 
 191              		.loc 1 264 0
 192 0074 A36A     		ldr	r3, [r4, #40]
 193 0076 013B     		subs	r3, r3, #1
 194 0078 A362     		str	r3, [r4, #40]
 195              	.LVL24:
 270:ThreadX/common/src/tx_byte_release.c ****                         {
 196              		.loc 1 270 0
 197 007a 002B     		cmp	r3, #0
 198 007c 35D1     		bne	.L10
 276:ThreadX/common/src/tx_byte_release.c ****                         }
 199              		.loc 1 276 0
 200 007e 6362     		str	r3, [r4, #36]
 201              	.LVL25:
 202              	.L11:
 296:ThreadX/common/src/tx_byte_release.c **** 
 203              		.loc 1 296 0
 204 0080 0023     		movs	r3, #0
 205 0082 AB66     		str	r3, [r5, #104]
 300:ThreadX/common/src/tx_byte_release.c ****                         *suspend_info_ptr =  work_ptr;
 206              		.loc 1 300 0
 207 0084 EA6F     		ldr	r2, [r5, #124]
 208              	.LVL26:
 301:ThreadX/common/src/tx_byte_release.c **** 
 209              		.loc 1 301 0
 210 0086 1060     		str	r0, [r2]
 211              	.LVL27:
 307:ThreadX/common/src/tx_byte_release.c **** 
 212              		.loc 1 307 0
 213 0088 C5F88430 		str	r3, [r5, #132]
 318:ThreadX/common/src/tx_byte_release.c **** 
 214              		.loc 1 318 0
 215 008c 204A     		ldr	r2, .L22+12
 216              	.LVL28:
 217 008e 1368     		ldr	r3, [r2]
 218 0090 0133     		adds	r3, r3, #1
 219 0092 1360     		str	r3, [r2]
 220              	.LVL29:
 221              	.LBB34:
 222              	.LBB35:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 223              		.loc 2 562 0
 224              		.syntax unified
 225              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
ARM GAS  /tmp/ccKKXbNi.s 			page 22


 226 0094 81F31088 		MSR  PRIMASK,r1
 227              	@ 0 "" 2
 228              	.LVL30:
 229              		.thumb
 230              		.syntax unified
 231              	.LBE35:
 232              	.LBE34:
 324:ThreadX/common/src/tx_byte_release.c **** #endif
 233              		.loc 1 324 0
 234 0098 2846     		mov	r0, r5
 235 009a FFF7FEFF 		bl	_tx_thread_system_resume
 236              	.LVL31:
 237              	.LBB36:
 238              	.LBB37:
 239              	.LBB38:
 240              	.LBB39:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 241              		.loc 2 539 0
 242              		.syntax unified
 243              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 244 009e EFF31081 		MRS  r1, PRIMASK 
 245              	@ 0 "" 2
 246              		.thumb
 247              		.syntax unified
 248              	.LBE39:
 249              	.LBE38:
 250              		.loc 2 575 0
 251              		.syntax unified
 252              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 253 00a2 72B6     		CPSID i
 254              	@ 0 "" 2
 255              	.LVL32:
 256              		.thumb
 257              		.syntax unified
 258              	.L6:
 259              	.LBE37:
 260              	.LBE36:
 221:ThreadX/common/src/tx_byte_release.c ****             {
 261              		.loc 1 221 0
 262 00a4 A36A     		ldr	r3, [r4, #40]
 263 00a6 33B3     		cbz	r3, .L8
 225:ThreadX/common/src/tx_byte_release.c **** 
 264              		.loc 1 225 0
 265 00a8 656A     		ldr	r5, [r4, #36]
 266              	.LVL33:
 228:ThreadX/common/src/tx_byte_release.c **** 
 267              		.loc 1 228 0
 268 00aa D5F87880 		ldr	r8, [r5, #120]
 269              	.LVL34:
 270              	.LBB40:
 271              	.LBB41:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 272              		.loc 2 562 0
 273              		.syntax unified
 274              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 275 00ae 81F31088 		MSR  PRIMASK,r1
 276              	@ 0 "" 2
ARM GAS  /tmp/ccKKXbNi.s 			page 23


 277              	.LVL35:
 278              		.thumb
 279              		.syntax unified
 280              	.LBE41:
 281              	.LBE40:
 234:ThreadX/common/src/tx_byte_release.c **** 
 282              		.loc 1 234 0
 283 00b2 4146     		mov	r1, r8
 284              	.LVL36:
 285 00b4 2046     		mov	r0, r4
 286 00b6 FFF7FEFF 		bl	_tx_byte_pool_search
 287              	.LVL37:
 288              	.LBB42:
 289              	.LBB43:
 290              	.LBB44:
 291              	.LBB45:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 292              		.loc 2 539 0
 293              		.syntax unified
 294              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 295 00ba EFF31081 		MRS  r1, PRIMASK 
 296              	@ 0 "" 2
 297              		.thumb
 298              		.syntax unified
 299              	.LBE45:
 300              	.LBE44:
 301              		.loc 2 575 0
 302              		.syntax unified
 303              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 304 00be 72B6     		CPSID i
 305              	@ 0 "" 2
 306              		.thumb
 307              		.syntax unified
 308              	.LBE43:
 309              	.LBE42:
 243:ThreadX/common/src/tx_byte_release.c **** 
 310              		.loc 1 243 0
 311 00c0 2662     		str	r6, [r4, #32]
 246:ThreadX/common/src/tx_byte_release.c ****                 {
 312              		.loc 1 246 0
 313 00c2 C0B1     		cbz	r0, .L8
 254:ThreadX/common/src/tx_byte_release.c ****                 {
 314              		.loc 1 254 0
 315 00c4 636A     		ldr	r3, [r4, #36]
 316 00c6 AB42     		cmp	r3, r5
 317 00c8 D1D0     		beq	.L21
 318              	.L9:
 319              	.LVL38:
 340:ThreadX/common/src/tx_byte_release.c ****                     temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 320              		.loc 1 340 0
 321 00ca A0F10805 		sub	r5, r0, #8
 322              	.LVL39:
 343:ThreadX/common/src/tx_byte_release.c **** 
 323              		.loc 1 343 0
 324 00ce 0D4B     		ldr	r3, .L22
 325 00d0 40F8043C 		str	r3, [r0, #-4]
 326              	.LVL40:
ARM GAS  /tmp/ccKKXbNi.s 			page 24


 347:ThreadX/common/src/tx_byte_release.c ****                     pool_ptr -> tx_byte_pool_available =
 327              		.loc 1 347 0
 328 00d4 50F8082C 		ldr	r2, [r0, #-8]
 329              	.LVL41:
 349:ThreadX/common/src/tx_byte_release.c **** 
 330              		.loc 1 349 0
 331 00d8 A368     		ldr	r3, [r4, #8]
 332 00da 521B     		subs	r2, r2, r5
 333              	.LVL42:
 334 00dc 1344     		add	r3, r3, r2
 348:ThreadX/common/src/tx_byte_release.c ****                         pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, w
 335              		.loc 1 348 0
 336 00de A360     		str	r3, [r4, #8]
 337              	.LVL43:
 352:ThreadX/common/src/tx_byte_release.c ****                     {
 338              		.loc 1 352 0
 339 00e0 6369     		ldr	r3, [r4, #20]
 340 00e2 AB42     		cmp	r3, r5
 341 00e4 DED9     		bls	.L6
 356:ThreadX/common/src/tx_byte_release.c ****                     }
 342              		.loc 1 356 0
 343 00e6 6561     		str	r5, [r4, #20]
 344 00e8 DCE7     		b	.L6
 345              	.LVL44:
 346              	.L10:
 284:ThreadX/common/src/tx_byte_release.c ****                             pool_ptr -> tx_byte_pool_suspension_list =   next_thread;
 347              		.loc 1 284 0
 348 00ea 2B6F     		ldr	r3, [r5, #112]
 349              	.LVL45:
 285:ThreadX/common/src/tx_byte_release.c **** 
 350              		.loc 1 285 0
 351 00ec 6362     		str	r3, [r4, #36]
 288:ThreadX/common/src/tx_byte_release.c ****                             next_thread -> tx_thread_suspended_previous =  previous_thread;
 352              		.loc 1 288 0
 353 00ee 6A6F     		ldr	r2, [r5, #116]
 354              	.LVL46:
 289:ThreadX/common/src/tx_byte_release.c ****                             previous_thread -> tx_thread_suspended_next =  next_thread;
 355              		.loc 1 289 0
 356 00f0 5A67     		str	r2, [r3, #116]
 357              	.LVL47:
 290:ThreadX/common/src/tx_byte_release.c ****                         }
 358              		.loc 1 290 0
 359 00f2 1367     		str	r3, [r2, #112]
 360 00f4 C4E7     		b	.L11
 361              	.LVL48:
 362              	.L8:
 363              	.LBB46:
 364              	.LBB47:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 365              		.loc 2 562 0
 366              		.syntax unified
 367              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 368 00f6 81F31088 		MSR  PRIMASK,r1
 369              	@ 0 "" 2
 370              	.LVL49:
 371              		.thumb
 372              		.syntax unified
ARM GAS  /tmp/ccKKXbNi.s 			page 25


 373              	.LBE47:
 374              	.LBE46:
 365:ThreadX/common/src/tx_byte_release.c ****         }
 375              		.loc 1 365 0
 376 00fa FFF7FEFF 		bl	_tx_thread_system_preempt_check
 377              	.LVL50:
 378              	.L1:
 377:ThreadX/common/src/tx_byte_release.c **** }
 379              		.loc 1 377 0
 380 00fe 3846     		mov	r0, r7
 381 0100 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 382              	.LVL51:
 383              	.L23:
 384              		.align	2
 385              	.L22:
 386 0104 EEEEFFFF 		.word	-4370
 387 0108 45545942 		.word	1113150533
 388 010c 00000000 		.word	_tx_thread_current_ptr
 389 0110 00000000 		.word	_tx_thread_preempt_disable
 390              		.cfi_endproc
 391              	.LFE8:
 393              		.text
 394              	.Letext0:
 395              		.file 3 "/usr/include/newlib/sys/lock.h"
 396              		.file 4 "/usr/include/newlib/sys/_types.h"
 397              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 398              		.file 6 "/usr/include/newlib/sys/reent.h"
 399              		.file 7 "/usr/include/newlib/stdlib.h"
 400              		.file 8 "ThreadX/common/inc/tx_api.h"
 401              		.file 9 "ThreadX/common/inc/tx_thread.h"
 402              		.file 10 "ThreadX/common/inc/tx_byte_pool.h"
ARM GAS  /tmp/ccKKXbNi.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_byte_release.c
     /tmp/ccKKXbNi.s:18     .text._tx_byte_release:0000000000000000 $t
     /tmp/ccKKXbNi.s:25     .text._tx_byte_release:0000000000000000 _tx_byte_release
     /tmp/ccKKXbNi.s:386    .text._tx_byte_release:0000000000000104 $d

UNDEFINED SYMBOLS
_tx_thread_system_resume
_tx_byte_pool_search
_tx_thread_system_preempt_check
_tx_thread_current_ptr
_tx_thread_preempt_disable
