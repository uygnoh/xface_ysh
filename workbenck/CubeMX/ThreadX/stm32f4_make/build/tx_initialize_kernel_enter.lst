ARM GAS  /tmp/ccjrjULg.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_initialize_kernel_enter.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_initialize_kernel_enter,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_initialize_kernel_enter
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_initialize_kernel_enter:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_initialize_kernel_enter.c"
   1:ThreadX/common/src/tx_initialize_kernel_enter.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
   3:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
   5:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  10:ThreadX/common/src/tx_initialize_kernel_enter.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  12:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  13:ThreadX/common/src/tx_initialize_kernel_enter.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_initialize_kernel_enter.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_initialize_kernel_enter.c **** /**                                                                       */
  16:ThreadX/common/src/tx_initialize_kernel_enter.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_initialize_kernel_enter.c **** /**                                                                       */
  18:ThreadX/common/src/tx_initialize_kernel_enter.c **** /**   Initialize                                                          */
  19:ThreadX/common/src/tx_initialize_kernel_enter.c **** /**                                                                       */
  20:ThreadX/common/src/tx_initialize_kernel_enter.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_initialize_kernel_enter.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  23:ThreadX/common/src/tx_initialize_kernel_enter.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  25:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  26:ThreadX/common/src/tx_initialize_kernel_enter.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  28:ThreadX/common/src/tx_initialize_kernel_enter.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_initialize_kernel_enter.c **** #include "tx_initialize.h"
  30:ThreadX/common/src/tx_initialize_kernel_enter.c **** #include "tx_thread.h"
  31:ThreadX/common/src/tx_initialize_kernel_enter.c **** #include "tx_timer.h"
ARM GAS  /tmp/ccjrjULg.s 			page 2


  32:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  33:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  34:ThreadX/common/src/tx_initialize_kernel_enter.c **** /* Define any port-specific scheduling data structures.  */
  35:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  36:ThreadX/common/src/tx_initialize_kernel_enter.c **** TX_PORT_SPECIFIC_DATA
  37:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  38:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  39:ThreadX/common/src/tx_initialize_kernel_enter.c **** #ifdef TX_SAFETY_CRITICAL
  40:ThreadX/common/src/tx_initialize_kernel_enter.c **** TX_SAFETY_CRITICAL_EXCEPTION_HANDLER
  41:ThreadX/common/src/tx_initialize_kernel_enter.c **** #endif
  42:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  43:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  44:ThreadX/common/src/tx_initialize_kernel_enter.c **** /**************************************************************************/
  45:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  46:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*  FUNCTION                                               RELEASE        */
  47:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  48:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    _tx_initialize_kernel_enter                         PORTABLE C      */
  49:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                           6.1          */
  50:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*  AUTHOR                                                                */
  51:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  52:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    William E. Lamie, Microsoft Corporation                             */
  53:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  54:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*  DESCRIPTION                                                           */
  55:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  56:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    This function is the first ThreadX function called during           */
  57:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    initialization.  It is called from the application's "main()"       */
  58:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    function.  It is important to note that this routine never          */
  59:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    returns.  The processing of this function is relatively simple:     */
  60:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    it calls several ThreadX initialization functions (if needed),      */
  61:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    calls the application define function, and then invokes the         */
  62:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    scheduler.                                                          */
  63:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  64:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*  INPUT                                                                 */
  65:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  66:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    None                                                                */
  67:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  68:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*  OUTPUT                                                                */
  69:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  70:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    None                                                                */
  71:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  72:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*  CALLS                                                                 */
  73:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  74:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    _tx_initialize_low_level          Low-level initialization          */
  75:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    _tx_initialize_high_level         High-level initialization         */
  76:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    tx_application_define             Application define function       */
  77:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    _tx_thread_scheduler              ThreadX scheduling loop           */
  78:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  79:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*  CALLED BY                                                             */
  80:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  81:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    main                              Application main program          */
  82:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  83:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*  RELEASE HISTORY                                                       */
  84:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  85:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*    DATE              NAME                      DESCRIPTION             */
  86:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  87:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  88:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
ARM GAS  /tmp/ccjrjULg.s 			page 3


  89:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                            resulting in version 6.1    */
  90:ThreadX/common/src/tx_initialize_kernel_enter.c **** /*                                                                        */
  91:ThreadX/common/src/tx_initialize_kernel_enter.c **** /**************************************************************************/
  92:ThreadX/common/src/tx_initialize_kernel_enter.c **** VOID  _tx_initialize_kernel_enter(VOID)
  93:ThreadX/common/src/tx_initialize_kernel_enter.c **** {
  28              		.loc 1 93 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  94:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  95:ThreadX/common/src/tx_initialize_kernel_enter.c ****     /* Determine if the compiler has pre-initialized ThreadX.  */
  96:ThreadX/common/src/tx_initialize_kernel_enter.c ****     if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
  37              		.loc 1 96 0
  38 0002 0F4B     		ldr	r3, .L4
  39 0004 1B68     		ldr	r3, [r3]
  40 0006 13F10F3F 		cmn	r3, #252645135
  41 000a 0BD0     		beq	.L2
  97:ThreadX/common/src/tx_initialize_kernel_enter.c ****     {
  98:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
  99:ThreadX/common/src/tx_initialize_kernel_enter.c ****         /* No, the initialization still needs to take place.  */
 100:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
 101:ThreadX/common/src/tx_initialize_kernel_enter.c ****         /* Ensure that the system state variable is set to indicate
 102:ThreadX/common/src/tx_initialize_kernel_enter.c ****            initialization is in progress.  Note that this variable is
 103:ThreadX/common/src/tx_initialize_kernel_enter.c ****            later used to represent interrupt nesting.  */
 104:ThreadX/common/src/tx_initialize_kernel_enter.c ****         _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
  42              		.loc 1 104 0
  43 000c 0C4B     		ldr	r3, .L4
  44 000e 4FF0F032 		mov	r2, #-252645136
  45 0012 1A60     		str	r2, [r3]
 105:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
 106:ThreadX/common/src/tx_initialize_kernel_enter.c ****         /* Call any port specific preprocessing.  */
 107:ThreadX/common/src/tx_initialize_kernel_enter.c ****         TX_PORT_SPECIFIC_PRE_INITIALIZATION
 108:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
 109:ThreadX/common/src/tx_initialize_kernel_enter.c ****         /* Invoke the low-level initialization to handle all processor specific
 110:ThreadX/common/src/tx_initialize_kernel_enter.c ****            initialization issues.  */
 111:ThreadX/common/src/tx_initialize_kernel_enter.c ****         _tx_initialize_low_level();
  46              		.loc 1 111 0
  47 0014 FFF7FEFF 		bl	_tx_initialize_low_level
  48              	.LVL0:
 112:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
 113:ThreadX/common/src/tx_initialize_kernel_enter.c ****         /* Invoke the high-level initialization to exercise all of the
 114:ThreadX/common/src/tx_initialize_kernel_enter.c ****            ThreadX components and the application's initialization
 115:ThreadX/common/src/tx_initialize_kernel_enter.c ****            function.  */
 116:ThreadX/common/src/tx_initialize_kernel_enter.c ****         _tx_initialize_high_level();
  49              		.loc 1 116 0
  50 0018 FFF7FEFF 		bl	_tx_initialize_high_level
  51              	.LVL1:
 117:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
 118:ThreadX/common/src/tx_initialize_kernel_enter.c ****         /* Call any port specific post-processing.  */
 119:ThreadX/common/src/tx_initialize_kernel_enter.c ****         TX_PORT_SPECIFIC_POST_INITIALIZATION
  52              		.loc 1 119 0
  53 001c 094A     		ldr	r2, .L4+4
ARM GAS  /tmp/ccjrjULg.s 			page 4


  54 001e 1368     		ldr	r3, [r2]
  55 0020 0133     		adds	r3, r3, #1
  56 0022 1360     		str	r3, [r2]
  57              	.L2:
 120:ThreadX/common/src/tx_initialize_kernel_enter.c ****     }
 121:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
 122:ThreadX/common/src/tx_initialize_kernel_enter.c ****     /* Optional processing extension.  */
 123:ThreadX/common/src/tx_initialize_kernel_enter.c ****     TX_INITIALIZE_KERNEL_ENTER_EXTENSION
 124:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
 125:ThreadX/common/src/tx_initialize_kernel_enter.c ****     /* Ensure that the system state variable is set to indicate
 126:ThreadX/common/src/tx_initialize_kernel_enter.c ****        initialization is in progress.  Note that this variable is
 127:ThreadX/common/src/tx_initialize_kernel_enter.c ****        later used to represent interrupt nesting.  */
 128:ThreadX/common/src/tx_initialize_kernel_enter.c ****     _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
  58              		.loc 1 128 0
  59 0024 064C     		ldr	r4, .L4
  60 0026 4FF0F033 		mov	r3, #-252645136
  61 002a 2360     		str	r3, [r4]
 129:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
 130:ThreadX/common/src/tx_initialize_kernel_enter.c ****     /* Call the application provided initialization function.  Pass the
 131:ThreadX/common/src/tx_initialize_kernel_enter.c ****        first available memory address to it.  */
 132:ThreadX/common/src/tx_initialize_kernel_enter.c ****     tx_application_define(_tx_initialize_unused_memory);
  62              		.loc 1 132 0
  63 002c 064B     		ldr	r3, .L4+8
  64 002e 1868     		ldr	r0, [r3]
  65 0030 FFF7FEFF 		bl	tx_application_define
  66              	.LVL2:
 133:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
 134:ThreadX/common/src/tx_initialize_kernel_enter.c ****     /* Set the system state in preparation for entering the thread
 135:ThreadX/common/src/tx_initialize_kernel_enter.c ****        scheduler.  */
 136:ThreadX/common/src/tx_initialize_kernel_enter.c ****     _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
  67              		.loc 1 136 0
  68 0034 0023     		movs	r3, #0
  69 0036 2360     		str	r3, [r4]
 137:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
 138:ThreadX/common/src/tx_initialize_kernel_enter.c ****     /* Call any port specific pre-scheduler processing.  */
 139:ThreadX/common/src/tx_initialize_kernel_enter.c ****     TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION
 140:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
 141:ThreadX/common/src/tx_initialize_kernel_enter.c ****     /* Enter the scheduling loop to start executing threads!  */
 142:ThreadX/common/src/tx_initialize_kernel_enter.c ****     _tx_thread_schedule();
  70              		.loc 1 142 0
  71 0038 FFF7FEFF 		bl	_tx_thread_schedule
  72              	.LVL3:
 143:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
 144:ThreadX/common/src/tx_initialize_kernel_enter.c **** #ifdef TX_SAFETY_CRITICAL
 145:ThreadX/common/src/tx_initialize_kernel_enter.c **** 
 146:ThreadX/common/src/tx_initialize_kernel_enter.c ****     /* If we ever get here, raise safety critical exception.  */
 147:ThreadX/common/src/tx_initialize_kernel_enter.c ****     TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
 148:ThreadX/common/src/tx_initialize_kernel_enter.c **** #endif
 149:ThreadX/common/src/tx_initialize_kernel_enter.c **** }
  73              		.loc 1 149 0
  74 003c 10BD     		pop	{r4, pc}
  75              	.L5:
  76 003e 00BF     		.align	2
  77              	.L4:
  78 0040 00000000 		.word	_tx_thread_system_state
  79 0044 00000000 		.word	_tx_thread_preempt_disable
  80 0048 00000000 		.word	_tx_initialize_unused_memory
ARM GAS  /tmp/ccjrjULg.s 			page 5


  81              		.cfi_endproc
  82              	.LFE8:
  84              		.text
  85              	.Letext0:
  86              		.file 2 "/usr/include/newlib/sys/lock.h"
  87              		.file 3 "/usr/include/newlib/sys/_types.h"
  88              		.file 4 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
  89              		.file 5 "/usr/include/newlib/sys/reent.h"
  90              		.file 6 "/usr/include/newlib/stdlib.h"
  91              		.file 7 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
  92              		.file 8 "ThreadX/common/inc/tx_api.h"
  93              		.file 9 "ThreadX/common/inc/tx_initialize.h"
  94              		.file 10 "ThreadX/common/inc/tx_thread.h"
  95              		.file 11 "ThreadX/common/inc/tx_timer.h"
ARM GAS  /tmp/ccjrjULg.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_initialize_kernel_enter.c
     /tmp/ccjrjULg.s:18     .text._tx_initialize_kernel_enter:0000000000000000 $t
     /tmp/ccjrjULg.s:25     .text._tx_initialize_kernel_enter:0000000000000000 _tx_initialize_kernel_enter
     /tmp/ccjrjULg.s:78     .text._tx_initialize_kernel_enter:0000000000000040 $d

UNDEFINED SYMBOLS
_tx_initialize_low_level
_tx_initialize_high_level
tx_application_define
_tx_thread_schedule
_tx_thread_system_state
_tx_thread_preempt_disable
_tx_initialize_unused_memory
