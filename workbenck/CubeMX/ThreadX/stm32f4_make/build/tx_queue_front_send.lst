ARM GAS  /tmp/ccAi6a4T.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_queue_front_send.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_queue_front_send,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_queue_front_send
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_queue_front_send:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_queue_front_send.c"
   1:ThreadX/common/src/tx_queue_front_send.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
   3:ThreadX/common/src/tx_queue_front_send.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
   5:ThreadX/common/src/tx_queue_front_send.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_queue_front_send.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_queue_front_send.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_queue_front_send.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  10:ThreadX/common/src/tx_queue_front_send.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_queue_front_send.c **** 
  12:ThreadX/common/src/tx_queue_front_send.c **** 
  13:ThreadX/common/src/tx_queue_front_send.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_queue_front_send.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_queue_front_send.c **** /**                                                                       */
  16:ThreadX/common/src/tx_queue_front_send.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_queue_front_send.c **** /**                                                                       */
  18:ThreadX/common/src/tx_queue_front_send.c **** /**   Queue                                                               */
  19:ThreadX/common/src/tx_queue_front_send.c **** /**                                                                       */
  20:ThreadX/common/src/tx_queue_front_send.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_queue_front_send.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_queue_front_send.c **** 
  23:ThreadX/common/src/tx_queue_front_send.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_queue_front_send.c **** 
  25:ThreadX/common/src/tx_queue_front_send.c **** 
  26:ThreadX/common/src/tx_queue_front_send.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_queue_front_send.c **** 
  28:ThreadX/common/src/tx_queue_front_send.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_queue_front_send.c **** #include "tx_trace.h"
  30:ThreadX/common/src/tx_queue_front_send.c **** #include "tx_thread.h"
  31:ThreadX/common/src/tx_queue_front_send.c **** #include "tx_queue.h"
ARM GAS  /tmp/ccAi6a4T.s 			page 2


  32:ThreadX/common/src/tx_queue_front_send.c **** 
  33:ThreadX/common/src/tx_queue_front_send.c **** 
  34:ThreadX/common/src/tx_queue_front_send.c **** /**************************************************************************/
  35:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  36:ThreadX/common/src/tx_queue_front_send.c **** /*  FUNCTION                                               RELEASE        */
  37:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  38:ThreadX/common/src/tx_queue_front_send.c **** /*    _tx_queue_front_send                                PORTABLE C      */
  39:ThreadX/common/src/tx_queue_front_send.c **** /*                                                           6.1          */
  40:ThreadX/common/src/tx_queue_front_send.c **** /*  AUTHOR                                                                */
  41:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  42:ThreadX/common/src/tx_queue_front_send.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  44:ThreadX/common/src/tx_queue_front_send.c **** /*  DESCRIPTION                                                           */
  45:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  46:ThreadX/common/src/tx_queue_front_send.c **** /*    This function places a message at the front of the specified queue. */
  47:ThreadX/common/src/tx_queue_front_send.c **** /*    If there is no room in the queue, this function returns the         */
  48:ThreadX/common/src/tx_queue_front_send.c **** /*    queue full status.                                                  */
  49:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  50:ThreadX/common/src/tx_queue_front_send.c **** /*  INPUT                                                                 */
  51:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  52:ThreadX/common/src/tx_queue_front_send.c **** /*    queue_ptr                         Pointer to queue control block    */
  53:ThreadX/common/src/tx_queue_front_send.c **** /*    source_ptr                        Pointer to message source         */
  54:ThreadX/common/src/tx_queue_front_send.c **** /*    wait_option                       Suspension option                 */
  55:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  56:ThreadX/common/src/tx_queue_front_send.c **** /*  OUTPUT                                                                */
  57:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  58:ThreadX/common/src/tx_queue_front_send.c **** /*    status                            Completion status                 */
  59:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  60:ThreadX/common/src/tx_queue_front_send.c **** /*  CALLS                                                                 */
  61:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  62:ThreadX/common/src/tx_queue_front_send.c **** /*    _tx_thread_system_resume          Resume thread routine             */
  63:ThreadX/common/src/tx_queue_front_send.c **** /*    _tx_thread_system_ni_resume       Non-interruptable resume thread   */
  64:ThreadX/common/src/tx_queue_front_send.c **** /*    _tx_thread_system_suspend         Suspend thread routine            */
  65:ThreadX/common/src/tx_queue_front_send.c **** /*    _tx_thread_system_ni_suspend      Non-interruptable suspend thread  */
  66:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  67:ThreadX/common/src/tx_queue_front_send.c **** /*  CALLED BY                                                             */
  68:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  69:ThreadX/common/src/tx_queue_front_send.c **** /*    Application Code                                                    */
  70:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  71:ThreadX/common/src/tx_queue_front_send.c **** /*  RELEASE HISTORY                                                       */
  72:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  73:ThreadX/common/src/tx_queue_front_send.c **** /*    DATE              NAME                      DESCRIPTION             */
  74:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  75:ThreadX/common/src/tx_queue_front_send.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  76:ThreadX/common/src/tx_queue_front_send.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  77:ThreadX/common/src/tx_queue_front_send.c **** /*                                            resulting in version 6.1    */
  78:ThreadX/common/src/tx_queue_front_send.c **** /*                                                                        */
  79:ThreadX/common/src/tx_queue_front_send.c **** /**************************************************************************/
  80:ThreadX/common/src/tx_queue_front_send.c **** UINT  _tx_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
  81:ThreadX/common/src/tx_queue_front_send.c **** {
  28              		.loc 1 81 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  34              	.LCFI0:
ARM GAS  /tmp/ccAi6a4T.s 			page 3


  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 3, -24
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 0446     		mov	r4, r0
  43              	.LVL1:
  44              	.LBB18:
  45              	.LBB19:
  46              	.LBB20:
  47              	.LBB21:
  48              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
ARM GAS  /tmp/ccAi6a4T.s 			page 4


  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccAi6a4T.s 			page 5


 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
ARM GAS  /tmp/ccAi6a4T.s 			page 6


 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
ARM GAS  /tmp/ccAi6a4T.s 			page 7


 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
ARM GAS  /tmp/ccAi6a4T.s 			page 8


 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
ARM GAS  /tmp/ccAi6a4T.s 			page 9


 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
ARM GAS  /tmp/ccAi6a4T.s 			page 10


 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
ARM GAS  /tmp/ccAi6a4T.s 			page 11


 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
ARM GAS  /tmp/ccAi6a4T.s 			page 12


 500:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  49              		.loc 2 539 0
  50              		.syntax unified
  51              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  52 0004 EFF31086 		MRS  r6, PRIMASK 
  53              	@ 0 "" 2
  54              		.thumb
  55              		.syntax unified
  56              	.LBE21:
  57              	.LBE20:
 540:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
ARM GAS  /tmp/ccAi6a4T.s 			page 13


 548:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
 567:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
 569:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
 571:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  58              		.loc 2 575 0
  59              		.syntax unified
  60              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  61 0008 72B6     		CPSID i
  62              	@ 0 "" 2
  63              		.thumb
  64              		.syntax unified
  65              	.LBE19:
  66              	.LBE18:
  82:ThreadX/common/src/tx_queue_front_send.c **** 
  83:ThreadX/common/src/tx_queue_front_send.c **** TX_INTERRUPT_SAVE_AREA
  84:ThreadX/common/src/tx_queue_front_send.c **** 
  85:ThreadX/common/src/tx_queue_front_send.c **** TX_THREAD       *thread_ptr;
  86:ThreadX/common/src/tx_queue_front_send.c **** ULONG           *source;
  87:ThreadX/common/src/tx_queue_front_send.c **** ULONG           *destination;
  88:ThreadX/common/src/tx_queue_front_send.c **** UINT            size;
  89:ThreadX/common/src/tx_queue_front_send.c **** UINT            suspended_count;
  90:ThreadX/common/src/tx_queue_front_send.c **** TX_THREAD       *next_thread;
  91:ThreadX/common/src/tx_queue_front_send.c **** TX_THREAD       *previous_thread;
  92:ThreadX/common/src/tx_queue_front_send.c **** UINT            status;
  93:ThreadX/common/src/tx_queue_front_send.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
  94:ThreadX/common/src/tx_queue_front_send.c **** VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
  95:ThreadX/common/src/tx_queue_front_send.c **** #endif
  96:ThreadX/common/src/tx_queue_front_send.c **** 
  97:ThreadX/common/src/tx_queue_front_send.c **** 
  98:ThreadX/common/src/tx_queue_front_send.c ****     /* Default the status to TX_SUCCESS.  */
  99:ThreadX/common/src/tx_queue_front_send.c ****     status =  TX_SUCCESS;
 100:ThreadX/common/src/tx_queue_front_send.c **** 
 101:ThreadX/common/src/tx_queue_front_send.c ****     /* Disable interrupts to place message in the queue.  */
ARM GAS  /tmp/ccAi6a4T.s 			page 14


 102:ThreadX/common/src/tx_queue_front_send.c ****     TX_DISABLE
 103:ThreadX/common/src/tx_queue_front_send.c **** 
 104:ThreadX/common/src/tx_queue_front_send.c **** #ifdef TX_QUEUE_ENABLE_PERFORMANCE_INFO
 105:ThreadX/common/src/tx_queue_front_send.c **** 
 106:ThreadX/common/src/tx_queue_front_send.c ****     /* Increment the total messages sent counter.  */
 107:ThreadX/common/src/tx_queue_front_send.c ****     _tx_queue_performance_messages_sent_count++;
 108:ThreadX/common/src/tx_queue_front_send.c **** 
 109:ThreadX/common/src/tx_queue_front_send.c ****     /* Increment the number of messages sent to this queue.  */
 110:ThreadX/common/src/tx_queue_front_send.c ****     queue_ptr -> tx_queue_performance_messages_sent_count++;
 111:ThreadX/common/src/tx_queue_front_send.c **** #endif
 112:ThreadX/common/src/tx_queue_front_send.c **** 
 113:ThreadX/common/src/tx_queue_front_send.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 114:ThreadX/common/src/tx_queue_front_send.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_FRONT_SEND, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(sourc
 115:ThreadX/common/src/tx_queue_front_send.c **** 
 116:ThreadX/common/src/tx_queue_front_send.c ****     /* Log this kernel call.  */
 117:ThreadX/common/src/tx_queue_front_send.c ****     TX_EL_QUEUE_FRONT_SEND_INSERT
 118:ThreadX/common/src/tx_queue_front_send.c **** 
 119:ThreadX/common/src/tx_queue_front_send.c ****     /* Pickup the suspended count.  */
 120:ThreadX/common/src/tx_queue_front_send.c ****     suspended_count =  queue_ptr -> tx_queue_suspended_count;
  67              		.loc 1 120 0
  68 000a C36A     		ldr	r3, [r0, #44]
  69              	.LVL2:
 121:ThreadX/common/src/tx_queue_front_send.c **** 
 122:ThreadX/common/src/tx_queue_front_send.c ****     /* Now check for room in the queue for placing the new message in front.  */
 123:ThreadX/common/src/tx_queue_front_send.c ****     if (queue_ptr -> tx_queue_available_storage != ((UINT) 0))
  70              		.loc 1 123 0
  71 000c 4069     		ldr	r0, [r0, #20]
  72              	.LVL3:
  73 000e 0028     		cmp	r0, #0
  74 0010 5FD0     		beq	.L2
 124:ThreadX/common/src/tx_queue_front_send.c ****     {
 125:ThreadX/common/src/tx_queue_front_send.c **** 
 126:ThreadX/common/src/tx_queue_front_send.c ****         /* Yes there is room in the queue. Now determine if there is a thread waiting
 127:ThreadX/common/src/tx_queue_front_send.c ****            for a message.  */
 128:ThreadX/common/src/tx_queue_front_send.c ****         if (suspended_count == TX_NO_SUSPENSIONS)
  75              		.loc 1 128 0
  76 0012 53BB     		cbnz	r3, .L3
 129:ThreadX/common/src/tx_queue_front_send.c ****         {
 130:ThreadX/common/src/tx_queue_front_send.c **** 
 131:ThreadX/common/src/tx_queue_front_send.c ****             /* No thread suspended while waiting for a message from
 132:ThreadX/common/src/tx_queue_front_send.c ****                this queue.  */
 133:ThreadX/common/src/tx_queue_front_send.c **** 
 134:ThreadX/common/src/tx_queue_front_send.c ****             /* Adjust the read pointer since we are adding to the front of the
 135:ThreadX/common/src/tx_queue_front_send.c ****                queue.  */
 136:ThreadX/common/src/tx_queue_front_send.c **** 
 137:ThreadX/common/src/tx_queue_front_send.c ****             /* See if the read pointer is at the beginning of the queue area.  */
 138:ThreadX/common/src/tx_queue_front_send.c ****             if (queue_ptr -> tx_queue_read == queue_ptr -> tx_queue_start)
  77              		.loc 1 138 0
  78 0014 236A     		ldr	r3, [r4, #32]
  79              	.LVL4:
  80 0016 A269     		ldr	r2, [r4, #24]
  81              	.LVL5:
  82 0018 9342     		cmp	r3, r2
  83 001a 11D0     		beq	.L23
 139:ThreadX/common/src/tx_queue_front_send.c ****             {
 140:ThreadX/common/src/tx_queue_front_send.c **** 
 141:ThreadX/common/src/tx_queue_front_send.c ****                 /* Adjust the read pointer to the last message at the end of the
ARM GAS  /tmp/ccAi6a4T.s 			page 15


 142:ThreadX/common/src/tx_queue_front_send.c ****                    queue.  */
 143:ThreadX/common/src/tx_queue_front_send.c ****                 queue_ptr -> tx_queue_read =  TX_ULONG_POINTER_SUB(queue_ptr -> tx_queue_end, queue
 144:ThreadX/common/src/tx_queue_front_send.c ****             }
 145:ThreadX/common/src/tx_queue_front_send.c ****             else
 146:ThreadX/common/src/tx_queue_front_send.c ****             {
 147:ThreadX/common/src/tx_queue_front_send.c **** 
 148:ThreadX/common/src/tx_queue_front_send.c ****                 /* Not at the beginning of the queue, just move back one message.  */
 149:ThreadX/common/src/tx_queue_front_send.c ****                 queue_ptr -> tx_queue_read =  TX_ULONG_POINTER_SUB(queue_ptr -> tx_queue_read, queu
  84              		.loc 1 149 0
  85 001c A268     		ldr	r2, [r4, #8]
  86 001e A3EB8203 		sub	r3, r3, r2, lsl #2
  87 0022 2362     		str	r3, [r4, #32]
  88              	.L5:
 150:ThreadX/common/src/tx_queue_front_send.c ****             }
 151:ThreadX/common/src/tx_queue_front_send.c **** 
 152:ThreadX/common/src/tx_queue_front_send.c ****             /* Simply place the message in the queue.  */
 153:ThreadX/common/src/tx_queue_front_send.c **** 
 154:ThreadX/common/src/tx_queue_front_send.c ****             /* Reduce the amount of available storage.  */
 155:ThreadX/common/src/tx_queue_front_send.c ****             queue_ptr -> tx_queue_available_storage--;
  89              		.loc 1 155 0
  90 0024 0138     		subs	r0, r0, #1
  91 0026 6061     		str	r0, [r4, #20]
 156:ThreadX/common/src/tx_queue_front_send.c **** 
 157:ThreadX/common/src/tx_queue_front_send.c ****             /* Increase the enqueued count.  */
 158:ThreadX/common/src/tx_queue_front_send.c ****             queue_ptr -> tx_queue_enqueued++;
  92              		.loc 1 158 0
  93 0028 2369     		ldr	r3, [r4, #16]
  94 002a 0133     		adds	r3, r3, #1
  95 002c 2361     		str	r3, [r4, #16]
  96              	.LVL6:
 159:ThreadX/common/src/tx_queue_front_send.c **** 
 160:ThreadX/common/src/tx_queue_front_send.c ****             /* Setup source and destination pointers.  */
 161:ThreadX/common/src/tx_queue_front_send.c ****             source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 162:ThreadX/common/src/tx_queue_front_send.c ****             destination =  queue_ptr -> tx_queue_read;
  97              		.loc 1 162 0
  98 002e 256A     		ldr	r5, [r4, #32]
  99              	.LVL7:
 163:ThreadX/common/src/tx_queue_front_send.c ****             size =         queue_ptr -> tx_queue_message_size;
 100              		.loc 1 163 0
 101 0030 A368     		ldr	r3, [r4, #8]
 102              	.LVL8:
 164:ThreadX/common/src/tx_queue_front_send.c **** 
 165:ThreadX/common/src/tx_queue_front_send.c ****             /* Copy message. Note that the source and destination pointers are
 166:ThreadX/common/src/tx_queue_front_send.c ****                incremented by the macro.  */
 167:ThreadX/common/src/tx_queue_front_send.c ****             TX_QUEUE_MESSAGE_COPY(source, destination, size)
 103              		.loc 1 167 0
 104 0032 081D     		adds	r0, r1, #4
 105              	.LVL9:
 106 0034 2A1D     		adds	r2, r5, #4
 107              	.LVL10:
 108 0036 0968     		ldr	r1, [r1]
 109              	.LVL11:
 110 0038 2960     		str	r1, [r5]
 111              	.LVL12:
 112 003a 012B     		cmp	r3, #1
 113 003c 0AD8     		bhi	.L6
 114 003e 0BE0     		b	.L7
ARM GAS  /tmp/ccAi6a4T.s 			page 16


 115              	.LVL13:
 116              	.L23:
 143:ThreadX/common/src/tx_queue_front_send.c ****             }
 117              		.loc 1 143 0
 118 0040 E369     		ldr	r3, [r4, #28]
 119 0042 A268     		ldr	r2, [r4, #8]
 120 0044 A3EB8203 		sub	r3, r3, r2, lsl #2
 121 0048 2362     		str	r3, [r4, #32]
 122 004a EBE7     		b	.L5
 123              	.LVL14:
 124              	.L8:
 125              		.loc 1 167 0 discriminator 2
 126 004c 0168     		ldr	r1, [r0]
 127 004e 1160     		str	r1, [r2]
 128 0050 0432     		adds	r2, r2, #4
 129              	.LVL15:
 130 0052 0430     		adds	r0, r0, #4
 131              	.LVL16:
 132              	.L6:
 133              		.loc 1 167 0 is_stmt 0 discriminator 1
 134 0054 013B     		subs	r3, r3, #1
 135              	.LVL17:
 136 0056 F9D1     		bne	.L8
 137              	.L7:
 168:ThreadX/common/src/tx_queue_front_send.c **** 
 169:ThreadX/common/src/tx_queue_front_send.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
 170:ThreadX/common/src/tx_queue_front_send.c **** 
 171:ThreadX/common/src/tx_queue_front_send.c ****             /* Pickup the notify callback routine for this queue.  */
 172:ThreadX/common/src/tx_queue_front_send.c ****             queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 138              		.loc 1 172 0 is_stmt 1
 139 0058 A36B     		ldr	r3, [r4, #56]
 140              	.LVL18:
 141              	.LBB22:
 142              	.LBB23:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 143              		.loc 2 562 0
 144              		.syntax unified
 145              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 146 005a 86F31088 		MSR  PRIMASK,r6
 147              	@ 0 "" 2
 148              	.LVL19:
 149              		.thumb
 150              		.syntax unified
 151              	.LBE23:
 152              	.LBE22:
 173:ThreadX/common/src/tx_queue_front_send.c **** #endif
 174:ThreadX/common/src/tx_queue_front_send.c **** 
 175:ThreadX/common/src/tx_queue_front_send.c ****             /* Restore interrupts.  */
 176:ThreadX/common/src/tx_queue_front_send.c ****             TX_RESTORE
 177:ThreadX/common/src/tx_queue_front_send.c **** 
 178:ThreadX/common/src/tx_queue_front_send.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
 179:ThreadX/common/src/tx_queue_front_send.c **** 
 180:ThreadX/common/src/tx_queue_front_send.c ****             /* Determine if a notify callback is required.  */
 181:ThreadX/common/src/tx_queue_front_send.c ****             if (queue_send_notify != TX_NULL)
 153              		.loc 1 181 0
 154 005e 002B     		cmp	r3, #0
 155 0060 78D0     		beq	.L20
ARM GAS  /tmp/ccAi6a4T.s 			page 17


 182:ThreadX/common/src/tx_queue_front_send.c ****             {
 183:ThreadX/common/src/tx_queue_front_send.c **** 
 184:ThreadX/common/src/tx_queue_front_send.c ****                 /* Call application queue send notification.  */
 185:ThreadX/common/src/tx_queue_front_send.c ****                 (queue_send_notify)(queue_ptr);
 156              		.loc 1 185 0
 157 0062 2046     		mov	r0, r4
 158              	.LVL20:
 159 0064 9847     		blx	r3
 160              	.LVL21:
  99:ThreadX/common/src/tx_queue_front_send.c **** 
 161              		.loc 1 99 0
 162 0066 0020     		movs	r0, #0
 163 0068 63E0     		b	.L1
 164              	.LVL22:
 165              	.L3:
 186:ThreadX/common/src/tx_queue_front_send.c ****             }
 187:ThreadX/common/src/tx_queue_front_send.c **** #endif
 188:ThreadX/common/src/tx_queue_front_send.c ****         }
 189:ThreadX/common/src/tx_queue_front_send.c ****         else
 190:ThreadX/common/src/tx_queue_front_send.c ****         {
 191:ThreadX/common/src/tx_queue_front_send.c **** 
 192:ThreadX/common/src/tx_queue_front_send.c ****             /* Thread suspended waiting for a message.  Remove it and copy this message
 193:ThreadX/common/src/tx_queue_front_send.c ****                into its storage area.  */
 194:ThreadX/common/src/tx_queue_front_send.c ****             thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 166              		.loc 1 194 0
 167 006a A06A     		ldr	r0, [r4, #40]
 168              	.LVL23:
 195:ThreadX/common/src/tx_queue_front_send.c **** 
 196:ThreadX/common/src/tx_queue_front_send.c ****             /* See if this is the only suspended thread on the list.  */
 197:ThreadX/common/src/tx_queue_front_send.c ****             suspended_count--;
 198:ThreadX/common/src/tx_queue_front_send.c ****             if (suspended_count == TX_NO_SUSPENSIONS)
 169              		.loc 1 198 0
 170 006c 013B     		subs	r3, r3, #1
 171              	.LVL24:
 172 006e 11D1     		bne	.L10
 199:ThreadX/common/src/tx_queue_front_send.c ****             {
 200:ThreadX/common/src/tx_queue_front_send.c **** 
 201:ThreadX/common/src/tx_queue_front_send.c ****                 /* Yes, the only suspended thread.  */
 202:ThreadX/common/src/tx_queue_front_send.c **** 
 203:ThreadX/common/src/tx_queue_front_send.c ****                 /* Update the head pointer.  */
 204:ThreadX/common/src/tx_queue_front_send.c ****                 queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 173              		.loc 1 204 0
 174 0070 0022     		movs	r2, #0
 175              	.LVL25:
 176 0072 A262     		str	r2, [r4, #40]
 177              	.L11:
 205:ThreadX/common/src/tx_queue_front_send.c ****             }
 206:ThreadX/common/src/tx_queue_front_send.c ****             else
 207:ThreadX/common/src/tx_queue_front_send.c ****             {
 208:ThreadX/common/src/tx_queue_front_send.c **** 
 209:ThreadX/common/src/tx_queue_front_send.c ****                 /* At least one more thread is on the same expiration list.  */
 210:ThreadX/common/src/tx_queue_front_send.c **** 
 211:ThreadX/common/src/tx_queue_front_send.c ****                 /* Update the list head pointer.  */
 212:ThreadX/common/src/tx_queue_front_send.c ****                 queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 213:ThreadX/common/src/tx_queue_front_send.c **** 
 214:ThreadX/common/src/tx_queue_front_send.c ****                 /* Update the links of the adjacent threads.  */
 215:ThreadX/common/src/tx_queue_front_send.c ****                 next_thread =                            thread_ptr -> tx_thread_suspended_next;
ARM GAS  /tmp/ccAi6a4T.s 			page 18


 216:ThreadX/common/src/tx_queue_front_send.c ****                 queue_ptr -> tx_queue_suspension_list =  next_thread;
 217:ThreadX/common/src/tx_queue_front_send.c **** 
 218:ThreadX/common/src/tx_queue_front_send.c ****                 /* Update the links of the adjacent threads.  */
 219:ThreadX/common/src/tx_queue_front_send.c ****                 previous_thread =                               thread_ptr -> tx_thread_suspended_p
 220:ThreadX/common/src/tx_queue_front_send.c ****                 next_thread -> tx_thread_suspended_previous =   previous_thread;
 221:ThreadX/common/src/tx_queue_front_send.c ****                 previous_thread -> tx_thread_suspended_next =   next_thread;
 222:ThreadX/common/src/tx_queue_front_send.c ****             }
 223:ThreadX/common/src/tx_queue_front_send.c **** 
 224:ThreadX/common/src/tx_queue_front_send.c ****             /* Decrement the suspension count.  */
 225:ThreadX/common/src/tx_queue_front_send.c ****             queue_ptr -> tx_queue_suspended_count =  suspended_count;
 178              		.loc 1 225 0
 179 0074 E362     		str	r3, [r4, #44]
 226:ThreadX/common/src/tx_queue_front_send.c **** 
 227:ThreadX/common/src/tx_queue_front_send.c ****             /* Prepare for resumption of the thread.  */
 228:ThreadX/common/src/tx_queue_front_send.c **** 
 229:ThreadX/common/src/tx_queue_front_send.c ****             /* Clear cleanup routine to avoid timeout.  */
 230:ThreadX/common/src/tx_queue_front_send.c ****             thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 180              		.loc 1 230 0
 181 0076 0023     		movs	r3, #0
 182              	.LVL26:
 183 0078 8366     		str	r3, [r0, #104]
 184              	.LVL27:
 231:ThreadX/common/src/tx_queue_front_send.c **** 
 232:ThreadX/common/src/tx_queue_front_send.c **** 
 233:ThreadX/common/src/tx_queue_front_send.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
 234:ThreadX/common/src/tx_queue_front_send.c **** 
 235:ThreadX/common/src/tx_queue_front_send.c ****             /* Pickup the notify callback routine for this queue.  */
 236:ThreadX/common/src/tx_queue_front_send.c ****             queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 185              		.loc 1 236 0
 186 007a A76B     		ldr	r7, [r4, #56]
 187              	.LVL28:
 237:ThreadX/common/src/tx_queue_front_send.c **** #endif
 238:ThreadX/common/src/tx_queue_front_send.c **** 
 239:ThreadX/common/src/tx_queue_front_send.c ****             /* Setup source and destination pointers.  */
 240:ThreadX/common/src/tx_queue_front_send.c ****             source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 241:ThreadX/common/src/tx_queue_front_send.c ****             destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_susp
 188              		.loc 1 241 0
 189 007c D0F87CC0 		ldr	ip, [r0, #124]
 190              	.LVL29:
 242:ThreadX/common/src/tx_queue_front_send.c ****             size =         queue_ptr -> tx_queue_message_size;
 191              		.loc 1 242 0
 192 0080 A368     		ldr	r3, [r4, #8]
 193              	.LVL30:
 243:ThreadX/common/src/tx_queue_front_send.c **** 
 244:ThreadX/common/src/tx_queue_front_send.c ****             /* Copy message. Note that the source and destination pointers are
 245:ThreadX/common/src/tx_queue_front_send.c ****                incremented by the macro.  */
 246:ThreadX/common/src/tx_queue_front_send.c ****             TX_QUEUE_MESSAGE_COPY(source, destination, size)
 194              		.loc 1 246 0
 195 0082 0D1D     		adds	r5, r1, #4
 196              	.LVL31:
 197 0084 0CF10402 		add	r2, ip, #4
 198              	.LVL32:
 199 0088 0968     		ldr	r1, [r1]
 200              	.LVL33:
 201 008a CCF80010 		str	r1, [ip]
 202 008e 012B     		cmp	r3, #1
 203 0090 0CD8     		bhi	.L12
ARM GAS  /tmp/ccAi6a4T.s 			page 19


 204 0092 0DE0     		b	.L13
 205              	.LVL34:
 206              	.L10:
 212:ThreadX/common/src/tx_queue_front_send.c **** 
 207              		.loc 1 212 0
 208 0094 026F     		ldr	r2, [r0, #112]
 209              	.LVL35:
 210 0096 A262     		str	r2, [r4, #40]
 215:ThreadX/common/src/tx_queue_front_send.c ****                 queue_ptr -> tx_queue_suspension_list =  next_thread;
 211              		.loc 1 215 0
 212 0098 026F     		ldr	r2, [r0, #112]
 213              	.LVL36:
 216:ThreadX/common/src/tx_queue_front_send.c **** 
 214              		.loc 1 216 0
 215 009a A262     		str	r2, [r4, #40]
 219:ThreadX/common/src/tx_queue_front_send.c ****                 next_thread -> tx_thread_suspended_previous =   previous_thread;
 216              		.loc 1 219 0
 217 009c 456F     		ldr	r5, [r0, #116]
 218              	.LVL37:
 220:ThreadX/common/src/tx_queue_front_send.c ****                 previous_thread -> tx_thread_suspended_next =   next_thread;
 219              		.loc 1 220 0
 220 009e 5567     		str	r5, [r2, #116]
 221:ThreadX/common/src/tx_queue_front_send.c ****             }
 221              		.loc 1 221 0
 222 00a0 2A67     		str	r2, [r5, #112]
 223 00a2 E7E7     		b	.L11
 224              	.LVL38:
 225              	.L14:
 226              		.loc 1 246 0 discriminator 2
 227 00a4 2968     		ldr	r1, [r5]
 228 00a6 1160     		str	r1, [r2]
 229 00a8 0432     		adds	r2, r2, #4
 230              	.LVL39:
 231 00aa 0435     		adds	r5, r5, #4
 232              	.LVL40:
 233              	.L12:
 234              		.loc 1 246 0 is_stmt 0 discriminator 1
 235 00ac 013B     		subs	r3, r3, #1
 236              	.LVL41:
 237 00ae F9D1     		bne	.L14
 238              	.L13:
 247:ThreadX/common/src/tx_queue_front_send.c **** 
 248:ThreadX/common/src/tx_queue_front_send.c ****             /* Put return status into the thread control block.  */
 249:ThreadX/common/src/tx_queue_front_send.c ****             thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 239              		.loc 1 249 0 is_stmt 1
 240 00b0 0023     		movs	r3, #0
 241              	.LVL42:
 242 00b2 C0F88430 		str	r3, [r0, #132]
 250:ThreadX/common/src/tx_queue_front_send.c **** 
 251:ThreadX/common/src/tx_queue_front_send.c **** #ifdef TX_NOT_INTERRUPTABLE
 252:ThreadX/common/src/tx_queue_front_send.c **** 
 253:ThreadX/common/src/tx_queue_front_send.c ****             /* Resume the thread!  */
 254:ThreadX/common/src/tx_queue_front_send.c ****             _tx_thread_system_ni_resume(thread_ptr);
 255:ThreadX/common/src/tx_queue_front_send.c **** 
 256:ThreadX/common/src/tx_queue_front_send.c ****             /* Restore interrupts.  */
 257:ThreadX/common/src/tx_queue_front_send.c ****             TX_RESTORE
 258:ThreadX/common/src/tx_queue_front_send.c **** #else
ARM GAS  /tmp/ccAi6a4T.s 			page 20


 259:ThreadX/common/src/tx_queue_front_send.c **** 
 260:ThreadX/common/src/tx_queue_front_send.c ****             /* Temporarily disable preemption.  */
 261:ThreadX/common/src/tx_queue_front_send.c ****             _tx_thread_preempt_disable++;
 243              		.loc 1 261 0
 244 00b6 294A     		ldr	r2, .L25
 245              	.LVL43:
 246 00b8 1368     		ldr	r3, [r2]
 247 00ba 0133     		adds	r3, r3, #1
 248 00bc 1360     		str	r3, [r2]
 249              	.LVL44:
 250              	.LBB24:
 251              	.LBB25:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 252              		.loc 2 562 0
 253              		.syntax unified
 254              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 255 00be 86F31088 		MSR  PRIMASK,r6
 256              	@ 0 "" 2
 257              	.LVL45:
 258              		.thumb
 259              		.syntax unified
 260              	.LBE25:
 261              	.LBE24:
 262:ThreadX/common/src/tx_queue_front_send.c **** 
 263:ThreadX/common/src/tx_queue_front_send.c ****             /* Restore interrupts.  */
 264:ThreadX/common/src/tx_queue_front_send.c ****             TX_RESTORE
 265:ThreadX/common/src/tx_queue_front_send.c **** 
 266:ThreadX/common/src/tx_queue_front_send.c ****             /* Resume thread.  */
 267:ThreadX/common/src/tx_queue_front_send.c ****             _tx_thread_system_resume(thread_ptr);
 262              		.loc 1 267 0
 263 00c2 FFF7FEFF 		bl	_tx_thread_system_resume
 264              	.LVL46:
 268:ThreadX/common/src/tx_queue_front_send.c **** #endif
 269:ThreadX/common/src/tx_queue_front_send.c **** 
 270:ThreadX/common/src/tx_queue_front_send.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
 271:ThreadX/common/src/tx_queue_front_send.c **** 
 272:ThreadX/common/src/tx_queue_front_send.c ****             /* Determine if a notify callback is required.  */
 273:ThreadX/common/src/tx_queue_front_send.c ****             if (queue_send_notify != TX_NULL)
 265              		.loc 1 273 0
 266 00c6 002F     		cmp	r7, #0
 267 00c8 46D0     		beq	.L21
 274:ThreadX/common/src/tx_queue_front_send.c ****             {
 275:ThreadX/common/src/tx_queue_front_send.c **** 
 276:ThreadX/common/src/tx_queue_front_send.c ****                 /* Call application queue send notification.  */
 277:ThreadX/common/src/tx_queue_front_send.c ****                 (queue_send_notify)(queue_ptr);
 268              		.loc 1 277 0
 269 00ca 2046     		mov	r0, r4
 270 00cc B847     		blx	r7
 271              	.LVL47:
  99:ThreadX/common/src/tx_queue_front_send.c **** 
 272              		.loc 1 99 0
 273 00ce 0020     		movs	r0, #0
 274 00d0 2FE0     		b	.L1
 275              	.LVL48:
 276              	.L2:
 278:ThreadX/common/src/tx_queue_front_send.c ****             }
 279:ThreadX/common/src/tx_queue_front_send.c **** #endif
ARM GAS  /tmp/ccAi6a4T.s 			page 21


 280:ThreadX/common/src/tx_queue_front_send.c ****         }
 281:ThreadX/common/src/tx_queue_front_send.c ****     }
 282:ThreadX/common/src/tx_queue_front_send.c **** 
 283:ThreadX/common/src/tx_queue_front_send.c ****     /* Determine if the caller has requested suspension.  */
 284:ThreadX/common/src/tx_queue_front_send.c ****     else if (wait_option != TX_NO_WAIT)
 277              		.loc 1 284 0
 278 00d2 002A     		cmp	r2, #0
 279 00d4 3AD0     		beq	.L15
 285:ThreadX/common/src/tx_queue_front_send.c ****     {
 286:ThreadX/common/src/tx_queue_front_send.c **** 
 287:ThreadX/common/src/tx_queue_front_send.c ****         /* Determine if the preempt disable flag is non-zero.  */
 288:ThreadX/common/src/tx_queue_front_send.c ****         if (_tx_thread_preempt_disable != ((UINT) 0))
 280              		.loc 1 288 0
 281 00d6 2148     		ldr	r0, .L25
 282 00d8 0068     		ldr	r0, [r0]
 283 00da 58BB     		cbnz	r0, .L24
 289:ThreadX/common/src/tx_queue_front_send.c ****         {
 290:ThreadX/common/src/tx_queue_front_send.c **** 
 291:ThreadX/common/src/tx_queue_front_send.c ****             /* Restore interrupts.  */
 292:ThreadX/common/src/tx_queue_front_send.c ****             TX_RESTORE
 293:ThreadX/common/src/tx_queue_front_send.c **** 
 294:ThreadX/common/src/tx_queue_front_send.c ****             /* Suspension is not allowed if the preempt disable flag is non-zero at this point - re
 295:ThreadX/common/src/tx_queue_front_send.c ****             status =  TX_QUEUE_FULL;
 296:ThreadX/common/src/tx_queue_front_send.c ****         }
 297:ThreadX/common/src/tx_queue_front_send.c ****         else
 298:ThreadX/common/src/tx_queue_front_send.c ****         {
 299:ThreadX/common/src/tx_queue_front_send.c **** 
 300:ThreadX/common/src/tx_queue_front_send.c ****             /* Yes, suspension is requested.  */
 301:ThreadX/common/src/tx_queue_front_send.c **** 
 302:ThreadX/common/src/tx_queue_front_send.c ****             /* Prepare for suspension of this thread.  */
 303:ThreadX/common/src/tx_queue_front_send.c **** 
 304:ThreadX/common/src/tx_queue_front_send.c ****             /* Pickup thread pointer.  */
 305:ThreadX/common/src/tx_queue_front_send.c ****             TX_THREAD_GET_CURRENT(thread_ptr)
 284              		.loc 1 305 0
 285 00dc 2048     		ldr	r0, .L25+4
 286 00de 0568     		ldr	r5, [r0]
 287              	.LVL49:
 306:ThreadX/common/src/tx_queue_front_send.c **** 
 307:ThreadX/common/src/tx_queue_front_send.c ****             /* Setup cleanup routine pointer.  */
 308:ThreadX/common/src/tx_queue_front_send.c ****             thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 288              		.loc 1 308 0
 289 00e0 2048     		ldr	r0, .L25+8
 290 00e2 A866     		str	r0, [r5, #104]
 309:ThreadX/common/src/tx_queue_front_send.c **** 
 310:ThreadX/common/src/tx_queue_front_send.c ****             /* Setup cleanup information, i.e. this queue control
 311:ThreadX/common/src/tx_queue_front_send.c ****                block and the source pointer.  */
 312:ThreadX/common/src/tx_queue_front_send.c ****             thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 291              		.loc 1 312 0
 292 00e4 EC66     		str	r4, [r5, #108]
 313:ThreadX/common/src/tx_queue_front_send.c ****             thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 293              		.loc 1 313 0
 294 00e6 E967     		str	r1, [r5, #124]
 314:ThreadX/common/src/tx_queue_front_send.c **** 
 315:ThreadX/common/src/tx_queue_front_send.c ****             /* Set the flag to true to indicate a queue front send suspension.  */
 316:ThreadX/common/src/tx_queue_front_send.c ****             thread_ptr -> tx_thread_suspend_option =           TX_TRUE;
 295              		.loc 1 316 0
 296 00e8 0121     		movs	r1, #1
ARM GAS  /tmp/ccAi6a4T.s 			page 22


 297              	.LVL50:
 298 00ea C5F88010 		str	r1, [r5, #128]
 317:ThreadX/common/src/tx_queue_front_send.c **** 
 318:ThreadX/common/src/tx_queue_front_send.c **** #ifndef TX_NOT_INTERRUPTABLE
 319:ThreadX/common/src/tx_queue_front_send.c **** 
 320:ThreadX/common/src/tx_queue_front_send.c ****             /* Increment the suspension sequence number, which is used to identify
 321:ThreadX/common/src/tx_queue_front_send.c ****                this suspension event.  */
 322:ThreadX/common/src/tx_queue_front_send.c ****             thread_ptr -> tx_thread_suspension_sequence++;
 299              		.loc 1 322 0
 300 00ee D5F8B010 		ldr	r1, [r5, #176]
 301 00f2 0131     		adds	r1, r1, #1
 302 00f4 C5F8B010 		str	r1, [r5, #176]
 323:ThreadX/common/src/tx_queue_front_send.c **** #endif
 324:ThreadX/common/src/tx_queue_front_send.c **** 
 325:ThreadX/common/src/tx_queue_front_send.c ****             /* Place this thread at the front of the suspension list, since it is a
 326:ThreadX/common/src/tx_queue_front_send.c ****                queue front send suspension.  */
 327:ThreadX/common/src/tx_queue_front_send.c ****             if (suspended_count == TX_NO_SUSPENSIONS)
 303              		.loc 1 327 0
 304 00f8 03BB     		cbnz	r3, .L17
 328:ThreadX/common/src/tx_queue_front_send.c ****             {
 329:ThreadX/common/src/tx_queue_front_send.c **** 
 330:ThreadX/common/src/tx_queue_front_send.c ****                 /* No other threads are suspended.  Setup the head pointer and
 331:ThreadX/common/src/tx_queue_front_send.c ****                    just setup this threads pointers to itself.  */
 332:ThreadX/common/src/tx_queue_front_send.c ****                 queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 305              		.loc 1 332 0
 306 00fa A562     		str	r5, [r4, #40]
 307              	.LVL51:
 333:ThreadX/common/src/tx_queue_front_send.c ****                 thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 308              		.loc 1 333 0
 309 00fc 2D67     		str	r5, [r5, #112]
 334:ThreadX/common/src/tx_queue_front_send.c ****                 thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 310              		.loc 1 334 0
 311 00fe 6D67     		str	r5, [r5, #116]
 312              	.L18:
 335:ThreadX/common/src/tx_queue_front_send.c ****             }
 336:ThreadX/common/src/tx_queue_front_send.c ****             else
 337:ThreadX/common/src/tx_queue_front_send.c ****             {
 338:ThreadX/common/src/tx_queue_front_send.c **** 
 339:ThreadX/common/src/tx_queue_front_send.c ****                 /* This list is not NULL, add current thread to the end. */
 340:ThreadX/common/src/tx_queue_front_send.c ****                 next_thread =                                   queue_ptr -> tx_queue_suspension_li
 341:ThreadX/common/src/tx_queue_front_send.c ****                 thread_ptr -> tx_thread_suspended_next =        next_thread;
 342:ThreadX/common/src/tx_queue_front_send.c ****                 previous_thread =                               next_thread -> tx_thread_suspended_
 343:ThreadX/common/src/tx_queue_front_send.c ****                 thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 344:ThreadX/common/src/tx_queue_front_send.c ****                 previous_thread -> tx_thread_suspended_next =   thread_ptr;
 345:ThreadX/common/src/tx_queue_front_send.c ****                 next_thread -> tx_thread_suspended_previous =   thread_ptr;
 346:ThreadX/common/src/tx_queue_front_send.c **** 
 347:ThreadX/common/src/tx_queue_front_send.c ****                 /* Update the suspension list to put this thread in front, which will put
 348:ThreadX/common/src/tx_queue_front_send.c ****                    the message that was removed in the proper relative order when room is
 349:ThreadX/common/src/tx_queue_front_send.c ****                    made in the queue.  */
 350:ThreadX/common/src/tx_queue_front_send.c ****                 queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 351:ThreadX/common/src/tx_queue_front_send.c ****             }
 352:ThreadX/common/src/tx_queue_front_send.c **** 
 353:ThreadX/common/src/tx_queue_front_send.c ****             /* Increment the suspended thread count.  */
 354:ThreadX/common/src/tx_queue_front_send.c ****             queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 313              		.loc 1 354 0
 314 0100 0133     		adds	r3, r3, #1
 315              	.LVL52:
ARM GAS  /tmp/ccAi6a4T.s 			page 23


 316 0102 E362     		str	r3, [r4, #44]
 355:ThreadX/common/src/tx_queue_front_send.c **** 
 356:ThreadX/common/src/tx_queue_front_send.c ****             /* Set the state to suspended.  */
 357:ThreadX/common/src/tx_queue_front_send.c ****             thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 317              		.loc 1 357 0
 318 0104 0523     		movs	r3, #5
 319              	.LVL53:
 320 0106 2B63     		str	r3, [r5, #48]
 321              	.LVL54:
 358:ThreadX/common/src/tx_queue_front_send.c **** 
 359:ThreadX/common/src/tx_queue_front_send.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
 360:ThreadX/common/src/tx_queue_front_send.c **** 
 361:ThreadX/common/src/tx_queue_front_send.c ****             /* Pickup the notify callback routine for this queue.  */
 362:ThreadX/common/src/tx_queue_front_send.c ****             queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 322              		.loc 1 362 0
 323 0108 A76B     		ldr	r7, [r4, #56]
 324              	.LVL55:
 363:ThreadX/common/src/tx_queue_front_send.c **** #endif
 364:ThreadX/common/src/tx_queue_front_send.c **** 
 365:ThreadX/common/src/tx_queue_front_send.c **** #ifdef TX_NOT_INTERRUPTABLE
 366:ThreadX/common/src/tx_queue_front_send.c **** 
 367:ThreadX/common/src/tx_queue_front_send.c ****             /* Call actual non-interruptable thread suspension routine.  */
 368:ThreadX/common/src/tx_queue_front_send.c ****             _tx_thread_system_ni_suspend(thread_ptr, wait_option);
 369:ThreadX/common/src/tx_queue_front_send.c **** 
 370:ThreadX/common/src/tx_queue_front_send.c ****             /* Restore interrupts.  */
 371:ThreadX/common/src/tx_queue_front_send.c ****             TX_RESTORE
 372:ThreadX/common/src/tx_queue_front_send.c **** #else
 373:ThreadX/common/src/tx_queue_front_send.c **** 
 374:ThreadX/common/src/tx_queue_front_send.c ****             /* Set the suspending flag.  */
 375:ThreadX/common/src/tx_queue_front_send.c ****             thread_ptr -> tx_thread_suspending =  TX_TRUE;
 325              		.loc 1 375 0
 326 010a 0123     		movs	r3, #1
 327 010c AB63     		str	r3, [r5, #56]
 376:ThreadX/common/src/tx_queue_front_send.c **** 
 377:ThreadX/common/src/tx_queue_front_send.c ****             /* Setup the timeout period.  */
 378:ThreadX/common/src/tx_queue_front_send.c ****             thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 328              		.loc 1 378 0
 329 010e EA64     		str	r2, [r5, #76]
 379:ThreadX/common/src/tx_queue_front_send.c **** 
 380:ThreadX/common/src/tx_queue_front_send.c ****             /* Temporarily disable preemption.  */
 381:ThreadX/common/src/tx_queue_front_send.c ****             _tx_thread_preempt_disable++;
 330              		.loc 1 381 0
 331 0110 124A     		ldr	r2, .L25
 332              	.LVL56:
 333 0112 1368     		ldr	r3, [r2]
 334 0114 0133     		adds	r3, r3, #1
 335 0116 1360     		str	r3, [r2]
 336              	.LVL57:
 337              	.LBB26:
 338              	.LBB27:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 339              		.loc 2 562 0
 340              		.syntax unified
 341              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 342 0118 86F31088 		MSR  PRIMASK,r6
 343              	@ 0 "" 2
 344              	.LVL58:
ARM GAS  /tmp/ccAi6a4T.s 			page 24


 345              		.thumb
 346              		.syntax unified
 347              	.LBE27:
 348              	.LBE26:
 382:ThreadX/common/src/tx_queue_front_send.c **** 
 383:ThreadX/common/src/tx_queue_front_send.c ****             /* Restore interrupts.  */
 384:ThreadX/common/src/tx_queue_front_send.c ****             TX_RESTORE
 385:ThreadX/common/src/tx_queue_front_send.c **** 
 386:ThreadX/common/src/tx_queue_front_send.c ****             /* Call actual thread suspension routine.  */
 387:ThreadX/common/src/tx_queue_front_send.c ****             _tx_thread_system_suspend(thread_ptr);
 349              		.loc 1 387 0
 350 011c 2846     		mov	r0, r5
 351 011e FFF7FEFF 		bl	_tx_thread_system_suspend
 352              	.LVL59:
 388:ThreadX/common/src/tx_queue_front_send.c **** #endif
 389:ThreadX/common/src/tx_queue_front_send.c **** 
 390:ThreadX/common/src/tx_queue_front_send.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
 391:ThreadX/common/src/tx_queue_front_send.c **** 
 392:ThreadX/common/src/tx_queue_front_send.c ****             /* Determine if a notify callback is required.  */
 393:ThreadX/common/src/tx_queue_front_send.c ****             if (thread_ptr -> tx_thread_suspend_status == TX_SUCCESS)
 353              		.loc 1 393 0
 354 0122 D5F88430 		ldr	r3, [r5, #132]
 355 0126 13B9     		cbnz	r3, .L19
 394:ThreadX/common/src/tx_queue_front_send.c ****             {
 395:ThreadX/common/src/tx_queue_front_send.c **** 
 396:ThreadX/common/src/tx_queue_front_send.c ****                 /* Check for a notify callback.  */
 397:ThreadX/common/src/tx_queue_front_send.c ****                 if (queue_send_notify != TX_NULL)
 356              		.loc 1 397 0
 357 0128 0FB1     		cbz	r7, .L19
 398:ThreadX/common/src/tx_queue_front_send.c ****                 {
 399:ThreadX/common/src/tx_queue_front_send.c **** 
 400:ThreadX/common/src/tx_queue_front_send.c ****                     /* Call application queue send notification.  */
 401:ThreadX/common/src/tx_queue_front_send.c ****                     (queue_send_notify)(queue_ptr);
 358              		.loc 1 401 0
 359 012a 2046     		mov	r0, r4
 360 012c B847     		blx	r7
 361              	.LVL60:
 362              	.L19:
 402:ThreadX/common/src/tx_queue_front_send.c ****                 }
 403:ThreadX/common/src/tx_queue_front_send.c ****             }
 404:ThreadX/common/src/tx_queue_front_send.c **** #endif
 405:ThreadX/common/src/tx_queue_front_send.c **** 
 406:ThreadX/common/src/tx_queue_front_send.c ****             /* Return the completion status.  */
 407:ThreadX/common/src/tx_queue_front_send.c ****             status =  thread_ptr -> tx_thread_suspend_status;
 363              		.loc 1 407 0
 364 012e D5F88400 		ldr	r0, [r5, #132]
 365              	.LVL61:
 366              	.L1:
 408:ThreadX/common/src/tx_queue_front_send.c ****         }
 409:ThreadX/common/src/tx_queue_front_send.c ****     }
 410:ThreadX/common/src/tx_queue_front_send.c ****     else
 411:ThreadX/common/src/tx_queue_front_send.c ****     {
 412:ThreadX/common/src/tx_queue_front_send.c **** 
 413:ThreadX/common/src/tx_queue_front_send.c ****         /* Restore interrupts.  */
 414:ThreadX/common/src/tx_queue_front_send.c ****         TX_RESTORE
 415:ThreadX/common/src/tx_queue_front_send.c **** 
 416:ThreadX/common/src/tx_queue_front_send.c ****         /* No room in queue and no suspension requested, return error completion.  */
ARM GAS  /tmp/ccAi6a4T.s 			page 25


 417:ThreadX/common/src/tx_queue_front_send.c ****         status =  TX_QUEUE_FULL;
 418:ThreadX/common/src/tx_queue_front_send.c ****     }
 419:ThreadX/common/src/tx_queue_front_send.c **** 
 420:ThreadX/common/src/tx_queue_front_send.c ****     /* Return completion status.  */
 421:ThreadX/common/src/tx_queue_front_send.c ****     return(status);
 422:ThreadX/common/src/tx_queue_front_send.c **** }
 367              		.loc 1 422 0
 368 0132 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 369              	.LVL62:
 370              	.L24:
 371              	.LBB28:
 372              	.LBB29:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 373              		.loc 2 562 0
 374              		.syntax unified
 375              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 376 0134 86F31088 		MSR  PRIMASK,r6
 377              	@ 0 "" 2
 378              	.LVL63:
 379              		.thumb
 380              		.syntax unified
 381              	.LBE29:
 382              	.LBE28:
 295:ThreadX/common/src/tx_queue_front_send.c ****         }
 383              		.loc 1 295 0
 384 0138 0B20     		movs	r0, #11
 385 013a FAE7     		b	.L1
 386              	.LVL64:
 387              	.L17:
 340:ThreadX/common/src/tx_queue_front_send.c ****                 thread_ptr -> tx_thread_suspended_next =        next_thread;
 388              		.loc 1 340 0
 389 013c A16A     		ldr	r1, [r4, #40]
 390              	.LVL65:
 341:ThreadX/common/src/tx_queue_front_send.c ****                 previous_thread =                               next_thread -> tx_thread_suspended_
 391              		.loc 1 341 0
 392 013e 2967     		str	r1, [r5, #112]
 342:ThreadX/common/src/tx_queue_front_send.c ****                 thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 393              		.loc 1 342 0
 394 0140 486F     		ldr	r0, [r1, #116]
 395              	.LVL66:
 343:ThreadX/common/src/tx_queue_front_send.c ****                 previous_thread -> tx_thread_suspended_next =   thread_ptr;
 396              		.loc 1 343 0
 397 0142 6867     		str	r0, [r5, #116]
 344:ThreadX/common/src/tx_queue_front_send.c ****                 next_thread -> tx_thread_suspended_previous =   thread_ptr;
 398              		.loc 1 344 0
 399 0144 0567     		str	r5, [r0, #112]
 400              	.LVL67:
 345:ThreadX/common/src/tx_queue_front_send.c **** 
 401              		.loc 1 345 0
 402 0146 4D67     		str	r5, [r1, #116]
 350:ThreadX/common/src/tx_queue_front_send.c ****             }
 403              		.loc 1 350 0
 404 0148 A562     		str	r5, [r4, #40]
 405 014a D9E7     		b	.L18
 406              	.LVL68:
 407              	.L15:
 408              	.LBB30:
ARM GAS  /tmp/ccAi6a4T.s 			page 26


 409              	.LBB31:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 410              		.loc 2 562 0
 411              		.syntax unified
 412              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 413 014c 86F31088 		MSR  PRIMASK,r6
 414              	@ 0 "" 2
 415              	.LVL69:
 416              		.thumb
 417              		.syntax unified
 418              	.LBE31:
 419              	.LBE30:
 417:ThreadX/common/src/tx_queue_front_send.c ****     }
 420              		.loc 1 417 0
 421 0150 0B20     		movs	r0, #11
 422 0152 EEE7     		b	.L1
 423              	.LVL70:
 424              	.L20:
  99:ThreadX/common/src/tx_queue_front_send.c **** 
 425              		.loc 1 99 0
 426 0154 0020     		movs	r0, #0
 427              	.LVL71:
 428 0156 ECE7     		b	.L1
 429              	.LVL72:
 430              	.L21:
 431 0158 0020     		movs	r0, #0
 421:ThreadX/common/src/tx_queue_front_send.c **** }
 432              		.loc 1 421 0
 433 015a EAE7     		b	.L1
 434              	.L26:
 435              		.align	2
 436              	.L25:
 437 015c 00000000 		.word	_tx_thread_preempt_disable
 438 0160 00000000 		.word	_tx_thread_current_ptr
 439 0164 00000000 		.word	_tx_queue_cleanup
 440              		.cfi_endproc
 441              	.LFE8:
 443              		.text
 444              	.Letext0:
 445              		.file 3 "/usr/include/newlib/sys/lock.h"
 446              		.file 4 "/usr/include/newlib/sys/_types.h"
 447              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 448              		.file 6 "/usr/include/newlib/sys/reent.h"
 449              		.file 7 "/usr/include/newlib/stdlib.h"
 450              		.file 8 "ThreadX/common/inc/tx_api.h"
 451              		.file 9 "ThreadX/common/inc/tx_thread.h"
 452              		.file 10 "ThreadX/common/inc/tx_queue.h"
ARM GAS  /tmp/ccAi6a4T.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_queue_front_send.c
     /tmp/ccAi6a4T.s:18     .text._tx_queue_front_send:0000000000000000 $t
     /tmp/ccAi6a4T.s:25     .text._tx_queue_front_send:0000000000000000 _tx_queue_front_send
     /tmp/ccAi6a4T.s:437    .text._tx_queue_front_send:000000000000015c $d

UNDEFINED SYMBOLS
_tx_thread_system_resume
_tx_thread_system_suspend
_tx_thread_preempt_disable
_tx_thread_current_ptr
_tx_queue_cleanup
