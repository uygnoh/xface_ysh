ARM GAS  /tmp/cc4j9gNh.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_byte_pool_performance_info_get.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_byte_pool_performance_info_get,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_byte_pool_performance_info_get
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_byte_pool_performance_info_get:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_byte_pool_performance_info_get.c"
   1:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
   3:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
   5:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  10:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
  12:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
  13:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /**                                                                       */
  16:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /**                                                                       */
  18:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /**   Byte Memory                                                         */
  19:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /**                                                                       */
  20:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
  23:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
  25:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
  26:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
  28:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** #include "tx_byte_pool.h"
  30:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** #ifdef TX_BYTE_POOL_ENABLE_PERFORMANCE_INFO
  31:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** #include "tx_trace.h"
ARM GAS  /tmp/cc4j9gNh.s 			page 2


  32:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** #endif
  33:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
  34:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
  35:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /**************************************************************************/
  36:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  37:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*  FUNCTION                                               RELEASE        */
  38:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  39:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    _tx_byte_pool_performance_info_get                  PORTABLE C      */
  40:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                           6.1          */
  41:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*  AUTHOR                                                                */
  42:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  43:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    William E. Lamie, Microsoft Corporation                             */
  44:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  45:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*  DESCRIPTION                                                           */
  46:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  47:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    This function retrieves performance information from the specified  */
  48:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    byte pool.                                                          */
  49:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  50:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*  INPUT                                                                 */
  51:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  52:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    pool_ptr                          Pointer to byte pool control block*/
  53:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    allocates                         Destination for number of         */
  54:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                        allocates on this pool          */
  55:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    releases                          Destination for number of         */
  56:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                        releases on this pool           */
  57:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    fragments_searched                Destination for number of         */
  58:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                        fragments searched during       */
  59:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                        allocation                      */
  60:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    merges                            Destination for number of adjacent*/
  61:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                        free fragments merged           */
  62:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    splits                            Destination for number of         */
  63:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                        fragments split during          */
  64:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                        allocation                      */
  65:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    suspensions                       Destination for number of         */
  66:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                        suspensions on this pool        */
  67:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    timeouts                          Destination for number of timeouts*/
  68:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                        on this byte pool               */
  69:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  70:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*  OUTPUT                                                                */
  71:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  72:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    status                            Completion status                 */
  73:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  74:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*  CALLS                                                                 */
  75:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  76:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    None                                                                */
  77:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  78:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*  CALLED BY                                                             */
  79:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  80:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    Application Code                                                    */
  81:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  82:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*  RELEASE HISTORY                                                       */
  83:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  84:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*    DATE              NAME                      DESCRIPTION             */
  85:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  86:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  87:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  88:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                            resulting in version 6.1    */
ARM GAS  /tmp/cc4j9gNh.s 			page 3


  89:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /*                                                                        */
  90:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** /**************************************************************************/
  91:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** UINT  _tx_byte_pool_performance_info_get(TX_BYTE_POOL *pool_ptr, ULONG *allocates, ULONG *releases,
  92:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****                     ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, UL
  93:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** {
  28              		.loc 1 93 0
  29              		.cfi_startproc
  30              		@ args = 16, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  94:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
  95:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** #ifdef TX_BYTE_POOL_ENABLE_PERFORMANCE_INFO
  96:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
  97:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** TX_INTERRUPT_SAVE_AREA
  98:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
  99:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** UINT        status;
 100:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 101:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 102:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     /* Determine if this is a legal request.  */
 103:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     if (pool_ptr == TX_NULL)
 104:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     {
 105:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 106:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Byte pool pointer is illegal, return error.  */
 107:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         status =  TX_PTR_ERROR;
 108:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     }
 109:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 110:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     /* Determine if the pool ID is invalid.  */
 111:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     else if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 112:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     {
 113:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 114:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Byte pool pointer is illegal, return error.  */
 115:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         status =  TX_PTR_ERROR;
 116:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     }
 117:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     else
 118:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     {
 119:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 120:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Disable interrupts.  */
 121:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         TX_DISABLE
 122:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 123:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* If trace is enabled, insert this event into the trace buffer.  */
 124:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_PERFORMANCE_INFO_GET, pool_ptr, 0, 0, 0, TX_TRAC
 125:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 126:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Log this kernel call.  */
 127:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         TX_EL_BYTE_POOL_PERFORMANCE_INFO_GET_INSERT
 128:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 129:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Retrieve all the pertinent information and return it in the supplied
 130:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****            destinations.  */
 131:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 132:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Retrieve the number of allocates on this byte pool.  */
 133:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         if (allocates != TX_NULL)
 134:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         {
 135:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 136:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****             *allocates =  pool_ptr -> tx_byte_pool_performance_allocate_count;
 137:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         }
 138:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 139:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Retrieve the number of releases on this byte pool.  */
ARM GAS  /tmp/cc4j9gNh.s 			page 4


 140:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         if (releases != TX_NULL)
 141:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         {
 142:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 143:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****             *releases =  pool_ptr -> tx_byte_pool_performance_release_count;
 144:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         }
 145:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 146:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Retrieve the number of fragments searched in this byte pool.  */
 147:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         if (fragments_searched != TX_NULL)
 148:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         {
 149:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 150:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****             *fragments_searched =  pool_ptr -> tx_byte_pool_performance_search_count;
 151:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         }
 152:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 153:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Retrieve the number of fragments merged on this byte pool.  */
 154:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         if (merges != TX_NULL)
 155:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         {
 156:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 157:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****             *merges =  pool_ptr -> tx_byte_pool_performance_merge_count;
 158:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         }
 159:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 160:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Retrieve the number of fragment splits on this byte pool.  */
 161:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         if (splits != TX_NULL)
 162:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         {
 163:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 164:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****             *splits =  pool_ptr -> tx_byte_pool_performance_split_count;
 165:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         }
 166:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 167:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Retrieve the number of suspensions on this byte pool.  */
 168:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         if (suspensions != TX_NULL)
 169:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         {
 170:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 171:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****             *suspensions =  pool_ptr -> tx_byte_pool_performance_suspension_count;
 172:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         }
 173:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 174:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Retrieve the number of timeouts on this byte pool.  */
 175:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         if (timeouts != TX_NULL)
 176:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         {
 177:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 178:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****             *timeouts =  pool_ptr -> tx_byte_pool_performance_timeout_count;
 179:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         }
 180:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 181:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Restore interrupts.  */
 182:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         TX_RESTORE
 183:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 184:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Return completion status.  */
 185:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         status =  TX_SUCCESS;
 186:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     }
 187:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 188:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     /* Return completion status.  */
 189:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     return(status);
 190:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** #else
 191:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 192:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** UINT        status;
 193:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 194:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 195:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     /* Access input arguments just for the sake of lint, MISRA, etc.  */
 196:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     if (pool_ptr != TX_NULL)
ARM GAS  /tmp/cc4j9gNh.s 			page 5


 197:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     {
 198:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 199:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Not enabled, return error.  */
 200:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 201:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     }
 202:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     else if (allocates != TX_NULL)
 203:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     {
 204:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 205:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Not enabled, return error.  */
 206:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 207:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     }
 208:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     else if (releases != TX_NULL)
 209:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     {
 210:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 211:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Not enabled, return error.  */
 212:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 213:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     }
 214:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     else if (fragments_searched != TX_NULL)
 215:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     {
 216:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 217:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Not enabled, return error.  */
 218:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 219:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     }
 220:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     else if (merges != TX_NULL)
 221:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     {
 222:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 223:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Not enabled, return error.  */
 224:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 225:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     }
 226:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     else if (splits != TX_NULL)
 227:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     {
 228:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 229:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Not enabled, return error.  */
 230:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 231:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     }
 232:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     else if (suspensions != TX_NULL)
 233:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     {
 234:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 235:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Not enabled, return error.  */
 236:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 237:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     }
 238:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     else if (timeouts != TX_NULL)
 239:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     {
 240:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 241:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Not enabled, return error.  */
 242:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 243:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     }
 244:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     else
 245:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     {
 246:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 247:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         /* Not enabled, return error.  */
 248:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****         status =  TX_FEATURE_NOT_ENABLED;
 249:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     }
 250:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** 
 251:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     /* Return completion status.  */
 252:ThreadX/common/src/tx_byte_pool_performance_info_get.c ****     return(status);
 253:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** #endif
ARM GAS  /tmp/cc4j9gNh.s 			page 6


 254:ThreadX/common/src/tx_byte_pool_performance_info_get.c **** }
  34              		.loc 1 254 0
  35 0000 FF20     		movs	r0, #255
  36              	.LVL1:
  37 0002 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE8:
  41              		.text
  42              	.Letext0:
  43              		.file 2 "/usr/include/newlib/sys/lock.h"
  44              		.file 3 "/usr/include/newlib/sys/_types.h"
  45              		.file 4 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
  46              		.file 5 "/usr/include/newlib/sys/reent.h"
  47              		.file 6 "/usr/include/newlib/stdlib.h"
  48              		.file 7 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
  49              		.file 8 "ThreadX/common/inc/tx_api.h"
  50              		.file 9 "ThreadX/common/inc/tx_byte_pool.h"
ARM GAS  /tmp/cc4j9gNh.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_byte_pool_performance_info_get.c
     /tmp/cc4j9gNh.s:18     .text._tx_byte_pool_performance_info_get:0000000000000000 $t
     /tmp/cc4j9gNh.s:25     .text._tx_byte_pool_performance_info_get:0000000000000000 _tx_byte_pool_performance_info_get

NO UNDEFINED SYMBOLS
