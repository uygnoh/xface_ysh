ARM GAS  /tmp/cc8eVtys.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"txe_thread_info_get.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._txe_thread_info_get,"ax",%progbits
  18              		.align	1
  19              		.global	_txe_thread_info_get
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_txe_thread_info_get:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/txe_thread_info_get.c"
   1:ThreadX/common/src/txe_thread_info_get.c **** /**************************************************************************/
   2:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
   3:ThreadX/common/src/txe_thread_info_get.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
   5:ThreadX/common/src/txe_thread_info_get.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/txe_thread_info_get.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/txe_thread_info_get.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/txe_thread_info_get.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  10:ThreadX/common/src/txe_thread_info_get.c **** /**************************************************************************/
  11:ThreadX/common/src/txe_thread_info_get.c **** 
  12:ThreadX/common/src/txe_thread_info_get.c **** 
  13:ThreadX/common/src/txe_thread_info_get.c **** /**************************************************************************/
  14:ThreadX/common/src/txe_thread_info_get.c **** /**************************************************************************/
  15:ThreadX/common/src/txe_thread_info_get.c **** /**                                                                       */
  16:ThreadX/common/src/txe_thread_info_get.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/txe_thread_info_get.c **** /**                                                                       */
  18:ThreadX/common/src/txe_thread_info_get.c **** /**   Thread                                                              */
  19:ThreadX/common/src/txe_thread_info_get.c **** /**                                                                       */
  20:ThreadX/common/src/txe_thread_info_get.c **** /**************************************************************************/
  21:ThreadX/common/src/txe_thread_info_get.c **** /**************************************************************************/
  22:ThreadX/common/src/txe_thread_info_get.c **** 
  23:ThreadX/common/src/txe_thread_info_get.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/txe_thread_info_get.c **** 
  25:ThreadX/common/src/txe_thread_info_get.c **** 
  26:ThreadX/common/src/txe_thread_info_get.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/txe_thread_info_get.c **** 
  28:ThreadX/common/src/txe_thread_info_get.c **** #include "tx_api.h"
  29:ThreadX/common/src/txe_thread_info_get.c **** #include "tx_thread.h"
  30:ThreadX/common/src/txe_thread_info_get.c **** 
  31:ThreadX/common/src/txe_thread_info_get.c **** 
ARM GAS  /tmp/cc8eVtys.s 			page 2


  32:ThreadX/common/src/txe_thread_info_get.c **** /**************************************************************************/
  33:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  34:ThreadX/common/src/txe_thread_info_get.c **** /*  FUNCTION                                               RELEASE        */
  35:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  36:ThreadX/common/src/txe_thread_info_get.c **** /*    _txe_thread_info_get                                PORTABLE C      */
  37:ThreadX/common/src/txe_thread_info_get.c **** /*                                                           6.1          */
  38:ThreadX/common/src/txe_thread_info_get.c **** /*  AUTHOR                                                                */
  39:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  40:ThreadX/common/src/txe_thread_info_get.c **** /*    William E. Lamie, Microsoft Corporation                             */
  41:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  42:ThreadX/common/src/txe_thread_info_get.c **** /*  DESCRIPTION                                                           */
  43:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  44:ThreadX/common/src/txe_thread_info_get.c **** /*    This function checks for errors in the thread information get       */
  45:ThreadX/common/src/txe_thread_info_get.c **** /*    service.                                                            */
  46:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  47:ThreadX/common/src/txe_thread_info_get.c **** /*  INPUT                                                                 */
  48:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  49:ThreadX/common/src/txe_thread_info_get.c **** /*    thread_ptr                        Pointer to thread control block   */
  50:ThreadX/common/src/txe_thread_info_get.c **** /*    name                              Destination for the thread name   */
  51:ThreadX/common/src/txe_thread_info_get.c **** /*    state                             Destination for thread state      */
  52:ThreadX/common/src/txe_thread_info_get.c **** /*    run_count                         Destination for thread run count  */
  53:ThreadX/common/src/txe_thread_info_get.c **** /*    priority                          Destination for thread priority   */
  54:ThreadX/common/src/txe_thread_info_get.c **** /*    preemption_threshold              Destination for thread preemption-*/
  55:ThreadX/common/src/txe_thread_info_get.c **** /*                                        threshold                       */
  56:ThreadX/common/src/txe_thread_info_get.c **** /*    time_slice                        Destination for thread time-slice */
  57:ThreadX/common/src/txe_thread_info_get.c **** /*    next_thread                       Destination for next created      */
  58:ThreadX/common/src/txe_thread_info_get.c **** /*                                        thread                          */
  59:ThreadX/common/src/txe_thread_info_get.c **** /*    next_suspended_thread             Destination for next suspended    */
  60:ThreadX/common/src/txe_thread_info_get.c **** /*                                        thread                          */
  61:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  62:ThreadX/common/src/txe_thread_info_get.c **** /*  OUTPUT                                                                */
  63:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  64:ThreadX/common/src/txe_thread_info_get.c **** /*    TX_THREAD_ERROR                   Invalid thread pointer            */
  65:ThreadX/common/src/txe_thread_info_get.c **** /*    status                            Completion status                 */
  66:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  67:ThreadX/common/src/txe_thread_info_get.c **** /*  CALLS                                                                 */
  68:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  69:ThreadX/common/src/txe_thread_info_get.c **** /*    _tx_thread_info_get               Actual thread information get     */
  70:ThreadX/common/src/txe_thread_info_get.c **** /*                                        service                         */
  71:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  72:ThreadX/common/src/txe_thread_info_get.c **** /*  CALLED BY                                                             */
  73:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  74:ThreadX/common/src/txe_thread_info_get.c **** /*    Application Code                                                    */
  75:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  76:ThreadX/common/src/txe_thread_info_get.c **** /*  RELEASE HISTORY                                                       */
  77:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  78:ThreadX/common/src/txe_thread_info_get.c **** /*    DATE              NAME                      DESCRIPTION             */
  79:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  80:ThreadX/common/src/txe_thread_info_get.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  81:ThreadX/common/src/txe_thread_info_get.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  82:ThreadX/common/src/txe_thread_info_get.c **** /*                                            resulting in version 6.1    */
  83:ThreadX/common/src/txe_thread_info_get.c **** /*                                                                        */
  84:ThreadX/common/src/txe_thread_info_get.c **** /**************************************************************************/
  85:ThreadX/common/src/txe_thread_info_get.c **** UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
  86:ThreadX/common/src/txe_thread_info_get.c ****                 UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
  87:ThreadX/common/src/txe_thread_info_get.c ****                 TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
  88:ThreadX/common/src/txe_thread_info_get.c **** {
ARM GAS  /tmp/cc8eVtys.s 			page 3


  28              		.loc 1 88 0
  29              		.cfi_startproc
  30              		@ args = 20, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  89:ThreadX/common/src/txe_thread_info_get.c **** 
  90:ThreadX/common/src/txe_thread_info_get.c **** UINT    status;
  91:ThreadX/common/src/txe_thread_info_get.c **** 
  92:ThreadX/common/src/txe_thread_info_get.c **** 
  93:ThreadX/common/src/txe_thread_info_get.c ****     /* Check for an invalid thread pointer.  */
  94:ThreadX/common/src/txe_thread_info_get.c ****     if (thread_ptr == TX_NULL)
  33              		.loc 1 94 0
  34 0000 B8B1     		cbz	r0, .L3
  88:ThreadX/common/src/txe_thread_info_get.c **** 
  35              		.loc 1 88 0
  36 0002 30B5     		push	{r4, r5, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 12
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 5, -8
  41              		.cfi_offset 14, -4
  42 0004 87B0     		sub	sp, sp, #28
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 40
  45 0006 0446     		mov	r4, r0
  95:ThreadX/common/src/txe_thread_info_get.c ****     {
  96:ThreadX/common/src/txe_thread_info_get.c **** 
  97:ThreadX/common/src/txe_thread_info_get.c ****         /* Thread pointer is invalid, return appropriate error code.  */
  98:ThreadX/common/src/txe_thread_info_get.c ****         status =  TX_THREAD_ERROR;
  99:ThreadX/common/src/txe_thread_info_get.c ****     }
 100:ThreadX/common/src/txe_thread_info_get.c **** 
 101:ThreadX/common/src/txe_thread_info_get.c ****     /* Now check for invalid thread ID.  */
 102:ThreadX/common/src/txe_thread_info_get.c ****     else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
  46              		.loc 1 102 0
  47 0008 0568     		ldr	r5, [r0]
  48 000a 0B48     		ldr	r0, .L10
  49              	.LVL1:
  50 000c 8542     		cmp	r5, r0
  51 000e 02D0     		beq	.L9
 103:ThreadX/common/src/txe_thread_info_get.c ****     {
 104:ThreadX/common/src/txe_thread_info_get.c **** 
 105:ThreadX/common/src/txe_thread_info_get.c ****         /* Thread pointer is invalid, return appropriate error code.  */
 106:ThreadX/common/src/txe_thread_info_get.c ****         status =  TX_THREAD_ERROR;
  52              		.loc 1 106 0
  53 0010 0E20     		movs	r0, #14
  54              	.LVL2:
  55              	.L1:
 107:ThreadX/common/src/txe_thread_info_get.c ****     }
 108:ThreadX/common/src/txe_thread_info_get.c ****     else
 109:ThreadX/common/src/txe_thread_info_get.c ****     {
 110:ThreadX/common/src/txe_thread_info_get.c **** 
 111:ThreadX/common/src/txe_thread_info_get.c ****         /* Call the actual thread information get service.  */
 112:ThreadX/common/src/txe_thread_info_get.c ****         status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_thre
 113:ThreadX/common/src/txe_thread_info_get.c ****                             time_slice, next_thread, next_suspended_thread);
 114:ThreadX/common/src/txe_thread_info_get.c ****     }
 115:ThreadX/common/src/txe_thread_info_get.c **** 
 116:ThreadX/common/src/txe_thread_info_get.c ****     /* Return completion status.  */
ARM GAS  /tmp/cc8eVtys.s 			page 4


 117:ThreadX/common/src/txe_thread_info_get.c ****     return(status);
 118:ThreadX/common/src/txe_thread_info_get.c **** }
  56              		.loc 1 118 0
  57 0012 07B0     		add	sp, sp, #28
  58              	.LCFI2:
  59              		.cfi_remember_state
  60              		.cfi_def_cfa_offset 12
  61              		@ sp needed
  62 0014 30BD     		pop	{r4, r5, pc}
  63              	.LVL3:
  64              	.L9:
  65              	.LCFI3:
  66              		.cfi_restore_state
  67 0016 2046     		mov	r0, r4
 112:ThreadX/common/src/txe_thread_info_get.c ****                             time_slice, next_thread, next_suspended_thread);
  68              		.loc 1 112 0
  69 0018 0E9C     		ldr	r4, [sp, #56]
  70              	.LVL4:
  71 001a 0494     		str	r4, [sp, #16]
  72 001c 0D9C     		ldr	r4, [sp, #52]
  73 001e 0394     		str	r4, [sp, #12]
  74 0020 0C9C     		ldr	r4, [sp, #48]
  75 0022 0294     		str	r4, [sp, #8]
  76 0024 0B9C     		ldr	r4, [sp, #44]
  77 0026 0194     		str	r4, [sp, #4]
  78 0028 0A9C     		ldr	r4, [sp, #40]
  79 002a 0094     		str	r4, [sp]
  80 002c FFF7FEFF 		bl	_tx_thread_info_get
  81              	.LVL5:
  82 0030 EFE7     		b	.L1
  83              	.LVL6:
  84              	.L3:
  85              	.LCFI4:
  86              		.cfi_def_cfa_offset 0
  87              		.cfi_restore 4
  88              		.cfi_restore 5
  89              		.cfi_restore 14
  98:ThreadX/common/src/txe_thread_info_get.c ****     }
  90              		.loc 1 98 0
  91 0032 0E20     		movs	r0, #14
  92              	.LVL7:
  93              		.loc 1 118 0
  94 0034 7047     		bx	lr
  95              	.L11:
  96 0036 00BF     		.align	2
  97              	.L10:
  98 0038 44524854 		.word	1414025796
  99              		.cfi_endproc
 100              	.LFE8:
 102              		.text
 103              	.Letext0:
 104              		.file 2 "/usr/include/newlib/sys/lock.h"
 105              		.file 3 "/usr/include/newlib/sys/_types.h"
 106              		.file 4 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 107              		.file 5 "/usr/include/newlib/sys/reent.h"
 108              		.file 6 "/usr/include/newlib/stdlib.h"
 109              		.file 7 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
ARM GAS  /tmp/cc8eVtys.s 			page 5


 110              		.file 8 "ThreadX/common/inc/tx_api.h"
 111              		.file 9 "ThreadX/common/inc/tx_thread.h"
ARM GAS  /tmp/cc8eVtys.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 txe_thread_info_get.c
     /tmp/cc8eVtys.s:18     .text._txe_thread_info_get:0000000000000000 $t
     /tmp/cc8eVtys.s:25     .text._txe_thread_info_get:0000000000000000 _txe_thread_info_get
     /tmp/cc8eVtys.s:98     .text._txe_thread_info_get:0000000000000038 $d

UNDEFINED SYMBOLS
_tx_thread_info_get
