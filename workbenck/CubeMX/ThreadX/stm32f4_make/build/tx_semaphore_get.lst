ARM GAS  /tmp/ccuY2Gga.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_semaphore_get.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_semaphore_get,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_semaphore_get
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_semaphore_get:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_semaphore_get.c"
   1:ThreadX/common/src/tx_semaphore_get.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
   3:ThreadX/common/src/tx_semaphore_get.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
   5:ThreadX/common/src/tx_semaphore_get.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_semaphore_get.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_semaphore_get.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_semaphore_get.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  10:ThreadX/common/src/tx_semaphore_get.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_semaphore_get.c **** 
  12:ThreadX/common/src/tx_semaphore_get.c **** 
  13:ThreadX/common/src/tx_semaphore_get.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_semaphore_get.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_semaphore_get.c **** /**                                                                       */
  16:ThreadX/common/src/tx_semaphore_get.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_semaphore_get.c **** /**                                                                       */
  18:ThreadX/common/src/tx_semaphore_get.c **** /**   Semaphore                                                           */
  19:ThreadX/common/src/tx_semaphore_get.c **** /**                                                                       */
  20:ThreadX/common/src/tx_semaphore_get.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_semaphore_get.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_semaphore_get.c **** 
  23:ThreadX/common/src/tx_semaphore_get.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_semaphore_get.c **** 
  25:ThreadX/common/src/tx_semaphore_get.c **** 
  26:ThreadX/common/src/tx_semaphore_get.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_semaphore_get.c **** 
  28:ThreadX/common/src/tx_semaphore_get.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_semaphore_get.c **** #include "tx_trace.h"
  30:ThreadX/common/src/tx_semaphore_get.c **** #include "tx_thread.h"
  31:ThreadX/common/src/tx_semaphore_get.c **** #include "tx_semaphore.h"
ARM GAS  /tmp/ccuY2Gga.s 			page 2


  32:ThreadX/common/src/tx_semaphore_get.c **** 
  33:ThreadX/common/src/tx_semaphore_get.c **** 
  34:ThreadX/common/src/tx_semaphore_get.c **** /**************************************************************************/
  35:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  36:ThreadX/common/src/tx_semaphore_get.c **** /*  FUNCTION                                               RELEASE        */
  37:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  38:ThreadX/common/src/tx_semaphore_get.c **** /*    _tx_semaphore_get                                   PORTABLE C      */
  39:ThreadX/common/src/tx_semaphore_get.c **** /*                                                           6.1          */
  40:ThreadX/common/src/tx_semaphore_get.c **** /*  AUTHOR                                                                */
  41:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  42:ThreadX/common/src/tx_semaphore_get.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  44:ThreadX/common/src/tx_semaphore_get.c **** /*  DESCRIPTION                                                           */
  45:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  46:ThreadX/common/src/tx_semaphore_get.c **** /*    This function gets an instance from the specified counting          */
  47:ThreadX/common/src/tx_semaphore_get.c **** /*    semaphore.                                                          */
  48:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  49:ThreadX/common/src/tx_semaphore_get.c **** /*  INPUT                                                                 */
  50:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  51:ThreadX/common/src/tx_semaphore_get.c **** /*    semaphore_ptr                     Pointer to semaphore control block*/
  52:ThreadX/common/src/tx_semaphore_get.c **** /*    wait_option                       Suspension option                 */
  53:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  54:ThreadX/common/src/tx_semaphore_get.c **** /*  OUTPUT                                                                */
  55:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  56:ThreadX/common/src/tx_semaphore_get.c **** /*    status                            Completion status                 */
  57:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  58:ThreadX/common/src/tx_semaphore_get.c **** /*  CALLS                                                                 */
  59:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  60:ThreadX/common/src/tx_semaphore_get.c **** /*    _tx_thread_system_suspend         Suspend thread service            */
  61:ThreadX/common/src/tx_semaphore_get.c **** /*    _tx_thread_system_ni_suspend      Non-interruptable suspend thread  */
  62:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  63:ThreadX/common/src/tx_semaphore_get.c **** /*  CALLED BY                                                             */
  64:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  65:ThreadX/common/src/tx_semaphore_get.c **** /*    Application Code                                                    */
  66:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  67:ThreadX/common/src/tx_semaphore_get.c **** /*  RELEASE HISTORY                                                       */
  68:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  69:ThreadX/common/src/tx_semaphore_get.c **** /*    DATE              NAME                      DESCRIPTION             */
  70:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  71:ThreadX/common/src/tx_semaphore_get.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  72:ThreadX/common/src/tx_semaphore_get.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  73:ThreadX/common/src/tx_semaphore_get.c **** /*                                            resulting in version 6.1    */
  74:ThreadX/common/src/tx_semaphore_get.c **** /*                                                                        */
  75:ThreadX/common/src/tx_semaphore_get.c **** /**************************************************************************/
  76:ThreadX/common/src/tx_semaphore_get.c **** UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
  77:ThreadX/common/src/tx_semaphore_get.c **** {
  28              		.loc 1 77 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 3, -16
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
ARM GAS  /tmp/ccuY2Gga.s 			page 3


  39              		.cfi_offset 14, -4
  40              	.LVL1:
  41              	.LBB16:
  42              	.LBB17:
  43              	.LBB18:
  44              	.LBB19:
  45              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
ARM GAS  /tmp/ccuY2Gga.s 			page 4


  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
ARM GAS  /tmp/ccuY2Gga.s 			page 5


 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
ARM GAS  /tmp/ccuY2Gga.s 			page 6


 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
ARM GAS  /tmp/ccuY2Gga.s 			page 7


 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
ARM GAS  /tmp/ccuY2Gga.s 			page 8


 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccuY2Gga.s 			page 9


 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
ARM GAS  /tmp/ccuY2Gga.s 			page 10


 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccuY2Gga.s 			page 11


 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
ARM GAS  /tmp/ccuY2Gga.s 			page 12


 507:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  46              		.loc 2 539 0
  47              		.syntax unified
  48              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  49 0002 EFF31082 		MRS  r2, PRIMASK 
  50              	@ 0 "" 2
  51              		.thumb
  52              		.syntax unified
  53              	.LBE19:
  54              	.LBE18:
 540:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/ccuY2Gga.s 			page 13


 555:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
 567:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
 569:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
 571:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  55              		.loc 2 575 0
  56              		.syntax unified
  57              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  58 0006 72B6     		CPSID i
  59              	@ 0 "" 2
  60              		.thumb
  61              		.syntax unified
  62              	.LBE17:
  63              	.LBE16:
  78:ThreadX/common/src/tx_semaphore_get.c **** 
  79:ThreadX/common/src/tx_semaphore_get.c **** TX_INTERRUPT_SAVE_AREA
  80:ThreadX/common/src/tx_semaphore_get.c **** 
  81:ThreadX/common/src/tx_semaphore_get.c **** TX_THREAD       *thread_ptr;
  82:ThreadX/common/src/tx_semaphore_get.c **** TX_THREAD       *next_thread;
  83:ThreadX/common/src/tx_semaphore_get.c **** TX_THREAD       *previous_thread;
  84:ThreadX/common/src/tx_semaphore_get.c **** UINT            status;
  85:ThreadX/common/src/tx_semaphore_get.c **** 
  86:ThreadX/common/src/tx_semaphore_get.c **** 
  87:ThreadX/common/src/tx_semaphore_get.c ****     /* Default the status to TX_SUCCESS.  */
  88:ThreadX/common/src/tx_semaphore_get.c ****     status =  TX_SUCCESS;
  89:ThreadX/common/src/tx_semaphore_get.c **** 
  90:ThreadX/common/src/tx_semaphore_get.c ****     /* Disable interrupts to get an instance from the semaphore.  */
  91:ThreadX/common/src/tx_semaphore_get.c ****     TX_DISABLE
  92:ThreadX/common/src/tx_semaphore_get.c **** 
  93:ThreadX/common/src/tx_semaphore_get.c **** #ifdef TX_SEMAPHORE_ENABLE_PERFORMANCE_INFO
  94:ThreadX/common/src/tx_semaphore_get.c **** 
  95:ThreadX/common/src/tx_semaphore_get.c ****     /* Increment the total semaphore get counter.  */
  96:ThreadX/common/src/tx_semaphore_get.c ****     _tx_semaphore_performance_get_count++;
  97:ThreadX/common/src/tx_semaphore_get.c **** 
  98:ThreadX/common/src/tx_semaphore_get.c ****     /* Increment the number of attempts to get this semaphore.  */
  99:ThreadX/common/src/tx_semaphore_get.c ****     semaphore_ptr -> tx_semaphore_performance_get_count++;
 100:ThreadX/common/src/tx_semaphore_get.c **** #endif
 101:ThreadX/common/src/tx_semaphore_get.c **** 
 102:ThreadX/common/src/tx_semaphore_get.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 103:ThreadX/common/src/tx_semaphore_get.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_GET, semaphore_ptr, wait_option, semaphore_ptr -> tx
 104:ThreadX/common/src/tx_semaphore_get.c **** 
ARM GAS  /tmp/ccuY2Gga.s 			page 14


 105:ThreadX/common/src/tx_semaphore_get.c ****     /* Log this kernel call.  */
 106:ThreadX/common/src/tx_semaphore_get.c ****     TX_EL_SEMAPHORE_GET_INSERT
 107:ThreadX/common/src/tx_semaphore_get.c **** 
 108:ThreadX/common/src/tx_semaphore_get.c ****     /* Determine if there is an instance of the semaphore.  */
 109:ThreadX/common/src/tx_semaphore_get.c ****     if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
  64              		.loc 1 109 0
  65 0008 8368     		ldr	r3, [r0, #8]
  66 000a 3BBB     		cbnz	r3, .L9
 110:ThreadX/common/src/tx_semaphore_get.c ****     {
 111:ThreadX/common/src/tx_semaphore_get.c **** 
 112:ThreadX/common/src/tx_semaphore_get.c ****         /* Decrement the semaphore count.  */
 113:ThreadX/common/src/tx_semaphore_get.c ****         semaphore_ptr -> tx_semaphore_count--;
 114:ThreadX/common/src/tx_semaphore_get.c **** 
 115:ThreadX/common/src/tx_semaphore_get.c ****         /* Restore interrupts.  */
 116:ThreadX/common/src/tx_semaphore_get.c ****         TX_RESTORE
 117:ThreadX/common/src/tx_semaphore_get.c ****     }
 118:ThreadX/common/src/tx_semaphore_get.c **** 
 119:ThreadX/common/src/tx_semaphore_get.c ****     /* Determine if the request specifies suspension.  */
 120:ThreadX/common/src/tx_semaphore_get.c ****     else if (wait_option != TX_NO_WAIT)
  67              		.loc 1 120 0
  68 000c 0029     		cmp	r1, #0
  69 000e 36D0     		beq	.L4
 121:ThreadX/common/src/tx_semaphore_get.c ****     {
 122:ThreadX/common/src/tx_semaphore_get.c **** 
 123:ThreadX/common/src/tx_semaphore_get.c ****         /* Determine if the preempt disable flag is non-zero.  */
 124:ThreadX/common/src/tx_semaphore_get.c ****         if (_tx_thread_preempt_disable != ((UINT) 0))
  70              		.loc 1 124 0
  71 0010 1D4B     		ldr	r3, .L11
  72 0012 1B68     		ldr	r3, [r3]
  73 0014 43BB     		cbnz	r3, .L10
 125:ThreadX/common/src/tx_semaphore_get.c ****         {
 126:ThreadX/common/src/tx_semaphore_get.c **** 
 127:ThreadX/common/src/tx_semaphore_get.c ****             /* Restore interrupts.  */
 128:ThreadX/common/src/tx_semaphore_get.c ****             TX_RESTORE
 129:ThreadX/common/src/tx_semaphore_get.c **** 
 130:ThreadX/common/src/tx_semaphore_get.c ****             /* Suspension is not allowed if the preempt disable flag is non-zero at this point - re
 131:ThreadX/common/src/tx_semaphore_get.c ****             status =  TX_NO_INSTANCE;
 132:ThreadX/common/src/tx_semaphore_get.c ****         }
 133:ThreadX/common/src/tx_semaphore_get.c ****         else
 134:ThreadX/common/src/tx_semaphore_get.c ****         {
 135:ThreadX/common/src/tx_semaphore_get.c **** 
 136:ThreadX/common/src/tx_semaphore_get.c ****             /* Prepare for suspension of this thread.  */
 137:ThreadX/common/src/tx_semaphore_get.c **** 
 138:ThreadX/common/src/tx_semaphore_get.c **** #ifdef TX_SEMAPHORE_ENABLE_PERFORMANCE_INFO
 139:ThreadX/common/src/tx_semaphore_get.c **** 
 140:ThreadX/common/src/tx_semaphore_get.c ****             /* Increment the total semaphore suspensions counter.  */
 141:ThreadX/common/src/tx_semaphore_get.c ****             _tx_semaphore_performance_suspension_count++;
 142:ThreadX/common/src/tx_semaphore_get.c **** 
 143:ThreadX/common/src/tx_semaphore_get.c ****             /* Increment the number of suspensions on this semaphore.  */
 144:ThreadX/common/src/tx_semaphore_get.c ****             semaphore_ptr -> tx_semaphore_performance_suspension_count++;
 145:ThreadX/common/src/tx_semaphore_get.c **** #endif
 146:ThreadX/common/src/tx_semaphore_get.c **** 
 147:ThreadX/common/src/tx_semaphore_get.c ****             /* Pickup thread pointer.  */
 148:ThreadX/common/src/tx_semaphore_get.c ****             TX_THREAD_GET_CURRENT(thread_ptr)
  74              		.loc 1 148 0
  75 0016 1D4B     		ldr	r3, .L11+4
  76 0018 1C68     		ldr	r4, [r3]
ARM GAS  /tmp/ccuY2Gga.s 			page 15


  77              	.LVL2:
 149:ThreadX/common/src/tx_semaphore_get.c **** 
 150:ThreadX/common/src/tx_semaphore_get.c ****             /* Setup cleanup routine pointer.  */
 151:ThreadX/common/src/tx_semaphore_get.c ****             thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
  78              		.loc 1 151 0
  79 001a 1D4B     		ldr	r3, .L11+8
  80 001c A366     		str	r3, [r4, #104]
 152:ThreadX/common/src/tx_semaphore_get.c **** 
 153:ThreadX/common/src/tx_semaphore_get.c ****             /* Setup cleanup information, i.e. this semaphore control
 154:ThreadX/common/src/tx_semaphore_get.c ****                block.  */
 155:ThreadX/common/src/tx_semaphore_get.c ****             thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
  81              		.loc 1 155 0
  82 001e E066     		str	r0, [r4, #108]
 156:ThreadX/common/src/tx_semaphore_get.c **** 
 157:ThreadX/common/src/tx_semaphore_get.c **** #ifndef TX_NOT_INTERRUPTABLE
 158:ThreadX/common/src/tx_semaphore_get.c **** 
 159:ThreadX/common/src/tx_semaphore_get.c ****             /* Increment the suspension sequence number, which is used to identify
 160:ThreadX/common/src/tx_semaphore_get.c ****                this suspension event.  */
 161:ThreadX/common/src/tx_semaphore_get.c ****             thread_ptr -> tx_thread_suspension_sequence++;
  83              		.loc 1 161 0
  84 0020 D4F8B030 		ldr	r3, [r4, #176]
  85 0024 0133     		adds	r3, r3, #1
  86 0026 C4F8B030 		str	r3, [r4, #176]
 162:ThreadX/common/src/tx_semaphore_get.c **** #endif
 163:ThreadX/common/src/tx_semaphore_get.c **** 
 164:ThreadX/common/src/tx_semaphore_get.c ****             /* Setup suspension list.  */
 165:ThreadX/common/src/tx_semaphore_get.c ****             if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
  87              		.loc 1 165 0
  88 002a 0369     		ldr	r3, [r0, #16]
  89 002c 03BB     		cbnz	r3, .L6
 166:ThreadX/common/src/tx_semaphore_get.c ****             {
 167:ThreadX/common/src/tx_semaphore_get.c **** 
 168:ThreadX/common/src/tx_semaphore_get.c ****                 /* No other threads are suspended.  Setup the head pointer and
 169:ThreadX/common/src/tx_semaphore_get.c ****                    just setup this threads pointers to itself.  */
 170:ThreadX/common/src/tx_semaphore_get.c ****                 semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
  90              		.loc 1 170 0
  91 002e C460     		str	r4, [r0, #12]
 171:ThreadX/common/src/tx_semaphore_get.c ****                 thread_ptr -> tx_thread_suspended_next =                thread_ptr;
  92              		.loc 1 171 0
  93 0030 2467     		str	r4, [r4, #112]
 172:ThreadX/common/src/tx_semaphore_get.c ****                 thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
  94              		.loc 1 172 0
  95 0032 6467     		str	r4, [r4, #116]
  96              	.L7:
 173:ThreadX/common/src/tx_semaphore_get.c ****             }
 174:ThreadX/common/src/tx_semaphore_get.c ****             else
 175:ThreadX/common/src/tx_semaphore_get.c ****             {
 176:ThreadX/common/src/tx_semaphore_get.c **** 
 177:ThreadX/common/src/tx_semaphore_get.c ****                 /* This list is not NULL, add current thread to the end. */
 178:ThreadX/common/src/tx_semaphore_get.c ****                 next_thread =                                   semaphore_ptr -> tx_semaphore_suspe
 179:ThreadX/common/src/tx_semaphore_get.c ****                 thread_ptr -> tx_thread_suspended_next =        next_thread;
 180:ThreadX/common/src/tx_semaphore_get.c ****                 previous_thread =                               next_thread -> tx_thread_suspended_
 181:ThreadX/common/src/tx_semaphore_get.c ****                 thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 182:ThreadX/common/src/tx_semaphore_get.c ****                 previous_thread -> tx_thread_suspended_next =   thread_ptr;
 183:ThreadX/common/src/tx_semaphore_get.c ****                 next_thread -> tx_thread_suspended_previous =   thread_ptr;
 184:ThreadX/common/src/tx_semaphore_get.c ****             }
 185:ThreadX/common/src/tx_semaphore_get.c **** 
ARM GAS  /tmp/ccuY2Gga.s 			page 16


 186:ThreadX/common/src/tx_semaphore_get.c ****             /* Increment the number of suspensions.  */
 187:ThreadX/common/src/tx_semaphore_get.c ****             semaphore_ptr -> tx_semaphore_suspended_count++;
  97              		.loc 1 187 0
  98 0034 0369     		ldr	r3, [r0, #16]
  99 0036 0133     		adds	r3, r3, #1
 100 0038 0361     		str	r3, [r0, #16]
 188:ThreadX/common/src/tx_semaphore_get.c **** 
 189:ThreadX/common/src/tx_semaphore_get.c ****             /* Set the state to suspended.  */
 190:ThreadX/common/src/tx_semaphore_get.c ****             thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 101              		.loc 1 190 0
 102 003a 0623     		movs	r3, #6
 103 003c 2363     		str	r3, [r4, #48]
 191:ThreadX/common/src/tx_semaphore_get.c **** 
 192:ThreadX/common/src/tx_semaphore_get.c **** #ifdef TX_NOT_INTERRUPTABLE
 193:ThreadX/common/src/tx_semaphore_get.c **** 
 194:ThreadX/common/src/tx_semaphore_get.c ****             /* Call actual non-interruptable thread suspension routine.  */
 195:ThreadX/common/src/tx_semaphore_get.c ****             _tx_thread_system_ni_suspend(thread_ptr, wait_option);
 196:ThreadX/common/src/tx_semaphore_get.c **** 
 197:ThreadX/common/src/tx_semaphore_get.c ****             /* Restore interrupts.  */
 198:ThreadX/common/src/tx_semaphore_get.c ****             TX_RESTORE
 199:ThreadX/common/src/tx_semaphore_get.c **** #else
 200:ThreadX/common/src/tx_semaphore_get.c **** 
 201:ThreadX/common/src/tx_semaphore_get.c ****             /* Set the suspending flag.  */
 202:ThreadX/common/src/tx_semaphore_get.c ****             thread_ptr -> tx_thread_suspending =  TX_TRUE;
 104              		.loc 1 202 0
 105 003e 0123     		movs	r3, #1
 106 0040 A363     		str	r3, [r4, #56]
 203:ThreadX/common/src/tx_semaphore_get.c **** 
 204:ThreadX/common/src/tx_semaphore_get.c ****             /* Setup the timeout period.  */
 205:ThreadX/common/src/tx_semaphore_get.c ****             thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 107              		.loc 1 205 0
 108 0042 E164     		str	r1, [r4, #76]
 206:ThreadX/common/src/tx_semaphore_get.c **** 
 207:ThreadX/common/src/tx_semaphore_get.c ****             /* Temporarily disable preemption.  */
 208:ThreadX/common/src/tx_semaphore_get.c ****             _tx_thread_preempt_disable++;
 109              		.loc 1 208 0
 110 0044 1049     		ldr	r1, .L11
 111              	.LVL3:
 112 0046 0B68     		ldr	r3, [r1]
 113 0048 0133     		adds	r3, r3, #1
 114 004a 0B60     		str	r3, [r1]
 115              	.LVL4:
 116              	.LBB20:
 117              	.LBB21:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 118              		.loc 2 562 0
 119              		.syntax unified
 120              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 121 004c 82F31088 		MSR  PRIMASK,r2
 122              	@ 0 "" 2
 123              	.LVL5:
 124              		.thumb
 125              		.syntax unified
 126              	.LBE21:
 127              	.LBE20:
 209:ThreadX/common/src/tx_semaphore_get.c **** 
 210:ThreadX/common/src/tx_semaphore_get.c ****             /* Restore interrupts.  */
ARM GAS  /tmp/ccuY2Gga.s 			page 17


 211:ThreadX/common/src/tx_semaphore_get.c ****             TX_RESTORE
 212:ThreadX/common/src/tx_semaphore_get.c **** 
 213:ThreadX/common/src/tx_semaphore_get.c ****             /* Call actual thread suspension routine.  */
 214:ThreadX/common/src/tx_semaphore_get.c ****             _tx_thread_system_suspend(thread_ptr);
 128              		.loc 1 214 0
 129 0050 2046     		mov	r0, r4
 130              	.LVL6:
 131 0052 FFF7FEFF 		bl	_tx_thread_system_suspend
 132              	.LVL7:
 215:ThreadX/common/src/tx_semaphore_get.c **** #endif
 216:ThreadX/common/src/tx_semaphore_get.c **** 
 217:ThreadX/common/src/tx_semaphore_get.c ****             /* Return the completion status.  */
 218:ThreadX/common/src/tx_semaphore_get.c ****             status =  thread_ptr -> tx_thread_suspend_status;
 133              		.loc 1 218 0
 134 0056 D4F88400 		ldr	r0, [r4, #132]
 135              	.LVL8:
 136 005a 04E0     		b	.L1
 137              	.LVL9:
 138              	.L9:
 113:ThreadX/common/src/tx_semaphore_get.c **** 
 139              		.loc 1 113 0
 140 005c 013B     		subs	r3, r3, #1
 141 005e 8360     		str	r3, [r0, #8]
 142              	.LVL10:
 143              	.LBB22:
 144              	.LBB23:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145              		.loc 2 562 0
 146              		.syntax unified
 147              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 148 0060 82F31088 		MSR  PRIMASK,r2
 149              	@ 0 "" 2
 150              		.thumb
 151              		.syntax unified
 152              	.LBE23:
 153              	.LBE22:
  88:ThreadX/common/src/tx_semaphore_get.c **** 
 154              		.loc 1 88 0
 155 0064 0020     		movs	r0, #0
 156              	.LVL11:
 157              	.L1:
 219:ThreadX/common/src/tx_semaphore_get.c ****         }
 220:ThreadX/common/src/tx_semaphore_get.c ****     }
 221:ThreadX/common/src/tx_semaphore_get.c ****     else
 222:ThreadX/common/src/tx_semaphore_get.c ****     {
 223:ThreadX/common/src/tx_semaphore_get.c **** 
 224:ThreadX/common/src/tx_semaphore_get.c ****         /* Restore interrupts.  */
 225:ThreadX/common/src/tx_semaphore_get.c ****         TX_RESTORE
 226:ThreadX/common/src/tx_semaphore_get.c **** 
 227:ThreadX/common/src/tx_semaphore_get.c ****         /* Immediate return, return error completion.  */
 228:ThreadX/common/src/tx_semaphore_get.c ****         status =  TX_NO_INSTANCE;
 229:ThreadX/common/src/tx_semaphore_get.c ****     }
 230:ThreadX/common/src/tx_semaphore_get.c **** 
 231:ThreadX/common/src/tx_semaphore_get.c ****     /* Return completion status.  */
 232:ThreadX/common/src/tx_semaphore_get.c ****     return(status);
 233:ThreadX/common/src/tx_semaphore_get.c **** }
 158              		.loc 1 233 0
ARM GAS  /tmp/ccuY2Gga.s 			page 18


 159 0066 38BD     		pop	{r3, r4, r5, pc}
 160              	.LVL12:
 161              	.L10:
 162              	.LBB24:
 163              	.LBB25:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 164              		.loc 2 562 0
 165              		.syntax unified
 166              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 167 0068 82F31088 		MSR  PRIMASK,r2
 168              	@ 0 "" 2
 169              	.LVL13:
 170              		.thumb
 171              		.syntax unified
 172              	.LBE25:
 173              	.LBE24:
 131:ThreadX/common/src/tx_semaphore_get.c ****         }
 174              		.loc 1 131 0
 175 006c 0D20     		movs	r0, #13
 176              	.LVL14:
 177 006e FAE7     		b	.L1
 178              	.LVL15:
 179              	.L6:
 178:ThreadX/common/src/tx_semaphore_get.c ****                 thread_ptr -> tx_thread_suspended_next =        next_thread;
 180              		.loc 1 178 0
 181 0070 C368     		ldr	r3, [r0, #12]
 182              	.LVL16:
 179:ThreadX/common/src/tx_semaphore_get.c ****                 previous_thread =                               next_thread -> tx_thread_suspended_
 183              		.loc 1 179 0
 184 0072 2367     		str	r3, [r4, #112]
 180:ThreadX/common/src/tx_semaphore_get.c ****                 thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 185              		.loc 1 180 0
 186 0074 5D6F     		ldr	r5, [r3, #116]
 187              	.LVL17:
 181:ThreadX/common/src/tx_semaphore_get.c ****                 previous_thread -> tx_thread_suspended_next =   thread_ptr;
 188              		.loc 1 181 0
 189 0076 6567     		str	r5, [r4, #116]
 182:ThreadX/common/src/tx_semaphore_get.c ****                 next_thread -> tx_thread_suspended_previous =   thread_ptr;
 190              		.loc 1 182 0
 191 0078 2C67     		str	r4, [r5, #112]
 183:ThreadX/common/src/tx_semaphore_get.c ****             }
 192              		.loc 1 183 0
 193 007a 5C67     		str	r4, [r3, #116]
 194 007c DAE7     		b	.L7
 195              	.LVL18:
 196              	.L4:
 197              	.LBB26:
 198              	.LBB27:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 199              		.loc 2 562 0
 200              		.syntax unified
 201              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 202 007e 82F31088 		MSR  PRIMASK,r2
 203              	@ 0 "" 2
 204              	.LVL19:
 205              		.thumb
 206              		.syntax unified
ARM GAS  /tmp/ccuY2Gga.s 			page 19


 207              	.LBE27:
 208              	.LBE26:
 228:ThreadX/common/src/tx_semaphore_get.c ****     }
 209              		.loc 1 228 0
 210 0082 0D20     		movs	r0, #13
 211              	.LVL20:
 232:ThreadX/common/src/tx_semaphore_get.c **** }
 212              		.loc 1 232 0
 213 0084 EFE7     		b	.L1
 214              	.L12:
 215 0086 00BF     		.align	2
 216              	.L11:
 217 0088 00000000 		.word	_tx_thread_preempt_disable
 218 008c 00000000 		.word	_tx_thread_current_ptr
 219 0090 00000000 		.word	_tx_semaphore_cleanup
 220              		.cfi_endproc
 221              	.LFE8:
 223              		.text
 224              	.Letext0:
 225              		.file 3 "/usr/include/newlib/sys/lock.h"
 226              		.file 4 "/usr/include/newlib/sys/_types.h"
 227              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 228              		.file 6 "/usr/include/newlib/sys/reent.h"
 229              		.file 7 "/usr/include/newlib/stdlib.h"
 230              		.file 8 "ThreadX/common/inc/tx_api.h"
 231              		.file 9 "ThreadX/common/inc/tx_thread.h"
 232              		.file 10 "ThreadX/common/inc/tx_semaphore.h"
ARM GAS  /tmp/ccuY2Gga.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_semaphore_get.c
     /tmp/ccuY2Gga.s:18     .text._tx_semaphore_get:0000000000000000 $t
     /tmp/ccuY2Gga.s:25     .text._tx_semaphore_get:0000000000000000 _tx_semaphore_get
     /tmp/ccuY2Gga.s:217    .text._tx_semaphore_get:0000000000000088 $d

UNDEFINED SYMBOLS
_tx_thread_system_suspend
_tx_thread_preempt_disable
_tx_thread_current_ptr
_tx_semaphore_cleanup
