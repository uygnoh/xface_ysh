ARM GAS  /tmp/ccV2FKu3.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_mutex_put.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_mutex_put,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_mutex_put
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_mutex_put:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_mutex_put.c"
   1:ThreadX/common/src/tx_mutex_put.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
   3:ThreadX/common/src/tx_mutex_put.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
   5:ThreadX/common/src/tx_mutex_put.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_mutex_put.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_mutex_put.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_mutex_put.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  10:ThreadX/common/src/tx_mutex_put.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_mutex_put.c **** 
  12:ThreadX/common/src/tx_mutex_put.c **** 
  13:ThreadX/common/src/tx_mutex_put.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_mutex_put.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_mutex_put.c **** /**                                                                       */
  16:ThreadX/common/src/tx_mutex_put.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_mutex_put.c **** /**                                                                       */
  18:ThreadX/common/src/tx_mutex_put.c **** /**   Mutex                                                               */
  19:ThreadX/common/src/tx_mutex_put.c **** /**                                                                       */
  20:ThreadX/common/src/tx_mutex_put.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_mutex_put.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_mutex_put.c **** 
  23:ThreadX/common/src/tx_mutex_put.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_mutex_put.c **** 
  25:ThreadX/common/src/tx_mutex_put.c **** 
  26:ThreadX/common/src/tx_mutex_put.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_mutex_put.c **** 
  28:ThreadX/common/src/tx_mutex_put.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_mutex_put.c **** #include "tx_trace.h"
  30:ThreadX/common/src/tx_mutex_put.c **** #include "tx_thread.h"
  31:ThreadX/common/src/tx_mutex_put.c **** #include "tx_mutex.h"
ARM GAS  /tmp/ccV2FKu3.s 			page 2


  32:ThreadX/common/src/tx_mutex_put.c **** 
  33:ThreadX/common/src/tx_mutex_put.c **** 
  34:ThreadX/common/src/tx_mutex_put.c **** /**************************************************************************/
  35:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  36:ThreadX/common/src/tx_mutex_put.c **** /*  FUNCTION                                               RELEASE        */
  37:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  38:ThreadX/common/src/tx_mutex_put.c **** /*    _tx_mutex_put                                       PORTABLE C      */
  39:ThreadX/common/src/tx_mutex_put.c **** /*                                                           6.1          */
  40:ThreadX/common/src/tx_mutex_put.c **** /*  AUTHOR                                                                */
  41:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  42:ThreadX/common/src/tx_mutex_put.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  44:ThreadX/common/src/tx_mutex_put.c **** /*  DESCRIPTION                                                           */
  45:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  46:ThreadX/common/src/tx_mutex_put.c **** /*    This function puts back an instance of the specified mutex.         */
  47:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  48:ThreadX/common/src/tx_mutex_put.c **** /*  INPUT                                                                 */
  49:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  50:ThreadX/common/src/tx_mutex_put.c **** /*    mutex_ptr                         Pointer to mutex control block    */
  51:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  52:ThreadX/common/src/tx_mutex_put.c **** /*  OUTPUT                                                                */
  53:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  54:ThreadX/common/src/tx_mutex_put.c **** /*    TX_SUCCESS                        Success completion status         */
  55:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  56:ThreadX/common/src/tx_mutex_put.c **** /*  CALLS                                                                 */
  57:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  58:ThreadX/common/src/tx_mutex_put.c **** /*    _tx_thread_system_preempt_check   Check for preemption              */
  59:ThreadX/common/src/tx_mutex_put.c **** /*    _tx_thread_system_resume          Resume thread service             */
  60:ThreadX/common/src/tx_mutex_put.c **** /*    _tx_thread_system_ni_resume       Non-interruptable resume thread   */
  61:ThreadX/common/src/tx_mutex_put.c **** /*    _tx_mutex_priority_change         Restore previous thread priority  */
  62:ThreadX/common/src/tx_mutex_put.c **** /*    _tx_mutex_prioritize              Prioritize the mutex suspension   */
  63:ThreadX/common/src/tx_mutex_put.c **** /*    _tx_mutex_thread_release          Release all thread's mutexes      */
  64:ThreadX/common/src/tx_mutex_put.c **** /*    _tx_mutex_delete                  Release ownership upon mutex      */
  65:ThreadX/common/src/tx_mutex_put.c **** /*                                        deletion                        */
  66:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  67:ThreadX/common/src/tx_mutex_put.c **** /*  CALLED BY                                                             */
  68:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  69:ThreadX/common/src/tx_mutex_put.c **** /*    Application Code                                                    */
  70:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  71:ThreadX/common/src/tx_mutex_put.c **** /*  RELEASE HISTORY                                                       */
  72:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  73:ThreadX/common/src/tx_mutex_put.c **** /*    DATE              NAME                      DESCRIPTION             */
  74:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  75:ThreadX/common/src/tx_mutex_put.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  76:ThreadX/common/src/tx_mutex_put.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  77:ThreadX/common/src/tx_mutex_put.c **** /*                                            resulting in version 6.1    */
  78:ThreadX/common/src/tx_mutex_put.c **** /*                                                                        */
  79:ThreadX/common/src/tx_mutex_put.c **** /**************************************************************************/
  80:ThreadX/common/src/tx_mutex_put.c **** UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
  81:ThreadX/common/src/tx_mutex_put.c **** {
  28              		.loc 1 81 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  34              	.LCFI0:
ARM GAS  /tmp/ccV2FKu3.s 			page 3


  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 3, -24
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42              	.LVL1:
  43              	.LBB46:
  44              	.LBB47:
  45              	.LBB48:
  46              	.LBB49:
  47              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
ARM GAS  /tmp/ccV2FKu3.s 			page 4


  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
ARM GAS  /tmp/ccV2FKu3.s 			page 5


 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
ARM GAS  /tmp/ccV2FKu3.s 			page 6


 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
ARM GAS  /tmp/ccV2FKu3.s 			page 7


 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
ARM GAS  /tmp/ccV2FKu3.s 			page 8


 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
ARM GAS  /tmp/ccV2FKu3.s 			page 9


 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
ARM GAS  /tmp/ccV2FKu3.s 			page 10


 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
ARM GAS  /tmp/ccV2FKu3.s 			page 11


 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccV2FKu3.s 			page 12


 501:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  48              		.loc 2 539 0
  49              		.syntax unified
  50              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  51 0002 EFF31081 		MRS  r1, PRIMASK 
  52              	@ 0 "" 2
  53              		.thumb
  54              		.syntax unified
  55              	.LBE49:
  56              	.LBE48:
 540:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
ARM GAS  /tmp/ccV2FKu3.s 			page 13


 549:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
 567:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
 569:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
 571:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  57              		.loc 2 575 0
  58              		.syntax unified
  59              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  60 0006 72B6     		CPSID i
  61              	@ 0 "" 2
  62              		.thumb
  63              		.syntax unified
  64              	.LBE47:
  65              	.LBE46:
  82:ThreadX/common/src/tx_mutex_put.c **** 
  83:ThreadX/common/src/tx_mutex_put.c **** TX_INTERRUPT_SAVE_AREA
  84:ThreadX/common/src/tx_mutex_put.c **** 
  85:ThreadX/common/src/tx_mutex_put.c **** TX_THREAD       *thread_ptr;
  86:ThreadX/common/src/tx_mutex_put.c **** TX_THREAD       *old_owner;
  87:ThreadX/common/src/tx_mutex_put.c **** UINT            old_priority;
  88:ThreadX/common/src/tx_mutex_put.c **** UINT            status;
  89:ThreadX/common/src/tx_mutex_put.c **** TX_MUTEX        *next_mutex;
  90:ThreadX/common/src/tx_mutex_put.c **** TX_MUTEX        *previous_mutex;
  91:ThreadX/common/src/tx_mutex_put.c **** UINT            owned_count;
  92:ThreadX/common/src/tx_mutex_put.c **** UINT            suspended_count;
  93:ThreadX/common/src/tx_mutex_put.c **** TX_THREAD       *current_thread;
  94:ThreadX/common/src/tx_mutex_put.c **** TX_THREAD       *next_thread;
  95:ThreadX/common/src/tx_mutex_put.c **** TX_THREAD       *previous_thread;
  96:ThreadX/common/src/tx_mutex_put.c **** TX_THREAD       *suspended_thread;
  97:ThreadX/common/src/tx_mutex_put.c **** UINT            inheritance_priority;
  98:ThreadX/common/src/tx_mutex_put.c **** 
  99:ThreadX/common/src/tx_mutex_put.c **** 
 100:ThreadX/common/src/tx_mutex_put.c ****     /* Setup status to indicate the processing is not complete.  */
 101:ThreadX/common/src/tx_mutex_put.c ****     status =  TX_NOT_DONE;
 102:ThreadX/common/src/tx_mutex_put.c **** 
ARM GAS  /tmp/ccV2FKu3.s 			page 14


 103:ThreadX/common/src/tx_mutex_put.c ****     /* Disable interrupts to put an instance back to the mutex.  */
 104:ThreadX/common/src/tx_mutex_put.c ****     TX_DISABLE
 105:ThreadX/common/src/tx_mutex_put.c **** 
 106:ThreadX/common/src/tx_mutex_put.c **** #ifdef TX_MUTEX_ENABLE_PERFORMANCE_INFO
 107:ThreadX/common/src/tx_mutex_put.c **** 
 108:ThreadX/common/src/tx_mutex_put.c ****     /* Increment the total mutex put counter.  */
 109:ThreadX/common/src/tx_mutex_put.c ****     _tx_mutex_performance_put_count++;
 110:ThreadX/common/src/tx_mutex_put.c **** 
 111:ThreadX/common/src/tx_mutex_put.c ****     /* Increment the number of attempts to put this mutex.  */
 112:ThreadX/common/src/tx_mutex_put.c ****     mutex_ptr -> tx_mutex_performance_put_count++;
 113:ThreadX/common/src/tx_mutex_put.c **** #endif
 114:ThreadX/common/src/tx_mutex_put.c **** 
 115:ThreadX/common/src/tx_mutex_put.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 116:ThreadX/common/src/tx_mutex_put.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_MUTEX_PUT, mutex_ptr, TX_POINTER_TO_ULONG_CONVERT(mutex_ptr ->
 117:ThreadX/common/src/tx_mutex_put.c **** 
 118:ThreadX/common/src/tx_mutex_put.c ****     /* Log this kernel call.  */
 119:ThreadX/common/src/tx_mutex_put.c ****     TX_EL_MUTEX_PUT_INSERT
 120:ThreadX/common/src/tx_mutex_put.c **** 
 121:ThreadX/common/src/tx_mutex_put.c ****     /* Determine if this mutex is owned.  */
 122:ThreadX/common/src/tx_mutex_put.c ****     if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
  66              		.loc 1 122 0
  67 0008 8368     		ldr	r3, [r0, #8]
  68 000a 002B     		cmp	r3, #0
  69 000c 00F0F480 		beq	.L2
 123:ThreadX/common/src/tx_mutex_put.c ****     {
 124:ThreadX/common/src/tx_mutex_put.c **** 
 125:ThreadX/common/src/tx_mutex_put.c ****         /* Pickup the owning thread pointer.  */
 126:ThreadX/common/src/tx_mutex_put.c ****         thread_ptr =  mutex_ptr -> tx_mutex_owner;
  70              		.loc 1 126 0
  71 0010 C268     		ldr	r2, [r0, #12]
  72              	.LVL2:
 127:ThreadX/common/src/tx_mutex_put.c **** 
 128:ThreadX/common/src/tx_mutex_put.c ****         /* Pickup thread pointer.  */
 129:ThreadX/common/src/tx_mutex_put.c ****         TX_THREAD_GET_CURRENT(current_thread)
  73              		.loc 1 129 0
  74 0012 7B4C     		ldr	r4, .L40
  75 0014 2468     		ldr	r4, [r4]
  76              	.LVL3:
 130:ThreadX/common/src/tx_mutex_put.c **** 
 131:ThreadX/common/src/tx_mutex_put.c ****         /* Check to see if the mutex is owned by the calling thread.  */
 132:ThreadX/common/src/tx_mutex_put.c ****         if (mutex_ptr -> tx_mutex_owner != current_thread)
  77              		.loc 1 132 0
  78 0016 A242     		cmp	r2, r4
  79 0018 03D0     		beq	.L3
 133:ThreadX/common/src/tx_mutex_put.c ****         {
 134:ThreadX/common/src/tx_mutex_put.c **** 
 135:ThreadX/common/src/tx_mutex_put.c ****             /* Determine if the preempt disable flag is set, indicating that
 136:ThreadX/common/src/tx_mutex_put.c ****                the caller is not the application but from ThreadX. In such
 137:ThreadX/common/src/tx_mutex_put.c ****                cases, the thread mutex owner does not need to match.  */
 138:ThreadX/common/src/tx_mutex_put.c ****             if (_tx_thread_preempt_disable == ((UINT) 0))
  80              		.loc 1 138 0
  81 001a 7A4C     		ldr	r4, .L40+4
  82              	.LVL4:
  83 001c 2468     		ldr	r4, [r4]
  84 001e 002C     		cmp	r4, #0
  85 0020 4ED0     		beq	.L30
  86              	.L3:
ARM GAS  /tmp/ccV2FKu3.s 			page 15


 139:ThreadX/common/src/tx_mutex_put.c ****             {
 140:ThreadX/common/src/tx_mutex_put.c **** 
 141:ThreadX/common/src/tx_mutex_put.c ****                 /* Invalid mutex release.  */
 142:ThreadX/common/src/tx_mutex_put.c **** 
 143:ThreadX/common/src/tx_mutex_put.c ****                 /* Restore interrupts.  */
 144:ThreadX/common/src/tx_mutex_put.c ****                 TX_RESTORE
 145:ThreadX/common/src/tx_mutex_put.c **** 
 146:ThreadX/common/src/tx_mutex_put.c ****                 /* Caller does not own the mutex.  */
 147:ThreadX/common/src/tx_mutex_put.c ****                 status =  TX_NOT_OWNED;
 148:ThreadX/common/src/tx_mutex_put.c ****             }
 149:ThreadX/common/src/tx_mutex_put.c ****         }
 150:ThreadX/common/src/tx_mutex_put.c **** 
 151:ThreadX/common/src/tx_mutex_put.c ****         /* Determine if we should continue.  */
 152:ThreadX/common/src/tx_mutex_put.c ****         if (status == TX_NOT_DONE)
 153:ThreadX/common/src/tx_mutex_put.c ****         {
 154:ThreadX/common/src/tx_mutex_put.c **** 
 155:ThreadX/common/src/tx_mutex_put.c ****             /* Decrement the mutex ownership count.  */
 156:ThreadX/common/src/tx_mutex_put.c ****             mutex_ptr -> tx_mutex_ownership_count--;
  87              		.loc 1 156 0
  88 0022 013B     		subs	r3, r3, #1
  89 0024 8360     		str	r3, [r0, #8]
 157:ThreadX/common/src/tx_mutex_put.c **** 
 158:ThreadX/common/src/tx_mutex_put.c ****             /* Determine if the mutex is still owned by the current thread.  */
 159:ThreadX/common/src/tx_mutex_put.c ****             if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
  90              		.loc 1 159 0
  91 0026 002B     		cmp	r3, #0
  92 0028 4ED1     		bne	.L31
 160:ThreadX/common/src/tx_mutex_put.c ****             {
 161:ThreadX/common/src/tx_mutex_put.c **** 
 162:ThreadX/common/src/tx_mutex_put.c ****                 /* Restore interrupts.  */
 163:ThreadX/common/src/tx_mutex_put.c ****                 TX_RESTORE
 164:ThreadX/common/src/tx_mutex_put.c **** 
 165:ThreadX/common/src/tx_mutex_put.c ****                 /* Mutex is still owned, just return successful status.  */
 166:ThreadX/common/src/tx_mutex_put.c ****                 status =  TX_SUCCESS;
 167:ThreadX/common/src/tx_mutex_put.c ****             }
 168:ThreadX/common/src/tx_mutex_put.c ****             else
 169:ThreadX/common/src/tx_mutex_put.c ****             {
 170:ThreadX/common/src/tx_mutex_put.c **** 
 171:ThreadX/common/src/tx_mutex_put.c ****                 /* Check for a NULL thread pointer, which can only happen during initialization.   
 172:ThreadX/common/src/tx_mutex_put.c ****                 if (thread_ptr == TX_NULL)
  93              		.loc 1 172 0
  94 002a 002A     		cmp	r2, #0
  95 002c 50D0     		beq	.L32
 173:ThreadX/common/src/tx_mutex_put.c ****                 {
 174:ThreadX/common/src/tx_mutex_put.c **** 
 175:ThreadX/common/src/tx_mutex_put.c ****                     /* Restore interrupts.  */
 176:ThreadX/common/src/tx_mutex_put.c ****                     TX_RESTORE
 177:ThreadX/common/src/tx_mutex_put.c **** 
 178:ThreadX/common/src/tx_mutex_put.c ****                     /* Mutex is now available, return successful status.  */
 179:ThreadX/common/src/tx_mutex_put.c ****                     status =  TX_SUCCESS;
 180:ThreadX/common/src/tx_mutex_put.c ****                 }
 181:ThreadX/common/src/tx_mutex_put.c ****                 else
 182:ThreadX/common/src/tx_mutex_put.c ****                 {
 183:ThreadX/common/src/tx_mutex_put.c **** 
 184:ThreadX/common/src/tx_mutex_put.c ****                     /* The mutex is now available.   */
 185:ThreadX/common/src/tx_mutex_put.c **** 
 186:ThreadX/common/src/tx_mutex_put.c ****                     /* Remove this mutex from the owned mutex list.  */
ARM GAS  /tmp/ccV2FKu3.s 			page 16


 187:ThreadX/common/src/tx_mutex_put.c **** 
 188:ThreadX/common/src/tx_mutex_put.c ****                     /* Decrement the ownership count.  */
 189:ThreadX/common/src/tx_mutex_put.c ****                     thread_ptr -> tx_thread_owned_mutex_count--;
  96              		.loc 1 189 0
  97 002e D2F8A030 		ldr	r3, [r2, #160]
  98 0032 013B     		subs	r3, r3, #1
  99 0034 C2F8A030 		str	r3, [r2, #160]
 190:ThreadX/common/src/tx_mutex_put.c **** 
 191:ThreadX/common/src/tx_mutex_put.c ****                     /* Determine if this mutex was the only one on the list.  */
 192:ThreadX/common/src/tx_mutex_put.c ****                     if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 100              		.loc 1 192 0
 101 0038 002B     		cmp	r3, #0
 102 003a 4DD1     		bne	.L7
 193:ThreadX/common/src/tx_mutex_put.c ****                     {
 194:ThreadX/common/src/tx_mutex_put.c **** 
 195:ThreadX/common/src/tx_mutex_put.c ****                         /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
 196:ThreadX/common/src/tx_mutex_put.c ****                         thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 103              		.loc 1 196 0
 104 003c C2F8A430 		str	r3, [r2, #164]
 105              	.L8:
 197:ThreadX/common/src/tx_mutex_put.c ****                     }
 198:ThreadX/common/src/tx_mutex_put.c ****                     else
 199:ThreadX/common/src/tx_mutex_put.c ****                     {
 200:ThreadX/common/src/tx_mutex_put.c **** 
 201:ThreadX/common/src/tx_mutex_put.c ****                         /* No, there are more mutexes on the list.  */
 202:ThreadX/common/src/tx_mutex_put.c **** 
 203:ThreadX/common/src/tx_mutex_put.c ****                         /* Link-up the neighbors.  */
 204:ThreadX/common/src/tx_mutex_put.c ****                         next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 205:ThreadX/common/src/tx_mutex_put.c ****                         previous_mutex =                         mutex_ptr -> tx_mutex_owned_previo
 206:ThreadX/common/src/tx_mutex_put.c ****                         next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 207:ThreadX/common/src/tx_mutex_put.c ****                         previous_mutex -> tx_mutex_owned_next =  next_mutex;
 208:ThreadX/common/src/tx_mutex_put.c **** 
 209:ThreadX/common/src/tx_mutex_put.c ****                         /* See if we have to update the created list head pointer.  */
 210:ThreadX/common/src/tx_mutex_put.c ****                         if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 211:ThreadX/common/src/tx_mutex_put.c ****                         {
 212:ThreadX/common/src/tx_mutex_put.c **** 
 213:ThreadX/common/src/tx_mutex_put.c ****                             /* Yes, move the head pointer to the next link. */
 214:ThreadX/common/src/tx_mutex_put.c ****                             thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 215:ThreadX/common/src/tx_mutex_put.c ****                         }
 216:ThreadX/common/src/tx_mutex_put.c ****                     }
 217:ThreadX/common/src/tx_mutex_put.c **** 
 218:ThreadX/common/src/tx_mutex_put.c ****                     /* Determine if the simple, non-suspension, non-priority inheritance case is pr
 219:ThreadX/common/src/tx_mutex_put.c ****                     if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 106              		.loc 1 219 0
 107 0040 8369     		ldr	r3, [r0, #24]
 108 0042 002B     		cmp	r3, #0
 109 0044 53D0     		beq	.L33
 110              	.L9:
 111              	.LVL5:
 220:ThreadX/common/src/tx_mutex_put.c ****                     {
 221:ThreadX/common/src/tx_mutex_put.c **** 
 222:ThreadX/common/src/tx_mutex_put.c ****                         /* Is this a priority inheritance mutex?  */
 223:ThreadX/common/src/tx_mutex_put.c ****                         if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 224:ThreadX/common/src/tx_mutex_put.c ****                         {
 225:ThreadX/common/src/tx_mutex_put.c **** 
 226:ThreadX/common/src/tx_mutex_put.c ****                             /* Yes, we are done - set the mutex owner to NULL.   */
 227:ThreadX/common/src/tx_mutex_put.c ****                             mutex_ptr -> tx_mutex_owner =  TX_NULL;
ARM GAS  /tmp/ccV2FKu3.s 			page 17


 228:ThreadX/common/src/tx_mutex_put.c **** 
 229:ThreadX/common/src/tx_mutex_put.c ****                             /* Restore interrupts.  */
 230:ThreadX/common/src/tx_mutex_put.c ****                             TX_RESTORE
 231:ThreadX/common/src/tx_mutex_put.c **** 
 232:ThreadX/common/src/tx_mutex_put.c ****                             /* Mutex is now available, return successful status.  */
 233:ThreadX/common/src/tx_mutex_put.c ****                             status =  TX_SUCCESS;
 234:ThreadX/common/src/tx_mutex_put.c ****                         }
 235:ThreadX/common/src/tx_mutex_put.c ****                     }
 236:ThreadX/common/src/tx_mutex_put.c **** 
 237:ThreadX/common/src/tx_mutex_put.c ****                     /* Determine if the processing is complete.  */
 238:ThreadX/common/src/tx_mutex_put.c ****                     if (status == TX_NOT_DONE)
 239:ThreadX/common/src/tx_mutex_put.c ****                     {
 240:ThreadX/common/src/tx_mutex_put.c **** 
 241:ThreadX/common/src/tx_mutex_put.c ****                         /* Initialize original owner and thread priority.  */
 242:ThreadX/common/src/tx_mutex_put.c ****                         old_owner =      TX_NULL;
 243:ThreadX/common/src/tx_mutex_put.c ****                         old_priority =   thread_ptr -> tx_thread_user_priority;
 112              		.loc 1 243 0
 113 0046 D2F89460 		ldr	r6, [r2, #148]
 114              	.LVL6:
 244:ThreadX/common/src/tx_mutex_put.c **** 
 245:ThreadX/common/src/tx_mutex_put.c ****                         /* Does this mutex support priority inheritance?  */
 246:ThreadX/common/src/tx_mutex_put.c ****                         if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 115              		.loc 1 246 0
 116 004a 0369     		ldr	r3, [r0, #16]
 117 004c 012B     		cmp	r3, #1
 118 004e 56D0     		beq	.L34
 119              	.LVL7:
 120              	.L10:
 121 0050 0446     		mov	r4, r0
 122              	.LVL8:
 247:ThreadX/common/src/tx_mutex_put.c ****                         {
 248:ThreadX/common/src/tx_mutex_put.c **** 
 249:ThreadX/common/src/tx_mutex_put.c **** #ifndef TX_NOT_INTERRUPTABLE
 250:ThreadX/common/src/tx_mutex_put.c **** 
 251:ThreadX/common/src/tx_mutex_put.c ****                             /* Temporarily disable preemption.  */
 252:ThreadX/common/src/tx_mutex_put.c ****                             _tx_thread_preempt_disable++;
 253:ThreadX/common/src/tx_mutex_put.c **** 
 254:ThreadX/common/src/tx_mutex_put.c ****                             /* Restore interrupts.  */
 255:ThreadX/common/src/tx_mutex_put.c ****                             TX_RESTORE
 256:ThreadX/common/src/tx_mutex_put.c **** #endif
 257:ThreadX/common/src/tx_mutex_put.c **** 
 258:ThreadX/common/src/tx_mutex_put.c ****                             /* Default the inheritance priority to disabled.  */
 259:ThreadX/common/src/tx_mutex_put.c ****                             inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 260:ThreadX/common/src/tx_mutex_put.c **** 
 261:ThreadX/common/src/tx_mutex_put.c ****                             /* Search the owned mutexes for this thread to determine the highest pr
 262:ThreadX/common/src/tx_mutex_put.c ****                                former mutex owner to return to.  */
 263:ThreadX/common/src/tx_mutex_put.c ****                             next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 264:ThreadX/common/src/tx_mutex_put.c ****                             while (next_mutex != TX_NULL)
 265:ThreadX/common/src/tx_mutex_put.c ****                             {
 266:ThreadX/common/src/tx_mutex_put.c **** 
 267:ThreadX/common/src/tx_mutex_put.c ****                                 /* Does this mutex support priority inheritance?  */
 268:ThreadX/common/src/tx_mutex_put.c ****                                 if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 269:ThreadX/common/src/tx_mutex_put.c ****                                 {
 270:ThreadX/common/src/tx_mutex_put.c **** 
 271:ThreadX/common/src/tx_mutex_put.c ****                                     /* Determine if highest priority field of the mutex is higher t
 272:ThreadX/common/src/tx_mutex_put.c ****                                        restore.  */
 273:ThreadX/common/src/tx_mutex_put.c ****                                     if (next_mutex -> tx_mutex_highest_priority_waiting < inheritan
ARM GAS  /tmp/ccV2FKu3.s 			page 18


 274:ThreadX/common/src/tx_mutex_put.c ****                                     {
 275:ThreadX/common/src/tx_mutex_put.c **** 
 276:ThreadX/common/src/tx_mutex_put.c ****                                         /* Use this priority to return releasing thread to.  */
 277:ThreadX/common/src/tx_mutex_put.c ****                                         inheritance_priority =   next_mutex -> tx_mutex_highest_pri
 278:ThreadX/common/src/tx_mutex_put.c ****                                     }
 279:ThreadX/common/src/tx_mutex_put.c ****                                 }
 280:ThreadX/common/src/tx_mutex_put.c **** 
 281:ThreadX/common/src/tx_mutex_put.c ****                                 /* Move mutex pointer to the next mutex in the list.  */
 282:ThreadX/common/src/tx_mutex_put.c ****                                 next_mutex =  next_mutex -> tx_mutex_owned_next;
 283:ThreadX/common/src/tx_mutex_put.c **** 
 284:ThreadX/common/src/tx_mutex_put.c ****                                 /* Are we at the end of the list?  */
 285:ThreadX/common/src/tx_mutex_put.c ****                                 if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 286:ThreadX/common/src/tx_mutex_put.c ****                                 {
 287:ThreadX/common/src/tx_mutex_put.c **** 
 288:ThreadX/common/src/tx_mutex_put.c ****                                     /* Yes, set the next mutex to NULL.  */
 289:ThreadX/common/src/tx_mutex_put.c ****                                     next_mutex =  TX_NULL;
 290:ThreadX/common/src/tx_mutex_put.c ****                                 }
 291:ThreadX/common/src/tx_mutex_put.c ****                             }
 292:ThreadX/common/src/tx_mutex_put.c **** 
 293:ThreadX/common/src/tx_mutex_put.c **** #ifndef TX_NOT_INTERRUPTABLE
 294:ThreadX/common/src/tx_mutex_put.c **** 
 295:ThreadX/common/src/tx_mutex_put.c ****                             /* Disable interrupts.  */
 296:ThreadX/common/src/tx_mutex_put.c ****                             TX_DISABLE
 297:ThreadX/common/src/tx_mutex_put.c **** 
 298:ThreadX/common/src/tx_mutex_put.c ****                             /* Undo the temporarily preemption disable.  */
 299:ThreadX/common/src/tx_mutex_put.c ****                             _tx_thread_preempt_disable--;
 300:ThreadX/common/src/tx_mutex_put.c **** #endif
 301:ThreadX/common/src/tx_mutex_put.c **** 
 302:ThreadX/common/src/tx_mutex_put.c ****                             /* Set the inherit priority to that of the highest priority thread wait
 303:ThreadX/common/src/tx_mutex_put.c ****                             thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 304:ThreadX/common/src/tx_mutex_put.c **** 
 305:ThreadX/common/src/tx_mutex_put.c ****                             /* Determine if the inheritance priority is less than the default old p
 306:ThreadX/common/src/tx_mutex_put.c ****                             if (inheritance_priority < old_priority)
 307:ThreadX/common/src/tx_mutex_put.c ****                             {
 308:ThreadX/common/src/tx_mutex_put.c **** 
 309:ThreadX/common/src/tx_mutex_put.c ****                                 /* Yes, update the old priority.  */
 310:ThreadX/common/src/tx_mutex_put.c ****                                 old_priority =  inheritance_priority;
 311:ThreadX/common/src/tx_mutex_put.c ****                             }
 312:ThreadX/common/src/tx_mutex_put.c ****                         }
 313:ThreadX/common/src/tx_mutex_put.c **** 
 314:ThreadX/common/src/tx_mutex_put.c ****                         /* Determine if priority inheritance is in effect and there are one or more
 315:ThreadX/common/src/tx_mutex_put.c ****                            threads suspended on the mutex.  */
 316:ThreadX/common/src/tx_mutex_put.c ****                         if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 123              		.loc 1 316 0
 124 0052 C369     		ldr	r3, [r0, #28]
 125 0054 012B     		cmp	r3, #1
 126 0056 02D9     		bls	.L15
 317:ThreadX/common/src/tx_mutex_put.c ****                         {
 318:ThreadX/common/src/tx_mutex_put.c **** 
 319:ThreadX/common/src/tx_mutex_put.c ****                             /* Is priority inheritance in effect?  */
 320:ThreadX/common/src/tx_mutex_put.c ****                             if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 127              		.loc 1 320 0
 128 0058 0369     		ldr	r3, [r0, #16]
 129 005a 012B     		cmp	r3, #1
 130 005c 73D0     		beq	.L35
 131              	.LVL9:
 132              	.L15:
ARM GAS  /tmp/ccV2FKu3.s 			page 19


 321:ThreadX/common/src/tx_mutex_put.c ****                             {
 322:ThreadX/common/src/tx_mutex_put.c **** 
 323:ThreadX/common/src/tx_mutex_put.c ****                                 /* Yes, this code is simply to ensure the highest priority thread i
 324:ThreadX/common/src/tx_mutex_put.c ****                                    at the front of the suspension list.  */
 325:ThreadX/common/src/tx_mutex_put.c **** 
 326:ThreadX/common/src/tx_mutex_put.c **** #ifndef TX_NOT_INTERRUPTABLE
 327:ThreadX/common/src/tx_mutex_put.c **** 
 328:ThreadX/common/src/tx_mutex_put.c ****                                 /* Temporarily disable preemption.  */
 329:ThreadX/common/src/tx_mutex_put.c ****                                 _tx_thread_preempt_disable++;
 330:ThreadX/common/src/tx_mutex_put.c **** 
 331:ThreadX/common/src/tx_mutex_put.c ****                                 /* Restore interrupts.  */
 332:ThreadX/common/src/tx_mutex_put.c ****                                 TX_RESTORE
 333:ThreadX/common/src/tx_mutex_put.c **** #endif
 334:ThreadX/common/src/tx_mutex_put.c **** 
 335:ThreadX/common/src/tx_mutex_put.c ****                                 /* Call the mutex prioritize processing to ensure the
 336:ThreadX/common/src/tx_mutex_put.c ****                                    highest priority thread is resumed.  */
 337:ThreadX/common/src/tx_mutex_put.c **** #ifdef TX_MISRA_ENABLE
 338:ThreadX/common/src/tx_mutex_put.c ****                                 do
 339:ThreadX/common/src/tx_mutex_put.c ****                                 {
 340:ThreadX/common/src/tx_mutex_put.c ****                                     status =  _tx_mutex_prioritize(mutex_ptr);
 341:ThreadX/common/src/tx_mutex_put.c ****                                 } while (status != TX_SUCCESS);
 342:ThreadX/common/src/tx_mutex_put.c **** #else
 343:ThreadX/common/src/tx_mutex_put.c ****                                 _tx_mutex_prioritize(mutex_ptr);
 344:ThreadX/common/src/tx_mutex_put.c **** #endif
 345:ThreadX/common/src/tx_mutex_put.c **** 
 346:ThreadX/common/src/tx_mutex_put.c ****                                 /* At this point, the highest priority thread is at the
 347:ThreadX/common/src/tx_mutex_put.c ****                                    front of the suspension list.  */
 348:ThreadX/common/src/tx_mutex_put.c **** 
 349:ThreadX/common/src/tx_mutex_put.c ****                                 /* Optional processing extension.  */
 350:ThreadX/common/src/tx_mutex_put.c ****                                 TX_MUTEX_PUT_EXTENSION_1
 351:ThreadX/common/src/tx_mutex_put.c **** 
 352:ThreadX/common/src/tx_mutex_put.c **** #ifndef TX_NOT_INTERRUPTABLE
 353:ThreadX/common/src/tx_mutex_put.c **** 
 354:ThreadX/common/src/tx_mutex_put.c ****                                 /* Disable interrupts.  */
 355:ThreadX/common/src/tx_mutex_put.c ****                                 TX_DISABLE
 356:ThreadX/common/src/tx_mutex_put.c **** 
 357:ThreadX/common/src/tx_mutex_put.c ****                                 /* Back off the preemption disable.  */
 358:ThreadX/common/src/tx_mutex_put.c ****                                 _tx_thread_preempt_disable--;
 359:ThreadX/common/src/tx_mutex_put.c **** #endif
 360:ThreadX/common/src/tx_mutex_put.c ****                             }
 361:ThreadX/common/src/tx_mutex_put.c ****                         }
 362:ThreadX/common/src/tx_mutex_put.c **** 
 363:ThreadX/common/src/tx_mutex_put.c ****                         /* Now determine if there are any threads still waiting on the mutex.  */
 364:ThreadX/common/src/tx_mutex_put.c ****                         if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 133              		.loc 1 364 0
 134 005e A569     		ldr	r5, [r4, #24]
 135 0060 002D     		cmp	r5, #0
 136 0062 7FD0     		beq	.L36
 137              	.LVL10:
 365:ThreadX/common/src/tx_mutex_put.c ****                         {
 366:ThreadX/common/src/tx_mutex_put.c **** 
 367:ThreadX/common/src/tx_mutex_put.c ****                             /* No, there are no longer any threads waiting on the mutex.  */
 368:ThreadX/common/src/tx_mutex_put.c **** 
 369:ThreadX/common/src/tx_mutex_put.c **** #ifndef TX_NOT_INTERRUPTABLE
 370:ThreadX/common/src/tx_mutex_put.c **** 
 371:ThreadX/common/src/tx_mutex_put.c ****                             /* Temporarily disable preemption.  */
 372:ThreadX/common/src/tx_mutex_put.c ****                             _tx_thread_preempt_disable++;
ARM GAS  /tmp/ccV2FKu3.s 			page 20


 373:ThreadX/common/src/tx_mutex_put.c **** 
 374:ThreadX/common/src/tx_mutex_put.c ****                             /* Restore interrupts.  */
 375:ThreadX/common/src/tx_mutex_put.c ****                             TX_RESTORE
 376:ThreadX/common/src/tx_mutex_put.c **** #endif
 377:ThreadX/common/src/tx_mutex_put.c **** 
 378:ThreadX/common/src/tx_mutex_put.c ****                             /* Mutex is not owned, but it is possible that a thread that
 379:ThreadX/common/src/tx_mutex_put.c ****                                caused a priority inheritance to occur is no longer waiting
 380:ThreadX/common/src/tx_mutex_put.c ****                                on the mutex.  */
 381:ThreadX/common/src/tx_mutex_put.c **** 
 382:ThreadX/common/src/tx_mutex_put.c ****                             /* Setup the highest priority waiting thread.  */
 383:ThreadX/common/src/tx_mutex_put.c ****                             mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORIT
 384:ThreadX/common/src/tx_mutex_put.c **** 
 385:ThreadX/common/src/tx_mutex_put.c ****                             /* Determine if we need to restore priority.  */
 386:ThreadX/common/src/tx_mutex_put.c ****                             if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority
 387:ThreadX/common/src/tx_mutex_put.c ****                             {
 388:ThreadX/common/src/tx_mutex_put.c **** 
 389:ThreadX/common/src/tx_mutex_put.c ****                                 /* Yes, restore the priority of thread.  */
 390:ThreadX/common/src/tx_mutex_put.c ****                                 _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority
 391:ThreadX/common/src/tx_mutex_put.c ****                             }
 392:ThreadX/common/src/tx_mutex_put.c **** 
 393:ThreadX/common/src/tx_mutex_put.c **** #ifndef TX_NOT_INTERRUPTABLE
 394:ThreadX/common/src/tx_mutex_put.c **** 
 395:ThreadX/common/src/tx_mutex_put.c ****                             /* Disable interrupts again.  */
 396:ThreadX/common/src/tx_mutex_put.c ****                             TX_DISABLE
 397:ThreadX/common/src/tx_mutex_put.c **** 
 398:ThreadX/common/src/tx_mutex_put.c ****                             /* Back off the preemption disable.  */
 399:ThreadX/common/src/tx_mutex_put.c ****                             _tx_thread_preempt_disable--;
 400:ThreadX/common/src/tx_mutex_put.c **** #endif
 401:ThreadX/common/src/tx_mutex_put.c **** 
 402:ThreadX/common/src/tx_mutex_put.c ****                             /* Set the mutex owner to NULL.  */
 403:ThreadX/common/src/tx_mutex_put.c ****                             mutex_ptr -> tx_mutex_owner =  TX_NULL;
 404:ThreadX/common/src/tx_mutex_put.c **** 
 405:ThreadX/common/src/tx_mutex_put.c ****                             /* Restore interrupts.  */
 406:ThreadX/common/src/tx_mutex_put.c ****                             TX_RESTORE
 407:ThreadX/common/src/tx_mutex_put.c **** 
 408:ThreadX/common/src/tx_mutex_put.c ****                             /* Check for preemption.  */
 409:ThreadX/common/src/tx_mutex_put.c ****                             _tx_thread_system_preempt_check();
 410:ThreadX/common/src/tx_mutex_put.c **** 
 411:ThreadX/common/src/tx_mutex_put.c ****                             /* Set status to success.  */
 412:ThreadX/common/src/tx_mutex_put.c ****                             status =  TX_SUCCESS;
 413:ThreadX/common/src/tx_mutex_put.c ****                         }
 414:ThreadX/common/src/tx_mutex_put.c ****                         else
 415:ThreadX/common/src/tx_mutex_put.c ****                         {
 416:ThreadX/common/src/tx_mutex_put.c **** 
 417:ThreadX/common/src/tx_mutex_put.c ****                             /* Pickup the thread at the front of the suspension list.  */
 418:ThreadX/common/src/tx_mutex_put.c ****                             thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 419:ThreadX/common/src/tx_mutex_put.c **** 
 420:ThreadX/common/src/tx_mutex_put.c ****                             /* Save the previous ownership information, if inheritance is
 421:ThreadX/common/src/tx_mutex_put.c ****                                in effect.  */
 422:ThreadX/common/src/tx_mutex_put.c ****                             if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 138              		.loc 1 422 0
 139 0064 2369     		ldr	r3, [r4, #16]
 140 0066 012B     		cmp	r3, #1
 141 0068 00F09A80 		beq	.L37
 242:ThreadX/common/src/tx_mutex_put.c ****                         old_priority =   thread_ptr -> tx_thread_user_priority;
 142              		.loc 1 242 0
 143 006c 0027     		movs	r7, #0
ARM GAS  /tmp/ccV2FKu3.s 			page 21


 144              	.LVL11:
 145              	.L18:
 423:ThreadX/common/src/tx_mutex_put.c ****                             {
 424:ThreadX/common/src/tx_mutex_put.c **** 
 425:ThreadX/common/src/tx_mutex_put.c ****                                 /* Remember the old mutex owner.  */
 426:ThreadX/common/src/tx_mutex_put.c ****                                 old_owner =  mutex_ptr -> tx_mutex_owner;
 427:ThreadX/common/src/tx_mutex_put.c **** 
 428:ThreadX/common/src/tx_mutex_put.c ****                                 /* Setup owner thread priority information.  */
 429:ThreadX/common/src/tx_mutex_put.c ****                                 mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread
 430:ThreadX/common/src/tx_mutex_put.c **** 
 431:ThreadX/common/src/tx_mutex_put.c ****                                 /* Setup the highest priority waiting thread.  */
 432:ThreadX/common/src/tx_mutex_put.c ****                                 mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRI
 433:ThreadX/common/src/tx_mutex_put.c ****                             }
 434:ThreadX/common/src/tx_mutex_put.c **** 
 435:ThreadX/common/src/tx_mutex_put.c ****                             /* Determine how many mutexes are owned by this thread.  */
 436:ThreadX/common/src/tx_mutex_put.c ****                             owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 146              		.loc 1 436 0
 147 006e D5F8A030 		ldr	r3, [r5, #160]
 148              	.LVL12:
 437:ThreadX/common/src/tx_mutex_put.c **** 
 438:ThreadX/common/src/tx_mutex_put.c ****                             /* Determine if this thread owns any other mutexes that have priority i
 439:ThreadX/common/src/tx_mutex_put.c ****                             if (owned_count == ((UINT) 0))
 149              		.loc 1 439 0
 150 0072 002B     		cmp	r3, #0
 151 0074 40F09A80 		bne	.L19
 440:ThreadX/common/src/tx_mutex_put.c ****                             {
 441:ThreadX/common/src/tx_mutex_put.c **** 
 442:ThreadX/common/src/tx_mutex_put.c ****                                 /* The owned mutex list is empty.  Add mutex to empty list.  */
 443:ThreadX/common/src/tx_mutex_put.c ****                                 thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 152              		.loc 1 443 0
 153 0078 C5F8A440 		str	r4, [r5, #164]
 444:ThreadX/common/src/tx_mutex_put.c ****                                 mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 154              		.loc 1 444 0
 155 007c E462     		str	r4, [r4, #44]
 445:ThreadX/common/src/tx_mutex_put.c ****                                 mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 156              		.loc 1 445 0
 157 007e 2463     		str	r4, [r4, #48]
 158              	.L20:
 446:ThreadX/common/src/tx_mutex_put.c ****                             }
 447:ThreadX/common/src/tx_mutex_put.c ****                             else
 448:ThreadX/common/src/tx_mutex_put.c ****                             {
 449:ThreadX/common/src/tx_mutex_put.c **** 
 450:ThreadX/common/src/tx_mutex_put.c ****                                 /* Non-empty list. Link up the mutex.  */
 451:ThreadX/common/src/tx_mutex_put.c **** 
 452:ThreadX/common/src/tx_mutex_put.c ****                                 /* Pickup tail pointer.  */
 453:ThreadX/common/src/tx_mutex_put.c ****                                 next_mutex =                            thread_ptr -> tx_thread_own
 454:ThreadX/common/src/tx_mutex_put.c ****                                 previous_mutex =                        next_mutex -> tx_mutex_owne
 455:ThreadX/common/src/tx_mutex_put.c **** 
 456:ThreadX/common/src/tx_mutex_put.c ****                                 /* Place the owned mutex in the list.  */
 457:ThreadX/common/src/tx_mutex_put.c ****                                 next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 458:ThreadX/common/src/tx_mutex_put.c ****                                 previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 459:ThreadX/common/src/tx_mutex_put.c **** 
 460:ThreadX/common/src/tx_mutex_put.c ****                                 /* Setup this mutex's next and previous created links.  */
 461:ThreadX/common/src/tx_mutex_put.c ****                                 mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 462:ThreadX/common/src/tx_mutex_put.c ****                                 mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 463:ThreadX/common/src/tx_mutex_put.c ****                             }
 464:ThreadX/common/src/tx_mutex_put.c **** 
ARM GAS  /tmp/ccV2FKu3.s 			page 22


 465:ThreadX/common/src/tx_mutex_put.c ****                             /* Increment the number of mutexes owned counter.  */
 466:ThreadX/common/src/tx_mutex_put.c ****                             thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 159              		.loc 1 466 0
 160 0080 0133     		adds	r3, r3, #1
 161              	.LVL13:
 162 0082 C5F8A030 		str	r3, [r5, #160]
 467:ThreadX/common/src/tx_mutex_put.c **** 
 468:ThreadX/common/src/tx_mutex_put.c ****                             /* Mark the Mutex as owned and fill in the corresponding information.  
 469:ThreadX/common/src/tx_mutex_put.c ****                             mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 163              		.loc 1 469 0
 164 0086 0123     		movs	r3, #1
 165              	.LVL14:
 166 0088 A360     		str	r3, [r4, #8]
 167              	.LVL15:
 470:ThreadX/common/src/tx_mutex_put.c ****                             mutex_ptr -> tx_mutex_owner =            thread_ptr;
 168              		.loc 1 470 0
 169 008a E560     		str	r5, [r4, #12]
 471:ThreadX/common/src/tx_mutex_put.c **** 
 472:ThreadX/common/src/tx_mutex_put.c ****                             /* Remove the suspended thread from the list.  */
 473:ThreadX/common/src/tx_mutex_put.c **** 
 474:ThreadX/common/src/tx_mutex_put.c ****                             /* Decrement the suspension count.  */
 475:ThreadX/common/src/tx_mutex_put.c ****                             mutex_ptr -> tx_mutex_suspended_count--;
 170              		.loc 1 475 0
 171 008c E369     		ldr	r3, [r4, #28]
 172 008e 013B     		subs	r3, r3, #1
 173 0090 E361     		str	r3, [r4, #28]
 174              	.LVL16:
 476:ThreadX/common/src/tx_mutex_put.c **** 
 477:ThreadX/common/src/tx_mutex_put.c ****                             /* Pickup the suspended count.  */
 478:ThreadX/common/src/tx_mutex_put.c ****                             suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 479:ThreadX/common/src/tx_mutex_put.c **** 
 480:ThreadX/common/src/tx_mutex_put.c ****                             /* See if this is the only suspended thread on the list.  */
 481:ThreadX/common/src/tx_mutex_put.c ****                             if (suspended_count == TX_NO_SUSPENSIONS)
 175              		.loc 1 481 0
 176 0092 002B     		cmp	r3, #0
 177 0094 40F09280 		bne	.L21
 482:ThreadX/common/src/tx_mutex_put.c ****                             {
 483:ThreadX/common/src/tx_mutex_put.c **** 
 484:ThreadX/common/src/tx_mutex_put.c ****                                 /* Yes, the only suspended thread.  */
 485:ThreadX/common/src/tx_mutex_put.c **** 
 486:ThreadX/common/src/tx_mutex_put.c ****                                 /* Update the head pointer.  */
 487:ThreadX/common/src/tx_mutex_put.c ****                                 mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 178              		.loc 1 487 0
 179 0098 A361     		str	r3, [r4, #24]
 180              	.LVL17:
 181              	.L22:
 488:ThreadX/common/src/tx_mutex_put.c ****                             }
 489:ThreadX/common/src/tx_mutex_put.c ****                             else
 490:ThreadX/common/src/tx_mutex_put.c ****                             {
 491:ThreadX/common/src/tx_mutex_put.c **** 
 492:ThreadX/common/src/tx_mutex_put.c ****                                 /* At least one more thread is on the same expiration list.  */
 493:ThreadX/common/src/tx_mutex_put.c **** 
 494:ThreadX/common/src/tx_mutex_put.c ****                                 /* Update the list head pointer.  */
 495:ThreadX/common/src/tx_mutex_put.c ****                                 next_thread =                                  thread_ptr -> tx_thr
 496:ThreadX/common/src/tx_mutex_put.c ****                                 mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 497:ThreadX/common/src/tx_mutex_put.c **** 
 498:ThreadX/common/src/tx_mutex_put.c ****                                 /* Update the links of the adjacent threads.  */
ARM GAS  /tmp/ccV2FKu3.s 			page 23


 499:ThreadX/common/src/tx_mutex_put.c ****                                 previous_thread =                              thread_ptr -> tx_thr
 500:ThreadX/common/src/tx_mutex_put.c ****                                 next_thread -> tx_thread_suspended_previous =  previous_thread;
 501:ThreadX/common/src/tx_mutex_put.c ****                                 previous_thread -> tx_thread_suspended_next =  next_thread;
 502:ThreadX/common/src/tx_mutex_put.c ****                             }
 503:ThreadX/common/src/tx_mutex_put.c **** 
 504:ThreadX/common/src/tx_mutex_put.c ****                             /* Prepare for resumption of the first thread.  */
 505:ThreadX/common/src/tx_mutex_put.c **** 
 506:ThreadX/common/src/tx_mutex_put.c ****                             /* Clear cleanup routine to avoid timeout.  */
 507:ThreadX/common/src/tx_mutex_put.c ****                             thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 182              		.loc 1 507 0
 183 009a 0023     		movs	r3, #0
 184 009c AB66     		str	r3, [r5, #104]
 508:ThreadX/common/src/tx_mutex_put.c **** 
 509:ThreadX/common/src/tx_mutex_put.c ****                             /* Put return status into the thread control block.  */
 510:ThreadX/common/src/tx_mutex_put.c ****                             thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 185              		.loc 1 510 0
 186 009e C5F88430 		str	r3, [r5, #132]
 511:ThreadX/common/src/tx_mutex_put.c **** 
 512:ThreadX/common/src/tx_mutex_put.c **** #ifdef TX_NOT_INTERRUPTABLE
 513:ThreadX/common/src/tx_mutex_put.c **** 
 514:ThreadX/common/src/tx_mutex_put.c ****                             /* Determine if priority inheritance is enabled for this mutex.  */
 515:ThreadX/common/src/tx_mutex_put.c ****                             if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 516:ThreadX/common/src/tx_mutex_put.c ****                             {
 517:ThreadX/common/src/tx_mutex_put.c **** 
 518:ThreadX/common/src/tx_mutex_put.c ****                                 /* Yes, priority inheritance is requested.  */
 519:ThreadX/common/src/tx_mutex_put.c **** 
 520:ThreadX/common/src/tx_mutex_put.c ****                                 /* Determine if there are any more threads still suspended on the m
 521:ThreadX/common/src/tx_mutex_put.c ****                                 if (mutex_ptr -> tx_mutex_suspended_count != ((ULONG) 0))
 522:ThreadX/common/src/tx_mutex_put.c ****                                 {
 523:ThreadX/common/src/tx_mutex_put.c **** 
 524:ThreadX/common/src/tx_mutex_put.c ****                                     /* Determine if there are more than one thread suspended on the
 525:ThreadX/common/src/tx_mutex_put.c ****                                     if (mutex_ptr -> tx_mutex_suspended_count > ((ULONG) 1))
 526:ThreadX/common/src/tx_mutex_put.c ****                                     {
 527:ThreadX/common/src/tx_mutex_put.c **** 
 528:ThreadX/common/src/tx_mutex_put.c ****                                         /* If so, prioritize the list so the highest priority threa
 529:ThreadX/common/src/tx_mutex_put.c ****                                            front of the suspension list.  */
 530:ThreadX/common/src/tx_mutex_put.c **** #ifdef TX_MISRA_ENABLE
 531:ThreadX/common/src/tx_mutex_put.c ****                                         do
 532:ThreadX/common/src/tx_mutex_put.c ****                                         {
 533:ThreadX/common/src/tx_mutex_put.c ****                                             status =  _tx_mutex_prioritize(mutex_ptr);
 534:ThreadX/common/src/tx_mutex_put.c ****                                         } while (status != TX_SUCCESS);
 535:ThreadX/common/src/tx_mutex_put.c **** #else
 536:ThreadX/common/src/tx_mutex_put.c ****                                         _tx_mutex_prioritize(mutex_ptr);
 537:ThreadX/common/src/tx_mutex_put.c **** #endif
 538:ThreadX/common/src/tx_mutex_put.c ****                                     }
 539:ThreadX/common/src/tx_mutex_put.c **** 
 540:ThreadX/common/src/tx_mutex_put.c ****                                     /* Now, pickup the list head and set the priority.  */
 541:ThreadX/common/src/tx_mutex_put.c **** 
 542:ThreadX/common/src/tx_mutex_put.c ****                                     /* Determine if there still are threads suspended for this mute
 543:ThreadX/common/src/tx_mutex_put.c ****                                     suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 544:ThreadX/common/src/tx_mutex_put.c ****                                     if (suspended_thread != TX_NULL)
 545:ThreadX/common/src/tx_mutex_put.c ****                                     {
 546:ThreadX/common/src/tx_mutex_put.c **** 
 547:ThreadX/common/src/tx_mutex_put.c ****                                         /* Setup the highest priority thread waiting on this mutex.
 548:ThreadX/common/src/tx_mutex_put.c ****                                         mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended
 549:ThreadX/common/src/tx_mutex_put.c ****                                     }
 550:ThreadX/common/src/tx_mutex_put.c ****                                 }
ARM GAS  /tmp/ccV2FKu3.s 			page 24


 551:ThreadX/common/src/tx_mutex_put.c **** 
 552:ThreadX/common/src/tx_mutex_put.c ****                                 /* Restore previous priority needs to be restored after priority
 553:ThreadX/common/src/tx_mutex_put.c ****                                    inheritance.  */
 554:ThreadX/common/src/tx_mutex_put.c **** 
 555:ThreadX/common/src/tx_mutex_put.c ****                                 /* Determine if we need to restore priority.  */
 556:ThreadX/common/src/tx_mutex_put.c ****                                 if (old_owner -> tx_thread_priority != old_priority)
 557:ThreadX/common/src/tx_mutex_put.c ****                                 {
 558:ThreadX/common/src/tx_mutex_put.c **** 
 559:ThreadX/common/src/tx_mutex_put.c ****                                     /* Restore priority of thread.  */
 560:ThreadX/common/src/tx_mutex_put.c ****                                     _tx_mutex_priority_change(old_owner, old_priority);
 561:ThreadX/common/src/tx_mutex_put.c ****                                 }
 562:ThreadX/common/src/tx_mutex_put.c ****                             }
 563:ThreadX/common/src/tx_mutex_put.c **** 
 564:ThreadX/common/src/tx_mutex_put.c ****                             /* Resume the thread!  */
 565:ThreadX/common/src/tx_mutex_put.c ****                             _tx_thread_system_ni_resume(thread_ptr);
 566:ThreadX/common/src/tx_mutex_put.c **** 
 567:ThreadX/common/src/tx_mutex_put.c ****                             /* Restore interrupts.  */
 568:ThreadX/common/src/tx_mutex_put.c ****                             TX_RESTORE
 569:ThreadX/common/src/tx_mutex_put.c **** #else
 570:ThreadX/common/src/tx_mutex_put.c **** 
 571:ThreadX/common/src/tx_mutex_put.c ****                             /* Temporarily disable preemption.  */
 572:ThreadX/common/src/tx_mutex_put.c ****                             _tx_thread_preempt_disable++;
 187              		.loc 1 572 0
 188 00a2 584A     		ldr	r2, .L40+4
 189 00a4 1368     		ldr	r3, [r2]
 190 00a6 0133     		adds	r3, r3, #1
 191 00a8 1360     		str	r3, [r2]
 192              	.LVL18:
 193              	.LBB50:
 194              	.LBB51:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 195              		.loc 2 562 0
 196              		.syntax unified
 197              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 198 00aa 81F31088 		MSR  PRIMASK,r1
 199              	@ 0 "" 2
 200              	.LVL19:
 201              		.thumb
 202              		.syntax unified
 203              	.LBE51:
 204              	.LBE50:
 573:ThreadX/common/src/tx_mutex_put.c **** 
 574:ThreadX/common/src/tx_mutex_put.c ****                             /* Restore interrupts.  */
 575:ThreadX/common/src/tx_mutex_put.c ****                             TX_RESTORE
 576:ThreadX/common/src/tx_mutex_put.c **** 
 577:ThreadX/common/src/tx_mutex_put.c ****                             /* Determine if priority inheritance is enabled for this mutex.  */
 578:ThreadX/common/src/tx_mutex_put.c ****                             if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 205              		.loc 1 578 0
 206 00ae 2369     		ldr	r3, [r4, #16]
 207 00b0 012B     		cmp	r3, #1
 208 00b2 00F08980 		beq	.L38
 209              	.LVL20:
 210              	.L23:
 579:ThreadX/common/src/tx_mutex_put.c ****                             {
 580:ThreadX/common/src/tx_mutex_put.c **** 
 581:ThreadX/common/src/tx_mutex_put.c ****                                 /* Yes, priority inheritance is requested.  */
 582:ThreadX/common/src/tx_mutex_put.c **** 
ARM GAS  /tmp/ccV2FKu3.s 			page 25


 583:ThreadX/common/src/tx_mutex_put.c ****                                 /* Determine if there are any more threads still suspended on the m
 584:ThreadX/common/src/tx_mutex_put.c ****                                 if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 585:ThreadX/common/src/tx_mutex_put.c ****                                 {
 586:ThreadX/common/src/tx_mutex_put.c **** 
 587:ThreadX/common/src/tx_mutex_put.c ****                                     /* Prioritize the list so the highest priority thread is placed
 588:ThreadX/common/src/tx_mutex_put.c ****                                        front of the suspension list.  */
 589:ThreadX/common/src/tx_mutex_put.c **** #ifdef TX_MISRA_ENABLE
 590:ThreadX/common/src/tx_mutex_put.c ****                                     do
 591:ThreadX/common/src/tx_mutex_put.c ****                                     {
 592:ThreadX/common/src/tx_mutex_put.c ****                                         status =  _tx_mutex_prioritize(mutex_ptr);
 593:ThreadX/common/src/tx_mutex_put.c ****                                     } while (status != TX_SUCCESS);
 594:ThreadX/common/src/tx_mutex_put.c **** #else
 595:ThreadX/common/src/tx_mutex_put.c ****                                     _tx_mutex_prioritize(mutex_ptr);
 596:ThreadX/common/src/tx_mutex_put.c **** #endif
 597:ThreadX/common/src/tx_mutex_put.c **** 
 598:ThreadX/common/src/tx_mutex_put.c ****                                     /* Now, pickup the list head and set the priority.  */
 599:ThreadX/common/src/tx_mutex_put.c **** 
 600:ThreadX/common/src/tx_mutex_put.c ****                                     /* Optional processing extension.  */
 601:ThreadX/common/src/tx_mutex_put.c ****                                     TX_MUTEX_PUT_EXTENSION_2
 602:ThreadX/common/src/tx_mutex_put.c **** 
 603:ThreadX/common/src/tx_mutex_put.c ****                                     /* Disable interrupts.  */
 604:ThreadX/common/src/tx_mutex_put.c ****                                     TX_DISABLE
 605:ThreadX/common/src/tx_mutex_put.c **** 
 606:ThreadX/common/src/tx_mutex_put.c ****                                     /* Determine if there still are threads suspended for this mute
 607:ThreadX/common/src/tx_mutex_put.c ****                                     suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 608:ThreadX/common/src/tx_mutex_put.c ****                                     if (suspended_thread != TX_NULL)
 609:ThreadX/common/src/tx_mutex_put.c ****                                     {
 610:ThreadX/common/src/tx_mutex_put.c **** 
 611:ThreadX/common/src/tx_mutex_put.c ****                                         /* Setup the highest priority thread waiting on this mutex.
 612:ThreadX/common/src/tx_mutex_put.c ****                                         mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended
 613:ThreadX/common/src/tx_mutex_put.c ****                                     }
 614:ThreadX/common/src/tx_mutex_put.c **** 
 615:ThreadX/common/src/tx_mutex_put.c ****                                     /* Restore interrupts.  */
 616:ThreadX/common/src/tx_mutex_put.c ****                                     TX_RESTORE
 617:ThreadX/common/src/tx_mutex_put.c ****                                 }
 618:ThreadX/common/src/tx_mutex_put.c **** 
 619:ThreadX/common/src/tx_mutex_put.c ****                                 /* Restore previous priority needs to be restored after priority
 620:ThreadX/common/src/tx_mutex_put.c ****                                    inheritance.  */
 621:ThreadX/common/src/tx_mutex_put.c **** 
 622:ThreadX/common/src/tx_mutex_put.c ****                                 /* Is the priority different?  */
 623:ThreadX/common/src/tx_mutex_put.c ****                                 if (old_owner -> tx_thread_priority != old_priority)
 624:ThreadX/common/src/tx_mutex_put.c ****                                 {
 625:ThreadX/common/src/tx_mutex_put.c **** 
 626:ThreadX/common/src/tx_mutex_put.c ****                                     /* Restore the priority of thread.  */
 627:ThreadX/common/src/tx_mutex_put.c ****                                     _tx_mutex_priority_change(old_owner, old_priority);
 628:ThreadX/common/src/tx_mutex_put.c ****                                 }
 629:ThreadX/common/src/tx_mutex_put.c ****                             }
 630:ThreadX/common/src/tx_mutex_put.c **** 
 631:ThreadX/common/src/tx_mutex_put.c ****                             /* Resume thread.  */
 632:ThreadX/common/src/tx_mutex_put.c ****                             _tx_thread_system_resume(thread_ptr);
 211              		.loc 1 632 0
 212 00b6 2846     		mov	r0, r5
 213 00b8 FFF7FEFF 		bl	_tx_thread_system_resume
 214              	.LVL21:
 633:ThreadX/common/src/tx_mutex_put.c **** #endif
 634:ThreadX/common/src/tx_mutex_put.c **** 
 635:ThreadX/common/src/tx_mutex_put.c ****                             /* Return a successful status.  */
ARM GAS  /tmp/ccV2FKu3.s 			page 26


 636:ThreadX/common/src/tx_mutex_put.c ****                             status =  TX_SUCCESS;
 215              		.loc 1 636 0
 216 00bc 0020     		movs	r0, #0
 217 00be 9EE0     		b	.L1
 218              	.LVL22:
 219              	.L30:
 220              	.LBB52:
 221              	.LBB53:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 222              		.loc 2 562 0
 223              		.syntax unified
 224              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 225 00c0 81F31088 		MSR  PRIMASK,r1
 226              	@ 0 "" 2
 227              	.LVL23:
 228              		.thumb
 229              		.syntax unified
 230              	.LBE53:
 231              	.LBE52:
 147:ThreadX/common/src/tx_mutex_put.c ****             }
 232              		.loc 1 147 0
 233 00c4 1E20     		movs	r0, #30
 234              	.LVL24:
 235 00c6 9AE0     		b	.L1
 236              	.LVL25:
 237              	.L31:
 238              	.LBB54:
 239              	.LBB55:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 240              		.loc 2 562 0
 241              		.syntax unified
 242              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 243 00c8 81F31088 		MSR  PRIMASK,r1
 244              	@ 0 "" 2
 245              	.LVL26:
 246              		.thumb
 247              		.syntax unified
 248              	.LBE55:
 249              	.LBE54:
 166:ThreadX/common/src/tx_mutex_put.c ****             }
 250              		.loc 1 166 0
 251 00cc 0020     		movs	r0, #0
 252              	.LVL27:
 253 00ce 96E0     		b	.L1
 254              	.LVL28:
 255              	.L32:
 256              	.LBB56:
 257              	.LBB57:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258              		.loc 2 562 0
 259              		.syntax unified
 260              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 261 00d0 81F31088 		MSR  PRIMASK,r1
 262              	@ 0 "" 2
 263              	.LVL29:
 264              		.thumb
 265              		.syntax unified
ARM GAS  /tmp/ccV2FKu3.s 			page 27


 266              	.LBE57:
 267              	.LBE56:
 179:ThreadX/common/src/tx_mutex_put.c ****                 }
 268              		.loc 1 179 0
 269 00d4 0020     		movs	r0, #0
 270              	.LVL30:
 271 00d6 92E0     		b	.L1
 272              	.LVL31:
 273              	.L7:
 204:ThreadX/common/src/tx_mutex_put.c ****                         previous_mutex =                         mutex_ptr -> tx_mutex_owned_previo
 274              		.loc 1 204 0
 275 00d8 C36A     		ldr	r3, [r0, #44]
 276              	.LVL32:
 205:ThreadX/common/src/tx_mutex_put.c ****                         next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 277              		.loc 1 205 0
 278 00da 046B     		ldr	r4, [r0, #48]
 279              	.LVL33:
 206:ThreadX/common/src/tx_mutex_put.c ****                         previous_mutex -> tx_mutex_owned_next =  next_mutex;
 280              		.loc 1 206 0
 281 00dc 1C63     		str	r4, [r3, #48]
 207:ThreadX/common/src/tx_mutex_put.c **** 
 282              		.loc 1 207 0
 283 00de E362     		str	r3, [r4, #44]
 210:ThreadX/common/src/tx_mutex_put.c ****                         {
 284              		.loc 1 210 0
 285 00e0 D2F8A440 		ldr	r4, [r2, #164]
 286              	.LVL34:
 287 00e4 8442     		cmp	r4, r0
 288 00e6 ABD1     		bne	.L8
 214:ThreadX/common/src/tx_mutex_put.c ****                         }
 289              		.loc 1 214 0
 290 00e8 C2F8A430 		str	r3, [r2, #164]
 291 00ec A8E7     		b	.L8
 292              	.LVL35:
 293              	.L33:
 223:ThreadX/common/src/tx_mutex_put.c ****                         {
 294              		.loc 1 223 0
 295 00ee 0369     		ldr	r3, [r0, #16]
 296 00f0 002B     		cmp	r3, #0
 297 00f2 A8D1     		bne	.L9
 227:ThreadX/common/src/tx_mutex_put.c **** 
 298              		.loc 1 227 0
 299 00f4 C360     		str	r3, [r0, #12]
 300              	.LVL36:
 301              	.LBB58:
 302              	.LBB59:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 303              		.loc 2 562 0
 304              		.syntax unified
 305              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 306 00f6 81F31088 		MSR  PRIMASK,r1
 307              	@ 0 "" 2
 308              	.LVL37:
 309              		.thumb
 310              		.syntax unified
 311              	.LBE59:
 312              	.LBE58:
ARM GAS  /tmp/ccV2FKu3.s 			page 28


 233:ThreadX/common/src/tx_mutex_put.c ****                         }
 313              		.loc 1 233 0
 314 00fa 1846     		mov	r0, r3
 315              	.LVL38:
 316 00fc 7FE0     		b	.L1
 317              	.LVL39:
 318              	.L34:
 252:ThreadX/common/src/tx_mutex_put.c **** 
 319              		.loc 1 252 0
 320 00fe 414C     		ldr	r4, .L40+4
 321 0100 2368     		ldr	r3, [r4]
 322 0102 0133     		adds	r3, r3, #1
 323 0104 2360     		str	r3, [r4]
 324              	.LVL40:
 325              	.LBB60:
 326              	.LBB61:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 327              		.loc 2 562 0
 328              		.syntax unified
 329              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 330 0106 81F31088 		MSR  PRIMASK,r1
 331              	@ 0 "" 2
 332              	.LVL41:
 333              		.thumb
 334              		.syntax unified
 335              	.LBE61:
 336              	.LBE60:
 263:ThreadX/common/src/tx_mutex_put.c ****                             while (next_mutex != TX_NULL)
 337              		.loc 1 263 0
 338 010a D2F8A440 		ldr	r4, [r2, #164]
 339              	.LVL42:
 340 010e 2346     		mov	r3, r4
 259:ThreadX/common/src/tx_mutex_put.c **** 
 341              		.loc 1 259 0
 342 0110 2025     		movs	r5, #32
 264:ThreadX/common/src/tx_mutex_put.c ****                             {
 343              		.loc 1 264 0
 344 0112 02E0     		b	.L11
 345              	.LVL43:
 346              	.L12:
 282:ThreadX/common/src/tx_mutex_put.c **** 
 347              		.loc 1 282 0
 348 0114 DB6A     		ldr	r3, [r3, #44]
 349              	.LVL44:
 285:ThreadX/common/src/tx_mutex_put.c ****                                 {
 350              		.loc 1 285 0
 351 0116 9C42     		cmp	r4, r3
 352 0118 08D0     		beq	.L13
 353              	.LVL45:
 354              	.L11:
 264:ThreadX/common/src/tx_mutex_put.c ****                             {
 355              		.loc 1 264 0
 356 011a 3BB1     		cbz	r3, .L13
 268:ThreadX/common/src/tx_mutex_put.c ****                                 {
 357              		.loc 1 268 0
 358 011c 1969     		ldr	r1, [r3, #16]
 359 011e 0129     		cmp	r1, #1
ARM GAS  /tmp/ccV2FKu3.s 			page 29


 360 0120 F8D1     		bne	.L12
 273:ThreadX/common/src/tx_mutex_put.c ****                                     {
 361              		.loc 1 273 0
 362 0122 996A     		ldr	r1, [r3, #40]
 363 0124 A942     		cmp	r1, r5
 364 0126 F5D2     		bcs	.L12
 277:ThreadX/common/src/tx_mutex_put.c ****                                     }
 365              		.loc 1 277 0
 366 0128 0D46     		mov	r5, r1
 367              	.LVL46:
 368 012a F3E7     		b	.L12
 369              	.LVL47:
 370              	.L13:
 371              	.LBB62:
 372              	.LBB63:
 373              	.LBB64:
 374              	.LBB65:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 375              		.loc 2 539 0
 376              		.syntax unified
 377              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 378 012c EFF31081 		MRS  r1, PRIMASK 
 379              	@ 0 "" 2
 380              		.thumb
 381              		.syntax unified
 382              	.LBE65:
 383              	.LBE64:
 384              		.loc 2 575 0
 385              		.syntax unified
 386              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 387 0130 72B6     		CPSID i
 388              	@ 0 "" 2
 389              		.thumb
 390              		.syntax unified
 391              	.LBE63:
 392              	.LBE62:
 299:ThreadX/common/src/tx_mutex_put.c **** #endif
 393              		.loc 1 299 0
 394 0132 344C     		ldr	r4, .L40+4
 395 0134 2368     		ldr	r3, [r4]
 396              	.LVL48:
 397 0136 013B     		subs	r3, r3, #1
 398 0138 2360     		str	r3, [r4]
 303:ThreadX/common/src/tx_mutex_put.c **** 
 399              		.loc 1 303 0
 400 013a C2F89C50 		str	r5, [r2, #156]
 306:ThreadX/common/src/tx_mutex_put.c ****                             {
 401              		.loc 1 306 0
 402 013e B542     		cmp	r5, r6
 403 0140 86D2     		bcs	.L10
 404 0142 2E46     		mov	r6, r5
 405              	.LVL49:
 406 0144 84E7     		b	.L10
 407              	.LVL50:
 408              	.L35:
 329:ThreadX/common/src/tx_mutex_put.c **** 
 409              		.loc 1 329 0
ARM GAS  /tmp/ccV2FKu3.s 			page 30


 410 0146 2F4D     		ldr	r5, .L40+4
 411 0148 2B68     		ldr	r3, [r5]
 412 014a 0133     		adds	r3, r3, #1
 413 014c 2B60     		str	r3, [r5]
 414              	.LVL51:
 415              	.LBB66:
 416              	.LBB67:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 417              		.loc 2 562 0
 418              		.syntax unified
 419              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 420 014e 81F31088 		MSR  PRIMASK,r1
 421              	@ 0 "" 2
 422              	.LVL52:
 423              		.thumb
 424              		.syntax unified
 425              	.LBE67:
 426              	.LBE66:
 343:ThreadX/common/src/tx_mutex_put.c **** #endif
 427              		.loc 1 343 0
 428 0152 FFF7FEFF 		bl	_tx_mutex_prioritize
 429              	.LVL53:
 430              	.LBB68:
 431              	.LBB69:
 432              	.LBB70:
 433              	.LBB71:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 434              		.loc 2 539 0
 435              		.syntax unified
 436              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 437 0156 EFF31081 		MRS  r1, PRIMASK 
 438              	@ 0 "" 2
 439              		.thumb
 440              		.syntax unified
 441              	.LBE71:
 442              	.LBE70:
 443              		.loc 2 575 0
 444              		.syntax unified
 445              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 446 015a 72B6     		CPSID i
 447              	@ 0 "" 2
 448              		.thumb
 449              		.syntax unified
 450              	.LBE69:
 451              	.LBE68:
 358:ThreadX/common/src/tx_mutex_put.c **** #endif
 452              		.loc 1 358 0
 453 015c 2B68     		ldr	r3, [r5]
 454 015e 013B     		subs	r3, r3, #1
 455 0160 2B60     		str	r3, [r5]
 456 0162 7CE7     		b	.L15
 457              	.LVL54:
 458              	.L36:
 372:ThreadX/common/src/tx_mutex_put.c **** 
 459              		.loc 1 372 0
 460 0164 274A     		ldr	r2, .L40+4
 461 0166 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccV2FKu3.s 			page 31


 462 0168 0133     		adds	r3, r3, #1
 463 016a 1360     		str	r3, [r2]
 464              	.LVL55:
 465              	.LBB72:
 466              	.LBB73:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 467              		.loc 2 562 0
 468              		.syntax unified
 469              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 470 016c 81F31088 		MSR  PRIMASK,r1
 471              	@ 0 "" 2
 472              	.LVL56:
 473              		.thumb
 474              		.syntax unified
 475              	.LBE73:
 476              	.LBE72:
 383:ThreadX/common/src/tx_mutex_put.c **** 
 477              		.loc 1 383 0
 478 0170 2023     		movs	r3, #32
 479 0172 A362     		str	r3, [r4, #40]
 386:ThreadX/common/src/tx_mutex_put.c ****                             {
 480              		.loc 1 386 0
 481 0174 E068     		ldr	r0, [r4, #12]
 482 0176 C36A     		ldr	r3, [r0, #44]
 483 0178 B342     		cmp	r3, r6
 484 017a 02D0     		beq	.L17
 390:ThreadX/common/src/tx_mutex_put.c ****                             }
 485              		.loc 1 390 0
 486 017c 3146     		mov	r1, r6
 487              	.LVL57:
 488 017e FFF7FEFF 		bl	_tx_mutex_priority_change
 489              	.LVL58:
 490              	.L17:
 491              	.LBB74:
 492              	.LBB75:
 493              	.LBB76:
 494              	.LBB77:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 495              		.loc 2 539 0
 496              		.syntax unified
 497              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 498 0182 EFF31081 		MRS  r1, PRIMASK 
 499              	@ 0 "" 2
 500              		.thumb
 501              		.syntax unified
 502              	.LBE77:
 503              	.LBE76:
 504              		.loc 2 575 0
 505              		.syntax unified
 506              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 507 0186 72B6     		CPSID i
 508              	@ 0 "" 2
 509              		.thumb
 510              		.syntax unified
 511              	.LBE75:
 512              	.LBE74:
 399:ThreadX/common/src/tx_mutex_put.c **** #endif
ARM GAS  /tmp/ccV2FKu3.s 			page 32


 513              		.loc 1 399 0
 514 0188 1E4A     		ldr	r2, .L40+4
 515 018a 1368     		ldr	r3, [r2]
 516 018c 013B     		subs	r3, r3, #1
 517 018e 1360     		str	r3, [r2]
 403:ThreadX/common/src/tx_mutex_put.c **** 
 518              		.loc 1 403 0
 519 0190 0025     		movs	r5, #0
 520 0192 E560     		str	r5, [r4, #12]
 521              	.LBB78:
 522              	.LBB79:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 523              		.loc 2 562 0
 524              		.syntax unified
 525              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 526 0194 81F31088 		MSR  PRIMASK,r1
 527              	@ 0 "" 2
 528              		.thumb
 529              		.syntax unified
 530              	.LBE79:
 531              	.LBE78:
 409:ThreadX/common/src/tx_mutex_put.c **** 
 532              		.loc 1 409 0
 533 0198 FFF7FEFF 		bl	_tx_thread_system_preempt_check
 534              	.LVL59:
 412:ThreadX/common/src/tx_mutex_put.c ****                         }
 535              		.loc 1 412 0
 536 019c 2846     		mov	r0, r5
 537 019e 2EE0     		b	.L1
 538              	.LVL60:
 539              	.L37:
 426:ThreadX/common/src/tx_mutex_put.c **** 
 540              		.loc 1 426 0
 541 01a0 E768     		ldr	r7, [r4, #12]
 542              	.LVL61:
 429:ThreadX/common/src/tx_mutex_put.c **** 
 543              		.loc 1 429 0
 544 01a2 EB6A     		ldr	r3, [r5, #44]
 545 01a4 6361     		str	r3, [r4, #20]
 432:ThreadX/common/src/tx_mutex_put.c ****                             }
 546              		.loc 1 432 0
 547 01a6 2023     		movs	r3, #32
 548 01a8 A362     		str	r3, [r4, #40]
 549 01aa 60E7     		b	.L18
 550              	.LVL62:
 551              	.L19:
 453:ThreadX/common/src/tx_mutex_put.c ****                                 previous_mutex =                        next_mutex -> tx_mutex_owne
 552              		.loc 1 453 0
 553 01ac D5F8A420 		ldr	r2, [r5, #164]
 554              	.LVL63:
 454:ThreadX/common/src/tx_mutex_put.c **** 
 555              		.loc 1 454 0
 556 01b0 106B     		ldr	r0, [r2, #48]
 557              	.LVL64:
 457:ThreadX/common/src/tx_mutex_put.c ****                                 previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 558              		.loc 1 457 0
 559 01b2 1463     		str	r4, [r2, #48]
ARM GAS  /tmp/ccV2FKu3.s 			page 33


 458:ThreadX/common/src/tx_mutex_put.c **** 
 560              		.loc 1 458 0
 561 01b4 C462     		str	r4, [r0, #44]
 461:ThreadX/common/src/tx_mutex_put.c ****                                 mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 562              		.loc 1 461 0
 563 01b6 2063     		str	r0, [r4, #48]
 462:ThreadX/common/src/tx_mutex_put.c ****                             }
 564              		.loc 1 462 0
 565 01b8 E262     		str	r2, [r4, #44]
 566 01ba 61E7     		b	.L20
 567              	.LVL65:
 568              	.L21:
 495:ThreadX/common/src/tx_mutex_put.c ****                                 mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 569              		.loc 1 495 0
 570 01bc 2B6F     		ldr	r3, [r5, #112]
 571              	.LVL66:
 496:ThreadX/common/src/tx_mutex_put.c **** 
 572              		.loc 1 496 0
 573 01be A361     		str	r3, [r4, #24]
 499:ThreadX/common/src/tx_mutex_put.c ****                                 next_thread -> tx_thread_suspended_previous =  previous_thread;
 574              		.loc 1 499 0
 575 01c0 6A6F     		ldr	r2, [r5, #116]
 576              	.LVL67:
 500:ThreadX/common/src/tx_mutex_put.c ****                                 previous_thread -> tx_thread_suspended_next =  next_thread;
 577              		.loc 1 500 0
 578 01c2 5A67     		str	r2, [r3, #116]
 579              	.LVL68:
 501:ThreadX/common/src/tx_mutex_put.c ****                             }
 580              		.loc 1 501 0
 581 01c4 1367     		str	r3, [r2, #112]
 582 01c6 68E7     		b	.L22
 583              	.LVL69:
 584              	.L38:
 584:ThreadX/common/src/tx_mutex_put.c ****                                 {
 585              		.loc 1 584 0
 586 01c8 E369     		ldr	r3, [r4, #28]
 587 01ca 43B9     		cbnz	r3, .L39
 588              	.LVL70:
 589              	.L24:
 623:ThreadX/common/src/tx_mutex_put.c ****                                 {
 590              		.loc 1 623 0
 591 01cc FB6A     		ldr	r3, [r7, #44]
 592 01ce B342     		cmp	r3, r6
 593 01d0 3FF471AF 		beq	.L23
 627:ThreadX/common/src/tx_mutex_put.c ****                                 }
 594              		.loc 1 627 0
 595 01d4 3146     		mov	r1, r6
 596 01d6 3846     		mov	r0, r7
 597 01d8 FFF7FEFF 		bl	_tx_mutex_priority_change
 598              	.LVL71:
 599 01dc 6BE7     		b	.L23
 600              	.LVL72:
 601              	.L39:
 595:ThreadX/common/src/tx_mutex_put.c **** #endif
 602              		.loc 1 595 0
 603 01de 2046     		mov	r0, r4
 604 01e0 FFF7FEFF 		bl	_tx_mutex_prioritize
ARM GAS  /tmp/ccV2FKu3.s 			page 34


 605              	.LVL73:
 606              	.LBB80:
 607              	.LBB81:
 608              	.LBB82:
 609              	.LBB83:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 610              		.loc 2 539 0
 611              		.syntax unified
 612              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 613 01e4 EFF31082 		MRS  r2, PRIMASK 
 614              	@ 0 "" 2
 615              		.thumb
 616              		.syntax unified
 617              	.LBE83:
 618              	.LBE82:
 619              		.loc 2 575 0
 620              		.syntax unified
 621              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 622 01e8 72B6     		CPSID i
 623              	@ 0 "" 2
 624              		.thumb
 625              		.syntax unified
 626              	.LBE81:
 627              	.LBE80:
 607:ThreadX/common/src/tx_mutex_put.c ****                                     if (suspended_thread != TX_NULL)
 628              		.loc 1 607 0
 629 01ea A369     		ldr	r3, [r4, #24]
 630              	.LVL74:
 608:ThreadX/common/src/tx_mutex_put.c ****                                     {
 631              		.loc 1 608 0
 632 01ec 0BB1     		cbz	r3, .L25
 612:ThreadX/common/src/tx_mutex_put.c ****                                     }
 633              		.loc 1 612 0
 634 01ee DB6A     		ldr	r3, [r3, #44]
 635              	.LVL75:
 636 01f0 A362     		str	r3, [r4, #40]
 637              	.L25:
 638              	.LVL76:
 639              	.LBB84:
 640              	.LBB85:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 641              		.loc 2 562 0
 642              		.syntax unified
 643              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 644 01f2 82F31088 		MSR  PRIMASK,r2
 645              	@ 0 "" 2
 646              		.thumb
 647              		.syntax unified
 648 01f6 E9E7     		b	.L24
 649              	.LVL77:
 650              	.L2:
 651              	.LBE85:
 652              	.LBE84:
 653              	.LBB86:
 654              	.LBB87:
 655              		.syntax unified
 656              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
ARM GAS  /tmp/ccV2FKu3.s 			page 35


 657 01f8 81F31088 		MSR  PRIMASK,r1
 658              	@ 0 "" 2
 659              	.LVL78:
 660              		.thumb
 661              		.syntax unified
 662              	.LBE87:
 663              	.LBE86:
 637:ThreadX/common/src/tx_mutex_put.c ****                         }
 638:ThreadX/common/src/tx_mutex_put.c ****                     }
 639:ThreadX/common/src/tx_mutex_put.c ****                 }
 640:ThreadX/common/src/tx_mutex_put.c ****             }
 641:ThreadX/common/src/tx_mutex_put.c ****         }
 642:ThreadX/common/src/tx_mutex_put.c ****     }
 643:ThreadX/common/src/tx_mutex_put.c ****     else
 644:ThreadX/common/src/tx_mutex_put.c ****     {
 645:ThreadX/common/src/tx_mutex_put.c **** 
 646:ThreadX/common/src/tx_mutex_put.c ****         /* Restore interrupts.  */
 647:ThreadX/common/src/tx_mutex_put.c ****         TX_RESTORE
 648:ThreadX/common/src/tx_mutex_put.c **** 
 649:ThreadX/common/src/tx_mutex_put.c ****         /* Caller does not own the mutex.  */
 650:ThreadX/common/src/tx_mutex_put.c ****         status =  TX_NOT_OWNED;
 664              		.loc 1 650 0
 665 01fc 1E20     		movs	r0, #30
 666              	.LVL79:
 667              	.L1:
 651:ThreadX/common/src/tx_mutex_put.c ****     }
 652:ThreadX/common/src/tx_mutex_put.c **** 
 653:ThreadX/common/src/tx_mutex_put.c ****     /* Return the completion status.  */
 654:ThreadX/common/src/tx_mutex_put.c ****     return(status);
 655:ThreadX/common/src/tx_mutex_put.c **** }
 668              		.loc 1 655 0
 669 01fe F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 670              	.L41:
 671              		.align	2
 672              	.L40:
 673 0200 00000000 		.word	_tx_thread_current_ptr
 674 0204 00000000 		.word	_tx_thread_preempt_disable
 675              		.cfi_endproc
 676              	.LFE8:
 678              		.text
 679              	.Letext0:
 680              		.file 3 "/usr/include/newlib/sys/lock.h"
 681              		.file 4 "/usr/include/newlib/sys/_types.h"
 682              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 683              		.file 6 "/usr/include/newlib/sys/reent.h"
 684              		.file 7 "/usr/include/newlib/stdlib.h"
 685              		.file 8 "ThreadX/common/inc/tx_api.h"
 686              		.file 9 "ThreadX/common/inc/tx_thread.h"
 687              		.file 10 "ThreadX/common/inc/tx_mutex.h"
ARM GAS  /tmp/ccV2FKu3.s 			page 36


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_mutex_put.c
     /tmp/ccV2FKu3.s:18     .text._tx_mutex_put:0000000000000000 $t
     /tmp/ccV2FKu3.s:25     .text._tx_mutex_put:0000000000000000 _tx_mutex_put
     /tmp/ccV2FKu3.s:673    .text._tx_mutex_put:0000000000000200 $d

UNDEFINED SYMBOLS
_tx_thread_system_resume
_tx_mutex_prioritize
_tx_mutex_priority_change
_tx_thread_system_preempt_check
_tx_thread_current_ptr
_tx_thread_preempt_disable
