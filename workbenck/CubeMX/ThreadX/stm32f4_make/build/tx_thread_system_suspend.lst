ARM GAS  /tmp/ccWmZ29h.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_thread_system_suspend.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_thread_system_suspend,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_thread_system_suspend
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_thread_system_suspend:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_thread_system_suspend.c"
   1:ThreadX/common/src/tx_thread_system_suspend.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
   3:ThreadX/common/src/tx_thread_system_suspend.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
   5:ThreadX/common/src/tx_thread_system_suspend.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_thread_system_suspend.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_thread_system_suspend.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_thread_system_suspend.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  10:ThreadX/common/src/tx_thread_system_suspend.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_thread_system_suspend.c **** 
  12:ThreadX/common/src/tx_thread_system_suspend.c **** 
  13:ThreadX/common/src/tx_thread_system_suspend.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_thread_system_suspend.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_thread_system_suspend.c **** /**                                                                       */
  16:ThreadX/common/src/tx_thread_system_suspend.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_thread_system_suspend.c **** /**                                                                       */
  18:ThreadX/common/src/tx_thread_system_suspend.c **** /**   Thread                                                              */
  19:ThreadX/common/src/tx_thread_system_suspend.c **** /**                                                                       */
  20:ThreadX/common/src/tx_thread_system_suspend.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_thread_system_suspend.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_thread_system_suspend.c **** 
  23:ThreadX/common/src/tx_thread_system_suspend.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_thread_system_suspend.c **** 
  25:ThreadX/common/src/tx_thread_system_suspend.c **** 
  26:ThreadX/common/src/tx_thread_system_suspend.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_thread_system_suspend.c **** 
  28:ThreadX/common/src/tx_thread_system_suspend.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_thread_system_suspend.c **** #include "tx_trace.h"
  30:ThreadX/common/src/tx_thread_system_suspend.c **** #include "tx_timer.h"
  31:ThreadX/common/src/tx_thread_system_suspend.c **** #include "tx_thread.h"
ARM GAS  /tmp/ccWmZ29h.s 			page 2


  32:ThreadX/common/src/tx_thread_system_suspend.c **** 
  33:ThreadX/common/src/tx_thread_system_suspend.c **** 
  34:ThreadX/common/src/tx_thread_system_suspend.c **** /**************************************************************************/
  35:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  36:ThreadX/common/src/tx_thread_system_suspend.c **** /*  FUNCTION                                               RELEASE        */
  37:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  38:ThreadX/common/src/tx_thread_system_suspend.c **** /*    _tx_thread_system_suspend                           PORTABLE C      */
  39:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                           6.1          */
  40:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  41:ThreadX/common/src/tx_thread_system_suspend.c **** /*  AUTHOR                                                                */
  42:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  43:ThreadX/common/src/tx_thread_system_suspend.c **** /*    William E. Lamie, Microsoft Corporation                             */
  44:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  45:ThreadX/common/src/tx_thread_system_suspend.c **** /*  DESCRIPTION                                                           */
  46:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  47:ThreadX/common/src/tx_thread_system_suspend.c **** /*    This function suspends the specified thread and changes the thread  */
  48:ThreadX/common/src/tx_thread_system_suspend.c **** /*    state to the value specified.  Note: delayed suspension processing  */
  49:ThreadX/common/src/tx_thread_system_suspend.c **** /*    is handled outside of this routine.                                 */
  50:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  51:ThreadX/common/src/tx_thread_system_suspend.c **** /*  INPUT                                                                 */
  52:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  53:ThreadX/common/src/tx_thread_system_suspend.c **** /*    thread_ptr                            Pointer to thread to suspend  */
  54:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  55:ThreadX/common/src/tx_thread_system_suspend.c **** /*  OUTPUT                                                                */
  56:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  57:ThreadX/common/src/tx_thread_system_suspend.c **** /*    None                                                                */
  58:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  59:ThreadX/common/src/tx_thread_system_suspend.c **** /*  CALLS                                                                 */
  60:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  61:ThreadX/common/src/tx_thread_system_suspend.c **** /*    _tx_thread_system_return              Return to system              */
  62:ThreadX/common/src/tx_thread_system_suspend.c **** /*    _tx_thread_system_preempt_check       System preemption check       */
  63:ThreadX/common/src/tx_thread_system_suspend.c **** /*    _tx_timer_system_activate             Activate timer for timeout    */
  64:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  65:ThreadX/common/src/tx_thread_system_suspend.c **** /*  CALLED BY                                                             */
  66:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  67:ThreadX/common/src/tx_thread_system_suspend.c **** /*    _tx_thread_priority_change            Thread priority change        */
  68:ThreadX/common/src/tx_thread_system_suspend.c **** /*    _tx_thread_shell_entry                Thread shell function         */
  69:ThreadX/common/src/tx_thread_system_suspend.c **** /*    _tx_thread_sleep                      Thread sleep                  */
  70:ThreadX/common/src/tx_thread_system_suspend.c **** /*    _tx_thread_suspend                    Application thread suspend    */
  71:ThreadX/common/src/tx_thread_system_suspend.c **** /*    _tx_thread_terminate                  Thread terminate              */
  72:ThreadX/common/src/tx_thread_system_suspend.c **** /*    Other ThreadX Components                                            */
  73:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  74:ThreadX/common/src/tx_thread_system_suspend.c **** /*  RELEASE HISTORY                                                       */
  75:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  76:ThreadX/common/src/tx_thread_system_suspend.c **** /*    DATE              NAME                      DESCRIPTION             */
  77:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  78:ThreadX/common/src/tx_thread_system_suspend.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  79:ThreadX/common/src/tx_thread_system_suspend.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  80:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                            resulting in version 6.1    */
  81:ThreadX/common/src/tx_thread_system_suspend.c **** /*                                                                        */
  82:ThreadX/common/src/tx_thread_system_suspend.c **** /**************************************************************************/
  83:ThreadX/common/src/tx_thread_system_suspend.c **** VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
  84:ThreadX/common/src/tx_thread_system_suspend.c **** #ifndef TX_NOT_INTERRUPTABLE
  85:ThreadX/common/src/tx_thread_system_suspend.c **** {
  28              		.loc 1 85 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccWmZ29h.s 			page 3


  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 0446     		mov	r4, r0
  86:ThreadX/common/src/tx_thread_system_suspend.c **** 
  87:ThreadX/common/src/tx_thread_system_suspend.c **** TX_INTERRUPT_SAVE_AREA
  88:ThreadX/common/src/tx_thread_system_suspend.c **** 
  89:ThreadX/common/src/tx_thread_system_suspend.c **** UINT            priority;
  90:ThreadX/common/src/tx_thread_system_suspend.c **** UINT            base_priority;
  91:ThreadX/common/src/tx_thread_system_suspend.c **** ULONG           priority_map;
  92:ThreadX/common/src/tx_thread_system_suspend.c **** ULONG           priority_bit;
  93:ThreadX/common/src/tx_thread_system_suspend.c **** ULONG           combined_flags;
  94:ThreadX/common/src/tx_thread_system_suspend.c **** TX_THREAD       *ready_next;
  95:ThreadX/common/src/tx_thread_system_suspend.c **** TX_THREAD       *ready_previous;
  96:ThreadX/common/src/tx_thread_system_suspend.c **** TX_THREAD       *current_thread;
  97:ThreadX/common/src/tx_thread_system_suspend.c **** 
  98:ThreadX/common/src/tx_thread_system_suspend.c **** #if TX_MAX_PRIORITIES > 32
  99:ThreadX/common/src/tx_thread_system_suspend.c **** UINT            map_index;
 100:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 101:ThreadX/common/src/tx_thread_system_suspend.c **** 
 102:ThreadX/common/src/tx_thread_system_suspend.c **** #ifndef TX_NO_TIMER
 103:ThreadX/common/src/tx_thread_system_suspend.c **** ULONG           timeout;
 104:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 105:ThreadX/common/src/tx_thread_system_suspend.c **** 
 106:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_ENABLE_EVENT_TRACE
 107:ThreadX/common/src/tx_thread_system_suspend.c **** TX_TRACE_BUFFER_ENTRY       *entry_ptr;
 108:ThreadX/common/src/tx_thread_system_suspend.c **** ULONG                       time_stamp =  ((ULONG) 0);
 109:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 110:ThreadX/common/src/tx_thread_system_suspend.c **** 
 111:ThreadX/common/src/tx_thread_system_suspend.c ****     /* Pickup thread pointer.  */
 112:ThreadX/common/src/tx_thread_system_suspend.c ****     TX_THREAD_GET_CURRENT(current_thread)
  41              		.loc 1 112 0
  42 0004 644B     		ldr	r3, .L16
  43 0006 1D68     		ldr	r5, [r3]
  44              	.LVL1:
  45              	.LBB58:
  46              	.LBB59:
  47              	.LBB60:
  48              	.LBB61:
  49              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccWmZ29h.s 			page 4


  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
ARM GAS  /tmp/ccWmZ29h.s 			page 5


  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccWmZ29h.s 			page 6


 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccWmZ29h.s 			page 7


 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccWmZ29h.s 			page 8


 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
ARM GAS  /tmp/ccWmZ29h.s 			page 9


 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
ARM GAS  /tmp/ccWmZ29h.s 			page 10


 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
ARM GAS  /tmp/ccWmZ29h.s 			page 11


 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
ARM GAS  /tmp/ccWmZ29h.s 			page 12


 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccWmZ29h.s 			page 13


 525:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  50              		.loc 2 539 0
  51              		.syntax unified
  52              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  53 0008 EFF31086 		MRS  r6, PRIMASK 
  54              	@ 0 "" 2
  55              		.thumb
  56              		.syntax unified
  57              	.LBE61:
  58              	.LBE60:
 540:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
 567:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
 569:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
 571:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
ARM GAS  /tmp/ccWmZ29h.s 			page 14


 573:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  59              		.loc 2 575 0
  60              		.syntax unified
  61              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  62 000c 72B6     		CPSID i
  63              	@ 0 "" 2
  64              		.thumb
  65              		.syntax unified
  66              	.LBE59:
  67              	.LBE58:
 113:ThreadX/common/src/tx_thread_system_suspend.c **** 
 114:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_ENABLE_STACK_CHECKING
 115:ThreadX/common/src/tx_thread_system_suspend.c **** 
 116:ThreadX/common/src/tx_thread_system_suspend.c ****     /* Check this thread's stack.  */
 117:ThreadX/common/src/tx_thread_system_suspend.c ****     TX_THREAD_STACK_CHECK(thread_ptr)
 118:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 119:ThreadX/common/src/tx_thread_system_suspend.c **** 
 120:ThreadX/common/src/tx_thread_system_suspend.c ****     /* Lockout interrupts while the thread is being suspended.  */
 121:ThreadX/common/src/tx_thread_system_suspend.c ****     TX_DISABLE
 122:ThreadX/common/src/tx_thread_system_suspend.c **** 
 123:ThreadX/common/src/tx_thread_system_suspend.c **** #ifndef TX_NO_TIMER
 124:ThreadX/common/src/tx_thread_system_suspend.c **** 
 125:ThreadX/common/src/tx_thread_system_suspend.c ****     /* Is the current thread suspending?  */
 126:ThreadX/common/src/tx_thread_system_suspend.c ****     if (thread_ptr == current_thread)
  68              		.loc 1 126 0
  69 000e 8542     		cmp	r5, r0
  70 0010 1CD0     		beq	.L12
  71              	.LVL2:
  72              	.L2:
 127:ThreadX/common/src/tx_thread_system_suspend.c ****     {
 128:ThreadX/common/src/tx_thread_system_suspend.c **** 
 129:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Pickup the wait option.  */
 130:ThreadX/common/src/tx_thread_system_suspend.c ****         timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 131:ThreadX/common/src/tx_thread_system_suspend.c **** 
 132:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Determine if an activation is needed.  */
 133:ThreadX/common/src/tx_thread_system_suspend.c ****         if (timeout != TX_NO_WAIT)
 134:ThreadX/common/src/tx_thread_system_suspend.c ****         {
 135:ThreadX/common/src/tx_thread_system_suspend.c **** 
 136:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Make sure the suspension is not a wait-forever.  */
 137:ThreadX/common/src/tx_thread_system_suspend.c ****             if (timeout != TX_WAIT_FOREVER)
 138:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 139:ThreadX/common/src/tx_thread_system_suspend.c **** 
 140:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Activate the thread timer with the timeout value setup in the caller.  */
 141:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 142:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 143:ThreadX/common/src/tx_thread_system_suspend.c ****         }
 144:ThreadX/common/src/tx_thread_system_suspend.c **** 
 145:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Yes, reset time slice for current thread.  */
 146:ThreadX/common/src/tx_thread_system_suspend.c ****         _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 147:ThreadX/common/src/tx_thread_system_suspend.c ****     }
 148:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 149:ThreadX/common/src/tx_thread_system_suspend.c **** 
 150:ThreadX/common/src/tx_thread_system_suspend.c ****     /* Decrease the preempt disabled count.  */
 151:ThreadX/common/src/tx_thread_system_suspend.c ****     _tx_thread_preempt_disable--;
  73              		.loc 1 151 0
ARM GAS  /tmp/ccWmZ29h.s 			page 15


  74 0012 624A     		ldr	r2, .L16+4
  75 0014 1368     		ldr	r3, [r2]
  76 0016 013B     		subs	r3, r3, #1
  77 0018 1360     		str	r3, [r2]
 152:ThreadX/common/src/tx_thread_system_suspend.c **** 
 153:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 154:ThreadX/common/src/tx_thread_system_suspend.c **** 
 155:ThreadX/common/src/tx_thread_system_suspend.c ****     /* Increment the thread's suspend count.  */
 156:ThreadX/common/src/tx_thread_system_suspend.c ****     thread_ptr -> tx_thread_performance_suspend_count++;
 157:ThreadX/common/src/tx_thread_system_suspend.c **** 
 158:ThreadX/common/src/tx_thread_system_suspend.c ****     /* Increment the total number of thread suspensions.  */
 159:ThreadX/common/src/tx_thread_system_suspend.c ****     _tx_thread_performance_suspend_count++;
 160:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 161:ThreadX/common/src/tx_thread_system_suspend.c **** 
 162:ThreadX/common/src/tx_thread_system_suspend.c ****     /* Check to make sure the thread suspending flag is still set.  If not, it
 163:ThreadX/common/src/tx_thread_system_suspend.c ****        has already been resumed.  */
 164:ThreadX/common/src/tx_thread_system_suspend.c ****     if (thread_ptr -> tx_thread_suspending == TX_TRUE)
  78              		.loc 1 164 0
  79 001a A36B     		ldr	r3, [r4, #56]
  80 001c 012B     		cmp	r3, #1
  81 001e 22D0     		beq	.L13
  82              	.L4:
  83              	.LVL3:
  84              	.LBB62:
  85              	.LBB63:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  86              		.loc 2 562 0
  87              		.syntax unified
  88              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  89 0020 86F31088 		MSR  PRIMASK,r6
  90              	@ 0 "" 2
  91              	.LVL4:
  92              		.thumb
  93              		.syntax unified
  94              	.LBE63:
  95              	.LBE62:
 165:ThreadX/common/src/tx_thread_system_suspend.c ****     {
 166:ThreadX/common/src/tx_thread_system_suspend.c **** 
 167:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Thread state change.  */
 168:ThreadX/common/src/tx_thread_system_suspend.c ****         TX_THREAD_STATE_CHANGE(thread_ptr, thread_ptr -> tx_thread_state)
 169:ThreadX/common/src/tx_thread_system_suspend.c **** 
 170:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Log the thread status change.  */
 171:ThreadX/common/src/tx_thread_system_suspend.c ****         TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)
 172:ThreadX/common/src/tx_thread_system_suspend.c **** 
 173:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_ENABLE_EVENT_TRACE
 174:ThreadX/common/src/tx_thread_system_suspend.c **** 
 175:ThreadX/common/src/tx_thread_system_suspend.c ****         /* If trace is enabled, save the current event pointer.  */
 176:ThreadX/common/src/tx_thread_system_suspend.c ****         entry_ptr =  _tx_trace_buffer_current_ptr;
 177:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 178:ThreadX/common/src/tx_thread_system_suspend.c **** 
 179:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Log the thread status change.  */
 180:ThreadX/common/src/tx_thread_system_suspend.c ****         TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state,
 181:ThreadX/common/src/tx_thread_system_suspend.c **** 
 182:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_ENABLE_EVENT_TRACE
 183:ThreadX/common/src/tx_thread_system_suspend.c **** 
 184:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Save the time stamp for later comparison to verify that
 185:ThreadX/common/src/tx_thread_system_suspend.c ****            the event hasn't been overwritten by the time we have
ARM GAS  /tmp/ccWmZ29h.s 			page 16


 186:ThreadX/common/src/tx_thread_system_suspend.c ****            computed the next thread to execute.  */
 187:ThreadX/common/src/tx_thread_system_suspend.c ****         if (entry_ptr != TX_NULL)
 188:ThreadX/common/src/tx_thread_system_suspend.c ****         {
 189:ThreadX/common/src/tx_thread_system_suspend.c **** 
 190:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Save time stamp.  */
 191:ThreadX/common/src/tx_thread_system_suspend.c ****             time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 192:ThreadX/common/src/tx_thread_system_suspend.c ****         }
 193:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 194:ThreadX/common/src/tx_thread_system_suspend.c **** 
 195:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Actually suspend this thread.  But first, clear the suspending flag.  */
 196:ThreadX/common/src/tx_thread_system_suspend.c ****         thread_ptr -> tx_thread_suspending =  TX_FALSE;
 197:ThreadX/common/src/tx_thread_system_suspend.c **** 
 198:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Pickup priority of thread.  */
 199:ThreadX/common/src/tx_thread_system_suspend.c ****         priority =  thread_ptr -> tx_thread_priority;
 200:ThreadX/common/src/tx_thread_system_suspend.c **** 
 201:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Pickup the next ready thread pointer.  */
 202:ThreadX/common/src/tx_thread_system_suspend.c ****         ready_next =      thread_ptr -> tx_thread_ready_next;
 203:ThreadX/common/src/tx_thread_system_suspend.c **** 
 204:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Determine if there are other threads at this priority that are
 205:ThreadX/common/src/tx_thread_system_suspend.c ****            ready.  */
 206:ThreadX/common/src/tx_thread_system_suspend.c ****         if (ready_next != thread_ptr)
 207:ThreadX/common/src/tx_thread_system_suspend.c ****         {
 208:ThreadX/common/src/tx_thread_system_suspend.c **** 
 209:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Yes, there are other threads at this priority ready.  */
 210:ThreadX/common/src/tx_thread_system_suspend.c **** 
 211:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Pickup the previous ready thread pointer.  */
 212:ThreadX/common/src/tx_thread_system_suspend.c ****             ready_previous =  thread_ptr -> tx_thread_ready_previous;
 213:ThreadX/common/src/tx_thread_system_suspend.c **** 
 214:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Just remove this thread from the priority list.  */
 215:ThreadX/common/src/tx_thread_system_suspend.c ****             ready_next -> tx_thread_ready_previous =    ready_previous;
 216:ThreadX/common/src/tx_thread_system_suspend.c ****             ready_previous -> tx_thread_ready_next =    ready_next;
 217:ThreadX/common/src/tx_thread_system_suspend.c **** 
 218:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Determine if this is the head of the priority list.  */
 219:ThreadX/common/src/tx_thread_system_suspend.c ****             if (_tx_thread_priority_list[priority] == thread_ptr)
 220:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 221:ThreadX/common/src/tx_thread_system_suspend.c **** 
 222:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Update the head pointer of this priority list.  */
 223:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_priority_list[priority] =  ready_next;
 224:ThreadX/common/src/tx_thread_system_suspend.c **** 
 225:ThreadX/common/src/tx_thread_system_suspend.c **** #ifndef TX_DISABLE_PREEMPTION_THRESHOLD
 226:ThreadX/common/src/tx_thread_system_suspend.c **** 
 227:ThreadX/common/src/tx_thread_system_suspend.c **** #if TX_MAX_PRIORITIES > 32
 228:ThreadX/common/src/tx_thread_system_suspend.c **** 
 229:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Calculate the index into the bit map array.  */
 230:ThreadX/common/src/tx_thread_system_suspend.c ****                 map_index =  priority/((UINT) 32);
 231:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 232:ThreadX/common/src/tx_thread_system_suspend.c **** 
 233:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Check for a thread preempted that had preemption threshold set.  */
 234:ThreadX/common/src/tx_thread_system_suspend.c ****                 if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 235:ThreadX/common/src/tx_thread_system_suspend.c ****                 {
 236:ThreadX/common/src/tx_thread_system_suspend.c **** 
 237:ThreadX/common/src/tx_thread_system_suspend.c ****                     /* Ensure that this thread's priority is clear in the preempt map.  */
 238:ThreadX/common/src/tx_thread_system_suspend.c ****                     TX_MOD32_BIT_SET(priority, priority_bit)
 239:ThreadX/common/src/tx_thread_system_suspend.c ****                     _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & 
 240:ThreadX/common/src/tx_thread_system_suspend.c **** 
 241:ThreadX/common/src/tx_thread_system_suspend.c **** #if TX_MAX_PRIORITIES > 32
 242:ThreadX/common/src/tx_thread_system_suspend.c **** 
ARM GAS  /tmp/ccWmZ29h.s 			page 17


 243:ThreadX/common/src/tx_thread_system_suspend.c ****                     /* Determine if there are any other bits set in this preempt map.  */
 244:ThreadX/common/src/tx_thread_system_suspend.c ****                     if (_tx_thread_preempted_maps[MAP_INDEX] == ((ULONG) 0))
 245:ThreadX/common/src/tx_thread_system_suspend.c ****                     {
 246:ThreadX/common/src/tx_thread_system_suspend.c **** 
 247:ThreadX/common/src/tx_thread_system_suspend.c ****                         /* No, clear the active bit to signify this preempt map has nothing set.  *
 248:ThreadX/common/src/tx_thread_system_suspend.c ****                         TX_DIV32_BIT_SET(priority, priority_bit)
 249:ThreadX/common/src/tx_thread_system_suspend.c ****                         _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active & (~(pri
 250:ThreadX/common/src/tx_thread_system_suspend.c ****                     }
 251:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 252:ThreadX/common/src/tx_thread_system_suspend.c ****                 }
 253:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 254:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 255:ThreadX/common/src/tx_thread_system_suspend.c ****         }
 256:ThreadX/common/src/tx_thread_system_suspend.c ****         else
 257:ThreadX/common/src/tx_thread_system_suspend.c ****         {
 258:ThreadX/common/src/tx_thread_system_suspend.c **** 
 259:ThreadX/common/src/tx_thread_system_suspend.c ****             /* This is the only thread at this priority ready to run.  Set the head
 260:ThreadX/common/src/tx_thread_system_suspend.c ****                pointer to NULL.  */
 261:ThreadX/common/src/tx_thread_system_suspend.c ****             _tx_thread_priority_list[priority] =    TX_NULL;
 262:ThreadX/common/src/tx_thread_system_suspend.c **** 
 263:ThreadX/common/src/tx_thread_system_suspend.c **** #if TX_MAX_PRIORITIES > 32
 264:ThreadX/common/src/tx_thread_system_suspend.c **** 
 265:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Calculate the index into the bit map array.  */
 266:ThreadX/common/src/tx_thread_system_suspend.c ****             map_index =  priority/((UINT) 32);
 267:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 268:ThreadX/common/src/tx_thread_system_suspend.c **** 
 269:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Clear this priority bit in the ready priority bit map.  */
 270:ThreadX/common/src/tx_thread_system_suspend.c ****             TX_MOD32_BIT_SET(priority, priority_bit)
 271:ThreadX/common/src/tx_thread_system_suspend.c ****             _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priorit
 272:ThreadX/common/src/tx_thread_system_suspend.c **** 
 273:ThreadX/common/src/tx_thread_system_suspend.c **** #if TX_MAX_PRIORITIES > 32
 274:ThreadX/common/src/tx_thread_system_suspend.c **** 
 275:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Determine if there are any other bits set in this priority map.  */
 276:ThreadX/common/src/tx_thread_system_suspend.c ****             if (_tx_thread_priority_maps[MAP_INDEX] == ((ULONG) 0))
 277:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 278:ThreadX/common/src/tx_thread_system_suspend.c **** 
 279:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* No, clear the active bit to signify this priority map has nothing set.  */
 280:ThreadX/common/src/tx_thread_system_suspend.c ****                 TX_DIV32_BIT_SET(priority, priority_bit)
 281:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_priority_map_active =  _tx_thread_priority_map_active & (~(priority_bit)
 282:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 283:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 284:ThreadX/common/src/tx_thread_system_suspend.c **** 
 285:ThreadX/common/src/tx_thread_system_suspend.c **** #ifndef TX_DISABLE_PREEMPTION_THRESHOLD
 286:ThreadX/common/src/tx_thread_system_suspend.c **** 
 287:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Check for a thread preempted that had preemption-threshold set.  */
 288:ThreadX/common/src/tx_thread_system_suspend.c ****             if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 289:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 290:ThreadX/common/src/tx_thread_system_suspend.c **** 
 291:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Ensure that this thread's priority is clear in the preempt map.  */
 292:ThreadX/common/src/tx_thread_system_suspend.c ****                 TX_MOD32_BIT_SET(priority, priority_bit)
 293:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(p
 294:ThreadX/common/src/tx_thread_system_suspend.c **** 
 295:ThreadX/common/src/tx_thread_system_suspend.c **** #if TX_MAX_PRIORITIES > 32
 296:ThreadX/common/src/tx_thread_system_suspend.c **** 
 297:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Determine if there are any other bits set in this preempt map.  */
 298:ThreadX/common/src/tx_thread_system_suspend.c ****                 if (_tx_thread_preempted_maps[MAP_INDEX] == ((ULONG) 0))
 299:ThreadX/common/src/tx_thread_system_suspend.c ****                 {
ARM GAS  /tmp/ccWmZ29h.s 			page 18


 300:ThreadX/common/src/tx_thread_system_suspend.c **** 
 301:ThreadX/common/src/tx_thread_system_suspend.c ****                     /* No, clear the active bit to signify this preempted map has nothing set.  */
 302:ThreadX/common/src/tx_thread_system_suspend.c ****                     TX_DIV32_BIT_SET(priority, priority_bit)
 303:ThreadX/common/src/tx_thread_system_suspend.c ****                     _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active & (~(priorit
 304:ThreadX/common/src/tx_thread_system_suspend.c ****                 }
 305:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 306:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 307:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 308:ThreadX/common/src/tx_thread_system_suspend.c **** 
 309:ThreadX/common/src/tx_thread_system_suspend.c **** #if TX_MAX_PRIORITIES > 32
 310:ThreadX/common/src/tx_thread_system_suspend.c **** 
 311:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Calculate the index to find the next highest priority thread ready for execution.  *
 312:ThreadX/common/src/tx_thread_system_suspend.c ****             priority_map =    _tx_thread_priority_map_active;
 313:ThreadX/common/src/tx_thread_system_suspend.c **** 
 314:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Determine if there is anything.   */
 315:ThreadX/common/src/tx_thread_system_suspend.c ****             if (priority_map != ((ULONG) 0))
 316:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 317:ThreadX/common/src/tx_thread_system_suspend.c **** 
 318:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Calculate the lowest bit set in the priority map. */
 319:ThreadX/common/src/tx_thread_system_suspend.c ****                 TX_LOWEST_SET_BIT_CALCULATE(priority_map, map_index)
 320:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 321:ThreadX/common/src/tx_thread_system_suspend.c **** 
 322:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Calculate the base priority as well.  */
 323:ThreadX/common/src/tx_thread_system_suspend.c ****             base_priority =  map_index * ((UINT) 32);
 324:ThreadX/common/src/tx_thread_system_suspend.c **** #else
 325:ThreadX/common/src/tx_thread_system_suspend.c **** 
 326:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Setup the base priority to zero.  */
 327:ThreadX/common/src/tx_thread_system_suspend.c ****             base_priority =   ((UINT) 0);
 328:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 329:ThreadX/common/src/tx_thread_system_suspend.c **** 
 330:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Setup working variable for the priority map.  */
 331:ThreadX/common/src/tx_thread_system_suspend.c ****             priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 332:ThreadX/common/src/tx_thread_system_suspend.c **** 
 333:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Make a quick check for no other threads ready for execution.  */
 334:ThreadX/common/src/tx_thread_system_suspend.c ****             if (priority_map == ((ULONG) 0))
 335:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 336:ThreadX/common/src/tx_thread_system_suspend.c **** 
 337:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Nothing else is ready.  Set highest priority and execute thread
 338:ThreadX/common/src/tx_thread_system_suspend.c ****                    accordingly.  */
 339:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 340:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_execute_ptr =       TX_NULL;
 341:ThreadX/common/src/tx_thread_system_suspend.c **** 
 342:ThreadX/common/src/tx_thread_system_suspend.c **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/common/src/tx_thread_system_suspend.c **** 
 344:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_ENABLE_EVENT_TRACE
 345:ThreadX/common/src/tx_thread_system_suspend.c **** 
 346:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Check that the event time stamp is unchanged.  A different
 347:ThreadX/common/src/tx_thread_system_suspend.c ****                    timestamp means that a later event wrote over the thread
 348:ThreadX/common/src/tx_thread_system_suspend.c ****                    suspend event. In that case, do nothing here.  */
 349:ThreadX/common/src/tx_thread_system_suspend.c ****                 if (entry_ptr != TX_NULL)
 350:ThreadX/common/src/tx_thread_system_suspend.c ****                 {
 351:ThreadX/common/src/tx_thread_system_suspend.c **** 
 352:ThreadX/common/src/tx_thread_system_suspend.c ****                     /* Is the timestamp the same?  */
 353:ThreadX/common/src/tx_thread_system_suspend.c ****                     if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 354:ThreadX/common/src/tx_thread_system_suspend.c ****                     {
 355:ThreadX/common/src/tx_thread_system_suspend.c **** 
 356:ThreadX/common/src/tx_thread_system_suspend.c ****                         /* Timestamp is the same, set the "next thread pointer" to the new value of
ARM GAS  /tmp/ccWmZ29h.s 			page 19


 357:ThreadX/common/src/tx_thread_system_suspend.c ****                            next thread to execute. This can be used by the trace analysis tool to k
 358:ThreadX/common/src/tx_thread_system_suspend.c ****                            track of next thread execution.  */
 359:ThreadX/common/src/tx_thread_system_suspend.c ****                         entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 360:ThreadX/common/src/tx_thread_system_suspend.c ****                     }
 361:ThreadX/common/src/tx_thread_system_suspend.c ****                 }
 362:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 363:ThreadX/common/src/tx_thread_system_suspend.c **** 
 364:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Restore interrupts.  */
 365:ThreadX/common/src/tx_thread_system_suspend.c ****                 TX_RESTORE
 366:ThreadX/common/src/tx_thread_system_suspend.c **** 
 367:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Determine if preemption should take place. This is only possible if the current 
 368:ThreadX/common/src/tx_thread_system_suspend.c ****                    not the same as the execute thread pointer AND the system state and preempt disa
 369:ThreadX/common/src/tx_thread_system_suspend.c ****                 TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 370:ThreadX/common/src/tx_thread_system_suspend.c ****                 if (combined_flags == ((ULONG) 0))
 371:ThreadX/common/src/tx_thread_system_suspend.c ****                 {
 372:ThreadX/common/src/tx_thread_system_suspend.c **** 
 373:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 374:ThreadX/common/src/tx_thread_system_suspend.c **** 
 375:ThreadX/common/src/tx_thread_system_suspend.c ****                     /* Yes, increment the return to idle return count.  */
 376:ThreadX/common/src/tx_thread_system_suspend.c ****                     _tx_thread_performance_idle_return_count++;
 377:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 378:ThreadX/common/src/tx_thread_system_suspend.c **** 
 379:ThreadX/common/src/tx_thread_system_suspend.c ****                     /* Preemption is needed - return to the system!  */
 380:ThreadX/common/src/tx_thread_system_suspend.c ****                     _tx_thread_system_return();
 381:ThreadX/common/src/tx_thread_system_suspend.c ****                 }
 382:ThreadX/common/src/tx_thread_system_suspend.c **** 
 383:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Return to caller.  */
 384:ThreadX/common/src/tx_thread_system_suspend.c ****                 return;
 385:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 386:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 387:ThreadX/common/src/tx_thread_system_suspend.c ****             else
 388:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 389:ThreadX/common/src/tx_thread_system_suspend.c **** 
 390:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Other threads at different priority levels are ready to run.  */
 391:ThreadX/common/src/tx_thread_system_suspend.c **** 
 392:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Calculate the lowest bit set in the priority map. */
 393:ThreadX/common/src/tx_thread_system_suspend.c ****                 TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 394:ThreadX/common/src/tx_thread_system_suspend.c **** 
 395:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Setup the next highest priority variable.  */
 396:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 397:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 398:ThreadX/common/src/tx_thread_system_suspend.c ****         }
 399:ThreadX/common/src/tx_thread_system_suspend.c **** 
 400:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Determine if the suspending thread is the thread designated to execute.  */
 401:ThreadX/common/src/tx_thread_system_suspend.c ****         if (thread_ptr == _tx_thread_execute_ptr)
 402:ThreadX/common/src/tx_thread_system_suspend.c ****         {
 403:ThreadX/common/src/tx_thread_system_suspend.c **** 
 404:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Pickup the highest priority thread to execute.  */
 405:ThreadX/common/src/tx_thread_system_suspend.c ****             _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 406:ThreadX/common/src/tx_thread_system_suspend.c **** 
 407:ThreadX/common/src/tx_thread_system_suspend.c **** #ifndef TX_DISABLE_PREEMPTION_THRESHOLD
 408:ThreadX/common/src/tx_thread_system_suspend.c **** 
 409:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Determine if a previous thread with preemption-threshold was preempted.  */
 410:ThreadX/common/src/tx_thread_system_suspend.c **** #if TX_MAX_PRIORITIES > 32
 411:ThreadX/common/src/tx_thread_system_suspend.c ****             if (_tx_thread_preempted_map_active != ((ULONG) 0))
 412:ThreadX/common/src/tx_thread_system_suspend.c **** #else
 413:ThreadX/common/src/tx_thread_system_suspend.c ****             if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
ARM GAS  /tmp/ccWmZ29h.s 			page 20


 414:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 415:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 416:ThreadX/common/src/tx_thread_system_suspend.c **** 
 417:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Yes, there was a thread preempted when it was using preemption-threshold.  */
 418:ThreadX/common/src/tx_thread_system_suspend.c **** 
 419:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Disable preemption.  */
 420:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_preempt_disable++;
 421:ThreadX/common/src/tx_thread_system_suspend.c **** 
 422:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Restore interrupts.  */
 423:ThreadX/common/src/tx_thread_system_suspend.c ****                 TX_RESTORE
 424:ThreadX/common/src/tx_thread_system_suspend.c **** 
 425:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Interrupts are enabled briefly here to keep the interrupt
 426:ThreadX/common/src/tx_thread_system_suspend.c ****                    lockout time deterministic.  */
 427:ThreadX/common/src/tx_thread_system_suspend.c **** 
 428:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Disable interrupts again.  */
 429:ThreadX/common/src/tx_thread_system_suspend.c ****                 TX_DISABLE
 430:ThreadX/common/src/tx_thread_system_suspend.c **** 
 431:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Decrement the preemption disable variable.  */
 432:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_preempt_disable--;
 433:ThreadX/common/src/tx_thread_system_suspend.c **** 
 434:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Calculate the thread with preemption threshold set that
 435:ThreadX/common/src/tx_thread_system_suspend.c ****                    was interrupted by a thread above the preemption level.  */
 436:ThreadX/common/src/tx_thread_system_suspend.c **** 
 437:ThreadX/common/src/tx_thread_system_suspend.c **** #if TX_MAX_PRIORITIES > 32
 438:ThreadX/common/src/tx_thread_system_suspend.c **** 
 439:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Calculate the index to find the next highest priority thread ready for execution
 440:ThreadX/common/src/tx_thread_system_suspend.c ****                 priority_map =    _tx_thread_preempted_map_active;
 441:ThreadX/common/src/tx_thread_system_suspend.c **** 
 442:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Calculate the lowest bit set in the priority map. */
 443:ThreadX/common/src/tx_thread_system_suspend.c ****                 TX_LOWEST_SET_BIT_CALCULATE(priority_map, map_index)
 444:ThreadX/common/src/tx_thread_system_suspend.c **** 
 445:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Calculate the base priority as well.  */
 446:ThreadX/common/src/tx_thread_system_suspend.c ****                 base_priority =  map_index * ((UINT) 32);
 447:ThreadX/common/src/tx_thread_system_suspend.c **** #else
 448:ThreadX/common/src/tx_thread_system_suspend.c **** 
 449:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Setup the base priority to zero.  */
 450:ThreadX/common/src/tx_thread_system_suspend.c ****                 base_priority =   ((UINT) 0);
 451:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 452:ThreadX/common/src/tx_thread_system_suspend.c **** 
 453:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Setup temporary preempted map.  */
 454:ThreadX/common/src/tx_thread_system_suspend.c ****                 priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 455:ThreadX/common/src/tx_thread_system_suspend.c **** 
 456:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Calculate the lowest bit set in the priority map. */
 457:ThreadX/common/src/tx_thread_system_suspend.c ****                 TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 458:ThreadX/common/src/tx_thread_system_suspend.c **** 
 459:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Setup the highest priority preempted thread.  */
 460:ThreadX/common/src/tx_thread_system_suspend.c ****                 priority =  base_priority + ((UINT) priority_bit);
 461:ThreadX/common/src/tx_thread_system_suspend.c **** 
 462:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Determine if the next highest priority thread is above the highest priority thre
 463:ThreadX/common/src/tx_thread_system_suspend.c ****                 if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread
 464:ThreadX/common/src/tx_thread_system_suspend.c ****                 {
 465:ThreadX/common/src/tx_thread_system_suspend.c **** 
 466:ThreadX/common/src/tx_thread_system_suspend.c ****                     /* Thread not allowed to execute until earlier preempted thread finishes or low
 467:ThreadX/common/src/tx_thread_system_suspend.c ****                        preemption-threshold.  */
 468:ThreadX/common/src/tx_thread_system_suspend.c ****                     _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 469:ThreadX/common/src/tx_thread_system_suspend.c **** 
 470:ThreadX/common/src/tx_thread_system_suspend.c ****                     /* Clear the corresponding bit in the preempted map, since the preemption has b
ARM GAS  /tmp/ccWmZ29h.s 			page 21


 471:ThreadX/common/src/tx_thread_system_suspend.c ****                     TX_MOD32_BIT_SET(priority, priority_bit)
 472:ThreadX/common/src/tx_thread_system_suspend.c ****                     _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & 
 473:ThreadX/common/src/tx_thread_system_suspend.c **** 
 474:ThreadX/common/src/tx_thread_system_suspend.c **** #if TX_MAX_PRIORITIES > 32
 475:ThreadX/common/src/tx_thread_system_suspend.c **** 
 476:ThreadX/common/src/tx_thread_system_suspend.c ****                     /* Determine if there are any other bits set in this preempt map.  */
 477:ThreadX/common/src/tx_thread_system_suspend.c ****                     if (_tx_thread_preempted_maps[MAP_INDEX] == ((ULONG) 0))
 478:ThreadX/common/src/tx_thread_system_suspend.c ****                     {
 479:ThreadX/common/src/tx_thread_system_suspend.c **** 
 480:ThreadX/common/src/tx_thread_system_suspend.c ****                         /* No, clear the active bit to signify this preempt map has nothing set.  *
 481:ThreadX/common/src/tx_thread_system_suspend.c ****                         TX_DIV32_BIT_SET(priority, priority_bit)
 482:ThreadX/common/src/tx_thread_system_suspend.c ****                         _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active & (~(pri
 483:ThreadX/common/src/tx_thread_system_suspend.c ****                     }
 484:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 485:ThreadX/common/src/tx_thread_system_suspend.c ****                 }
 486:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 487:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 488:ThreadX/common/src/tx_thread_system_suspend.c **** 
 489:ThreadX/common/src/tx_thread_system_suspend.c **** #ifndef TX_MISRA_ENABLE
 490:ThreadX/common/src/tx_thread_system_suspend.c **** 
 491:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 492:ThreadX/common/src/tx_thread_system_suspend.c **** 
 493:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Is the execute pointer different?  */
 494:ThreadX/common/src/tx_thread_system_suspend.c ****             if (_tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] != _t
 495:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 496:ThreadX/common/src/tx_thread_system_suspend.c **** 
 497:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Move to next entry.  */
 498:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_performance__execute_log_index++;
 499:ThreadX/common/src/tx_thread_system_suspend.c **** 
 500:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Check for wrap condition.  */
 501:ThreadX/common/src/tx_thread_system_suspend.c ****                 if (_tx_thread_performance__execute_log_index >= TX_THREAD_EXECUTE_LOG_SIZE)
 502:ThreadX/common/src/tx_thread_system_suspend.c ****                 {
 503:ThreadX/common/src/tx_thread_system_suspend.c **** 
 504:ThreadX/common/src/tx_thread_system_suspend.c ****                     /* Set the index to the beginning.  */
 505:ThreadX/common/src/tx_thread_system_suspend.c ****                     _tx_thread_performance__execute_log_index =  ((UINT) 0);
 506:ThreadX/common/src/tx_thread_system_suspend.c ****                 }
 507:ThreadX/common/src/tx_thread_system_suspend.c **** 
 508:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Log the new execute pointer.  */
 509:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _t
 510:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 511:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 512:ThreadX/common/src/tx_thread_system_suspend.c **** 
 513:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_ENABLE_EVENT_TRACE
 514:ThreadX/common/src/tx_thread_system_suspend.c **** 
 515:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Check that the event time stamp is unchanged.  A different
 516:ThreadX/common/src/tx_thread_system_suspend.c ****                timestamp means that a later event wrote over the thread
 517:ThreadX/common/src/tx_thread_system_suspend.c ****                suspend event. In that case, do nothing here.  */
 518:ThreadX/common/src/tx_thread_system_suspend.c ****             if (entry_ptr != TX_NULL)
 519:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 520:ThreadX/common/src/tx_thread_system_suspend.c **** 
 521:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Is the timestamp the same?  */
 522:ThreadX/common/src/tx_thread_system_suspend.c ****                 if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 523:ThreadX/common/src/tx_thread_system_suspend.c ****                 {
 524:ThreadX/common/src/tx_thread_system_suspend.c **** 
 525:ThreadX/common/src/tx_thread_system_suspend.c ****                     /* Timestamp is the same, set the "next thread pointer" to the new value of the
 526:ThreadX/common/src/tx_thread_system_suspend.c ****                        next thread to execute. This can be used by the trace analysis tool to keep
 527:ThreadX/common/src/tx_thread_system_suspend.c ****                        track of next thread execution.  */
ARM GAS  /tmp/ccWmZ29h.s 			page 22


 528:ThreadX/common/src/tx_thread_system_suspend.c ****                     entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_C
 529:ThreadX/common/src/tx_thread_system_suspend.c ****                 }
 530:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 531:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 532:ThreadX/common/src/tx_thread_system_suspend.c **** 
 533:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Restore interrupts.  */
 534:ThreadX/common/src/tx_thread_system_suspend.c ****             TX_RESTORE
 535:ThreadX/common/src/tx_thread_system_suspend.c **** 
 536:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Determine if preemption should take place. This is only possible if the current thre
 537:ThreadX/common/src/tx_thread_system_suspend.c ****                not the same as the execute thread pointer AND the system state and preempt disable 
 538:ThreadX/common/src/tx_thread_system_suspend.c ****             TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 539:ThreadX/common/src/tx_thread_system_suspend.c ****             if (combined_flags == ((ULONG) 0))
 540:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 541:ThreadX/common/src/tx_thread_system_suspend.c **** 
 542:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 543:ThreadX/common/src/tx_thread_system_suspend.c **** 
 544:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* No, there is another thread ready to run and will be scheduled upon return.  */
 545:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_performance_non_idle_return_count++;
 546:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 547:ThreadX/common/src/tx_thread_system_suspend.c **** 
 548:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Preemption is needed - return to the system!  */
 549:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_system_return();
 550:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 551:ThreadX/common/src/tx_thread_system_suspend.c **** 
 552:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Return to caller.  */
 553:ThreadX/common/src/tx_thread_system_suspend.c ****             return;
 554:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 555:ThreadX/common/src/tx_thread_system_suspend.c ****         }
 556:ThreadX/common/src/tx_thread_system_suspend.c **** 
 557:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 558:ThreadX/common/src/tx_thread_system_suspend.c **** 
 559:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Is the execute pointer different?  */
 560:ThreadX/common/src/tx_thread_system_suspend.c ****         if (_tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] != _tx_th
 561:ThreadX/common/src/tx_thread_system_suspend.c ****         {
 562:ThreadX/common/src/tx_thread_system_suspend.c **** 
 563:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Move to next entry.  */
 564:ThreadX/common/src/tx_thread_system_suspend.c ****             _tx_thread_performance__execute_log_index++;
 565:ThreadX/common/src/tx_thread_system_suspend.c **** 
 566:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Check for wrap condition.  */
 567:ThreadX/common/src/tx_thread_system_suspend.c ****             if (_tx_thread_performance__execute_log_index >= TX_THREAD_EXECUTE_LOG_SIZE)
 568:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 569:ThreadX/common/src/tx_thread_system_suspend.c **** 
 570:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Set the index to the beginning.  */
 571:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_performance__execute_log_index =  ((UINT) 0);
 572:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 573:ThreadX/common/src/tx_thread_system_suspend.c **** 
 574:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Log the new execute pointer.  */
 575:ThreadX/common/src/tx_thread_system_suspend.c ****             _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_th
 576:ThreadX/common/src/tx_thread_system_suspend.c ****         }
 577:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 578:ThreadX/common/src/tx_thread_system_suspend.c **** 
 579:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_ENABLE_EVENT_TRACE
 580:ThreadX/common/src/tx_thread_system_suspend.c **** 
 581:ThreadX/common/src/tx_thread_system_suspend.c ****          /* Check that the event time stamp is unchanged.  A different
 582:ThreadX/common/src/tx_thread_system_suspend.c ****             timestamp means that a later event wrote over the thread
 583:ThreadX/common/src/tx_thread_system_suspend.c ****             suspend event. In that case, do nothing here.  */
 584:ThreadX/common/src/tx_thread_system_suspend.c ****          if (entry_ptr != TX_NULL)
ARM GAS  /tmp/ccWmZ29h.s 			page 23


 585:ThreadX/common/src/tx_thread_system_suspend.c ****          {
 586:ThreadX/common/src/tx_thread_system_suspend.c **** 
 587:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Is the timestamp the same?  */
 588:ThreadX/common/src/tx_thread_system_suspend.c ****             if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 589:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 590:ThreadX/common/src/tx_thread_system_suspend.c **** 
 591:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Timestamp is the same, set the "next thread pointer" to the new value of the
 592:ThreadX/common/src/tx_thread_system_suspend.c ****                    next thread to execute. This can be used by the trace analysis tool to keep
 593:ThreadX/common/src/tx_thread_system_suspend.c ****                    track of next thread execution.  */
 594:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_MISRA_ENABLE
 595:ThreadX/common/src/tx_thread_system_suspend.c ****                 entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread
 596:ThreadX/common/src/tx_thread_system_suspend.c **** #else
 597:ThreadX/common/src/tx_thread_system_suspend.c ****                 entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVE
 598:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 599:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 600:ThreadX/common/src/tx_thread_system_suspend.c ****         }
 601:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 602:ThreadX/common/src/tx_thread_system_suspend.c ****     }
 603:ThreadX/common/src/tx_thread_system_suspend.c **** 
 604:ThreadX/common/src/tx_thread_system_suspend.c ****     /* Restore interrupts.  */
 605:ThreadX/common/src/tx_thread_system_suspend.c ****     TX_RESTORE
 606:ThreadX/common/src/tx_thread_system_suspend.c **** 
 607:ThreadX/common/src/tx_thread_system_suspend.c ****     /* Determine if a preemption condition is present.  */
 608:ThreadX/common/src/tx_thread_system_suspend.c ****     if (current_thread != _tx_thread_execute_ptr)
  96              		.loc 1 608 0
  97 0024 5E4B     		ldr	r3, .L16+8
  98 0026 1B68     		ldr	r3, [r3]
  99 0028 AB42     		cmp	r3, r5
 100 002a 0ED0     		beq	.L1
 609:ThreadX/common/src/tx_thread_system_suspend.c ****     {
 610:ThreadX/common/src/tx_thread_system_suspend.c **** 
 611:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_ENABLE_STACK_CHECKING
 612:ThreadX/common/src/tx_thread_system_suspend.c **** 
 613:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Pickup the next execute pointer.  */
 614:ThreadX/common/src/tx_thread_system_suspend.c ****         thread_ptr =  _tx_thread_execute_ptr;
 615:ThreadX/common/src/tx_thread_system_suspend.c **** 
 616:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Check this thread's stack.  */
 617:ThreadX/common/src/tx_thread_system_suspend.c ****         TX_THREAD_STACK_CHECK(thread_ptr)
 618:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 619:ThreadX/common/src/tx_thread_system_suspend.c **** 
 620:ThreadX/common/src/tx_thread_system_suspend.c ****         /* Determine if preemption should take place. This is only possible if the current thread p
 621:ThreadX/common/src/tx_thread_system_suspend.c ****            not the same as the execute thread pointer AND the system state and preempt disable flag
 622:ThreadX/common/src/tx_thread_system_suspend.c ****         TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 101              		.loc 1 622 0
 102 002c 5B4B     		ldr	r3, .L16+4
 103 002e 1B68     		ldr	r3, [r3]
 104              	.LVL5:
 623:ThreadX/common/src/tx_thread_system_suspend.c ****         if (combined_flags == ((ULONG) 0))
 105              		.loc 1 623 0
 106 0030 5BB9     		cbnz	r3, .L1
 107              	.LBB64:
 108              	.LBB65:
 576:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 577:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(int_posture);
 578:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 579:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 580:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
ARM GAS  /tmp/ccWmZ29h.s 			page 24


 581:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 582:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int interrupt_save;
 583:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 584:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     /* Set PendSV to invoke ThreadX scheduler.  */
 585:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 109              		.loc 2 585 0
 110 0032 5C4B     		ldr	r3, .L16+12
 111              	.LVL6:
 112 0034 4FF08052 		mov	r2, #268435456
 113 0038 1A60     		str	r2, [r3]
 114              	.LBB66:
 115              	.LBB67:
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 116              		.loc 2 477 0
 117              		.syntax unified
 118              	@ 477 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 119 003a EFF30583 		 MRS  r3,IPSR 
 120              	@ 0 "" 2
 121              		.thumb
 122              		.syntax unified
 123              	.LBE67:
 124              	.LBE66:
 586:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     if (__get_ipsr_value() == 0)
 125              		.loc 2 586 0
 126 003e 23B9     		cbnz	r3, .L1
 127              	.LBB68:
 128              	.LBB69:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 129              		.loc 2 539 0
 130              		.syntax unified
 131              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 132 0040 EFF31083 		MRS  r3, PRIMASK 
 133              	@ 0 "" 2
 134              		.thumb
 135              		.syntax unified
 136              	.LBE69:
 137              	.LBE68:
 138              	.LBB70:
 139              	.LBB71:
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 140              		.loc 2 552 0
 141              		.syntax unified
 142              	@ 552 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 143 0044 62B6     		CPSIE  i
 144              	@ 0 "" 2
 145              		.thumb
 146              		.syntax unified
 147              	.LBE71:
 148              	.LBE70:
 149              	.LBB72:
 150              	.LBB73:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 151              		.loc 2 562 0
 152              		.syntax unified
 153              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 154 0046 83F31088 		MSR  PRIMASK,r3
 155              	@ 0 "" 2
ARM GAS  /tmp/ccWmZ29h.s 			page 25


 156              	.LVL7:
 157              		.thumb
 158              		.syntax unified
 159              	.L1:
 160              	.LBE73:
 161              	.LBE72:
 162              	.LBE65:
 163              	.LBE64:
 624:ThreadX/common/src/tx_thread_system_suspend.c ****         {
 625:ThreadX/common/src/tx_thread_system_suspend.c **** 
 626:ThreadX/common/src/tx_thread_system_suspend.c **** #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
 627:ThreadX/common/src/tx_thread_system_suspend.c **** 
 628:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Determine if an idle system return is present.  */
 629:ThreadX/common/src/tx_thread_system_suspend.c ****             if (_tx_thread_execute_ptr == TX_NULL)
 630:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 631:ThreadX/common/src/tx_thread_system_suspend.c **** 
 632:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* Yes, increment the return to idle return count.  */
 633:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_performance_idle_return_count++;
 634:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 635:ThreadX/common/src/tx_thread_system_suspend.c ****             else
 636:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 637:ThreadX/common/src/tx_thread_system_suspend.c **** 
 638:ThreadX/common/src/tx_thread_system_suspend.c ****                 /* No, there is another thread ready to run and will be scheduled upon return.  */
 639:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_performance_non_idle_return_count++;
 640:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 641:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 642:ThreadX/common/src/tx_thread_system_suspend.c **** 
 643:ThreadX/common/src/tx_thread_system_suspend.c ****             /* Preemption is needed - return to the system!  */
 644:ThreadX/common/src/tx_thread_system_suspend.c ****             _tx_thread_system_return();
 645:ThreadX/common/src/tx_thread_system_suspend.c ****         }
 646:ThreadX/common/src/tx_thread_system_suspend.c ****     }
 647:ThreadX/common/src/tx_thread_system_suspend.c **** 
 648:ThreadX/common/src/tx_thread_system_suspend.c ****     /* Return to caller.  */
 649:ThreadX/common/src/tx_thread_system_suspend.c ****     return;
 650:ThreadX/common/src/tx_thread_system_suspend.c **** }
 164              		.loc 1 650 0
 165 004a 70BD     		pop	{r4, r5, r6, pc}
 166              	.LVL8:
 167              	.L12:
 130:ThreadX/common/src/tx_thread_system_suspend.c **** 
 168              		.loc 1 130 0
 169 004c C36C     		ldr	r3, [r0, #76]
 170              	.LVL9:
 133:ThreadX/common/src/tx_thread_system_suspend.c ****         {
 171              		.loc 1 133 0
 172 004e 13B1     		cbz	r3, .L3
 137:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 173              		.loc 1 137 0
 174 0050 B3F1FF3F 		cmp	r3, #-1
 175 0054 03D1     		bne	.L14
 176              	.LVL10:
 177              	.L3:
 146:ThreadX/common/src/tx_thread_system_suspend.c ****     }
 178              		.loc 1 146 0
 179 0056 E269     		ldr	r2, [r4, #28]
 180 0058 534B     		ldr	r3, .L16+16
 181 005a 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccWmZ29h.s 			page 26


 182 005c D9E7     		b	.L2
 183              	.LVL11:
 184              	.L14:
 141:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 185              		.loc 1 141 0
 186 005e 4C30     		adds	r0, r0, #76
 187              	.LVL12:
 188 0060 FFF7FEFF 		bl	_tx_timer_system_activate
 189              	.LVL13:
 190 0064 F7E7     		b	.L3
 191              	.L13:
 196:ThreadX/common/src/tx_thread_system_suspend.c **** 
 192              		.loc 1 196 0
 193 0066 0023     		movs	r3, #0
 194 0068 A363     		str	r3, [r4, #56]
 199:ThreadX/common/src/tx_thread_system_suspend.c **** 
 195              		.loc 1 199 0
 196 006a E26A     		ldr	r2, [r4, #44]
 197              	.LVL14:
 202:ThreadX/common/src/tx_thread_system_suspend.c **** 
 198              		.loc 1 202 0
 199 006c 236A     		ldr	r3, [r4, #32]
 200              	.LVL15:
 206:ThreadX/common/src/tx_thread_system_suspend.c ****         {
 201              		.loc 1 206 0
 202 006e 9C42     		cmp	r4, r3
 203 0070 5BD0     		beq	.L5
 212:ThreadX/common/src/tx_thread_system_suspend.c **** 
 204              		.loc 1 212 0
 205 0072 616A     		ldr	r1, [r4, #36]
 206              	.LVL16:
 215:ThreadX/common/src/tx_thread_system_suspend.c ****             ready_previous -> tx_thread_ready_next =    ready_next;
 207              		.loc 1 215 0
 208 0074 5962     		str	r1, [r3, #36]
 216:ThreadX/common/src/tx_thread_system_suspend.c **** 
 209              		.loc 1 216 0
 210 0076 0B62     		str	r3, [r1, #32]
 219:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 211              		.loc 1 219 0
 212 0078 4C49     		ldr	r1, .L16+20
 213              	.LVL17:
 214 007a 51F82210 		ldr	r1, [r1, r2, lsl #2]
 215 007e A142     		cmp	r1, r4
 216 0080 44D0     		beq	.L15
 217              	.LVL18:
 218              	.L6:
 401:ThreadX/common/src/tx_thread_system_suspend.c ****         {
 219              		.loc 1 401 0
 220 0082 474B     		ldr	r3, .L16+8
 221 0084 1B68     		ldr	r3, [r3]
 222 0086 A342     		cmp	r3, r4
 223 0088 CAD1     		bne	.L4
 405:ThreadX/common/src/tx_thread_system_suspend.c **** 
 224              		.loc 1 405 0
 225 008a 494B     		ldr	r3, .L16+24
 226 008c 1A68     		ldr	r2, [r3]
 227 008e 474B     		ldr	r3, .L16+20
ARM GAS  /tmp/ccWmZ29h.s 			page 27


 228 0090 53F82220 		ldr	r2, [r3, r2, lsl #2]
 229 0094 424B     		ldr	r3, .L16+8
 230 0096 1A60     		str	r2, [r3]
 413:ThreadX/common/src/tx_thread_system_suspend.c **** #endif
 231              		.loc 1 413 0
 232 0098 464B     		ldr	r3, .L16+28
 233 009a 1B68     		ldr	r3, [r3]
 234 009c 13B3     		cbz	r3, .L10
 420:ThreadX/common/src/tx_thread_system_suspend.c **** 
 235              		.loc 1 420 0
 236 009e 3F4B     		ldr	r3, .L16+4
 237 00a0 1A68     		ldr	r2, [r3]
 238 00a2 0132     		adds	r2, r2, #1
 239 00a4 1A60     		str	r2, [r3]
 240              	.LVL19:
 241              	.LBB74:
 242              	.LBB75:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 243              		.loc 2 562 0
 244              		.syntax unified
 245              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 246 00a6 86F31088 		MSR  PRIMASK,r6
 247              	@ 0 "" 2
 248              	.LVL20:
 249              		.thumb
 250              		.syntax unified
 251              	.LBE75:
 252              	.LBE74:
 253              	.LBB76:
 254              	.LBB77:
 255              	.LBB78:
 256              	.LBB79:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 257              		.loc 2 539 0
 258              		.syntax unified
 259              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 260 00aa EFF31086 		MRS  r6, PRIMASK 
 261              	@ 0 "" 2
 262              		.thumb
 263              		.syntax unified
 264              	.LBE79:
 265              	.LBE78:
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 266              		.loc 2 575 0
 267              		.syntax unified
 268              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 269 00ae 72B6     		CPSID i
 270              	@ 0 "" 2
 271              		.thumb
 272              		.syntax unified
 273              	.LBE77:
 274              	.LBE76:
 432:ThreadX/common/src/tx_thread_system_suspend.c **** 
 275              		.loc 1 432 0
 276 00b0 1A68     		ldr	r2, [r3]
 277 00b2 013A     		subs	r2, r2, #1
 278 00b4 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccWmZ29h.s 			page 28


 279              	.LVL21:
 454:ThreadX/common/src/tx_thread_system_suspend.c **** 
 280              		.loc 1 454 0
 281 00b6 3F4B     		ldr	r3, .L16+28
 282 00b8 1A68     		ldr	r2, [r3]
 283              	.LVL22:
 457:ThreadX/common/src/tx_thread_system_suspend.c **** 
 284              		.loc 1 457 0
 285              		.syntax unified
 286              	@ 457 "ThreadX/common/src/tx_thread_system_suspend.c" 1
 287 00ba 92FAA2F3 		 RBIT r3,r2 
 288              	@ 0 "" 2
 289              	.LVL23:
 290              	@ 457 "ThreadX/common/src/tx_thread_system_suspend.c" 1
 291 00be B3FA83F3 		 CLZ  r3,r3 
 292              	@ 0 "" 2
 293              	.LVL24:
 463:ThreadX/common/src/tx_thread_system_suspend.c ****                 {
 294              		.loc 1 463 0
 295              		.thumb
 296              		.syntax unified
 297 00c2 3A49     		ldr	r1, .L16+20
 298 00c4 51F82310 		ldr	r1, [r1, r3, lsl #2]
 299 00c8 CC6B     		ldr	r4, [r1, #60]
 300              	.LVL25:
 301 00ca 3948     		ldr	r0, .L16+24
 302 00cc 0068     		ldr	r0, [r0]
 303 00ce 8442     		cmp	r4, r0
 304 00d0 08D8     		bhi	.L10
 468:ThreadX/common/src/tx_thread_system_suspend.c **** 
 305              		.loc 1 468 0
 306 00d2 3348     		ldr	r0, .L16+8
 307 00d4 0160     		str	r1, [r0]
 471:ThreadX/common/src/tx_thread_system_suspend.c ****                     _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & 
 308              		.loc 1 471 0
 309 00d6 0121     		movs	r1, #1
 310 00d8 01FA03F3 		lsl	r3, r1, r3
 311              	.LVL26:
 472:ThreadX/common/src/tx_thread_system_suspend.c **** 
 312              		.loc 1 472 0
 313 00dc 22EA0302 		bic	r2, r2, r3
 314 00e0 344B     		ldr	r3, .L16+28
 315              	.LVL27:
 316 00e2 1A60     		str	r2, [r3]
 317              	.LVL28:
 318              	.L10:
 319              	.LBB80:
 320              	.LBB81:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 321              		.loc 2 562 0
 322              		.syntax unified
 323              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 324 00e4 86F31088 		MSR  PRIMASK,r6
 325              	@ 0 "" 2
 326              	.LVL29:
 327              		.thumb
 328              		.syntax unified
ARM GAS  /tmp/ccWmZ29h.s 			page 29


 329              	.LBE81:
 330              	.LBE80:
 538:ThreadX/common/src/tx_thread_system_suspend.c ****             if (combined_flags == ((ULONG) 0))
 331              		.loc 1 538 0
 332 00e8 2C4B     		ldr	r3, .L16+4
 333 00ea 1B68     		ldr	r3, [r3]
 334              	.LVL30:
 539:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 335              		.loc 1 539 0
 336 00ec 002B     		cmp	r3, #0
 337 00ee ACD1     		bne	.L1
 338              	.LBB82:
 339              	.LBB83:
 585:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     if (__get_ipsr_value() == 0)
 340              		.loc 2 585 0
 341 00f0 2C4B     		ldr	r3, .L16+12
 342              	.LVL31:
 343 00f2 4FF08052 		mov	r2, #268435456
 344 00f6 1A60     		str	r2, [r3]
 345              	.LBB84:
 346              	.LBB85:
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 347              		.loc 2 477 0
 348              		.syntax unified
 349              	@ 477 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 350 00f8 EFF30583 		 MRS  r3,IPSR 
 351              	@ 0 "" 2
 352              		.thumb
 353              		.syntax unified
 354              	.LBE85:
 355              	.LBE84:
 356              		.loc 2 586 0
 357 00fc 002B     		cmp	r3, #0
 358 00fe A4D1     		bne	.L1
 359              	.LBB86:
 360              	.LBB87:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 361              		.loc 2 539 0
 362              		.syntax unified
 363              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 364 0100 EFF31083 		MRS  r3, PRIMASK 
 365              	@ 0 "" 2
 366              		.thumb
 367              		.syntax unified
 368              	.LBE87:
 369              	.LBE86:
 370              	.LBB88:
 371              	.LBB89:
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 372              		.loc 2 552 0
 373              		.syntax unified
 374              	@ 552 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 375 0104 62B6     		CPSIE  i
 376              	@ 0 "" 2
 377              		.thumb
 378              		.syntax unified
 379              	.LBE89:
ARM GAS  /tmp/ccWmZ29h.s 			page 30


 380              	.LBE88:
 381              	.LBB90:
 382              	.LBB91:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 383              		.loc 2 562 0
 384              		.syntax unified
 385              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 386 0106 83F31088 		MSR  PRIMASK,r3
 387              	@ 0 "" 2
 388              		.thumb
 389              		.syntax unified
 390 010a 9EE7     		b	.L1
 391              	.LVL32:
 392              	.L15:
 393              	.LBE91:
 394              	.LBE90:
 395              	.LBE83:
 396              	.LBE82:
 223:ThreadX/common/src/tx_thread_system_suspend.c **** 
 397              		.loc 1 223 0
 398 010c 2749     		ldr	r1, .L16+20
 399 010e 41F82230 		str	r3, [r1, r2, lsl #2]
 234:ThreadX/common/src/tx_thread_system_suspend.c ****                 {
 400              		.loc 1 234 0
 401 0112 284B     		ldr	r3, .L16+28
 402              	.LVL33:
 403 0114 1B68     		ldr	r3, [r3]
 404 0116 002B     		cmp	r3, #0
 405 0118 B3D0     		beq	.L6
 238:ThreadX/common/src/tx_thread_system_suspend.c ****                     _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & 
 406              		.loc 1 238 0
 407 011a 0121     		movs	r1, #1
 408              	.LVL34:
 409 011c 01FA02F2 		lsl	r2, r1, r2
 410              	.LVL35:
 239:ThreadX/common/src/tx_thread_system_suspend.c **** 
 411              		.loc 1 239 0
 412 0120 23EA0203 		bic	r3, r3, r2
 413 0124 234A     		ldr	r2, .L16+28
 414              	.LVL36:
 415 0126 1360     		str	r3, [r2]
 416 0128 ABE7     		b	.L6
 417              	.LVL37:
 418              	.L5:
 261:ThreadX/common/src/tx_thread_system_suspend.c **** 
 419              		.loc 1 261 0
 420 012a 204B     		ldr	r3, .L16+20
 421              	.LVL38:
 422 012c 0021     		movs	r1, #0
 423 012e 43F82210 		str	r1, [r3, r2, lsl #2]
 424              	.LVL39:
 270:ThreadX/common/src/tx_thread_system_suspend.c ****             _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priorit
 425              		.loc 1 270 0
 426 0132 0123     		movs	r3, #1
 427 0134 03FA02F2 		lsl	r2, r3, r2
 428              	.LVL40:
 271:ThreadX/common/src/tx_thread_system_suspend.c **** 
ARM GAS  /tmp/ccWmZ29h.s 			page 31


 429              		.loc 1 271 0
 430 0138 1F49     		ldr	r1, .L16+32
 431 013a 0B68     		ldr	r3, [r1]
 432 013c D243     		mvns	r2, r2
 433              	.LVL41:
 434 013e 1340     		ands	r3, r3, r2
 435 0140 0B60     		str	r3, [r1]
 288:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 436              		.loc 1 288 0
 437 0142 1C49     		ldr	r1, .L16+28
 438 0144 0968     		ldr	r1, [r1]
 439 0146 11B1     		cbz	r1, .L7
 293:ThreadX/common/src/tx_thread_system_suspend.c **** 
 440              		.loc 1 293 0
 441 0148 0A40     		ands	r2, r2, r1
 442              	.LVL42:
 443 014a 1A49     		ldr	r1, .L16+28
 444 014c 0A60     		str	r2, [r1]
 445              	.L7:
 446              	.LVL43:
 334:ThreadX/common/src/tx_thread_system_suspend.c ****             {
 447              		.loc 1 334 0
 448 014e DBB9     		cbnz	r3, .L8
 339:ThreadX/common/src/tx_thread_system_suspend.c ****                 _tx_thread_execute_ptr =       TX_NULL;
 449              		.loc 1 339 0
 450 0150 174B     		ldr	r3, .L16+24
 451              	.LVL44:
 452 0152 2022     		movs	r2, #32
 453 0154 1A60     		str	r2, [r3]
 340:ThreadX/common/src/tx_thread_system_suspend.c **** 
 454              		.loc 1 340 0
 455 0156 124B     		ldr	r3, .L16+8
 456 0158 0022     		movs	r2, #0
 457 015a 1A60     		str	r2, [r3]
 458              	.LVL45:
 459              	.LBB92:
 460              	.LBB93:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 461              		.loc 2 562 0
 462              		.syntax unified
 463              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 464 015c 86F31088 		MSR  PRIMASK,r6
 465              	@ 0 "" 2
 466              	.LVL46:
 467              		.thumb
 468              		.syntax unified
 469              	.LBE93:
 470              	.LBE92:
 369:ThreadX/common/src/tx_thread_system_suspend.c ****                 if (combined_flags == ((ULONG) 0))
 471              		.loc 1 369 0
 472 0160 0E4B     		ldr	r3, .L16+4
 473 0162 1B68     		ldr	r3, [r3]
 474              	.LVL47:
 370:ThreadX/common/src/tx_thread_system_suspend.c ****                 {
 475              		.loc 1 370 0
 476 0164 002B     		cmp	r3, #0
 477 0166 7FF470AF 		bne	.L1
ARM GAS  /tmp/ccWmZ29h.s 			page 32


 478              	.LBB94:
 479              	.LBB95:
 585:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     if (__get_ipsr_value() == 0)
 480              		.loc 2 585 0
 481 016a 0E4B     		ldr	r3, .L16+12
 482              	.LVL48:
 483 016c 4FF08052 		mov	r2, #268435456
 484 0170 1A60     		str	r2, [r3]
 485              	.LVL49:
 486              	.LBB96:
 487              	.LBB97:
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 488              		.loc 2 477 0
 489              		.syntax unified
 490              	@ 477 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 491 0172 EFF30583 		 MRS  r3,IPSR 
 492              	@ 0 "" 2
 493              		.thumb
 494              		.syntax unified
 495              	.LBE97:
 496              	.LBE96:
 497              		.loc 2 586 0
 498 0176 002B     		cmp	r3, #0
 499 0178 7FF467AF 		bne	.L1
 500              	.LBB98:
 501              	.LBB99:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 502              		.loc 2 539 0
 503              		.syntax unified
 504              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 505 017c EFF31083 		MRS  r3, PRIMASK 
 506              	@ 0 "" 2
 507              		.thumb
 508              		.syntax unified
 509              	.LBE99:
 510              	.LBE98:
 511              	.LBB100:
 512              	.LBB101:
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 513              		.loc 2 552 0
 514              		.syntax unified
 515              	@ 552 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 516 0180 62B6     		CPSIE  i
 517              	@ 0 "" 2
 518              		.thumb
 519              		.syntax unified
 520              	.LBE101:
 521              	.LBE100:
 522              	.LBB102:
 523              	.LBB103:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524              		.loc 2 562 0
 525              		.syntax unified
 526              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 527 0182 83F31088 		MSR  PRIMASK,r3
 528              	@ 0 "" 2
 529              		.thumb
ARM GAS  /tmp/ccWmZ29h.s 			page 33


 530              		.syntax unified
 531 0186 60E7     		b	.L1
 532              	.LVL50:
 533              	.L8:
 534              	.LBE103:
 535              	.LBE102:
 536              	.LBE95:
 537              	.LBE94:
 393:ThreadX/common/src/tx_thread_system_suspend.c **** 
 538              		.loc 1 393 0
 539              		.syntax unified
 540              	@ 393 "ThreadX/common/src/tx_thread_system_suspend.c" 1
 541 0188 93FAA3F3 		 RBIT r3,r3 
 542              	@ 0 "" 2
 543              	.LVL51:
 544              	@ 393 "ThreadX/common/src/tx_thread_system_suspend.c" 1
 545 018c B3FA83F3 		 CLZ  r3,r3 
 546              	@ 0 "" 2
 547              	.LVL52:
 396:ThreadX/common/src/tx_thread_system_suspend.c ****             }
 548              		.loc 1 396 0
 549              		.thumb
 550              		.syntax unified
 551 0190 074A     		ldr	r2, .L16+24
 552 0192 1360     		str	r3, [r2]
 553 0194 75E7     		b	.L6
 554              	.L17:
 555 0196 00BF     		.align	2
 556              	.L16:
 557 0198 00000000 		.word	_tx_thread_current_ptr
 558 019c 00000000 		.word	_tx_thread_preempt_disable
 559 01a0 00000000 		.word	_tx_thread_execute_ptr
 560 01a4 04ED00E0 		.word	-536810236
 561 01a8 00000000 		.word	_tx_timer_time_slice
 562 01ac 00000000 		.word	_tx_thread_priority_list
 563 01b0 00000000 		.word	_tx_thread_highest_priority
 564 01b4 00000000 		.word	_tx_thread_preempted_maps
 565 01b8 00000000 		.word	_tx_thread_priority_maps
 566              		.cfi_endproc
 567              	.LFE8:
 569              		.text
 570              	.Letext0:
 571              		.file 3 "/usr/include/newlib/sys/lock.h"
 572              		.file 4 "/usr/include/newlib/sys/_types.h"
 573              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 574              		.file 6 "/usr/include/newlib/sys/reent.h"
 575              		.file 7 "/usr/include/newlib/stdlib.h"
 576              		.file 8 "ThreadX/common/inc/tx_api.h"
 577              		.file 9 "ThreadX/common/inc/tx_timer.h"
 578              		.file 10 "ThreadX/common/inc/tx_thread.h"
ARM GAS  /tmp/ccWmZ29h.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_thread_system_suspend.c
     /tmp/ccWmZ29h.s:18     .text._tx_thread_system_suspend:0000000000000000 $t
     /tmp/ccWmZ29h.s:25     .text._tx_thread_system_suspend:0000000000000000 _tx_thread_system_suspend
     /tmp/ccWmZ29h.s:557    .text._tx_thread_system_suspend:0000000000000198 $d

UNDEFINED SYMBOLS
_tx_timer_system_activate
_tx_thread_current_ptr
_tx_thread_preempt_disable
_tx_thread_execute_ptr
_tx_timer_time_slice
_tx_thread_priority_list
_tx_thread_highest_priority
_tx_thread_preempted_maps
_tx_thread_priority_maps
