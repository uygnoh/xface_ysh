
STM32F411XX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004510  08004510  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004518  08004518  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ea8  2000000c  0800452c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eb4  0800452c  00021eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e3e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d72  00000000  00000000  00036e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00039bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  0003ab00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018307  00000000  00000000  0003b8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e2b  00000000  00000000  00053bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000914cc  00000000  00000000  00065a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6ed6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d08  00000000  00000000  000f6f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004378 	.word	0x08004378

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004378 	.word	0x08004378

080001d8 <OS_CPU_FP_Reg_Push>:

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))

.thumb_func
OS_CPU_FP_Reg_Push:
    MRS     R1, PSP                                             @ PSP is process stack pointer
 80001d8:	f3ef 8109 	mrs	r1, PSP
    CBZ     R1, OS_CPU_FP_nosave                                @ Skip FP register save the first time
 80001dc:	b121      	cbz	r1, 80001e8 <OS_CPU_FP_nosave>

    VSTMDB  R0!, {S16-S31}
 80001de:	ed20 8a10 	vstmdb	r0!, {s16-s31}
    LDR     R1, =OSTCBCur
 80001e2:	4951      	ldr	r1, [pc, #324]	; (8000328 <PendSV_Handler+0x7a>)
    LDR     R2, [R1]
 80001e4:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 80001e6:	6010      	str	r0, [r2, #0]

080001e8 <OS_CPU_FP_nosave>:
OS_CPU_FP_nosave:
    BX      LR
 80001e8:	4770      	bx	lr

080001ea <OS_CPU_FP_Reg_Pop>:

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))

.thumb_func
OS_CPU_FP_Reg_Pop:
    VLDMIA  R0!, {S16-S31}
 80001ea:	ecb0 8a10 	vldmia	r0!, {s16-s31}
    LDR     R1, =OSTCBHighRdy
 80001ee:	494f      	ldr	r1, [pc, #316]	; (800032c <PendSV_Handler+0x7e>)
    LDR     R2, [R1]
 80001f0:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 80001f2:	6010      	str	r0, [r2, #0]
    BX      LR
 80001f4:	4770      	bx	lr

080001f6 <OS_CPU_SR_Save>:
@                      CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_SR_Save:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001f6:	b672      	cpsid	i
    PUSH   {R1}
 80001f8:	b402      	push	{r1}
    MRS     R1, BASEPRI
 80001fa:	f3ef 8111 	mrs	r1, BASEPRI
    MSR     BASEPRI, R0
 80001fe:	f380 8811 	msr	BASEPRI, r0
    DSB
 8000202:	f3bf 8f4f 	dsb	sy
    ISB
 8000206:	f3bf 8f6f 	isb	sy
    MOV     R0, R1
 800020a:	4608      	mov	r0, r1
    POP    {R1}
 800020c:	bc02      	pop	{r1}
    CPSIE   I
 800020e:	b662      	cpsie	i
    BX      LR
 8000210:	4770      	bx	lr

08000212 <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 8000212:	b672      	cpsid	i
    MSR     BASEPRI, R0
 8000214:	f380 8811 	msr	BASEPRI, r0
    DSB
 8000218:	f3bf 8f4f 	dsb	sy
    ISB
 800021c:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000220:	b662      	cpsie	i
    BX      LR
 8000222:	4770      	bx	lr

08000224 <OSStartHighRdy>:
@              i) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000224:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 8000226:	f64e 5022 	movw	r0, #60706	; 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 800022a:	f2ce 0000 	movt	r0, #57344	; 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 800022e:	f240 01ff 	movw	r1, #255	; 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 8000232:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 8000236:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000238:	2000      	movs	r0, #0
    MSR     PSP, R0
 800023a:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 800023e:	f640 00bc 	movw	r0, #2236	; 0x8bc
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 8000242:	f2c2 0000 	movt	r0, #8192	; 0x2000
    LDR     R1, [R0]
 8000246:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 8000248:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 800024c:	f002 fa82 	bl	8002754 <OSTaskSwHook>

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000250:	4837      	ldr	r0, [pc, #220]	; (8000330 <PendSV_Handler+0x82>)
    MOVS    R1, #1
 8000252:	2101      	movs	r1, #1
    STRB    R1, [R0]
 8000254:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000256:	f640 7094 	movw	r0, #3988	; 0xf94
    MOVT    R0, #:upper16:OSPrioCur
 800025a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800025e:	f640 5112 	movw	r1, #3346	; 0xd12
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000262:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 8000266:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000268:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCur                              @ OSTCBCur  = OSTCBHighRdy;
 800026a:	f241 30cc 	movw	r0, #5068	; 0x13cc
    MOVT    R0, #:upper16:OSTCBCur
 800026e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdy
 8000272:	f241 11b4 	movw	r1, #4532	; 0x11b4
    MOVT    R1, #:upper16:OSTCBHighRdy
 8000276:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 800027a:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 800027c:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 800027e:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000280:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000284:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000288:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 800028c:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 8000290:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 8000294:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000298:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 800029a:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 800029e:	bc06      	pop	{r1, r2}
    CPSIE    I
 80002a0:	b662      	cpsie	i
    BX       R1
 80002a2:	4708      	bx	r1

080002a4 <OSCtxSw>:
@********************************************************************************************************

.thumb_func
OSCtxSw:
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002a4:	4823      	ldr	r0, [pc, #140]	; (8000334 <PendSV_Handler+0x86>)
    LDR     R1, =NVIC_PENDSVSET
 80002a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 80002aa:	6001      	str	r1, [r0, #0]
    BX      LR
 80002ac:	4770      	bx	lr

080002ae <PendSV_Handler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
PendSV_Handler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 80002ae:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 80002b0:	f640 02c0 	movw	r2, #2240	; 0x8c0
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 80002b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    LDR     R1, [R2]
 80002b8:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 80002ba:	f381 8811 	msr	BASEPRI, r1
    DSB
 80002be:	f3bf 8f4f 	dsb	sy
    ISB
 80002c2:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80002c6:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002c8:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 80002cc:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCur                              @ OSTCBCur->OSTCBStkPtr = SP;
 80002d0:	f241 35cc 	movw	r5, #5068	; 0x13cc
    MOVT    R5, #:upper16:OSTCBCur
 80002d4:	f2c2 0500 	movt	r5, #8192	; 0x2000
    LDR     R1, [R5]
 80002d8:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80002da:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 80002dc:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80002de:	f002 fa39 	bl	8002754 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002e2:	f640 7094 	movw	r0, #3988	; 0xf94
    MOVT    R0, #:upper16:OSPrioCur
 80002e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002ea:	f640 5112 	movw	r1, #3346	; 0xd12
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002ee:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 80002f2:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002f4:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdy                          @ OSTCBCur  = OSTCBHighRdy;
 80002f6:	f241 11b4 	movw	r1, #4532	; 0x11b4
    MOVT    R1, #:upper16:OSTCBHighRdy
 80002fa:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 80002fe:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000300:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 8000302:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0,  [R2]                                           @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 8000306:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 8000308:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800030c:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 8000310:	f04f 0200 	mov.w	r2, #0
    CPSID   I
 8000314:	b672      	cpsid	i
    MSR     BASEPRI, R2
 8000316:	f382 8811 	msr	BASEPRI, r2
    DSB
 800031a:	f3bf 8f4f 	dsb	sy
    ISB
 800031e:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000322:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 8000324:	4770      	bx	lr
 8000326:	0000      	.short	0x0000
    LDR     R1, =OSTCBCur
 8000328:	200013cc 	.word	0x200013cc
    LDR     R1, =OSTCBHighRdy
 800032c:	200011b4 	.word	0x200011b4
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000330:	20000d09 	.word	0x20000d09
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000334:	e000ed04 	.word	0xe000ed04

08000338 <__aeabi_uldivmod>:
 8000338:	b953      	cbnz	r3, 8000350 <__aeabi_uldivmod+0x18>
 800033a:	b94a      	cbnz	r2, 8000350 <__aeabi_uldivmod+0x18>
 800033c:	2900      	cmp	r1, #0
 800033e:	bf08      	it	eq
 8000340:	2800      	cmpeq	r0, #0
 8000342:	bf1c      	itt	ne
 8000344:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000348:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800034c:	f000 b96e 	b.w	800062c <__aeabi_idiv0>
 8000350:	f1ad 0c08 	sub.w	ip, sp, #8
 8000354:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000358:	f000 f806 	bl	8000368 <__udivmoddi4>
 800035c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000364:	b004      	add	sp, #16
 8000366:	4770      	bx	lr

08000368 <__udivmoddi4>:
 8000368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800036c:	9d08      	ldr	r5, [sp, #32]
 800036e:	4604      	mov	r4, r0
 8000370:	468c      	mov	ip, r1
 8000372:	2b00      	cmp	r3, #0
 8000374:	f040 8083 	bne.w	800047e <__udivmoddi4+0x116>
 8000378:	428a      	cmp	r2, r1
 800037a:	4617      	mov	r7, r2
 800037c:	d947      	bls.n	800040e <__udivmoddi4+0xa6>
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	b142      	cbz	r2, 8000396 <__udivmoddi4+0x2e>
 8000384:	f1c2 0020 	rsb	r0, r2, #32
 8000388:	fa24 f000 	lsr.w	r0, r4, r0
 800038c:	4091      	lsls	r1, r2
 800038e:	4097      	lsls	r7, r2
 8000390:	ea40 0c01 	orr.w	ip, r0, r1
 8000394:	4094      	lsls	r4, r2
 8000396:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800039a:	0c23      	lsrs	r3, r4, #16
 800039c:	fbbc f6f8 	udiv	r6, ip, r8
 80003a0:	fa1f fe87 	uxth.w	lr, r7
 80003a4:	fb08 c116 	mls	r1, r8, r6, ip
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f10e 	mul.w	r1, r6, lr
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x60>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003ba:	f080 8119 	bcs.w	80005f0 <__udivmoddi4+0x288>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 8116 	bls.w	80005f0 <__udivmoddi4+0x288>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d909      	bls.n	80003f4 <__udivmoddi4+0x8c>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e6:	f080 8105 	bcs.w	80005f4 <__udivmoddi4+0x28c>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	f240 8102 	bls.w	80005f4 <__udivmoddi4+0x28c>
 80003f0:	3802      	subs	r0, #2
 80003f2:	443c      	add	r4, r7
 80003f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f8:	eba4 040e 	sub.w	r4, r4, lr
 80003fc:	2600      	movs	r6, #0
 80003fe:	b11d      	cbz	r5, 8000408 <__udivmoddi4+0xa0>
 8000400:	40d4      	lsrs	r4, r2
 8000402:	2300      	movs	r3, #0
 8000404:	e9c5 4300 	strd	r4, r3, [r5]
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	b902      	cbnz	r2, 8000412 <__udivmoddi4+0xaa>
 8000410:	deff      	udf	#255	; 0xff
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	2a00      	cmp	r2, #0
 8000418:	d150      	bne.n	80004bc <__udivmoddi4+0x154>
 800041a:	1bcb      	subs	r3, r1, r7
 800041c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	2601      	movs	r6, #1
 8000426:	fbb3 fcfe 	udiv	ip, r3, lr
 800042a:	0c21      	lsrs	r1, r4, #16
 800042c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000430:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000434:	fb08 f30c 	mul.w	r3, r8, ip
 8000438:	428b      	cmp	r3, r1
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0xe4>
 800043c:	1879      	adds	r1, r7, r1
 800043e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0xe2>
 8000444:	428b      	cmp	r3, r1
 8000446:	f200 80e9 	bhi.w	800061c <__udivmoddi4+0x2b4>
 800044a:	4684      	mov	ip, r0
 800044c:	1ac9      	subs	r1, r1, r3
 800044e:	b2a3      	uxth	r3, r4
 8000450:	fbb1 f0fe 	udiv	r0, r1, lr
 8000454:	fb0e 1110 	mls	r1, lr, r0, r1
 8000458:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800045c:	fb08 f800 	mul.w	r8, r8, r0
 8000460:	45a0      	cmp	r8, r4
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x10c>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x10a>
 800046c:	45a0      	cmp	r8, r4
 800046e:	f200 80d9 	bhi.w	8000624 <__udivmoddi4+0x2bc>
 8000472:	4618      	mov	r0, r3
 8000474:	eba4 0408 	sub.w	r4, r4, r8
 8000478:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800047c:	e7bf      	b.n	80003fe <__udivmoddi4+0x96>
 800047e:	428b      	cmp	r3, r1
 8000480:	d909      	bls.n	8000496 <__udivmoddi4+0x12e>
 8000482:	2d00      	cmp	r5, #0
 8000484:	f000 80b1 	beq.w	80005ea <__udivmoddi4+0x282>
 8000488:	2600      	movs	r6, #0
 800048a:	e9c5 0100 	strd	r0, r1, [r5]
 800048e:	4630      	mov	r0, r6
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	fab3 f683 	clz	r6, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d14a      	bne.n	8000534 <__udivmoddi4+0x1cc>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0x140>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 80b8 	bhi.w	8000618 <__udivmoddi4+0x2b0>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb61 0103 	sbc.w	r1, r1, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	468c      	mov	ip, r1
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0a8      	beq.n	8000408 <__udivmoddi4+0xa0>
 80004b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80004ba:	e7a5      	b.n	8000408 <__udivmoddi4+0xa0>
 80004bc:	f1c2 0320 	rsb	r3, r2, #32
 80004c0:	fa20 f603 	lsr.w	r6, r0, r3
 80004c4:	4097      	lsls	r7, r2
 80004c6:	fa01 f002 	lsl.w	r0, r1, r2
 80004ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004ce:	40d9      	lsrs	r1, r3
 80004d0:	4330      	orrs	r0, r6
 80004d2:	0c03      	lsrs	r3, r0, #16
 80004d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80004d8:	fa1f f887 	uxth.w	r8, r7
 80004dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80004e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e4:	fb06 f108 	mul.w	r1, r6, r8
 80004e8:	4299      	cmp	r1, r3
 80004ea:	fa04 f402 	lsl.w	r4, r4, r2
 80004ee:	d909      	bls.n	8000504 <__udivmoddi4+0x19c>
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004f6:	f080 808d 	bcs.w	8000614 <__udivmoddi4+0x2ac>
 80004fa:	4299      	cmp	r1, r3
 80004fc:	f240 808a 	bls.w	8000614 <__udivmoddi4+0x2ac>
 8000500:	3e02      	subs	r6, #2
 8000502:	443b      	add	r3, r7
 8000504:	1a5b      	subs	r3, r3, r1
 8000506:	b281      	uxth	r1, r0
 8000508:	fbb3 f0fe 	udiv	r0, r3, lr
 800050c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb00 f308 	mul.w	r3, r0, r8
 8000518:	428b      	cmp	r3, r1
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x1c4>
 800051c:	1879      	adds	r1, r7, r1
 800051e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000522:	d273      	bcs.n	800060c <__udivmoddi4+0x2a4>
 8000524:	428b      	cmp	r3, r1
 8000526:	d971      	bls.n	800060c <__udivmoddi4+0x2a4>
 8000528:	3802      	subs	r0, #2
 800052a:	4439      	add	r1, r7
 800052c:	1acb      	subs	r3, r1, r3
 800052e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000532:	e778      	b.n	8000426 <__udivmoddi4+0xbe>
 8000534:	f1c6 0c20 	rsb	ip, r6, #32
 8000538:	fa03 f406 	lsl.w	r4, r3, r6
 800053c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000540:	431c      	orrs	r4, r3
 8000542:	fa20 f70c 	lsr.w	r7, r0, ip
 8000546:	fa01 f306 	lsl.w	r3, r1, r6
 800054a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800054e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000552:	431f      	orrs	r7, r3
 8000554:	0c3b      	lsrs	r3, r7, #16
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fa1f f884 	uxth.w	r8, r4
 800055e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000562:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000566:	fb09 fa08 	mul.w	sl, r9, r8
 800056a:	458a      	cmp	sl, r1
 800056c:	fa02 f206 	lsl.w	r2, r2, r6
 8000570:	fa00 f306 	lsl.w	r3, r0, r6
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x220>
 8000576:	1861      	adds	r1, r4, r1
 8000578:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800057c:	d248      	bcs.n	8000610 <__udivmoddi4+0x2a8>
 800057e:	458a      	cmp	sl, r1
 8000580:	d946      	bls.n	8000610 <__udivmoddi4+0x2a8>
 8000582:	f1a9 0902 	sub.w	r9, r9, #2
 8000586:	4421      	add	r1, r4
 8000588:	eba1 010a 	sub.w	r1, r1, sl
 800058c:	b2bf      	uxth	r7, r7
 800058e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000592:	fb0e 1110 	mls	r1, lr, r0, r1
 8000596:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800059a:	fb00 f808 	mul.w	r8, r0, r8
 800059e:	45b8      	cmp	r8, r7
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x24a>
 80005a2:	19e7      	adds	r7, r4, r7
 80005a4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005a8:	d22e      	bcs.n	8000608 <__udivmoddi4+0x2a0>
 80005aa:	45b8      	cmp	r8, r7
 80005ac:	d92c      	bls.n	8000608 <__udivmoddi4+0x2a0>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4427      	add	r7, r4
 80005b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005b6:	eba7 0708 	sub.w	r7, r7, r8
 80005ba:	fba0 8902 	umull	r8, r9, r0, r2
 80005be:	454f      	cmp	r7, r9
 80005c0:	46c6      	mov	lr, r8
 80005c2:	4649      	mov	r1, r9
 80005c4:	d31a      	bcc.n	80005fc <__udivmoddi4+0x294>
 80005c6:	d017      	beq.n	80005f8 <__udivmoddi4+0x290>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x27a>
 80005ca:	ebb3 020e 	subs.w	r2, r3, lr
 80005ce:	eb67 0701 	sbc.w	r7, r7, r1
 80005d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005d6:	40f2      	lsrs	r2, r6
 80005d8:	ea4c 0202 	orr.w	r2, ip, r2
 80005dc:	40f7      	lsrs	r7, r6
 80005de:	e9c5 2700 	strd	r2, r7, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	462e      	mov	r6, r5
 80005ec:	4628      	mov	r0, r5
 80005ee:	e70b      	b.n	8000408 <__udivmoddi4+0xa0>
 80005f0:	4606      	mov	r6, r0
 80005f2:	e6e9      	b.n	80003c8 <__udivmoddi4+0x60>
 80005f4:	4618      	mov	r0, r3
 80005f6:	e6fd      	b.n	80003f4 <__udivmoddi4+0x8c>
 80005f8:	4543      	cmp	r3, r8
 80005fa:	d2e5      	bcs.n	80005c8 <__udivmoddi4+0x260>
 80005fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000600:	eb69 0104 	sbc.w	r1, r9, r4
 8000604:	3801      	subs	r0, #1
 8000606:	e7df      	b.n	80005c8 <__udivmoddi4+0x260>
 8000608:	4608      	mov	r0, r1
 800060a:	e7d2      	b.n	80005b2 <__udivmoddi4+0x24a>
 800060c:	4660      	mov	r0, ip
 800060e:	e78d      	b.n	800052c <__udivmoddi4+0x1c4>
 8000610:	4681      	mov	r9, r0
 8000612:	e7b9      	b.n	8000588 <__udivmoddi4+0x220>
 8000614:	4666      	mov	r6, ip
 8000616:	e775      	b.n	8000504 <__udivmoddi4+0x19c>
 8000618:	4630      	mov	r0, r6
 800061a:	e74a      	b.n	80004b2 <__udivmoddi4+0x14a>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	4439      	add	r1, r7
 8000622:	e713      	b.n	800044c <__udivmoddi4+0xe4>
 8000624:	3802      	subs	r0, #2
 8000626:	443c      	add	r4, r7
 8000628:	e724      	b.n	8000474 <__udivmoddi4+0x10c>
 800062a:	bf00      	nop

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <MX_GPIO_Init+0xd0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a25      	ldr	r2, [pc, #148]	; (8000700 <MX_GPIO_Init+0xd0>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a1e      	ldr	r2, [pc, #120]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_GPIO_Init+0xd0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_GPIO_Init+0xd0>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	4812      	ldr	r0, [pc, #72]	; (8000704 <MX_GPIO_Init+0xd4>)
 80006bc:	f000 fcf0 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_GPIO_Init+0xd8>)
 80006d8:	f000 fb5e 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006dc:	2320      	movs	r3, #32
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_GPIO_Init+0xd4>)
 80006f4:	f000 fb50 	bl	8000d98 <HAL_GPIO_Init>

}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	; 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40020000 	.word	0x40020000
 8000708:	40020800 	.word	0x40020800

0800070c <task00>:
#define TASK00_STACK_SIZE                 512
OS_STK  task00_stack[TASK00_STACK_SIZE];
void task00(void *pdata);

void task00(void *pdata)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
		//进入任务前，设置系统时钟参数
        OS_CPU_SysTickInitFreq(100*1000*1000);
 8000714:	4809      	ldr	r0, [pc, #36]	; (800073c <task00+0x30>)
 8000716:	f002 f851 	bl	80027bc <OS_CPU_SysTickInitFreq>
        pdata = pdata;
        for (;;) {
        		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	2120      	movs	r1, #32
 800071e:	4808      	ldr	r0, [pc, #32]	; (8000740 <task00+0x34>)
 8000720:	f000 fcbe 	bl	80010a0 <HAL_GPIO_WritePin>
                OSTimeDly(100);
 8000724:	2064      	movs	r0, #100	; 0x64
 8000726:	f003 fbc1 	bl	8003eac <OSTimeDly>
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2120      	movs	r1, #32
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <task00+0x34>)
 8000730:	f000 fcb6 	bl	80010a0 <HAL_GPIO_WritePin>
                OSTimeDly(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f003 fbb9 	bl	8003eac <OSTimeDly>
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800073a:	e7ee      	b.n	800071a <task00+0xe>
 800073c:	05f5e100 	.word	0x05f5e100
 8000740:	40020000 	.word	0x40020000

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fa02 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f814 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f7ff ff6e 	bl	8000630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000754:	f000 f960 	bl	8000a18 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  OSInit();
 8000758:	f002 f8b0 	bl	80028bc <OSInit>
  OSTaskCreate(
 800075c:	2303      	movs	r3, #3
 800075e:	4a04      	ldr	r2, [pc, #16]	; (8000770 <main+0x2c>)
 8000760:	2100      	movs	r1, #0
 8000762:	4804      	ldr	r0, [pc, #16]	; (8000774 <main+0x30>)
 8000764:	f003 f864 	bl	8003830 <OSTaskCreate>
		  task00, 								//任务入口
		  (void *)0, 							//任务参数
		  &task00_stack[TASK00_STACK_SIZE - 1],	//任务栈顶
		  TASK00_PRIO	);						//任务优先级别
  OSStart();
 8000768:	f002 f98c 	bl	8002a84 <OSStart>

  while (1)
 800076c:	e7fe      	b.n	800076c <main+0x28>
 800076e:	bf00      	nop
 8000770:	20000828 	.word	0x20000828
 8000774:	0800070d 	.word	0x0800070d

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fdee 	bl	8004368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <SystemClock_Config+0xc8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a26      	ldr	r2, [pc, #152]	; (8000840 <SystemClock_Config+0xc8>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <SystemClock_Config+0xc8>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b21      	ldr	r3, [pc, #132]	; (8000844 <SystemClock_Config+0xcc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a20      	ldr	r2, [pc, #128]	; (8000844 <SystemClock_Config+0xcc>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <SystemClock_Config+0xcc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2310      	movs	r3, #16
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e0:	2302      	movs	r3, #2
 80007e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007e8:	2308      	movs	r3, #8
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fc69 	bl	80010d4 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000808:	f000 f830 	bl	800086c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2103      	movs	r1, #3
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fecb 	bl	80015c4 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000834:	f000 f81a 	bl	800086c <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3750      	adds	r7, #80	; 0x50
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d101      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085a:	f000 f99b 	bl	8000b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40000c00 	.word	0x40000c00

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <HAL_MspInit+0x4c>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f000 fa31 	bl	8000d44 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80008e2:	2032      	movs	r0, #50	; 0x32
 80008e4:	f000 fa4a 	bl	8000d7c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <HAL_InitTick+0xa4>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	4a1e      	ldr	r2, [pc, #120]	; (800096c <HAL_InitTick+0xa4>)
 80008f2:	f043 0308 	orr.w	r3, r3, #8
 80008f6:	6413      	str	r3, [r2, #64]	; 0x40
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <HAL_InitTick+0xa4>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000904:	f107 0210 	add.w	r2, r7, #16
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f854 	bl	80019bc <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000914:	f001 f82a 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 8000918:	4603      	mov	r3, r0
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800091e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <HAL_InitTick+0xa8>)
 8000922:	fba2 2303 	umull	r2, r3, r2, r3
 8000926:	0c9b      	lsrs	r3, r3, #18
 8000928:	3b01      	subs	r3, #1
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_InitTick+0xac>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <HAL_InitTick+0xb0>)
 8000930:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_InitTick+0xac>)
 8000934:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000938:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_InitTick+0xac>)
 800093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_InitTick+0xac>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_InitTick+0xac>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <HAL_InitTick+0xac>)
 800094e:	f001 f867 	bl	8001a20 <HAL_TIM_Base_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d104      	bne.n	8000962 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <HAL_InitTick+0xac>)
 800095a:	f001 f8bb 	bl	8001ad4 <HAL_TIM_Base_Start_IT>
 800095e:	4603      	mov	r3, r0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	431bde83 	.word	0x431bde83
 8000974:	2000082c 	.word	0x2000082c
 8000978:	40000c00 	.word	0x40000c00

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */
#include "os.h"
void SysTick_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u
        OS_CPU_SR  cpu_sr;
#endif
        OS_ENTER_CRITICAL();
 80009bc:	2040      	movs	r0, #64	; 0x40
 80009be:	f7ff fc1a 	bl	80001f6 <OS_CPU_SR_Save>
 80009c2:	6078      	str	r0, [r7, #4]
        OSIntEnter();
 80009c4:	f001 ff90 	bl	80028e8 <OSIntEnter>
        OS_EXIT_CRITICAL();
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fc22 	bl	8000212 <OS_CPU_SR_Restore>

        OSTimeTick();
 80009ce:	f002 f881 	bl	8002ad4 <OSTimeTick>

        OSIntExit();
 80009d2:	f001 ffa3 	bl	800291c <OSIntExit>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <TIM5_IRQHandler+0x10>)
 80009e6:	f001 f8d7 	bl	8001b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000082c 	.word	0x2000082c

080009f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <MX_USART2_UART_Init+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a50:	f001 fa66 	bl	8001f20 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a5a:	f7ff ff07 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000874 	.word	0x20000874
 8000a68:	40004400 	.word	0x40004400

08000a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <HAL_UART_MspInit+0x84>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d12b      	bne.n	8000ae6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ac6:	230c      	movs	r3, #12
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <HAL_UART_MspInit+0x8c>)
 8000ae2:	f000 f959 	bl	8000d98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40004400 	.word	0x40004400
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000

08000afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b02:	490e      	ldr	r1, [pc, #56]	; (8000b3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b04:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b18:	4c0b      	ldr	r4, [pc, #44]	; (8000b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b26:	f7ff ff65 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f003 fbf9 	bl	8004320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2e:	f7ff fe09 	bl	8000744 <main>
  bx  lr    
 8000b32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b40:	08004520 	.word	0x08004520
  ldr r2, =_sbss
 8000b44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b48:	20001eb4 	.word	0x20001eb4

08000b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <HAL_Init+0x40>)
 8000b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_Init+0x40>)
 8000b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_Init+0x40>)
 8000b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 f8d8 	bl	8000d2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff fea2 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b84:	f7ff fe78 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023c00 	.word	0x40023c00

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	200008b8 	.word	0x200008b8

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200008b8 	.word	0x200008b8

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	; (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ff4c 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d56:	f7ff ff61 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000d5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	68b9      	ldr	r1, [r7, #8]
 8000d60:	6978      	ldr	r0, [r7, #20]
 8000d62:	f7ff ffb1 	bl	8000cc8 <NVIC_EncodePriority>
 8000d66:	4602      	mov	r2, r0
 8000d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff80 	bl	8000c74 <__NVIC_SetPriority>
}
 8000d74:	bf00      	nop
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff54 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	e159      	b.n	8001068 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f040 8148 	bne.w	8001062 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d005      	beq.n	8000dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d130      	bne.n	8000e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	091b      	lsrs	r3, r3, #4
 8000e36:	f003 0201 	and.w	r2, r3, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d017      	beq.n	8000e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d123      	bne.n	8000edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	08da      	lsrs	r2, r3, #3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	220f      	movs	r2, #15
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	69b9      	ldr	r1, [r7, #24]
 8000ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0203 	and.w	r2, r3, #3
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 80a2 	beq.w	8001062 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b57      	ldr	r3, [pc, #348]	; (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a56      	ldr	r2, [pc, #344]	; (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b54      	ldr	r3, [pc, #336]	; (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3a:	4a52      	ldr	r2, [pc, #328]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3302      	adds	r3, #2
 8000f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a49      	ldr	r2, [pc, #292]	; (8001088 <HAL_GPIO_Init+0x2f0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x202>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a48      	ldr	r2, [pc, #288]	; (800108c <HAL_GPIO_Init+0x2f4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x1fe>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a47      	ldr	r2, [pc, #284]	; (8001090 <HAL_GPIO_Init+0x2f8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x1fa>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a46      	ldr	r2, [pc, #280]	; (8001094 <HAL_GPIO_Init+0x2fc>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x1f6>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a45      	ldr	r2, [pc, #276]	; (8001098 <HAL_GPIO_Init+0x300>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x1f2>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	69fa      	ldr	r2, [r7, #28]
 8000f9e:	f002 0203 	and.w	r2, r2, #3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fac:	4935      	ldr	r1, [pc, #212]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <HAL_GPIO_Init+0x304>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fde:	4a2f      	ldr	r2, [pc, #188]	; (800109c <HAL_GPIO_Init+0x304>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_GPIO_Init+0x304>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001008:	4a24      	ldr	r2, [pc, #144]	; (800109c <HAL_GPIO_Init+0x304>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_GPIO_Init+0x304>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001032:	4a1a      	ldr	r2, [pc, #104]	; (800109c <HAL_GPIO_Init+0x304>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_GPIO_Init+0x304>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800105c:	4a0f      	ldr	r2, [pc, #60]	; (800109c <HAL_GPIO_Init+0x304>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3301      	adds	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	2b0f      	cmp	r3, #15
 800106c:	f67f aea2 	bls.w	8000db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40013800 	.word	0x40013800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	40020c00 	.word	0x40020c00
 8001098:	40021000 	.word	0x40021000
 800109c:	40013c00 	.word	0x40013c00

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010bc:	e003      	b.n	80010c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	041a      	lsls	r2, r3, #16
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	619a      	str	r2, [r3, #24]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e264      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d075      	beq.n	80011de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010f2:	4ba3      	ldr	r3, [pc, #652]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d00c      	beq.n	8001118 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fe:	4ba0      	ldr	r3, [pc, #640]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001106:	2b08      	cmp	r3, #8
 8001108:	d112      	bne.n	8001130 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110a:	4b9d      	ldr	r3, [pc, #628]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001116:	d10b      	bne.n	8001130 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	4b99      	ldr	r3, [pc, #612]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d05b      	beq.n	80011dc <HAL_RCC_OscConfig+0x108>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d157      	bne.n	80011dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e23f      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001138:	d106      	bne.n	8001148 <HAL_RCC_OscConfig+0x74>
 800113a:	4b91      	ldr	r3, [pc, #580]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a90      	ldr	r2, [pc, #576]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e01d      	b.n	8001184 <HAL_RCC_OscConfig+0xb0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0x98>
 8001152:	4b8b      	ldr	r3, [pc, #556]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a8a      	ldr	r2, [pc, #552]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b88      	ldr	r3, [pc, #544]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a87      	ldr	r2, [pc, #540]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e00b      	b.n	8001184 <HAL_RCC_OscConfig+0xb0>
 800116c:	4b84      	ldr	r3, [pc, #528]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a83      	ldr	r2, [pc, #524]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b81      	ldr	r3, [pc, #516]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a80      	ldr	r2, [pc, #512]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 800117e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d013      	beq.n	80011b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fd16 	bl	8000bbc <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fd12 	bl	8000bbc <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e204      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	4b76      	ldr	r3, [pc, #472]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0xc0>
 80011b2:	e014      	b.n	80011de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fd02 	bl	8000bbc <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcfe 	bl	8000bbc <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e1f0      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	4b6c      	ldr	r3, [pc, #432]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0xe8>
 80011da:	e000      	b.n	80011de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d063      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ea:	4b65      	ldr	r3, [pc, #404]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f6:	4b62      	ldr	r3, [pc, #392]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d11c      	bne.n	800123c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001202:	4b5f      	ldr	r3, [pc, #380]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d116      	bne.n	800123c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	4b5c      	ldr	r3, [pc, #368]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_RCC_OscConfig+0x152>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d001      	beq.n	8001226 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e1c4      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	4b56      	ldr	r3, [pc, #344]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4952      	ldr	r1, [pc, #328]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	e03a      	b.n	80012b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d020      	beq.n	8001286 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001244:	4b4f      	ldr	r3, [pc, #316]	; (8001384 <HAL_RCC_OscConfig+0x2b0>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124a:	f7ff fcb7 	bl	8000bbc <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fcb3 	bl	8000bbc <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e1a5      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	4b46      	ldr	r3, [pc, #280]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4b43      	ldr	r3, [pc, #268]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4940      	ldr	r1, [pc, #256]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]
 8001284:	e015      	b.n	80012b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <HAL_RCC_OscConfig+0x2b0>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128c:	f7ff fc96 	bl	8000bbc <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001294:	f7ff fc92 	bl	8000bbc <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e184      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	4b36      	ldr	r3, [pc, #216]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d030      	beq.n	8001320 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d016      	beq.n	80012f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c6:	4b30      	ldr	r3, [pc, #192]	; (8001388 <HAL_RCC_OscConfig+0x2b4>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012cc:	f7ff fc76 	bl	8000bbc <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff fc72 	bl	8000bbc <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e164      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x200>
 80012f2:	e015      	b.n	8001320 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <HAL_RCC_OscConfig+0x2b4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fc5f 	bl	8000bbc <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001302:	f7ff fc5b 	bl	8000bbc <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e14d      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f0      	bne.n	8001302 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80a0 	beq.w	800146e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10f      	bne.n	800135e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_OscConfig+0x2b8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d121      	bne.n	80013ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_RCC_OscConfig+0x2b8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_RCC_OscConfig+0x2b8>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001376:	f7ff fc21 	bl	8000bbc <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	e011      	b.n	80013a2 <HAL_RCC_OscConfig+0x2ce>
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	42470000 	.word	0x42470000
 8001388:	42470e80 	.word	0x42470e80
 800138c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001390:	f7ff fc14 	bl	8000bbc <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e106      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a2:	4b85      	ldr	r3, [pc, #532]	; (80015b8 <HAL_RCC_OscConfig+0x4e4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d106      	bne.n	80013c4 <HAL_RCC_OscConfig+0x2f0>
 80013b6:	4b81      	ldr	r3, [pc, #516]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ba:	4a80      	ldr	r2, [pc, #512]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6713      	str	r3, [r2, #112]	; 0x70
 80013c2:	e01c      	b.n	80013fe <HAL_RCC_OscConfig+0x32a>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	d10c      	bne.n	80013e6 <HAL_RCC_OscConfig+0x312>
 80013cc:	4b7b      	ldr	r3, [pc, #492]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	4a7a      	ldr	r2, [pc, #488]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6713      	str	r3, [r2, #112]	; 0x70
 80013d8:	4b78      	ldr	r3, [pc, #480]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	4a77      	ldr	r2, [pc, #476]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6713      	str	r3, [r2, #112]	; 0x70
 80013e4:	e00b      	b.n	80013fe <HAL_RCC_OscConfig+0x32a>
 80013e6:	4b75      	ldr	r3, [pc, #468]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	4a74      	ldr	r2, [pc, #464]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	6713      	str	r3, [r2, #112]	; 0x70
 80013f2:	4b72      	ldr	r3, [pc, #456]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	4a71      	ldr	r2, [pc, #452]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d015      	beq.n	8001432 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001406:	f7ff fbd9 	bl	8000bbc <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140c:	e00a      	b.n	8001424 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140e:	f7ff fbd5 	bl	8000bbc <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f241 3288 	movw	r2, #5000	; 0x1388
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e0c5      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001424:	4b65      	ldr	r3, [pc, #404]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0ee      	beq.n	800140e <HAL_RCC_OscConfig+0x33a>
 8001430:	e014      	b.n	800145c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff fbc3 	bl	8000bbc <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001438:	e00a      	b.n	8001450 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f7ff fbbf 	bl	8000bbc <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	f241 3288 	movw	r2, #5000	; 0x1388
 8001448:	4293      	cmp	r3, r2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e0af      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001450:	4b5a      	ldr	r3, [pc, #360]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 8001452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1ee      	bne.n	800143a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d105      	bne.n	800146e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001462:	4b56      	ldr	r3, [pc, #344]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a55      	ldr	r2, [pc, #340]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 8001468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 809b 	beq.w	80015ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001478:	4b50      	ldr	r3, [pc, #320]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b08      	cmp	r3, #8
 8001482:	d05c      	beq.n	800153e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d141      	bne.n	8001510 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_RCC_OscConfig+0x4ec>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fb93 	bl	8000bbc <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149a:	f7ff fb8f 	bl	8000bbc <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e081      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ac:	4b43      	ldr	r3, [pc, #268]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69da      	ldr	r2, [r3, #28]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	019b      	lsls	r3, r3, #6
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	085b      	lsrs	r3, r3, #1
 80014d0:	3b01      	subs	r3, #1
 80014d2:	041b      	lsls	r3, r3, #16
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	061b      	lsls	r3, r3, #24
 80014dc:	4937      	ldr	r1, [pc, #220]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <HAL_RCC_OscConfig+0x4ec>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb68 	bl	8000bbc <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff fb64 	bl	8000bbc <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e056      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001502:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x41c>
 800150e:	e04e      	b.n	80015ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_RCC_OscConfig+0x4ec>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001516:	f7ff fb51 	bl	8000bbc <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff fb4d 	bl	8000bbc <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e03f      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x44a>
 800153c:	e037      	b.n	80015ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e032      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_RCC_OscConfig+0x4e8>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d028      	beq.n	80015aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d121      	bne.n	80015aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d11a      	bne.n	80015aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800157a:	4013      	ands	r3, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001580:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001582:	4293      	cmp	r3, r2
 8001584:	d111      	bne.n	80015aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	3b01      	subs	r3, #1
 8001594:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001596:	429a      	cmp	r2, r3
 8001598:	d107      	bne.n	80015aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40007000 	.word	0x40007000
 80015bc:	40023800 	.word	0x40023800
 80015c0:	42470060 	.word	0x42470060

080015c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0cc      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d8:	4b68      	ldr	r3, [pc, #416]	; (800177c <HAL_RCC_ClockConfig+0x1b8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d90c      	bls.n	8001600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e6:	4b65      	ldr	r3, [pc, #404]	; (800177c <HAL_RCC_ClockConfig+0x1b8>)
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ee:	4b63      	ldr	r3, [pc, #396]	; (800177c <HAL_RCC_ClockConfig+0x1b8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0b8      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d020      	beq.n	800164e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001618:	4b59      	ldr	r3, [pc, #356]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a58      	ldr	r2, [pc, #352]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001622:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001630:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4a52      	ldr	r2, [pc, #328]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800163a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800163c:	4b50      	ldr	r3, [pc, #320]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	494d      	ldr	r1, [pc, #308]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d044      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d119      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e07f      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d003      	beq.n	8001682 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800167e:	2b03      	cmp	r3, #3
 8001680:	d107      	bne.n	8001692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001682:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e06f      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001692:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e067      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a2:	4b37      	ldr	r3, [pc, #220]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f023 0203 	bic.w	r2, r3, #3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4934      	ldr	r1, [pc, #208]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b4:	f7ff fa82 	bl	8000bbc <HAL_GetTick>
 80016b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016bc:	f7ff fa7e 	bl	8000bbc <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e04f      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d2:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 020c 	and.w	r2, r3, #12
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d1eb      	bne.n	80016bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <HAL_RCC_ClockConfig+0x1b8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d20c      	bcs.n	800170c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b22      	ldr	r3, [pc, #136]	; (800177c <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e032      	b.n	8001772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d008      	beq.n	800172a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4916      	ldr	r1, [pc, #88]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	4313      	orrs	r3, r2
 8001728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	490e      	ldr	r1, [pc, #56]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800174a:	f000 f821 	bl	8001790 <HAL_RCC_GetSysClockFreq>
 800174e:	4602      	mov	r2, r0
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	490a      	ldr	r1, [pc, #40]	; (8001784 <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	5ccb      	ldrb	r3, [r1, r3]
 800175e:	fa22 f303 	lsr.w	r3, r2, r3
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_RCC_ClockConfig+0x1c8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff f8ac 	bl	80008c8 <HAL_InitTick>

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023c00 	.word	0x40023c00
 8001780:	40023800 	.word	0x40023800
 8001784:	080043f8 	.word	0x080043f8
 8001788:	20000000 	.word	0x20000000
 800178c:	20000004 	.word	0x20000004

08001790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001790:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	2300      	movs	r3, #0
 80017a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017a8:	4b67      	ldr	r3, [pc, #412]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d00d      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0x40>
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	f200 80bd 	bhi.w	8001934 <HAL_RCC_GetSysClockFreq+0x1a4>
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x34>
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d003      	beq.n	80017ca <HAL_RCC_GetSysClockFreq+0x3a>
 80017c2:	e0b7      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017c4:	4b61      	ldr	r3, [pc, #388]	; (800194c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017c6:	60bb      	str	r3, [r7, #8]
       break;
 80017c8:	e0b7      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ca:	4b61      	ldr	r3, [pc, #388]	; (8001950 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80017cc:	60bb      	str	r3, [r7, #8]
      break;
 80017ce:	e0b4      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d0:	4b5d      	ldr	r3, [pc, #372]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017da:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d04d      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e6:	4b58      	ldr	r3, [pc, #352]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	099b      	lsrs	r3, r3, #6
 80017ec:	461a      	mov	r2, r3
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017f6:	f04f 0100 	mov.w	r1, #0
 80017fa:	ea02 0800 	and.w	r8, r2, r0
 80017fe:	ea03 0901 	and.w	r9, r3, r1
 8001802:	4640      	mov	r0, r8
 8001804:	4649      	mov	r1, r9
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	014b      	lsls	r3, r1, #5
 8001810:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001814:	0142      	lsls	r2, r0, #5
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	ebb0 0008 	subs.w	r0, r0, r8
 800181e:	eb61 0109 	sbc.w	r1, r1, r9
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	018b      	lsls	r3, r1, #6
 800182c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001830:	0182      	lsls	r2, r0, #6
 8001832:	1a12      	subs	r2, r2, r0
 8001834:	eb63 0301 	sbc.w	r3, r3, r1
 8001838:	f04f 0000 	mov.w	r0, #0
 800183c:	f04f 0100 	mov.w	r1, #0
 8001840:	00d9      	lsls	r1, r3, #3
 8001842:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001846:	00d0      	lsls	r0, r2, #3
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	eb12 0208 	adds.w	r2, r2, r8
 8001850:	eb43 0309 	adc.w	r3, r3, r9
 8001854:	f04f 0000 	mov.w	r0, #0
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	0259      	lsls	r1, r3, #9
 800185e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001862:	0250      	lsls	r0, r2, #9
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	461a      	mov	r2, r3
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	f7fe fd60 	bl	8000338 <__aeabi_uldivmod>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4613      	mov	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e04a      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	099b      	lsrs	r3, r3, #6
 8001888:	461a      	mov	r2, r3
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001892:	f04f 0100 	mov.w	r1, #0
 8001896:	ea02 0400 	and.w	r4, r2, r0
 800189a:	ea03 0501 	and.w	r5, r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	014b      	lsls	r3, r1, #5
 80018ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018b0:	0142      	lsls	r2, r0, #5
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	1b00      	subs	r0, r0, r4
 80018b8:	eb61 0105 	sbc.w	r1, r1, r5
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	018b      	lsls	r3, r1, #6
 80018c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018ca:	0182      	lsls	r2, r0, #6
 80018cc:	1a12      	subs	r2, r2, r0
 80018ce:	eb63 0301 	sbc.w	r3, r3, r1
 80018d2:	f04f 0000 	mov.w	r0, #0
 80018d6:	f04f 0100 	mov.w	r1, #0
 80018da:	00d9      	lsls	r1, r3, #3
 80018dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018e0:	00d0      	lsls	r0, r2, #3
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	1912      	adds	r2, r2, r4
 80018e8:	eb45 0303 	adc.w	r3, r5, r3
 80018ec:	f04f 0000 	mov.w	r0, #0
 80018f0:	f04f 0100 	mov.w	r1, #0
 80018f4:	0299      	lsls	r1, r3, #10
 80018f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018fa:	0290      	lsls	r0, r2, #10
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	461a      	mov	r2, r3
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	f7fe fd14 	bl	8000338 <__aeabi_uldivmod>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4613      	mov	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	0c1b      	lsrs	r3, r3, #16
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	3301      	adds	r3, #1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001930:	60bb      	str	r3, [r7, #8]
      break;
 8001932:	e002      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001936:	60bb      	str	r3, [r7, #8]
      break;
 8001938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193a:	68bb      	ldr	r3, [r7, #8]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	00f42400 	.word	0x00f42400
 8001950:	007a1200 	.word	0x007a1200

08001954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_RCC_GetHCLKFreq+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000000 	.word	0x20000000

0800196c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001970:	f7ff fff0 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 8001974:	4602      	mov	r2, r0
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	0a9b      	lsrs	r3, r3, #10
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	4903      	ldr	r1, [pc, #12]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	08004408 	.word	0x08004408

08001994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001998:	f7ff ffdc 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	0b5b      	lsrs	r3, r3, #13
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	4903      	ldr	r1, [pc, #12]	; (80019b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	08004408 	.word	0x08004408

080019bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	220f      	movs	r2, #15
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	08db      	lsrs	r3, r3, #3
 80019f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_RCC_GetClockConfig+0x60>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0207 	and.w	r2, r3, #7
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	601a      	str	r2, [r3, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40023c00 	.word	0x40023c00

08001a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e041      	b.n	8001ab6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f839 	bl	8001abe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	f000 f9ca 	bl	8001df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d001      	beq.n	8001aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e044      	b.n	8001b76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d018      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b16:	d013      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1a      	ldr	r2, [pc, #104]	; (8001b88 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00e      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_TIM_Base_Start_IT+0xb8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d009      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x6c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a16      	ldr	r2, [pc, #88]	; (8001b94 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d111      	bne.n	8001b64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d010      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b62:	e007      	b.n	8001b74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40010000 	.word	0x40010000
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	40000800 	.word	0x40000800
 8001b90:	40000c00 	.word	0x40000c00
 8001b94:	40014000 	.word	0x40014000

08001b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d122      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d11b      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0202 	mvn.w	r2, #2
 8001bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f8ee 	bl	8001dbc <HAL_TIM_IC_CaptureCallback>
 8001be0:	e005      	b.n	8001bee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8e0 	bl	8001da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f8f1 	bl	8001dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d122      	bne.n	8001c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d11b      	bne.n	8001c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0204 	mvn.w	r2, #4
 8001c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8c4 	bl	8001dbc <HAL_TIM_IC_CaptureCallback>
 8001c34:	e005      	b.n	8001c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8b6 	bl	8001da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f8c7 	bl	8001dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d122      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d11b      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0208 	mvn.w	r2, #8
 8001c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2204      	movs	r2, #4
 8001c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f89a 	bl	8001dbc <HAL_TIM_IC_CaptureCallback>
 8001c88:	e005      	b.n	8001c96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f88c 	bl	8001da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f89d 	bl	8001dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	d122      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b10      	cmp	r3, #16
 8001cb6:	d11b      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0210 	mvn.w	r2, #16
 8001cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f870 	bl	8001dbc <HAL_TIM_IC_CaptureCallback>
 8001cdc:	e005      	b.n	8001cea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f862 	bl	8001da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f873 	bl	8001dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d10e      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0201 	mvn.w	r2, #1
 8001d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7fe fd96 	bl	8000848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	2b80      	cmp	r3, #128	; 0x80
 8001d28:	d10e      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d34:	2b80      	cmp	r3, #128	; 0x80
 8001d36:	d107      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8e2 	bl	8001f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d52:	2b40      	cmp	r3, #64	; 0x40
 8001d54:	d10e      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d60:	2b40      	cmp	r3, #64	; 0x40
 8001d62:	d107      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f838 	bl	8001de4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b20      	cmp	r3, #32
 8001d80:	d10e      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d107      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0220 	mvn.w	r2, #32
 8001d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8ac 	bl	8001ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a34      	ldr	r2, [pc, #208]	; (8001edc <TIM_Base_SetConfig+0xe4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00f      	beq.n	8001e30 <TIM_Base_SetConfig+0x38>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e16:	d00b      	beq.n	8001e30 <TIM_Base_SetConfig+0x38>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a31      	ldr	r2, [pc, #196]	; (8001ee0 <TIM_Base_SetConfig+0xe8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <TIM_Base_SetConfig+0x38>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a30      	ldr	r2, [pc, #192]	; (8001ee4 <TIM_Base_SetConfig+0xec>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d003      	beq.n	8001e30 <TIM_Base_SetConfig+0x38>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a2f      	ldr	r2, [pc, #188]	; (8001ee8 <TIM_Base_SetConfig+0xf0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d108      	bne.n	8001e42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a25      	ldr	r2, [pc, #148]	; (8001edc <TIM_Base_SetConfig+0xe4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01b      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d017      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <TIM_Base_SetConfig+0xe8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <TIM_Base_SetConfig+0xec>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00f      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a20      	ldr	r2, [pc, #128]	; (8001ee8 <TIM_Base_SetConfig+0xf0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00b      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <TIM_Base_SetConfig+0xf4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <TIM_Base_SetConfig+0xf8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d003      	beq.n	8001e82 <TIM_Base_SetConfig+0x8a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a1d      	ldr	r2, [pc, #116]	; (8001ef4 <TIM_Base_SetConfig+0xfc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d108      	bne.n	8001e94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <TIM_Base_SetConfig+0xe4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d103      	bne.n	8001ec8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	615a      	str	r2, [r3, #20]
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	40014000 	.word	0x40014000
 8001ef0:	40014400 	.word	0x40014400
 8001ef4:	40014800 	.word	0x40014800

08001ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e03f      	b.n	8001fb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7fe fd90 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2224      	movs	r2, #36	; 0x24
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f829 	bl	8001fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc0:	b09f      	sub	sp, #124	; 0x7c
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fd2:	68d9      	ldr	r1, [r3, #12]
 8001fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	ea40 0301 	orr.w	r3, r0, r1
 8001fdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002000:	f021 010c 	bic.w	r1, r1, #12
 8002004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800200a:	430b      	orrs	r3, r1
 800200c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800200e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800201a:	6999      	ldr	r1, [r3, #24]
 800201c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	ea40 0301 	orr.w	r3, r0, r1
 8002024:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4bc5      	ldr	r3, [pc, #788]	; (8002340 <UART_SetConfig+0x384>)
 800202c:	429a      	cmp	r2, r3
 800202e:	d004      	beq.n	800203a <UART_SetConfig+0x7e>
 8002030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4bc3      	ldr	r3, [pc, #780]	; (8002344 <UART_SetConfig+0x388>)
 8002036:	429a      	cmp	r2, r3
 8002038:	d103      	bne.n	8002042 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800203a:	f7ff fcab 	bl	8001994 <HAL_RCC_GetPCLK2Freq>
 800203e:	6778      	str	r0, [r7, #116]	; 0x74
 8002040:	e002      	b.n	8002048 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002042:	f7ff fc93 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 8002046:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002050:	f040 80b6 	bne.w	80021c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002056:	461c      	mov	r4, r3
 8002058:	f04f 0500 	mov.w	r5, #0
 800205c:	4622      	mov	r2, r4
 800205e:	462b      	mov	r3, r5
 8002060:	1891      	adds	r1, r2, r2
 8002062:	6439      	str	r1, [r7, #64]	; 0x40
 8002064:	415b      	adcs	r3, r3
 8002066:	647b      	str	r3, [r7, #68]	; 0x44
 8002068:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800206c:	1912      	adds	r2, r2, r4
 800206e:	eb45 0303 	adc.w	r3, r5, r3
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	f04f 0100 	mov.w	r1, #0
 800207a:	00d9      	lsls	r1, r3, #3
 800207c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002080:	00d0      	lsls	r0, r2, #3
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	1911      	adds	r1, r2, r4
 8002088:	6639      	str	r1, [r7, #96]	; 0x60
 800208a:	416b      	adcs	r3, r5
 800208c:	667b      	str	r3, [r7, #100]	; 0x64
 800208e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	461a      	mov	r2, r3
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	1891      	adds	r1, r2, r2
 800209a:	63b9      	str	r1, [r7, #56]	; 0x38
 800209c:	415b      	adcs	r3, r3
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80020a8:	f7fe f946 	bl	8000338 <__aeabi_uldivmod>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4ba5      	ldr	r3, [pc, #660]	; (8002348 <UART_SetConfig+0x38c>)
 80020b2:	fba3 2302 	umull	r2, r3, r3, r2
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	011e      	lsls	r6, r3, #4
 80020ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020bc:	461c      	mov	r4, r3
 80020be:	f04f 0500 	mov.w	r5, #0
 80020c2:	4622      	mov	r2, r4
 80020c4:	462b      	mov	r3, r5
 80020c6:	1891      	adds	r1, r2, r2
 80020c8:	6339      	str	r1, [r7, #48]	; 0x30
 80020ca:	415b      	adcs	r3, r3
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
 80020ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020d2:	1912      	adds	r2, r2, r4
 80020d4:	eb45 0303 	adc.w	r3, r5, r3
 80020d8:	f04f 0000 	mov.w	r0, #0
 80020dc:	f04f 0100 	mov.w	r1, #0
 80020e0:	00d9      	lsls	r1, r3, #3
 80020e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020e6:	00d0      	lsls	r0, r2, #3
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	1911      	adds	r1, r2, r4
 80020ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80020f0:	416b      	adcs	r3, r5
 80020f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	461a      	mov	r2, r3
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	1891      	adds	r1, r2, r2
 8002100:	62b9      	str	r1, [r7, #40]	; 0x28
 8002102:	415b      	adcs	r3, r3
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800210a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800210e:	f7fe f913 	bl	8000338 <__aeabi_uldivmod>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4b8c      	ldr	r3, [pc, #560]	; (8002348 <UART_SetConfig+0x38c>)
 8002118:	fba3 1302 	umull	r1, r3, r3, r2
 800211c:	095b      	lsrs	r3, r3, #5
 800211e:	2164      	movs	r1, #100	; 0x64
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	3332      	adds	r3, #50	; 0x32
 800212a:	4a87      	ldr	r2, [pc, #540]	; (8002348 <UART_SetConfig+0x38c>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002138:	441e      	add	r6, r3
 800213a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800213c:	4618      	mov	r0, r3
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	1894      	adds	r4, r2, r2
 8002148:	623c      	str	r4, [r7, #32]
 800214a:	415b      	adcs	r3, r3
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002152:	1812      	adds	r2, r2, r0
 8002154:	eb41 0303 	adc.w	r3, r1, r3
 8002158:	f04f 0400 	mov.w	r4, #0
 800215c:	f04f 0500 	mov.w	r5, #0
 8002160:	00dd      	lsls	r5, r3, #3
 8002162:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002166:	00d4      	lsls	r4, r2, #3
 8002168:	4622      	mov	r2, r4
 800216a:	462b      	mov	r3, r5
 800216c:	1814      	adds	r4, r2, r0
 800216e:	653c      	str	r4, [r7, #80]	; 0x50
 8002170:	414b      	adcs	r3, r1
 8002172:	657b      	str	r3, [r7, #84]	; 0x54
 8002174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	461a      	mov	r2, r3
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	1891      	adds	r1, r2, r2
 8002180:	61b9      	str	r1, [r7, #24]
 8002182:	415b      	adcs	r3, r3
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800218a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800218e:	f7fe f8d3 	bl	8000338 <__aeabi_uldivmod>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4b6c      	ldr	r3, [pc, #432]	; (8002348 <UART_SetConfig+0x38c>)
 8002198:	fba3 1302 	umull	r1, r3, r3, r2
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	2164      	movs	r1, #100	; 0x64
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	3332      	adds	r3, #50	; 0x32
 80021aa:	4a67      	ldr	r2, [pc, #412]	; (8002348 <UART_SetConfig+0x38c>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	f003 0207 	and.w	r2, r3, #7
 80021b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4432      	add	r2, r6
 80021bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021be:	e0b9      	b.n	8002334 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c2:	461c      	mov	r4, r3
 80021c4:	f04f 0500 	mov.w	r5, #0
 80021c8:	4622      	mov	r2, r4
 80021ca:	462b      	mov	r3, r5
 80021cc:	1891      	adds	r1, r2, r2
 80021ce:	6139      	str	r1, [r7, #16]
 80021d0:	415b      	adcs	r3, r3
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021d8:	1912      	adds	r2, r2, r4
 80021da:	eb45 0303 	adc.w	r3, r5, r3
 80021de:	f04f 0000 	mov.w	r0, #0
 80021e2:	f04f 0100 	mov.w	r1, #0
 80021e6:	00d9      	lsls	r1, r3, #3
 80021e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021ec:	00d0      	lsls	r0, r2, #3
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	eb12 0804 	adds.w	r8, r2, r4
 80021f6:	eb43 0905 	adc.w	r9, r3, r5
 80021fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4618      	mov	r0, r3
 8002200:	f04f 0100 	mov.w	r1, #0
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	008b      	lsls	r3, r1, #2
 800220e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002212:	0082      	lsls	r2, r0, #2
 8002214:	4640      	mov	r0, r8
 8002216:	4649      	mov	r1, r9
 8002218:	f7fe f88e 	bl	8000338 <__aeabi_uldivmod>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4b49      	ldr	r3, [pc, #292]	; (8002348 <UART_SetConfig+0x38c>)
 8002222:	fba3 2302 	umull	r2, r3, r3, r2
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	011e      	lsls	r6, r3, #4
 800222a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800222c:	4618      	mov	r0, r3
 800222e:	f04f 0100 	mov.w	r1, #0
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	1894      	adds	r4, r2, r2
 8002238:	60bc      	str	r4, [r7, #8]
 800223a:	415b      	adcs	r3, r3
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002242:	1812      	adds	r2, r2, r0
 8002244:	eb41 0303 	adc.w	r3, r1, r3
 8002248:	f04f 0400 	mov.w	r4, #0
 800224c:	f04f 0500 	mov.w	r5, #0
 8002250:	00dd      	lsls	r5, r3, #3
 8002252:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002256:	00d4      	lsls	r4, r2, #3
 8002258:	4622      	mov	r2, r4
 800225a:	462b      	mov	r3, r5
 800225c:	1814      	adds	r4, r2, r0
 800225e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002260:	414b      	adcs	r3, r1
 8002262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4618      	mov	r0, r3
 800226a:	f04f 0100 	mov.w	r1, #0
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	008b      	lsls	r3, r1, #2
 8002278:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800227c:	0082      	lsls	r2, r0, #2
 800227e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002282:	f7fe f859 	bl	8000338 <__aeabi_uldivmod>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <UART_SetConfig+0x38c>)
 800228c:	fba3 1302 	umull	r1, r3, r3, r2
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	2164      	movs	r1, #100	; 0x64
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	3332      	adds	r3, #50	; 0x32
 800229e:	4a2a      	ldr	r2, [pc, #168]	; (8002348 <UART_SetConfig+0x38c>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022aa:	441e      	add	r6, r3
 80022ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ae:	4618      	mov	r0, r3
 80022b0:	f04f 0100 	mov.w	r1, #0
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	1894      	adds	r4, r2, r2
 80022ba:	603c      	str	r4, [r7, #0]
 80022bc:	415b      	adcs	r3, r3
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022c4:	1812      	adds	r2, r2, r0
 80022c6:	eb41 0303 	adc.w	r3, r1, r3
 80022ca:	f04f 0400 	mov.w	r4, #0
 80022ce:	f04f 0500 	mov.w	r5, #0
 80022d2:	00dd      	lsls	r5, r3, #3
 80022d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022d8:	00d4      	lsls	r4, r2, #3
 80022da:	4622      	mov	r2, r4
 80022dc:	462b      	mov	r3, r5
 80022de:	eb12 0a00 	adds.w	sl, r2, r0
 80022e2:	eb43 0b01 	adc.w	fp, r3, r1
 80022e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f04f 0100 	mov.w	r1, #0
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	008b      	lsls	r3, r1, #2
 80022fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80022fe:	0082      	lsls	r2, r0, #2
 8002300:	4650      	mov	r0, sl
 8002302:	4659      	mov	r1, fp
 8002304:	f7fe f818 	bl	8000338 <__aeabi_uldivmod>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <UART_SetConfig+0x38c>)
 800230e:	fba3 1302 	umull	r1, r3, r3, r2
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2164      	movs	r1, #100	; 0x64
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	3332      	adds	r3, #50	; 0x32
 8002320:	4a09      	ldr	r2, [pc, #36]	; (8002348 <UART_SetConfig+0x38c>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	f003 020f 	and.w	r2, r3, #15
 800232c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4432      	add	r2, r6
 8002332:	609a      	str	r2, [r3, #8]
}
 8002334:	bf00      	nop
 8002336:	377c      	adds	r7, #124	; 0x7c
 8002338:	46bd      	mov	sp, r7
 800233a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800233e:	bf00      	nop
 8002340:	40011000 	.word	0x40011000
 8002344:	40011400 	.word	0x40011400
 8002348:	51eb851f 	.word	0x51eb851f

0800234c <OSInitHookBegin>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
    OS_STK  *pstk;
#if (OS_CPU_ARM_FP_EN > 0u)
    INT32U   reg_val;
#endif
                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
 8002352:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <OSInitHookBegin+0x68>)
 8002354:	60bb      	str	r3, [r7, #8]
    size = OS_CPU_EXCEPT_STK_SIZE;
 8002356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235a:	60fb      	str	r3, [r7, #12]
    while (size > 0u) {
 800235c:	e007      	b.n	800236e <OSInitHookBegin+0x22>
        size--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3b01      	subs	r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
       *pstk++ = (OS_STK)0;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1d1a      	adds	r2, r3, #4
 8002368:	60ba      	str	r2, [r7, #8]
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f4      	bne.n	800235e <OSInitHookBegin+0x12>
    }

                                                                /* Align the ISR stack to 8-bytes                       */
    OS_CPU_ExceptStkBase = (OS_STK *)&OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
 8002374:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <OSInitHookBegin+0x6c>)
 8002376:	4a11      	ldr	r2, [pc, #68]	; (80023bc <OSInitHookBegin+0x70>)
 8002378:	601a      	str	r2, [r3, #0]
    OS_CPU_ExceptStkBase = (OS_STK *)((OS_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 800237a:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <OSInitHookBegin+0x6c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0307 	bic.w	r3, r3, #7
 8002382:	461a      	mov	r2, r3
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <OSInitHookBegin+0x6c>)
 8002386:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    reg_val = OS_CPU_CM_FP_FPCCR;                               /* Check the floating point mode.                       */
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <OSInitHookBegin+0x74>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	607b      	str	r3, [r7, #4]
    if ((reg_val & OS_CPU_CM_FPCCR_LAZY_STK) != OS_CPU_CM_FPCCR_LAZY_STK) {
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002394:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002398:	d000      	beq.n	800239c <OSInitHookBegin+0x50>
        while (1u) {                                            /* See Note (2).                                        */
 800239a:	e7fe      	b.n	800239a <OSInitHookBegin+0x4e>
        }
    }
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <OSInitHookBegin+0x78>)
 800239e:	2200      	movs	r2, #0
 80023a0:	801a      	strh	r2, [r3, #0]
#endif

                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <OSInitHookBegin+0x7c>)
 80023a4:	2240      	movs	r2, #64	; 0x40
 80023a6:	601a      	str	r2, [r3, #0]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	200008c4 	.word	0x200008c4
 80023b8:	200008bc 	.word	0x200008bc
 80023bc:	20000cc4 	.word	0x20000cc4
 80023c0:	e000ef34 	.word	0xe000ef34
 80023c4:	20000028 	.word	0x20000028
 80023c8:	200008c0 	.word	0x200008c0

080023cc <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0

}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
#endif
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
#else
    (void)ptcb;
#endif
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
#endif
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <OSTaskStkInit>:

OS_STK  *OSTaskStkInit (void    (*task)(void *p_arg),
                        void     *p_arg,
                        OS_STK   *ptos,
                        INT16U    opt)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	807b      	strh	r3, [r7, #2]
    OS_STK  *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */
    p_stk      = ptos + 1u;                                     /* Load stack pointer                                   */
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk      = (OS_STK *)((OS_STK)(p_stk) & 0xFFFFFFF8u);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f023 0307 	bic.w	r3, r3, #7
 800244e:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception      */
#if (OS_CPU_ARM_FP_EN > 0u)                                     /* FPU auto-saved registers.                            */
     --p_stk;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3b04      	subs	r3, #4
 8002454:	617b      	str	r3, [r7, #20]
    *(--p_stk) = (OS_STK)0x02000000u;                           /* FPSCR                                                */
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	3b04      	subs	r3, #4
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002462:	601a      	str	r2, [r3, #0]
                                                                /* Initialize S0-S15 floating point registers           */
    *(--p_stk) = (OS_STK)0x41700000u;                           /* S15                                                  */
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3b04      	subs	r3, #4
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	4a93      	ldr	r2, [pc, #588]	; (80026bc <OSTaskStkInit+0x288>)
 800246e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41600000u;                           /* S14                                                  */
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3b04      	subs	r3, #4
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	4a91      	ldr	r2, [pc, #580]	; (80026c0 <OSTaskStkInit+0x28c>)
 800247a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41500000u;                           /* S13                                                  */
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3b04      	subs	r3, #4
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	4a8f      	ldr	r2, [pc, #572]	; (80026c4 <OSTaskStkInit+0x290>)
 8002486:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41400000u;                           /* S12                                                  */
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3b04      	subs	r3, #4
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	4a8d      	ldr	r2, [pc, #564]	; (80026c8 <OSTaskStkInit+0x294>)
 8002492:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41300000u;                           /* S11                                                  */
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3b04      	subs	r3, #4
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	4a8b      	ldr	r2, [pc, #556]	; (80026cc <OSTaskStkInit+0x298>)
 800249e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41200000u;                           /* S10                                                  */
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3b04      	subs	r3, #4
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	4a89      	ldr	r2, [pc, #548]	; (80026d0 <OSTaskStkInit+0x29c>)
 80024aa:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41100000u;                           /* S9                                                   */
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3b04      	subs	r3, #4
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	4a87      	ldr	r2, [pc, #540]	; (80026d4 <OSTaskStkInit+0x2a0>)
 80024b6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41000000u;                           /* S8                                                   */
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3b04      	subs	r3, #4
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80024c4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40E00000u;                           /* S7                                                   */
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3b04      	subs	r3, #4
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	4a82      	ldr	r2, [pc, #520]	; (80026d8 <OSTaskStkInit+0x2a4>)
 80024d0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40C00000u;                           /* S6                                                   */
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3b04      	subs	r3, #4
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	4a80      	ldr	r2, [pc, #512]	; (80026dc <OSTaskStkInit+0x2a8>)
 80024dc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40A00000u;                           /* S5                                                   */
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	3b04      	subs	r3, #4
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	4a7e      	ldr	r2, [pc, #504]	; (80026e0 <OSTaskStkInit+0x2ac>)
 80024e8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40800000u;                           /* S4                                                   */
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3b04      	subs	r3, #4
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80024f6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40400000u;                           /* S3                                                   */
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3b04      	subs	r3, #4
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	4a78      	ldr	r2, [pc, #480]	; (80026e4 <OSTaskStkInit+0x2b0>)
 8002502:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40000000u;                           /* S2                                                   */
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3b04      	subs	r3, #4
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002510:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x3F800000u;                           /* S1                                                   */
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3b04      	subs	r3, #4
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800251e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x00000000u;                           /* S0                                                   */
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3b04      	subs	r3, #4
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
#endif
    *(--p_stk) = (OS_STK)0x01000000uL;                          /* xPSR                                                 */
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3b04      	subs	r3, #4
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002538:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)task;                                  /* Entry Point                                          */
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	3b04      	subs	r3, #4
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)OS_TaskReturn;                         /* R14 (LR)                                             */
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3b04      	subs	r3, #4
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	4a66      	ldr	r2, [pc, #408]	; (80026e8 <OSTaskStkInit+0x2b4>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x12121212uL;                          /* R12                                                  */
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	3b04      	subs	r3, #4
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800255e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x03030303uL;                          /* R3                                                   */
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3b04      	subs	r3, #4
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800256c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x02020202uL;                          /* R2                                                   */
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3b04      	subs	r3, #4
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800257a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x01010101uL;                          /* R1                                                   */
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3b04      	subs	r3, #4
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8002588:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)p_arg;                                 /* R0 : argument                                        */
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3b04      	subs	r3, #4
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    *(--p_stk) = (OS_STK)0xFFFFFFEDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3b04      	subs	r3, #4
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f06f 0212 	mvn.w	r2, #18
 80025a2:	601a      	str	r2, [r3, #0]
#else
    *(--p_stk) = (OS_STK)0xFFFFFFFDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
#endif
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (OS_STK)0x11111111uL;                          /* R11                                                  */
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3b04      	subs	r3, #4
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80025b0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x10101010uL;                          /* R10                                                  */
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3b04      	subs	r3, #4
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80025be:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3b04      	subs	r3, #4
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 80025cc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3b04      	subs	r3, #4
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 80025da:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3b04      	subs	r3, #4
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 80025e8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3b04      	subs	r3, #4
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 80025f6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	3b04      	subs	r3, #4
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8002604:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3b04      	subs	r3, #4
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8002612:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
                                                                /* Initialize S16-S31 floating point registers          */
    *(--p_stk) = (OS_STK)0x41F80000u;                           /* S31                                                  */
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3b04      	subs	r3, #4
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	4a33      	ldr	r2, [pc, #204]	; (80026ec <OSTaskStkInit+0x2b8>)
 800261e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41F00000u;                           /* S30                                                  */
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3b04      	subs	r3, #4
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	4a31      	ldr	r2, [pc, #196]	; (80026f0 <OSTaskStkInit+0x2bc>)
 800262a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41E80000u;                           /* S29                                                  */
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3b04      	subs	r3, #4
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	4a2f      	ldr	r2, [pc, #188]	; (80026f4 <OSTaskStkInit+0x2c0>)
 8002636:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41E00000u;                           /* S28                                                  */
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3b04      	subs	r3, #4
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	4a2d      	ldr	r2, [pc, #180]	; (80026f8 <OSTaskStkInit+0x2c4>)
 8002642:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41D80000u;                           /* S27                                                  */
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3b04      	subs	r3, #4
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <OSTaskStkInit+0x2c8>)
 800264e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41D00000u;                           /* S26                                                  */
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3b04      	subs	r3, #4
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	4a29      	ldr	r2, [pc, #164]	; (8002700 <OSTaskStkInit+0x2cc>)
 800265a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41C80000u;                           /* S25                                                  */
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3b04      	subs	r3, #4
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	4a27      	ldr	r2, [pc, #156]	; (8002704 <OSTaskStkInit+0x2d0>)
 8002666:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41C00000u;                           /* S24                                                  */
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	3b04      	subs	r3, #4
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	4a25      	ldr	r2, [pc, #148]	; (8002708 <OSTaskStkInit+0x2d4>)
 8002672:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41B80000u;                           /* S23                                                  */
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3b04      	subs	r3, #4
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	4a23      	ldr	r2, [pc, #140]	; (800270c <OSTaskStkInit+0x2d8>)
 800267e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41B00000u;                           /* S22                                                  */
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3b04      	subs	r3, #4
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	4a21      	ldr	r2, [pc, #132]	; (8002710 <OSTaskStkInit+0x2dc>)
 800268a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41A80000u;                           /* S21                                                  */
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3b04      	subs	r3, #4
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <OSTaskStkInit+0x2e0>)
 8002696:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41A00000u;                           /* S20                                                  */
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3b04      	subs	r3, #4
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <OSTaskStkInit+0x2e4>)
 80026a2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41980000u;                           /* S19                                                  */
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3b04      	subs	r3, #4
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	4a1b      	ldr	r2, [pc, #108]	; (800271c <OSTaskStkInit+0x2e8>)
 80026ae:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41900000u;                           /* S18                                                  */
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3b04      	subs	r3, #4
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	e032      	b.n	8002720 <OSTaskStkInit+0x2ec>
 80026ba:	bf00      	nop
 80026bc:	41700000 	.word	0x41700000
 80026c0:	41600000 	.word	0x41600000
 80026c4:	41500000 	.word	0x41500000
 80026c8:	41400000 	.word	0x41400000
 80026cc:	41300000 	.word	0x41300000
 80026d0:	41200000 	.word	0x41200000
 80026d4:	41100000 	.word	0x41100000
 80026d8:	40e00000 	.word	0x40e00000
 80026dc:	40c00000 	.word	0x40c00000
 80026e0:	40a00000 	.word	0x40a00000
 80026e4:	40400000 	.word	0x40400000
 80026e8:	08003e49 	.word	0x08003e49
 80026ec:	41f80000 	.word	0x41f80000
 80026f0:	41f00000 	.word	0x41f00000
 80026f4:	41e80000 	.word	0x41e80000
 80026f8:	41e00000 	.word	0x41e00000
 80026fc:	41d80000 	.word	0x41d80000
 8002700:	41d00000 	.word	0x41d00000
 8002704:	41c80000 	.word	0x41c80000
 8002708:	41c00000 	.word	0x41c00000
 800270c:	41b80000 	.word	0x41b80000
 8002710:	41b00000 	.word	0x41b00000
 8002714:	41a80000 	.word	0x41a80000
 8002718:	41a00000 	.word	0x41a00000
 800271c:	41980000 	.word	0x41980000
 8002720:	4a0a      	ldr	r2, [pc, #40]	; (800274c <OSTaskStkInit+0x318>)
 8002722:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41880000u;                           /* S17                                                  */
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3b04      	subs	r3, #4
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	4a08      	ldr	r2, [pc, #32]	; (8002750 <OSTaskStkInit+0x31c>)
 800272e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41800000u;                           /* S16                                                  */
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3b04      	subs	r3, #4
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800273c:	601a      	str	r2, [r3, #0]
#endif

    return (p_stk);
 800273e:	697b      	ldr	r3, [r7, #20]
}
 8002740:	4618      	mov	r0, r3
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	41900000 	.word	0x41900000
 8002750:	41880000 	.word	0x41880000

08002754 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Push(OSTCBCur->OSTCBStkPtr);                  /* Push the FP registers of the current task.           */
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <OSTaskSwHook+0x20>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd fd3a 	bl	80001d8 <OS_CPU_FP_Reg_Push>
#endif

    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdy);

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Pop(OSTCBHighRdy->OSTCBStkPtr);               /* Pop the FP registers of the highest ready task.      */
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <OSTaskSwHook+0x24>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fd3d 	bl	80001ea <OS_CPU_FP_Reg_Pop>
#endif
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200013cc 	.word	0x200013cc
 8002778:	200011b4 	.word	0x200011b4

0800277c <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <OSTimeTickHook+0x28>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <OSTimeTickHook+0x28>)
 800279e:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <OSTimeTickHook+0x28>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	d904      	bls.n	80027b2 <OSTimeTickHook+0x22>
        OSTmrCtr = 0u;
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <OSTimeTickHook+0x28>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 80027ae:	f001 fbd1 	bl	8003f54 <OSTmrSignal>
    }
#endif
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000028 	.word	0x20000028

080027bc <OS_CPU_SysTickInitFreq>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInitFreq (INT32U  cpu_freq)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    INT32U  cnts;


    cnts = (cpu_freq / (INT32U)OS_TICKS_PER_SEC);               /* Determine nbr SysTick cnts between two OS tick intr. */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a06      	ldr	r2, [pc, #24]	; (80027e0 <OS_CPU_SysTickInitFreq+0x24>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	60fb      	str	r3, [r7, #12]

    OS_CPU_SysTickInit(cnts);
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f807 	bl	80027e4 <OS_CPU_SysTickInit>
}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	51eb851f 	.word	0x51eb851f

080027e4 <OS_CPU_SysTickInit>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (INT32U  cnts)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
    INT32U  prio;
    INT32U  basepri;


                                                                /* Set BASEPRI boundary from the configuration.         */
    basepri               = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 80027ec:	2340      	movs	r3, #64	; 0x40
 80027ee:	60fb      	str	r3, [r7, #12]
    OS_CPU_CM_SYST_RVR    = cnts - 1u;                          /* Set Reload register.                                 */
 80027f0:	4a12      	ldr	r2, [pc, #72]	; (800283c <OS_CPU_SysTickInit+0x58>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	6013      	str	r3, [r2, #0]

                                                                /* Set SysTick handler prio.                            */
    prio                  =  OS_CPU_CM_SCB_SHPRI3;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <OS_CPU_SysTickInit+0x5c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60bb      	str	r3, [r7, #8]
    prio                 &=  0x00FFFFFFu;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002804:	60bb      	str	r3, [r7, #8]
    prio                 |= (basepri << 24u);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4313      	orrs	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
    OS_CPU_CM_SCB_SHPRI3  = prio;
 8002810:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <OS_CPU_SysTickInit+0x5c>)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	6013      	str	r3, [r2, #0]

                                                                /* Enable timer.                                        */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_CLKSOURCE |
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <OS_CPU_SysTickInit+0x60>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <OS_CPU_SysTickInit+0x60>)
 800281c:	f043 0305 	orr.w	r3, r3, #5
 8002820:	6013      	str	r3, [r2, #0]
                            OS_CPU_CM_SYST_CSR_ENABLE;
                                                                /* Enable timer interrupt.                              */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_TICKINT;
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <OS_CPU_SysTickInit+0x60>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a07      	ldr	r2, [pc, #28]	; (8002844 <OS_CPU_SysTickInit+0x60>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6013      	str	r3, [r2, #0]
}
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e014 	.word	0xe000e014
 8002840:	e000ed20 	.word	0xe000ed20
 8002844:	e000e010 	.word	0xe000e010

08002848 <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <OSEventNameSet+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2204      	movs	r2, #4
 8002862:	701a      	strb	r2, [r3, #0]
        return;
 8002864:	e025      	b.n	80028b2 <OSEventNameSet+0x6a>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d103      	bne.n	8002874 <OSEventNameSet+0x2c>
        *perr = OS_ERR_PNAME_NULL;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	220c      	movs	r2, #12
 8002870:	701a      	strb	r2, [r3, #0]
        return;
 8002872:	e01e      	b.n	80028b2 <OSEventNameSet+0x6a>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8002874:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <OSEventNameSet+0x70>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <OSEventNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2212      	movs	r2, #18
 8002880:	701a      	strb	r2, [r3, #0]
        return;
 8002882:	e016      	b.n	80028b2 <OSEventNameSet+0x6a>
    }
    switch (pevent->OSEventType) {
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	3b01      	subs	r3, #1
 800288a:	2b03      	cmp	r3, #3
 800288c:	d903      	bls.n	8002896 <OSEventNameSet+0x4e>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
             return;
 8002894:	e00d      	b.n	80028b2 <OSEventNameSet+0x6a>
             break;
 8002896:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 8002898:	2040      	movs	r0, #64	; 0x40
 800289a:	f7fd fcac 	bl	80001f6 <OS_CPU_SR_Save>
 800289e:	6178      	str	r0, [r7, #20]
    pevent->OSEventName = pname;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 80028a6:	6978      	ldr	r0, [r7, #20]
 80028a8:	f7fd fcb3 	bl	8000212 <OS_CPU_SR_Restore>
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
}
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	200013c8 	.word	0x200013c8

080028bc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
 80028c0:	f7ff fd44 	bl	800234c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 80028c4:	f000 fb58 	bl	8002f78 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 80028c8:	f000 fb94 	bl	8002ff4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 80028cc:	f000 fc10 	bl	80030f0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 80028d0:	f000 fb08 	bl	8002ee4 <OS_InitEventList>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 80028d4:	f000 fbc0 	bl	8003058 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 80028d8:	f000 fbe4 	bl	80030a4 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 80028dc:	f001 fb4c 	bl	8003f78 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 80028e0:	f7ff fd74 	bl	80023cc <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
#endif
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <OSIntEnter+0x2c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d109      	bne.n	8002908 <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <OSIntEnter+0x30>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2bff      	cmp	r3, #255	; 0xff
 80028fa:	d005      	beq.n	8002908 <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <OSIntEnter+0x30>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <OSIntEnter+0x30>)
 8002906:	701a      	strb	r2, [r3, #0]
        }
        OS_TRACE_ISR_ENTER();
    }
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000d09 	.word	0x20000d09
 8002918:	200013c8 	.word	0x200013c8

0800291c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <OSIntExit+0x84>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d134      	bne.n	8002998 <OSIntExit+0x7c>
        OS_ENTER_CRITICAL();
 800292e:	2040      	movs	r0, #64	; 0x40
 8002930:	f7fd fc61 	bl	80001f6 <OS_CPU_SR_Save>
 8002934:	6078      	str	r0, [r7, #4]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <OSIntExit+0x88>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <OSIntExit+0x2e>
            OSIntNesting--;
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <OSIntExit+0x88>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	3b01      	subs	r3, #1
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <OSIntExit+0x88>)
 8002948:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 800294a:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <OSIntExit+0x88>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11f      	bne.n	8002992 <OSIntExit+0x76>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <OSIntExit+0x8c>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d11b      	bne.n	8002992 <OSIntExit+0x76>
                OS_SchedNew();
 800295a:	f000 fc77 	bl	800324c <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <OSIntExit+0x90>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <OSIntExit+0x94>)
 8002966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296a:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <OSIntExit+0x98>)
 800296c:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 800296e:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <OSIntExit+0x90>)
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <OSIntExit+0x9c>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d00b      	beq.n	8002992 <OSIntExit+0x76>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <OSIntExit+0x98>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002980:	3201      	adds	r2, #1
 8002982:	635a      	str	r2, [r3, #52]	; 0x34
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 8002984:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <OSIntExit+0xa0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	4a0c      	ldr	r2, [pc, #48]	; (80029bc <OSIntExit+0xa0>)
 800298c:	6013      	str	r3, [r2, #0]
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 800298e:	f7fd fc89 	bl	80002a4 <OSCtxSw>
            }
        } else {
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7fd fc3d 	bl	8000212 <OS_CPU_SR_Restore>
    }
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000d09 	.word	0x20000d09
 80029a4:	200013c8 	.word	0x200013c8
 80029a8:	20000d00 	.word	0x20000d00
 80029ac:	20000d12 	.word	0x20000d12
 80029b0:	20001db0 	.word	0x20001db0
 80029b4:	200011b4 	.word	0x200011b4
 80029b8:	20000f94 	.word	0x20000f94
 80029bc:	200011a0 	.word	0x200011a0

080029c0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <OSSchedLock+0x44>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d114      	bne.n	80029fc <OSSchedLock+0x3c>
        OS_ENTER_CRITICAL();
 80029d2:	2040      	movs	r0, #64	; 0x40
 80029d4:	f7fd fc0f 	bl	80001f6 <OS_CPU_SR_Save>
 80029d8:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <OSSchedLock+0x48>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <OSSchedLock+0x36>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 80029e2:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <OSSchedLock+0x4c>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2bff      	cmp	r3, #255	; 0xff
 80029e8:	d005      	beq.n	80029f6 <OSSchedLock+0x36>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <OSSchedLock+0x4c>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <OSSchedLock+0x4c>)
 80029f4:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fd fc0b 	bl	8000212 <OS_CPU_SR_Restore>
    }
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000d09 	.word	0x20000d09
 8002a08:	200013c8 	.word	0x200013c8
 8002a0c:	20000d00 	.word	0x20000d00

08002a10 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8002a1a:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <OSSchedUnlock+0x68>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d126      	bne.n	8002a70 <OSSchedUnlock+0x60>
        OS_ENTER_CRITICAL();
 8002a22:	2040      	movs	r0, #64	; 0x40
 8002a24:	f7fd fbe7 	bl	80001f6 <OS_CPU_SR_Save>
 8002a28:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <OSSchedUnlock+0x6c>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11b      	bne.n	8002a6a <OSSchedUnlock+0x5a>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <OSSchedUnlock+0x70>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d013      	beq.n	8002a62 <OSSchedUnlock+0x52>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <OSSchedUnlock+0x70>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <OSSchedUnlock+0x70>)
 8002a44:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <OSSchedUnlock+0x70>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <OSSchedUnlock+0x4a>
                    OS_EXIT_CRITICAL();
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fd fbdf 	bl	8000212 <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 8002a54:	f000 fbb8 	bl	80031c8 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8002a58:	e00a      	b.n	8002a70 <OSSchedUnlock+0x60>
                    OS_EXIT_CRITICAL();
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fd fbd9 	bl	8000212 <OS_CPU_SR_Restore>
}
 8002a60:	e006      	b.n	8002a70 <OSSchedUnlock+0x60>
                OS_EXIT_CRITICAL();
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fd fbd5 	bl	8000212 <OS_CPU_SR_Restore>
}
 8002a68:	e002      	b.n	8002a70 <OSSchedUnlock+0x60>
            OS_EXIT_CRITICAL();
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fd fbd1 	bl	8000212 <OS_CPU_SR_Restore>
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000d09 	.word	0x20000d09
 8002a7c:	200013c8 	.word	0x200013c8
 8002a80:	20000d00 	.word	0x20000d00

08002a84 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <OSStart+0x38>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d113      	bne.n	8002ab8 <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 8002a90:	f000 fbdc 	bl	800324c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <OSStart+0x3c>)
 8002a96:	781a      	ldrb	r2, [r3, #0]
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <OSStart+0x40>)
 8002a9a:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <OSStart+0x3c>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <OSStart+0x44>)
 8002aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa8:	4a08      	ldr	r2, [pc, #32]	; (8002acc <OSStart+0x48>)
 8002aaa:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <OSStart+0x48>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a07      	ldr	r2, [pc, #28]	; (8002ad0 <OSStart+0x4c>)
 8002ab2:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8002ab4:	f7fd fbb6 	bl	8000224 <OSStartHighRdy>
    }
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000d09 	.word	0x20000d09
 8002ac0:	20000d12 	.word	0x20000d12
 8002ac4:	20000f94 	.word	0x20000f94
 8002ac8:	20001db0 	.word	0x20001db0
 8002acc:	200011b4 	.word	0x200011b4
 8002ad0:	200013cc 	.word	0x200013cc

08002ad4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8002ade:	f7ff fe57 	bl	8002790 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8002ae2:	2040      	movs	r0, #64	; 0x40
 8002ae4:	f7fd fb87 	bl	80001f6 <OS_CPU_SR_Save>
 8002ae8:	6078      	str	r0, [r7, #4]
    OSTime++;
 8002aea:	4b45      	ldr	r3, [pc, #276]	; (8002c00 <OSTimeTick+0x12c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3301      	adds	r3, #1
 8002af0:	4a43      	ldr	r2, [pc, #268]	; (8002c00 <OSTimeTick+0x12c>)
 8002af2:	6013      	str	r3, [r2, #0]
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7fd fb8c 	bl	8000212 <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 8002afa:	4b42      	ldr	r3, [pc, #264]	; (8002c04 <OSTimeTick+0x130>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d17a      	bne.n	8002bf8 <OSTimeTick+0x124>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8002b02:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <OSTimeTick+0x134>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d00c      	beq.n	8002b24 <OSTimeTick+0x50>
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	dc10      	bgt.n	8002b30 <OSTimeTick+0x5c>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <OSTimeTick+0x44>
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d003      	beq.n	8002b1e <OSTimeTick+0x4a>
 8002b16:	e00b      	b.n	8002b30 <OSTimeTick+0x5c>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	72fb      	strb	r3, [r7, #11]
                 break;
 8002b1c:	e00e      	b.n	8002b3c <OSTimeTick+0x68>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 8002b1e:	2300      	movs	r3, #0
 8002b20:	72fb      	strb	r3, [r7, #11]
                 break;
 8002b22:	e00b      	b.n	8002b3c <OSTimeTick+0x68>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8002b24:	2301      	movs	r3, #1
 8002b26:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8002b28:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <OSTimeTick+0x134>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
                 break;
 8002b2e:	e005      	b.n	8002b3c <OSTimeTick+0x68>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8002b30:	2301      	movs	r3, #1
 8002b32:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 8002b34:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <OSTimeTick+0x134>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
                 break;
 8002b3a:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 8002b3c:	7afb      	ldrb	r3, [r7, #11]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d059      	beq.n	8002bf6 <OSTimeTick+0x122>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 8002b42:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <OSTimeTick+0x138>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8002b48:	e04f      	b.n	8002bea <OSTimeTick+0x116>
            OS_ENTER_CRITICAL();
 8002b4a:	2040      	movs	r0, #64	; 0x40
 8002b4c:	f7fd fb53 	bl	80001f6 <OS_CPU_SR_Save>
 8002b50:	6078      	str	r0, [r7, #4]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d041      	beq.n	8002bde <OSTimeTick+0x10a>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	1e5a      	subs	r2, r3, #1
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d138      	bne.n	8002bde <OSTimeTick+0x10a>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002b72:	f003 0337 	and.w	r3, r3, #55	; 0x37
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <OSTimeTick+0xc2>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002b80:	f023 0337 	bic.w	r3, r3, #55	; 0x37
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8002b94:	e003      	b.n	8002b9e <OSTimeTick+0xca>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d118      	bne.n	8002bde <OSTimeTick+0x10a>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8002bb2:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <OSTimeTick+0x13c>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <OSTimeTick+0x13c>)
 8002bbc:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <OSTimeTick+0x140>)
 8002bc8:	5c9a      	ldrb	r2, [r3, r2]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002bd0:	68f9      	ldr	r1, [r7, #12]
 8002bd2:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <OSTimeTick+0x140>)
 8002bdc:	545a      	strb	r2, [r3, r1]
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fd fb14 	bl	8000212 <OS_CPU_SR_Restore>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002bf0:	2b3f      	cmp	r3, #63	; 0x3f
 8002bf2:	d1aa      	bne.n	8002b4a <OSTimeTick+0x76>
 8002bf4:	e000      	b.n	8002bf8 <OSTimeTick+0x124>
            return;
 8002bf6:	bf00      	nop
        }
    }
}
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200013d4 	.word	0x200013d4
 8002c04:	20000d09 	.word	0x20000d09
 8002c08:	20000f9c 	.word	0x20000f9c
 8002c0c:	20000f98 	.word	0x20000f98
 8002c10:	200011b8 	.word	0x200011b8
 8002c14:	200011bc 	.word	0x200011bc

08002c18 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	460b      	mov	r3, r1
 8002c38:	71fb      	strb	r3, [r7, #7]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	7a9b      	ldrb	r3, [r3, #10]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b2d      	ldr	r3, [pc, #180]	; (8002cfc <OS_EventTaskRdy+0xd4>)
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	7adb      	ldrb	r3, [r3, #11]
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <OS_EventTaskRdy+0xd4>)
 8002c56:	5c9b      	ldrb	r3, [r3, r2]
 8002c58:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	7dbb      	ldrb	r3, [r7, #22]
 8002c62:	4413      	add	r3, r2
 8002c64:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 8002c66:	7d7b      	ldrb	r3, [r7, #21]
 8002c68:	4a25      	ldr	r2, [pc, #148]	; (8002d00 <OS_EventTaskRdy+0xd8>)
 8002c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6e:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2200      	movs	r2, #0
 8002c74:	629a      	str	r2, [r3, #40]	; 0x28
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	4013      	ands	r3, r2
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	79ba      	ldrb	r2, [r7, #6]
 8002c90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d113      	bne.n	8002cca <OS_EventTaskRdy+0xa2>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8002ca8:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <OS_EventTaskRdy+0xdc>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <OS_EventTaskRdy+0xdc>)
 8002cb2:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <OS_EventTaskRdy+0xe0>)
 8002cb8:	5cd1      	ldrb	r1, [r2, r3]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8002cc0:	7dfb      	ldrb	r3, [r7, #23]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	b2d1      	uxtb	r1, r2
 8002cc6:	4a10      	ldr	r2, [pc, #64]	; (8002d08 <OS_EventTaskRdy+0xe0>)
 8002cc8:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 8002cca:	68f9      	ldr	r1, [r7, #12]
 8002ccc:	6938      	ldr	r0, [r7, #16]
 8002cce:	f000 f875 	bl	8002dbc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <OS_EventTaskRdy+0xca>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6938      	ldr	r0, [r7, #16]
 8002ce2:	f000 f89e 	bl	8002e22 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventMultiPtr  = (OS_EVENT **)0;     /* No longer pending on multi list             */
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	621a      	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy  = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

    return (prio);
 8002cf2:	7d7b      	ldrb	r3, [r7, #21]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	08004410 	.word	0x08004410
 8002d00:	20001db0 	.word	0x20001db0
 8002d04:	200011b8 	.word	0x200011b8
 8002d08:	200011bc 	.word	0x200011bc

08002d0c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 8002d14:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <OS_EventTaskWait+0xa4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 8002d1c:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <OS_EventTaskWait+0xa4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d24:	461a      	mov	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	7ada      	ldrb	r2, [r3, #11]
 8002d2c:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <OS_EventTaskWait+0xa4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d34:	491e      	ldr	r1, [pc, #120]	; (8002db0 <OS_EventTaskWait+0xa4>)
 8002d36:	6809      	ldr	r1, [r1, #0]
 8002d38:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	440b      	add	r3, r1
 8002d44:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	7a9a      	ldrb	r2, [r3, #10]
 8002d4a:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <OS_EventTaskWait+0xa4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002d52:	4313      	orrs	r3, r2
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <OS_EventTaskWait+0xa4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d62:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	4a13      	ldr	r2, [pc, #76]	; (8002db4 <OS_EventTaskWait+0xa8>)
 8002d68:	5cd1      	ldrb	r1, [r2, r3]
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <OS_EventTaskWait+0xa4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d72:	43db      	mvns	r3, r3
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	400a      	ands	r2, r1
 8002d7a:	b2d1      	uxtb	r1, r2
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <OS_EventTaskWait+0xa8>)
 8002d7e:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <OS_EventTaskWait+0xa8>)
 8002d84:	5cd3      	ldrb	r3, [r2, r3]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <OS_EventTaskWait+0xa4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002d92:	43db      	mvns	r3, r3
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <OS_EventTaskWait+0xac>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <OS_EventTaskWait+0xac>)
 8002da0:	701a      	strb	r2, [r3, #0]
    }
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	200013cc 	.word	0x200013cc
 8002db4:	200011bc 	.word	0x200011bc
 8002db8:	200011b8 	.word	0x200011b8

08002dbc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dcc:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	7ad9      	ldrb	r1, [r3, #11]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	400a      	ands	r2, r1
 8002de4:	b2d1      	uxtb	r1, r2
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	4413      	add	r3, r2
 8002dea:	460a      	mov	r2, r1
 8002dec:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	7adb      	ldrb	r3, [r3, #11]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	7a9a      	ldrb	r2, [r3, #10]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e04:	43db      	mvns	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	4013      	ands	r3, r2
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	729a      	strb	r2, [r3, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	61da      	str	r2, [r3, #28]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b087      	sub	sp, #28
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e32:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e3a:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e42:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8002e4e:	e022      	b.n	8002e96 <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	7ad9      	ldrb	r1, [r3, #11]
 8002e58:	7b7b      	ldrb	r3, [r7, #13]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	400a      	ands	r2, r1
 8002e62:	b2d1      	uxtb	r1, r2
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	460a      	mov	r2, r1
 8002e6a:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	7adb      	ldrb	r3, [r3, #11]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d108      	bne.n	8002e8a <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	7a9a      	ldrb	r2, [r3, #10]
 8002e7c:	7bbb      	ldrb	r3, [r7, #14]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4013      	ands	r3, r2
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1d9      	bne.n	8002e50 <OS_EventTaskRemoveMulti+0x2e>
    }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]
 8002ebc:	e007      	b.n	8002ece <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	2b07      	cmp	r3, #7
 8002ed2:	d9f4      	bls.n	8002ebe <OS_EventWaitListInit+0x14>
    }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 8002eea:	21f0      	movs	r1, #240	; 0xf0
 8002eec:	481f      	ldr	r0, [pc, #124]	; (8002f6c <OS_InitEventList+0x88>)
 8002eee:	f000 f951 	bl	8003194 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	81fb      	strh	r3, [r7, #14]
 8002ef6:	e01e      	b.n	8002f36 <OS_InitEventList+0x52>
        ix_next = ix + 1u;
 8002ef8:	89fb      	ldrh	r3, [r7, #14]
 8002efa:	3301      	adds	r3, #1
 8002efc:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 8002efe:	89fa      	ldrh	r2, [r7, #14]
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <OS_InitEventList+0x88>)
 8002f0a:	4413      	add	r3, r2
 8002f0c:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 8002f0e:	88fa      	ldrh	r2, [r7, #6]
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4a14      	ldr	r2, [pc, #80]	; (8002f6c <OS_InitEventList+0x88>)
 8002f1a:	4413      	add	r3, r2
 8002f1c:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <OS_InitEventList+0x8c>)
 8002f2e:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8002f30:	89fb      	ldrh	r3, [r7, #14]
 8002f32:	3301      	adds	r3, #1
 8002f34:	81fb      	strh	r3, [r7, #14]
 8002f36:	89fb      	ldrh	r3, [r7, #14]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d9dd      	bls.n	8002ef8 <OS_InitEventList+0x14>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 8002f3c:	89fa      	ldrh	r2, [r7, #14]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <OS_InitEventList+0x88>)
 8002f48:	4413      	add	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2200      	movs	r2, #0
 8002f56:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <OS_InitEventList+0x8c>)
 8002f5c:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <OS_InitEventList+0x90>)
 8002f60:	4a02      	ldr	r2, [pc, #8]	; (8002f6c <OS_InitEventList+0x88>)
 8002f62:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200015dc 	.word	0x200015dc
 8002f70:	08004390 	.word	0x08004390
 8002f74:	200013c4 	.word	0x200013c4

08002f78 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <OS_InitMisc+0x50>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 8002f82:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <OS_InitMisc+0x54>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <OS_InitMisc+0x58>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <OS_InitMisc+0x5c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <OS_InitMisc+0x60>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <OS_InitMisc+0x64>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <OS_InitMisc+0x68>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <OS_InitMisc+0x6c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <OS_InitMisc+0x70>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <OS_InitMisc+0x74>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <OS_InitMisc+0x78>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
#endif
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	200013d4 	.word	0x200013d4
 8002fcc:	200013c8 	.word	0x200013c8
 8002fd0:	20000d00 	.word	0x20000d00
 8002fd4:	200011b1 	.word	0x200011b1
 8002fd8:	20000d09 	.word	0x20000d09
 8002fdc:	200011a0 	.word	0x200011a0
 8002fe0:	20000d0c 	.word	0x20000d0c
 8002fe4:	20001eb0 	.word	0x20001eb0
 8002fe8:	200011a8 	.word	0x200011a8
 8002fec:	20001dac 	.word	0x20001dac
 8002ff0:	20000d08 	.word	0x20000d08

08002ff4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <OS_InitRdyList+0x4c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8003000:	2300      	movs	r3, #0
 8003002:	71fb      	strb	r3, [r7, #7]
 8003004:	e006      	b.n	8003014 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	4a0e      	ldr	r2, [pc, #56]	; (8003044 <OS_InitRdyList+0x50>)
 800300a:	2100      	movs	r1, #0
 800300c:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	3301      	adds	r3, #1
 8003012:	71fb      	strb	r3, [r7, #7]
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	2b07      	cmp	r3, #7
 8003018:	d9f5      	bls.n	8003006 <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <OS_InitRdyList+0x54>)
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <OS_InitRdyList+0x58>)
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <OS_InitRdyList+0x5c>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <OS_InitRdyList+0x60>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	200011b8 	.word	0x200011b8
 8003044:	200011bc 	.word	0x200011bc
 8003048:	20000f94 	.word	0x20000f94
 800304c:	20000d12 	.word	0x20000d12
 8003050:	200011b4 	.word	0x200011b4
 8003054:	200013cc 	.word	0x200013cc

08003058 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 800305e:	2303      	movs	r3, #3
 8003060:	9304      	str	r3, [sp, #16]
 8003062:	2300      	movs	r3, #0
 8003064:	9303      	str	r3, [sp, #12]
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	9302      	str	r3, [sp, #8]
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <OS_InitTaskIdle+0x3c>)
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	233f      	movs	r3, #63	; 0x3f
 8003076:	4a08      	ldr	r2, [pc, #32]	; (8003098 <OS_InitTaskIdle+0x40>)
 8003078:	2100      	movs	r1, #0
 800307a:	4808      	ldr	r0, [pc, #32]	; (800309c <OS_InitTaskIdle+0x44>)
 800307c:	f000 fc3c 	bl	80038f8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 8003080:	1dfb      	adds	r3, r7, #7
 8003082:	461a      	mov	r2, r3
 8003084:	4906      	ldr	r1, [pc, #24]	; (80030a0 <OS_InitTaskIdle+0x48>)
 8003086:	203f      	movs	r0, #63	; 0x3f
 8003088:	f000 fd92 	bl	8003bb0 <OSTaskNameSet>
#endif
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	200013dc 	.word	0x200013dc
 8003098:	200015d8 	.word	0x200015d8
 800309c:	08003295 	.word	0x08003295
 80030a0:	08004394 	.word	0x08004394

080030a4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 80030aa:	2303      	movs	r3, #3
 80030ac:	9304      	str	r3, [sp, #16]
 80030ae:	2300      	movs	r3, #0
 80030b0:	9303      	str	r3, [sp, #12]
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	9302      	str	r3, [sp, #8]
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <OS_InitTaskStat+0x3c>)
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	233e      	movs	r3, #62	; 0x3e
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <OS_InitTaskStat+0x40>)
 80030c4:	2100      	movs	r1, #0
 80030c6:	4808      	ldr	r0, [pc, #32]	; (80030e8 <OS_InitTaskStat+0x44>)
 80030c8:	f000 fc16 	bl	80038f8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	461a      	mov	r2, r3
 80030d0:	4906      	ldr	r1, [pc, #24]	; (80030ec <OS_InitTaskStat+0x48>)
 80030d2:	203e      	movs	r0, #62	; 0x3e
 80030d4:	f000 fd6c 	bl	8003bb0 <OSTaskNameSet>
#endif
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000fa0 	.word	0x20000fa0
 80030e4:	2000119c 	.word	0x2000119c
 80030e8:	080032c5 	.word	0x080032c5
 80030ec:	080043a4 	.word	0x080043a4

080030f0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 80030f6:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 80030fa:	4821      	ldr	r0, [pc, #132]	; (8003180 <OS_InitTCBList+0x90>)
 80030fc:	f000 f84a 	bl	8003194 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 8003100:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003104:	481f      	ldr	r0, [pc, #124]	; (8003184 <OS_InitTCBList+0x94>)
 8003106:	f000 f845 	bl	8003194 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	e01b      	b.n	8003148 <OS_InitTCBList+0x58>
        ix_next =  ix + 1u;
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	3301      	adds	r3, #1
 8003114:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	4a17      	ldr	r2, [pc, #92]	; (8003180 <OS_InitTCBList+0x90>)
 8003122:	4413      	add	r3, r2
 8003124:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 8003126:	79fa      	ldrb	r2, [r7, #7]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <OS_InitTCBList+0x90>)
 8003132:	4413      	add	r3, r2
 8003134:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4a12      	ldr	r2, [pc, #72]	; (8003188 <OS_InitTCBList+0x98>)
 8003140:	649a      	str	r2, [r3, #72]	; 0x48
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	3301      	adds	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b14      	cmp	r3, #20
 800314c:	d9e0      	bls.n	8003110 <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	4a09      	ldr	r2, [pc, #36]	; (8003180 <OS_InitTCBList+0x90>)
 800315a:	4413      	add	r3, r2
 800315c:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2200      	movs	r2, #0
 8003162:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4a08      	ldr	r2, [pc, #32]	; (8003188 <OS_InitTCBList+0x98>)
 8003168:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <OS_InitTCBList+0x9c>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <OS_InitTCBList+0xa0>)
 8003172:	4a03      	ldr	r2, [pc, #12]	; (8003180 <OS_InitTCBList+0x90>)
 8003174:	601a      	str	r2, [r3, #0]
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200016cc 	.word	0x200016cc
 8003184:	20001db0 	.word	0x20001db0
 8003188:	08004390 	.word	0x08004390
 800318c:	20000f98 	.word	0x20000f98
 8003190:	200011ac 	.word	0x200011ac

08003194 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 80031a0:	e007      	b.n	80031b2 <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
        size--;
 80031ac:	887b      	ldrh	r3, [r7, #2]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 80031b2:	887b      	ldrh	r3, [r7, #2]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1f4      	bne.n	80031a2 <OS_MemClr+0xe>
    }
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 80031d2:	2040      	movs	r0, #64	; 0x40
 80031d4:	f7fd f80f 	bl	80001f6 <OS_CPU_SR_Save>
 80031d8:	6078      	str	r0, [r7, #4]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 80031da:	4b15      	ldr	r3, [pc, #84]	; (8003230 <OS_Sched+0x68>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11f      	bne.n	8003222 <OS_Sched+0x5a>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <OS_Sched+0x6c>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d11b      	bne.n	8003222 <OS_Sched+0x5a>
            OS_SchedNew();
 80031ea:	f000 f82f 	bl	800324c <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <OS_Sched+0x70>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <OS_Sched+0x74>)
 80031f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fa:	4a11      	ldr	r2, [pc, #68]	; (8003240 <OS_Sched+0x78>)
 80031fc:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <OS_Sched+0x70>)
 8003200:	781a      	ldrb	r2, [r3, #0]
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <OS_Sched+0x7c>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d00b      	beq.n	8003222 <OS_Sched+0x5a>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 800320a:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <OS_Sched+0x78>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003210:	3201      	adds	r2, #1
 8003212:	635a      	str	r2, [r3, #52]	; 0x34
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <OS_Sched+0x80>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	4a0b      	ldr	r2, [pc, #44]	; (8003248 <OS_Sched+0x80>)
 800321c:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
 800321e:	f7fd f841 	bl	80002a4 <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fc fff5 	bl	8000212 <OS_CPU_SR_Restore>
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	200013c8 	.word	0x200013c8
 8003234:	20000d00 	.word	0x20000d00
 8003238:	20000d12 	.word	0x20000d12
 800323c:	20001db0 	.word	0x20001db0
 8003240:	200011b4 	.word	0x200011b4
 8003244:	20000f94 	.word	0x20000f94
 8003248:	200011a0 	.word	0x200011a0

0800324c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <OS_SchedNew+0x38>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <OS_SchedNew+0x3c>)
 800325a:	5c9b      	ldrb	r3, [r3, r2]
 800325c:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	b2da      	uxtb	r2, r3
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	4909      	ldr	r1, [pc, #36]	; (800328c <OS_SchedNew+0x40>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	4619      	mov	r1, r3
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <OS_SchedNew+0x3c>)
 800326e:	5c5b      	ldrb	r3, [r3, r1]
 8003270:	4413      	add	r3, r2
 8003272:	b2da      	uxtb	r2, r3
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <OS_SchedNew+0x44>)
 8003276:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	200011b8 	.word	0x200011b8
 8003288:	08004410 	.word	0x08004410
 800328c:	200011bc 	.word	0x200011bc
 8003290:	20000d12 	.word	0x20000d12

08003294 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]
#endif

    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 80032a0:	2040      	movs	r0, #64	; 0x40
 80032a2:	f7fc ffa8 	bl	80001f6 <OS_CPU_SR_Save>
 80032a6:	60f8      	str	r0, [r7, #12]
        OSIdleCtr++;
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <OS_TaskIdle+0x2c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <OS_TaskIdle+0x2c>)
 80032b0:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7fc ffad 	bl	8000212 <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 80032b8:	f7ff f8a3 	bl	8002402 <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 80032bc:	e7f0      	b.n	80032a0 <OS_TaskIdle+0xc>
 80032be:	bf00      	nop
 80032c0:	20000d0c 	.word	0x20000d0c

080032c4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 80032d0:	e002      	b.n	80032d8 <OS_TaskStat+0x14>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 80032d2:	2014      	movs	r0, #20
 80032d4:	f000 fdea 	bl	8003eac <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 80032d8:	4b30      	ldr	r3, [pc, #192]	; (800339c <OS_TaskStat+0xd8>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f8      	beq.n	80032d2 <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 80032e0:	4b2f      	ldr	r3, [pc, #188]	; (80033a0 <OS_TaskStat+0xdc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a2f      	ldr	r2, [pc, #188]	; (80033a4 <OS_TaskStat+0xe0>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	4a2c      	ldr	r2, [pc, #176]	; (80033a0 <OS_TaskStat+0xdc>)
 80032ee:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 80032f0:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <OS_TaskStat+0xdc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <OS_TaskStat+0x40>
        OSCPUUsage = 0u;
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <OS_TaskStat+0xe4>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 80032fe:	20ff      	movs	r0, #255	; 0xff
 8003300:	f000 fd1e 	bl	8003d40 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 8003304:	2040      	movs	r0, #64	; 0x40
 8003306:	f7fc ff76 	bl	80001f6 <OS_CPU_SR_Save>
 800330a:	60f8      	str	r0, [r7, #12]
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 800330c:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <OS_TaskStat+0xdc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2264      	movs	r2, #100	; 0x64
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	4a25      	ldr	r2, [pc, #148]	; (80033ac <OS_TaskStat+0xe8>)
 8003318:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7fc ff79 	bl	8000212 <OS_CPU_SR_Restore>
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 8003320:	2001      	movs	r0, #1
 8003322:	f000 fdc3 	bl	8003eac <OSTimeDly>

        OS_ENTER_CRITICAL();
 8003326:	2040      	movs	r0, #64	; 0x40
 8003328:	f7fc ff65 	bl	80001f6 <OS_CPU_SR_Save>
 800332c:	60f8      	str	r0, [r7, #12]
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
 800332e:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <OS_TaskStat+0xe8>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f7fc ff6c 	bl	8000212 <OS_CPU_SR_Restore>

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 800333a:	200a      	movs	r0, #10
 800333c:	f000 fdb6 	bl	8003eac <OSTimeDly>

        OS_ENTER_CRITICAL();
 8003340:	2040      	movs	r0, #64	; 0x40
 8003342:	f7fc ff58 	bl	80001f6 <OS_CPU_SR_Save>
 8003346:	60f8      	str	r0, [r7, #12]
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
 8003348:	4b18      	ldr	r3, [pc, #96]	; (80033ac <OS_TaskStat+0xe8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <OS_TaskStat+0xec>)
 800334e:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7fc ff5e 	bl	8000212 <OS_CPU_SR_Restore>

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <OS_TaskStat+0xec>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <OS_TaskStat+0xdc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003368:	b2db      	uxtb	r3, r3
 800336a:	72fb      	strb	r3, [r7, #11]
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
 800336c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003370:	2b00      	cmp	r3, #0
 8003372:	db03      	blt.n	800337c <OS_TaskStat+0xb8>
            OSCPUUsage   = (INT8U)usage;
 8003374:	7afa      	ldrb	r2, [r7, #11]
 8003376:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <OS_TaskStat+0xe4>)
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	e00a      	b.n	8003392 <OS_TaskStat+0xce>
        } else {
            OSCPUUsage   = 0u;
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <OS_TaskStat+0xe4>)
 800337e:	2200      	movs	r2, #0
 8003380:	701a      	strb	r2, [r3, #0]
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <OS_TaskStat+0xec>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <OS_TaskStat+0xe0>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <OS_TaskStat+0xdc>)
 8003390:	6013      	str	r3, [r2, #0]
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
 8003392:	f7ff f847 	bl	8002424 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 8003396:	f000 f80d 	bl	80033b4 <OS_TaskStatStkChk>
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 800339a:	e7c1      	b.n	8003320 <OS_TaskStat+0x5c>
 800339c:	20001dac 	.word	0x20001dac
 80033a0:	200011a8 	.word	0x200011a8
 80033a4:	51eb851f 	.word	0x51eb851f
 80033a8:	200011b0 	.word	0x200011b0
 80033ac:	20000d0c 	.word	0x20000d0c
 80033b0:	20001eb0 	.word	0x20001eb0

080033b4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 80033ba:	2300      	movs	r3, #0
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	e023      	b.n	8003408 <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 80033c0:	463a      	mov	r2, r7
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fc4c 	bl	8003c64 <OSTaskStkChk>
 80033cc:	4603      	mov	r3, r0
 80033ce:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 80033d0:	7bbb      	ldrb	r3, [r7, #14]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d115      	bne.n	8003402 <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	4a0f      	ldr	r2, [pc, #60]	; (8003418 <OS_TaskStatStkChk+0x64>)
 80033da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033de:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00d      	beq.n	8003402 <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d00a      	beq.n	8003402 <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	441a      	add	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	645a      	str	r2, [r3, #68]	; 0x44
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	3301      	adds	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b3f      	cmp	r3, #63	; 0x3f
 800340c:	d9d8      	bls.n	80033c0 <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 800340e:	bf00      	nop
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20001db0 	.word	0x20001db0

0800341c <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	461a      	mov	r2, r3
 8003428:	4603      	mov	r3, r0
 800342a:	73fb      	strb	r3, [r7, #15]
 800342c:	4613      	mov	r3, r2
 800342e:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8003430:	2300      	movs	r3, #0
 8003432:	61bb      	str	r3, [r7, #24]
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
 8003434:	2040      	movs	r0, #64	; 0x40
 8003436:	f7fc fede 	bl	80001f6 <OS_CPU_SR_Save>
 800343a:	61b8      	str	r0, [r7, #24]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 800343c:	4b69      	ldr	r3, [pc, #420]	; (80035e4 <OS_TCBInit+0x1c8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80c4 	beq.w	80035d2 <OS_TCBInit+0x1b6>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4a65      	ldr	r2, [pc, #404]	; (80035e4 <OS_TCBInit+0x1c8>)
 8003450:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8003452:	69b8      	ldr	r0, [r7, #24]
 8003454:	f7fc fedd 	bl	8000212 <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2200      	movs	r2, #0
 800347a:	629a      	str	r2, [r3, #40]	; 0x28

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003480:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003486:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003492:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	89ba      	ldrh	r2, [r7, #12]
 8003498:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	08db      	lsrs	r3, r3, #3
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034c2:	461a      	mov	r2, r3
 80034c4:	2301      	movs	r3, #1
 80034c6:	4093      	lsls	r3, r2
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80034d6:	461a      	mov	r2, r3
 80034d8:	2301      	movs	r3, #1
 80034da:	4093      	lsls	r3, r2
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2200      	movs	r2, #0
 80034e8:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2200      	movs	r2, #0
 80034ee:	621a      	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy = (OS_EVENT  *)0;         /* No events readied for Multipend          */
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2200      	movs	r2, #0
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24
#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2200      	movs	r2, #0
 80034fa:	635a      	str	r2, [r3, #52]	; 0x34
        ptcb->OSTCBCyclesStart   = 0uL;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2200      	movs	r2, #0
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c
        ptcb->OSTCBCyclesTot     = 0uL;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2200      	movs	r2, #0
 8003506:	639a      	str	r2, [r3, #56]	; 0x38
        ptcb->OSTCBStkBase       = (OS_STK *)0;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2200      	movs	r2, #0
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
        ptcb->OSTCBStkUsed       = 0uL;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	645a      	str	r2, [r3, #68]	; 0x44
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <OS_TCBInit+0x1cc>)
 8003518:	649a      	str	r2, [r3, #72]	; 0x48
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 800351a:	2300      	movs	r3, #0
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e009      	b.n	8003534 <OS_TCBInit+0x118>
            ptcb->OSTCBRegTbl[i] = 0u;
 8003520:	7ffb      	ldrb	r3, [r7, #31]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	3312      	adds	r3, #18
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	2200      	movs	r2, #0
 800352c:	605a      	str	r2, [r3, #4]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 800352e:	7ffb      	ldrb	r3, [r7, #31]
 8003530:	3301      	adds	r3, #1
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	7ffb      	ldrb	r3, [r7, #31]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f2      	beq.n	8003520 <OS_TCBInit+0x104>
        }
#endif

        OSTCBInitHook(ptcb);
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f7ff f91e 	bl	800277c <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 8003540:	2040      	movs	r0, #64	; 0x40
 8003542:	f7fc fe58 	bl	80001f6 <OS_CPU_SR_Save>
 8003546:	61b8      	str	r0, [r7, #24]
        OSTCBPrioTbl[prio] = ptcb;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	4928      	ldr	r1, [pc, #160]	; (80035ec <OS_TCBInit+0x1d0>)
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 8003552:	69b8      	ldr	r0, [r7, #24]
 8003554:	f7fc fe5d 	bl	8000212 <OS_CPU_SR_Restore>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 8003558:	6978      	ldr	r0, [r7, #20]
 800355a:	f7fe ff3e 	bl	80023da <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
 800355e:	2040      	movs	r0, #64	; 0x40
 8003560:	f7fc fe49 	bl	80001f6 <OS_CPU_SR_Save>
 8003564:	61b8      	str	r0, [r7, #24]
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
 8003566:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <OS_TCBInit+0x1d4>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2200      	movs	r2, #0
 8003572:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 8003574:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <OS_TCBInit+0x1d4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <OS_TCBInit+0x168>
            OSTCBList->OSTCBPrev = ptcb;
 800357c:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <OS_TCBInit+0x1d4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 8003584:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <OS_TCBInit+0x1d4>)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8003590:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <OS_TCBInit+0x1d8>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	4313      	orrs	r3, r2
 8003596:	b2da      	uxtb	r2, r3
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <OS_TCBInit+0x1d8>)
 800359a:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <OS_TCBInit+0x1dc>)
 80035a6:	5c9a      	ldrb	r2, [r3, r2]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80035ae:	6979      	ldr	r1, [r7, #20]
 80035b0:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 80035b4:	4313      	orrs	r3, r2
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <OS_TCBInit+0x1dc>)
 80035ba:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <OS_TCBInit+0x1e0>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	3301      	adds	r3, #1
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <OS_TCBInit+0x1e0>)
 80035c6:	701a      	strb	r2, [r3, #0]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 80035c8:	69b8      	ldr	r0, [r7, #24]
 80035ca:	f7fc fe22 	bl	8000212 <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 80035ce:	2300      	movs	r3, #0
 80035d0:	e003      	b.n	80035da <OS_TCBInit+0x1be>
    }
    OS_EXIT_CRITICAL();
 80035d2:	69b8      	ldr	r0, [r7, #24]
 80035d4:	f7fc fe1d 	bl	8000212 <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 80035d8:	2342      	movs	r3, #66	; 0x42
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3720      	adds	r7, #32
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	200011ac 	.word	0x200011ac
 80035e8:	08004390 	.word	0x08004390
 80035ec:	20001db0 	.word	0x20001db0
 80035f0:	20000f98 	.word	0x20000f98
 80035f4:	200011b8 	.word	0x200011b8
 80035f8:	200011bc 	.word	0x200011bc
 80035fc:	200011b1 	.word	0x200011b1

08003600 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <OSSemCreate+0x70>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 8003616:	2300      	movs	r3, #0
 8003618:	e025      	b.n	8003666 <OSSemCreate+0x66>
    }
    OS_ENTER_CRITICAL();
 800361a:	2040      	movs	r0, #64	; 0x40
 800361c:	f7fc fdeb 	bl	80001f6 <OS_CPU_SR_Save>
 8003620:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 8003622:	4b14      	ldr	r3, [pc, #80]	; (8003674 <OSSemCreate+0x74>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 8003628:	4b12      	ldr	r3, [pc, #72]	; (8003674 <OSSemCreate+0x74>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <OSSemCreate+0x3a>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 8003630:	4b10      	ldr	r3, [pc, #64]	; (8003674 <OSSemCreate+0x74>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4a0f      	ldr	r2, [pc, #60]	; (8003674 <OSSemCreate+0x74>)
 8003638:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7fc fde9 	bl	8000212 <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00e      	beq.n	8003664 <OSSemCreate+0x64>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2203      	movs	r2, #3
 800364a:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	88fa      	ldrh	r2, [r7, #6]
 8003650:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2200      	movs	r2, #0
 8003656:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4a07      	ldr	r2, [pc, #28]	; (8003678 <OSSemCreate+0x78>)
 800365c:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 800365e:	68b8      	ldr	r0, [r7, #8]
 8003660:	f7ff fc23 	bl	8002eaa <OS_EventWaitListInit>

        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
 8003664:	68bb      	ldr	r3, [r7, #8]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200013c8 	.word	0x200013c8
 8003674:	200013c4 	.word	0x200013c4
 8003678:	080043b4 	.word	0x080043b4

0800367c <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d103      	bne.n	800369a <OSSemPend+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2204      	movs	r2, #4
 8003696:	701a      	strb	r2, [r3, #0]
        return;
 8003698:	e080      	b.n	800379c <OSSemPend+0x120>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d003      	beq.n	80036aa <OSSemPend+0x2e>
        *perr = OS_ERR_EVENT_TYPE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80036a8:	e078      	b.n	800379c <OSSemPend+0x120>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 80036aa:	4b3e      	ldr	r3, [pc, #248]	; (80037a4 <OSSemPend+0x128>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <OSSemPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2202      	movs	r2, #2
 80036b6:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80036b8:	e070      	b.n	800379c <OSSemPend+0x120>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 80036ba:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <OSSemPend+0x12c>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <OSSemPend+0x4e>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	220d      	movs	r2, #13
 80036c6:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80036c8:	e068      	b.n	800379c <OSSemPend+0x120>
    }
    OS_ENTER_CRITICAL();
 80036ca:	2040      	movs	r0, #64	; 0x40
 80036cc:	f7fc fd93 	bl	80001f6 <OS_CPU_SR_Save>
 80036d0:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	891b      	ldrh	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00c      	beq.n	80036f4 <OSSemPend+0x78>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	891b      	ldrh	r3, [r3, #8]
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f7fc fd93 	bl	8000212 <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80036f2:	e053      	b.n	800379c <OSSemPend+0x120>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 80036f4:	4b2d      	ldr	r3, [pc, #180]	; (80037ac <OSSemPend+0x130>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80036fc:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <OSSemPend+0x130>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 800370a:	4b28      	ldr	r3, [pc, #160]	; (80037ac <OSSemPend+0x130>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <OSSemPend+0x130>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	629a      	str	r2, [r3, #40]	; 0x28
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f7ff faf5 	bl	8002d0c <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 8003722:	6978      	ldr	r0, [r7, #20]
 8003724:	f7fc fd75 	bl	8000212 <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 8003728:	f7ff fd4e 	bl	80031c8 <OS_Sched>
    OS_ENTER_CRITICAL();
 800372c:	2040      	movs	r0, #64	; 0x40
 800372e:	f7fc fd62 	bl	80001f6 <OS_CPU_SR_Save>
 8003732:	6178      	str	r0, [r7, #20]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8003734:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <OSSemPend+0x130>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <OSSemPend+0xca>
 8003740:	2b02      	cmp	r3, #2
 8003742:	d004      	beq.n	800374e <OSSemPend+0xd2>
 8003744:	e007      	b.n	8003756 <OSSemPend+0xda>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
             break;
 800374c:	e00d      	b.n	800376a <OSSemPend+0xee>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	220e      	movs	r2, #14
 8003752:	701a      	strb	r2, [r3, #0]
             break;
 8003754:	e009      	b.n	800376a <OSSemPend+0xee>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <OSSemPend+0x130>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68f9      	ldr	r1, [r7, #12]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fb2d 	bl	8002dbc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	220a      	movs	r2, #10
 8003766:	701a      	strb	r2, [r3, #0]
             break;
 8003768:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 800376a:	4b10      	ldr	r3, [pc, #64]	; (80037ac <OSSemPend+0x130>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8003774:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <OSSemPend+0x130>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <OSSemPend+0x130>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2200      	movs	r2, #0
 8003784:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <OSSemPend+0x130>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	621a      	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <OSSemPend+0x130>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2200      	movs	r2, #0
 8003794:	625a      	str	r2, [r3, #36]	; 0x24
#endif
    OS_EXIT_CRITICAL();
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7fc fd3b 	bl	8000212 <OS_CPU_SR_Restore>

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	200013c8 	.word	0x200013c8
 80037a8:	20000d00 	.word	0x20000d00
 80037ac:	200013cc 	.word	0x200013cc

080037b0 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <OSSemPost+0x16>
        return (OS_ERR_PEVENT_NULL);
 80037c2:	2304      	movs	r3, #4
 80037c4:	e02f      	b.n	8003826 <OSSemPost+0x76>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d001      	beq.n	80037d2 <OSSemPost+0x22>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 80037ce:	2301      	movs	r3, #1
 80037d0:	e029      	b.n	8003826 <OSSemPost+0x76>
    }
    OS_ENTER_CRITICAL();
 80037d2:	2040      	movs	r0, #64	; 0x40
 80037d4:	f7fc fd0f 	bl	80001f6 <OS_CPU_SR_Save>
 80037d8:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7a9b      	ldrb	r3, [r3, #10]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00c      	beq.n	80037fc <OSSemPost+0x4c>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 80037e2:	2300      	movs	r3, #0
 80037e4:	2201      	movs	r2, #1
 80037e6:	2100      	movs	r1, #0
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff fa1d 	bl	8002c28 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7fc fd0f 	bl	8000212 <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 80037f4:	f7ff fce8 	bl	80031c8 <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 80037f8:	2300      	movs	r3, #0
 80037fa:	e014      	b.n	8003826 <OSSemPost+0x76>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	891b      	ldrh	r3, [r3, #8]
 8003800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003804:	4293      	cmp	r3, r2
 8003806:	d00a      	beq.n	800381e <OSSemPost+0x6e>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	891b      	ldrh	r3, [r3, #8]
 800380c:	3301      	adds	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7fc fcfc 	bl	8000212 <OS_CPU_SR_Restore>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 800381a:	2300      	movs	r3, #0
 800381c:	e003      	b.n	8003826 <OSSemPost+0x76>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f7fc fcf7 	bl	8000212 <OS_CPU_SR_Restore>
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
 8003824:	2333      	movs	r3, #51	; 0x33
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <OSTaskCreate>:
#if OS_TASK_CREATE_EN > 0u
INT8U  OSTaskCreate (void   (*task)(void *p_arg),
                     void    *p_arg,
                     OS_STK  *ptos,
                     INT8U    prio)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08c      	sub	sp, #48	; 0x30
 8003834:	af04      	add	r7, sp, #16
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	2b3f      	cmp	r3, #63	; 0x3f
 8003846:	d901      	bls.n	800384c <OSTaskCreate+0x1c>
        return (OS_ERR_PRIO_INVALID);
 8003848:	232a      	movs	r3, #42	; 0x2a
 800384a:	e04b      	b.n	80038e4 <OSTaskCreate+0xb4>
    }
#endif
    OS_ENTER_CRITICAL();
 800384c:	2040      	movs	r0, #64	; 0x40
 800384e:	f7fc fcd2 	bl	80001f6 <OS_CPU_SR_Save>
 8003852:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <OSTaskCreate+0xbc>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <OSTaskCreate+0x36>
        OS_EXIT_CRITICAL();
 800385c:	69f8      	ldr	r0, [r7, #28]
 800385e:	f7fc fcd8 	bl	8000212 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 8003862:	233c      	movs	r3, #60	; 0x3c
 8003864:	e03e      	b.n	80038e4 <OSTaskCreate+0xb4>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	4a21      	ldr	r2, [pc, #132]	; (80038f0 <OSTaskCreate+0xc0>)
 800386a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d134      	bne.n	80038dc <OSTaskCreate+0xac>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <OSTaskCreate+0xc0>)
 8003876:	2101      	movs	r1, #1
 8003878:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 800387c:	69f8      	ldr	r0, [r7, #28]
 800387e:	f7fc fcc8 	bl	8000212 <OS_CPU_SR_Restore>
        psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
 8003882:	2300      	movs	r3, #0
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7fe fdd3 	bl	8002434 <OSTaskStkInit>
 800388e:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
 8003890:	78f8      	ldrb	r0, [r7, #3]
 8003892:	2300      	movs	r3, #0
 8003894:	9302      	str	r3, [sp, #8]
 8003896:	2300      	movs	r3, #0
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	2300      	movs	r3, #0
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	2300      	movs	r3, #0
 80038a0:	2200      	movs	r2, #0
 80038a2:	69b9      	ldr	r1, [r7, #24]
 80038a4:	f7ff fdba 	bl	800341c <OS_TCBInit>
 80038a8:	4603      	mov	r3, r0
 80038aa:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <OSTaskCreate+0x90>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <OSTaskCreate+0xc4>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d10e      	bne.n	80038d8 <OSTaskCreate+0xa8>
                OS_Sched();
 80038ba:	f7ff fc85 	bl	80031c8 <OS_Sched>
 80038be:	e00b      	b.n	80038d8 <OSTaskCreate+0xa8>
            }
        } else {
            OS_TRACE_TASK_CREATE_FAILED(OSTCBPrioTbl[prio]);
            OS_ENTER_CRITICAL();
 80038c0:	2040      	movs	r0, #64	; 0x40
 80038c2:	f7fc fc98 	bl	80001f6 <OS_CPU_SR_Save>
 80038c6:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <OSTaskCreate+0xc0>)
 80038cc:	2100      	movs	r1, #0
 80038ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 80038d2:	69f8      	ldr	r0, [r7, #28]
 80038d4:	f7fc fc9d 	bl	8000212 <OS_CPU_SR_Restore>
        }
        return (err);
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
 80038da:	e003      	b.n	80038e4 <OSTaskCreate+0xb4>
    }
    OS_EXIT_CRITICAL();
 80038dc:	69f8      	ldr	r0, [r7, #28]
 80038de:	f7fc fc98 	bl	8000212 <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 80038e2:	2328      	movs	r3, #40	; 0x28
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3720      	adds	r7, #32
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	200013c8 	.word	0x200013c8
 80038f0:	20001db0 	.word	0x20001db0
 80038f4:	20000d09 	.word	0x20000d09

080038f8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	; 0x30
 80038fc:	af04      	add	r7, sp, #16
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	2b3f      	cmp	r3, #63	; 0x3f
 800390e:	d901      	bls.n	8003914 <OSTaskCreateExt+0x1c>
        return (OS_ERR_PRIO_INVALID);
 8003910:	232a      	movs	r3, #42	; 0x2a
 8003912:	e052      	b.n	80039ba <OSTaskCreateExt+0xc2>
    }
#endif
    OS_ENTER_CRITICAL();
 8003914:	2040      	movs	r0, #64	; 0x40
 8003916:	f7fc fc6e 	bl	80001f6 <OS_CPU_SR_Save>
 800391a:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 800391c:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <OSTaskCreateExt+0xcc>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <OSTaskCreateExt+0x36>
        OS_EXIT_CRITICAL();
 8003924:	69f8      	ldr	r0, [r7, #28]
 8003926:	f7fc fc74 	bl	8000212 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 800392a:	233c      	movs	r3, #60	; 0x3c
 800392c:	e045      	b.n	80039ba <OSTaskCreateExt+0xc2>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	4a25      	ldr	r2, [pc, #148]	; (80039c8 <OSTaskCreateExt+0xd0>)
 8003932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d13b      	bne.n	80039b2 <OSTaskCreateExt+0xba>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	4a22      	ldr	r2, [pc, #136]	; (80039c8 <OSTaskCreateExt+0xd0>)
 800393e:	2101      	movs	r1, #1
 8003940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8003944:	69f8      	ldr	r0, [r7, #28]
 8003946:	f7fc fc64 	bl	8000212 <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 800394a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800394c:	461a      	mov	r2, r3
 800394e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003950:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003952:	f000 fa87 	bl	8003e64 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 8003956:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f7fe fd69 	bl	8002434 <OSTaskStkInit>
 8003962:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 8003964:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003966:	78f8      	ldrb	r0, [r7, #3]
 8003968:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800396a:	9302      	str	r3, [sp, #8]
 800396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003978:	69b9      	ldr	r1, [r7, #24]
 800397a:	f7ff fd4f 	bl	800341c <OS_TCBInit>
 800397e:	4603      	mov	r3, r0
 8003980:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d106      	bne.n	8003996 <OSTaskCreateExt+0x9e>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <OSTaskCreateExt+0xd4>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10e      	bne.n	80039ae <OSTaskCreateExt+0xb6>
                OS_Sched();
 8003990:	f7ff fc1a 	bl	80031c8 <OS_Sched>
 8003994:	e00b      	b.n	80039ae <OSTaskCreateExt+0xb6>
            }
        } else {
            OS_ENTER_CRITICAL();
 8003996:	2040      	movs	r0, #64	; 0x40
 8003998:	f7fc fc2d 	bl	80001f6 <OS_CPU_SR_Save>
 800399c:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <OSTaskCreateExt+0xd0>)
 80039a2:	2100      	movs	r1, #0
 80039a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 80039a8:	69f8      	ldr	r0, [r7, #28]
 80039aa:	f7fc fc32 	bl	8000212 <OS_CPU_SR_Restore>
        }
        return (err);
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
 80039b0:	e003      	b.n	80039ba <OSTaskCreateExt+0xc2>
    }
    OS_EXIT_CRITICAL();
 80039b2:	69f8      	ldr	r0, [r7, #28]
 80039b4:	f7fc fc2d 	bl	8000212 <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 80039b8:	2328      	movs	r3, #40	; 0x28
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	200013c8 	.word	0x200013c8
 80039c8:	20001db0 	.word	0x20001db0
 80039cc:	20000d09 	.word	0x20000d09

080039d0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 80039de:	4b69      	ldr	r3, [pc, #420]	; (8003b84 <OSTaskDel+0x1b4>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 80039e6:	2340      	movs	r3, #64	; 0x40
 80039e8:	e0c7      	b.n	8003b7a <OSTaskDel+0x1aa>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	2b3f      	cmp	r3, #63	; 0x3f
 80039ee:	d101      	bne.n	80039f4 <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 80039f0:	233e      	movs	r3, #62	; 0x3e
 80039f2:	e0c2      	b.n	8003b7a <OSTaskDel+0x1aa>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	2b3e      	cmp	r3, #62	; 0x3e
 80039f8:	d904      	bls.n	8003a04 <OSTaskDel+0x34>
        if (prio != OS_PRIO_SELF) {
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	2bff      	cmp	r3, #255	; 0xff
 80039fe:	d001      	beq.n	8003a04 <OSTaskDel+0x34>
            return (OS_ERR_PRIO_INVALID);
 8003a00:	232a      	movs	r3, #42	; 0x2a
 8003a02:	e0ba      	b.n	8003b7a <OSTaskDel+0x1aa>
        }
    }
#endif

    OS_ENTER_CRITICAL();
 8003a04:	2040      	movs	r0, #64	; 0x40
 8003a06:	f7fc fbf6 	bl	80001f6 <OS_CPU_SR_Save>
 8003a0a:	60f8      	str	r0, [r7, #12]
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	2bff      	cmp	r3, #255	; 0xff
 8003a10:	d104      	bne.n	8003a1c <OSTaskDel+0x4c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 8003a12:	4b5d      	ldr	r3, [pc, #372]	; (8003b88 <OSTaskDel+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003a1a:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	4a5b      	ldr	r2, [pc, #364]	; (8003b8c <OSTaskDel+0x1bc>)
 8003a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a24:	60bb      	str	r3, [r7, #8]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <OSTaskDel+0x66>
        OS_EXIT_CRITICAL();
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7fc fbf0 	bl	8000212 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003a32:	2343      	movs	r3, #67	; 0x43
 8003a34:	e0a1      	b.n	8003b7a <OSTaskDel+0x1aa>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d104      	bne.n	8003a46 <OSTaskDel+0x76>
        OS_EXIT_CRITICAL();
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f7fc fbe8 	bl	8000212 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
 8003a42:	233d      	movs	r3, #61	; 0x3d
 8003a44:	e099      	b.n	8003b7a <OSTaskDel+0x1aa>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <OSTaskDel+0x1c0>)
 8003a50:	5c9a      	ldrb	r2, [r3, r2]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8003a62:	4013      	ands	r3, r2
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	4b4a      	ldr	r3, [pc, #296]	; (8003b90 <OSTaskDel+0x1c0>)
 8003a68:	545a      	strb	r2, [r3, r1]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a70:	461a      	mov	r2, r3
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <OSTaskDel+0x1c0>)
 8003a74:	5c9b      	ldrb	r3, [r3, r2]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <OSTaskDel+0xc0>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a80:	43db      	mvns	r3, r3
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	4b43      	ldr	r3, [pc, #268]	; (8003b94 <OSTaskDel+0x1c4>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <OSTaskDel+0x1c4>)
 8003a8e:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <OSTaskDel+0xd4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	68b8      	ldr	r0, [r7, #8]
 8003aa0:	f7ff f98c 	bl	8002dbc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <OSTaskDel+0xe8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	68b8      	ldr	r0, [r7, #8]
 8003ab4:	f7ff f9b5 	bl	8002e22 <OS_EventTaskRemoveMulti>
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2200      	movs	r2, #0
 8003abc:	629a      	str	r2, [r3, #40]	; 0x28
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8003ace:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <OSTaskDel+0x1c8>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2bff      	cmp	r3, #255	; 0xff
 8003ad4:	d005      	beq.n	8003ae2 <OSTaskDel+0x112>
        OSLockNesting++;
 8003ad6:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <OSTaskDel+0x1c8>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	3301      	adds	r3, #1
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4b2e      	ldr	r3, [pc, #184]	; (8003b98 <OSTaskDel+0x1c8>)
 8003ae0:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7fc fb95 	bl	8000212 <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8003ae8:	f7ff f896 	bl	8002c18 <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8003aec:	2040      	movs	r0, #64	; 0x40
 8003aee:	f7fc fb82 	bl	80001f6 <OS_CPU_SR_Save>
 8003af2:	60f8      	str	r0, [r7, #12]
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8003af4:	4b28      	ldr	r3, [pc, #160]	; (8003b98 <OSTaskDel+0x1c8>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <OSTaskDel+0x138>
        OSLockNesting--;
 8003afc:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <OSTaskDel+0x1c8>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <OSTaskDel+0x1c8>)
 8003b06:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 8003b08:	68b8      	ldr	r0, [r7, #8]
 8003b0a:	f7fe fc70 	bl	80023ee <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
 8003b0e:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <OSTaskDel+0x1cc>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	4b21      	ldr	r3, [pc, #132]	; (8003b9c <OSTaskDel+0x1cc>)
 8003b18:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <OSTaskDel+0x1bc>)
 8003b1e:	2100      	movs	r1, #0
 8003b20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d108      	bne.n	8003b3e <OSTaskDel+0x16e>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	2200      	movs	r2, #0
 8003b32:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <OSTaskDel+0x1d0>)
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	e009      	b.n	8003b52 <OSTaskDel+0x182>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	6952      	ldr	r2, [r2, #20]
 8003b46:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	6992      	ldr	r2, [r2, #24]
 8003b50:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <OSTaskDel+0x1d4>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 8003b5a:	4a12      	ldr	r2, [pc, #72]	; (8003ba4 <OSTaskDel+0x1d4>)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4a11      	ldr	r2, [pc, #68]	; (8003ba8 <OSTaskDel+0x1d8>)
 8003b64:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    OS_EXIT_CRITICAL();
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f7fc fb53 	bl	8000212 <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <OSTaskDel+0x1dc>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <OSTaskDel+0x1a8>
        OS_Sched();                                     /* Find new highest priority task              */
 8003b74:	f7ff fb28 	bl	80031c8 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200013c8 	.word	0x200013c8
 8003b88:	200013cc 	.word	0x200013cc
 8003b8c:	20001db0 	.word	0x20001db0
 8003b90:	200011bc 	.word	0x200011bc
 8003b94:	200011b8 	.word	0x200011b8
 8003b98:	20000d00 	.word	0x20000d00
 8003b9c:	200011b1 	.word	0x200011b1
 8003ba0:	20000f98 	.word	0x20000f98
 8003ba4:	200011ac 	.word	0x200011ac
 8003ba8:	080043b8 	.word	0x080043b8
 8003bac:	20000d09 	.word	0x20000d09

08003bb0 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b3f      	cmp	r3, #63	; 0x3f
 8003bc6:	d906      	bls.n	8003bd6 <OSTaskNameSet+0x26>
        if (prio != OS_PRIO_SELF) {
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	2bff      	cmp	r3, #255	; 0xff
 8003bcc:	d003      	beq.n	8003bd6 <OSTaskNameSet+0x26>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	222a      	movs	r2, #42	; 0x2a
 8003bd2:	701a      	strb	r2, [r3, #0]
            return;
 8003bd4:	e03c      	b.n	8003c50 <OSTaskNameSet+0xa0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d103      	bne.n	8003be4 <OSTaskNameSet+0x34>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	220c      	movs	r2, #12
 8003be0:	701a      	strb	r2, [r3, #0]
        return;
 8003be2:	e035      	b.n	8003c50 <OSTaskNameSet+0xa0>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8003be4:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <OSTaskNameSet+0xa8>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <OSTaskNameSet+0x44>
        *perr = OS_ERR_NAME_SET_ISR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2212      	movs	r2, #18
 8003bf0:	701a      	strb	r2, [r3, #0]
        return;
 8003bf2:	e02d      	b.n	8003c50 <OSTaskNameSet+0xa0>
    }
    OS_ENTER_CRITICAL();
 8003bf4:	2040      	movs	r0, #64	; 0x40
 8003bf6:	f7fc fafe 	bl	80001f6 <OS_CPU_SR_Save>
 8003bfa:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2bff      	cmp	r3, #255	; 0xff
 8003c00:	d104      	bne.n	8003c0c <OSTaskNameSet+0x5c>
        prio = OSTCBCur->OSTCBPrio;
 8003c02:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <OSTaskNameSet+0xac>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003c0a:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <OSTaskNameSet+0xb0>)
 8003c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c14:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d106      	bne.n	8003c2a <OSTaskNameSet+0x7a>
        OS_EXIT_CRITICAL();                          /* No                                             */
 8003c1c:	6978      	ldr	r0, [r7, #20]
 8003c1e:	f7fc faf8 	bl	8000212 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2243      	movs	r2, #67	; 0x43
 8003c26:	701a      	strb	r2, [r3, #0]
        return;
 8003c28:	e012      	b.n	8003c50 <OSTaskNameSet+0xa0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <OSTaskNameSet+0x8e>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 8003c30:	6978      	ldr	r0, [r7, #20]
 8003c32:	f7fc faee 	bl	8000212 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2243      	movs	r2, #67	; 0x43
 8003c3a:	701a      	strb	r2, [r3, #0]
        return;
 8003c3c:	e008      	b.n	8003c50 <OSTaskNameSet+0xa0>
    }
    ptcb->OSTCBTaskName = pname;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	649a      	str	r2, [r3, #72]	; 0x48
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
 8003c44:	6978      	ldr	r0, [r7, #20]
 8003c46:	f7fc fae4 	bl	8000212 <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
}
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200013c8 	.word	0x200013c8
 8003c5c:	200013cc 	.word	0x200013cc
 8003c60:	20001db0 	.word	0x20001db0

08003c64 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	2b3f      	cmp	r3, #63	; 0x3f
 8003c78:	d904      	bls.n	8003c84 <OSTaskStkChk+0x20>
        if (prio != OS_PRIO_SELF) {
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	2bff      	cmp	r3, #255	; 0xff
 8003c7e:	d001      	beq.n	8003c84 <OSTaskStkChk+0x20>
            return (OS_ERR_PRIO_INVALID);
 8003c80:	232a      	movs	r3, #42	; 0x2a
 8003c82:	e054      	b.n	8003d2e <OSTaskStkChk+0xca>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <OSTaskStkChk+0x2a>
        return (OS_ERR_PDATA_NULL);
 8003c8a:	2309      	movs	r3, #9
 8003c8c:	e04f      	b.n	8003d2e <OSTaskStkChk+0xca>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2200      	movs	r2, #0
 8003c98:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 8003c9a:	2040      	movs	r0, #64	; 0x40
 8003c9c:	f7fc faab 	bl	80001f6 <OS_CPU_SR_Save>
 8003ca0:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	2bff      	cmp	r3, #255	; 0xff
 8003ca6:	d104      	bne.n	8003cb2 <OSTaskStkChk+0x4e>
        prio = OSTCBCur->OSTCBPrio;
 8003ca8:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <OSTaskStkChk+0xd4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003cb0:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	4a21      	ldr	r2, [pc, #132]	; (8003d3c <OSTaskStkChk+0xd8>)
 8003cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cba:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <OSTaskStkChk+0x68>
        OS_EXIT_CRITICAL();
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7fc faa5 	bl	8000212 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003cc8:	2343      	movs	r3, #67	; 0x43
 8003cca:	e030      	b.n	8003d2e <OSTaskStkChk+0xca>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d104      	bne.n	8003cdc <OSTaskStkChk+0x78>
        OS_EXIT_CRITICAL();
 8003cd2:	6978      	ldr	r0, [r7, #20]
 8003cd4:	f7fc fa9d 	bl	8000212 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003cd8:	2343      	movs	r3, #67	; 0x43
 8003cda:	e028      	b.n	8003d2e <OSTaskStkChk+0xca>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	8a1b      	ldrh	r3, [r3, #16]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <OSTaskStkChk+0x8e>
        OS_EXIT_CRITICAL();
 8003ce8:	6978      	ldr	r0, [r7, #20]
 8003cea:	f7fc fa92 	bl	8000212 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 8003cee:	2345      	movs	r3, #69	; 0x45
 8003cf0:	e01d      	b.n	8003d2e <OSTaskStkChk+0xca>
    }
    nfree = 0u;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 8003d02:	6978      	ldr	r0, [r7, #20]
 8003d04:	f7fc fa85 	bl	8000212 <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8003d08:	e002      	b.n	8003d10 <OSTaskStkChk+0xac>
        nfree++;
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	1d1a      	adds	r2, r3, #4
 8003d14:	61fa      	str	r2, [r7, #28]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f6      	beq.n	8003d0a <OSTaskStkChk+0xa6>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad2      	subs	r2, r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200013cc 	.word	0x200013cc
 8003d3c:	20001db0 	.word	0x20001db0

08003d40 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	2b3f      	cmp	r3, #63	; 0x3f
 8003d52:	d101      	bne.n	8003d58 <OSTaskSuspend+0x18>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 8003d54:	2347      	movs	r3, #71	; 0x47
 8003d56:	e06a      	b.n	8003e2e <OSTaskSuspend+0xee>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	2b3e      	cmp	r3, #62	; 0x3e
 8003d5c:	d904      	bls.n	8003d68 <OSTaskSuspend+0x28>
        if (prio != OS_PRIO_SELF) {
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	2bff      	cmp	r3, #255	; 0xff
 8003d62:	d001      	beq.n	8003d68 <OSTaskSuspend+0x28>
            return (OS_ERR_PRIO_INVALID);
 8003d64:	232a      	movs	r3, #42	; 0x2a
 8003d66:	e062      	b.n	8003e2e <OSTaskSuspend+0xee>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8003d68:	2040      	movs	r0, #64	; 0x40
 8003d6a:	f7fc fa44 	bl	80001f6 <OS_CPU_SR_Save>
 8003d6e:	6138      	str	r0, [r7, #16]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	2bff      	cmp	r3, #255	; 0xff
 8003d74:	d107      	bne.n	8003d86 <OSTaskSuspend+0x46>
        prio = OSTCBCur->OSTCBPrio;
 8003d76:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <OSTaskSuspend+0xf8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003d7e:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8003d80:	2301      	movs	r3, #1
 8003d82:	75fb      	strb	r3, [r7, #23]
 8003d84:	e00b      	b.n	8003d9e <OSTaskSuspend+0x5e>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 8003d86:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <OSTaskSuspend+0xf8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003d8e:	79fa      	ldrb	r2, [r7, #7]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d102      	bne.n	8003d9a <OSTaskSuspend+0x5a>
        self = OS_TRUE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
 8003d98:	e001      	b.n	8003d9e <OSTaskSuspend+0x5e>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	4a26      	ldr	r2, [pc, #152]	; (8003e3c <OSTaskSuspend+0xfc>)
 8003da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da6:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <OSTaskSuspend+0x78>
        OS_EXIT_CRITICAL();
 8003dae:	6938      	ldr	r0, [r7, #16]
 8003db0:	f7fc fa2f 	bl	8000212 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8003db4:	2348      	movs	r3, #72	; 0x48
 8003db6:	e03a      	b.n	8003e2e <OSTaskSuspend+0xee>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d104      	bne.n	8003dc8 <OSTaskSuspend+0x88>
        OS_EXIT_CRITICAL();
 8003dbe:	6938      	ldr	r0, [r7, #16]
 8003dc0:	f7fc fa27 	bl	8000212 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003dc4:	2343      	movs	r3, #67	; 0x43
 8003dc6:	e032      	b.n	8003e2e <OSTaskSuspend+0xee>
    }
    y            = ptcb->OSTCBY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dce:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 8003dd0:	7afb      	ldrb	r3, [r7, #11]
 8003dd2:	4a1b      	ldr	r2, [pc, #108]	; (8003e40 <OSTaskSuspend+0x100>)
 8003dd4:	5cd1      	ldrb	r1, [r2, r3]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	7afb      	ldrb	r3, [r7, #11]
 8003de2:	400a      	ands	r2, r1
 8003de4:	b2d1      	uxtb	r1, r2
 8003de6:	4a16      	ldr	r2, [pc, #88]	; (8003e40 <OSTaskSuspend+0x100>)
 8003de8:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 8003dea:	7afb      	ldrb	r3, [r7, #11]
 8003dec:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <OSTaskSuspend+0x100>)
 8003dee:	5cd3      	ldrb	r3, [r2, r3]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <OSTaskSuspend+0xca>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <OSTaskSuspend+0x104>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	4013      	ands	r3, r2
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <OSTaskSuspend+0x104>)
 8003e08:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e10:	f043 0308 	orr.w	r3, r3, #8
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    OS_EXIT_CRITICAL();
 8003e1c:	6938      	ldr	r0, [r7, #16]
 8003e1e:	f7fc f9f8 	bl	8000212 <OS_CPU_SR_Restore>
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <OSTaskSuspend+0xec>
        OS_Sched();                                             /* Find new highest priority task      */
 8003e28:	f7ff f9ce 	bl	80031c8 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	200013cc 	.word	0x200013cc
 8003e3c:	20001db0 	.word	0x20001db0
 8003e40:	200011bc 	.word	0x200011bc
 8003e44:	200011b8 	.word	0x200011b8

08003e48 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 8003e4c:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <OS_TaskReturn+0x18>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe fadd 	bl	8002410 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 8003e56:	20ff      	movs	r0, #255	; 0xff
 8003e58:	f7ff fdba 	bl	80039d0 <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 8003e5c:	bf00      	nop
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	200013cc 	.word	0x200013cc

08003e64 <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d010      	beq.n	8003e9e <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8003e86:	e007      	b.n	8003e98 <OS_TaskStkClr+0x34>
                size--;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1d1a      	adds	r2, r3, #4
 8003e92:	60fa      	str	r2, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f4      	bne.n	8003e88 <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <OSTimeDly+0x94>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d138      	bne.n	8003f32 <OSTimeDly+0x86>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8003ec0:	4b20      	ldr	r3, [pc, #128]	; (8003f44 <OSTimeDly+0x98>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d136      	bne.n	8003f36 <OSTimeDly+0x8a>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d034      	beq.n	8003f38 <OSTimeDly+0x8c>
        OS_ENTER_CRITICAL();
 8003ece:	2040      	movs	r0, #64	; 0x40
 8003ed0:	f7fc f991 	bl	80001f6 <OS_CPU_SR_Save>
 8003ed4:	60f8      	str	r0, [r7, #12]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <OSTimeDly+0x9c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ede:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8003ee0:	7afb      	ldrb	r3, [r7, #11]
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <OSTimeDly+0xa0>)
 8003ee4:	5cd1      	ldrb	r1, [r2, r3]
 8003ee6:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <OSTimeDly+0x9c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	7afb      	ldrb	r3, [r7, #11]
 8003ef4:	400a      	ands	r2, r1
 8003ef6:	b2d1      	uxtb	r1, r2
 8003ef8:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <OSTimeDly+0xa0>)
 8003efa:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
 8003efc:	7afb      	ldrb	r3, [r7, #11]
 8003efe:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <OSTimeDly+0xa0>)
 8003f00:	5cd3      	ldrb	r3, [r2, r3]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <OSTimeDly+0x72>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <OSTimeDly+0x9c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <OSTimeDly+0xa4>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	4013      	ands	r3, r2
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <OSTimeDly+0xa4>)
 8003f1c:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <OSTimeDly+0x9c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	629a      	str	r2, [r3, #40]	; 0x28
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f7fc f973 	bl	8000212 <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 8003f2c:	f7ff f94c 	bl	80031c8 <OS_Sched>
 8003f30:	e002      	b.n	8003f38 <OSTimeDly+0x8c>
        return;
 8003f32:	bf00      	nop
 8003f34:	e000      	b.n	8003f38 <OSTimeDly+0x8c>
        return;
 8003f36:	bf00      	nop
    }
}
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	200013c8 	.word	0x200013c8
 8003f44:	20000d00 	.word	0x20000d00
 8003f48:	200013cc 	.word	0x200013cc
 8003f4c:	200011bc 	.word	0x200011bc
 8003f50:	200011b8 	.word	0x200011b8

08003f54 <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <OSTmrSignal+0x20>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fc26 	bl	80037b0 <OSSemPost>
 8003f64:	4603      	mov	r3, r0
 8003f66:	71fb      	strb	r3, [r7, #7]
    return (err);
 8003f68:	79fb      	ldrb	r3, [r7, #7]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000d04 	.word	0x20000d04

08003f78 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 8003f7e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003f82:	4838      	ldr	r0, [pc, #224]	; (8004064 <OSTmr_Init+0xec>)
 8003f84:	f7ff f906 	bl	8003194 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 8003f88:	2138      	movs	r1, #56	; 0x38
 8003f8a:	4837      	ldr	r0, [pc, #220]	; (8004068 <OSTmr_Init+0xf0>)
 8003f8c:	f7ff f902 	bl	8003194 <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8003f90:	2300      	movs	r3, #0
 8003f92:	82fb      	strh	r3, [r7, #22]
 8003f94:	e022      	b.n	8003fdc <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 8003f96:	8afb      	ldrh	r3, [r7, #22]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 8003f9c:	8afa      	ldrh	r2, [r7, #22]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4a2f      	ldr	r2, [pc, #188]	; (8004064 <OSTmr_Init+0xec>)
 8003fa8:	4413      	add	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 8003fac:	89fa      	ldrh	r2, [r7, #14]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4a2b      	ldr	r2, [pc, #172]	; (8004064 <OSTmr_Init+0xec>)
 8003fb8:	4413      	add	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2264      	movs	r2, #100	; 0x64
 8003fc0:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4a26      	ldr	r2, [pc, #152]	; (800406c <OSTmr_Init+0xf4>)
 8003fd4:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8003fd6:	8afb      	ldrh	r3, [r7, #22]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	82fb      	strh	r3, [r7, #22]
 8003fdc:	8afb      	ldrh	r3, [r7, #22]
 8003fde:	2b0e      	cmp	r3, #14
 8003fe0:	d9d9      	bls.n	8003f96 <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 8003fe2:	8afa      	ldrh	r2, [r7, #22]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <OSTmr_Init+0xec>)
 8003fee:	4413      	add	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2264      	movs	r2, #100	; 0x64
 8003ff6:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2200      	movs	r2, #0
 8004004:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4a18      	ldr	r2, [pc, #96]	; (800406c <OSTmr_Init+0xf4>)
 800400a:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 800400c:	4b18      	ldr	r3, [pc, #96]	; (8004070 <OSTmr_Init+0xf8>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 8004012:	4b18      	ldr	r3, [pc, #96]	; (8004074 <OSTmr_Init+0xfc>)
 8004014:	2200      	movs	r2, #0
 8004016:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 8004018:	4b17      	ldr	r3, [pc, #92]	; (8004078 <OSTmr_Init+0x100>)
 800401a:	2210      	movs	r2, #16
 800401c:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 800401e:	4b17      	ldr	r3, [pc, #92]	; (800407c <OSTmr_Init+0x104>)
 8004020:	4a10      	ldr	r2, [pc, #64]	; (8004064 <OSTmr_Init+0xec>)
 8004022:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 8004024:	2001      	movs	r0, #1
 8004026:	f7ff faeb 	bl	8003600 <OSSemCreate>
 800402a:	4603      	mov	r3, r0
 800402c:	4a14      	ldr	r2, [pc, #80]	; (8004080 <OSTmr_Init+0x108>)
 800402e:	6013      	str	r3, [r2, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 8004030:	2000      	movs	r0, #0
 8004032:	f7ff fae5 	bl	8003600 <OSSemCreate>
 8004036:	4603      	mov	r3, r0
 8004038:	4a12      	ldr	r2, [pc, #72]	; (8004084 <OSTmr_Init+0x10c>)
 800403a:	6013      	str	r3, [r2, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 800403c:	4b10      	ldr	r3, [pc, #64]	; (8004080 <OSTmr_Init+0x108>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	1dfa      	adds	r2, r7, #7
 8004042:	4911      	ldr	r1, [pc, #68]	; (8004088 <OSTmr_Init+0x110>)
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe fbff 	bl	8002848 <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 800404a:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <OSTmr_Init+0x10c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	1dfa      	adds	r2, r7, #7
 8004050:	490e      	ldr	r1, [pc, #56]	; (800408c <OSTmr_Init+0x114>)
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe fbf8 	bl	8002848 <OSEventNameSet>
#endif

    OSTmr_InitTask();
 8004058:	f000 f81a 	bl	8004090 <OSTmr_InitTask>
}
 800405c:	bf00      	nop
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000d14 	.word	0x20000d14
 8004068:	20000cc8 	.word	0x20000cc8
 800406c:	080043bc 	.word	0x080043bc
 8004070:	200013d0 	.word	0x200013d0
 8004074:	20000d10 	.word	0x20000d10
 8004078:	200011a4 	.word	0x200011a4
 800407c:	20000cc4 	.word	0x20000cc4
 8004080:	200013d8 	.word	0x200013d8
 8004084:	20000d04 	.word	0x20000d04
 8004088:	080043c0 	.word	0x080043c0
 800408c:	080043d4 	.word	0x080043d4

08004090 <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 8004096:	2303      	movs	r3, #3
 8004098:	9304      	str	r3, [sp, #16]
 800409a:	2300      	movs	r3, #0
 800409c:	9303      	str	r3, [sp, #12]
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	9302      	str	r3, [sp, #8]
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <OSTmr_InitTask+0x3c>)
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	233d      	movs	r3, #61	; 0x3d
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <OSTmr_InitTask+0x40>)
 80040b0:	2100      	movs	r1, #0
 80040b2:	4808      	ldr	r0, [pc, #32]	; (80040d4 <OSTmr_InitTask+0x44>)
 80040b4:	f7ff fc20 	bl	80038f8 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 80040b8:	1dfb      	adds	r3, r7, #7
 80040ba:	461a      	mov	r2, r3
 80040bc:	4906      	ldr	r1, [pc, #24]	; (80040d8 <OSTmr_InitTask+0x48>)
 80040be:	203d      	movs	r0, #61	; 0x3d
 80040c0:	f7ff fd76 	bl	8003bb0 <OSTaskNameSet>
#endif
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	200011c4 	.word	0x200011c4
 80040d0:	200013c0 	.word	0x200013c0
 80040d4:	0800425d 	.word	0x0800425d
 80040d8:	080043e8 	.word	0x080043e8

080040dc <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2203      	movs	r2, #3
 80040ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d107      	bne.n	8004106 <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <OSTmr_Link+0xcc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	441a      	add	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	615a      	str	r2, [r3, #20]
 8004104:	e012      	b.n	800412c <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d107      	bne.n	800411e <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <OSTmr_Link+0xcc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	441a      	add	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	615a      	str	r2, [r3, #20]
 800411c:	e006      	b.n	800412c <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	4b21      	ldr	r3, [pc, #132]	; (80041a8 <OSTmr_Link+0xcc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	441a      	add	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	4b1e      	ldr	r3, [pc, #120]	; (80041ac <OSTmr_Link+0xd0>)
 8004132:	fba3 1302 	umull	r1, r3, r3, r2
 8004136:	1ad1      	subs	r1, r2, r3
 8004138:	0849      	lsrs	r1, r1, #1
 800413a:	440b      	add	r3, r1
 800413c:	0899      	lsrs	r1, r3, #2
 800413e:	460b      	mov	r3, r1
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	1a5b      	subs	r3, r3, r1
 8004144:	1ad1      	subs	r1, r2, r3
 8004146:	460b      	mov	r3, r1
 8004148:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 800414a:	8afb      	ldrh	r3, [r7, #22]
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <OSTmr_Link+0xd4>)
 8004150:	4413      	add	r3, r2
 8004152:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <OSTmr_Link+0x94>
        pspoke->OSTmrFirst   = ptmr;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2201      	movs	r2, #1
 800416c:	809a      	strh	r2, [r3, #4]
 800416e:	e011      	b.n	8004194 <OSTmr_Link+0xb8>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	889b      	ldrh	r3, [r3, #4]
 800418c:	3301      	adds	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	611a      	str	r2, [r3, #16]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	200013d0 	.word	0x200013d0
 80041ac:	24924925 	.word	0x24924925
 80041b0:	20000cc8 	.word	0x20000cc8

080041b4 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	4b24      	ldr	r3, [pc, #144]	; (8004254 <OSTmr_Unlink+0xa0>)
 80041c2:	fba3 1302 	umull	r1, r3, r3, r2
 80041c6:	1ad1      	subs	r1, r2, r3
 80041c8:	0849      	lsrs	r1, r1, #1
 80041ca:	440b      	add	r3, r1
 80041cc:	0899      	lsrs	r1, r3, #2
 80041ce:	460b      	mov	r3, r1
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	1a5b      	subs	r3, r3, r1
 80041d4:	1ad1      	subs	r1, r2, r3
 80041d6:	460b      	mov	r3, r1
 80041d8:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 80041da:	8afb      	ldrh	r3, [r7, #22]
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <OSTmr_Unlink+0xa4>)
 80041e0:	4413      	add	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d10c      	bne.n	8004208 <OSTmr_Unlink+0x54>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d012      	beq.n	8004226 <OSTmr_Unlink+0x72>
            ptmr1->OSTmrPrev = (void *)0;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
 8004206:	e00e      	b.n	8004226 <OSTmr_Unlink+0x72>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <OSTmr_Unlink+0x72>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr->OSTmrNext  = (void *)0;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	889b      	ldrh	r3, [r3, #4]
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	809a      	strh	r2, [r3, #4]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	24924925 	.word	0x24924925
 8004258:	20000cc8 	.word	0x20000cc8

0800425c <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8004264:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <OSTmr_Task+0xb4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f107 020b 	add.w	r2, r7, #11
 800426c:	2100      	movs	r1, #0
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fa04 	bl	800367c <OSSemPend>
        OSSchedLock();
 8004274:	f7fe fba4 	bl	80029c0 <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 8004278:	4b26      	ldr	r3, [pc, #152]	; (8004314 <OSTmr_Task+0xb8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	4a25      	ldr	r2, [pc, #148]	; (8004314 <OSTmr_Task+0xb8>)
 8004280:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <OSTmr_Task+0xb8>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b24      	ldr	r3, [pc, #144]	; (8004318 <OSTmr_Task+0xbc>)
 8004288:	fba3 1302 	umull	r1, r3, r3, r2
 800428c:	1ad1      	subs	r1, r2, r3
 800428e:	0849      	lsrs	r1, r1, #1
 8004290:	440b      	add	r3, r1
 8004292:	0899      	lsrs	r1, r3, #2
 8004294:	460b      	mov	r3, r1
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	1a5b      	subs	r3, r3, r1
 800429a:	1ad1      	subs	r1, r2, r3
 800429c:	460b      	mov	r3, r1
 800429e:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 80042a0:	8b7b      	ldrh	r3, [r7, #26]
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	4a1d      	ldr	r2, [pc, #116]	; (800431c <OSTmr_Task+0xc0>)
 80042a6:	4413      	add	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 80042b0:	e027      	b.n	8004302 <OSTmr_Task+0xa6>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	4b15      	ldr	r3, [pc, #84]	; (8004314 <OSTmr_Task+0xb8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d11c      	bne.n	80042fe <OSTmr_Task+0xa2>
                OS_TRACE_TMR_EXPIRED(ptmr);
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 80042c4:	69f8      	ldr	r0, [r7, #28]
 80042c6:	f7ff ff75 	bl	80041b4 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d104      	bne.n	80042de <OSTmr_Task+0x82>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 80042d4:	2101      	movs	r1, #1
 80042d6:	69f8      	ldr	r0, [r7, #28]
 80042d8:	f7ff ff00 	bl	80040dc <OSTmr_Link>
 80042dc:	e003      	b.n	80042e6 <OSTmr_Task+0x8a>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	2202      	movs	r2, #2
 80042e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <OSTmr_Task+0xa2>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4611      	mov	r1, r2
 80042fa:	69f8      	ldr	r0, [r7, #28]
 80042fc:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1d4      	bne.n	80042b2 <OSTmr_Task+0x56>
        }
        OSSchedUnlock();
 8004308:	f7fe fb82 	bl	8002a10 <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 800430c:	e7aa      	b.n	8004264 <OSTmr_Task+0x8>
 800430e:	bf00      	nop
 8004310:	20000d04 	.word	0x20000d04
 8004314:	200013d0 	.word	0x200013d0
 8004318:	24924925 	.word	0x24924925
 800431c:	20000cc8 	.word	0x20000cc8

08004320 <__libc_init_array>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	4d0d      	ldr	r5, [pc, #52]	; (8004358 <__libc_init_array+0x38>)
 8004324:	4c0d      	ldr	r4, [pc, #52]	; (800435c <__libc_init_array+0x3c>)
 8004326:	1b64      	subs	r4, r4, r5
 8004328:	10a4      	asrs	r4, r4, #2
 800432a:	2600      	movs	r6, #0
 800432c:	42a6      	cmp	r6, r4
 800432e:	d109      	bne.n	8004344 <__libc_init_array+0x24>
 8004330:	4d0b      	ldr	r5, [pc, #44]	; (8004360 <__libc_init_array+0x40>)
 8004332:	4c0c      	ldr	r4, [pc, #48]	; (8004364 <__libc_init_array+0x44>)
 8004334:	f000 f820 	bl	8004378 <_init>
 8004338:	1b64      	subs	r4, r4, r5
 800433a:	10a4      	asrs	r4, r4, #2
 800433c:	2600      	movs	r6, #0
 800433e:	42a6      	cmp	r6, r4
 8004340:	d105      	bne.n	800434e <__libc_init_array+0x2e>
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	f855 3b04 	ldr.w	r3, [r5], #4
 8004348:	4798      	blx	r3
 800434a:	3601      	adds	r6, #1
 800434c:	e7ee      	b.n	800432c <__libc_init_array+0xc>
 800434e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004352:	4798      	blx	r3
 8004354:	3601      	adds	r6, #1
 8004356:	e7f2      	b.n	800433e <__libc_init_array+0x1e>
 8004358:	08004518 	.word	0x08004518
 800435c:	08004518 	.word	0x08004518
 8004360:	08004518 	.word	0x08004518
 8004364:	0800451c 	.word	0x0800451c

08004368 <memset>:
 8004368:	4402      	add	r2, r0
 800436a:	4603      	mov	r3, r0
 800436c:	4293      	cmp	r3, r2
 800436e:	d100      	bne.n	8004372 <memset+0xa>
 8004370:	4770      	bx	lr
 8004372:	f803 1b01 	strb.w	r1, [r3], #1
 8004376:	e7f9      	b.n	800436c <memset+0x4>

08004378 <_init>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	bf00      	nop
 800437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437e:	bc08      	pop	{r3}
 8004380:	469e      	mov	lr, r3
 8004382:	4770      	bx	lr

08004384 <_fini>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	bf00      	nop
 8004388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	469e      	mov	lr, r3
 800438e:	4770      	bx	lr
