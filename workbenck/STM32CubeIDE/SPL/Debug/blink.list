
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000228c  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080023bc  080023bc  000123bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002480  08002480  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002480  08002480  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002480  08002480  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002480  08002480  00012480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002484  08002484  00012484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009370  20000068  080024f0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200093d8  080024f0  000293d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fa5  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b9  00000000  00000000  00027036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004d0  00000000  00000000  000284f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000418  00000000  00000000  000289c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002907  00000000  00000000  00028dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005fe3  00000000  00000000  0002b6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004524c  00000000  00000000  000316c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007690e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018fc  00000000  00000000  00076964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	080023a4 	.word	0x080023a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	080023a4 	.word	0x080023a4

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001d0:	683b      	ldr	r3, [r7, #0]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80001dc:	d103      	bne.n	80001e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e00c      	b.n	8000200 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	3308      	adds	r3, #8
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e002      	b.n	80001f4 <vListInsert+0x2e>
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d2f6      	bcs.n	80001ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	1c5a      	adds	r2, r3, #1
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000236:	b480      	push	{r7}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	6892      	ldr	r2, [r2, #8]
 800024c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	6852      	ldr	r2, [r2, #4]
 8000256:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d103      	bne.n	800026a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1e5a      	subs	r2, r3, #1
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000288:	b580      	push	{r7, lr}
 800028a:	b08c      	sub	sp, #48	; 0x30
 800028c:	af04      	add	r7, sp, #16
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	4613      	mov	r3, r2
 8000296:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000298:	88fb      	ldrh	r3, [r7, #6]
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fc89 	bl	8000bb4 <pvPortMalloc>
 80002a2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00e      	beq.n	80002c8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80002aa:	2054      	movs	r0, #84	; 0x54
 80002ac:	f000 fc82 	bl	8000bb4 <pvPortMalloc>
 80002b0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d003      	beq.n	80002c0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	697a      	ldr	r2, [r7, #20]
 80002bc:	631a      	str	r2, [r3, #48]	; 0x30
 80002be:	e005      	b.n	80002cc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80002c0:	6978      	ldr	r0, [r7, #20]
 80002c2:	f000 fd25 	bl	8000d10 <vPortFree>
 80002c6:	e001      	b.n	80002cc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d013      	beq.n	80002fa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80002d2:	88fa      	ldrh	r2, [r7, #6]
 80002d4:	2300      	movs	r3, #0
 80002d6:	9303      	str	r3, [sp, #12]
 80002d8:	69fb      	ldr	r3, [r7, #28]
 80002da:	9302      	str	r3, [sp, #8]
 80002dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002e2:	9300      	str	r3, [sp, #0]
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	68f8      	ldr	r0, [r7, #12]
 80002ea:	f000 f80e 	bl	800030a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80002ee:	69f8      	ldr	r0, [r7, #28]
 80002f0:	f000 f88a 	bl	8000408 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80002f4:	2301      	movs	r3, #1
 80002f6:	61bb      	str	r3, [r7, #24]
 80002f8:	e002      	b.n	8000300 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80002fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002fe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000300:	69bb      	ldr	r3, [r7, #24]
    }
 8000302:	4618      	mov	r0, r3
 8000304:	3720      	adds	r7, #32
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800030a:	b580      	push	{r7, lr}
 800030c:	b086      	sub	sp, #24
 800030e:	af00      	add	r7, sp, #0
 8000310:	60f8      	str	r0, [r7, #12]
 8000312:	60b9      	str	r1, [r7, #8]
 8000314:	607a      	str	r2, [r7, #4]
 8000316:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800031a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000322:	3b01      	subs	r3, #1
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	4413      	add	r3, r2
 8000328:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800032a:	693b      	ldr	r3, [r7, #16]
 800032c:	f023 0307 	bic.w	r3, r3, #7
 8000330:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d01f      	beq.n	8000378 <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	e012      	b.n	8000364 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800033e:	68ba      	ldr	r2, [r7, #8]
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	4413      	add	r3, r2
 8000344:	7819      	ldrb	r1, [r3, #0]
 8000346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	4413      	add	r3, r2
 800034c:	3334      	adds	r3, #52	; 0x34
 800034e:	460a      	mov	r2, r1
 8000350:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000352:	68ba      	ldr	r2, [r7, #8]
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	4413      	add	r3, r2
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d006      	beq.n	800036c <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	3301      	adds	r3, #1
 8000362:	617b      	str	r3, [r7, #20]
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	2b0f      	cmp	r3, #15
 8000368:	d9e9      	bls.n	800033e <prvInitialiseNewTask+0x34>
 800036a:	e000      	b.n	800036e <prvInitialiseNewTask+0x64>
            {
                break;
 800036c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800036e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000370:	2200      	movs	r2, #0
 8000372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000376:	e003      	b.n	8000380 <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800037a:	2200      	movs	r2, #0
 800037c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000380:	6a3b      	ldr	r3, [r7, #32]
 8000382:	2b1f      	cmp	r3, #31
 8000384:	d901      	bls.n	800038a <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000386:	231f      	movs	r3, #31
 8000388:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800038a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800038c:	6a3a      	ldr	r2, [r7, #32]
 800038e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000392:	6a3a      	ldr	r2, [r7, #32]
 8000394:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8000396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000398:	2200      	movs	r2, #0
 800039a:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800039c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800039e:	3304      	adds	r3, #4
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ff04 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80003a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a8:	3318      	adds	r3, #24
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff feff 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80003b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003b4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003b6:	6a3b      	ldr	r3, [r7, #32]
 80003b8:	f1c3 0220 	rsb	r2, r3, #32
 80003bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003be:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80003c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003c4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80003c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003c8:	334c      	adds	r3, #76	; 0x4c
 80003ca:	2204      	movs	r2, #4
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 f880 	bl	80014d4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80003d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003d6:	3350      	adds	r3, #80	; 0x50
 80003d8:	2201      	movs	r2, #1
 80003da:	2100      	movs	r1, #0
 80003dc:	4618      	mov	r0, r3
 80003de:	f001 f879 	bl	80014d4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80003e2:	683a      	ldr	r2, [r7, #0]
 80003e4:	68f9      	ldr	r1, [r7, #12]
 80003e6:	6938      	ldr	r0, [r7, #16]
 80003e8:	f000 fd8c 	bl	8000f04 <pxPortInitialiseStack>
 80003ec:	4602      	mov	r2, r0
 80003ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80003f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <prvInitialiseNewTask+0xf4>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80003f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80003fe:	bf00      	nop
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000410:	f000 fdd2 	bl	8000fb8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000414:	4b3e      	ldr	r3, [pc, #248]	; (8000510 <prvAddNewTaskToReadyList+0x108>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	3301      	adds	r3, #1
 800041a:	4a3d      	ldr	r2, [pc, #244]	; (8000510 <prvAddNewTaskToReadyList+0x108>)
 800041c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800041e:	4b3d      	ldr	r3, [pc, #244]	; (8000514 <prvAddNewTaskToReadyList+0x10c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d109      	bne.n	800043a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000426:	4a3b      	ldr	r2, [pc, #236]	; (8000514 <prvAddNewTaskToReadyList+0x10c>)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800042c:	4b38      	ldr	r3, [pc, #224]	; (8000510 <prvAddNewTaskToReadyList+0x108>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b01      	cmp	r3, #1
 8000432:	d110      	bne.n	8000456 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000434:	f000 fae4 	bl	8000a00 <prvInitialiseTaskLists>
 8000438:	e00d      	b.n	8000456 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800043a:	4b37      	ldr	r3, [pc, #220]	; (8000518 <prvAddNewTaskToReadyList+0x110>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d109      	bne.n	8000456 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000442:	4b34      	ldr	r3, [pc, #208]	; (8000514 <prvAddNewTaskToReadyList+0x10c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800044c:	429a      	cmp	r2, r3
 800044e:	d802      	bhi.n	8000456 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000450:	4a30      	ldr	r2, [pc, #192]	; (8000514 <prvAddNewTaskToReadyList+0x10c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000456:	4b31      	ldr	r3, [pc, #196]	; (800051c <prvAddNewTaskToReadyList+0x114>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3301      	adds	r3, #1
 800045c:	4a2f      	ldr	r2, [pc, #188]	; (800051c <prvAddNewTaskToReadyList+0x114>)
 800045e:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000464:	2201      	movs	r2, #1
 8000466:	409a      	lsls	r2, r3
 8000468:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <prvAddNewTaskToReadyList+0x118>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4313      	orrs	r3, r2
 800046e:	4a2c      	ldr	r2, [pc, #176]	; (8000520 <prvAddNewTaskToReadyList+0x118>)
 8000470:	6013      	str	r3, [r2, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000476:	492b      	ldr	r1, [pc, #172]	; (8000524 <prvAddNewTaskToReadyList+0x11c>)
 8000478:	4613      	mov	r3, r2
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	4413      	add	r3, r2
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	440b      	add	r3, r1
 8000482:	3304      	adds	r3, #4
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	689a      	ldr	r2, [r3, #8]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	3204      	adds	r2, #4
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	1d1a      	adds	r2, r3, #4
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004ac:	4613      	mov	r3, r2
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	4413      	add	r3, r2
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	4a1b      	ldr	r2, [pc, #108]	; (8000524 <prvAddNewTaskToReadyList+0x11c>)
 80004b6:	441a      	add	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	615a      	str	r2, [r3, #20]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004c0:	4918      	ldr	r1, [pc, #96]	; (8000524 <prvAddNewTaskToReadyList+0x11c>)
 80004c2:	4613      	mov	r3, r2
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	4413      	add	r3, r2
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	440b      	add	r3, r1
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	1c59      	adds	r1, r3, #1
 80004d0:	4814      	ldr	r0, [pc, #80]	; (8000524 <prvAddNewTaskToReadyList+0x11c>)
 80004d2:	4613      	mov	r3, r2
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	4413      	add	r3, r2
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	4403      	add	r3, r0
 80004dc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80004de:	f000 fd85 	bl	8000fec <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <prvAddNewTaskToReadyList+0x110>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d00e      	beq.n	8000508 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <prvAddNewTaskToReadyList+0x10c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d207      	bcs.n	8000508 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <prvAddNewTaskToReadyList+0x120>)
 80004fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	f3bf 8f4f 	dsb	sy
 8000504:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000374 	.word	0x20000374
 8000514:	20000084 	.word	0x20000084
 8000518:	20000380 	.word	0x20000380
 800051c:	20000390 	.word	0x20000390
 8000520:	2000037c 	.word	0x2000037c
 8000524:	20000088 	.word	0x20000088
 8000528:	e000ed04 	.word	0xe000ed04

0800052c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d008      	beq.n	8000550 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 800053e:	f000 f819 	bl	8000574 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000542:	2100      	movs	r1, #0
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 fab5 	bl	8000ab4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800054a:	f000 f821 	bl	8000590 <xTaskResumeAll>
 800054e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d107      	bne.n	8000566 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <vTaskDelay+0x44>)
 8000558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	f3bf 8f4f 	dsb	sy
 8000562:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000566:	bf00      	nop
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	e000ed04 	.word	0xe000ed04

08000574 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <vTaskSuspendAll+0x18>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a03      	ldr	r2, [pc, #12]	; (800058c <vTaskSuspendAll+0x18>)
 8000580:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000398 	.word	0x20000398

08000590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800059e:	f000 fd0b 	bl	8000fb8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80005a2:	4b68      	ldr	r3, [pc, #416]	; (8000744 <xTaskResumeAll+0x1b4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	4a66      	ldr	r2, [pc, #408]	; (8000744 <xTaskResumeAll+0x1b4>)
 80005aa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80005ac:	4b65      	ldr	r3, [pc, #404]	; (8000744 <xTaskResumeAll+0x1b4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	f040 80c0 	bne.w	8000736 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80005b6:	4b64      	ldr	r3, [pc, #400]	; (8000748 <xTaskResumeAll+0x1b8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	f000 80bb 	beq.w	8000736 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80005c0:	e08a      	b.n	80006d8 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80005c2:	4b62      	ldr	r3, [pc, #392]	; (800074c <xTaskResumeAll+0x1bc>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	6a12      	ldr	r2, [r2, #32]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	6a1b      	ldr	r3, [r3, #32]
 80005de:	697a      	ldr	r2, [r7, #20]
 80005e0:	69d2      	ldr	r2, [r2, #28]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3318      	adds	r3, #24
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d103      	bne.n	80005f8 <xTaskResumeAll+0x68>
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	6a1a      	ldr	r2, [r3, #32]
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	2200      	movs	r2, #0
 80005fc:	629a      	str	r2, [r3, #40]	; 0x28
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	1e5a      	subs	r2, r3, #1
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	68d2      	ldr	r2, [r2, #12]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	6892      	ldr	r2, [r2, #8]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	685a      	ldr	r2, [r3, #4]
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	3304      	adds	r3, #4
 800062a:	429a      	cmp	r2, r3
 800062c:	d103      	bne.n	8000636 <xTaskResumeAll+0xa6>
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	68da      	ldr	r2, [r3, #12]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	1e5a      	subs	r2, r3, #1
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064a:	2201      	movs	r2, #1
 800064c:	409a      	lsls	r2, r3
 800064e:	4b40      	ldr	r3, [pc, #256]	; (8000750 <xTaskResumeAll+0x1c0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4313      	orrs	r3, r2
 8000654:	4a3e      	ldr	r2, [pc, #248]	; (8000750 <xTaskResumeAll+0x1c0>)
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800065c:	493d      	ldr	r1, [pc, #244]	; (8000754 <xTaskResumeAll+0x1c4>)
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	440b      	add	r3, r1
 8000668:	3304      	adds	r3, #4
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	689a      	ldr	r2, [r3, #8]
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	697a      	ldr	r2, [r7, #20]
 8000682:	3204      	adds	r2, #4
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	1d1a      	adds	r2, r3, #4
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000692:	4613      	mov	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <xTaskResumeAll+0x1c4>)
 800069c:	441a      	add	r2, r3
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006a6:	492b      	ldr	r1, [pc, #172]	; (8000754 <xTaskResumeAll+0x1c4>)
 80006a8:	4613      	mov	r3, r2
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4413      	add	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	440b      	add	r3, r1
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	1c59      	adds	r1, r3, #1
 80006b6:	4827      	ldr	r0, [pc, #156]	; (8000754 <xTaskResumeAll+0x1c4>)
 80006b8:	4613      	mov	r3, r2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	4413      	add	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4403      	add	r3, r0
 80006c2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <xTaskResumeAll+0x1c8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d302      	bcc.n	80006d8 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <xTaskResumeAll+0x1cc>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <xTaskResumeAll+0x1bc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	f47f af70 	bne.w	80005c2 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80006e8:	f000 f9ca 	bl	8000a80 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <xTaskResumeAll+0x1d0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d010      	beq.n	800071a <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80006f8:	f000 f836 	bl	8000768 <xTaskIncrementTick>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <xTaskResumeAll+0x1cc>)
 8000704:	2201      	movs	r2, #1
 8000706:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3b01      	subs	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f1      	bne.n	80006f8 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <xTaskResumeAll+0x1d0>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <xTaskResumeAll+0x1cc>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d009      	beq.n	8000736 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000722:	2301      	movs	r3, #1
 8000724:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <xTaskResumeAll+0x1d4>)
 8000728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	f3bf 8f4f 	dsb	sy
 8000732:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000736:	f000 fc59 	bl	8000fec <vPortExitCritical>

    return xAlreadyYielded;
 800073a:	693b      	ldr	r3, [r7, #16]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000398 	.word	0x20000398
 8000748:	20000374 	.word	0x20000374
 800074c:	20000338 	.word	0x20000338
 8000750:	2000037c 	.word	0x2000037c
 8000754:	20000088 	.word	0x20000088
 8000758:	20000084 	.word	0x20000084
 800075c:	20000388 	.word	0x20000388
 8000760:	20000384 	.word	0x20000384
 8000764:	e000ed04 	.word	0xe000ed04

08000768 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000772:	4b75      	ldr	r3, [pc, #468]	; (8000948 <xTaskIncrementTick+0x1e0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	f040 80dc 	bne.w	8000934 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800077c:	4b73      	ldr	r3, [pc, #460]	; (800094c <xTaskIncrementTick+0x1e4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000784:	4a71      	ldr	r2, [pc, #452]	; (800094c <xTaskIncrementTick+0x1e4>)
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d110      	bne.n	80007b2 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000790:	4b6f      	ldr	r3, [pc, #444]	; (8000950 <xTaskIncrementTick+0x1e8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	4b6f      	ldr	r3, [pc, #444]	; (8000954 <xTaskIncrementTick+0x1ec>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a6d      	ldr	r2, [pc, #436]	; (8000950 <xTaskIncrementTick+0x1e8>)
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	4a6d      	ldr	r2, [pc, #436]	; (8000954 <xTaskIncrementTick+0x1ec>)
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b6c      	ldr	r3, [pc, #432]	; (8000958 <xTaskIncrementTick+0x1f0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3301      	adds	r3, #1
 80007aa:	4a6b      	ldr	r2, [pc, #428]	; (8000958 <xTaskIncrementTick+0x1f0>)
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	f000 f967 	bl	8000a80 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80007b2:	4b6a      	ldr	r3, [pc, #424]	; (800095c <xTaskIncrementTick+0x1f4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	69ba      	ldr	r2, [r7, #24]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	f0c0 80a6 	bcc.w	800090a <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80007be:	4b64      	ldr	r3, [pc, #400]	; (8000950 <xTaskIncrementTick+0x1e8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d104      	bne.n	80007d2 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007c8:	4b64      	ldr	r3, [pc, #400]	; (800095c <xTaskIncrementTick+0x1f4>)
 80007ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007ce:	601a      	str	r2, [r3, #0]
                    break;
 80007d0:	e09b      	b.n	800090a <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80007d2:	4b5f      	ldr	r3, [pc, #380]	; (8000950 <xTaskIncrementTick+0x1e8>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80007e2:	69ba      	ldr	r2, [r7, #24]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d203      	bcs.n	80007f2 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80007ea:	4a5c      	ldr	r2, [pc, #368]	; (800095c <xTaskIncrementTick+0x1f4>)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80007f0:	e08b      	b.n	800090a <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	693a      	ldr	r2, [r7, #16]
 80007fe:	68d2      	ldr	r2, [r2, #12]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	6892      	ldr	r2, [r2, #8]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	3304      	adds	r3, #4
 8000814:	429a      	cmp	r2, r3
 8000816:	d103      	bne.n	8000820 <xTaskIncrementTick+0xb8>
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	1e5a      	subs	r2, r3, #1
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000834:	2b00      	cmp	r3, #0
 8000836:	d01e      	beq.n	8000876 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	6a12      	ldr	r2, [r2, #32]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	6a1b      	ldr	r3, [r3, #32]
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	69d2      	ldr	r2, [r2, #28]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685a      	ldr	r2, [r3, #4]
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	3318      	adds	r3, #24
 800085a:	429a      	cmp	r2, r3
 800085c:	d103      	bne.n	8000866 <xTaskIncrementTick+0xfe>
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	6a1a      	ldr	r2, [r3, #32]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	1e5a      	subs	r2, r3, #1
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087a:	2201      	movs	r2, #1
 800087c:	409a      	lsls	r2, r3
 800087e:	4b38      	ldr	r3, [pc, #224]	; (8000960 <xTaskIncrementTick+0x1f8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4313      	orrs	r3, r2
 8000884:	4a36      	ldr	r2, [pc, #216]	; (8000960 <xTaskIncrementTick+0x1f8>)
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088c:	4935      	ldr	r1, [pc, #212]	; (8000964 <xTaskIncrementTick+0x1fc>)
 800088e:	4613      	mov	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4413      	add	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	440b      	add	r3, r1
 8000898:	3304      	adds	r3, #4
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	689a      	ldr	r2, [r3, #8]
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	3204      	adds	r2, #4
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	1d1a      	adds	r2, r3, #4
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c2:	4613      	mov	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4a26      	ldr	r2, [pc, #152]	; (8000964 <xTaskIncrementTick+0x1fc>)
 80008cc:	441a      	add	r2, r3
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	615a      	str	r2, [r3, #20]
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008d6:	4923      	ldr	r1, [pc, #140]	; (8000964 <xTaskIncrementTick+0x1fc>)
 80008d8:	4613      	mov	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	4413      	add	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	440b      	add	r3, r1
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	1c59      	adds	r1, r3, #1
 80008e6:	481f      	ldr	r0, [pc, #124]	; (8000964 <xTaskIncrementTick+0x1fc>)
 80008e8:	4613      	mov	r3, r2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	4413      	add	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	4403      	add	r3, r0
 80008f2:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <xTaskIncrementTick+0x200>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fe:	429a      	cmp	r2, r3
 8000900:	f4ff af5d 	bcc.w	80007be <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000908:	e759      	b.n	80007be <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <xTaskIncrementTick+0x200>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000910:	4914      	ldr	r1, [pc, #80]	; (8000964 <xTaskIncrementTick+0x1fc>)
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	440b      	add	r3, r1
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d901      	bls.n	8000926 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 8000922:	2301      	movs	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <xTaskIncrementTick+0x204>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d007      	beq.n	800093e <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 800092e:	2301      	movs	r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	e004      	b.n	800093e <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <xTaskIncrementTick+0x208>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <xTaskIncrementTick+0x208>)
 800093c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800093e:	69fb      	ldr	r3, [r7, #28]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000398 	.word	0x20000398
 800094c:	20000378 	.word	0x20000378
 8000950:	20000330 	.word	0x20000330
 8000954:	20000334 	.word	0x20000334
 8000958:	2000038c 	.word	0x2000038c
 800095c:	20000394 	.word	0x20000394
 8000960:	2000037c 	.word	0x2000037c
 8000964:	20000088 	.word	0x20000088
 8000968:	20000084 	.word	0x20000084
 800096c:	20000388 	.word	0x20000388
 8000970:	20000384 	.word	0x20000384

08000974 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <vTaskSwitchContext+0x78>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d003      	beq.n	800098a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <vTaskSwitchContext+0x7c>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000988:	e02a      	b.n	80009e0 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <vTaskSwitchContext+0x7c>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <vTaskSwitchContext+0x80>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	607b      	str	r3, [r7, #4]
/* Generic helper function. */
        __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
        {
            uint8_t ucReturn;

            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	fab3 f383 	clz	r3, r3
 800099c:	70fb      	strb	r3, [r7, #3]

            return ucReturn;
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	f1c3 031f 	rsb	r3, r3, #31
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	4613      	mov	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <vTaskSwitchContext+0x84>)
 80009b2:	4413      	add	r3, r2
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	3308      	adds	r3, #8
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d104      	bne.n	80009d6 <vTaskSwitchContext+0x62>
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	685a      	ldr	r2, [r3, #4]
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <vTaskSwitchContext+0x88>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000398 	.word	0x20000398
 80009f0:	20000388 	.word	0x20000388
 80009f4:	2000037c 	.word	0x2000037c
 80009f8:	20000088 	.word	0x20000088
 80009fc:	20000084 	.word	0x20000084

08000a00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	e00c      	b.n	8000a26 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4413      	add	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <prvInitialiseTaskLists+0x60>)
 8000a18:	4413      	add	r3, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fba8 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3301      	adds	r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b1f      	cmp	r3, #31
 8000a2a:	d9ef      	bls.n	8000a0c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <prvInitialiseTaskLists+0x64>)
 8000a2e:	f7ff fb9f 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <prvInitialiseTaskLists+0x68>)
 8000a34:	f7ff fb9c 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <prvInitialiseTaskLists+0x6c>)
 8000a3a:	f7ff fb99 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <prvInitialiseTaskLists+0x70>)
 8000a40:	f7ff fb96 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <prvInitialiseTaskLists+0x74>)
 8000a46:	f7ff fb93 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <prvInitialiseTaskLists+0x78>)
 8000a4c:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <prvInitialiseTaskLists+0x64>)
 8000a4e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <prvInitialiseTaskLists+0x7c>)
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <prvInitialiseTaskLists+0x68>)
 8000a54:	601a      	str	r2, [r3, #0]
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000088 	.word	0x20000088
 8000a64:	20000308 	.word	0x20000308
 8000a68:	2000031c 	.word	0x2000031c
 8000a6c:	20000338 	.word	0x20000338
 8000a70:	2000034c 	.word	0x2000034c
 8000a74:	20000360 	.word	0x20000360
 8000a78:	20000330 	.word	0x20000330
 8000a7c:	20000334 	.word	0x20000334

08000a80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <prvResetNextTaskUnblockTime+0x2c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d104      	bne.n	8000a98 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <prvResetNextTaskUnblockTime+0x30>)
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a94:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000a96:	e005      	b.n	8000aa4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <prvResetNextTaskUnblockTime+0x2c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <prvResetNextTaskUnblockTime+0x30>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000330 	.word	0x20000330
 8000ab0:	20000394 	.word	0x20000394

08000ab4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000abe:	4b36      	ldr	r3, [pc, #216]	; (8000b98 <prvAddCurrentTaskToDelayedList+0xe4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000ac4:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fbb3 	bl	8000236 <uxListRemove>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10b      	bne.n	8000aee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000adc:	2201      	movs	r2, #1
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <prvAddCurrentTaskToDelayedList+0xec>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	4a2d      	ldr	r2, [pc, #180]	; (8000ba0 <prvAddCurrentTaskToDelayedList+0xec>)
 8000aec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000af4:	d124      	bne.n	8000b40 <prvAddCurrentTaskToDelayedList+0x8c>
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d021      	beq.n	8000b40 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000afc:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	6892      	ldr	r2, [r2, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	3204      	adds	r2, #4
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	1d1a      	adds	r2, r3, #4
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000b3e:	e026      	b.n	8000b8e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d209      	bcs.n	8000b6c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3304      	adds	r3, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4610      	mov	r0, r2
 8000b66:	f7ff fb2e 	bl	80001c6 <vListInsert>
}
 8000b6a:	e010      	b.n	8000b8e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <prvAddCurrentTaskToDelayedList+0xf8>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3304      	adds	r3, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4610      	mov	r0, r2
 8000b7a:	f7ff fb24 	bl	80001c6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d202      	bcs.n	8000b8e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8000b88:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	6013      	str	r3, [r2, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000378 	.word	0x20000378
 8000b9c:	20000084 	.word	0x20000084
 8000ba0:	2000037c 	.word	0x2000037c
 8000ba4:	20000360 	.word	0x20000360
 8000ba8:	20000334 	.word	0x20000334
 8000bac:	20000330 	.word	0x20000330
 8000bb0:	20000394 	.word	0x20000394

08000bb4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8000bc0:	f7ff fcd8 	bl	8000574 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000bc4:	4b4c      	ldr	r3, [pc, #304]	; (8000cf8 <pvPortMalloc+0x144>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000bcc:	f000 f8e0 	bl	8000d90 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000bd0:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <pvPortMalloc+0x148>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	f040 8086 	bne.w	8000cea <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d01e      	beq.n	8000c22 <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8000be4:	2208      	movs	r2, #8
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d218      	bcs.n	8000c22 <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d011      	beq.n	8000c26 <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f023 0307 	bic.w	r3, r3, #7
 8000c08:	3308      	adds	r3, #8
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d205      	bcs.n	8000c1c <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f023 0307 	bic.w	r3, r3, #7
 8000c16:	3308      	adds	r3, #8
 8000c18:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000c1a:	e004      	b.n	8000c26 <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000c20:	e001      	b.n	8000c26 <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d05e      	beq.n	8000cea <pvPortMalloc+0x136>
 8000c2c:	4b34      	ldr	r3, [pc, #208]	; (8000d00 <pvPortMalloc+0x14c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d859      	bhi.n	8000cea <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000c36:	4b33      	ldr	r3, [pc, #204]	; (8000d04 <pvPortMalloc+0x150>)
 8000c38:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8000c3a:	4b32      	ldr	r3, [pc, #200]	; (8000d04 <pvPortMalloc+0x150>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000c40:	e004      	b.n	8000c4c <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d903      	bls.n	8000c5e <pvPortMalloc+0xaa>
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f1      	bne.n	8000c42 <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <pvPortMalloc+0x144>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d040      	beq.n	8000cea <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2208      	movs	r2, #8
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	1ad2      	subs	r2, r2, r3
 8000c82:	2308      	movs	r3, #8
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d90f      	bls.n	8000caa <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	1ad2      	subs	r2, r2, r3
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ca4:	68b8      	ldr	r0, [r7, #8]
 8000ca6:	f000 f8d5 	bl	8000e54 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <pvPortMalloc+0x14c>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <pvPortMalloc+0x14c>)
 8000cb6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <pvPortMalloc+0x14c>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <pvPortMalloc+0x154>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d203      	bcs.n	8000ccc <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <pvPortMalloc+0x14c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <pvPortMalloc+0x154>)
 8000cca:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <pvPortMalloc+0x148>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <pvPortMalloc+0x158>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <pvPortMalloc+0x158>)
 8000ce8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000cea:	f7ff fc51 	bl	8000590 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200093a4 	.word	0x200093a4
 8000cfc:	200093b8 	.word	0x200093b8
 8000d00:	200093a8 	.word	0x200093a8
 8000d04:	2000939c 	.word	0x2000939c
 8000d08:	200093ac 	.word	0x200093ac
 8000d0c:	200093b0 	.word	0x200093b0

08000d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d02c      	beq.n	8000d7c <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8000d22:	2308      	movs	r3, #8
 8000d24:	425b      	negs	r3, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <vPortFree+0x74>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d01e      	beq.n	8000d7c <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d11a      	bne.n	8000d7c <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <vPortFree+0x74>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	401a      	ands	r2, r3
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8000d56:	f7ff fc0d 	bl	8000574 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <vPortFree+0x78>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <vPortFree+0x78>)
 8000d66:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000d68:	68b8      	ldr	r0, [r7, #8]
 8000d6a:	f000 f873 	bl	8000e54 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <vPortFree+0x7c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <vPortFree+0x7c>)
 8000d76:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8000d78:	f7ff fc0a 	bl	8000590 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200093b8 	.word	0x200093b8
 8000d88:	200093a8 	.word	0x200093a8
 8000d8c:	200093b4 	.word	0x200093b4

08000d90 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000d96:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000d9a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <prvHeapInit+0xac>)
 8000d9e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00c      	beq.n	8000dc4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	3307      	adds	r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f023 0307 	bic.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <prvHeapInit+0xac>)
 8000dc0:	4413      	add	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <prvHeapInit+0xb0>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <prvHeapInit+0xb0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8000ddc:	2208      	movs	r2, #8
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	1a9b      	subs	r3, r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f023 0307 	bic.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <prvHeapInit+0xb4>)
 8000df0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <prvHeapInit+0xb4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2200      	movs	r2, #0
 8000df8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <prvHeapInit+0xb4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	1ad2      	subs	r2, r2, r3
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <prvHeapInit+0xb4>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <prvHeapInit+0xb8>)
 8000e1e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <prvHeapInit+0xbc>)
 8000e26:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <prvHeapInit+0xc0>)
 8000e2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000e2e:	601a      	str	r2, [r3, #0]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	2000039c 	.word	0x2000039c
 8000e40:	2000939c 	.word	0x2000939c
 8000e44:	200093a4 	.word	0x200093a4
 8000e48:	200093ac 	.word	0x200093ac
 8000e4c:	200093a8 	.word	0x200093a8
 8000e50:	200093b8 	.word	0x200093b8

08000e54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <prvInsertBlockIntoFreeList+0xa8>)
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	e002      	b.n	8000e68 <prvInsertBlockIntoFreeList+0x14>
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d8f7      	bhi.n	8000e62 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d108      	bne.n	8000e96 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	441a      	add	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	441a      	add	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d118      	bne.n	8000edc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <prvInsertBlockIntoFreeList+0xac>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d00d      	beq.n	8000ed2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	441a      	add	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e008      	b.n	8000ee4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <prvInsertBlockIntoFreeList+0xac>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e003      	b.n	8000ee4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d002      	beq.n	8000ef2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	2000939c 	.word	0x2000939c
 8000f00:	200093a4 	.word	0x200093a4

08000f04 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3b04      	subs	r3, #4
 8000f14:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f1c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3b04      	subs	r3, #4
 8000f22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	f023 0201 	bic.w	r2, r3, #1
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3b04      	subs	r3, #4
 8000f32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000f34:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <pxPortInitialiseStack+0x54>)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3b14      	subs	r3, #20
 8000f3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3b20      	subs	r3, #32
 8000f4a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	08000f5d 	.word	0x08000f5d

08000f5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f6a:	f383 8811 	msr	BASEPRI, r3
 8000f6e:	f3bf 8f6f 	isb	sy
 8000f72:	f3bf 8f4f 	dsb	sy
 8000f76:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000f78:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000f7a:	bf00      	nop
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0fc      	beq.n	8000f7c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
	...

08000f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <pxCurrentTCBConst2>)
 8000f92:	6819      	ldr	r1, [r3, #0]
 8000f94:	6808      	ldr	r0, [r1, #0]
 8000f96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f9a:	f380 8809 	msr	PSP, r0
 8000f9e:	f3bf 8f6f 	isb	sy
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	f380 8811 	msr	BASEPRI, r0
 8000faa:	f04e 0e0d 	orr.w	lr, lr, #13
 8000fae:	4770      	bx	lr

08000fb0 <pxCurrentTCBConst2>:
 8000fb0:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop

08000fb8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
        __asm volatile
 8000fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fc2:	f383 8811 	msr	BASEPRI, r3
 8000fc6:	f3bf 8f6f 	isb	sy
 8000fca:	f3bf 8f4f 	dsb	sy
 8000fce:	607b      	str	r3, [r7, #4]
    }
 8000fd0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <vPortEnterCritical+0x30>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a03      	ldr	r2, [pc, #12]	; (8000fe8 <vPortEnterCritical+0x30>)
 8000fda:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000000 	.word	0x20000000

08000fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <vPortExitCritical+0x30>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	4a08      	ldr	r2, [pc, #32]	; (800101c <vPortExitCritical+0x30>)
 8000ffa:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <vPortExitCritical+0x30>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d105      	bne.n	8001010 <vPortExitCritical+0x24>
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800100e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000000 	.word	0x20000000

08001020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001020:	f3ef 8009 	mrs	r0, PSP
 8001024:	f3bf 8f6f 	isb	sy
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <pxCurrentTCBConst>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001030:	6010      	str	r0, [r2, #0]
 8001032:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001036:	f04f 0050 	mov.w	r0, #80	; 0x50
 800103a:	f380 8811 	msr	BASEPRI, r0
 800103e:	f7ff fc99 	bl	8000974 <vTaskSwitchContext>
 8001042:	f04f 0000 	mov.w	r0, #0
 8001046:	f380 8811 	msr	BASEPRI, r0
 800104a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800104e:	6819      	ldr	r1, [r3, #0]
 8001050:	6808      	ldr	r0, [r1, #0]
 8001052:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001056:	f380 8809 	msr	PSP, r0
 800105a:	f3bf 8f6f 	isb	sy
 800105e:	4770      	bx	lr

08001060 <pxCurrentTCBConst>:
 8001060:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop

08001068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
        __asm volatile
 800106e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001072:	f383 8811 	msr	BASEPRI, r3
 8001076:	f3bf 8f6f 	isb	sy
 800107a:	f3bf 8f4f 	dsb	sy
 800107e:	607b      	str	r3, [r7, #4]
    }
 8001080:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001082:	f7ff fb71 	bl	8000768 <xTaskIncrementTick>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <xPortSysTickHandler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <xPortSysTickHandler+0x40>)
 800108e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f383 8811 	msr	BASEPRI, r3
    }
 800109e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	e000ed04 	.word	0xe000ed04

080010ac <main>:
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

void my_task(void *pvParam);
int main(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af02      	add	r7, sp, #8
        bsp_init();
 80010b2:	f000 f910 	bl	80012d6 <bsp_init>
        TaskHandle_t my_handle = NULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
        xTaskCreate(my_task, "myTask1", 1024, NULL, 1, &my_handle);
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	2301      	movs	r3, #1
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2300      	movs	r3, #0
 80010c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c8:	4906      	ldr	r1, [pc, #24]	; (80010e4 <main+0x38>)
 80010ca:	4807      	ldr	r0, [pc, #28]	; (80010e8 <main+0x3c>)
 80010cc:	f7ff f8dc 	bl	8000288 <xTaskCreate>
        vTaskDelay(1000 / portTICK_PERIOD_MS);
 80010d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d4:	f7ff fa2a 	bl	800052c <vTaskDelay>
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	080023bc 	.word	0x080023bc
 80010e8:	080010ed 	.word	0x080010ed

080010ec <my_task>:
void my_task(void *pvParam)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
        while (1) {
                vTaskDelay(1000 / portTICK_PERIOD_MS);
 80010f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f8:	f7ff fa18 	bl	800052c <vTaskDelay>
                printf("...Run-time checking enabled  \n\r");
 80010fc:	4801      	ldr	r0, [pc, #4]	; (8001104 <my_task+0x18>)
 80010fe:	f000 f9f1 	bl	80014e4 <iprintf>
                vTaskDelay(1000 / portTICK_PERIOD_MS);
 8001102:	e7f7      	b.n	80010f4 <my_task+0x8>
 8001104:	080023c4 	.word	0x080023c4

08001108 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001118:	e7fe      	b.n	8001118 <HardFault_Handler+0x4>

0800111a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800111e:	e7fe      	b.n	800111e <MemManage_Handler+0x4>

08001120 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001124:	e7fe      	b.n	8001124 <BusFault_Handler+0x4>

08001126 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800112a:	e7fe      	b.n	800112a <UsageFault_Handler+0x4>

0800112c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
extern void xPortSysTickHandler(void);
void SysTick_Handler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
        #if (INCLUDE_xTaskGetSchedulerState == 1)
        if (xTaskGetSchedulerState() != taskSCHEDULDER_NOT_STARTED)
        {
        #endif
                xPortSysTickHandler();
 800113c:	f7ff ff94 	bl	8001068 <xPortSysTickHandler>
        #if (INCLUDE_xTaskGetSchedulerState == 1)
        }
        #endif

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	e00a      	b.n	800116c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001156:	f3af 8000 	nop.w
 800115a:	4601      	mov	r1, r0
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	60ba      	str	r2, [r7, #8]
 8001162:	b2ca      	uxtb	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbf0      	blt.n	8001156 <_read+0x12>
	}

return len;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e009      	b.n	80011a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	60ba      	str	r2, [r7, #8]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dbf1      	blt.n	8001190 <_write+0x12>
	}
	return len;
 80011ac:	687b      	ldr	r3, [r7, #4]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_close>:

int _close(int file)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	return -1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011dc:	605a      	str	r2, [r3, #4]
	return 0;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <_isatty>:

int _isatty(int file)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
	return 1;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr

080011fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011fe:	b480      	push	{r7}
 8001200:	b085      	sub	sp, #20
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
	return 0;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
	...

08001218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001220:	4a14      	ldr	r2, [pc, #80]	; (8001274 <_sbrk+0x5c>)
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <_sbrk+0x60>)
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <_sbrk+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <_sbrk+0x64>)
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <_sbrk+0x68>)
 8001238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	429a      	cmp	r2, r3
 8001246:	d207      	bcs.n	8001258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001248:	f000 f91a 	bl	8001480 <__errno>
 800124c:	4603      	mov	r3, r0
 800124e:	220c      	movs	r2, #12
 8001250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001256:	e009      	b.n	800126c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <_sbrk+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <_sbrk+0x64>)
 8001268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126a:	68fb      	ldr	r3, [r7, #12]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20010000 	.word	0x20010000
 8001278:	00000400 	.word	0x00000400
 800127c:	200093bc 	.word	0x200093bc
 8001280:	200093d8 	.word	0x200093d8

08001284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001286:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001288:	f000 f82e 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800128e:	490d      	ldr	r1, [pc, #52]	; (80012c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <LoopForever+0xe>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a4:	4c0a      	ldr	r4, [pc, #40]	; (80012d0 <LoopForever+0x16>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012b2:	f000 f8eb 	bl	800148c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b6:	f7ff fef9 	bl	80010ac <main>

080012ba <LoopForever>:

LoopForever:
    b LoopForever
 80012ba:	e7fe      	b.n	80012ba <LoopForever>
  ldr   r0, =_estack
 80012bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012c8:	08002488 	.word	0x08002488
  ldr r2, =_sbss
 80012cc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012d0:	200093d8 	.word	0x200093d8

080012d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_2_IRQHandler>

080012d6 <bsp_init>:
#include "bsp.h"

void bsp_init(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	af00      	add	r7, sp, #0
        //4bit都用来表示抢占优先级（0~15）
        NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80012da:	f44f 7040 	mov.w	r0, #768	; 0x300
 80012de:	f000 f8bd 	bl	800145c <NVIC_PriorityGroupConfig>
        //led_setup();
        //usart_setup();
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <SystemInit+0x5c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <SystemInit+0x5c>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <SystemInit+0x5c>)
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	4911      	ldr	r1, [pc, #68]	; (8001344 <SystemInit+0x5c>)
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <SystemInit+0x60>)
 8001300:	4013      	ands	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <SystemInit+0x5c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <SystemInit+0x5c>)
 800130a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800130e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <SystemInit+0x5c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SystemInit+0x5c>)
 800131a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <SystemInit+0x5c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <SystemInit+0x5c>)
 8001326:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800132a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SystemInit+0x5c>)
 800132e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001332:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001334:	f000 f80c 	bl	8001350 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <SystemInit+0x64>)
 800133a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800133e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000
 8001348:	f8ff0000 	.word	0xf8ff0000
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001354:	f000 f802 	bl	800135c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800136a:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <SetSysClockTo72+0xf8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a39      	ldr	r2, [pc, #228]	; (8001454 <SetSysClockTo72+0xf8>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001376:	4b37      	ldr	r3, [pc, #220]	; (8001454 <SetSysClockTo72+0xf8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3301      	adds	r3, #1
 8001384:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d103      	bne.n	8001394 <SetSysClockTo72+0x38>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001392:	d1f0      	bne.n	8001376 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001394:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <SetSysClockTo72+0xf8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80013a0:	2301      	movs	r3, #1
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	e001      	b.n	80013aa <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d14b      	bne.n	8001448 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <SetSysClockTo72+0xfc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a28      	ldr	r2, [pc, #160]	; (8001458 <SetSysClockTo72+0xfc>)
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <SetSysClockTo72+0xfc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a25      	ldr	r2, [pc, #148]	; (8001458 <SetSysClockTo72+0xfc>)
 80013c2:	f023 0303 	bic.w	r3, r3, #3
 80013c6:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <SetSysClockTo72+0xfc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a22      	ldr	r2, [pc, #136]	; (8001458 <SetSysClockTo72+0xfc>)
 80013ce:	f043 0302 	orr.w	r3, r3, #2
 80013d2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <SetSysClockTo72+0xf8>)
 80013d6:	4a1f      	ldr	r2, [pc, #124]	; (8001454 <SetSysClockTo72+0xf8>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <SetSysClockTo72+0xf8>)
 80013de:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <SetSysClockTo72+0xf8>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <SetSysClockTo72+0xf8>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a1a      	ldr	r2, [pc, #104]	; (8001454 <SetSysClockTo72+0xf8>)
 80013ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ee:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <SetSysClockTo72+0xf8>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4a17      	ldr	r2, [pc, #92]	; (8001454 <SetSysClockTo72+0xf8>)
 80013f6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80013fa:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <SetSysClockTo72+0xf8>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a14      	ldr	r2, [pc, #80]	; (8001454 <SetSysClockTo72+0xf8>)
 8001402:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001406:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <SetSysClockTo72+0xf8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a11      	ldr	r2, [pc, #68]	; (8001454 <SetSysClockTo72+0xf8>)
 800140e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001412:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001414:	bf00      	nop
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <SetSysClockTo72+0xf8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f9      	beq.n	8001416 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <SetSysClockTo72+0xf8>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <SetSysClockTo72+0xf8>)
 8001428:	f023 0303 	bic.w	r3, r3, #3
 800142c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <SetSysClockTo72+0xf8>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <SetSysClockTo72+0xf8>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800143a:	bf00      	nop
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <SetSysClockTo72+0xf8>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b08      	cmp	r3, #8
 8001446:	d1f9      	bne.n	800143c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	40022000 	.word	0x40022000

0800145c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <NVIC_PriorityGroupConfig+0x20>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60d3      	str	r3, [r2, #12]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__errno>:
 8001480:	4b01      	ldr	r3, [pc, #4]	; (8001488 <__errno+0x8>)
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000004 	.word	0x20000004

0800148c <__libc_init_array>:
 800148c:	b570      	push	{r4, r5, r6, lr}
 800148e:	2600      	movs	r6, #0
 8001490:	4d0c      	ldr	r5, [pc, #48]	; (80014c4 <__libc_init_array+0x38>)
 8001492:	4c0d      	ldr	r4, [pc, #52]	; (80014c8 <__libc_init_array+0x3c>)
 8001494:	1b64      	subs	r4, r4, r5
 8001496:	10a4      	asrs	r4, r4, #2
 8001498:	42a6      	cmp	r6, r4
 800149a:	d109      	bne.n	80014b0 <__libc_init_array+0x24>
 800149c:	f000 ff82 	bl	80023a4 <_init>
 80014a0:	2600      	movs	r6, #0
 80014a2:	4d0a      	ldr	r5, [pc, #40]	; (80014cc <__libc_init_array+0x40>)
 80014a4:	4c0a      	ldr	r4, [pc, #40]	; (80014d0 <__libc_init_array+0x44>)
 80014a6:	1b64      	subs	r4, r4, r5
 80014a8:	10a4      	asrs	r4, r4, #2
 80014aa:	42a6      	cmp	r6, r4
 80014ac:	d105      	bne.n	80014ba <__libc_init_array+0x2e>
 80014ae:	bd70      	pop	{r4, r5, r6, pc}
 80014b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80014b4:	4798      	blx	r3
 80014b6:	3601      	adds	r6, #1
 80014b8:	e7ee      	b.n	8001498 <__libc_init_array+0xc>
 80014ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80014be:	4798      	blx	r3
 80014c0:	3601      	adds	r6, #1
 80014c2:	e7f2      	b.n	80014aa <__libc_init_array+0x1e>
 80014c4:	08002480 	.word	0x08002480
 80014c8:	08002480 	.word	0x08002480
 80014cc:	08002480 	.word	0x08002480
 80014d0:	08002484 	.word	0x08002484

080014d4 <memset>:
 80014d4:	4603      	mov	r3, r0
 80014d6:	4402      	add	r2, r0
 80014d8:	4293      	cmp	r3, r2
 80014da:	d100      	bne.n	80014de <memset+0xa>
 80014dc:	4770      	bx	lr
 80014de:	f803 1b01 	strb.w	r1, [r3], #1
 80014e2:	e7f9      	b.n	80014d8 <memset+0x4>

080014e4 <iprintf>:
 80014e4:	b40f      	push	{r0, r1, r2, r3}
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <iprintf+0x2c>)
 80014e8:	b513      	push	{r0, r1, r4, lr}
 80014ea:	681c      	ldr	r4, [r3, #0]
 80014ec:	b124      	cbz	r4, 80014f8 <iprintf+0x14>
 80014ee:	69a3      	ldr	r3, [r4, #24]
 80014f0:	b913      	cbnz	r3, 80014f8 <iprintf+0x14>
 80014f2:	4620      	mov	r0, r4
 80014f4:	f000 f866 	bl	80015c4 <__sinit>
 80014f8:	ab05      	add	r3, sp, #20
 80014fa:	4620      	mov	r0, r4
 80014fc:	9a04      	ldr	r2, [sp, #16]
 80014fe:	68a1      	ldr	r1, [r4, #8]
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	f000 f981 	bl	8001808 <_vfiprintf_r>
 8001506:	b002      	add	sp, #8
 8001508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800150c:	b004      	add	sp, #16
 800150e:	4770      	bx	lr
 8001510:	20000004 	.word	0x20000004

08001514 <std>:
 8001514:	2300      	movs	r3, #0
 8001516:	b510      	push	{r4, lr}
 8001518:	4604      	mov	r4, r0
 800151a:	e9c0 3300 	strd	r3, r3, [r0]
 800151e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001522:	6083      	str	r3, [r0, #8]
 8001524:	8181      	strh	r1, [r0, #12]
 8001526:	6643      	str	r3, [r0, #100]	; 0x64
 8001528:	81c2      	strh	r2, [r0, #14]
 800152a:	6183      	str	r3, [r0, #24]
 800152c:	4619      	mov	r1, r3
 800152e:	2208      	movs	r2, #8
 8001530:	305c      	adds	r0, #92	; 0x5c
 8001532:	f7ff ffcf 	bl	80014d4 <memset>
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <std+0x38>)
 8001538:	6224      	str	r4, [r4, #32]
 800153a:	6263      	str	r3, [r4, #36]	; 0x24
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <std+0x3c>)
 800153e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <std+0x40>)
 8001542:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <std+0x44>)
 8001546:	6323      	str	r3, [r4, #48]	; 0x30
 8001548:	bd10      	pop	{r4, pc}
 800154a:	bf00      	nop
 800154c:	08001db5 	.word	0x08001db5
 8001550:	08001dd7 	.word	0x08001dd7
 8001554:	08001e0f 	.word	0x08001e0f
 8001558:	08001e33 	.word	0x08001e33

0800155c <_cleanup_r>:
 800155c:	4901      	ldr	r1, [pc, #4]	; (8001564 <_cleanup_r+0x8>)
 800155e:	f000 b8af 	b.w	80016c0 <_fwalk_reent>
 8001562:	bf00      	nop
 8001564:	0800210d 	.word	0x0800210d

08001568 <__sfmoreglue>:
 8001568:	b570      	push	{r4, r5, r6, lr}
 800156a:	2568      	movs	r5, #104	; 0x68
 800156c:	1e4a      	subs	r2, r1, #1
 800156e:	4355      	muls	r5, r2
 8001570:	460e      	mov	r6, r1
 8001572:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001576:	f000 f8c5 	bl	8001704 <_malloc_r>
 800157a:	4604      	mov	r4, r0
 800157c:	b140      	cbz	r0, 8001590 <__sfmoreglue+0x28>
 800157e:	2100      	movs	r1, #0
 8001580:	e9c0 1600 	strd	r1, r6, [r0]
 8001584:	300c      	adds	r0, #12
 8001586:	60a0      	str	r0, [r4, #8]
 8001588:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800158c:	f7ff ffa2 	bl	80014d4 <memset>
 8001590:	4620      	mov	r0, r4
 8001592:	bd70      	pop	{r4, r5, r6, pc}

08001594 <__sfp_lock_acquire>:
 8001594:	4801      	ldr	r0, [pc, #4]	; (800159c <__sfp_lock_acquire+0x8>)
 8001596:	f000 b8b3 	b.w	8001700 <__retarget_lock_acquire_recursive>
 800159a:	bf00      	nop
 800159c:	200093d0 	.word	0x200093d0

080015a0 <__sfp_lock_release>:
 80015a0:	4801      	ldr	r0, [pc, #4]	; (80015a8 <__sfp_lock_release+0x8>)
 80015a2:	f000 b8ae 	b.w	8001702 <__retarget_lock_release_recursive>
 80015a6:	bf00      	nop
 80015a8:	200093d0 	.word	0x200093d0

080015ac <__sinit_lock_acquire>:
 80015ac:	4801      	ldr	r0, [pc, #4]	; (80015b4 <__sinit_lock_acquire+0x8>)
 80015ae:	f000 b8a7 	b.w	8001700 <__retarget_lock_acquire_recursive>
 80015b2:	bf00      	nop
 80015b4:	200093cb 	.word	0x200093cb

080015b8 <__sinit_lock_release>:
 80015b8:	4801      	ldr	r0, [pc, #4]	; (80015c0 <__sinit_lock_release+0x8>)
 80015ba:	f000 b8a2 	b.w	8001702 <__retarget_lock_release_recursive>
 80015be:	bf00      	nop
 80015c0:	200093cb 	.word	0x200093cb

080015c4 <__sinit>:
 80015c4:	b510      	push	{r4, lr}
 80015c6:	4604      	mov	r4, r0
 80015c8:	f7ff fff0 	bl	80015ac <__sinit_lock_acquire>
 80015cc:	69a3      	ldr	r3, [r4, #24]
 80015ce:	b11b      	cbz	r3, 80015d8 <__sinit+0x14>
 80015d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015d4:	f7ff bff0 	b.w	80015b8 <__sinit_lock_release>
 80015d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80015dc:	6523      	str	r3, [r4, #80]	; 0x50
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <__sinit+0x68>)
 80015e0:	4a13      	ldr	r2, [pc, #76]	; (8001630 <__sinit+0x6c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80015e6:	42a3      	cmp	r3, r4
 80015e8:	bf08      	it	eq
 80015ea:	2301      	moveq	r3, #1
 80015ec:	4620      	mov	r0, r4
 80015ee:	bf08      	it	eq
 80015f0:	61a3      	streq	r3, [r4, #24]
 80015f2:	f000 f81f 	bl	8001634 <__sfp>
 80015f6:	6060      	str	r0, [r4, #4]
 80015f8:	4620      	mov	r0, r4
 80015fa:	f000 f81b 	bl	8001634 <__sfp>
 80015fe:	60a0      	str	r0, [r4, #8]
 8001600:	4620      	mov	r0, r4
 8001602:	f000 f817 	bl	8001634 <__sfp>
 8001606:	2200      	movs	r2, #0
 8001608:	2104      	movs	r1, #4
 800160a:	60e0      	str	r0, [r4, #12]
 800160c:	6860      	ldr	r0, [r4, #4]
 800160e:	f7ff ff81 	bl	8001514 <std>
 8001612:	2201      	movs	r2, #1
 8001614:	2109      	movs	r1, #9
 8001616:	68a0      	ldr	r0, [r4, #8]
 8001618:	f7ff ff7c 	bl	8001514 <std>
 800161c:	2202      	movs	r2, #2
 800161e:	2112      	movs	r1, #18
 8001620:	68e0      	ldr	r0, [r4, #12]
 8001622:	f7ff ff77 	bl	8001514 <std>
 8001626:	2301      	movs	r3, #1
 8001628:	61a3      	str	r3, [r4, #24]
 800162a:	e7d1      	b.n	80015d0 <__sinit+0xc>
 800162c:	080023e8 	.word	0x080023e8
 8001630:	0800155d 	.word	0x0800155d

08001634 <__sfp>:
 8001634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001636:	4607      	mov	r7, r0
 8001638:	f7ff ffac 	bl	8001594 <__sfp_lock_acquire>
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <__sfp+0x84>)
 800163e:	681e      	ldr	r6, [r3, #0]
 8001640:	69b3      	ldr	r3, [r6, #24]
 8001642:	b913      	cbnz	r3, 800164a <__sfp+0x16>
 8001644:	4630      	mov	r0, r6
 8001646:	f7ff ffbd 	bl	80015c4 <__sinit>
 800164a:	3648      	adds	r6, #72	; 0x48
 800164c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001650:	3b01      	subs	r3, #1
 8001652:	d503      	bpl.n	800165c <__sfp+0x28>
 8001654:	6833      	ldr	r3, [r6, #0]
 8001656:	b30b      	cbz	r3, 800169c <__sfp+0x68>
 8001658:	6836      	ldr	r6, [r6, #0]
 800165a:	e7f7      	b.n	800164c <__sfp+0x18>
 800165c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001660:	b9d5      	cbnz	r5, 8001698 <__sfp+0x64>
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <__sfp+0x88>)
 8001664:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001668:	60e3      	str	r3, [r4, #12]
 800166a:	6665      	str	r5, [r4, #100]	; 0x64
 800166c:	f000 f847 	bl	80016fe <__retarget_lock_init_recursive>
 8001670:	f7ff ff96 	bl	80015a0 <__sfp_lock_release>
 8001674:	2208      	movs	r2, #8
 8001676:	4629      	mov	r1, r5
 8001678:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800167c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001680:	6025      	str	r5, [r4, #0]
 8001682:	61a5      	str	r5, [r4, #24]
 8001684:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001688:	f7ff ff24 	bl	80014d4 <memset>
 800168c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001690:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001694:	4620      	mov	r0, r4
 8001696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001698:	3468      	adds	r4, #104	; 0x68
 800169a:	e7d9      	b.n	8001650 <__sfp+0x1c>
 800169c:	2104      	movs	r1, #4
 800169e:	4638      	mov	r0, r7
 80016a0:	f7ff ff62 	bl	8001568 <__sfmoreglue>
 80016a4:	4604      	mov	r4, r0
 80016a6:	6030      	str	r0, [r6, #0]
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d1d5      	bne.n	8001658 <__sfp+0x24>
 80016ac:	f7ff ff78 	bl	80015a0 <__sfp_lock_release>
 80016b0:	230c      	movs	r3, #12
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	e7ee      	b.n	8001694 <__sfp+0x60>
 80016b6:	bf00      	nop
 80016b8:	080023e8 	.word	0x080023e8
 80016bc:	ffff0001 	.word	0xffff0001

080016c0 <_fwalk_reent>:
 80016c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016c4:	4606      	mov	r6, r0
 80016c6:	4688      	mov	r8, r1
 80016c8:	2700      	movs	r7, #0
 80016ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80016ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80016d2:	f1b9 0901 	subs.w	r9, r9, #1
 80016d6:	d505      	bpl.n	80016e4 <_fwalk_reent+0x24>
 80016d8:	6824      	ldr	r4, [r4, #0]
 80016da:	2c00      	cmp	r4, #0
 80016dc:	d1f7      	bne.n	80016ce <_fwalk_reent+0xe>
 80016de:	4638      	mov	r0, r7
 80016e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016e4:	89ab      	ldrh	r3, [r5, #12]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d907      	bls.n	80016fa <_fwalk_reent+0x3a>
 80016ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016ee:	3301      	adds	r3, #1
 80016f0:	d003      	beq.n	80016fa <_fwalk_reent+0x3a>
 80016f2:	4629      	mov	r1, r5
 80016f4:	4630      	mov	r0, r6
 80016f6:	47c0      	blx	r8
 80016f8:	4307      	orrs	r7, r0
 80016fa:	3568      	adds	r5, #104	; 0x68
 80016fc:	e7e9      	b.n	80016d2 <_fwalk_reent+0x12>

080016fe <__retarget_lock_init_recursive>:
 80016fe:	4770      	bx	lr

08001700 <__retarget_lock_acquire_recursive>:
 8001700:	4770      	bx	lr

08001702 <__retarget_lock_release_recursive>:
 8001702:	4770      	bx	lr

08001704 <_malloc_r>:
 8001704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001706:	1ccd      	adds	r5, r1, #3
 8001708:	f025 0503 	bic.w	r5, r5, #3
 800170c:	3508      	adds	r5, #8
 800170e:	2d0c      	cmp	r5, #12
 8001710:	bf38      	it	cc
 8001712:	250c      	movcc	r5, #12
 8001714:	2d00      	cmp	r5, #0
 8001716:	4606      	mov	r6, r0
 8001718:	db01      	blt.n	800171e <_malloc_r+0x1a>
 800171a:	42a9      	cmp	r1, r5
 800171c:	d903      	bls.n	8001726 <_malloc_r+0x22>
 800171e:	230c      	movs	r3, #12
 8001720:	6033      	str	r3, [r6, #0]
 8001722:	2000      	movs	r0, #0
 8001724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001726:	f000 fdb1 	bl	800228c <__malloc_lock>
 800172a:	4921      	ldr	r1, [pc, #132]	; (80017b0 <_malloc_r+0xac>)
 800172c:	680a      	ldr	r2, [r1, #0]
 800172e:	4614      	mov	r4, r2
 8001730:	b99c      	cbnz	r4, 800175a <_malloc_r+0x56>
 8001732:	4f20      	ldr	r7, [pc, #128]	; (80017b4 <_malloc_r+0xb0>)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b923      	cbnz	r3, 8001742 <_malloc_r+0x3e>
 8001738:	4621      	mov	r1, r4
 800173a:	4630      	mov	r0, r6
 800173c:	f000 fb2a 	bl	8001d94 <_sbrk_r>
 8001740:	6038      	str	r0, [r7, #0]
 8001742:	4629      	mov	r1, r5
 8001744:	4630      	mov	r0, r6
 8001746:	f000 fb25 	bl	8001d94 <_sbrk_r>
 800174a:	1c43      	adds	r3, r0, #1
 800174c:	d123      	bne.n	8001796 <_malloc_r+0x92>
 800174e:	230c      	movs	r3, #12
 8001750:	4630      	mov	r0, r6
 8001752:	6033      	str	r3, [r6, #0]
 8001754:	f000 fda0 	bl	8002298 <__malloc_unlock>
 8001758:	e7e3      	b.n	8001722 <_malloc_r+0x1e>
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	1b5b      	subs	r3, r3, r5
 800175e:	d417      	bmi.n	8001790 <_malloc_r+0x8c>
 8001760:	2b0b      	cmp	r3, #11
 8001762:	d903      	bls.n	800176c <_malloc_r+0x68>
 8001764:	6023      	str	r3, [r4, #0]
 8001766:	441c      	add	r4, r3
 8001768:	6025      	str	r5, [r4, #0]
 800176a:	e004      	b.n	8001776 <_malloc_r+0x72>
 800176c:	6863      	ldr	r3, [r4, #4]
 800176e:	42a2      	cmp	r2, r4
 8001770:	bf0c      	ite	eq
 8001772:	600b      	streq	r3, [r1, #0]
 8001774:	6053      	strne	r3, [r2, #4]
 8001776:	4630      	mov	r0, r6
 8001778:	f000 fd8e 	bl	8002298 <__malloc_unlock>
 800177c:	f104 000b 	add.w	r0, r4, #11
 8001780:	1d23      	adds	r3, r4, #4
 8001782:	f020 0007 	bic.w	r0, r0, #7
 8001786:	1ac2      	subs	r2, r0, r3
 8001788:	d0cc      	beq.n	8001724 <_malloc_r+0x20>
 800178a:	1a1b      	subs	r3, r3, r0
 800178c:	50a3      	str	r3, [r4, r2]
 800178e:	e7c9      	b.n	8001724 <_malloc_r+0x20>
 8001790:	4622      	mov	r2, r4
 8001792:	6864      	ldr	r4, [r4, #4]
 8001794:	e7cc      	b.n	8001730 <_malloc_r+0x2c>
 8001796:	1cc4      	adds	r4, r0, #3
 8001798:	f024 0403 	bic.w	r4, r4, #3
 800179c:	42a0      	cmp	r0, r4
 800179e:	d0e3      	beq.n	8001768 <_malloc_r+0x64>
 80017a0:	1a21      	subs	r1, r4, r0
 80017a2:	4630      	mov	r0, r6
 80017a4:	f000 faf6 	bl	8001d94 <_sbrk_r>
 80017a8:	3001      	adds	r0, #1
 80017aa:	d1dd      	bne.n	8001768 <_malloc_r+0x64>
 80017ac:	e7cf      	b.n	800174e <_malloc_r+0x4a>
 80017ae:	bf00      	nop
 80017b0:	200093c0 	.word	0x200093c0
 80017b4:	200093c4 	.word	0x200093c4

080017b8 <__sfputc_r>:
 80017b8:	6893      	ldr	r3, [r2, #8]
 80017ba:	b410      	push	{r4}
 80017bc:	3b01      	subs	r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	6093      	str	r3, [r2, #8]
 80017c2:	da07      	bge.n	80017d4 <__sfputc_r+0x1c>
 80017c4:	6994      	ldr	r4, [r2, #24]
 80017c6:	42a3      	cmp	r3, r4
 80017c8:	db01      	blt.n	80017ce <__sfputc_r+0x16>
 80017ca:	290a      	cmp	r1, #10
 80017cc:	d102      	bne.n	80017d4 <__sfputc_r+0x1c>
 80017ce:	bc10      	pop	{r4}
 80017d0:	f000 bb34 	b.w	8001e3c <__swbuf_r>
 80017d4:	6813      	ldr	r3, [r2, #0]
 80017d6:	1c58      	adds	r0, r3, #1
 80017d8:	6010      	str	r0, [r2, #0]
 80017da:	7019      	strb	r1, [r3, #0]
 80017dc:	4608      	mov	r0, r1
 80017de:	bc10      	pop	{r4}
 80017e0:	4770      	bx	lr

080017e2 <__sfputs_r>:
 80017e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e4:	4606      	mov	r6, r0
 80017e6:	460f      	mov	r7, r1
 80017e8:	4614      	mov	r4, r2
 80017ea:	18d5      	adds	r5, r2, r3
 80017ec:	42ac      	cmp	r4, r5
 80017ee:	d101      	bne.n	80017f4 <__sfputs_r+0x12>
 80017f0:	2000      	movs	r0, #0
 80017f2:	e007      	b.n	8001804 <__sfputs_r+0x22>
 80017f4:	463a      	mov	r2, r7
 80017f6:	4630      	mov	r0, r6
 80017f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017fc:	f7ff ffdc 	bl	80017b8 <__sfputc_r>
 8001800:	1c43      	adds	r3, r0, #1
 8001802:	d1f3      	bne.n	80017ec <__sfputs_r+0xa>
 8001804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001808 <_vfiprintf_r>:
 8001808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800180c:	460d      	mov	r5, r1
 800180e:	4614      	mov	r4, r2
 8001810:	4698      	mov	r8, r3
 8001812:	4606      	mov	r6, r0
 8001814:	b09d      	sub	sp, #116	; 0x74
 8001816:	b118      	cbz	r0, 8001820 <_vfiprintf_r+0x18>
 8001818:	6983      	ldr	r3, [r0, #24]
 800181a:	b90b      	cbnz	r3, 8001820 <_vfiprintf_r+0x18>
 800181c:	f7ff fed2 	bl	80015c4 <__sinit>
 8001820:	4b89      	ldr	r3, [pc, #548]	; (8001a48 <_vfiprintf_r+0x240>)
 8001822:	429d      	cmp	r5, r3
 8001824:	d11b      	bne.n	800185e <_vfiprintf_r+0x56>
 8001826:	6875      	ldr	r5, [r6, #4]
 8001828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800182a:	07d9      	lsls	r1, r3, #31
 800182c:	d405      	bmi.n	800183a <_vfiprintf_r+0x32>
 800182e:	89ab      	ldrh	r3, [r5, #12]
 8001830:	059a      	lsls	r2, r3, #22
 8001832:	d402      	bmi.n	800183a <_vfiprintf_r+0x32>
 8001834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001836:	f7ff ff63 	bl	8001700 <__retarget_lock_acquire_recursive>
 800183a:	89ab      	ldrh	r3, [r5, #12]
 800183c:	071b      	lsls	r3, r3, #28
 800183e:	d501      	bpl.n	8001844 <_vfiprintf_r+0x3c>
 8001840:	692b      	ldr	r3, [r5, #16]
 8001842:	b9eb      	cbnz	r3, 8001880 <_vfiprintf_r+0x78>
 8001844:	4629      	mov	r1, r5
 8001846:	4630      	mov	r0, r6
 8001848:	f000 fb5c 	bl	8001f04 <__swsetup_r>
 800184c:	b1c0      	cbz	r0, 8001880 <_vfiprintf_r+0x78>
 800184e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001850:	07dc      	lsls	r4, r3, #31
 8001852:	d50e      	bpl.n	8001872 <_vfiprintf_r+0x6a>
 8001854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001858:	b01d      	add	sp, #116	; 0x74
 800185a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800185e:	4b7b      	ldr	r3, [pc, #492]	; (8001a4c <_vfiprintf_r+0x244>)
 8001860:	429d      	cmp	r5, r3
 8001862:	d101      	bne.n	8001868 <_vfiprintf_r+0x60>
 8001864:	68b5      	ldr	r5, [r6, #8]
 8001866:	e7df      	b.n	8001828 <_vfiprintf_r+0x20>
 8001868:	4b79      	ldr	r3, [pc, #484]	; (8001a50 <_vfiprintf_r+0x248>)
 800186a:	429d      	cmp	r5, r3
 800186c:	bf08      	it	eq
 800186e:	68f5      	ldreq	r5, [r6, #12]
 8001870:	e7da      	b.n	8001828 <_vfiprintf_r+0x20>
 8001872:	89ab      	ldrh	r3, [r5, #12]
 8001874:	0598      	lsls	r0, r3, #22
 8001876:	d4ed      	bmi.n	8001854 <_vfiprintf_r+0x4c>
 8001878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800187a:	f7ff ff42 	bl	8001702 <__retarget_lock_release_recursive>
 800187e:	e7e9      	b.n	8001854 <_vfiprintf_r+0x4c>
 8001880:	2300      	movs	r3, #0
 8001882:	9309      	str	r3, [sp, #36]	; 0x24
 8001884:	2320      	movs	r3, #32
 8001886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800188a:	2330      	movs	r3, #48	; 0x30
 800188c:	f04f 0901 	mov.w	r9, #1
 8001890:	f8cd 800c 	str.w	r8, [sp, #12]
 8001894:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001a54 <_vfiprintf_r+0x24c>
 8001898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800189c:	4623      	mov	r3, r4
 800189e:	469a      	mov	sl, r3
 80018a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018a4:	b10a      	cbz	r2, 80018aa <_vfiprintf_r+0xa2>
 80018a6:	2a25      	cmp	r2, #37	; 0x25
 80018a8:	d1f9      	bne.n	800189e <_vfiprintf_r+0x96>
 80018aa:	ebba 0b04 	subs.w	fp, sl, r4
 80018ae:	d00b      	beq.n	80018c8 <_vfiprintf_r+0xc0>
 80018b0:	465b      	mov	r3, fp
 80018b2:	4622      	mov	r2, r4
 80018b4:	4629      	mov	r1, r5
 80018b6:	4630      	mov	r0, r6
 80018b8:	f7ff ff93 	bl	80017e2 <__sfputs_r>
 80018bc:	3001      	adds	r0, #1
 80018be:	f000 80aa 	beq.w	8001a16 <_vfiprintf_r+0x20e>
 80018c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018c4:	445a      	add	r2, fp
 80018c6:	9209      	str	r2, [sp, #36]	; 0x24
 80018c8:	f89a 3000 	ldrb.w	r3, [sl]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80a2 	beq.w	8001a16 <_vfiprintf_r+0x20e>
 80018d2:	2300      	movs	r3, #0
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018dc:	f10a 0a01 	add.w	sl, sl, #1
 80018e0:	9304      	str	r3, [sp, #16]
 80018e2:	9307      	str	r3, [sp, #28]
 80018e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018e8:	931a      	str	r3, [sp, #104]	; 0x68
 80018ea:	4654      	mov	r4, sl
 80018ec:	2205      	movs	r2, #5
 80018ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018f2:	4858      	ldr	r0, [pc, #352]	; (8001a54 <_vfiprintf_r+0x24c>)
 80018f4:	f000 fcbc 	bl	8002270 <memchr>
 80018f8:	9a04      	ldr	r2, [sp, #16]
 80018fa:	b9d8      	cbnz	r0, 8001934 <_vfiprintf_r+0x12c>
 80018fc:	06d1      	lsls	r1, r2, #27
 80018fe:	bf44      	itt	mi
 8001900:	2320      	movmi	r3, #32
 8001902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001906:	0713      	lsls	r3, r2, #28
 8001908:	bf44      	itt	mi
 800190a:	232b      	movmi	r3, #43	; 0x2b
 800190c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001910:	f89a 3000 	ldrb.w	r3, [sl]
 8001914:	2b2a      	cmp	r3, #42	; 0x2a
 8001916:	d015      	beq.n	8001944 <_vfiprintf_r+0x13c>
 8001918:	4654      	mov	r4, sl
 800191a:	2000      	movs	r0, #0
 800191c:	f04f 0c0a 	mov.w	ip, #10
 8001920:	9a07      	ldr	r2, [sp, #28]
 8001922:	4621      	mov	r1, r4
 8001924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001928:	3b30      	subs	r3, #48	; 0x30
 800192a:	2b09      	cmp	r3, #9
 800192c:	d94e      	bls.n	80019cc <_vfiprintf_r+0x1c4>
 800192e:	b1b0      	cbz	r0, 800195e <_vfiprintf_r+0x156>
 8001930:	9207      	str	r2, [sp, #28]
 8001932:	e014      	b.n	800195e <_vfiprintf_r+0x156>
 8001934:	eba0 0308 	sub.w	r3, r0, r8
 8001938:	fa09 f303 	lsl.w	r3, r9, r3
 800193c:	4313      	orrs	r3, r2
 800193e:	46a2      	mov	sl, r4
 8001940:	9304      	str	r3, [sp, #16]
 8001942:	e7d2      	b.n	80018ea <_vfiprintf_r+0xe2>
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	1d19      	adds	r1, r3, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	9103      	str	r1, [sp, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	bfbb      	ittet	lt
 8001950:	425b      	neglt	r3, r3
 8001952:	f042 0202 	orrlt.w	r2, r2, #2
 8001956:	9307      	strge	r3, [sp, #28]
 8001958:	9307      	strlt	r3, [sp, #28]
 800195a:	bfb8      	it	lt
 800195c:	9204      	strlt	r2, [sp, #16]
 800195e:	7823      	ldrb	r3, [r4, #0]
 8001960:	2b2e      	cmp	r3, #46	; 0x2e
 8001962:	d10c      	bne.n	800197e <_vfiprintf_r+0x176>
 8001964:	7863      	ldrb	r3, [r4, #1]
 8001966:	2b2a      	cmp	r3, #42	; 0x2a
 8001968:	d135      	bne.n	80019d6 <_vfiprintf_r+0x1ce>
 800196a:	9b03      	ldr	r3, [sp, #12]
 800196c:	3402      	adds	r4, #2
 800196e:	1d1a      	adds	r2, r3, #4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	9203      	str	r2, [sp, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	bfb8      	it	lt
 8001978:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800197c:	9305      	str	r3, [sp, #20]
 800197e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001a64 <_vfiprintf_r+0x25c>
 8001982:	2203      	movs	r2, #3
 8001984:	4650      	mov	r0, sl
 8001986:	7821      	ldrb	r1, [r4, #0]
 8001988:	f000 fc72 	bl	8002270 <memchr>
 800198c:	b140      	cbz	r0, 80019a0 <_vfiprintf_r+0x198>
 800198e:	2340      	movs	r3, #64	; 0x40
 8001990:	eba0 000a 	sub.w	r0, r0, sl
 8001994:	fa03 f000 	lsl.w	r0, r3, r0
 8001998:	9b04      	ldr	r3, [sp, #16]
 800199a:	3401      	adds	r4, #1
 800199c:	4303      	orrs	r3, r0
 800199e:	9304      	str	r3, [sp, #16]
 80019a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019a4:	2206      	movs	r2, #6
 80019a6:	482c      	ldr	r0, [pc, #176]	; (8001a58 <_vfiprintf_r+0x250>)
 80019a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019ac:	f000 fc60 	bl	8002270 <memchr>
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d03f      	beq.n	8001a34 <_vfiprintf_r+0x22c>
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <_vfiprintf_r+0x254>)
 80019b6:	bb1b      	cbnz	r3, 8001a00 <_vfiprintf_r+0x1f8>
 80019b8:	9b03      	ldr	r3, [sp, #12]
 80019ba:	3307      	adds	r3, #7
 80019bc:	f023 0307 	bic.w	r3, r3, #7
 80019c0:	3308      	adds	r3, #8
 80019c2:	9303      	str	r3, [sp, #12]
 80019c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019c6:	443b      	add	r3, r7
 80019c8:	9309      	str	r3, [sp, #36]	; 0x24
 80019ca:	e767      	b.n	800189c <_vfiprintf_r+0x94>
 80019cc:	460c      	mov	r4, r1
 80019ce:	2001      	movs	r0, #1
 80019d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80019d4:	e7a5      	b.n	8001922 <_vfiprintf_r+0x11a>
 80019d6:	2300      	movs	r3, #0
 80019d8:	f04f 0c0a 	mov.w	ip, #10
 80019dc:	4619      	mov	r1, r3
 80019de:	3401      	adds	r4, #1
 80019e0:	9305      	str	r3, [sp, #20]
 80019e2:	4620      	mov	r0, r4
 80019e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019e8:	3a30      	subs	r2, #48	; 0x30
 80019ea:	2a09      	cmp	r2, #9
 80019ec:	d903      	bls.n	80019f6 <_vfiprintf_r+0x1ee>
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0c5      	beq.n	800197e <_vfiprintf_r+0x176>
 80019f2:	9105      	str	r1, [sp, #20]
 80019f4:	e7c3      	b.n	800197e <_vfiprintf_r+0x176>
 80019f6:	4604      	mov	r4, r0
 80019f8:	2301      	movs	r3, #1
 80019fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80019fe:	e7f0      	b.n	80019e2 <_vfiprintf_r+0x1da>
 8001a00:	ab03      	add	r3, sp, #12
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	462a      	mov	r2, r5
 8001a06:	4630      	mov	r0, r6
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <_vfiprintf_r+0x258>)
 8001a0a:	a904      	add	r1, sp, #16
 8001a0c:	f3af 8000 	nop.w
 8001a10:	4607      	mov	r7, r0
 8001a12:	1c78      	adds	r0, r7, #1
 8001a14:	d1d6      	bne.n	80019c4 <_vfiprintf_r+0x1bc>
 8001a16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a18:	07d9      	lsls	r1, r3, #31
 8001a1a:	d405      	bmi.n	8001a28 <_vfiprintf_r+0x220>
 8001a1c:	89ab      	ldrh	r3, [r5, #12]
 8001a1e:	059a      	lsls	r2, r3, #22
 8001a20:	d402      	bmi.n	8001a28 <_vfiprintf_r+0x220>
 8001a22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a24:	f7ff fe6d 	bl	8001702 <__retarget_lock_release_recursive>
 8001a28:	89ab      	ldrh	r3, [r5, #12]
 8001a2a:	065b      	lsls	r3, r3, #25
 8001a2c:	f53f af12 	bmi.w	8001854 <_vfiprintf_r+0x4c>
 8001a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a32:	e711      	b.n	8001858 <_vfiprintf_r+0x50>
 8001a34:	ab03      	add	r3, sp, #12
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	462a      	mov	r2, r5
 8001a3a:	4630      	mov	r0, r6
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <_vfiprintf_r+0x258>)
 8001a3e:	a904      	add	r1, sp, #16
 8001a40:	f000 f882 	bl	8001b48 <_printf_i>
 8001a44:	e7e4      	b.n	8001a10 <_vfiprintf_r+0x208>
 8001a46:	bf00      	nop
 8001a48:	0800240c 	.word	0x0800240c
 8001a4c:	0800242c 	.word	0x0800242c
 8001a50:	080023ec 	.word	0x080023ec
 8001a54:	0800244c 	.word	0x0800244c
 8001a58:	08002456 	.word	0x08002456
 8001a5c:	00000000 	.word	0x00000000
 8001a60:	080017e3 	.word	0x080017e3
 8001a64:	08002452 	.word	0x08002452

08001a68 <_printf_common>:
 8001a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a6c:	4616      	mov	r6, r2
 8001a6e:	4699      	mov	r9, r3
 8001a70:	688a      	ldr	r2, [r1, #8]
 8001a72:	690b      	ldr	r3, [r1, #16]
 8001a74:	4607      	mov	r7, r0
 8001a76:	4293      	cmp	r3, r2
 8001a78:	bfb8      	it	lt
 8001a7a:	4613      	movlt	r3, r2
 8001a7c:	6033      	str	r3, [r6, #0]
 8001a7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a82:	460c      	mov	r4, r1
 8001a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a88:	b10a      	cbz	r2, 8001a8e <_printf_common+0x26>
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	6033      	str	r3, [r6, #0]
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	0699      	lsls	r1, r3, #26
 8001a92:	bf42      	ittt	mi
 8001a94:	6833      	ldrmi	r3, [r6, #0]
 8001a96:	3302      	addmi	r3, #2
 8001a98:	6033      	strmi	r3, [r6, #0]
 8001a9a:	6825      	ldr	r5, [r4, #0]
 8001a9c:	f015 0506 	ands.w	r5, r5, #6
 8001aa0:	d106      	bne.n	8001ab0 <_printf_common+0x48>
 8001aa2:	f104 0a19 	add.w	sl, r4, #25
 8001aa6:	68e3      	ldr	r3, [r4, #12]
 8001aa8:	6832      	ldr	r2, [r6, #0]
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	42ab      	cmp	r3, r5
 8001aae:	dc28      	bgt.n	8001b02 <_printf_common+0x9a>
 8001ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ab4:	1e13      	subs	r3, r2, #0
 8001ab6:	6822      	ldr	r2, [r4, #0]
 8001ab8:	bf18      	it	ne
 8001aba:	2301      	movne	r3, #1
 8001abc:	0692      	lsls	r2, r2, #26
 8001abe:	d42d      	bmi.n	8001b1c <_printf_common+0xb4>
 8001ac0:	4649      	mov	r1, r9
 8001ac2:	4638      	mov	r0, r7
 8001ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ac8:	47c0      	blx	r8
 8001aca:	3001      	adds	r0, #1
 8001acc:	d020      	beq.n	8001b10 <_printf_common+0xa8>
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	68e5      	ldr	r5, [r4, #12]
 8001ad2:	f003 0306 	and.w	r3, r3, #6
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf18      	it	ne
 8001ada:	2500      	movne	r5, #0
 8001adc:	6832      	ldr	r2, [r6, #0]
 8001ade:	f04f 0600 	mov.w	r6, #0
 8001ae2:	68a3      	ldr	r3, [r4, #8]
 8001ae4:	bf08      	it	eq
 8001ae6:	1aad      	subeq	r5, r5, r2
 8001ae8:	6922      	ldr	r2, [r4, #16]
 8001aea:	bf08      	it	eq
 8001aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001af0:	4293      	cmp	r3, r2
 8001af2:	bfc4      	itt	gt
 8001af4:	1a9b      	subgt	r3, r3, r2
 8001af6:	18ed      	addgt	r5, r5, r3
 8001af8:	341a      	adds	r4, #26
 8001afa:	42b5      	cmp	r5, r6
 8001afc:	d11a      	bne.n	8001b34 <_printf_common+0xcc>
 8001afe:	2000      	movs	r0, #0
 8001b00:	e008      	b.n	8001b14 <_printf_common+0xac>
 8001b02:	2301      	movs	r3, #1
 8001b04:	4652      	mov	r2, sl
 8001b06:	4649      	mov	r1, r9
 8001b08:	4638      	mov	r0, r7
 8001b0a:	47c0      	blx	r8
 8001b0c:	3001      	adds	r0, #1
 8001b0e:	d103      	bne.n	8001b18 <_printf_common+0xb0>
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b18:	3501      	adds	r5, #1
 8001b1a:	e7c4      	b.n	8001aa6 <_printf_common+0x3e>
 8001b1c:	2030      	movs	r0, #48	; 0x30
 8001b1e:	18e1      	adds	r1, r4, r3
 8001b20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b2a:	4422      	add	r2, r4
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b32:	e7c5      	b.n	8001ac0 <_printf_common+0x58>
 8001b34:	2301      	movs	r3, #1
 8001b36:	4622      	mov	r2, r4
 8001b38:	4649      	mov	r1, r9
 8001b3a:	4638      	mov	r0, r7
 8001b3c:	47c0      	blx	r8
 8001b3e:	3001      	adds	r0, #1
 8001b40:	d0e6      	beq.n	8001b10 <_printf_common+0xa8>
 8001b42:	3601      	adds	r6, #1
 8001b44:	e7d9      	b.n	8001afa <_printf_common+0x92>
	...

08001b48 <_printf_i>:
 8001b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	7e27      	ldrb	r7, [r4, #24]
 8001b50:	4691      	mov	r9, r2
 8001b52:	2f78      	cmp	r7, #120	; 0x78
 8001b54:	4680      	mov	r8, r0
 8001b56:	469a      	mov	sl, r3
 8001b58:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001b5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b5e:	d807      	bhi.n	8001b70 <_printf_i+0x28>
 8001b60:	2f62      	cmp	r7, #98	; 0x62
 8001b62:	d80a      	bhi.n	8001b7a <_printf_i+0x32>
 8001b64:	2f00      	cmp	r7, #0
 8001b66:	f000 80d9 	beq.w	8001d1c <_printf_i+0x1d4>
 8001b6a:	2f58      	cmp	r7, #88	; 0x58
 8001b6c:	f000 80a4 	beq.w	8001cb8 <_printf_i+0x170>
 8001b70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b78:	e03a      	b.n	8001bf0 <_printf_i+0xa8>
 8001b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b7e:	2b15      	cmp	r3, #21
 8001b80:	d8f6      	bhi.n	8001b70 <_printf_i+0x28>
 8001b82:	a001      	add	r0, pc, #4	; (adr r0, 8001b88 <_printf_i+0x40>)
 8001b84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001b88:	08001be1 	.word	0x08001be1
 8001b8c:	08001bf5 	.word	0x08001bf5
 8001b90:	08001b71 	.word	0x08001b71
 8001b94:	08001b71 	.word	0x08001b71
 8001b98:	08001b71 	.word	0x08001b71
 8001b9c:	08001b71 	.word	0x08001b71
 8001ba0:	08001bf5 	.word	0x08001bf5
 8001ba4:	08001b71 	.word	0x08001b71
 8001ba8:	08001b71 	.word	0x08001b71
 8001bac:	08001b71 	.word	0x08001b71
 8001bb0:	08001b71 	.word	0x08001b71
 8001bb4:	08001d03 	.word	0x08001d03
 8001bb8:	08001c25 	.word	0x08001c25
 8001bbc:	08001ce5 	.word	0x08001ce5
 8001bc0:	08001b71 	.word	0x08001b71
 8001bc4:	08001b71 	.word	0x08001b71
 8001bc8:	08001d25 	.word	0x08001d25
 8001bcc:	08001b71 	.word	0x08001b71
 8001bd0:	08001c25 	.word	0x08001c25
 8001bd4:	08001b71 	.word	0x08001b71
 8001bd8:	08001b71 	.word	0x08001b71
 8001bdc:	08001ced 	.word	0x08001ced
 8001be0:	680b      	ldr	r3, [r1, #0]
 8001be2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001be6:	1d1a      	adds	r2, r3, #4
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	600a      	str	r2, [r1, #0]
 8001bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0a4      	b.n	8001d3e <_printf_i+0x1f6>
 8001bf4:	6825      	ldr	r5, [r4, #0]
 8001bf6:	6808      	ldr	r0, [r1, #0]
 8001bf8:	062e      	lsls	r6, r5, #24
 8001bfa:	f100 0304 	add.w	r3, r0, #4
 8001bfe:	d50a      	bpl.n	8001c16 <_printf_i+0xce>
 8001c00:	6805      	ldr	r5, [r0, #0]
 8001c02:	600b      	str	r3, [r1, #0]
 8001c04:	2d00      	cmp	r5, #0
 8001c06:	da03      	bge.n	8001c10 <_printf_i+0xc8>
 8001c08:	232d      	movs	r3, #45	; 0x2d
 8001c0a:	426d      	negs	r5, r5
 8001c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c10:	230a      	movs	r3, #10
 8001c12:	485e      	ldr	r0, [pc, #376]	; (8001d8c <_printf_i+0x244>)
 8001c14:	e019      	b.n	8001c4a <_printf_i+0x102>
 8001c16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001c1a:	6805      	ldr	r5, [r0, #0]
 8001c1c:	600b      	str	r3, [r1, #0]
 8001c1e:	bf18      	it	ne
 8001c20:	b22d      	sxthne	r5, r5
 8001c22:	e7ef      	b.n	8001c04 <_printf_i+0xbc>
 8001c24:	680b      	ldr	r3, [r1, #0]
 8001c26:	6825      	ldr	r5, [r4, #0]
 8001c28:	1d18      	adds	r0, r3, #4
 8001c2a:	6008      	str	r0, [r1, #0]
 8001c2c:	0628      	lsls	r0, r5, #24
 8001c2e:	d501      	bpl.n	8001c34 <_printf_i+0xec>
 8001c30:	681d      	ldr	r5, [r3, #0]
 8001c32:	e002      	b.n	8001c3a <_printf_i+0xf2>
 8001c34:	0669      	lsls	r1, r5, #25
 8001c36:	d5fb      	bpl.n	8001c30 <_printf_i+0xe8>
 8001c38:	881d      	ldrh	r5, [r3, #0]
 8001c3a:	2f6f      	cmp	r7, #111	; 0x6f
 8001c3c:	bf0c      	ite	eq
 8001c3e:	2308      	moveq	r3, #8
 8001c40:	230a      	movne	r3, #10
 8001c42:	4852      	ldr	r0, [pc, #328]	; (8001d8c <_printf_i+0x244>)
 8001c44:	2100      	movs	r1, #0
 8001c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c4a:	6866      	ldr	r6, [r4, #4]
 8001c4c:	2e00      	cmp	r6, #0
 8001c4e:	bfa8      	it	ge
 8001c50:	6821      	ldrge	r1, [r4, #0]
 8001c52:	60a6      	str	r6, [r4, #8]
 8001c54:	bfa4      	itt	ge
 8001c56:	f021 0104 	bicge.w	r1, r1, #4
 8001c5a:	6021      	strge	r1, [r4, #0]
 8001c5c:	b90d      	cbnz	r5, 8001c62 <_printf_i+0x11a>
 8001c5e:	2e00      	cmp	r6, #0
 8001c60:	d04d      	beq.n	8001cfe <_printf_i+0x1b6>
 8001c62:	4616      	mov	r6, r2
 8001c64:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c68:	fb03 5711 	mls	r7, r3, r1, r5
 8001c6c:	5dc7      	ldrb	r7, [r0, r7]
 8001c6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c72:	462f      	mov	r7, r5
 8001c74:	42bb      	cmp	r3, r7
 8001c76:	460d      	mov	r5, r1
 8001c78:	d9f4      	bls.n	8001c64 <_printf_i+0x11c>
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d10b      	bne.n	8001c96 <_printf_i+0x14e>
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	07df      	lsls	r7, r3, #31
 8001c82:	d508      	bpl.n	8001c96 <_printf_i+0x14e>
 8001c84:	6923      	ldr	r3, [r4, #16]
 8001c86:	6861      	ldr	r1, [r4, #4]
 8001c88:	4299      	cmp	r1, r3
 8001c8a:	bfde      	ittt	le
 8001c8c:	2330      	movle	r3, #48	; 0x30
 8001c8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c92:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8001c96:	1b92      	subs	r2, r2, r6
 8001c98:	6122      	str	r2, [r4, #16]
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	4640      	mov	r0, r8
 8001ca0:	f8cd a000 	str.w	sl, [sp]
 8001ca4:	aa03      	add	r2, sp, #12
 8001ca6:	f7ff fedf 	bl	8001a68 <_printf_common>
 8001caa:	3001      	adds	r0, #1
 8001cac:	d14c      	bne.n	8001d48 <_printf_i+0x200>
 8001cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cb2:	b004      	add	sp, #16
 8001cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cb8:	4834      	ldr	r0, [pc, #208]	; (8001d8c <_printf_i+0x244>)
 8001cba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001cbe:	680e      	ldr	r6, [r1, #0]
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8001cc6:	061f      	lsls	r7, r3, #24
 8001cc8:	600e      	str	r6, [r1, #0]
 8001cca:	d514      	bpl.n	8001cf6 <_printf_i+0x1ae>
 8001ccc:	07d9      	lsls	r1, r3, #31
 8001cce:	bf44      	itt	mi
 8001cd0:	f043 0320 	orrmi.w	r3, r3, #32
 8001cd4:	6023      	strmi	r3, [r4, #0]
 8001cd6:	b91d      	cbnz	r5, 8001ce0 <_printf_i+0x198>
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	f023 0320 	bic.w	r3, r3, #32
 8001cde:	6023      	str	r3, [r4, #0]
 8001ce0:	2310      	movs	r3, #16
 8001ce2:	e7af      	b.n	8001c44 <_printf_i+0xfc>
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	f043 0320 	orr.w	r3, r3, #32
 8001cea:	6023      	str	r3, [r4, #0]
 8001cec:	2378      	movs	r3, #120	; 0x78
 8001cee:	4828      	ldr	r0, [pc, #160]	; (8001d90 <_printf_i+0x248>)
 8001cf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cf4:	e7e3      	b.n	8001cbe <_printf_i+0x176>
 8001cf6:	065e      	lsls	r6, r3, #25
 8001cf8:	bf48      	it	mi
 8001cfa:	b2ad      	uxthmi	r5, r5
 8001cfc:	e7e6      	b.n	8001ccc <_printf_i+0x184>
 8001cfe:	4616      	mov	r6, r2
 8001d00:	e7bb      	b.n	8001c7a <_printf_i+0x132>
 8001d02:	680b      	ldr	r3, [r1, #0]
 8001d04:	6826      	ldr	r6, [r4, #0]
 8001d06:	1d1d      	adds	r5, r3, #4
 8001d08:	6960      	ldr	r0, [r4, #20]
 8001d0a:	600d      	str	r5, [r1, #0]
 8001d0c:	0635      	lsls	r5, r6, #24
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	d501      	bpl.n	8001d16 <_printf_i+0x1ce>
 8001d12:	6018      	str	r0, [r3, #0]
 8001d14:	e002      	b.n	8001d1c <_printf_i+0x1d4>
 8001d16:	0671      	lsls	r1, r6, #25
 8001d18:	d5fb      	bpl.n	8001d12 <_printf_i+0x1ca>
 8001d1a:	8018      	strh	r0, [r3, #0]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	4616      	mov	r6, r2
 8001d20:	6123      	str	r3, [r4, #16]
 8001d22:	e7ba      	b.n	8001c9a <_printf_i+0x152>
 8001d24:	680b      	ldr	r3, [r1, #0]
 8001d26:	1d1a      	adds	r2, r3, #4
 8001d28:	600a      	str	r2, [r1, #0]
 8001d2a:	681e      	ldr	r6, [r3, #0]
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4630      	mov	r0, r6
 8001d30:	6862      	ldr	r2, [r4, #4]
 8001d32:	f000 fa9d 	bl	8002270 <memchr>
 8001d36:	b108      	cbz	r0, 8001d3c <_printf_i+0x1f4>
 8001d38:	1b80      	subs	r0, r0, r6
 8001d3a:	6060      	str	r0, [r4, #4]
 8001d3c:	6863      	ldr	r3, [r4, #4]
 8001d3e:	6123      	str	r3, [r4, #16]
 8001d40:	2300      	movs	r3, #0
 8001d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d46:	e7a8      	b.n	8001c9a <_printf_i+0x152>
 8001d48:	4632      	mov	r2, r6
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	4640      	mov	r0, r8
 8001d4e:	6923      	ldr	r3, [r4, #16]
 8001d50:	47d0      	blx	sl
 8001d52:	3001      	adds	r0, #1
 8001d54:	d0ab      	beq.n	8001cae <_printf_i+0x166>
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	079b      	lsls	r3, r3, #30
 8001d5a:	d413      	bmi.n	8001d84 <_printf_i+0x23c>
 8001d5c:	68e0      	ldr	r0, [r4, #12]
 8001d5e:	9b03      	ldr	r3, [sp, #12]
 8001d60:	4298      	cmp	r0, r3
 8001d62:	bfb8      	it	lt
 8001d64:	4618      	movlt	r0, r3
 8001d66:	e7a4      	b.n	8001cb2 <_printf_i+0x16a>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	4632      	mov	r2, r6
 8001d6c:	4649      	mov	r1, r9
 8001d6e:	4640      	mov	r0, r8
 8001d70:	47d0      	blx	sl
 8001d72:	3001      	adds	r0, #1
 8001d74:	d09b      	beq.n	8001cae <_printf_i+0x166>
 8001d76:	3501      	adds	r5, #1
 8001d78:	68e3      	ldr	r3, [r4, #12]
 8001d7a:	9903      	ldr	r1, [sp, #12]
 8001d7c:	1a5b      	subs	r3, r3, r1
 8001d7e:	42ab      	cmp	r3, r5
 8001d80:	dcf2      	bgt.n	8001d68 <_printf_i+0x220>
 8001d82:	e7eb      	b.n	8001d5c <_printf_i+0x214>
 8001d84:	2500      	movs	r5, #0
 8001d86:	f104 0619 	add.w	r6, r4, #25
 8001d8a:	e7f5      	b.n	8001d78 <_printf_i+0x230>
 8001d8c:	0800245d 	.word	0x0800245d
 8001d90:	0800246e 	.word	0x0800246e

08001d94 <_sbrk_r>:
 8001d94:	b538      	push	{r3, r4, r5, lr}
 8001d96:	2300      	movs	r3, #0
 8001d98:	4d05      	ldr	r5, [pc, #20]	; (8001db0 <_sbrk_r+0x1c>)
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	4608      	mov	r0, r1
 8001d9e:	602b      	str	r3, [r5, #0]
 8001da0:	f7ff fa3a 	bl	8001218 <_sbrk>
 8001da4:	1c43      	adds	r3, r0, #1
 8001da6:	d102      	bne.n	8001dae <_sbrk_r+0x1a>
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	b103      	cbz	r3, 8001dae <_sbrk_r+0x1a>
 8001dac:	6023      	str	r3, [r4, #0]
 8001dae:	bd38      	pop	{r3, r4, r5, pc}
 8001db0:	200093d4 	.word	0x200093d4

08001db4 <__sread>:
 8001db4:	b510      	push	{r4, lr}
 8001db6:	460c      	mov	r4, r1
 8001db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dbc:	f000 fabe 	bl	800233c <_read_r>
 8001dc0:	2800      	cmp	r0, #0
 8001dc2:	bfab      	itete	ge
 8001dc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8001dc8:	181b      	addge	r3, r3, r0
 8001dca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001dce:	bfac      	ite	ge
 8001dd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001dd2:	81a3      	strhlt	r3, [r4, #12]
 8001dd4:	bd10      	pop	{r4, pc}

08001dd6 <__swrite>:
 8001dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dda:	461f      	mov	r7, r3
 8001ddc:	898b      	ldrh	r3, [r1, #12]
 8001dde:	4605      	mov	r5, r0
 8001de0:	05db      	lsls	r3, r3, #23
 8001de2:	460c      	mov	r4, r1
 8001de4:	4616      	mov	r6, r2
 8001de6:	d505      	bpl.n	8001df4 <__swrite+0x1e>
 8001de8:	2302      	movs	r3, #2
 8001dea:	2200      	movs	r2, #0
 8001dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001df0:	f000 f9c8 	bl	8002184 <_lseek_r>
 8001df4:	89a3      	ldrh	r3, [r4, #12]
 8001df6:	4632      	mov	r2, r6
 8001df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dfc:	81a3      	strh	r3, [r4, #12]
 8001dfe:	4628      	mov	r0, r5
 8001e00:	463b      	mov	r3, r7
 8001e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0a:	f000 b869 	b.w	8001ee0 <_write_r>

08001e0e <__sseek>:
 8001e0e:	b510      	push	{r4, lr}
 8001e10:	460c      	mov	r4, r1
 8001e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e16:	f000 f9b5 	bl	8002184 <_lseek_r>
 8001e1a:	1c43      	adds	r3, r0, #1
 8001e1c:	89a3      	ldrh	r3, [r4, #12]
 8001e1e:	bf15      	itete	ne
 8001e20:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e2a:	81a3      	strheq	r3, [r4, #12]
 8001e2c:	bf18      	it	ne
 8001e2e:	81a3      	strhne	r3, [r4, #12]
 8001e30:	bd10      	pop	{r4, pc}

08001e32 <__sclose>:
 8001e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e36:	f000 b8d3 	b.w	8001fe0 <_close_r>
	...

08001e3c <__swbuf_r>:
 8001e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3e:	460e      	mov	r6, r1
 8001e40:	4614      	mov	r4, r2
 8001e42:	4605      	mov	r5, r0
 8001e44:	b118      	cbz	r0, 8001e4e <__swbuf_r+0x12>
 8001e46:	6983      	ldr	r3, [r0, #24]
 8001e48:	b90b      	cbnz	r3, 8001e4e <__swbuf_r+0x12>
 8001e4a:	f7ff fbbb 	bl	80015c4 <__sinit>
 8001e4e:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <__swbuf_r+0x98>)
 8001e50:	429c      	cmp	r4, r3
 8001e52:	d12b      	bne.n	8001eac <__swbuf_r+0x70>
 8001e54:	686c      	ldr	r4, [r5, #4]
 8001e56:	69a3      	ldr	r3, [r4, #24]
 8001e58:	60a3      	str	r3, [r4, #8]
 8001e5a:	89a3      	ldrh	r3, [r4, #12]
 8001e5c:	071a      	lsls	r2, r3, #28
 8001e5e:	d52f      	bpl.n	8001ec0 <__swbuf_r+0x84>
 8001e60:	6923      	ldr	r3, [r4, #16]
 8001e62:	b36b      	cbz	r3, 8001ec0 <__swbuf_r+0x84>
 8001e64:	6923      	ldr	r3, [r4, #16]
 8001e66:	6820      	ldr	r0, [r4, #0]
 8001e68:	b2f6      	uxtb	r6, r6
 8001e6a:	1ac0      	subs	r0, r0, r3
 8001e6c:	6963      	ldr	r3, [r4, #20]
 8001e6e:	4637      	mov	r7, r6
 8001e70:	4283      	cmp	r3, r0
 8001e72:	dc04      	bgt.n	8001e7e <__swbuf_r+0x42>
 8001e74:	4621      	mov	r1, r4
 8001e76:	4628      	mov	r0, r5
 8001e78:	f000 f948 	bl	800210c <_fflush_r>
 8001e7c:	bb30      	cbnz	r0, 8001ecc <__swbuf_r+0x90>
 8001e7e:	68a3      	ldr	r3, [r4, #8]
 8001e80:	3001      	adds	r0, #1
 8001e82:	3b01      	subs	r3, #1
 8001e84:	60a3      	str	r3, [r4, #8]
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	6022      	str	r2, [r4, #0]
 8001e8c:	701e      	strb	r6, [r3, #0]
 8001e8e:	6963      	ldr	r3, [r4, #20]
 8001e90:	4283      	cmp	r3, r0
 8001e92:	d004      	beq.n	8001e9e <__swbuf_r+0x62>
 8001e94:	89a3      	ldrh	r3, [r4, #12]
 8001e96:	07db      	lsls	r3, r3, #31
 8001e98:	d506      	bpl.n	8001ea8 <__swbuf_r+0x6c>
 8001e9a:	2e0a      	cmp	r6, #10
 8001e9c:	d104      	bne.n	8001ea8 <__swbuf_r+0x6c>
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	4628      	mov	r0, r5
 8001ea2:	f000 f933 	bl	800210c <_fflush_r>
 8001ea6:	b988      	cbnz	r0, 8001ecc <__swbuf_r+0x90>
 8001ea8:	4638      	mov	r0, r7
 8001eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eac:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <__swbuf_r+0x9c>)
 8001eae:	429c      	cmp	r4, r3
 8001eb0:	d101      	bne.n	8001eb6 <__swbuf_r+0x7a>
 8001eb2:	68ac      	ldr	r4, [r5, #8]
 8001eb4:	e7cf      	b.n	8001e56 <__swbuf_r+0x1a>
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <__swbuf_r+0xa0>)
 8001eb8:	429c      	cmp	r4, r3
 8001eba:	bf08      	it	eq
 8001ebc:	68ec      	ldreq	r4, [r5, #12]
 8001ebe:	e7ca      	b.n	8001e56 <__swbuf_r+0x1a>
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	f000 f81e 	bl	8001f04 <__swsetup_r>
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d0cb      	beq.n	8001e64 <__swbuf_r+0x28>
 8001ecc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001ed0:	e7ea      	b.n	8001ea8 <__swbuf_r+0x6c>
 8001ed2:	bf00      	nop
 8001ed4:	0800240c 	.word	0x0800240c
 8001ed8:	0800242c 	.word	0x0800242c
 8001edc:	080023ec 	.word	0x080023ec

08001ee0 <_write_r>:
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4d05      	ldr	r5, [pc, #20]	; (8001f00 <_write_r+0x20>)
 8001eec:	602a      	str	r2, [r5, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f7ff f945 	bl	800117e <_write>
 8001ef4:	1c43      	adds	r3, r0, #1
 8001ef6:	d102      	bne.n	8001efe <_write_r+0x1e>
 8001ef8:	682b      	ldr	r3, [r5, #0]
 8001efa:	b103      	cbz	r3, 8001efe <_write_r+0x1e>
 8001efc:	6023      	str	r3, [r4, #0]
 8001efe:	bd38      	pop	{r3, r4, r5, pc}
 8001f00:	200093d4 	.word	0x200093d4

08001f04 <__swsetup_r>:
 8001f04:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <__swsetup_r+0xcc>)
 8001f06:	b570      	push	{r4, r5, r6, lr}
 8001f08:	681d      	ldr	r5, [r3, #0]
 8001f0a:	4606      	mov	r6, r0
 8001f0c:	460c      	mov	r4, r1
 8001f0e:	b125      	cbz	r5, 8001f1a <__swsetup_r+0x16>
 8001f10:	69ab      	ldr	r3, [r5, #24]
 8001f12:	b913      	cbnz	r3, 8001f1a <__swsetup_r+0x16>
 8001f14:	4628      	mov	r0, r5
 8001f16:	f7ff fb55 	bl	80015c4 <__sinit>
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <__swsetup_r+0xd0>)
 8001f1c:	429c      	cmp	r4, r3
 8001f1e:	d10f      	bne.n	8001f40 <__swsetup_r+0x3c>
 8001f20:	686c      	ldr	r4, [r5, #4]
 8001f22:	89a3      	ldrh	r3, [r4, #12]
 8001f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f28:	0719      	lsls	r1, r3, #28
 8001f2a:	d42c      	bmi.n	8001f86 <__swsetup_r+0x82>
 8001f2c:	06dd      	lsls	r5, r3, #27
 8001f2e:	d411      	bmi.n	8001f54 <__swsetup_r+0x50>
 8001f30:	2309      	movs	r3, #9
 8001f32:	6033      	str	r3, [r6, #0]
 8001f34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f3c:	81a3      	strh	r3, [r4, #12]
 8001f3e:	e03e      	b.n	8001fbe <__swsetup_r+0xba>
 8001f40:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <__swsetup_r+0xd4>)
 8001f42:	429c      	cmp	r4, r3
 8001f44:	d101      	bne.n	8001f4a <__swsetup_r+0x46>
 8001f46:	68ac      	ldr	r4, [r5, #8]
 8001f48:	e7eb      	b.n	8001f22 <__swsetup_r+0x1e>
 8001f4a:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <__swsetup_r+0xd8>)
 8001f4c:	429c      	cmp	r4, r3
 8001f4e:	bf08      	it	eq
 8001f50:	68ec      	ldreq	r4, [r5, #12]
 8001f52:	e7e6      	b.n	8001f22 <__swsetup_r+0x1e>
 8001f54:	0758      	lsls	r0, r3, #29
 8001f56:	d512      	bpl.n	8001f7e <__swsetup_r+0x7a>
 8001f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f5a:	b141      	cbz	r1, 8001f6e <__swsetup_r+0x6a>
 8001f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f60:	4299      	cmp	r1, r3
 8001f62:	d002      	beq.n	8001f6a <__swsetup_r+0x66>
 8001f64:	4630      	mov	r0, r6
 8001f66:	f000 f99d 	bl	80022a4 <_free_r>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	6363      	str	r3, [r4, #52]	; 0x34
 8001f6e:	89a3      	ldrh	r3, [r4, #12]
 8001f70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f74:	81a3      	strh	r3, [r4, #12]
 8001f76:	2300      	movs	r3, #0
 8001f78:	6063      	str	r3, [r4, #4]
 8001f7a:	6923      	ldr	r3, [r4, #16]
 8001f7c:	6023      	str	r3, [r4, #0]
 8001f7e:	89a3      	ldrh	r3, [r4, #12]
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	81a3      	strh	r3, [r4, #12]
 8001f86:	6923      	ldr	r3, [r4, #16]
 8001f88:	b94b      	cbnz	r3, 8001f9e <__swsetup_r+0x9a>
 8001f8a:	89a3      	ldrh	r3, [r4, #12]
 8001f8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f94:	d003      	beq.n	8001f9e <__swsetup_r+0x9a>
 8001f96:	4621      	mov	r1, r4
 8001f98:	4630      	mov	r0, r6
 8001f9a:	f000 f929 	bl	80021f0 <__smakebuf_r>
 8001f9e:	89a0      	ldrh	r0, [r4, #12]
 8001fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001fa4:	f010 0301 	ands.w	r3, r0, #1
 8001fa8:	d00a      	beq.n	8001fc0 <__swsetup_r+0xbc>
 8001faa:	2300      	movs	r3, #0
 8001fac:	60a3      	str	r3, [r4, #8]
 8001fae:	6963      	ldr	r3, [r4, #20]
 8001fb0:	425b      	negs	r3, r3
 8001fb2:	61a3      	str	r3, [r4, #24]
 8001fb4:	6923      	ldr	r3, [r4, #16]
 8001fb6:	b943      	cbnz	r3, 8001fca <__swsetup_r+0xc6>
 8001fb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001fbc:	d1ba      	bne.n	8001f34 <__swsetup_r+0x30>
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}
 8001fc0:	0781      	lsls	r1, r0, #30
 8001fc2:	bf58      	it	pl
 8001fc4:	6963      	ldrpl	r3, [r4, #20]
 8001fc6:	60a3      	str	r3, [r4, #8]
 8001fc8:	e7f4      	b.n	8001fb4 <__swsetup_r+0xb0>
 8001fca:	2000      	movs	r0, #0
 8001fcc:	e7f7      	b.n	8001fbe <__swsetup_r+0xba>
 8001fce:	bf00      	nop
 8001fd0:	20000004 	.word	0x20000004
 8001fd4:	0800240c 	.word	0x0800240c
 8001fd8:	0800242c 	.word	0x0800242c
 8001fdc:	080023ec 	.word	0x080023ec

08001fe0 <_close_r>:
 8001fe0:	b538      	push	{r3, r4, r5, lr}
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	4d05      	ldr	r5, [pc, #20]	; (8001ffc <_close_r+0x1c>)
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	4608      	mov	r0, r1
 8001fea:	602b      	str	r3, [r5, #0]
 8001fec:	f7ff f8e3 	bl	80011b6 <_close>
 8001ff0:	1c43      	adds	r3, r0, #1
 8001ff2:	d102      	bne.n	8001ffa <_close_r+0x1a>
 8001ff4:	682b      	ldr	r3, [r5, #0]
 8001ff6:	b103      	cbz	r3, 8001ffa <_close_r+0x1a>
 8001ff8:	6023      	str	r3, [r4, #0]
 8001ffa:	bd38      	pop	{r3, r4, r5, pc}
 8001ffc:	200093d4 	.word	0x200093d4

08002000 <__sflush_r>:
 8002000:	898a      	ldrh	r2, [r1, #12]
 8002002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002006:	4605      	mov	r5, r0
 8002008:	0710      	lsls	r0, r2, #28
 800200a:	460c      	mov	r4, r1
 800200c:	d458      	bmi.n	80020c0 <__sflush_r+0xc0>
 800200e:	684b      	ldr	r3, [r1, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	dc05      	bgt.n	8002020 <__sflush_r+0x20>
 8002014:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	dc02      	bgt.n	8002020 <__sflush_r+0x20>
 800201a:	2000      	movs	r0, #0
 800201c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002022:	2e00      	cmp	r6, #0
 8002024:	d0f9      	beq.n	800201a <__sflush_r+0x1a>
 8002026:	2300      	movs	r3, #0
 8002028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800202c:	682f      	ldr	r7, [r5, #0]
 800202e:	602b      	str	r3, [r5, #0]
 8002030:	d032      	beq.n	8002098 <__sflush_r+0x98>
 8002032:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002034:	89a3      	ldrh	r3, [r4, #12]
 8002036:	075a      	lsls	r2, r3, #29
 8002038:	d505      	bpl.n	8002046 <__sflush_r+0x46>
 800203a:	6863      	ldr	r3, [r4, #4]
 800203c:	1ac0      	subs	r0, r0, r3
 800203e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002040:	b10b      	cbz	r3, 8002046 <__sflush_r+0x46>
 8002042:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002044:	1ac0      	subs	r0, r0, r3
 8002046:	2300      	movs	r3, #0
 8002048:	4602      	mov	r2, r0
 800204a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800204c:	4628      	mov	r0, r5
 800204e:	6a21      	ldr	r1, [r4, #32]
 8002050:	47b0      	blx	r6
 8002052:	1c43      	adds	r3, r0, #1
 8002054:	89a3      	ldrh	r3, [r4, #12]
 8002056:	d106      	bne.n	8002066 <__sflush_r+0x66>
 8002058:	6829      	ldr	r1, [r5, #0]
 800205a:	291d      	cmp	r1, #29
 800205c:	d82c      	bhi.n	80020b8 <__sflush_r+0xb8>
 800205e:	4a2a      	ldr	r2, [pc, #168]	; (8002108 <__sflush_r+0x108>)
 8002060:	40ca      	lsrs	r2, r1
 8002062:	07d6      	lsls	r6, r2, #31
 8002064:	d528      	bpl.n	80020b8 <__sflush_r+0xb8>
 8002066:	2200      	movs	r2, #0
 8002068:	6062      	str	r2, [r4, #4]
 800206a:	6922      	ldr	r2, [r4, #16]
 800206c:	04d9      	lsls	r1, r3, #19
 800206e:	6022      	str	r2, [r4, #0]
 8002070:	d504      	bpl.n	800207c <__sflush_r+0x7c>
 8002072:	1c42      	adds	r2, r0, #1
 8002074:	d101      	bne.n	800207a <__sflush_r+0x7a>
 8002076:	682b      	ldr	r3, [r5, #0]
 8002078:	b903      	cbnz	r3, 800207c <__sflush_r+0x7c>
 800207a:	6560      	str	r0, [r4, #84]	; 0x54
 800207c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800207e:	602f      	str	r7, [r5, #0]
 8002080:	2900      	cmp	r1, #0
 8002082:	d0ca      	beq.n	800201a <__sflush_r+0x1a>
 8002084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002088:	4299      	cmp	r1, r3
 800208a:	d002      	beq.n	8002092 <__sflush_r+0x92>
 800208c:	4628      	mov	r0, r5
 800208e:	f000 f909 	bl	80022a4 <_free_r>
 8002092:	2000      	movs	r0, #0
 8002094:	6360      	str	r0, [r4, #52]	; 0x34
 8002096:	e7c1      	b.n	800201c <__sflush_r+0x1c>
 8002098:	6a21      	ldr	r1, [r4, #32]
 800209a:	2301      	movs	r3, #1
 800209c:	4628      	mov	r0, r5
 800209e:	47b0      	blx	r6
 80020a0:	1c41      	adds	r1, r0, #1
 80020a2:	d1c7      	bne.n	8002034 <__sflush_r+0x34>
 80020a4:	682b      	ldr	r3, [r5, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0c4      	beq.n	8002034 <__sflush_r+0x34>
 80020aa:	2b1d      	cmp	r3, #29
 80020ac:	d001      	beq.n	80020b2 <__sflush_r+0xb2>
 80020ae:	2b16      	cmp	r3, #22
 80020b0:	d101      	bne.n	80020b6 <__sflush_r+0xb6>
 80020b2:	602f      	str	r7, [r5, #0]
 80020b4:	e7b1      	b.n	800201a <__sflush_r+0x1a>
 80020b6:	89a3      	ldrh	r3, [r4, #12]
 80020b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020bc:	81a3      	strh	r3, [r4, #12]
 80020be:	e7ad      	b.n	800201c <__sflush_r+0x1c>
 80020c0:	690f      	ldr	r7, [r1, #16]
 80020c2:	2f00      	cmp	r7, #0
 80020c4:	d0a9      	beq.n	800201a <__sflush_r+0x1a>
 80020c6:	0793      	lsls	r3, r2, #30
 80020c8:	bf18      	it	ne
 80020ca:	2300      	movne	r3, #0
 80020cc:	680e      	ldr	r6, [r1, #0]
 80020ce:	bf08      	it	eq
 80020d0:	694b      	ldreq	r3, [r1, #20]
 80020d2:	eba6 0807 	sub.w	r8, r6, r7
 80020d6:	600f      	str	r7, [r1, #0]
 80020d8:	608b      	str	r3, [r1, #8]
 80020da:	f1b8 0f00 	cmp.w	r8, #0
 80020de:	dd9c      	ble.n	800201a <__sflush_r+0x1a>
 80020e0:	4643      	mov	r3, r8
 80020e2:	463a      	mov	r2, r7
 80020e4:	4628      	mov	r0, r5
 80020e6:	6a21      	ldr	r1, [r4, #32]
 80020e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80020ea:	47b0      	blx	r6
 80020ec:	2800      	cmp	r0, #0
 80020ee:	dc06      	bgt.n	80020fe <__sflush_r+0xfe>
 80020f0:	89a3      	ldrh	r3, [r4, #12]
 80020f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020fa:	81a3      	strh	r3, [r4, #12]
 80020fc:	e78e      	b.n	800201c <__sflush_r+0x1c>
 80020fe:	4407      	add	r7, r0
 8002100:	eba8 0800 	sub.w	r8, r8, r0
 8002104:	e7e9      	b.n	80020da <__sflush_r+0xda>
 8002106:	bf00      	nop
 8002108:	20400001 	.word	0x20400001

0800210c <_fflush_r>:
 800210c:	b538      	push	{r3, r4, r5, lr}
 800210e:	690b      	ldr	r3, [r1, #16]
 8002110:	4605      	mov	r5, r0
 8002112:	460c      	mov	r4, r1
 8002114:	b913      	cbnz	r3, 800211c <_fflush_r+0x10>
 8002116:	2500      	movs	r5, #0
 8002118:	4628      	mov	r0, r5
 800211a:	bd38      	pop	{r3, r4, r5, pc}
 800211c:	b118      	cbz	r0, 8002126 <_fflush_r+0x1a>
 800211e:	6983      	ldr	r3, [r0, #24]
 8002120:	b90b      	cbnz	r3, 8002126 <_fflush_r+0x1a>
 8002122:	f7ff fa4f 	bl	80015c4 <__sinit>
 8002126:	4b14      	ldr	r3, [pc, #80]	; (8002178 <_fflush_r+0x6c>)
 8002128:	429c      	cmp	r4, r3
 800212a:	d11b      	bne.n	8002164 <_fflush_r+0x58>
 800212c:	686c      	ldr	r4, [r5, #4]
 800212e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0ef      	beq.n	8002116 <_fflush_r+0xa>
 8002136:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002138:	07d0      	lsls	r0, r2, #31
 800213a:	d404      	bmi.n	8002146 <_fflush_r+0x3a>
 800213c:	0599      	lsls	r1, r3, #22
 800213e:	d402      	bmi.n	8002146 <_fflush_r+0x3a>
 8002140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002142:	f7ff fadd 	bl	8001700 <__retarget_lock_acquire_recursive>
 8002146:	4628      	mov	r0, r5
 8002148:	4621      	mov	r1, r4
 800214a:	f7ff ff59 	bl	8002000 <__sflush_r>
 800214e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002150:	4605      	mov	r5, r0
 8002152:	07da      	lsls	r2, r3, #31
 8002154:	d4e0      	bmi.n	8002118 <_fflush_r+0xc>
 8002156:	89a3      	ldrh	r3, [r4, #12]
 8002158:	059b      	lsls	r3, r3, #22
 800215a:	d4dd      	bmi.n	8002118 <_fflush_r+0xc>
 800215c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800215e:	f7ff fad0 	bl	8001702 <__retarget_lock_release_recursive>
 8002162:	e7d9      	b.n	8002118 <_fflush_r+0xc>
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <_fflush_r+0x70>)
 8002166:	429c      	cmp	r4, r3
 8002168:	d101      	bne.n	800216e <_fflush_r+0x62>
 800216a:	68ac      	ldr	r4, [r5, #8]
 800216c:	e7df      	b.n	800212e <_fflush_r+0x22>
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <_fflush_r+0x74>)
 8002170:	429c      	cmp	r4, r3
 8002172:	bf08      	it	eq
 8002174:	68ec      	ldreq	r4, [r5, #12]
 8002176:	e7da      	b.n	800212e <_fflush_r+0x22>
 8002178:	0800240c 	.word	0x0800240c
 800217c:	0800242c 	.word	0x0800242c
 8002180:	080023ec 	.word	0x080023ec

08002184 <_lseek_r>:
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	4604      	mov	r4, r0
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	2200      	movs	r2, #0
 800218e:	4d05      	ldr	r5, [pc, #20]	; (80021a4 <_lseek_r+0x20>)
 8002190:	602a      	str	r2, [r5, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	f7ff f833 	bl	80011fe <_lseek>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d102      	bne.n	80021a2 <_lseek_r+0x1e>
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	b103      	cbz	r3, 80021a2 <_lseek_r+0x1e>
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	200093d4 	.word	0x200093d4

080021a8 <__swhatbuf_r>:
 80021a8:	b570      	push	{r4, r5, r6, lr}
 80021aa:	460e      	mov	r6, r1
 80021ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021b0:	4614      	mov	r4, r2
 80021b2:	2900      	cmp	r1, #0
 80021b4:	461d      	mov	r5, r3
 80021b6:	b096      	sub	sp, #88	; 0x58
 80021b8:	da07      	bge.n	80021ca <__swhatbuf_r+0x22>
 80021ba:	2300      	movs	r3, #0
 80021bc:	602b      	str	r3, [r5, #0]
 80021be:	89b3      	ldrh	r3, [r6, #12]
 80021c0:	061a      	lsls	r2, r3, #24
 80021c2:	d410      	bmi.n	80021e6 <__swhatbuf_r+0x3e>
 80021c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c8:	e00e      	b.n	80021e8 <__swhatbuf_r+0x40>
 80021ca:	466a      	mov	r2, sp
 80021cc:	f000 f8c8 	bl	8002360 <_fstat_r>
 80021d0:	2800      	cmp	r0, #0
 80021d2:	dbf2      	blt.n	80021ba <__swhatbuf_r+0x12>
 80021d4:	9a01      	ldr	r2, [sp, #4]
 80021d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80021da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80021de:	425a      	negs	r2, r3
 80021e0:	415a      	adcs	r2, r3
 80021e2:	602a      	str	r2, [r5, #0]
 80021e4:	e7ee      	b.n	80021c4 <__swhatbuf_r+0x1c>
 80021e6:	2340      	movs	r3, #64	; 0x40
 80021e8:	2000      	movs	r0, #0
 80021ea:	6023      	str	r3, [r4, #0]
 80021ec:	b016      	add	sp, #88	; 0x58
 80021ee:	bd70      	pop	{r4, r5, r6, pc}

080021f0 <__smakebuf_r>:
 80021f0:	898b      	ldrh	r3, [r1, #12]
 80021f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021f4:	079d      	lsls	r5, r3, #30
 80021f6:	4606      	mov	r6, r0
 80021f8:	460c      	mov	r4, r1
 80021fa:	d507      	bpl.n	800220c <__smakebuf_r+0x1c>
 80021fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002200:	6023      	str	r3, [r4, #0]
 8002202:	6123      	str	r3, [r4, #16]
 8002204:	2301      	movs	r3, #1
 8002206:	6163      	str	r3, [r4, #20]
 8002208:	b002      	add	sp, #8
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	466a      	mov	r2, sp
 800220e:	ab01      	add	r3, sp, #4
 8002210:	f7ff ffca 	bl	80021a8 <__swhatbuf_r>
 8002214:	9900      	ldr	r1, [sp, #0]
 8002216:	4605      	mov	r5, r0
 8002218:	4630      	mov	r0, r6
 800221a:	f7ff fa73 	bl	8001704 <_malloc_r>
 800221e:	b948      	cbnz	r0, 8002234 <__smakebuf_r+0x44>
 8002220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002224:	059a      	lsls	r2, r3, #22
 8002226:	d4ef      	bmi.n	8002208 <__smakebuf_r+0x18>
 8002228:	f023 0303 	bic.w	r3, r3, #3
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	81a3      	strh	r3, [r4, #12]
 8002232:	e7e3      	b.n	80021fc <__smakebuf_r+0xc>
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <__smakebuf_r+0x7c>)
 8002236:	62b3      	str	r3, [r6, #40]	; 0x28
 8002238:	89a3      	ldrh	r3, [r4, #12]
 800223a:	6020      	str	r0, [r4, #0]
 800223c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002240:	81a3      	strh	r3, [r4, #12]
 8002242:	9b00      	ldr	r3, [sp, #0]
 8002244:	6120      	str	r0, [r4, #16]
 8002246:	6163      	str	r3, [r4, #20]
 8002248:	9b01      	ldr	r3, [sp, #4]
 800224a:	b15b      	cbz	r3, 8002264 <__smakebuf_r+0x74>
 800224c:	4630      	mov	r0, r6
 800224e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002252:	f000 f897 	bl	8002384 <_isatty_r>
 8002256:	b128      	cbz	r0, 8002264 <__smakebuf_r+0x74>
 8002258:	89a3      	ldrh	r3, [r4, #12]
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	81a3      	strh	r3, [r4, #12]
 8002264:	89a0      	ldrh	r0, [r4, #12]
 8002266:	4305      	orrs	r5, r0
 8002268:	81a5      	strh	r5, [r4, #12]
 800226a:	e7cd      	b.n	8002208 <__smakebuf_r+0x18>
 800226c:	0800155d 	.word	0x0800155d

08002270 <memchr>:
 8002270:	4603      	mov	r3, r0
 8002272:	b510      	push	{r4, lr}
 8002274:	b2c9      	uxtb	r1, r1
 8002276:	4402      	add	r2, r0
 8002278:	4293      	cmp	r3, r2
 800227a:	4618      	mov	r0, r3
 800227c:	d101      	bne.n	8002282 <memchr+0x12>
 800227e:	2000      	movs	r0, #0
 8002280:	e003      	b.n	800228a <memchr+0x1a>
 8002282:	7804      	ldrb	r4, [r0, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	428c      	cmp	r4, r1
 8002288:	d1f6      	bne.n	8002278 <memchr+0x8>
 800228a:	bd10      	pop	{r4, pc}

0800228c <__malloc_lock>:
 800228c:	4801      	ldr	r0, [pc, #4]	; (8002294 <__malloc_lock+0x8>)
 800228e:	f7ff ba37 	b.w	8001700 <__retarget_lock_acquire_recursive>
 8002292:	bf00      	nop
 8002294:	200093cc 	.word	0x200093cc

08002298 <__malloc_unlock>:
 8002298:	4801      	ldr	r0, [pc, #4]	; (80022a0 <__malloc_unlock+0x8>)
 800229a:	f7ff ba32 	b.w	8001702 <__retarget_lock_release_recursive>
 800229e:	bf00      	nop
 80022a0:	200093cc 	.word	0x200093cc

080022a4 <_free_r>:
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	4605      	mov	r5, r0
 80022a8:	2900      	cmp	r1, #0
 80022aa:	d043      	beq.n	8002334 <_free_r+0x90>
 80022ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022b0:	1f0c      	subs	r4, r1, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bfb8      	it	lt
 80022b6:	18e4      	addlt	r4, r4, r3
 80022b8:	f7ff ffe8 	bl	800228c <__malloc_lock>
 80022bc:	4a1e      	ldr	r2, [pc, #120]	; (8002338 <_free_r+0x94>)
 80022be:	6813      	ldr	r3, [r2, #0]
 80022c0:	4610      	mov	r0, r2
 80022c2:	b933      	cbnz	r3, 80022d2 <_free_r+0x2e>
 80022c4:	6063      	str	r3, [r4, #4]
 80022c6:	6014      	str	r4, [r2, #0]
 80022c8:	4628      	mov	r0, r5
 80022ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022ce:	f7ff bfe3 	b.w	8002298 <__malloc_unlock>
 80022d2:	42a3      	cmp	r3, r4
 80022d4:	d90a      	bls.n	80022ec <_free_r+0x48>
 80022d6:	6821      	ldr	r1, [r4, #0]
 80022d8:	1862      	adds	r2, r4, r1
 80022da:	4293      	cmp	r3, r2
 80022dc:	bf01      	itttt	eq
 80022de:	681a      	ldreq	r2, [r3, #0]
 80022e0:	685b      	ldreq	r3, [r3, #4]
 80022e2:	1852      	addeq	r2, r2, r1
 80022e4:	6022      	streq	r2, [r4, #0]
 80022e6:	6063      	str	r3, [r4, #4]
 80022e8:	6004      	str	r4, [r0, #0]
 80022ea:	e7ed      	b.n	80022c8 <_free_r+0x24>
 80022ec:	461a      	mov	r2, r3
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	b10b      	cbz	r3, 80022f6 <_free_r+0x52>
 80022f2:	42a3      	cmp	r3, r4
 80022f4:	d9fa      	bls.n	80022ec <_free_r+0x48>
 80022f6:	6811      	ldr	r1, [r2, #0]
 80022f8:	1850      	adds	r0, r2, r1
 80022fa:	42a0      	cmp	r0, r4
 80022fc:	d10b      	bne.n	8002316 <_free_r+0x72>
 80022fe:	6820      	ldr	r0, [r4, #0]
 8002300:	4401      	add	r1, r0
 8002302:	1850      	adds	r0, r2, r1
 8002304:	4283      	cmp	r3, r0
 8002306:	6011      	str	r1, [r2, #0]
 8002308:	d1de      	bne.n	80022c8 <_free_r+0x24>
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4401      	add	r1, r0
 8002310:	6011      	str	r1, [r2, #0]
 8002312:	6053      	str	r3, [r2, #4]
 8002314:	e7d8      	b.n	80022c8 <_free_r+0x24>
 8002316:	d902      	bls.n	800231e <_free_r+0x7a>
 8002318:	230c      	movs	r3, #12
 800231a:	602b      	str	r3, [r5, #0]
 800231c:	e7d4      	b.n	80022c8 <_free_r+0x24>
 800231e:	6820      	ldr	r0, [r4, #0]
 8002320:	1821      	adds	r1, r4, r0
 8002322:	428b      	cmp	r3, r1
 8002324:	bf01      	itttt	eq
 8002326:	6819      	ldreq	r1, [r3, #0]
 8002328:	685b      	ldreq	r3, [r3, #4]
 800232a:	1809      	addeq	r1, r1, r0
 800232c:	6021      	streq	r1, [r4, #0]
 800232e:	6063      	str	r3, [r4, #4]
 8002330:	6054      	str	r4, [r2, #4]
 8002332:	e7c9      	b.n	80022c8 <_free_r+0x24>
 8002334:	bd38      	pop	{r3, r4, r5, pc}
 8002336:	bf00      	nop
 8002338:	200093c0 	.word	0x200093c0

0800233c <_read_r>:
 800233c:	b538      	push	{r3, r4, r5, lr}
 800233e:	4604      	mov	r4, r0
 8002340:	4608      	mov	r0, r1
 8002342:	4611      	mov	r1, r2
 8002344:	2200      	movs	r2, #0
 8002346:	4d05      	ldr	r5, [pc, #20]	; (800235c <_read_r+0x20>)
 8002348:	602a      	str	r2, [r5, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	f7fe fefa 	bl	8001144 <_read>
 8002350:	1c43      	adds	r3, r0, #1
 8002352:	d102      	bne.n	800235a <_read_r+0x1e>
 8002354:	682b      	ldr	r3, [r5, #0]
 8002356:	b103      	cbz	r3, 800235a <_read_r+0x1e>
 8002358:	6023      	str	r3, [r4, #0]
 800235a:	bd38      	pop	{r3, r4, r5, pc}
 800235c:	200093d4 	.word	0x200093d4

08002360 <_fstat_r>:
 8002360:	b538      	push	{r3, r4, r5, lr}
 8002362:	2300      	movs	r3, #0
 8002364:	4d06      	ldr	r5, [pc, #24]	; (8002380 <_fstat_r+0x20>)
 8002366:	4604      	mov	r4, r0
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	602b      	str	r3, [r5, #0]
 800236e:	f7fe ff2d 	bl	80011cc <_fstat>
 8002372:	1c43      	adds	r3, r0, #1
 8002374:	d102      	bne.n	800237c <_fstat_r+0x1c>
 8002376:	682b      	ldr	r3, [r5, #0]
 8002378:	b103      	cbz	r3, 800237c <_fstat_r+0x1c>
 800237a:	6023      	str	r3, [r4, #0]
 800237c:	bd38      	pop	{r3, r4, r5, pc}
 800237e:	bf00      	nop
 8002380:	200093d4 	.word	0x200093d4

08002384 <_isatty_r>:
 8002384:	b538      	push	{r3, r4, r5, lr}
 8002386:	2300      	movs	r3, #0
 8002388:	4d05      	ldr	r5, [pc, #20]	; (80023a0 <_isatty_r+0x1c>)
 800238a:	4604      	mov	r4, r0
 800238c:	4608      	mov	r0, r1
 800238e:	602b      	str	r3, [r5, #0]
 8002390:	f7fe ff2b 	bl	80011ea <_isatty>
 8002394:	1c43      	adds	r3, r0, #1
 8002396:	d102      	bne.n	800239e <_isatty_r+0x1a>
 8002398:	682b      	ldr	r3, [r5, #0]
 800239a:	b103      	cbz	r3, 800239e <_isatty_r+0x1a>
 800239c:	6023      	str	r3, [r4, #0]
 800239e:	bd38      	pop	{r3, r4, r5, pc}
 80023a0:	200093d4 	.word	0x200093d4

080023a4 <_init>:
 80023a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a6:	bf00      	nop
 80023a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023aa:	bc08      	pop	{r3}
 80023ac:	469e      	mov	lr, r3
 80023ae:	4770      	bx	lr

080023b0 <_fini>:
 80023b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b2:	bf00      	nop
 80023b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b6:	bc08      	pop	{r3}
 80023b8:	469e      	mov	lr, r3
 80023ba:	4770      	bx	lr
