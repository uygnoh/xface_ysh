
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb4  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002fe4  08002fe4  00012fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003024  08003024  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003024  08003024  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003024  08003024  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003024  08003024  00013024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800302c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000093e0  20000020  0800304c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009400  0800304c  00029400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a83d  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f76  00000000  00000000  0002a886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002d238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000326e  00000000  00000000  0002db68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a36e  00000000  00000000  00030dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00049dba  00000000  00000000  0003b144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00084efe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028dc  00000000  00000000  00084f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08002fcc 	.word	0x08002fcc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08002fcc 	.word	0x08002fcc

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001d0:	683b      	ldr	r3, [r7, #0]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80001dc:	d103      	bne.n	80001e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e00c      	b.n	8000200 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	3308      	adds	r3, #8
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e002      	b.n	80001f4 <vListInsert+0x2e>
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d2f6      	bcs.n	80001ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	1c5a      	adds	r2, r3, #1
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000236:	b480      	push	{r7}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	6892      	ldr	r2, [r2, #8]
 800024c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	6852      	ldr	r2, [r2, #4]
 8000256:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d103      	bne.n	800026a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1e5a      	subs	r2, r3, #1
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000292:	2301      	movs	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d05d      	beq.n	800035c <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d059      	beq.n	800035c <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002b0:	2100      	movs	r1, #0
 80002b2:	fba3 2302 	umull	r2, r3, r3, r2
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d000      	beq.n	80002bc <xQueueGenericReset+0x34>
 80002ba:	2101      	movs	r1, #1
 80002bc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14c      	bne.n	800035c <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 80002c2:	f001 fef3 	bl	80020ac <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002ce:	68b9      	ldr	r1, [r7, #8]
 80002d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80002d2:	fb01 f303 	mul.w	r3, r1, r3
 80002d6:	441a      	add	r2, r3
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	2200      	movs	r2, #0
 80002e0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002f2:	3b01      	subs	r3, #1
 80002f4:	68b9      	ldr	r1, [r7, #8]
 80002f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80002f8:	fb01 f303 	mul.w	r3, r1, r3
 80002fc:	441a      	add	r2, r3
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	22ff      	movs	r2, #255	; 0xff
 8000306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	22ff      	movs	r2, #255	; 0xff
 800030e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d114      	bne.n	8000342 <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	691b      	ldr	r3, [r3, #16]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d01a      	beq.n	8000356 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	3310      	adds	r3, #16
 8000324:	4618      	mov	r0, r3
 8000326:	f000 ff35 	bl	8001194 <xTaskRemoveFromEventList>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d012      	beq.n	8000356 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <xQueueGenericReset+0xe4>)
 8000332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	f3bf 8f4f 	dsb	sy
 800033c:	f3bf 8f6f 	isb	sy
 8000340:	e009      	b.n	8000356 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	3310      	adds	r3, #16
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff12 	bl	8000170 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	3324      	adds	r3, #36	; 0x24
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff0d 	bl	8000170 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000356:	f001 fec3 	bl	80020e0 <vPortExitCritical>
 800035a:	e001      	b.n	8000360 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000360:	68fb      	ldr	r3, [r7, #12]
}
 8000362:	4618      	mov	r0, r3
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	e000ed04 	.word	0xe000ed04

08000370 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000370:	b580      	push	{r7, lr}
 8000372:	b08a      	sub	sp, #40	; 0x28
 8000374:	af02      	add	r7, sp, #8
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	4613      	mov	r3, r2
 800037c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d02d      	beq.n	80003e4 <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000388:	2100      	movs	r1, #0
 800038a:	68ba      	ldr	r2, [r7, #8]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	fba3 2302 	umull	r2, r3, r3, r2
 8000392:	2b00      	cmp	r3, #0
 8000394:	d000      	beq.n	8000398 <xQueueGenericCreate+0x28>
 8000396:	2101      	movs	r1, #1
 8000398:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800039a:	2b00      	cmp	r3, #0
 800039c:	d122      	bne.n	80003e4 <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	68ba      	ldr	r2, [r7, #8]
 80003a2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003a6:	f113 0f4d 	cmn.w	r3, #77	; 0x4d
 80003aa:	d81b      	bhi.n	80003e4 <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	68ba      	ldr	r2, [r7, #8]
 80003b0:	fb02 f303 	mul.w	r3, r2, r3
 80003b4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80003b6:	69bb      	ldr	r3, [r7, #24]
 80003b8:	334c      	adds	r3, #76	; 0x4c
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fc42 	bl	8001c44 <pvPortMalloc>
 80003c0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d00d      	beq.n	80003e4 <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80003c8:	69fb      	ldr	r3, [r7, #28]
 80003ca:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	334c      	adds	r3, #76	; 0x4c
 80003d0:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80003d2:	79fa      	ldrb	r2, [r7, #7]
 80003d4:	69fb      	ldr	r3, [r7, #28]
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	4613      	mov	r3, r2
 80003da:	697a      	ldr	r2, [r7, #20]
 80003dc:	68b9      	ldr	r1, [r7, #8]
 80003de:	68f8      	ldr	r0, [r7, #12]
 80003e0:	f000 f805 	bl	80003ee <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80003e4:	69fb      	ldr	r3, [r7, #28]
    }
 80003e6:	4618      	mov	r0, r3
 80003e8:	3720      	adds	r7, #32
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b084      	sub	sp, #16
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	60f8      	str	r0, [r7, #12]
 80003f6:	60b9      	str	r1, [r7, #8]
 80003f8:	607a      	str	r2, [r7, #4]
 80003fa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d103      	bne.n	800040a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	69ba      	ldr	r2, [r7, #24]
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	e002      	b.n	8000410 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800040a:	69bb      	ldr	r3, [r7, #24]
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000410:	69bb      	ldr	r3, [r7, #24]
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	68ba      	ldr	r2, [r7, #8]
 800041a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800041c:	2101      	movs	r1, #1
 800041e:	69b8      	ldr	r0, [r7, #24]
 8000420:	f7ff ff32 	bl	8000288 <xQueueGenericReset>
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	2200      	movs	r2, #0
 8000428:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800042a:	bf00      	nop
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b08a      	sub	sp, #40	; 0x28
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000440:	2300      	movs	r3, #0
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000448:	f001 fe30 	bl	80020ac <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800044c:	6a3b      	ldr	r3, [r7, #32]
 800044e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000450:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d01f      	beq.n	8000498 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000458:	68b9      	ldr	r1, [r7, #8]
 800045a:	6a38      	ldr	r0, [r7, #32]
 800045c:	f000 f8f6 	bl	800064c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	1e5a      	subs	r2, r3, #1
 8000464:	6a3b      	ldr	r3, [r7, #32]
 8000466:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000468:	6a3b      	ldr	r3, [r7, #32]
 800046a:	691b      	ldr	r3, [r3, #16]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d00f      	beq.n	8000490 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000470:	6a3b      	ldr	r3, [r7, #32]
 8000472:	3310      	adds	r3, #16
 8000474:	4618      	mov	r0, r3
 8000476:	f000 fe8d 	bl	8001194 <xTaskRemoveFromEventList>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d007      	beq.n	8000490 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000480:	4b3c      	ldr	r3, [pc, #240]	; (8000574 <xQueueReceive+0x140>)
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	f3bf 8f4f 	dsb	sy
 800048c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000490:	f001 fe26 	bl	80020e0 <vPortExitCritical>
                return pdPASS;
 8000494:	2301      	movs	r3, #1
 8000496:	e069      	b.n	800056c <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d103      	bne.n	80004a6 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800049e:	f001 fe1f 	bl	80020e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80004a2:	2300      	movs	r3, #0
 80004a4:	e062      	b.n	800056c <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 80004a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d106      	bne.n	80004ba <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 ff37 	bl	8001324 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80004b6:	2301      	movs	r3, #1
 80004b8:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80004ba:	f001 fe11 	bl	80020e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80004be:	f000 fbc7 	bl	8000c50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80004c2:	f001 fdf3 	bl	80020ac <vPortEnterCritical>
 80004c6:	6a3b      	ldr	r3, [r7, #32]
 80004c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80004d2:	d103      	bne.n	80004dc <xQueueReceive+0xa8>
 80004d4:	6a3b      	ldr	r3, [r7, #32]
 80004d6:	2200      	movs	r2, #0
 80004d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80004dc:	6a3b      	ldr	r3, [r7, #32]
 80004de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80004e2:	b25b      	sxtb	r3, r3
 80004e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80004e8:	d103      	bne.n	80004f2 <xQueueReceive+0xbe>
 80004ea:	6a3b      	ldr	r3, [r7, #32]
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80004f2:	f001 fdf5 	bl	80020e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80004f6:	1d3a      	adds	r2, r7, #4
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	4611      	mov	r1, r2
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 ff26 	bl	8001350 <xTaskCheckForTimeOut>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d123      	bne.n	8000552 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800050a:	6a38      	ldr	r0, [r7, #32]
 800050c:	f000 f923 	bl	8000756 <prvIsQueueEmpty>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d017      	beq.n	8000546 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000516:	6a3b      	ldr	r3, [r7, #32]
 8000518:	3324      	adds	r3, #36	; 0x24
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	4611      	mov	r1, r2
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fdea 	bl	80010f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000524:	6a38      	ldr	r0, [r7, #32]
 8000526:	f000 f8b7 	bl	8000698 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800052a:	f000 fb9f 	bl	8000c6c <xTaskResumeAll>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d189      	bne.n	8000448 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <xQueueReceive+0x140>)
 8000536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	f3bf 8f4f 	dsb	sy
 8000540:	f3bf 8f6f 	isb	sy
 8000544:	e780      	b.n	8000448 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000546:	6a38      	ldr	r0, [r7, #32]
 8000548:	f000 f8a6 	bl	8000698 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800054c:	f000 fb8e 	bl	8000c6c <xTaskResumeAll>
 8000550:	e77a      	b.n	8000448 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000552:	6a38      	ldr	r0, [r7, #32]
 8000554:	f000 f8a0 	bl	8000698 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000558:	f000 fb88 	bl	8000c6c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800055c:	6a38      	ldr	r0, [r7, #32]
 800055e:	f000 f8fa 	bl	8000756 <prvIsQueueEmpty>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	f43f af6f 	beq.w	8000448 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800056a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800056c:	4618      	mov	r0, r3
 800056e:	3728      	adds	r7, #40	; 0x28
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	e000ed04 	.word	0xe000ed04

08000578 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800058c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	2b00      	cmp	r3, #0
 8000594:	d10d      	bne.n	80005b2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d14d      	bne.n	800063a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 ffda 	bl	800155c <xTaskPriorityDisinherit>
 80005a8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	e043      	b.n	800063a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d119      	bne.n	80005ec <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	6858      	ldr	r0, [r3, #4]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	461a      	mov	r2, r3
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	f002 fcec 	bl	8002fa0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	441a      	add	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d32b      	bcc.n	800063a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	e026      	b.n	800063a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	68d8      	ldr	r0, [r3, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	461a      	mov	r2, r3
 80005f6:	68b9      	ldr	r1, [r7, #8]
 80005f8:	f002 fcd2 	bl	8002fa0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	68da      	ldr	r2, [r3, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	425b      	negs	r3, r3
 8000606:	441a      	add	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	68da      	ldr	r2, [r3, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d207      	bcs.n	8000628 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	689a      	ldr	r2, [r3, #8]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	425b      	negs	r3, r3
 8000622:	441a      	add	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b02      	cmp	r3, #2
 800062c:	d105      	bne.n	800063a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	3b01      	subs	r3, #1
 8000638:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	1c5a      	adds	r2, r3, #1
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000642:	697b      	ldr	r3, [r7, #20]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	2b00      	cmp	r3, #0
 800065c:	d018      	beq.n	8000690 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	68da      	ldr	r2, [r3, #12]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	441a      	add	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	429a      	cmp	r2, r3
 8000676:	d303      	bcc.n	8000680 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68d9      	ldr	r1, [r3, #12]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	461a      	mov	r2, r3
 800068a:	6838      	ldr	r0, [r7, #0]
 800068c:	f002 fc88 	bl	8002fa0 <memcpy>
    }
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80006a0:	f001 fd04 	bl	80020ac <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80006aa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80006ac:	e01e      	b.n	80006ec <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d008      	beq.n	80006c8 <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f8d8 	bl	800086c <prvNotifyQueueSetContainer>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d010      	beq.n	80006e4 <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 80006c2:	f000 fe8f 	bl	80013e4 <vTaskMissedYield>
 80006c6:	e00d      	b.n	80006e4 <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d012      	beq.n	80006f6 <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3324      	adds	r3, #36	; 0x24
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fd5d 	bl	8001194 <xTaskRemoveFromEventList>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 80006e0:	f000 fe80 	bl	80013e4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80006ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	dcdc      	bgt.n	80006ae <prvUnlockQueue+0x16>
 80006f4:	e000      	b.n	80006f8 <prvUnlockQueue+0x60>
                            break;
 80006f6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	22ff      	movs	r2, #255	; 0xff
 80006fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000700:	f001 fcee 	bl	80020e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000704:	f001 fcd2 	bl	80020ac <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800070e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000710:	e011      	b.n	8000736 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d012      	beq.n	8000740 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3310      	adds	r3, #16
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fd38 	bl	8001194 <xTaskRemoveFromEventList>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 800072a:	f000 fe5b 	bl	80013e4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800072e:	7bbb      	ldrb	r3, [r7, #14]
 8000730:	3b01      	subs	r3, #1
 8000732:	b2db      	uxtb	r3, r3
 8000734:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800073a:	2b00      	cmp	r3, #0
 800073c:	dce9      	bgt.n	8000712 <prvUnlockQueue+0x7a>
 800073e:	e000      	b.n	8000742 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8000740:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800074a:	f001 fcc9 	bl	80020e0 <vPortExitCritical>
}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800075e:	f001 fca5 	bl	80020ac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000766:	2b00      	cmp	r3, #0
 8000768:	d102      	bne.n	8000770 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800076a:	2301      	movs	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	e001      	b.n	8000774 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000774:	f001 fcb4 	bl	80020e0 <vPortExitCritical>

    return xReturn;
 8000778:	68fb      	ldr	r3, [r7, #12]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]

        if( pcQueueName != NULL )
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d024      	beq.n	80007e2 <vQueueAddToRegistry+0x5e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	e01e      	b.n	80007dc <vQueueAddToRegistry+0x58>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <vQueueAddToRegistry+0x7c>)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	4413      	add	r3, r2
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d105      	bne.n	80007ba <vQueueAddToRegistry+0x36>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	4a13      	ldr	r2, [pc, #76]	; (8000800 <vQueueAddToRegistry+0x7c>)
 80007b4:	4413      	add	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
                    break;
 80007b8:	e013      	b.n	80007e2 <vQueueAddToRegistry+0x5e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d10a      	bne.n	80007d6 <vQueueAddToRegistry+0x52>
 80007c0:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <vQueueAddToRegistry+0x7c>)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d104      	bne.n	80007d6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <vQueueAddToRegistry+0x7c>)
 80007d2:	4413      	add	r3, r2
 80007d4:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2b07      	cmp	r3, #7
 80007e0:	d9dd      	bls.n	800079e <vQueueAddToRegistry+0x1a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d005      	beq.n	80007f4 <vQueueAddToRegistry+0x70>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	200093b8 	.word	0x200093b8

08000804 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000814:	f001 fc4a 	bl	80020ac <vPortEnterCritical>
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800081e:	b25b      	sxtb	r3, r3
 8000820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000824:	d103      	bne.n	800082e <vQueueWaitForMessageRestricted+0x2a>
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000834:	b25b      	sxtb	r3, r3
 8000836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800083a:	d103      	bne.n	8000844 <vQueueWaitForMessageRestricted+0x40>
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000844:	f001 fc4c 	bl	80020e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800084c:	2b00      	cmp	r3, #0
 800084e:	d106      	bne.n	800085e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	3324      	adds	r3, #36	; 0x24
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fc63 	bl	8001124 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800085e:	6978      	ldr	r0, [r7, #20]
 8000860:	f7ff ff1a 	bl	8000698 <prvUnlockQueue>
    }
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000878:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000886:	429a      	cmp	r2, r3
 8000888:	d225      	bcs.n	80008d6 <prvNotifyQueueSetContainer+0x6a>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000890:	73fb      	strb	r3, [r7, #15]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	4619      	mov	r1, r3
 8000898:	6938      	ldr	r0, [r7, #16]
 800089a:	f7ff fe6d 	bl	8000578 <prvCopyDataToQueue>
 800089e:	6178      	str	r0, [r7, #20]

            if( cTxLock == queueUNLOCKED )
 80008a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008a8:	d10e      	bne.n	80008c8 <prvNotifyQueueSetContainer+0x5c>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d011      	beq.n	80008d6 <prvNotifyQueueSetContainer+0x6a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	3324      	adds	r3, #36	; 0x24
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fc6c 	bl	8001194 <xTaskRemoveFromEventList>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d009      	beq.n	80008d6 <prvNotifyQueueSetContainer+0x6a>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	e006      	b.n	80008d6 <prvNotifyQueueSetContainer+0x6a>
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	3301      	adds	r3, #1
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	b25a      	sxtb	r2, r3
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80008d6:	697b      	ldr	r3, [r7, #20]
    }
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af04      	add	r7, sp, #16
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4613      	mov	r3, r2
 80008ee:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 f9a5 	bl	8001c44 <pvPortMalloc>
 80008fa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d00e      	beq.n	8000920 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000902:	2054      	movs	r0, #84	; 0x54
 8000904:	f001 f99e 	bl	8001c44 <pvPortMalloc>
 8000908:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d003      	beq.n	8000918 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	631a      	str	r2, [r3, #48]	; 0x30
 8000916:	e005      	b.n	8000924 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8000918:	6978      	ldr	r0, [r7, #20]
 800091a:	f001 fa41 	bl	8001da0 <vPortFree>
 800091e:	e001      	b.n	8000924 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d013      	beq.n	8000952 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800092a:	88fa      	ldrh	r2, [r7, #6]
 800092c:	2300      	movs	r3, #0
 800092e:	9303      	str	r3, [sp, #12]
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	9302      	str	r3, [sp, #8]
 8000934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68b9      	ldr	r1, [r7, #8]
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f000 f80e 	bl	8000962 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000946:	69f8      	ldr	r0, [r7, #28]
 8000948:	f000 f88a 	bl	8000a60 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800094c:	2301      	movs	r3, #1
 800094e:	61bb      	str	r3, [r7, #24]
 8000950:	e002      	b.n	8000958 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000956:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000958:	69bb      	ldr	r3, [r7, #24]
    }
 800095a:	4618      	mov	r0, r3
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800097a:	3b01      	subs	r3, #1
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	4413      	add	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	f023 0307 	bic.w	r3, r3, #7
 8000988:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d01f      	beq.n	80009d0 <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	e012      	b.n	80009bc <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	4413      	add	r3, r2
 800099c:	7819      	ldrb	r1, [r3, #0]
 800099e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	4413      	add	r3, r2
 80009a4:	3334      	adds	r3, #52	; 0x34
 80009a6:	460a      	mov	r2, r1
 80009a8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	4413      	add	r3, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d006      	beq.n	80009c4 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3301      	adds	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	2b0f      	cmp	r3, #15
 80009c0:	d9e9      	bls.n	8000996 <prvInitialiseNewTask+0x34>
 80009c2:	e000      	b.n	80009c6 <prvInitialiseNewTask+0x64>
            {
                break;
 80009c4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80009ce:	e003      	b.n	80009d8 <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80009d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	2b1f      	cmp	r3, #31
 80009dc:	d901      	bls.n	80009e2 <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80009de:	231f      	movs	r3, #31
 80009e0:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80009e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e4:	6a3a      	ldr	r2, [r7, #32]
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80009e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ea:	6a3a      	ldr	r2, [r7, #32]
 80009ec:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 80009ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f0:	2200      	movs	r2, #0
 80009f2:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	3304      	adds	r3, #4
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fbd8 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80009fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a00:	3318      	adds	r3, #24
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fbd3 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a0c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	f1c3 0220 	rsb	r2, r3, #32
 8000a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a16:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a20:	334c      	adds	r3, #76	; 0x4c
 8000a22:	2204      	movs	r2, #4
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fac8 	bl	8002fbc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2e:	3350      	adds	r3, #80	; 0x50
 8000a30:	2201      	movs	r2, #1
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 fac1 	bl	8002fbc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	68f9      	ldr	r1, [r7, #12]
 8000a3e:	6938      	ldr	r0, [r7, #16]
 8000a40:	f001 faa8 	bl	8001f94 <pxPortInitialiseStack>
 8000a44:	4602      	mov	r2, r0
 8000a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a48:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d002      	beq.n	8000a56 <prvInitialiseNewTask+0xf4>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a54:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000a68:	f001 fb20 	bl	80020ac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000a6c:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <prvAddNewTaskToReadyList+0x108>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	4a3d      	ldr	r2, [pc, #244]	; (8000b68 <prvAddNewTaskToReadyList+0x108>)
 8000a74:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000a76:	4b3d      	ldr	r3, [pc, #244]	; (8000b6c <prvAddNewTaskToReadyList+0x10c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d109      	bne.n	8000a92 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000a7e:	4a3b      	ldr	r2, [pc, #236]	; (8000b6c <prvAddNewTaskToReadyList+0x10c>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a84:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <prvAddNewTaskToReadyList+0x108>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d110      	bne.n	8000aae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000a8c:	f000 fcce 	bl	800142c <prvInitialiseTaskLists>
 8000a90:	e00d      	b.n	8000aae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000a92:	4b37      	ldr	r3, [pc, #220]	; (8000b70 <prvAddNewTaskToReadyList+0x110>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d109      	bne.n	8000aae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a9a:	4b34      	ldr	r3, [pc, #208]	; (8000b6c <prvAddNewTaskToReadyList+0x10c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d802      	bhi.n	8000aae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000aa8:	4a30      	ldr	r2, [pc, #192]	; (8000b6c <prvAddNewTaskToReadyList+0x10c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <prvAddNewTaskToReadyList+0x114>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	4a2f      	ldr	r2, [pc, #188]	; (8000b74 <prvAddNewTaskToReadyList+0x114>)
 8000ab6:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abc:	2201      	movs	r2, #1
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <prvAddNewTaskToReadyList+0x118>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	4a2c      	ldr	r2, [pc, #176]	; (8000b78 <prvAddNewTaskToReadyList+0x118>)
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ace:	492b      	ldr	r1, [pc, #172]	; (8000b7c <prvAddNewTaskToReadyList+0x11c>)
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	440b      	add	r3, r1
 8000ada:	3304      	adds	r3, #4
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	3204      	adds	r2, #4
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	1d1a      	adds	r2, r3, #4
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b04:	4613      	mov	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	4413      	add	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <prvAddNewTaskToReadyList+0x11c>)
 8000b0e:	441a      	add	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b18:	4918      	ldr	r1, [pc, #96]	; (8000b7c <prvAddNewTaskToReadyList+0x11c>)
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	440b      	add	r3, r1
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	1c59      	adds	r1, r3, #1
 8000b28:	4814      	ldr	r0, [pc, #80]	; (8000b7c <prvAddNewTaskToReadyList+0x11c>)
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4403      	add	r3, r0
 8000b34:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000b36:	f001 fad3 	bl	80020e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <prvAddNewTaskToReadyList+0x110>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d00e      	beq.n	8000b60 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <prvAddNewTaskToReadyList+0x10c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <prvAddNewTaskToReadyList+0x120>)
 8000b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	f3bf 8f4f 	dsb	sy
 8000b5c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000330 	.word	0x20000330
 8000b6c:	2000003c 	.word	0x2000003c
 8000b70:	2000033c 	.word	0x2000033c
 8000b74:	2000034c 	.word	0x2000034c
 8000b78:	20000338 	.word	0x20000338
 8000b7c:	20000040 	.word	0x20000040
 8000b80:	e000ed04 	.word	0xe000ed04

08000b84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d008      	beq.n	8000ba8 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8000b96:	f000 f85b 	bl	8000c50 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f000 fd5f 	bl	8001660 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000ba2:	f000 f863 	bl	8000c6c <xTaskResumeAll>
 8000ba6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d107      	bne.n	8000bbe <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <vTaskDelay+0x44>)
 8000bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	f3bf 8f4f 	dsb	sy
 8000bba:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000ed04 	.word	0xe000ed04

08000bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <vTaskStartScheduler+0x68>)
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	4916      	ldr	r1, [pc, #88]	; (8000c38 <vTaskStartScheduler+0x6c>)
 8000be0:	4816      	ldr	r0, [pc, #88]	; (8000c3c <vTaskStartScheduler+0x70>)
 8000be2:	f7ff fe7d 	bl	80008e0 <xTaskCreate>
 8000be6:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d102      	bne.n	8000bf4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8000bee:	f000 fdb7 	bl	8001760 <xTimerCreateTimerTask>
 8000bf2:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d115      	bne.n	8000c26 <vTaskStartScheduler+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfe:	f383 8811 	msr	BASEPRI, r3
 8000c02:	f3bf 8f6f 	isb	sy
 8000c06:	f3bf 8f4f 	dsb	sy
 8000c0a:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000c0c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <vTaskStartScheduler+0x74>)
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c14:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <vTaskStartScheduler+0x78>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <vTaskStartScheduler+0x7c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000c22:	f001 fa23 	bl	800206c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <vTaskStartScheduler+0x80>)
 8000c28:	681b      	ldr	r3, [r3, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000354 	.word	0x20000354
 8000c38:	08002fe4 	.word	0x08002fe4
 8000c3c:	080013fd 	.word	0x080013fd
 8000c40:	20000350 	.word	0x20000350
 8000c44:	2000033c 	.word	0x2000033c
 8000c48:	20000334 	.word	0x20000334
 8000c4c:	20000000 	.word	0x20000000

08000c50 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <vTaskSuspendAll+0x18>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <vTaskSuspendAll+0x18>)
 8000c5c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000358 	.word	0x20000358

08000c6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000c7a:	f001 fa17 	bl	80020ac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000c7e:	4b68      	ldr	r3, [pc, #416]	; (8000e20 <xTaskResumeAll+0x1b4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	4a66      	ldr	r2, [pc, #408]	; (8000e20 <xTaskResumeAll+0x1b4>)
 8000c86:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c88:	4b65      	ldr	r3, [pc, #404]	; (8000e20 <xTaskResumeAll+0x1b4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f040 80c0 	bne.w	8000e12 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c92:	4b64      	ldr	r3, [pc, #400]	; (8000e24 <xTaskResumeAll+0x1b8>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 80bb 	beq.w	8000e12 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c9c:	e08a      	b.n	8000db4 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c9e:	4b62      	ldr	r3, [pc, #392]	; (8000e28 <xTaskResumeAll+0x1bc>)
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	6a12      	ldr	r2, [r2, #32]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	6a1b      	ldr	r3, [r3, #32]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	69d2      	ldr	r2, [r2, #28]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3318      	adds	r3, #24
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d103      	bne.n	8000cd4 <xTaskResumeAll+0x68>
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	6a1a      	ldr	r2, [r3, #32]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	1e5a      	subs	r2, r3, #1
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	68d2      	ldr	r2, [r2, #12]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	6892      	ldr	r2, [r2, #8]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3304      	adds	r3, #4
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d103      	bne.n	8000d12 <xTaskResumeAll+0xa6>
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	1e5a      	subs	r2, r3, #1
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d26:	2201      	movs	r2, #1
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <xTaskResumeAll+0x1c0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	4a3e      	ldr	r2, [pc, #248]	; (8000e2c <xTaskResumeAll+0x1c0>)
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d38:	493d      	ldr	r1, [pc, #244]	; (8000e30 <xTaskResumeAll+0x1c4>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	440b      	add	r3, r1
 8000d44:	3304      	adds	r3, #4
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	3204      	adds	r2, #4
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	1d1a      	adds	r2, r3, #4
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4a2e      	ldr	r2, [pc, #184]	; (8000e30 <xTaskResumeAll+0x1c4>)
 8000d78:	441a      	add	r2, r3
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	615a      	str	r2, [r3, #20]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d82:	492b      	ldr	r1, [pc, #172]	; (8000e30 <xTaskResumeAll+0x1c4>)
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	1c59      	adds	r1, r3, #1
 8000d92:	4827      	ldr	r0, [pc, #156]	; (8000e30 <xTaskResumeAll+0x1c4>)
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4403      	add	r3, r0
 8000d9e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <xTaskResumeAll+0x1c8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d302      	bcc.n	8000db4 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000dae:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <xTaskResumeAll+0x1cc>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <xTaskResumeAll+0x1bc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f47f af70 	bne.w	8000c9e <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000dc4:	f000 fbb0 	bl	8001528 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <xTaskResumeAll+0x1d0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d010      	beq.n	8000df6 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000dd4:	f000 f844 	bl	8000e60 <xTaskIncrementTick>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d002      	beq.n	8000de4 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <xTaskResumeAll+0x1cc>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f1      	bne.n	8000dd4 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <xTaskResumeAll+0x1d0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <xTaskResumeAll+0x1cc>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d009      	beq.n	8000e12 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <xTaskResumeAll+0x1d4>)
 8000e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	f3bf 8f4f 	dsb	sy
 8000e0e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000e12:	f001 f965 	bl	80020e0 <vPortExitCritical>

    return xAlreadyYielded;
 8000e16:	693b      	ldr	r3, [r7, #16]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000358 	.word	0x20000358
 8000e24:	20000330 	.word	0x20000330
 8000e28:	200002f0 	.word	0x200002f0
 8000e2c:	20000338 	.word	0x20000338
 8000e30:	20000040 	.word	0x20000040
 8000e34:	2000003c 	.word	0x2000003c
 8000e38:	20000344 	.word	0x20000344
 8000e3c:	20000340 	.word	0x20000340
 8000e40:	e000ed04 	.word	0xe000ed04

08000e44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <xTaskGetTickCount+0x18>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000e50:	687b      	ldr	r3, [r7, #4]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	20000334 	.word	0x20000334

08000e60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e6a:	4b75      	ldr	r3, [pc, #468]	; (8001040 <xTaskIncrementTick+0x1e0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 80dc 	bne.w	800102c <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000e74:	4b73      	ldr	r3, [pc, #460]	; (8001044 <xTaskIncrementTick+0x1e4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000e7c:	4a71      	ldr	r2, [pc, #452]	; (8001044 <xTaskIncrementTick+0x1e4>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d110      	bne.n	8000eaa <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000e88:	4b6f      	ldr	r3, [pc, #444]	; (8001048 <xTaskIncrementTick+0x1e8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	4b6f      	ldr	r3, [pc, #444]	; (800104c <xTaskIncrementTick+0x1ec>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a6d      	ldr	r2, [pc, #436]	; (8001048 <xTaskIncrementTick+0x1e8>)
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4a6d      	ldr	r2, [pc, #436]	; (800104c <xTaskIncrementTick+0x1ec>)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b6c      	ldr	r3, [pc, #432]	; (8001050 <xTaskIncrementTick+0x1f0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a6b      	ldr	r2, [pc, #428]	; (8001050 <xTaskIncrementTick+0x1f0>)
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	f000 fb3f 	bl	8001528 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000eaa:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <xTaskIncrementTick+0x1f4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f0c0 80a6 	bcc.w	8001002 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000eb6:	4b64      	ldr	r3, [pc, #400]	; (8001048 <xTaskIncrementTick+0x1e8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d104      	bne.n	8000eca <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ec0:	4b64      	ldr	r3, [pc, #400]	; (8001054 <xTaskIncrementTick+0x1f4>)
 8000ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ec6:	601a      	str	r2, [r3, #0]
                    break;
 8000ec8:	e09b      	b.n	8001002 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000eca:	4b5f      	ldr	r3, [pc, #380]	; (8001048 <xTaskIncrementTick+0x1e8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d203      	bcs.n	8000eea <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000ee2:	4a5c      	ldr	r2, [pc, #368]	; (8001054 <xTaskIncrementTick+0x1f4>)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000ee8:	e08b      	b.n	8001002 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	68d2      	ldr	r2, [r2, #12]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	6892      	ldr	r2, [r2, #8]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d103      	bne.n	8000f18 <xTaskIncrementTick+0xb8>
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1e5a      	subs	r2, r3, #1
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d01e      	beq.n	8000f6e <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	6a12      	ldr	r2, [r2, #32]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	69d2      	ldr	r2, [r2, #28]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	3318      	adds	r3, #24
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d103      	bne.n	8000f5e <xTaskIncrementTick+0xfe>
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	6a1a      	ldr	r2, [r3, #32]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	2200      	movs	r2, #0
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f72:	2201      	movs	r2, #1
 8000f74:	409a      	lsls	r2, r3
 8000f76:	4b38      	ldr	r3, [pc, #224]	; (8001058 <xTaskIncrementTick+0x1f8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	4a36      	ldr	r2, [pc, #216]	; (8001058 <xTaskIncrementTick+0x1f8>)
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f84:	4935      	ldr	r1, [pc, #212]	; (800105c <xTaskIncrementTick+0x1fc>)
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	3304      	adds	r3, #4
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	3204      	adds	r2, #4
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1d1a      	adds	r2, r3, #4
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4a26      	ldr	r2, [pc, #152]	; (800105c <xTaskIncrementTick+0x1fc>)
 8000fc4:	441a      	add	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fce:	4923      	ldr	r1, [pc, #140]	; (800105c <xTaskIncrementTick+0x1fc>)
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	1c59      	adds	r1, r3, #1
 8000fde:	481f      	ldr	r0, [pc, #124]	; (800105c <xTaskIncrementTick+0x1fc>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4403      	add	r3, r0
 8000fea:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <xTaskIncrementTick+0x200>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	f4ff af5d 	bcc.w	8000eb6 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001000:	e759      	b.n	8000eb6 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <xTaskIncrementTick+0x200>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001008:	4914      	ldr	r1, [pc, #80]	; (800105c <xTaskIncrementTick+0x1fc>)
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	440b      	add	r3, r1
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d901      	bls.n	800101e <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 800101a:	2301      	movs	r3, #1
 800101c:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <xTaskIncrementTick+0x204>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8001026:	2301      	movs	r3, #1
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	e004      	b.n	8001036 <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <xTaskIncrementTick+0x208>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <xTaskIncrementTick+0x208>)
 8001034:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001036:	69fb      	ldr	r3, [r7, #28]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000358 	.word	0x20000358
 8001044:	20000334 	.word	0x20000334
 8001048:	200002e8 	.word	0x200002e8
 800104c:	200002ec 	.word	0x200002ec
 8001050:	20000348 	.word	0x20000348
 8001054:	20000350 	.word	0x20000350
 8001058:	20000338 	.word	0x20000338
 800105c:	20000040 	.word	0x20000040
 8001060:	2000003c 	.word	0x2000003c
 8001064:	20000344 	.word	0x20000344
 8001068:	20000340 	.word	0x20000340

0800106c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <vTaskSwitchContext+0x78>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <vTaskSwitchContext+0x7c>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001080:	e02a      	b.n	80010d8 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <vTaskSwitchContext+0x7c>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <vTaskSwitchContext+0x80>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	fab3 f383 	clz	r3, r3
 8001094:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	f1c3 031f 	rsb	r3, r3, #31
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <vTaskSwitchContext+0x84>)
 80010aa:	4413      	add	r3, r2
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	3308      	adds	r3, #8
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d104      	bne.n	80010ce <vTaskSwitchContext+0x62>
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <vTaskSwitchContext+0x88>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000358 	.word	0x20000358
 80010e8:	20000344 	.word	0x20000344
 80010ec:	20000338 	.word	0x20000338
 80010f0:	20000040 	.word	0x20000040
 80010f4:	2000003c 	.word	0x2000003c

080010f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <vTaskPlaceOnEventList+0x28>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	3318      	adds	r3, #24
 8001108:	4619      	mov	r1, r3
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff f85b 	bl	80001c6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001110:	2101      	movs	r1, #1
 8001112:	6838      	ldr	r0, [r7, #0]
 8001114:	f000 faa4 	bl	8001660 <prvAddCurrentTaskToDelayedList>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000003c 	.word	0x2000003c

08001124 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <vTaskPlaceOnEventListRestricted+0x6c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	61da      	str	r2, [r3, #28]
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <vTaskPlaceOnEventListRestricted+0x6c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	6892      	ldr	r2, [r2, #8]
 8001146:	621a      	str	r2, [r3, #32]
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <vTaskPlaceOnEventListRestricted+0x6c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	3218      	adds	r2, #24
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <vTaskPlaceOnEventListRestricted+0x6c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f103 0218 	add.w	r2, r3, #24
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <vTaskPlaceOnEventListRestricted+0x6c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <vTaskPlaceOnEventListRestricted+0x5a>
        {
            xTicksToWait = portMAX_DELAY;
 8001178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800117c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	68b8      	ldr	r0, [r7, #8]
 8001182:	f000 fa6d 	bl	8001660 <prvAddCurrentTaskToDelayedList>
    }
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000003c 	.word	0x2000003c

08001194 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	6a12      	ldr	r2, [r2, #32]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	69d2      	ldr	r2, [r2, #28]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	3318      	adds	r3, #24
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d103      	bne.n	80011d2 <xTaskRemoveFromEventList+0x3e>
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	6a1a      	ldr	r2, [r3, #32]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	2200      	movs	r2, #0
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	1e5a      	subs	r2, r3, #1
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011e2:	4b4a      	ldr	r3, [pc, #296]	; (800130c <xTaskRemoveFromEventList+0x178>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d15e      	bne.n	80012a8 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	68d2      	ldr	r2, [r2, #12]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	6892      	ldr	r2, [r2, #8]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	3304      	adds	r3, #4
 800120c:	429a      	cmp	r2, r3
 800120e:	d103      	bne.n	8001218 <xTaskRemoveFromEventList+0x84>
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	2201      	movs	r2, #1
 800122e:	409a      	lsls	r2, r3
 8001230:	4b37      	ldr	r3, [pc, #220]	; (8001310 <xTaskRemoveFromEventList+0x17c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4313      	orrs	r3, r2
 8001236:	4a36      	ldr	r2, [pc, #216]	; (8001310 <xTaskRemoveFromEventList+0x17c>)
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800123e:	4935      	ldr	r1, [pc, #212]	; (8001314 <xTaskRemoveFromEventList+0x180>)
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	3304      	adds	r3, #4
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	3204      	adds	r2, #4
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	1d1a      	adds	r2, r3, #4
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4a25      	ldr	r2, [pc, #148]	; (8001314 <xTaskRemoveFromEventList+0x180>)
 800127e:	441a      	add	r2, r3
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001288:	4922      	ldr	r1, [pc, #136]	; (8001314 <xTaskRemoveFromEventList+0x180>)
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	1c59      	adds	r1, r3, #1
 8001298:	481e      	ldr	r0, [pc, #120]	; (8001314 <xTaskRemoveFromEventList+0x180>)
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4403      	add	r3, r0
 80012a4:	6019      	str	r1, [r3, #0]
 80012a6:	e01b      	b.n	80012e0 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <xTaskRemoveFromEventList+0x184>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	61da      	str	r2, [r3, #28]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	621a      	str	r2, [r3, #32]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	3218      	adds	r2, #24
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	f103 0218 	add.w	r2, r3, #24
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	4a11      	ldr	r2, [pc, #68]	; (8001318 <xTaskRemoveFromEventList+0x184>)
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <xTaskRemoveFromEventList+0x184>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <xTaskRemoveFromEventList+0x184>)
 80012de:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e4:	4b0d      	ldr	r3, [pc, #52]	; (800131c <xTaskRemoveFromEventList+0x188>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d905      	bls.n	80012fa <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <xTaskRemoveFromEventList+0x18c>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e001      	b.n	80012fe <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80012fe:	69fb      	ldr	r3, [r7, #28]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3724      	adds	r7, #36	; 0x24
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000358 	.word	0x20000358
 8001310:	20000338 	.word	0x20000338
 8001314:	20000040 	.word	0x20000040
 8001318:	200002f0 	.word	0x200002f0
 800131c:	2000003c 	.word	0x2000003c
 8001320:	20000344 	.word	0x20000344

08001324 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <vTaskInternalSetTimeOutState+0x24>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <vTaskInternalSetTimeOutState+0x28>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	605a      	str	r2, [r3, #4]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000348 	.word	0x20000348
 800134c:	20000334 	.word	0x20000334

08001350 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800135a:	f000 fea7 	bl	80020ac <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <xTaskCheckForTimeOut+0x8c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001376:	d102      	bne.n	800137e <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	e026      	b.n	80013cc <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <xTaskCheckForTimeOut+0x90>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d00a      	beq.n	80013a0 <xTaskCheckForTimeOut+0x50>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d305      	bcc.n	80013a0 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001394:	2301      	movs	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e015      	b.n	80013cc <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d20b      	bcs.n	80013c2 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad2      	subs	r2, r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffb4 	bl	8001324 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e004      	b.n	80013cc <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80013cc:	f000 fe88 	bl	80020e0 <vPortExitCritical>

    return xReturn;
 80013d0:	697b      	ldr	r3, [r7, #20]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000334 	.word	0x20000334
 80013e0:	20000348 	.word	0x20000348

080013e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <vTaskMissedYield+0x14>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000344 	.word	0x20000344

080013fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001404:	f000 f852 	bl	80014ac <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <prvIdleTask+0x28>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d9f9      	bls.n	8001404 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <prvIdleTask+0x2c>)
 8001412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	f3bf 8f4f 	dsb	sy
 800141c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001420:	e7f0      	b.n	8001404 <prvIdleTask+0x8>
 8001422:	bf00      	nop
 8001424:	20000040 	.word	0x20000040
 8001428:	e000ed04 	.word	0xe000ed04

0800142c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	e00c      	b.n	8001452 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <prvInitialiseTaskLists+0x60>)
 8001444:	4413      	add	r3, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe fe92 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3301      	adds	r3, #1
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b1f      	cmp	r3, #31
 8001456:	d9ef      	bls.n	8001438 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <prvInitialiseTaskLists+0x64>)
 800145a:	f7fe fe89 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <prvInitialiseTaskLists+0x68>)
 8001460:	f7fe fe86 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <prvInitialiseTaskLists+0x6c>)
 8001466:	f7fe fe83 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800146a:	480c      	ldr	r0, [pc, #48]	; (800149c <prvInitialiseTaskLists+0x70>)
 800146c:	f7fe fe80 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <prvInitialiseTaskLists+0x74>)
 8001472:	f7fe fe7d 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <prvInitialiseTaskLists+0x78>)
 8001478:	4a05      	ldr	r2, [pc, #20]	; (8001490 <prvInitialiseTaskLists+0x64>)
 800147a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <prvInitialiseTaskLists+0x7c>)
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <prvInitialiseTaskLists+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000040 	.word	0x20000040
 8001490:	200002c0 	.word	0x200002c0
 8001494:	200002d4 	.word	0x200002d4
 8001498:	200002f0 	.word	0x200002f0
 800149c:	20000304 	.word	0x20000304
 80014a0:	2000031c 	.word	0x2000031c
 80014a4:	200002e8 	.word	0x200002e8
 80014a8:	200002ec 	.word	0x200002ec

080014ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80014b2:	e019      	b.n	80014e8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80014b4:	f000 fdfa 	bl	80020ac <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <prvCheckTasksWaitingTermination+0x50>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3304      	adds	r3, #4
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe feb6 	bl	8000236 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <prvCheckTasksWaitingTermination+0x54>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <prvCheckTasksWaitingTermination+0x54>)
 80014d2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <prvCheckTasksWaitingTermination+0x58>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <prvCheckTasksWaitingTermination+0x58>)
 80014dc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80014de:	f000 fdff 	bl	80020e0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f810 	bl	8001508 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <prvCheckTasksWaitingTermination+0x58>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e1      	bne.n	80014b4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000304 	.word	0x20000304
 8001500:	20000330 	.word	0x20000330
 8001504:	20000318 	.word	0x20000318

08001508 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fc43 	bl	8001da0 <vPortFree>
                vPortFree( pxTCB );
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 fc40 	bl	8001da0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <prvResetNextTaskUnblockTime+0x2c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d104      	bne.n	8001540 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <prvResetNextTaskUnblockTime+0x30>)
 8001538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800153c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800153e:	e005      	b.n	800154c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <prvResetNextTaskUnblockTime+0x2c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a03      	ldr	r2, [pc, #12]	; (8001558 <prvResetNextTaskUnblockTime+0x30>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	200002e8 	.word	0x200002e8
 8001558:	20000350 	.word	0x20000350

0800155c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d06c      	beq.n	800164c <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001576:	1e5a      	subs	r2, r3, #1
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	429a      	cmp	r2, r3
 8001586:	d061      	beq.n	800164c <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158c:	2b00      	cmp	r3, #0
 800158e:	d15d      	bne.n	800164c <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	3304      	adds	r3, #4
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fe4e 	bl	8000236 <uxListRemove>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10a      	bne.n	80015b6 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	2201      	movs	r2, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <xTaskPriorityDisinherit+0xfc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4013      	ands	r3, r2
 80015b2:	4a29      	ldr	r2, [pc, #164]	; (8001658 <xTaskPriorityDisinherit+0xfc>)
 80015b4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	f1c3 0220 	rsb	r2, r3, #32
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	2201      	movs	r2, #1
 80015d0:	409a      	lsls	r2, r3
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <xTaskPriorityDisinherit+0xfc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <xTaskPriorityDisinherit+0xfc>)
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e0:	491e      	ldr	r1, [pc, #120]	; (800165c <xTaskPriorityDisinherit+0x100>)
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	3304      	adds	r3, #4
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	3204      	adds	r2, #4
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1d1a      	adds	r2, r3, #4
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4a0f      	ldr	r2, [pc, #60]	; (800165c <xTaskPriorityDisinherit+0x100>)
 8001620:	441a      	add	r2, r3
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162a:	490c      	ldr	r1, [pc, #48]	; (800165c <xTaskPriorityDisinherit+0x100>)
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	1c59      	adds	r1, r3, #1
 800163a:	4808      	ldr	r0, [pc, #32]	; (800165c <xTaskPriorityDisinherit+0x100>)
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4403      	add	r3, r0
 8001646:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001648:	2301      	movs	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800164c:	697b      	ldr	r3, [r7, #20]
    }
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000338 	.word	0x20000338
 800165c:	20000040 	.word	0x20000040

08001660 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800166a:	4b36      	ldr	r3, [pc, #216]	; (8001744 <prvAddCurrentTaskToDelayedList+0xe4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001670:	4b35      	ldr	r3, [pc, #212]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3304      	adds	r3, #4
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fddd 	bl	8000236 <uxListRemove>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10b      	bne.n	800169a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	2201      	movs	r2, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <prvAddCurrentTaskToDelayedList+0xec>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4013      	ands	r3, r2
 8001696:	4a2d      	ldr	r2, [pc, #180]	; (800174c <prvAddCurrentTaskToDelayedList+0xec>)
 8001698:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016a0:	d124      	bne.n	80016ec <prvAddCurrentTaskToDelayedList+0x8c>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d021      	beq.n	80016ec <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	6892      	ldr	r2, [r2, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	3204      	adds	r2, #4
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	1d1a      	adds	r2, r3, #4
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016dc:	615a      	str	r2, [r3, #20]
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	4a1a      	ldr	r2, [pc, #104]	; (8001750 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80016ea:	e026      	b.n	800173a <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	d209      	bcs.n	8001718 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3304      	adds	r3, #4
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f7fe fd58 	bl	80001c6 <vListInsert>
}
 8001716:	e010      	b.n	800173a <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <prvAddCurrentTaskToDelayedList+0xf8>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3304      	adds	r3, #4
 8001722:	4619      	mov	r1, r3
 8001724:	4610      	mov	r0, r2
 8001726:	f7fe fd4e 	bl	80001c6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <prvAddCurrentTaskToDelayedList+0xfc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d202      	bcs.n	800173a <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8001734:	4a09      	ldr	r2, [pc, #36]	; (800175c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6013      	str	r3, [r2, #0]
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000334 	.word	0x20000334
 8001748:	2000003c 	.word	0x2000003c
 800174c:	20000338 	.word	0x20000338
 8001750:	2000031c 	.word	0x2000031c
 8001754:	200002ec 	.word	0x200002ec
 8001758:	200002e8 	.word	0x200002e8
 800175c:	20000350 	.word	0x20000350

08001760 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800176a:	f000 fa35 	bl	8001bd8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <xTimerCreateTimerTask+0x38>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <xTimerCreateTimerTask+0x3c>)
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	231f      	movs	r3, #31
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2300      	movs	r3, #0
 8001780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001784:	4906      	ldr	r1, [pc, #24]	; (80017a0 <xTimerCreateTimerTask+0x40>)
 8001786:	4807      	ldr	r0, [pc, #28]	; (80017a4 <xTimerCreateTimerTask+0x44>)
 8001788:	f7ff f8aa 	bl	80008e0 <xTaskCreate>
 800178c:	6078      	str	r0, [r7, #4]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
 800178e:	687b      	ldr	r3, [r7, #4]
    }
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000038c 	.word	0x2000038c
 800179c:	20000390 	.word	0x20000390
 80017a0:	08002fec 	.word	0x08002fec
 80017a4:	0800184d 	.word	0x0800184d

080017a8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80017b4:	e008      	b.n	80017c8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	4413      	add	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	699a      	ldr	r2, [r3, #24]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	18d1      	adds	r1, r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 f8db 	bl	8001990 <prvInsertTimerInActiveList>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1ea      	bne.n	80017b6 <prvReloadTimer+0xe>
        }
    }
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <prvProcessExpiredTimer+0x5c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3304      	adds	r3, #4
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fd16 	bl	8000236 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f7ff ffc3 	bl	80017a8 <prvReloadTimer>
 8001822:	e008      	b.n	8001836 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	b2da      	uxtb	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	4798      	blx	r3
    }
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000384 	.word	0x20000384

0800184c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f857 	bl	800190c <prvGetNextExpireTime>
 800185e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4619      	mov	r1, r3
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 f803 	bl	8001870 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800186a:	f000 f8d3 	bl	8001a14 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800186e:	e7f1      	b.n	8001854 <prvTimerTask+0x8>

08001870 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800187a:	f7ff f9e9 	bl	8000c50 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f864 	bl	8001950 <prvSampleTimeNow>
 8001888:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d130      	bne.n	80018f2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10a      	bne.n	80018ac <prvProcessTimerOrBlockTask+0x3c>
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	429a      	cmp	r2, r3
 800189c:	d806      	bhi.n	80018ac <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800189e:	f7ff f9e5 	bl	8000c6c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80018a2:	68f9      	ldr	r1, [r7, #12]
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffa1 	bl	80017ec <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80018aa:	e024      	b.n	80018f6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d008      	beq.n	80018c4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <prvProcessTimerOrBlockTask+0x90>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <prvProcessTimerOrBlockTask+0x50>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <prvProcessTimerOrBlockTask+0x52>
 80018c0:	2300      	movs	r3, #0
 80018c2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <prvProcessTimerOrBlockTask+0x94>)
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7fe ff97 	bl	8000804 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80018d6:	f7ff f9c9 	bl	8000c6c <xTaskResumeAll>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10a      	bne.n	80018f6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <prvProcessTimerOrBlockTask+0x98>)
 80018e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	f3bf 8f4f 	dsb	sy
 80018ec:	f3bf 8f6f 	isb	sy
    }
 80018f0:	e001      	b.n	80018f6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80018f2:	f7ff f9bb 	bl	8000c6c <xTaskResumeAll>
    }
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000388 	.word	0x20000388
 8001904:	2000038c 	.word	0x2000038c
 8001908:	e000ed04 	.word	0xe000ed04

0800190c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <prvGetNextExpireTime+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <prvGetNextExpireTime+0x16>
 800191e:	2201      	movs	r2, #1
 8001920:	e000      	b.n	8001924 <prvGetNextExpireTime+0x18>
 8001922:	2200      	movs	r2, #0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <prvGetNextExpireTime+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e001      	b.n	8001940 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001940:	68fb      	ldr	r3, [r7, #12]
    }
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	20000384 	.word	0x20000384

08001950 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001958:	f7ff fa74 	bl	8000e44 <xTaskGetTickCount>
 800195c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <prvSampleTimeNow+0x3c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d205      	bcs.n	8001974 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001968:	f000 f910 	bl	8001b8c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e002      	b.n	800197a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <prvSampleTimeNow+0x3c>)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001980:	68fb      	ldr	r3, [r7, #12]
    }
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000394 	.word	0x20000394

08001990 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d812      	bhi.n	80019dc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	1ad2      	subs	r2, r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d302      	bcc.n	80019ca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80019c4:	2301      	movs	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e01b      	b.n	8001a02 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <prvInsertTimerInActiveList+0x7c>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3304      	adds	r3, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f7fe fbf6 	bl	80001c6 <vListInsert>
 80019da:	e012      	b.n	8001a02 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d206      	bcs.n	80019f2 <prvInsertTimerInActiveList+0x62>
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d302      	bcc.n	80019f2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80019ec:	2301      	movs	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	e007      	b.n	8001a02 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <prvInsertTimerInActiveList+0x80>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3304      	adds	r3, #4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4610      	mov	r0, r2
 80019fe:	f7fe fbe2 	bl	80001c6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001a02:	697b      	ldr	r3, [r7, #20]
    }
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000388 	.word	0x20000388
 8001a10:	20000384 	.word	0x20000384

08001a14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001a1a:	e0a5      	b.n	8001b68 <prvProcessReceivedCommands+0x154>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da0a      	bge.n	8001a38 <prvProcessReceivedCommands+0x24>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	3304      	adds	r3, #4
 8001a26:	61fb      	str	r3, [r7, #28]
                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	6850      	ldr	r0, [r2, #4]
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	6892      	ldr	r2, [r2, #8]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f2c0 8093 	blt.w	8001b66 <prvProcessReceivedCommands+0x152>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <prvProcessReceivedCommands+0x42>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fbf0 	bl	8000236 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001a56:	463b      	mov	r3, r7
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff79 	bl	8001950 <prvSampleTimeNow>
 8001a5e:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d87f      	bhi.n	8001b68 <prvProcessReceivedCommands+0x154>
 8001a68:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <prvProcessReceivedCommands+0x5c>)
 8001a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6e:	bf00      	nop
 8001a70:	08001a95 	.word	0x08001a95
 8001a74:	08001a95 	.word	0x08001a95
 8001a78:	08001afd 	.word	0x08001afd
 8001a7c:	08001b11 	.word	0x08001b11
 8001a80:	08001b3d 	.word	0x08001b3d
 8001a84:	08001a95 	.word	0x08001a95
 8001a88:	08001a95 	.word	0x08001a95
 8001a8c:	08001afd 	.word	0x08001afd
 8001a90:	08001b11 	.word	0x08001b11
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	18d1      	adds	r1, r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	69b8      	ldr	r0, [r7, #24]
 8001ab4:	f7ff ff6c 	bl	8001990 <prvInsertTimerInActiveList>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d054      	beq.n	8001b68 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <prvProcessReceivedCommands+0xcc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	69b8      	ldr	r0, [r7, #24]
 8001ada:	f7ff fe65 	bl	80017a8 <prvReloadTimer>
 8001ade:	e008      	b.n	8001af2 <prvProcessReceivedCommands+0xde>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	69b8      	ldr	r0, [r7, #24]
 8001af8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001afa:	e035      	b.n	8001b68 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8001b0e:	e02b      	b.n	8001b68 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	619a      	str	r2, [r3, #24]
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	699a      	ldr	r2, [r3, #24]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	18d1      	adds	r1, r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	69b8      	ldr	r0, [r7, #24]
 8001b36:	f7ff ff2b 	bl	8001990 <prvInsertTimerInActiveList>
                        break;
 8001b3a:	e015      	b.n	8001b68 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d103      	bne.n	8001b52 <prvProcessReceivedCommands+0x13e>
                                {
                                    vPortFree( pxTimer );
 8001b4a:	69b8      	ldr	r0, [r7, #24]
 8001b4c:	f000 f928 	bl	8001da0 <vPortFree>
 8001b50:	e00a      	b.n	8001b68 <prvProcessReceivedCommands+0x154>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001b64:	e000      	b.n	8001b68 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8001b66:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <prvProcessReceivedCommands+0x174>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	1d39      	adds	r1, r7, #4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fc5f 	bl	8000434 <xQueueReceive>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f47f af4f 	bne.w	8001a1c <prvProcessReceivedCommands+0x8>
        }
    }
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000038c 	.word	0x2000038c

08001b8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001b92:	e009      	b.n	8001ba8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <prvSwitchTimerLists+0x44>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001b9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ba2:	6838      	ldr	r0, [r7, #0]
 8001ba4:	f7ff fe22 	bl	80017ec <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <prvSwitchTimerLists+0x44>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <prvSwitchTimerLists+0x44>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <prvSwitchTimerLists+0x48>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <prvSwitchTimerLists+0x44>)
 8001bbe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <prvSwitchTimerLists+0x48>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
    }
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000384 	.word	0x20000384
 8001bd4:	20000388 	.word	0x20000388

08001bd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001bdc:	f000 fa66 	bl	80020ac <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <prvCheckForValidListAndQueue+0x54>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d11d      	bne.n	8001c24 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001be8:	4811      	ldr	r0, [pc, #68]	; (8001c30 <prvCheckForValidListAndQueue+0x58>)
 8001bea:	f7fe fac1 	bl	8000170 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001bee:	4811      	ldr	r0, [pc, #68]	; (8001c34 <prvCheckForValidListAndQueue+0x5c>)
 8001bf0:	f7fe fabe 	bl	8000170 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <prvCheckForValidListAndQueue+0x60>)
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <prvCheckForValidListAndQueue+0x58>)
 8001bf8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <prvCheckForValidListAndQueue+0x64>)
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <prvCheckForValidListAndQueue+0x5c>)
 8001bfe:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001c00:	2200      	movs	r2, #0
 8001c02:	2110      	movs	r1, #16
 8001c04:	200a      	movs	r0, #10
 8001c06:	f7fe fbb3 	bl	8000370 <xQueueGenericCreate>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <prvCheckForValidListAndQueue+0x54>)
 8001c0e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <prvCheckForValidListAndQueue+0x54>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <prvCheckForValidListAndQueue+0x54>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4908      	ldr	r1, [pc, #32]	; (8001c40 <prvCheckForValidListAndQueue+0x68>)
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fdb0 	bl	8000784 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001c24:	f000 fa5c 	bl	80020e0 <vPortExitCritical>
    }
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000038c 	.word	0x2000038c
 8001c30:	2000035c 	.word	0x2000035c
 8001c34:	20000370 	.word	0x20000370
 8001c38:	20000384 	.word	0x20000384
 8001c3c:	20000388 	.word	0x20000388
 8001c40:	08002ff4 	.word	0x08002ff4

08001c44 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8001c50:	f7fe fffe 	bl	8000c50 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001c54:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <pvPortMalloc+0x144>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001c5c:	f000 f8e0 	bl	8001e20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001c60:	4b4a      	ldr	r3, [pc, #296]	; (8001d8c <pvPortMalloc+0x148>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f040 8086 	bne.w	8001d7a <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01e      	beq.n	8001cb2 <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001c74:	2208      	movs	r2, #8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d218      	bcs.n	8001cb2 <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8001c80:	2208      	movs	r2, #8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d011      	beq.n	8001cb6 <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f023 0307 	bic.w	r3, r3, #7
 8001c98:	3308      	adds	r3, #8
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d205      	bcs.n	8001cac <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f023 0307 	bic.w	r3, r3, #7
 8001ca6:	3308      	adds	r3, #8
 8001ca8:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001caa:	e004      	b.n	8001cb6 <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001cb0:	e001      	b.n	8001cb6 <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d05e      	beq.n	8001d7a <pvPortMalloc+0x136>
 8001cbc:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <pvPortMalloc+0x14c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d859      	bhi.n	8001d7a <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001cc6:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <pvPortMalloc+0x150>)
 8001cc8:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8001cca:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <pvPortMalloc+0x150>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001cd0:	e004      	b.n	8001cdc <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d903      	bls.n	8001cee <pvPortMalloc+0xaa>
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f1      	bne.n	8001cd2 <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <pvPortMalloc+0x144>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d040      	beq.n	8001d7a <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	1ad2      	subs	r2, r2, r3
 8001d12:	2308      	movs	r3, #8
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d90f      	bls.n	8001d3a <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	1ad2      	subs	r2, r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001d34:	68b8      	ldr	r0, [r7, #8]
 8001d36:	f000 f8d5 	bl	8001ee4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <pvPortMalloc+0x14c>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <pvPortMalloc+0x14c>)
 8001d46:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <pvPortMalloc+0x14c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <pvPortMalloc+0x154>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d203      	bcs.n	8001d5c <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <pvPortMalloc+0x14c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <pvPortMalloc+0x154>)
 8001d5a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <pvPortMalloc+0x148>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <pvPortMalloc+0x158>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <pvPortMalloc+0x158>)
 8001d78:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001d7a:	f7fe ff77 	bl	8000c6c <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200093a0 	.word	0x200093a0
 8001d8c:	200093b4 	.word	0x200093b4
 8001d90:	200093a4 	.word	0x200093a4
 8001d94:	20009398 	.word	0x20009398
 8001d98:	200093a8 	.word	0x200093a8
 8001d9c:	200093ac 	.word	0x200093ac

08001da0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d02c      	beq.n	8001e0c <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001db2:	2308      	movs	r3, #8
 8001db4:	425b      	negs	r3, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4413      	add	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <vPortFree+0x74>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01e      	beq.n	8001e0c <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d11a      	bne.n	8001e0c <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <vPortFree+0x74>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	401a      	ands	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001de6:	f7fe ff33 	bl	8000c50 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <vPortFree+0x78>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a08      	ldr	r2, [pc, #32]	; (8001e18 <vPortFree+0x78>)
 8001df6:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001df8:	68b8      	ldr	r0, [r7, #8]
 8001dfa:	f000 f873 	bl	8001ee4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <vPortFree+0x7c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <vPortFree+0x7c>)
 8001e06:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001e08:	f7fe ff30 	bl	8000c6c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200093b4 	.word	0x200093b4
 8001e18:	200093a4 	.word	0x200093a4
 8001e1c:	200093b0 	.word	0x200093b0

08001e20 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e26:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001e2a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001e2c:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <prvHeapInit+0xac>)
 8001e2e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3307      	adds	r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 0307 	bic.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ecc <prvHeapInit+0xac>)
 8001e50:	4413      	add	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <prvHeapInit+0xb0>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <prvHeapInit+0xb0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	4413      	add	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f023 0307 	bic.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <prvHeapInit+0xb4>)
 8001e80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <prvHeapInit+0xb4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2200      	movs	r2, #0
 8001e88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <prvHeapInit+0xb4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	1ad2      	subs	r2, r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <prvHeapInit+0xb4>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <prvHeapInit+0xb8>)
 8001eae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a09      	ldr	r2, [pc, #36]	; (8001edc <prvHeapInit+0xbc>)
 8001eb6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <prvHeapInit+0xc0>)
 8001eba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ebe:	601a      	str	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000398 	.word	0x20000398
 8001ed0:	20009398 	.word	0x20009398
 8001ed4:	200093a0 	.word	0x200093a0
 8001ed8:	200093a8 	.word	0x200093a8
 8001edc:	200093a4 	.word	0x200093a4
 8001ee0:	200093b4 	.word	0x200093b4

08001ee4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <prvInsertBlockIntoFreeList+0xa8>)
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e002      	b.n	8001ef8 <prvInsertBlockIntoFreeList+0x14>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d8f7      	bhi.n	8001ef2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d108      	bne.n	8001f26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	441a      	add	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	441a      	add	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d118      	bne.n	8001f6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <prvInsertBlockIntoFreeList+0xac>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d00d      	beq.n	8001f62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	441a      	add	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e008      	b.n	8001f74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <prvInsertBlockIntoFreeList+0xac>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e003      	b.n	8001f74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d002      	beq.n	8001f82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	20009398 	.word	0x20009398
 8001f90:	200093a0 	.word	0x200093a0

08001f94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	3b04      	subs	r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f023 0201 	bic.w	r2, r3, #1
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3b04      	subs	r3, #4
 8001fc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001fc4:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <pxPortInitialiseStack+0x54>)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3b14      	subs	r3, #20
 8001fce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3b20      	subs	r3, #32
 8001fda:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	08001fed 	.word	0x08001fed

08001fec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ffa:	f383 8811 	msr	BASEPRI, r3
 8001ffe:	f3bf 8f6f 	isb	sy
 8002002:	f3bf 8f4f 	dsb	sy
 8002006:	607b      	str	r3, [r7, #4]
    }
 8002008:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800200a:	bf00      	nop
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0fc      	beq.n	800200c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
	...

08002020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <pxCurrentTCBConst2>)
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	6808      	ldr	r0, [r1, #0]
 8002026:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800202a:	f380 8809 	msr	PSP, r0
 800202e:	f3bf 8f6f 	isb	sy
 8002032:	f04f 0000 	mov.w	r0, #0
 8002036:	f380 8811 	msr	BASEPRI, r0
 800203a:	f04e 0e0d 	orr.w	lr, lr, #13
 800203e:	4770      	bx	lr

08002040 <pxCurrentTCBConst2>:
 8002040:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop

08002048 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8002048:	4806      	ldr	r0, [pc, #24]	; (8002064 <prvPortStartFirstTask+0x1c>)
 800204a:	6800      	ldr	r0, [r0, #0]
 800204c:	6800      	ldr	r0, [r0, #0]
 800204e:	f380 8808 	msr	MSP, r0
 8002052:	b662      	cpsie	i
 8002054:	b661      	cpsie	f
 8002056:	f3bf 8f4f 	dsb	sy
 800205a:	f3bf 8f6f 	isb	sy
 800205e:	df00      	svc	0
 8002060:	bf00      	nop
 8002062:	0000      	.short	0x0000
 8002064:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop

0800206c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <xPortStartScheduler+0x38>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <xPortStartScheduler+0x38>)
 8002076:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800207a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <xPortStartScheduler+0x38>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <xPortStartScheduler+0x38>)
 8002082:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002086:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002088:	f000 f890 	bl	80021ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <xPortStartScheduler+0x3c>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002092:	f7ff ffd9 	bl	8002048 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002096:	f7fe ffe9 	bl	800106c <vTaskSwitchContext>
    prvTaskExitError();
 800209a:	f7ff ffa7 	bl	8001fec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	e000ed20 	.word	0xe000ed20
 80020a8:	20000004 	.word	0x20000004

080020ac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
        __asm volatile
 80020b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b6:	f383 8811 	msr	BASEPRI, r3
 80020ba:	f3bf 8f6f 	isb	sy
 80020be:	f3bf 8f4f 	dsb	sy
 80020c2:	607b      	str	r3, [r7, #4]
    }
 80020c4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <vPortEnterCritical+0x30>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <vPortEnterCritical+0x30>)
 80020ce:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000004 	.word	0x20000004

080020e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <vPortExitCritical+0x30>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	4a08      	ldr	r2, [pc, #32]	; (8002110 <vPortExitCritical+0x30>)
 80020ee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <vPortExitCritical+0x30>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <vPortExitCritical+0x24>
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002102:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000004 	.word	0x20000004
	...

08002120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002120:	f3ef 8009 	mrs	r0, PSP
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <pxCurrentTCBConst>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002130:	6010      	str	r0, [r2, #0]
 8002132:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002136:	f04f 0050 	mov.w	r0, #80	; 0x50
 800213a:	f380 8811 	msr	BASEPRI, r0
 800213e:	f7fe ff95 	bl	800106c <vTaskSwitchContext>
 8002142:	f04f 0000 	mov.w	r0, #0
 8002146:	f380 8811 	msr	BASEPRI, r0
 800214a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800214e:	6819      	ldr	r1, [r3, #0]
 8002150:	6808      	ldr	r0, [r1, #0]
 8002152:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002156:	f380 8809 	msr	PSP, r0
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	4770      	bx	lr

08002160 <pxCurrentTCBConst>:
 8002160:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop

08002168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
        __asm volatile
 800216e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002172:	f383 8811 	msr	BASEPRI, r3
 8002176:	f3bf 8f6f 	isb	sy
 800217a:	f3bf 8f4f 	dsb	sy
 800217e:	607b      	str	r3, [r7, #4]
    }
 8002180:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002182:	f7fe fe6d 	bl	8000e60 <xTaskIncrementTick>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <xPortSysTickHandler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <xPortSysTickHandler+0x40>)
 800218e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	2300      	movs	r3, #0
 8002196:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	f383 8811 	msr	BASEPRI, r3
    }
 800219e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	e000ed04 	.word	0xe000ed04

080021ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <vPortSetupTimerInterrupt+0x30>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <vPortSetupTimerInterrupt+0x34>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <vPortSetupTimerInterrupt+0x38>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a09      	ldr	r2, [pc, #36]	; (80021e8 <vPortSetupTimerInterrupt+0x3c>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	099b      	lsrs	r3, r3, #6
 80021c8:	4a08      	ldr	r2, [pc, #32]	; (80021ec <vPortSetupTimerInterrupt+0x40>)
 80021ca:	3b01      	subs	r3, #1
 80021cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80021ce:	4b03      	ldr	r3, [pc, #12]	; (80021dc <vPortSetupTimerInterrupt+0x30>)
 80021d0:	2207      	movs	r2, #7
 80021d2:	601a      	str	r2, [r3, #0]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	e000e010 	.word	0xe000e010
 80021e0:	e000e018 	.word	0xe000e018
 80021e4:	20000008 	.word	0x20000008
 80021e8:	10624dd3 	.word	0x10624dd3
 80021ec:	e000e014 	.word	0xe000e014

080021f0 <main>:
void my_task(void *pvParam);
TaskHandle_t my_handle;
void task00(void *pvParam);
TaskHandle_t task00_handle;
int main(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af02      	add	r7, sp, #8
        hardware_init();
 80021f6:	f000 f8eb 	bl	80023d0 <hardware_init>
        xTaskCreate(
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <main+0x44>)
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	2302      	movs	r3, #2
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2300      	movs	r3, #0
 8002204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002208:	490b      	ldr	r1, [pc, #44]	; (8002238 <main+0x48>)
 800220a:	480c      	ldr	r0, [pc, #48]	; (800223c <main+0x4c>)
 800220c:	f7fe fb68 	bl	80008e0 <xTaskCreate>
                (char *        )"MY_TASK",              //任务名称
                (uint16_t      )1024,                   //任务栈大小
                (void *        )NULL,                   //任务参数
                (UBaseType_t   )2,                      //任务优先级
                (TaskHandle_t *)&my_handle      );      //任务句柄
        xTaskCreate(
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <main+0x50>)
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	2302      	movs	r3, #2
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2300      	movs	r3, #0
 800221a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800221e:	4909      	ldr	r1, [pc, #36]	; (8002244 <main+0x54>)
 8002220:	4809      	ldr	r0, [pc, #36]	; (8002248 <main+0x58>)
 8002222:	f7fe fb5d 	bl	80008e0 <xTaskCreate>
                (char *        )"TASK00",               //任务名称
                (uint16_t      )1024,                   //任务栈大小
                (void *        )NULL,                   //任务参数
                (UBaseType_t   )2,                      //任务优先级
                (TaskHandle_t *)&task00_handle  );      //任务句柄
        vTaskStartScheduler();
 8002226:	f7fe fcd1 	bl	8000bcc <vTaskStartScheduler>
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200093f8 	.word	0x200093f8
 8002238:	08002ffc 	.word	0x08002ffc
 800223c:	0800224d 	.word	0x0800224d
 8002240:	200093fc 	.word	0x200093fc
 8002244:	08003004 	.word	0x08003004
 8002248:	08002279 	.word	0x08002279

0800224c <my_task>:
void my_task(void *pvParam)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
        for (;;) {
                uint8_t string[] = "my_task!\n";
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <my_task+0x28>)
 8002256:	f107 030c 	add.w	r3, r7, #12
 800225a:	ca07      	ldmia	r2, {r0, r1, r2}
 800225c:	c303      	stmia	r3!, {r0, r1}
 800225e:	801a      	strh	r2, [r3, #0]
                print(string);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f901 	bl	800246c <print>
                vTaskDelay(1000 / portTICK_PERIOD_MS);
 800226a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800226e:	f7fe fc89 	bl	8000b84 <vTaskDelay>
        for (;;) {
 8002272:	e7ef      	b.n	8002254 <my_task+0x8>
 8002274:	0800300c 	.word	0x0800300c

08002278 <task00>:

        }
}
void task00(void *pvParam)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
        for (;;) {
                uint8_t string[] = "task00!\n";
 8002280:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <task00+0x28>)
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	ca07      	ldmia	r2, {r0, r1, r2}
 8002288:	c303      	stmia	r3!, {r0, r1}
 800228a:	701a      	strb	r2, [r3, #0]
                print(string);
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f8eb 	bl	800246c <print>
                vTaskDelay(2000 / portTICK_PERIOD_MS);
 8002296:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800229a:	f7fe fc73 	bl	8000b84 <vTaskDelay>
        for (;;) {
 800229e:	e7ef      	b.n	8002280 <task00+0x8>
 80022a0:	08003018 	.word	0x08003018

080022a4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <HardFault_Handler+0x4>

080022b6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <MemManage_Handler+0x4>

080022bc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <BusFault_Handler+0x4>

080022c2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80022c6:	e7fe      	b.n	80022c6 <UsageFault_Handler+0x4>

080022c8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
extern void xPortSysTickHandler(void);
void SysTick_Handler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
        #if (INCLUDE_xTaskGetSchedulerState == 1)
        if (xTaskGetSchedulerState() != taskSCHEDULDER_NOT_STARTED)
        {
        #endif
                xPortSysTickHandler();
 80022d8:	f7ff ff46 	bl	8002168 <xPortSysTickHandler>
        #if (INCLUDE_xTaskGetSchedulerState == 1)
        }
        #endif

}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}

080022e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022e0:	480d      	ldr	r0, [pc, #52]	; (8002318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80022e4:	f000 f8f4 	bl	80024d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <LoopForever+0x6>)
  ldr r1, =_edata
 80022ea:	490d      	ldr	r1, [pc, #52]	; (8002320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <LoopForever+0xe>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002300:	4c0a      	ldr	r4, [pc, #40]	; (800232c <LoopForever+0x16>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800230e:	f000 fe23 	bl	8002f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002312:	f7ff ff6d 	bl	80021f0 <main>

08002316 <LoopForever>:

LoopForever:
    b LoopForever
 8002316:	e7fe      	b.n	8002316 <LoopForever>
  ldr   r0, =_estack
 8002318:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002324:	0800302c 	.word	0x0800302c
  ldr r2, =_sbss
 8002328:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800232c:	20009400 	.word	0x20009400

08002330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC1_2_IRQHandler>

08002332 <clock_setup>:

/*******************************************************************************
        => STM32F10x__RCC__设置外部高速时钟__72MHz__
*******************************************************************************/
static void clock_setup(void)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	af00      	add	r7, sp, #0
        RCC_DeInit();                                         //初始化为缺省值
 8002336:	f000 fa87 	bl	8002848 <RCC_DeInit>
        RCC_HSEConfig(RCC_HSE_ON);                            //使能外部高速时		
 800233a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800233e:	f000 fab1 	bl	80028a4 <RCC_HSEConfig>
        while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);  //等待外部高速时钟稳定
 8002342:	bf00      	nop
 8002344:	2031      	movs	r0, #49	; 0x31
 8002346:	f000 fc97 	bl	8002c78 <RCC_GetFlagStatus>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f9      	beq.n	8002344 <clock_setup+0x12>
        FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable); //enable prefetch buffer
 8002350:	2010      	movs	r0, #16
 8002352:	f000 f9a5 	bl	80026a0 <FLASH_PrefetchBufferCmd>
        FLASH_SetLatency(FLASH_Latency_2);                    //flash 2 wait state
 8002356:	2002      	movs	r0, #2
 8002358:	f000 f986 	bl	8002668 <FLASH_SetLatency>
        RCC_HCLKConfig(RCC_SYSCLK_Div1);                      //HCLK   = SYSCLK
 800235c:	2000      	movs	r0, #0
 800235e:	f000 fb27 	bl	80029b0 <RCC_HCLKConfig>
        RCC_PCLK2Config(RCC_HCLK_Div1);                       //PCLK2  = HCLK
 8002362:	2000      	movs	r0, #0
 8002364:	f000 fb5c 	bl	8002a20 <RCC_PCLK2Config>
        RCC_PCLK1Config(RCC_HCLK_Div2);                       //PCLK1  = HCLK/2
 8002368:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800236c:	f000 fb3c 	bl	80029e8 <RCC_PCLK1Config>
        RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);  //PLLCLK = 8MHz*9 =72MHz
 8002370:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8002374:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002378:	f000 fac2 	bl	8002900 <RCC_PLLConfig>
        RCC_PLLCmd(ENABLE);                                   //enable PLLCLK
 800237c:	2001      	movs	r0, #1
 800237e:	f000 fadd 	bl	800293c <RCC_PLLCmd>
        while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);  //wait till  PLLCLK is ready
 8002382:	bf00      	nop
 8002384:	2039      	movs	r0, #57	; 0x39
 8002386:	f000 fc77 	bl	8002c78 <RCC_GetFlagStatus>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f9      	beq.n	8002384 <clock_setup+0x52>
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);            //select PPLL as system clock
 8002390:	2002      	movs	r0, #2
 8002392:	f000 fae3 	bl	800295c <RCC_SYSCLKConfig>
        while (RCC_GetSYSCLKSource() != 0x08); //wait till PLL is used as system clock source
 8002396:	bf00      	nop
 8002398:	f000 fafc 	bl	8002994 <RCC_GetSYSCLKSource>
 800239c:	4603      	mov	r3, r0
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d1fa      	bne.n	8002398 <clock_setup+0x66>
        //外设时钟开启
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80023a2:	2101      	movs	r1, #1
 80023a4:	2004      	movs	r0, #4
 80023a6:	f000 fc0d 	bl	8002bc4 <RCC_APB2PeriphClockCmd>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 80023aa:	2101      	movs	r1, #1
 80023ac:	2001      	movs	r0, #1
 80023ae:	f000 fc09 	bl	8002bc4 <RCC_APB2PeriphClockCmd>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80023b2:	2101      	movs	r1, #1
 80023b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023b8:	f000 fc04 	bl	8002bc4 <RCC_APB2PeriphClockCmd>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}

080023c0 <nvic_setup>:

static void nvic_setup(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
        //NVIC配置
        //4bit都用来表示抢占优先级（0~15）
        NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80023c4:	f44f 7040 	mov.w	r0, #768	; 0x300
 80023c8:	f000 f93c 	bl	8002644 <NVIC_PriorityGroupConfig>
}
 80023cc:	bf00      	nop
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <hardware_init>:

/*******************************************************************************
        => STM32F10x__硬件初始化__
*******************************************************************************/
void hardware_init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
        nvic_setup();
 80023d4:	f7ff fff4 	bl	80023c0 <nvic_setup>
        clock_setup();
 80023d8:	f7ff ffab 	bl	8002332 <clock_setup>
        gpio_setup();
 80023dc:	f000 f804 	bl	80023e8 <gpio_setup>
        usart_setup();
 80023e0:	f000 f822 	bl	8002428 <usart_setup>
}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <gpio_setup>:
#include "bsp_usart.h"

void gpio_setup(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
        GPIO_InitTypeDef GPIO_InitStructure;
        /* USART1_Tx 发送模式配置 */
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80023ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f2:	80bb      	strh	r3, [r7, #4]
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80023f4:	2303      	movs	r3, #3
 80023f6:	71bb      	strb	r3, [r7, #6]
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80023f8:	2318      	movs	r3, #24
 80023fa:	71fb      	strb	r3, [r7, #7]
        GPIO_Init(GPIOA, &GPIO_InitStructure);
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	4808      	ldr	r0, [pc, #32]	; (8002424 <gpio_setup+0x3c>)
 8002402:	f000 f965 	bl	80026d0 <GPIO_Init>
        /* USART1_Rx 接收模式配置 */
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8002406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800240a:	80bb      	strh	r3, [r7, #4]
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800240c:	2304      	movs	r3, #4
 800240e:	71fb      	strb	r3, [r7, #7]
        GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	4619      	mov	r1, r3
 8002414:	4803      	ldr	r0, [pc, #12]	; (8002424 <gpio_setup+0x3c>)
 8002416:	f000 f95b 	bl	80026d0 <GPIO_Init>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40010800 	.word	0x40010800

08002428 <usart_setup>:

void usart_setup(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
        USART_InitTypeDef USART_InitStructure;
        USART_DeInit(USART1);
 800242e:	480e      	ldr	r0, [pc, #56]	; (8002468 <usart_setup+0x40>)
 8002430:	f000 fc5c 	bl	8002cec <USART_DeInit>
        USART_InitStructure.USART_BaudRate = 115200;
 8002434:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002438:	603b      	str	r3, [r7, #0]
        USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800243a:	2300      	movs	r3, #0
 800243c:	80bb      	strh	r3, [r7, #4]
        USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800243e:	2300      	movs	r3, #0
 8002440:	80fb      	strh	r3, [r7, #6]
        USART_InitStructure.USART_Parity = USART_Parity_No;
 8002442:	2300      	movs	r3, #0
 8002444:	813b      	strh	r3, [r7, #8]
        USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002446:	2300      	movs	r3, #0
 8002448:	81bb      	strh	r3, [r7, #12]
        USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800244a:	230c      	movs	r3, #12
 800244c:	817b      	strh	r3, [r7, #10]
        USART_Init(USART1, &USART_InitStructure);
 800244e:	463b      	mov	r3, r7
 8002450:	4619      	mov	r1, r3
 8002452:	4805      	ldr	r0, [pc, #20]	; (8002468 <usart_setup+0x40>)
 8002454:	f000 fca6 	bl	8002da4 <USART_Init>
        /* Enable USART1 Receive and Transmit interrupts */
        //USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
        //USART_ITConfig(USART1, USART_IT_TXE, ENABLE);

        /* Enable the USART1 */
        USART_Cmd(USART1, ENABLE);
 8002458:	2101      	movs	r1, #1
 800245a:	4803      	ldr	r0, [pc, #12]	; (8002468 <usart_setup+0x40>)
 800245c:	f000 fd5c 	bl	8002f18 <USART_Cmd>
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40013800 	.word	0x40013800

0800246c <print>:


void print(uint8_t string[])
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
        uint8_t i = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
        uint16_t timeout = 50000;
 8002478:	f24c 3350 	movw	r3, #50000	; 0xc350
 800247c:	81bb      	strh	r3, [r7, #12]
        while (string[i] != '\0') {                     //如果字符不是（尾0）
 800247e:	e019      	b.n	80024b4 <print+0x48>
                USART1->DR  = string[i++];              //写入要发送的内容
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	73fa      	strb	r2, [r7, #15]
 8002486:	461a      	mov	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <print+0x60>)
 8002490:	b292      	uxth	r2, r2
 8002492:	809a      	strh	r2, [r3, #4]
                while ((USART1->SR & 0x40) == 0) {      //等待一个字符发送完成
 8002494:	e004      	b.n	80024a0 <print+0x34>
                        if (timeout-- == 0) {
 8002496:	89bb      	ldrh	r3, [r7, #12]
 8002498:	1e5a      	subs	r2, r3, #1
 800249a:	81ba      	strh	r2, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d010      	beq.n	80024c2 <print+0x56>
                while ((USART1->SR & 0x40) == 0) {      //等待一个字符发送完成
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <print+0x60>)
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f3      	beq.n	8002496 <print+0x2a>
                                return;
                        }
                }
                timeout = 50000;
 80024ae:	f24c 3350 	movw	r3, #50000	; 0xc350
 80024b2:	81bb      	strh	r3, [r7, #12]
        while (string[i] != '\0') {                     //如果字符不是（尾0）
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1df      	bne.n	8002480 <print+0x14>
 80024c0:	e000      	b.n	80024c4 <print+0x58>
                                return;
 80024c2:	bf00      	nop
        }
}
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40013800 	.word	0x40013800

080024d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <SystemInit+0x5c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <SystemInit+0x5c>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <SystemInit+0x5c>)
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	4911      	ldr	r1, [pc, #68]	; (800252c <SystemInit+0x5c>)
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <SystemInit+0x60>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <SystemInit+0x5c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0e      	ldr	r2, [pc, #56]	; (800252c <SystemInit+0x5c>)
 80024f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80024f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <SystemInit+0x5c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0a      	ldr	r2, [pc, #40]	; (800252c <SystemInit+0x5c>)
 8002502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002506:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <SystemInit+0x5c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a07      	ldr	r2, [pc, #28]	; (800252c <SystemInit+0x5c>)
 800250e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002512:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <SystemInit+0x5c>)
 8002516:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800251a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800251c:	f000 f80c 	bl	8002538 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SystemInit+0x64>)
 8002522:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002526:	609a      	str	r2, [r3, #8]
#endif 
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000
 8002530:	f8ff0000 	.word	0xf8ff0000
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800253c:	f000 f802 	bl	8002544 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}

08002544 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	2300      	movs	r3, #0
 8002550:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002552:	4b3a      	ldr	r3, [pc, #232]	; (800263c <SetSysClockTo72+0xf8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a39      	ldr	r2, [pc, #228]	; (800263c <SetSysClockTo72+0xf8>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800255e:	4b37      	ldr	r3, [pc, #220]	; (800263c <SetSysClockTo72+0xf8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3301      	adds	r3, #1
 800256c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d103      	bne.n	800257c <SetSysClockTo72+0x38>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800257a:	d1f0      	bne.n	800255e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800257c:	4b2f      	ldr	r3, [pc, #188]	; (800263c <SetSysClockTo72+0xf8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002588:	2301      	movs	r3, #1
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	e001      	b.n	8002592 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800258e:	2300      	movs	r3, #0
 8002590:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d14b      	bne.n	8002630 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002598:	4b29      	ldr	r3, [pc, #164]	; (8002640 <SetSysClockTo72+0xfc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a28      	ldr	r2, [pc, #160]	; (8002640 <SetSysClockTo72+0xfc>)
 800259e:	f043 0310 	orr.w	r3, r3, #16
 80025a2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80025a4:	4b26      	ldr	r3, [pc, #152]	; (8002640 <SetSysClockTo72+0xfc>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a25      	ldr	r2, [pc, #148]	; (8002640 <SetSysClockTo72+0xfc>)
 80025aa:	f023 0303 	bic.w	r3, r3, #3
 80025ae:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80025b0:	4b23      	ldr	r3, [pc, #140]	; (8002640 <SetSysClockTo72+0xfc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a22      	ldr	r2, [pc, #136]	; (8002640 <SetSysClockTo72+0xfc>)
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80025bc:	4b1f      	ldr	r3, [pc, #124]	; (800263c <SetSysClockTo72+0xf8>)
 80025be:	4a1f      	ldr	r2, [pc, #124]	; (800263c <SetSysClockTo72+0xf8>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <SetSysClockTo72+0xf8>)
 80025c6:	4a1d      	ldr	r2, [pc, #116]	; (800263c <SetSysClockTo72+0xf8>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <SetSysClockTo72+0xf8>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a1a      	ldr	r2, [pc, #104]	; (800263c <SetSysClockTo72+0xf8>)
 80025d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80025d8:	4b18      	ldr	r3, [pc, #96]	; (800263c <SetSysClockTo72+0xf8>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a17      	ldr	r2, [pc, #92]	; (800263c <SetSysClockTo72+0xf8>)
 80025de:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80025e2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80025e4:	4b15      	ldr	r3, [pc, #84]	; (800263c <SetSysClockTo72+0xf8>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <SetSysClockTo72+0xf8>)
 80025ea:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80025ee:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <SetSysClockTo72+0xf8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a11      	ldr	r2, [pc, #68]	; (800263c <SetSysClockTo72+0xf8>)
 80025f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fa:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80025fc:	bf00      	nop
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <SetSysClockTo72+0xf8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f9      	beq.n	80025fe <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <SetSysClockTo72+0xf8>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a0b      	ldr	r2, [pc, #44]	; (800263c <SetSysClockTo72+0xf8>)
 8002610:	f023 0303 	bic.w	r3, r3, #3
 8002614:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <SetSysClockTo72+0xf8>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a08      	ldr	r2, [pc, #32]	; (800263c <SetSysClockTo72+0xf8>)
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002622:	bf00      	nop
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <SetSysClockTo72+0xf8>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b08      	cmp	r3, #8
 800262e:	d1f9      	bne.n	8002624 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	40022000 	.word	0x40022000

08002644 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800264c:	4a05      	ldr	r2, [pc, #20]	; (8002664 <NVIC_PriorityGroupConfig+0x20>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002658:	60d3      	str	r3, [r2, #12]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <FLASH_SetLatency>:
  *     @arg FLASH_Latency_1: FLASH One Latency cycle
  *     @arg FLASH_Latency_2: FLASH Two Latency cycles
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <FLASH_SetLatency+0x34>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002680:	60fb      	str	r3, [r7, #12]
  tmpreg |= FLASH_Latency;
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 800268a:	4a04      	ldr	r2, [pc, #16]	; (800269c <FLASH_SetLatency+0x34>)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6013      	str	r3, [r2, #0]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40022000 	.word	0x40022000

080026a0 <FLASH_PrefetchBufferCmd>:
  *     @arg FLASH_PrefetchBuffer_Enable: FLASH Prefetch Buffer Enable
  *     @arg FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
  * @retval None
  */
void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <FLASH_PrefetchBufferCmd+0x2c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <FLASH_PrefetchBufferCmd+0x2c>)
 80026ae:	f023 0310 	bic.w	r3, r3, #16
 80026b2:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <FLASH_PrefetchBufferCmd+0x2c>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4904      	ldr	r1, [pc, #16]	; (80026cc <FLASH_PrefetchBufferCmd+0x2c>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40022000 	.word	0x40022000

080026d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	78db      	ldrb	r3, [r3, #3]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	78db      	ldrb	r3, [r3, #3]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	789b      	ldrb	r3, [r3, #2]
 800270c:	461a      	mov	r2, r3
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4313      	orrs	r3, r2
 8002712:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d044      	beq.n	80027a8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	e038      	b.n	800279c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800272a:	2201      	movs	r2, #1
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	429a      	cmp	r2, r3
 8002746:	d126      	bne.n	8002796 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800274e:	220f      	movs	r2, #15
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	43db      	mvns	r3, r3
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4013      	ands	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	78db      	ldrb	r3, [r3, #3]
 8002774:	2b28      	cmp	r3, #40	; 0x28
 8002776:	d105      	bne.n	8002784 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8002778:	2201      	movs	r2, #1
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	409a      	lsls	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	615a      	str	r2, [r3, #20]
 8002782:	e008      	b.n	8002796 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	78db      	ldrb	r3, [r3, #3]
 8002788:	2b48      	cmp	r3, #72	; 0x48
 800278a:	d104      	bne.n	8002796 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800278c:	2201      	movs	r2, #1
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	409a      	lsls	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	3301      	adds	r3, #1
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b07      	cmp	r3, #7
 80027a0:	d9c3      	bls.n	800272a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	2bff      	cmp	r3, #255	; 0xff
 80027ae:	d946      	bls.n	800283e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	e03a      	b.n	8002832 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	3308      	adds	r3, #8
 80027c0:	2201      	movs	r2, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d127      	bne.n	800282c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80027e2:	220f      	movs	r2, #15
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4013      	ands	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	78db      	ldrb	r3, [r3, #3]
 8002808:	2b28      	cmp	r3, #40	; 0x28
 800280a:	d105      	bne.n	8002818 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	3308      	adds	r3, #8
 8002810:	2201      	movs	r2, #1
 8002812:	409a      	lsls	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	78db      	ldrb	r3, [r3, #3]
 800281c:	2b48      	cmp	r3, #72	; 0x48
 800281e:	d105      	bne.n	800282c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	3308      	adds	r3, #8
 8002824:	2201      	movs	r2, #1
 8002826:	409a      	lsls	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	3301      	adds	r3, #1
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b07      	cmp	r3, #7
 8002836:	d9c1      	bls.n	80027bc <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	605a      	str	r2, [r3, #4]
  }
}
 800283e:	bf00      	nop
 8002840:	3724      	adds	r7, #36	; 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <RCC_DeInit+0x54>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a12      	ldr	r2, [pc, #72]	; (800289c <RCC_DeInit+0x54>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <RCC_DeInit+0x54>)
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	490f      	ldr	r1, [pc, #60]	; (800289c <RCC_DeInit+0x54>)
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <RCC_DeInit+0x58>)
 8002860:	4013      	ands	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <RCC_DeInit+0x54>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0c      	ldr	r2, [pc, #48]	; (800289c <RCC_DeInit+0x54>)
 800286a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800286e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <RCC_DeInit+0x54>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a08      	ldr	r2, [pc, #32]	; (800289c <RCC_DeInit+0x54>)
 800287a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <RCC_DeInit+0x54>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4a05      	ldr	r2, [pc, #20]	; (800289c <RCC_DeInit+0x54>)
 8002886:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800288a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <RCC_DeInit+0x54>)
 800288e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002892:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40021000 	.word	0x40021000
 80028a0:	f8ff0000 	.word	0xf8ff0000

080028a4 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <RCC_HSEConfig+0x58>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a12      	ldr	r2, [pc, #72]	; (80028fc <RCC_HSEConfig+0x58>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <RCC_HSEConfig+0x58>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <RCC_HSEConfig+0x58>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c2:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ca:	d004      	beq.n	80028d6 <RCC_HSEConfig+0x32>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028d2:	d007      	beq.n	80028e4 <RCC_HSEConfig+0x40>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 80028d4:	e00d      	b.n	80028f2 <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEON_Set;
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <RCC_HSEConfig+0x58>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a08      	ldr	r2, [pc, #32]	; (80028fc <RCC_HSEConfig+0x58>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
      break;
 80028e2:	e006      	b.n	80028f2 <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <RCC_HSEConfig+0x58>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a04      	ldr	r2, [pc, #16]	; (80028fc <RCC_HSEConfig+0x58>)
 80028ea:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80028ee:	6013      	str	r3, [r2, #0]
      break;
 80028f0:	bf00      	nop
  }
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	40021000 	.word	0x40021000

08002900 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <RCC_PLLConfig+0x38>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800291a:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	4313      	orrs	r3, r2
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002928:	4a03      	ldr	r2, [pc, #12]	; (8002938 <RCC_PLLConfig+0x38>)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6053      	str	r3, [r2, #4]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	40021000 	.word	0x40021000

0800293c <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8002946:	4a04      	ldr	r2, [pc, #16]	; (8002958 <RCC_PLLCmd+0x1c>)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	6013      	str	r3, [r2, #0]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	42420060 	.word	0x42420060

0800295c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <RCC_SYSCLKConfig+0x34>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f023 0303 	bic.w	r3, r3, #3
 8002974:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800297e:	4a04      	ldr	r2, [pc, #16]	; (8002990 <RCC_SYSCLKConfig+0x34>)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6053      	str	r3, [r2, #4]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000

08002994 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8002998:	4b04      	ldr	r3, [pc, #16]	; (80029ac <RCC_GetSYSCLKSource+0x18>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	b2db      	uxtb	r3, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	40021000 	.word	0x40021000

080029b0 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <RCC_HCLKConfig+0x34>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029c8:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <RCC_HCLKConfig+0x34>)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6053      	str	r3, [r2, #4]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000

080029e8 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <RCC_PCLK1Config+0x34>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a00:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002a0a:	4a04      	ldr	r2, [pc, #16]	; (8002a1c <RCC_PCLK1Config+0x34>)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6053      	str	r3, [r2, #4]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000

08002a20 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <RCC_PCLK2Config+0x34>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a38:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002a44:	4a03      	ldr	r2, [pc, #12]	; (8002a54 <RCC_PCLK2Config+0x34>)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6053      	str	r3, [r2, #4]
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40021000 	.word	0x40021000

08002a58 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8002a70:	4b4f      	ldr	r3, [pc, #316]	; (8002bb0 <RCC_GetClocksFreq+0x158>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d011      	beq.n	8002aa4 <RCC_GetClocksFreq+0x4c>
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d83a      	bhi.n	8002afc <RCC_GetClocksFreq+0xa4>
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <RCC_GetClocksFreq+0x3c>
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d004      	beq.n	8002a9c <RCC_GetClocksFreq+0x44>
 8002a92:	e033      	b.n	8002afc <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a47      	ldr	r2, [pc, #284]	; (8002bb4 <RCC_GetClocksFreq+0x15c>)
 8002a98:	601a      	str	r2, [r3, #0]
      break;
 8002a9a:	e033      	b.n	8002b04 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a45      	ldr	r2, [pc, #276]	; (8002bb4 <RCC_GetClocksFreq+0x15c>)
 8002aa0:	601a      	str	r2, [r3, #0]
      break;
 8002aa2:	e02f      	b.n	8002b04 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8002aa4:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <RCC_GetClocksFreq+0x158>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002aac:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8002aae:	4b40      	ldr	r3, [pc, #256]	; (8002bb0 <RCC_GetClocksFreq+0x158>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab6:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	0c9b      	lsrs	r3, r3, #18
 8002abc:	3302      	adds	r3, #2
 8002abe:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4a3b      	ldr	r2, [pc, #236]	; (8002bb8 <RCC_GetClocksFreq+0x160>)
 8002aca:	fb02 f203 	mul.w	r2, r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8002ad2:	e017      	b.n	8002b04 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8002ad4:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <RCC_GetClocksFreq+0x158>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d006      	beq.n	8002aee <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4a35      	ldr	r2, [pc, #212]	; (8002bb8 <RCC_GetClocksFreq+0x160>)
 8002ae4:	fb02 f203 	mul.w	r2, r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	601a      	str	r2, [r3, #0]
      break;
 8002aec:	e00a      	b.n	8002b04 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4a30      	ldr	r2, [pc, #192]	; (8002bb4 <RCC_GetClocksFreq+0x15c>)
 8002af2:	fb02 f203 	mul.w	r2, r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	601a      	str	r2, [r3, #0]
      break;
 8002afa:	e003      	b.n	8002b04 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a2d      	ldr	r2, [pc, #180]	; (8002bb4 <RCC_GetClocksFreq+0x15c>)
 8002b00:	601a      	str	r2, [r3, #0]
      break;
 8002b02:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8002b04:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <RCC_GetClocksFreq+0x158>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b0c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8002b14:	4a29      	ldr	r2, [pc, #164]	; (8002bbc <RCC_GetClocksFreq+0x164>)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	4413      	add	r3, r2
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	40da      	lsrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <RCC_GetClocksFreq+0x158>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b34:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8002b3c:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <RCC_GetClocksFreq+0x164>)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	4413      	add	r3, r2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	40da      	lsrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8002b54:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <RCC_GetClocksFreq+0x158>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b5c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	0adb      	lsrs	r3, r3, #11
 8002b62:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8002b64:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <RCC_GetClocksFreq+0x164>)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	4413      	add	r3, r2
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	40da      	lsrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <RCC_GetClocksFreq+0x158>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b84:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	0b9b      	lsrs	r3, r3, #14
 8002b8a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8002b8c:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <RCC_GetClocksFreq+0x168>)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	4413      	add	r3, r2
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	611a      	str	r2, [r3, #16]
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	007a1200 	.word	0x007a1200
 8002bb8:	003d0900 	.word	0x003d0900
 8002bbc:	2000000c 	.word	0x2000000c
 8002bc0:	2000001c 	.word	0x2000001c

08002bc4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d006      	beq.n	8002be4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <RCC_APB2PeriphClockCmd+0x38>)
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <RCC_APB2PeriphClockCmd+0x38>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8002be2:	e006      	b.n	8002bf2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <RCC_APB2PeriphClockCmd+0x38>)
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	4903      	ldr	r1, [pc, #12]	; (8002bfc <RCC_APB2PeriphClockCmd+0x38>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	618b      	str	r3, [r1, #24]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40021000 	.word	0x40021000

08002c00 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d006      	beq.n	8002c20 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <RCC_APB2PeriphResetCmd+0x38>)
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	4908      	ldr	r1, [pc, #32]	; (8002c38 <RCC_APB2PeriphResetCmd+0x38>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8002c1e:	e006      	b.n	8002c2e <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <RCC_APB2PeriphResetCmd+0x38>)
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	4903      	ldr	r1, [pc, #12]	; (8002c38 <RCC_APB2PeriphResetCmd+0x38>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	60cb      	str	r3, [r1, #12]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	40021000 	.word	0x40021000

08002c3c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <RCC_APB1PeriphResetCmd+0x38>)
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	4908      	ldr	r1, [pc, #32]	; (8002c74 <RCC_APB1PeriphResetCmd+0x38>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8002c5a:	e006      	b.n	8002c6a <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <RCC_APB1PeriphResetCmd+0x38>)
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	4903      	ldr	r1, [pc, #12]	; (8002c74 <RCC_APB1PeriphResetCmd+0x38>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	610b      	str	r3, [r1, #16]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	40021000 	.word	0x40021000

08002c78 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d103      	bne.n	8002ca4 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <RCC_GetFlagStatus+0x70>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e009      	b.n	8002cb8 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d103      	bne.n	8002cb2 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <RCC_GetFlagStatus+0x70>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	e002      	b.n	8002cb8 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <RCC_GetFlagStatus+0x70>)
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	74fb      	strb	r3, [r7, #19]
 8002cd4:	e001      	b.n	8002cda <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000

08002cec <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <USART_DeInit+0xa4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d10a      	bne.n	8002d12 <USART_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d02:	f7ff ff7d 	bl	8002c00 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002d06:	2100      	movs	r1, #0
 8002d08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d0c:	f7ff ff78 	bl	8002c00 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8002d10:	e03a      	b.n	8002d88 <USART_DeInit+0x9c>
  else if (USARTx == USART2)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <USART_DeInit+0xa8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d10a      	bne.n	8002d30 <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002d20:	f7ff ff8c 	bl	8002c3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002d24:	2100      	movs	r1, #0
 8002d26:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002d2a:	f7ff ff87 	bl	8002c3c <RCC_APB1PeriphResetCmd>
}
 8002d2e:	e02b      	b.n	8002d88 <USART_DeInit+0x9c>
  else if (USARTx == USART3)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <USART_DeInit+0xac>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d10a      	bne.n	8002d4e <USART_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002d38:	2101      	movs	r1, #1
 8002d3a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002d3e:	f7ff ff7d 	bl	8002c3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002d42:	2100      	movs	r1, #0
 8002d44:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002d48:	f7ff ff78 	bl	8002c3c <RCC_APB1PeriphResetCmd>
}
 8002d4c:	e01c      	b.n	8002d88 <USART_DeInit+0x9c>
  else if (USARTx == UART4)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <USART_DeInit+0xb0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d10a      	bne.n	8002d6c <USART_DeInit+0x80>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002d56:	2101      	movs	r1, #1
 8002d58:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d5c:	f7ff ff6e 	bl	8002c3c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002d60:	2100      	movs	r1, #0
 8002d62:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d66:	f7ff ff69 	bl	8002c3c <RCC_APB1PeriphResetCmd>
}
 8002d6a:	e00d      	b.n	8002d88 <USART_DeInit+0x9c>
    if (USARTx == UART5)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <USART_DeInit+0xb4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d109      	bne.n	8002d88 <USART_DeInit+0x9c>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002d74:	2101      	movs	r1, #1
 8002d76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d7a:	f7ff ff5f 	bl	8002c3c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002d7e:	2100      	movs	r1, #0
 8002d80:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d84:	f7ff ff5a 	bl	8002c3c <RCC_APB1PeriphResetCmd>
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40013800 	.word	0x40013800
 8002d94:	40004400 	.word	0x40004400
 8002d98:	40004800 	.word	0x40004800
 8002d9c:	40004c00 	.word	0x40004c00
 8002da0:	40005000 	.word	0x40005000

08002da4 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	; 0x30
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8002dae:	2300      	movs	r3, #0
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db2:	2300      	movs	r3, #0
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8002db6:	2300      	movs	r3, #0
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	8a1b      	ldrh	r3, [r3, #16]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8002dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd0:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	88db      	ldrh	r3, [r3, #6]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	4313      	orrs	r3, r2
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	899b      	ldrh	r3, [r3, #12]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8002df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df6:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	889a      	ldrh	r2, [r3, #4]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	891b      	ldrh	r3, [r3, #8]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	4313      	orrs	r3, r2
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	8a9b      	ldrh	r3, [r3, #20]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8002e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e2c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8002e30:	4013      	ands	r3, r2
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	899b      	ldrh	r3, [r3, #12]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002e48:	f107 0308 	add.w	r3, r7, #8
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fe03 	bl	8002a58 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	4a2e      	ldr	r2, [pc, #184]	; (8002f10 <USART_Init+0x16c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d102      	bne.n	8002e60 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e5e:	e001      	b.n	8002e64 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	899b      	ldrh	r3, [r3, #12]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	da0c      	bge.n	8002e8a <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	009a      	lsls	r2, r3, #2
 8002e7a:	441a      	add	r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
 8002e88:	e00b      	b.n	8002ea2 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	009a      	lsls	r2, r3, #2
 8002e94:	441a      	add	r2, r3
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <USART_Init+0x170>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	2264      	movs	r2, #100	; 0x64
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	899b      	ldrh	r3, [r3, #12]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	b21b      	sxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	da0c      	bge.n	8002ee6 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	3332      	adds	r3, #50	; 0x32
 8002ed2:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <USART_Init+0x170>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee4:	e00b      	b.n	8002efe <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	3332      	adds	r3, #50	; 0x32
 8002eec:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <USART_Init+0x170>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002efa:	4313      	orrs	r3, r2
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	811a      	strh	r2, [r3, #8]
}
 8002f06:	bf00      	nop
 8002f08:	3730      	adds	r7, #48	; 0x30
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40013800 	.word	0x40013800
 8002f14:	51eb851f 	.word	0x51eb851f

08002f18 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	899b      	ldrh	r3, [r3, #12]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8002f3a:	e007      	b.n	8002f4c <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	899b      	ldrh	r3, [r3, #12]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	819a      	strh	r2, [r3, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
	...

08002f58 <__libc_init_array>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	2600      	movs	r6, #0
 8002f5c:	4d0c      	ldr	r5, [pc, #48]	; (8002f90 <__libc_init_array+0x38>)
 8002f5e:	4c0d      	ldr	r4, [pc, #52]	; (8002f94 <__libc_init_array+0x3c>)
 8002f60:	1b64      	subs	r4, r4, r5
 8002f62:	10a4      	asrs	r4, r4, #2
 8002f64:	42a6      	cmp	r6, r4
 8002f66:	d109      	bne.n	8002f7c <__libc_init_array+0x24>
 8002f68:	f000 f830 	bl	8002fcc <_init>
 8002f6c:	2600      	movs	r6, #0
 8002f6e:	4d0a      	ldr	r5, [pc, #40]	; (8002f98 <__libc_init_array+0x40>)
 8002f70:	4c0a      	ldr	r4, [pc, #40]	; (8002f9c <__libc_init_array+0x44>)
 8002f72:	1b64      	subs	r4, r4, r5
 8002f74:	10a4      	asrs	r4, r4, #2
 8002f76:	42a6      	cmp	r6, r4
 8002f78:	d105      	bne.n	8002f86 <__libc_init_array+0x2e>
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f80:	4798      	blx	r3
 8002f82:	3601      	adds	r6, #1
 8002f84:	e7ee      	b.n	8002f64 <__libc_init_array+0xc>
 8002f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f8a:	4798      	blx	r3
 8002f8c:	3601      	adds	r6, #1
 8002f8e:	e7f2      	b.n	8002f76 <__libc_init_array+0x1e>
 8002f90:	08003024 	.word	0x08003024
 8002f94:	08003024 	.word	0x08003024
 8002f98:	08003024 	.word	0x08003024
 8002f9c:	08003028 	.word	0x08003028

08002fa0 <memcpy>:
 8002fa0:	440a      	add	r2, r1
 8002fa2:	4291      	cmp	r1, r2
 8002fa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002fa8:	d100      	bne.n	8002fac <memcpy+0xc>
 8002faa:	4770      	bx	lr
 8002fac:	b510      	push	{r4, lr}
 8002fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fb2:	4291      	cmp	r1, r2
 8002fb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fb8:	d1f9      	bne.n	8002fae <memcpy+0xe>
 8002fba:	bd10      	pop	{r4, pc}

08002fbc <memset>:
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4402      	add	r2, r0
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d100      	bne.n	8002fc6 <memset+0xa>
 8002fc4:	4770      	bx	lr
 8002fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fca:	e7f9      	b.n	8002fc0 <memset+0x4>

08002fcc <_init>:
 8002fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fce:	bf00      	nop
 8002fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd2:	bc08      	pop	{r3}
 8002fd4:	469e      	mov	lr, r3
 8002fd6:	4770      	bx	lr

08002fd8 <_fini>:
 8002fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fda:	bf00      	nop
 8002fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fde:	bc08      	pop	{r3}
 8002fe0:	469e      	mov	lr, r3
 8002fe2:	4770      	bx	lr
