
STM32F103ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a88  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f60  08004f60  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004f60  08004f60  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f60  08004f60  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f64  08004f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000941c  20000078  08004fe0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009494  08004fe0  00029494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011805  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b6e  00000000  00000000  000318a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00034418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00035358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7a8  00000000  00000000  00036180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013864  00000000  00000000  00052928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1a89  00000000  00000000  0006618c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107c15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c8  00000000  00000000  00107c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000078 	.word	0x20000078
 800020c:	00000000 	.word	0x00000000
 8000210:	08004c60 	.word	0x08004c60

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000007c 	.word	0x2000007c
 800022c:	08004c60 	.word	0x08004c60

08000230 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000236:	f107 0308 	add.w	r3, r7, #8
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <MX_GPIO_Init+0x5c>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a10      	ldr	r2, [pc, #64]	; (800028c <MX_GPIO_Init+0x5c>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6193      	str	r3, [r2, #24]
 8000250:	4b0e      	ldr	r3, [pc, #56]	; (800028c <MX_GPIO_Init+0x5c>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	f003 0304 	and.w	r3, r3, #4
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_00_GPIO_Port, LED_00_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	2104      	movs	r1, #4
 8000260:	480b      	ldr	r0, [pc, #44]	; (8000290 <MX_GPIO_Init+0x60>)
 8000262:	f000 fee7 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_00_Pin;
 8000266:	2304      	movs	r3, #4
 8000268:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026a:	2301      	movs	r3, #1
 800026c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026e:	2300      	movs	r3, #0
 8000270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000272:	2302      	movs	r3, #2
 8000274:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_00_GPIO_Port, &GPIO_InitStruct);
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	4619      	mov	r1, r3
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <MX_GPIO_Init+0x60>)
 800027e:	f000 fc45 	bl	8000b0c <HAL_GPIO_Init>

}
 8000282:	bf00      	nop
 8000284:	3718      	adds	r7, #24
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000
 8000290:	40010800 	.word	0x40010800

08000294 <__io_putchar>:
#include "FreeRTOS.h"
#include "list.h"
#include "task.h"
#include "queue.h"
int __io_putchar(int ch)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
    //注意下面第一个参数是&huart1，因为cubemx配置了串口1自动生成的
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800029c:	1d39      	adds	r1, r7, #4
 800029e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002a2:	2201      	movs	r2, #1
 80002a4:	4803      	ldr	r0, [pc, #12]	; (80002b4 <__io_putchar+0x20>)
 80002a6:	f002 f8b9 	bl	800241c <HAL_UART_Transmit>
    return ch;
 80002aa:	687b      	ldr	r3, [r7, #4]
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	2000943c 	.word	0x2000943c

080002b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002be:	f000 fae5 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c2:	f000 f825 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c6:	f7ff ffb3 	bl	8000230 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002ca:	f000 fa43 	bl	8000754 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BaseType_t xReturn = pdPASS;
 80002ce:	2301      	movs	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
  xReturn = xTaskCreate(
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <main+0x48>)
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2300      	movs	r3, #0
 80002dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002e0:	4908      	ldr	r1, [pc, #32]	; (8000304 <main+0x4c>)
 80002e2:	4809      	ldr	r0, [pc, #36]	; (8000308 <main+0x50>)
 80002e4:	f002 faf3 	bl	80028ce <xTaskCreate>
 80002e8:	6078      	str	r0, [r7, #4]
          (char *        )"HOS",               //任务名称
          (uint16_t      )HOS_STACK_SIZE,       //任务栈大小
          (void *        )NULL,                 //任务参数
          (UBaseType_t   )HOS_PRIO,             //任务优先级
          (TaskHandle_t *)&hos_handle);         //任务句柄
  if (pdPASS == xReturn) {
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d105      	bne.n	80002fc <main+0x44>
          printf("HOS create success!\n");
 80002f0:	4806      	ldr	r0, [pc, #24]	; (800030c <main+0x54>)
 80002f2:	f003 fd65 	bl	8003dc0 <puts>
          vTaskStartScheduler();
 80002f6:	f002 fd1b 	bl	8002d30 <vTaskStartScheduler>
          while (1);
 80002fa:	e7fe      	b.n	80002fa <main+0x42>
  } else {

  }

  //vTaskStartScheduler();
  while (1) {
 80002fc:	e7fe      	b.n	80002fc <main+0x44>
 80002fe:	bf00      	nop
 8000300:	20000094 	.word	0x20000094
 8000304:	08004c78 	.word	0x08004c78
 8000308:	0800039d 	.word	0x0800039d
 800030c:	08004c7c 	.word	0x08004c7c

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b090      	sub	sp, #64	; 0x40
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	2228      	movs	r2, #40	; 0x28
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f003 fcc0 	bl	8003ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000332:	2301      	movs	r3, #1
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000340:	2301      	movs	r3, #1
 8000342:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000344:	2302      	movs	r3, #2
 8000346:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800034e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000352:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000354:	f107 0318 	add.w	r3, r7, #24
 8000358:	4618      	mov	r0, r3
 800035a:	f000 fe9d 	bl	8001098 <HAL_RCC_OscConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000364:	f000 f891 	bl	800048a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000368:	230f      	movs	r3, #15
 800036a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036c:	2302      	movs	r3, #2
 800036e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2102      	movs	r1, #2
 8000382:	4618      	mov	r0, r3
 8000384:	f001 f9f8 	bl	8001778 <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800038e:	f000 f87c 	bl	800048a <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3740      	adds	r7, #64	; 0x40
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <hos>:

/* USER CODE BEGIN 4 */
static void hos(void *pvParam)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af02      	add	r7, sp, #8
 80003a2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        taskENTER_CRITICAL();
 80003a4:	f003 fb96 	bl	8003ad4 <vPortEnterCritical>
        xReturn = xTaskCreate(
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <hos+0x70>)
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	2301      	movs	r3, #1
 80003ae:	9300      	str	r3, [sp, #0]
 80003b0:	2300      	movs	r3, #0
 80003b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003b6:	4916      	ldr	r1, [pc, #88]	; (8000410 <hos+0x74>)
 80003b8:	4816      	ldr	r0, [pc, #88]	; (8000414 <hos+0x78>)
 80003ba:	f002 fa88 	bl	80028ce <xTaskCreate>
 80003be:	60f8      	str	r0, [r7, #12]
                (char *        )"TASK01",             //任务名称
                (uint16_t      )TASK01_STACK_SIZE,    //任务栈大小
                (void *        )NULL,                 //任务参数
                (UBaseType_t   )TASK01_PRIO,          //任务优先级
                (TaskHandle_t *)&task01_handle);      //任务句柄
        if (pdPASS == xReturn) {
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d102      	bne.n	80003cc <hos+0x30>
                printf("Create Task01 success!\n");
 80003c6:	4814      	ldr	r0, [pc, #80]	; (8000418 <hos+0x7c>)
 80003c8:	f003 fcfa 	bl	8003dc0 <puts>
        }
        xReturn = xTaskCreate(
 80003cc:	4b13      	ldr	r3, [pc, #76]	; (800041c <hos+0x80>)
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	2301      	movs	r3, #1
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	2300      	movs	r3, #0
 80003d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003da:	4911      	ldr	r1, [pc, #68]	; (8000420 <hos+0x84>)
 80003dc:	4811      	ldr	r0, [pc, #68]	; (8000424 <hos+0x88>)
 80003de:	f002 fa76 	bl	80028ce <xTaskCreate>
 80003e2:	60f8      	str	r0, [r7, #12]
                (char *        )"TASK02",             //任务名称
                (uint16_t      )TASK02_STACK_SIZE,    //任务栈大小
                (void *        )NULL,                 //任务参数
                (UBaseType_t   )TASK02_PRIO,          //任务优先级
                (TaskHandle_t *)&task02_handle);      //任务句柄
        if (pdPASS == xReturn) {
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d102      	bne.n	80003f0 <hos+0x54>
                printf("Create Task02 success!\n");
 80003ea:	480f      	ldr	r0, [pc, #60]	; (8000428 <hos+0x8c>)
 80003ec:	f003 fce8 	bl	8003dc0 <puts>
        }
        vTaskDelete(hos_handle);
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <hos+0x90>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f002 fbd3 	bl	8002ba0 <vTaskDelete>
        printf("delete HOS success!\n");
 80003fa:	480d      	ldr	r0, [pc, #52]	; (8000430 <hos+0x94>)
 80003fc:	f003 fce0 	bl	8003dc0 <puts>
        taskEXIT_CRITICAL();
 8000400:	f003 fb96 	bl	8003b30 <vPortExitCritical>
}
 8000404:	bf00      	nop
 8000406:	3710      	adds	r7, #16
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000098 	.word	0x20000098
 8000410:	08004c90 	.word	0x08004c90
 8000414:	08000435 	.word	0x08000435
 8000418:	08004c98 	.word	0x08004c98
 800041c:	2000009c 	.word	0x2000009c
 8000420:	08004cb0 	.word	0x08004cb0
 8000424:	08000451 	.word	0x08000451
 8000428:	08004cb8 	.word	0x08004cb8
 800042c:	20000094 	.word	0x20000094
 8000430:	08004cd0 	.word	0x08004cd0

08000434 <task01>:
void task01(void *pvParam)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
        for (;;) {
                printf("task_01\n");
 800043c:	4803      	ldr	r0, [pc, #12]	; (800044c <task01+0x18>)
 800043e:	f003 fcbf 	bl	8003dc0 <puts>
                vTaskDelay(2000 / portTICK_PERIOD_MS);
 8000442:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000446:	f002 fc3f 	bl	8002cc8 <vTaskDelay>
                printf("task_01\n");
 800044a:	e7f7      	b.n	800043c <task01+0x8>
 800044c:	08004ce4 	.word	0x08004ce4

08000450 <task02>:
        }
}
void task02(void *pvParam)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
        for (;;) {
                printf("task_02\n");
 8000458:	4803      	ldr	r0, [pc, #12]	; (8000468 <task02+0x18>)
 800045a:	f003 fcb1 	bl	8003dc0 <puts>
                vTaskDelay(2000 / portTICK_PERIOD_MS);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f002 fc31 	bl	8002cc8 <vTaskDelay>
                printf("task_02\n");
 8000466:	e7f7      	b.n	8000458 <task02+0x8>
 8000468:	08004cec 	.word	0x08004cec

0800046c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800047c:	d101      	bne.n	8000482 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800047e:	f000 fa1b 	bl	80008b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048e:	b672      	cpsid	i
}
 8000490:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000492:	e7fe      	b.n	8000492 <Error_Handler+0x8>

08000494 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <HAL_MspInit+0x5c>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	4a14      	ldr	r2, [pc, #80]	; (8000504 <HAL_MspInit+0x5c>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6193      	str	r3, [r2, #24]
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <HAL_MspInit+0x5c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <HAL_MspInit+0x5c>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <HAL_MspInit+0x5c>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_MspInit+0x5c>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <HAL_MspInit+0x60>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <HAL_MspInit+0x60>)
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	40021000 	.word	0x40021000
 8000508:	40010000 	.word	0x40010000

0800050c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08c      	sub	sp, #48	; 0x30
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800051c:	2200      	movs	r2, #0
 800051e:	6879      	ldr	r1, [r7, #4]
 8000520:	201c      	movs	r0, #28
 8000522:	f000 faaf 	bl	8000a84 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000526:	201c      	movs	r0, #28
 8000528:	f000 fad8 	bl	8000adc <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800052c:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <HAL_InitTick+0xa4>)
 800052e:	69db      	ldr	r3, [r3, #28]
 8000530:	4a1f      	ldr	r2, [pc, #124]	; (80005b0 <HAL_InitTick+0xa4>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	61d3      	str	r3, [r2, #28]
 8000538:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <HAL_InitTick+0xa4>)
 800053a:	69db      	ldr	r3, [r3, #28]
 800053c:	f003 0301 	and.w	r3, r3, #1
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000544:	f107 0210 	add.w	r2, r7, #16
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4611      	mov	r1, r2
 800054e:	4618      	mov	r0, r3
 8000550:	f001 fb34 	bl	8001bbc <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000554:	f001 fb0a 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 8000558:	4603      	mov	r3, r0
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <HAL_InitTick+0xa8>)
 8000562:	fba2 2303 	umull	r2, r3, r2, r3
 8000566:	0c9b      	lsrs	r3, r3, #18
 8000568:	3b01      	subs	r3, #1
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_InitTick+0xac>)
 800056e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000572:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000574:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <HAL_InitTick+0xac>)
 8000576:	f240 32e7 	movw	r2, #999	; 0x3e7
 800057a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800057c:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <HAL_InitTick+0xac>)
 800057e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000580:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <HAL_InitTick+0xac>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <HAL_InitTick+0xac>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800058e:	480a      	ldr	r0, [pc, #40]	; (80005b8 <HAL_InitTick+0xac>)
 8000590:	f001 fb74 	bl	8001c7c <HAL_TIM_Base_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d104      	bne.n	80005a4 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <HAL_InitTick+0xac>)
 800059c:	f001 fc3e 	bl	8001e1c <HAL_TIM_Base_Start_IT>
 80005a0:	4603      	mov	r3, r0
 80005a2:	e000      	b.n	80005a6 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80005a4:	2301      	movs	r3, #1
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3730      	adds	r7, #48	; 0x30
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000
 80005b4:	431bde83 	.word	0x431bde83
 80005b8:	200093f4 	.word	0x200093f4

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <NMI_Handler+0x4>

080005c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <HardFault_Handler+0x4>

080005c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <MemManage_Handler+0x4>

080005ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <BusFault_Handler+0x4>

080005d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <UsageFault_Handler+0x4>

080005da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0

        #if (INCLUDE_xTaskGetSchedulerState == 1)
        if (xTaskGetSchedulerState() != taskSCHEDULDER_NOT_STARTED)
        {
        #endif
                xPortSysTickHandler();
 80005ea:	f003 faed 	bl	8003bc8 <xPortSysTickHandler>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <TIM2_IRQHandler+0x10>)
 80005fa:	f001 fca1 	bl	8001f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200093f4 	.word	0x200093f4

08000608 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	e00a      	b.n	8000630 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800061a:	f3af 8000 	nop.w
 800061e:	4601      	mov	r1, r0
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	60ba      	str	r2, [r7, #8]
 8000626:	b2ca      	uxtb	r2, r1
 8000628:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	dbf0      	blt.n	800061a <_read+0x12>
	}

return len;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b086      	sub	sp, #24
 8000646:	af00      	add	r7, sp, #0
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	e009      	b.n	8000668 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	60ba      	str	r2, [r7, #8]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fe19 	bl	8000294 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	dbf1      	blt.n	8000654 <_write+0x12>
	}
	return len;
 8000670:	687b      	ldr	r3, [r7, #4]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <_close>:

int _close(int file)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
	return -1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006a0:	605a      	str	r2, [r3, #4]
	return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr

080006ae <_isatty>:

int _isatty(int file)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
	return 1;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b085      	sub	sp, #20
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
	return 0;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
	...

080006dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e4:	4a14      	ldr	r2, [pc, #80]	; (8000738 <_sbrk+0x5c>)
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <_sbrk+0x60>)
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d102      	bne.n	80006fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <_sbrk+0x64>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <_sbrk+0x68>)
 80006fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	429a      	cmp	r2, r3
 800070a:	d207      	bcs.n	800071c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800070c:	f003 faa0 	bl	8003c50 <__errno>
 8000710:	4603      	mov	r3, r0
 8000712:	220c      	movs	r2, #12
 8000714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800071a:	e009      	b.n	8000730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <_sbrk+0x64>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <_sbrk+0x64>)
 800072c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072e:	68fb      	ldr	r3, [r7, #12]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20010000 	.word	0x20010000
 800073c:	00000400 	.word	0x00000400
 8000740:	200000a0 	.word	0x200000a0
 8000744:	20009498 	.word	0x20009498

08000748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART1_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 800078c:	f001 fd90 	bl	80022b0 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f7ff fe78 	bl	800048a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000943c 	.word	0x2000943c
 80007a4:	40013800 	.word	0x40013800

080007a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <HAL_UART_MspInit+0x8c>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d131      	bne.n	800082c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <HAL_UART_MspInit+0x90>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a1a      	ldr	r2, [pc, #104]	; (8000838 <HAL_UART_MspInit+0x90>)
 80007ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <HAL_UART_MspInit+0x90>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_UART_MspInit+0x90>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a14      	ldr	r2, [pc, #80]	; (8000838 <HAL_UART_MspInit+0x90>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_UART_MspInit+0x90>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	4619      	mov	r1, r3
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <HAL_UART_MspInit+0x94>)
 800080e:	f000 f97d 	bl	8000b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	4619      	mov	r1, r3
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <HAL_UART_MspInit+0x94>)
 8000828:	f000 f970 	bl	8000b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800082c:	bf00      	nop
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40013800 	.word	0x40013800
 8000838:	40021000 	.word	0x40021000
 800083c:	40010800 	.word	0x40010800

08000840 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000842:	490d      	ldr	r1, [pc, #52]	; (8000878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000858:	4c0a      	ldr	r4, [pc, #40]	; (8000884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000866:	f7ff ff6f 	bl	8000748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086a:	f003 f9f7 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086e:	f7ff fd23 	bl	80002b8 <main>
  bx lr
 8000872:	4770      	bx	lr
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800087c:	08004f68 	.word	0x08004f68
  ldr r2, =_sbss
 8000880:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000884:	20009494 	.word	0x20009494

08000888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_2_IRQHandler>
	...

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_Init+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_Init+0x28>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f8d1 	bl	8000a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fe32 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a8:	f7ff fdfe 	bl	80004a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_IncTick+0x1c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_IncTick+0x20>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <HAL_IncTick+0x20>)
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20009480 	.word	0x20009480

080008dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b02      	ldr	r3, [pc, #8]	; (80008ec <HAL_GetTick+0x10>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	20009480 	.word	0x20009480

080008f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800090c:	4013      	ands	r3, r2
 800090e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	60d3      	str	r3, [r2, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <__NVIC_GetPriorityGrouping+0x18>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	f003 0307 	and.w	r3, r3, #7
}
 8000946:	4618      	mov	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	2b00      	cmp	r3, #0
 8000964:	db0b      	blt.n	800097e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	f003 021f 	and.w	r2, r3, #31
 800096c:	4906      	ldr	r1, [pc, #24]	; (8000988 <__NVIC_EnableIRQ+0x34>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	095b      	lsrs	r3, r3, #5
 8000974:	2001      	movs	r0, #1
 8000976:	fa00 f202 	lsl.w	r2, r0, r2
 800097a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	e000e100 	.word	0xe000e100

0800098c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db0a      	blt.n	80009b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	490c      	ldr	r1, [pc, #48]	; (80009d8 <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b4:	e00a      	b.n	80009cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	440b      	add	r3, r1
 80009ca:	761a      	strb	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f1c3 0307 	rsb	r3, r3, #7
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	bf28      	it	cs
 80009fe:	2304      	movcs	r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3304      	adds	r3, #4
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d902      	bls.n	8000a10 <NVIC_EncodePriority+0x30>
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3b03      	subs	r3, #3
 8000a0e:	e000      	b.n	8000a12 <NVIC_EncodePriority+0x32>
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	401a      	ands	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43d9      	mvns	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	4313      	orrs	r3, r2
         );
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	; 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b07      	cmp	r3, #7
 8000a50:	d00f      	beq.n	8000a72 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b06      	cmp	r3, #6
 8000a56:	d00c      	beq.n	8000a72 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b05      	cmp	r3, #5
 8000a5c:	d009      	beq.n	8000a72 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d006      	beq.n	8000a72 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d003      	beq.n	8000a72 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a6a:	2192      	movs	r1, #146	; 0x92
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000a6e:	f7ff fd11 	bl	8000494 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff ff3c 	bl	80008f0 <__NVIC_SetPriorityGrouping>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	08004cf4 	.word	0x08004cf4

08000a84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d903      	bls.n	8000aa4 <HAL_NVIC_SetPriority+0x20>
 8000a9c:	21aa      	movs	r1, #170	; 0xaa
 8000a9e:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <HAL_NVIC_SetPriority+0x54>)
 8000aa0:	f7ff fcf8 	bl	8000494 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	d903      	bls.n	8000ab2 <HAL_NVIC_SetPriority+0x2e>
 8000aaa:	21ab      	movs	r1, #171	; 0xab
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <HAL_NVIC_SetPriority+0x54>)
 8000aae:	f7ff fcf1 	bl	8000494 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab2:	f7ff ff41 	bl	8000938 <__NVIC_GetPriorityGrouping>
 8000ab6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	68b9      	ldr	r1, [r7, #8]
 8000abc:	6978      	ldr	r0, [r7, #20]
 8000abe:	f7ff ff8f 	bl	80009e0 <NVIC_EncodePriority>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff5e 	bl	800098c <__NVIC_SetPriority>
}
 8000ad0:	bf00      	nop
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	08004cf4 	.word	0x08004cf4

08000adc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	da03      	bge.n	8000af6 <HAL_NVIC_EnableIRQ+0x1a>
 8000aee:	21be      	movs	r1, #190	; 0xbe
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_NVIC_EnableIRQ+0x2c>)
 8000af2:	f7ff fccf 	bl	8000494 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff2a 	bl	8000954 <__NVIC_EnableIRQ>
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	08004cf4 	.word	0x08004cf4

08000b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4aa9      	ldr	r2, [pc, #676]	; (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d01b      	beq.n	8000b5e <HAL_GPIO_Init+0x52>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4aa8      	ldr	r2, [pc, #672]	; (8000dcc <HAL_GPIO_Init+0x2c0>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d017      	beq.n	8000b5e <HAL_GPIO_Init+0x52>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4aa7      	ldr	r2, [pc, #668]	; (8000dd0 <HAL_GPIO_Init+0x2c4>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d013      	beq.n	8000b5e <HAL_GPIO_Init+0x52>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4aa6      	ldr	r2, [pc, #664]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d00f      	beq.n	8000b5e <HAL_GPIO_Init+0x52>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4aa5      	ldr	r2, [pc, #660]	; (8000dd8 <HAL_GPIO_Init+0x2cc>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d00b      	beq.n	8000b5e <HAL_GPIO_Init+0x52>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4aa4      	ldr	r2, [pc, #656]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d007      	beq.n	8000b5e <HAL_GPIO_Init+0x52>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4aa3      	ldr	r2, [pc, #652]	; (8000de0 <HAL_GPIO_Init+0x2d4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x52>
 8000b56:	21bd      	movs	r1, #189	; 0xbd
 8000b58:	48a2      	ldr	r0, [pc, #648]	; (8000de4 <HAL_GPIO_Init+0x2d8>)
 8000b5a:	f7ff fc9b 	bl	8000494 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d005      	beq.n	8000b74 <HAL_GPIO_Init+0x68>
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	0c1b      	lsrs	r3, r3, #16
 8000b6e:	041b      	lsls	r3, r3, #16
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x70>
 8000b74:	21be      	movs	r1, #190	; 0xbe
 8000b76:	489b      	ldr	r0, [pc, #620]	; (8000de4 <HAL_GPIO_Init+0x2d8>)
 8000b78:	f7ff fc8c 	bl	8000494 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 8235 	beq.w	8000ff0 <HAL_GPIO_Init+0x4e4>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	f000 8230 	beq.w	8000ff0 <HAL_GPIO_Init+0x4e4>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b11      	cmp	r3, #17
 8000b96:	f000 822b 	beq.w	8000ff0 <HAL_GPIO_Init+0x4e4>
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	f000 8226 	beq.w	8000ff0 <HAL_GPIO_Init+0x4e4>
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b12      	cmp	r3, #18
 8000baa:	f000 8221 	beq.w	8000ff0 <HAL_GPIO_Init+0x4e4>
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	4a8d      	ldr	r2, [pc, #564]	; (8000de8 <HAL_GPIO_Init+0x2dc>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	f000 821b 	beq.w	8000ff0 <HAL_GPIO_Init+0x4e4>
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	4a8b      	ldr	r2, [pc, #556]	; (8000dec <HAL_GPIO_Init+0x2e0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	f000 8215 	beq.w	8000ff0 <HAL_GPIO_Init+0x4e4>
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	4a89      	ldr	r2, [pc, #548]	; (8000df0 <HAL_GPIO_Init+0x2e4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	f000 820f 	beq.w	8000ff0 <HAL_GPIO_Init+0x4e4>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	4a87      	ldr	r2, [pc, #540]	; (8000df4 <HAL_GPIO_Init+0x2e8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	f000 8209 	beq.w	8000ff0 <HAL_GPIO_Init+0x4e4>
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	4a85      	ldr	r2, [pc, #532]	; (8000df8 <HAL_GPIO_Init+0x2ec>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	f000 8203 	beq.w	8000ff0 <HAL_GPIO_Init+0x4e4>
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	4a83      	ldr	r2, [pc, #524]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	f000 81fd 	beq.w	8000ff0 <HAL_GPIO_Init+0x4e4>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	f000 81f8 	beq.w	8000ff0 <HAL_GPIO_Init+0x4e4>
 8000c00:	21bf      	movs	r1, #191	; 0xbf
 8000c02:	4878      	ldr	r0, [pc, #480]	; (8000de4 <HAL_GPIO_Init+0x2d8>)
 8000c04:	f7ff fc46 	bl	8000494 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c08:	e1f2      	b.n	8000ff0 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	69fa      	ldr	r2, [r7, #28]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	f040 81e1 	bne.w	8000fea <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a67      	ldr	r2, [pc, #412]	; (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d01b      	beq.n	8000c68 <HAL_GPIO_Init+0x15c>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a66      	ldr	r2, [pc, #408]	; (8000dcc <HAL_GPIO_Init+0x2c0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d017      	beq.n	8000c68 <HAL_GPIO_Init+0x15c>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a65      	ldr	r2, [pc, #404]	; (8000dd0 <HAL_GPIO_Init+0x2c4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d013      	beq.n	8000c68 <HAL_GPIO_Init+0x15c>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a64      	ldr	r2, [pc, #400]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d00f      	beq.n	8000c68 <HAL_GPIO_Init+0x15c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a63      	ldr	r2, [pc, #396]	; (8000dd8 <HAL_GPIO_Init+0x2cc>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d00b      	beq.n	8000c68 <HAL_GPIO_Init+0x15c>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a62      	ldr	r2, [pc, #392]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d007      	beq.n	8000c68 <HAL_GPIO_Init+0x15c>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a61      	ldr	r2, [pc, #388]	; (8000de0 <HAL_GPIO_Init+0x2d4>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x15c>
 8000c60:	21cd      	movs	r1, #205	; 0xcd
 8000c62:	4860      	ldr	r0, [pc, #384]	; (8000de4 <HAL_GPIO_Init+0x2d8>)
 8000c64:	f7ff fc16 	bl	8000494 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4a63      	ldr	r2, [pc, #396]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	f000 80c6 	beq.w	8000e00 <HAL_GPIO_Init+0x2f4>
 8000c74:	4a61      	ldr	r2, [pc, #388]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	f200 80ec 	bhi.w	8000e54 <HAL_GPIO_Init+0x348>
 8000c7c:	4a5c      	ldr	r2, [pc, #368]	; (8000df0 <HAL_GPIO_Init+0x2e4>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	f000 80be 	beq.w	8000e00 <HAL_GPIO_Init+0x2f4>
 8000c84:	4a5a      	ldr	r2, [pc, #360]	; (8000df0 <HAL_GPIO_Init+0x2e4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	f200 80e4 	bhi.w	8000e54 <HAL_GPIO_Init+0x348>
 8000c8c:	4a5a      	ldr	r2, [pc, #360]	; (8000df8 <HAL_GPIO_Init+0x2ec>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	f000 80b6 	beq.w	8000e00 <HAL_GPIO_Init+0x2f4>
 8000c94:	4a58      	ldr	r2, [pc, #352]	; (8000df8 <HAL_GPIO_Init+0x2ec>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	f200 80dc 	bhi.w	8000e54 <HAL_GPIO_Init+0x348>
 8000c9c:	4a53      	ldr	r2, [pc, #332]	; (8000dec <HAL_GPIO_Init+0x2e0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	f000 80ae 	beq.w	8000e00 <HAL_GPIO_Init+0x2f4>
 8000ca4:	4a51      	ldr	r2, [pc, #324]	; (8000dec <HAL_GPIO_Init+0x2e0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	f200 80d4 	bhi.w	8000e54 <HAL_GPIO_Init+0x348>
 8000cac:	4a51      	ldr	r2, [pc, #324]	; (8000df4 <HAL_GPIO_Init+0x2e8>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	f000 80a6 	beq.w	8000e00 <HAL_GPIO_Init+0x2f4>
 8000cb4:	4a4f      	ldr	r2, [pc, #316]	; (8000df4 <HAL_GPIO_Init+0x2e8>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	f200 80cc 	bhi.w	8000e54 <HAL_GPIO_Init+0x348>
 8000cbc:	2b12      	cmp	r3, #18
 8000cbe:	d82b      	bhi.n	8000d18 <HAL_GPIO_Init+0x20c>
 8000cc0:	2b12      	cmp	r3, #18
 8000cc2:	f200 80c7 	bhi.w	8000e54 <HAL_GPIO_Init+0x348>
 8000cc6:	a201      	add	r2, pc, #4	; (adr r2, 8000ccc <HAL_GPIO_Init+0x1c0>)
 8000cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ccc:	08000e01 	.word	0x08000e01
 8000cd0:	08000d21 	.word	0x08000d21
 8000cd4:	08000d73 	.word	0x08000d73
 8000cd8:	08000e4f 	.word	0x08000e4f
 8000cdc:	08000e55 	.word	0x08000e55
 8000ce0:	08000e55 	.word	0x08000e55
 8000ce4:	08000e55 	.word	0x08000e55
 8000ce8:	08000e55 	.word	0x08000e55
 8000cec:	08000e55 	.word	0x08000e55
 8000cf0:	08000e55 	.word	0x08000e55
 8000cf4:	08000e55 	.word	0x08000e55
 8000cf8:	08000e55 	.word	0x08000e55
 8000cfc:	08000e55 	.word	0x08000e55
 8000d00:	08000e55 	.word	0x08000e55
 8000d04:	08000e55 	.word	0x08000e55
 8000d08:	08000e55 	.word	0x08000e55
 8000d0c:	08000e55 	.word	0x08000e55
 8000d10:	08000d49 	.word	0x08000d49
 8000d14:	08000d9d 	.word	0x08000d9d
 8000d18:	4a33      	ldr	r2, [pc, #204]	; (8000de8 <HAL_GPIO_Init+0x2dc>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d070      	beq.n	8000e00 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d1e:	e099      	b.n	8000e54 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d00b      	beq.n	8000d40 <HAL_GPIO_Init+0x234>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d007      	beq.n	8000d40 <HAL_GPIO_Init+0x234>
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x234>
 8000d38:	21d5      	movs	r1, #213	; 0xd5
 8000d3a:	482a      	ldr	r0, [pc, #168]	; (8000de4 <HAL_GPIO_Init+0x2d8>)
 8000d3c:	f7ff fbaa 	bl	8000494 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	623b      	str	r3, [r7, #32]
          break;
 8000d46:	e086      	b.n	8000e56 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d00b      	beq.n	8000d68 <HAL_GPIO_Init+0x25c>
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d007      	beq.n	8000d68 <HAL_GPIO_Init+0x25c>
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x25c>
 8000d60:	21dc      	movs	r1, #220	; 0xdc
 8000d62:	4820      	ldr	r0, [pc, #128]	; (8000de4 <HAL_GPIO_Init+0x2d8>)
 8000d64:	f7ff fb96 	bl	8000494 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	623b      	str	r3, [r7, #32]
          break;
 8000d70:	e071      	b.n	8000e56 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d00b      	beq.n	8000d92 <HAL_GPIO_Init+0x286>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d007      	beq.n	8000d92 <HAL_GPIO_Init+0x286>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x286>
 8000d8a:	21e3      	movs	r1, #227	; 0xe3
 8000d8c:	4815      	ldr	r0, [pc, #84]	; (8000de4 <HAL_GPIO_Init+0x2d8>)
 8000d8e:	f7ff fb81 	bl	8000494 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	3308      	adds	r3, #8
 8000d98:	623b      	str	r3, [r7, #32]
          break;
 8000d9a:	e05c      	b.n	8000e56 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d00b      	beq.n	8000dbc <HAL_GPIO_Init+0x2b0>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d007      	beq.n	8000dbc <HAL_GPIO_Init+0x2b0>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x2b0>
 8000db4:	21ea      	movs	r1, #234	; 0xea
 8000db6:	480b      	ldr	r0, [pc, #44]	; (8000de4 <HAL_GPIO_Init+0x2d8>)
 8000db8:	f7ff fb6c 	bl	8000494 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	330c      	adds	r3, #12
 8000dc2:	623b      	str	r3, [r7, #32]
          break;
 8000dc4:	e047      	b.n	8000e56 <HAL_GPIO_Init+0x34a>
 8000dc6:	bf00      	nop
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40011400 	.word	0x40011400
 8000dd8:	40011800 	.word	0x40011800
 8000ddc:	40011c00 	.word	0x40011c00
 8000de0:	40012000 	.word	0x40012000
 8000de4:	08004d30 	.word	0x08004d30
 8000de8:	10110000 	.word	0x10110000
 8000dec:	10210000 	.word	0x10210000
 8000df0:	10310000 	.word	0x10310000
 8000df4:	10120000 	.word	0x10120000
 8000df8:	10220000 	.word	0x10220000
 8000dfc:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00b      	beq.n	8000e20 <HAL_GPIO_Init+0x314>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d007      	beq.n	8000e20 <HAL_GPIO_Init+0x314>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x314>
 8000e18:	21f7      	movs	r1, #247	; 0xf7
 8000e1a:	487c      	ldr	r0, [pc, #496]	; (800100c <HAL_GPIO_Init+0x500>)
 8000e1c:	f7ff fb3a 	bl	8000494 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	623b      	str	r3, [r7, #32]
          break;
 8000e2c:	e013      	b.n	8000e56 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d105      	bne.n	8000e42 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e36:	2308      	movs	r3, #8
 8000e38:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69fa      	ldr	r2, [r7, #28]
 8000e3e:	611a      	str	r2, [r3, #16]
          break;
 8000e40:	e009      	b.n	8000e56 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e42:	2308      	movs	r3, #8
 8000e44:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69fa      	ldr	r2, [r7, #28]
 8000e4a:	615a      	str	r2, [r3, #20]
          break;
 8000e4c:	e003      	b.n	8000e56 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
          break;
 8000e52:	e000      	b.n	8000e56 <HAL_GPIO_Init+0x34a>
          break;
 8000e54:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	2bff      	cmp	r3, #255	; 0xff
 8000e5a:	d801      	bhi.n	8000e60 <HAL_GPIO_Init+0x354>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	e001      	b.n	8000e64 <HAL_GPIO_Init+0x358>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3304      	adds	r3, #4
 8000e64:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	2bff      	cmp	r3, #255	; 0xff
 8000e6a:	d802      	bhi.n	8000e72 <HAL_GPIO_Init+0x366>
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_Init+0x36c>
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	3b08      	subs	r3, #8
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	210f      	movs	r1, #15
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	401a      	ands	r2, r3
 8000e8a:	6a39      	ldr	r1, [r7, #32]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	431a      	orrs	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80a2 	beq.w	8000fea <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	; (8001010 <HAL_GPIO_Init+0x504>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	4a59      	ldr	r2, [pc, #356]	; (8001010 <HAL_GPIO_Init+0x504>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6193      	str	r3, [r2, #24]
 8000eb2:	4b57      	ldr	r3, [pc, #348]	; (8001010 <HAL_GPIO_Init+0x504>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ebe:	4a55      	ldr	r2, [pc, #340]	; (8001014 <HAL_GPIO_Init+0x508>)
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <HAL_GPIO_Init+0x50c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d01f      	beq.n	8000f2a <HAL_GPIO_Init+0x41e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4b      	ldr	r2, [pc, #300]	; (800101c <HAL_GPIO_Init+0x510>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d019      	beq.n	8000f26 <HAL_GPIO_Init+0x41a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4a      	ldr	r2, [pc, #296]	; (8001020 <HAL_GPIO_Init+0x514>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0x416>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a49      	ldr	r2, [pc, #292]	; (8001024 <HAL_GPIO_Init+0x518>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d00d      	beq.n	8000f1e <HAL_GPIO_Init+0x412>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a48      	ldr	r2, [pc, #288]	; (8001028 <HAL_GPIO_Init+0x51c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d007      	beq.n	8000f1a <HAL_GPIO_Init+0x40e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a47      	ldr	r2, [pc, #284]	; (800102c <HAL_GPIO_Init+0x520>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_GPIO_Init+0x40a>
 8000f12:	2305      	movs	r3, #5
 8000f14:	e00a      	b.n	8000f2c <HAL_GPIO_Init+0x420>
 8000f16:	2306      	movs	r3, #6
 8000f18:	e008      	b.n	8000f2c <HAL_GPIO_Init+0x420>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x420>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e004      	b.n	8000f2c <HAL_GPIO_Init+0x420>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x420>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x420>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2e:	f002 0203 	and.w	r2, r2, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4093      	lsls	r3, r2
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f3c:	4935      	ldr	r1, [pc, #212]	; (8001014 <HAL_GPIO_Init+0x508>)
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f56:	4b36      	ldr	r3, [pc, #216]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4935      	ldr	r1, [pc, #212]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	600b      	str	r3, [r1, #0]
 8000f62:	e006      	b.n	8000f72 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	4930      	ldr	r1, [pc, #192]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d006      	beq.n	8000f8c <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f7e:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	492b      	ldr	r1, [pc, #172]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	604b      	str	r3, [r1, #4]
 8000f8a:	e006      	b.n	8000f9a <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f8c:	4b28      	ldr	r3, [pc, #160]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	4926      	ldr	r1, [pc, #152]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fa6:	4b22      	ldr	r3, [pc, #136]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	4921      	ldr	r1, [pc, #132]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	608b      	str	r3, [r1, #8]
 8000fb2:	e006      	b.n	8000fc2 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	491c      	ldr	r1, [pc, #112]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d006      	beq.n	8000fdc <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	4917      	ldr	r1, [pc, #92]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	60cb      	str	r3, [r1, #12]
 8000fda:	e006      	b.n	8000fea <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	4912      	ldr	r1, [pc, #72]	; (8001030 <HAL_GPIO_Init+0x524>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	3301      	adds	r3, #1
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f47f ae05 	bne.w	8000c0a <HAL_GPIO_Init+0xfe>
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	; 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	08004d30 	.word	0x08004d30
 8001010:	40021000 	.word	0x40021000
 8001014:	40010000 	.word	0x40010000
 8001018:	40010800 	.word	0x40010800
 800101c:	40010c00 	.word	0x40010c00
 8001020:	40011000 	.word	0x40011000
 8001024:	40011400 	.word	0x40011400
 8001028:	40011800 	.word	0x40011800
 800102c:	40011c00 	.word	0x40011c00
 8001030:	40010400 	.word	0x40010400

08001034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d004      	beq.n	8001054 <HAL_GPIO_WritePin+0x20>
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	0c1b      	lsrs	r3, r3, #16
 800104e:	041b      	lsls	r3, r3, #16
 8001050:	2b00      	cmp	r3, #0
 8001052:	d004      	beq.n	800105e <HAL_GPIO_WritePin+0x2a>
 8001054:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001058:	480e      	ldr	r0, [pc, #56]	; (8001094 <HAL_GPIO_WritePin+0x60>)
 800105a:	f7ff fa1b 	bl	8000494 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800105e:	787b      	ldrb	r3, [r7, #1]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d007      	beq.n	8001074 <HAL_GPIO_WritePin+0x40>
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d004      	beq.n	8001074 <HAL_GPIO_WritePin+0x40>
 800106a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800106e:	4809      	ldr	r0, [pc, #36]	; (8001094 <HAL_GPIO_WritePin+0x60>)
 8001070:	f7ff fa10 	bl	8000494 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001080:	e003      	b.n	800108a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	041a      	lsls	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	611a      	str	r2, [r3, #16]
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	08004d30 	.word	0x08004d30

08001098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e35c      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d01c      	beq.n	80010ec <HAL_RCC_OscConfig+0x54>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d116      	bne.n	80010ec <HAL_RCC_OscConfig+0x54>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d110      	bne.n	80010ec <HAL_RCC_OscConfig+0x54>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10a      	bne.n	80010ec <HAL_RCC_OscConfig+0x54>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d104      	bne.n	80010ec <HAL_RCC_OscConfig+0x54>
 80010e2:	f240 1167 	movw	r1, #359	; 0x167
 80010e6:	48a5      	ldr	r0, [pc, #660]	; (800137c <HAL_RCC_OscConfig+0x2e4>)
 80010e8:	f7ff f9d4 	bl	8000494 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 809a 	beq.w	800122e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00e      	beq.n	8001120 <HAL_RCC_OscConfig+0x88>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800110a:	d009      	beq.n	8001120 <HAL_RCC_OscConfig+0x88>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001114:	d004      	beq.n	8001120 <HAL_RCC_OscConfig+0x88>
 8001116:	f240 116d 	movw	r1, #365	; 0x16d
 800111a:	4898      	ldr	r0, [pc, #608]	; (800137c <HAL_RCC_OscConfig+0x2e4>)
 800111c:	f7ff f9ba 	bl	8000494 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001120:	4b97      	ldr	r3, [pc, #604]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	2b04      	cmp	r3, #4
 800112a:	d00c      	beq.n	8001146 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800112c:	4b94      	ldr	r3, [pc, #592]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b08      	cmp	r3, #8
 8001136:	d112      	bne.n	800115e <HAL_RCC_OscConfig+0xc6>
 8001138:	4b91      	ldr	r3, [pc, #580]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001144:	d10b      	bne.n	800115e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001146:	4b8e      	ldr	r3, [pc, #568]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d06c      	beq.n	800122c <HAL_RCC_OscConfig+0x194>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d168      	bne.n	800122c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e302      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001166:	d106      	bne.n	8001176 <HAL_RCC_OscConfig+0xde>
 8001168:	4b85      	ldr	r3, [pc, #532]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a84      	ldr	r2, [pc, #528]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 800116e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	e02e      	b.n	80011d4 <HAL_RCC_OscConfig+0x13c>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0x100>
 800117e:	4b80      	ldr	r3, [pc, #512]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a7f      	ldr	r2, [pc, #508]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 8001184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b7d      	ldr	r3, [pc, #500]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a7c      	ldr	r2, [pc, #496]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 8001190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e01d      	b.n	80011d4 <HAL_RCC_OscConfig+0x13c>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x124>
 80011a2:	4b77      	ldr	r3, [pc, #476]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a76      	ldr	r2, [pc, #472]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b74      	ldr	r3, [pc, #464]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a73      	ldr	r2, [pc, #460]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e00b      	b.n	80011d4 <HAL_RCC_OscConfig+0x13c>
 80011bc:	4b70      	ldr	r3, [pc, #448]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a6f      	ldr	r2, [pc, #444]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80011c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b6d      	ldr	r3, [pc, #436]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a6c      	ldr	r2, [pc, #432]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80011ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fb7e 	bl	80008dc <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fb7a 	bl	80008dc <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e2b6      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b62      	ldr	r3, [pc, #392]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0x14c>
 8001202:	e014      	b.n	800122e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fb6a 	bl	80008dc <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fb66 	bl	80008dc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e2a2      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121e:	4b58      	ldr	r3, [pc, #352]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x174>
 800122a:	e000      	b.n	800122e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d079      	beq.n	800132e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d008      	beq.n	8001254 <HAL_RCC_OscConfig+0x1bc>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d004      	beq.n	8001254 <HAL_RCC_OscConfig+0x1bc>
 800124a:	f240 11a1 	movw	r1, #417	; 0x1a1
 800124e:	484b      	ldr	r0, [pc, #300]	; (800137c <HAL_RCC_OscConfig+0x2e4>)
 8001250:	f7ff f920 	bl	8000494 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	2b1f      	cmp	r3, #31
 800125a:	d904      	bls.n	8001266 <HAL_RCC_OscConfig+0x1ce>
 800125c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001260:	4846      	ldr	r0, [pc, #280]	; (800137c <HAL_RCC_OscConfig+0x2e4>)
 8001262:	f7ff f917 	bl	8000494 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001266:	4b46      	ldr	r3, [pc, #280]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001272:	4b43      	ldr	r3, [pc, #268]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b08      	cmp	r3, #8
 800127c:	d11c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x220>
 800127e:	4b40      	ldr	r3, [pc, #256]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d116      	bne.n	80012b8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x20a>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e260      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b37      	ldr	r3, [pc, #220]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4933      	ldr	r1, [pc, #204]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	e03a      	b.n	800132e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_RCC_OscConfig+0x2ec>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fb09 	bl	80008dc <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fb05 	bl	80008dc <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e241      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	4b27      	ldr	r3, [pc, #156]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b24      	ldr	r3, [pc, #144]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4921      	ldr	r1, [pc, #132]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
 8001300:	e015      	b.n	800132e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <HAL_RCC_OscConfig+0x2ec>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fae8 	bl	80008dc <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff fae4 	bl	80008dc <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e220      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <HAL_RCC_OscConfig+0x2e8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d048      	beq.n	80013cc <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d008      	beq.n	8001354 <HAL_RCC_OscConfig+0x2bc>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d004      	beq.n	8001354 <HAL_RCC_OscConfig+0x2bc>
 800134a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <HAL_RCC_OscConfig+0x2e4>)
 8001350:	f7ff f8a0 	bl	8000494 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d021      	beq.n	80013a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_RCC_OscConfig+0x2f0>)
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001362:	f7ff fabb 	bl	80008dc <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001368:	e010      	b.n	800138c <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136a:	f7ff fab7 	bl	80008dc <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d909      	bls.n	800138c <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e1f3      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
 800137c:	08004d6c 	.word	0x08004d6c
 8001380:	40021000 	.word	0x40021000
 8001384:	42420000 	.word	0x42420000
 8001388:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138c:	4b67      	ldr	r3, [pc, #412]	; (800152c <HAL_RCC_OscConfig+0x494>)
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0e8      	beq.n	800136a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001398:	2001      	movs	r0, #1
 800139a:	f000 fc51 	bl	8001c40 <RCC_Delay>
 800139e:	e015      	b.n	80013cc <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a0:	4b63      	ldr	r3, [pc, #396]	; (8001530 <HAL_RCC_OscConfig+0x498>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fa99 	bl	80008dc <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff fa95 	bl	80008dc <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1d1      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	4b5a      	ldr	r3, [pc, #360]	; (800152c <HAL_RCC_OscConfig+0x494>)
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80c0 	beq.w	800155a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00c      	beq.n	8001400 <HAL_RCC_OscConfig+0x368>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d008      	beq.n	8001400 <HAL_RCC_OscConfig+0x368>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d004      	beq.n	8001400 <HAL_RCC_OscConfig+0x368>
 80013f6:	f240 2111 	movw	r1, #529	; 0x211
 80013fa:	484e      	ldr	r0, [pc, #312]	; (8001534 <HAL_RCC_OscConfig+0x49c>)
 80013fc:	f7ff f84a 	bl	8000494 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001400:	4b4a      	ldr	r3, [pc, #296]	; (800152c <HAL_RCC_OscConfig+0x494>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10d      	bne.n	8001428 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140c:	4b47      	ldr	r3, [pc, #284]	; (800152c <HAL_RCC_OscConfig+0x494>)
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	4a46      	ldr	r2, [pc, #280]	; (800152c <HAL_RCC_OscConfig+0x494>)
 8001412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001416:	61d3      	str	r3, [r2, #28]
 8001418:	4b44      	ldr	r3, [pc, #272]	; (800152c <HAL_RCC_OscConfig+0x494>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001424:	2301      	movs	r3, #1
 8001426:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	4b43      	ldr	r3, [pc, #268]	; (8001538 <HAL_RCC_OscConfig+0x4a0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001430:	2b00      	cmp	r3, #0
 8001432:	d118      	bne.n	8001466 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001434:	4b40      	ldr	r3, [pc, #256]	; (8001538 <HAL_RCC_OscConfig+0x4a0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a3f      	ldr	r2, [pc, #252]	; (8001538 <HAL_RCC_OscConfig+0x4a0>)
 800143a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001440:	f7ff fa4c 	bl	80008dc <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001448:	f7ff fa48 	bl	80008dc <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e184      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145a:	4b37      	ldr	r3, [pc, #220]	; (8001538 <HAL_RCC_OscConfig+0x4a0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d106      	bne.n	800147c <HAL_RCC_OscConfig+0x3e4>
 800146e:	4b2f      	ldr	r3, [pc, #188]	; (800152c <HAL_RCC_OscConfig+0x494>)
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4a2e      	ldr	r2, [pc, #184]	; (800152c <HAL_RCC_OscConfig+0x494>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6213      	str	r3, [r2, #32]
 800147a:	e02d      	b.n	80014d8 <HAL_RCC_OscConfig+0x440>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10c      	bne.n	800149e <HAL_RCC_OscConfig+0x406>
 8001484:	4b29      	ldr	r3, [pc, #164]	; (800152c <HAL_RCC_OscConfig+0x494>)
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4a28      	ldr	r2, [pc, #160]	; (800152c <HAL_RCC_OscConfig+0x494>)
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	6213      	str	r3, [r2, #32]
 8001490:	4b26      	ldr	r3, [pc, #152]	; (800152c <HAL_RCC_OscConfig+0x494>)
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4a25      	ldr	r2, [pc, #148]	; (800152c <HAL_RCC_OscConfig+0x494>)
 8001496:	f023 0304 	bic.w	r3, r3, #4
 800149a:	6213      	str	r3, [r2, #32]
 800149c:	e01c      	b.n	80014d8 <HAL_RCC_OscConfig+0x440>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x428>
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_RCC_OscConfig+0x494>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4a20      	ldr	r2, [pc, #128]	; (800152c <HAL_RCC_OscConfig+0x494>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6213      	str	r3, [r2, #32]
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_RCC_OscConfig+0x494>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4a1d      	ldr	r2, [pc, #116]	; (800152c <HAL_RCC_OscConfig+0x494>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6213      	str	r3, [r2, #32]
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0x440>
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_RCC_OscConfig+0x494>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4a19      	ldr	r2, [pc, #100]	; (800152c <HAL_RCC_OscConfig+0x494>)
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	6213      	str	r3, [r2, #32]
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_RCC_OscConfig+0x494>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	4a16      	ldr	r2, [pc, #88]	; (800152c <HAL_RCC_OscConfig+0x494>)
 80014d2:	f023 0304 	bic.w	r3, r3, #4
 80014d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d015      	beq.n	800150c <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e0:	f7ff f9fc 	bl	80008dc <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e6:	e00a      	b.n	80014fe <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e8:	f7ff f9f8 	bl	80008dc <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e132      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_RCC_OscConfig+0x494>)
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0ee      	beq.n	80014e8 <HAL_RCC_OscConfig+0x450>
 800150a:	e01d      	b.n	8001548 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150c:	f7ff f9e6 	bl	80008dc <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001512:	e013      	b.n	800153c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001514:	f7ff f9e2 	bl	80008dc <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d90a      	bls.n	800153c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e11c      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	42420480 	.word	0x42420480
 8001534:	08004d6c 	.word	0x08004d6c
 8001538:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153c:	4b8b      	ldr	r3, [pc, #556]	; (800176c <HAL_RCC_OscConfig+0x6d4>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1e5      	bne.n	8001514 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d105      	bne.n	800155a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800154e:	4b87      	ldr	r3, [pc, #540]	; (800176c <HAL_RCC_OscConfig+0x6d4>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a86      	ldr	r2, [pc, #536]	; (800176c <HAL_RCC_OscConfig+0x6d4>)
 8001554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001558:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00c      	beq.n	800157c <HAL_RCC_OscConfig+0x4e4>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d008      	beq.n	800157c <HAL_RCC_OscConfig+0x4e4>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d004      	beq.n	800157c <HAL_RCC_OscConfig+0x4e4>
 8001572:	f240 21af 	movw	r1, #687	; 0x2af
 8001576:	487e      	ldr	r0, [pc, #504]	; (8001770 <HAL_RCC_OscConfig+0x6d8>)
 8001578:	f7fe ff8c 	bl	8000494 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80ee 	beq.w	8001762 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001586:	4b79      	ldr	r3, [pc, #484]	; (800176c <HAL_RCC_OscConfig+0x6d4>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b08      	cmp	r3, #8
 8001590:	f000 80ce 	beq.w	8001730 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	2b02      	cmp	r3, #2
 800159a:	f040 80b2 	bne.w	8001702 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <HAL_RCC_OscConfig+0x522>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ae:	d004      	beq.n	80015ba <HAL_RCC_OscConfig+0x522>
 80015b0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80015b4:	486e      	ldr	r0, [pc, #440]	; (8001770 <HAL_RCC_OscConfig+0x6d8>)
 80015b6:	f7fe ff6d 	bl	8000494 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d04a      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015ca:	d045      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015d4:	d040      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80015de:	d03b      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015e8:	d036      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80015f2:	d031      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80015fc:	d02c      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001606:	d027      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001610:	d022      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800161a:	d01d      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001624:	d018      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800162e:	d013      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001638:	d00e      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001642:	d009      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800164c:	d004      	beq.n	8001658 <HAL_RCC_OscConfig+0x5c0>
 800164e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001652:	4847      	ldr	r0, [pc, #284]	; (8001770 <HAL_RCC_OscConfig+0x6d8>)
 8001654:	f7fe ff1e 	bl	8000494 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001658:	4b46      	ldr	r3, [pc, #280]	; (8001774 <HAL_RCC_OscConfig+0x6dc>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff f93d 	bl	80008dc <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff f939 	bl	80008dc <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e075      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001678:	4b3c      	ldr	r3, [pc, #240]	; (800176c <HAL_RCC_OscConfig+0x6d4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d116      	bne.n	80016bc <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d009      	beq.n	80016aa <HAL_RCC_OscConfig+0x612>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800169e:	d004      	beq.n	80016aa <HAL_RCC_OscConfig+0x612>
 80016a0:	f240 21cf 	movw	r1, #719	; 0x2cf
 80016a4:	4832      	ldr	r0, [pc, #200]	; (8001770 <HAL_RCC_OscConfig+0x6d8>)
 80016a6:	f7fe fef5 	bl	8000494 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016aa:	4b30      	ldr	r3, [pc, #192]	; (800176c <HAL_RCC_OscConfig+0x6d4>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	492d      	ldr	r1, [pc, #180]	; (800176c <HAL_RCC_OscConfig+0x6d4>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016bc:	4b2b      	ldr	r3, [pc, #172]	; (800176c <HAL_RCC_OscConfig+0x6d4>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a19      	ldr	r1, [r3, #32]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	430b      	orrs	r3, r1
 80016ce:	4927      	ldr	r1, [pc, #156]	; (800176c <HAL_RCC_OscConfig+0x6d4>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_RCC_OscConfig+0x6dc>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff f8ff 	bl	80008dc <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e2:	f7ff f8fb 	bl	80008dc <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e037      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_RCC_OscConfig+0x6d4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x64a>
 8001700:	e02f      	b.n	8001762 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HAL_RCC_OscConfig+0x6dc>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff f8e8 	bl	80008dc <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff f8e4 	bl	80008dc <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e020      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_RCC_OscConfig+0x6d4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x678>
 800172e:	e018      	b.n	8001762 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e013      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_OscConfig+0x6d4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	429a      	cmp	r2, r3
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	08004d6c 	.word	0x08004d6c
 8001774:	42420060 	.word	0x42420060

08001778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e176      	b.n	8001a7a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d116      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x4e>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d110      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x4e>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10a      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x4e>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d104      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x4e>
 80017bc:	f44f 714e 	mov.w	r1, #824	; 0x338
 80017c0:	4874      	ldr	r0, [pc, #464]	; (8001994 <HAL_RCC_ClockConfig+0x21c>)
 80017c2:	f7fe fe67 	bl	8000494 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00a      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x6a>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d007      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x6a>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d004      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x6a>
 80017d8:	f240 3139 	movw	r1, #825	; 0x339
 80017dc:	486d      	ldr	r0, [pc, #436]	; (8001994 <HAL_RCC_ClockConfig+0x21c>)
 80017de:	f7fe fe59 	bl	8000494 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e2:	4b6d      	ldr	r3, [pc, #436]	; (8001998 <HAL_RCC_ClockConfig+0x220>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d910      	bls.n	8001812 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f0:	4b69      	ldr	r3, [pc, #420]	; (8001998 <HAL_RCC_ClockConfig+0x220>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 0207 	bic.w	r2, r3, #7
 80017f8:	4967      	ldr	r1, [pc, #412]	; (8001998 <HAL_RCC_ClockConfig+0x220>)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001800:	4b65      	ldr	r3, [pc, #404]	; (8001998 <HAL_RCC_ClockConfig+0x220>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d001      	beq.n	8001812 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e133      	b.n	8001a7a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d049      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800182a:	4b5c      	ldr	r3, [pc, #368]	; (800199c <HAL_RCC_ClockConfig+0x224>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4a5b      	ldr	r2, [pc, #364]	; (800199c <HAL_RCC_ClockConfig+0x224>)
 8001830:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001834:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001842:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_RCC_ClockConfig+0x224>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4a55      	ldr	r2, [pc, #340]	; (800199c <HAL_RCC_ClockConfig+0x224>)
 8001848:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800184c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d024      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x128>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b80      	cmp	r3, #128	; 0x80
 800185c:	d020      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x128>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b90      	cmp	r3, #144	; 0x90
 8001864:	d01c      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x128>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2ba0      	cmp	r3, #160	; 0xa0
 800186c:	d018      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x128>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2bb0      	cmp	r3, #176	; 0xb0
 8001874:	d014      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x128>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2bc0      	cmp	r3, #192	; 0xc0
 800187c:	d010      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x128>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2bd0      	cmp	r3, #208	; 0xd0
 8001884:	d00c      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x128>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2be0      	cmp	r3, #224	; 0xe0
 800188c:	d008      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x128>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2bf0      	cmp	r3, #240	; 0xf0
 8001894:	d004      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x128>
 8001896:	f240 315f 	movw	r1, #863	; 0x35f
 800189a:	483e      	ldr	r0, [pc, #248]	; (8001994 <HAL_RCC_ClockConfig+0x21c>)
 800189c:	f7fe fdfa 	bl	8000494 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a0:	4b3e      	ldr	r3, [pc, #248]	; (800199c <HAL_RCC_ClockConfig+0x224>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	493b      	ldr	r1, [pc, #236]	; (800199c <HAL_RCC_ClockConfig+0x224>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d051      	beq.n	8001962 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00c      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x168>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d008      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x168>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d004      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x168>
 80018d6:	f240 3166 	movw	r1, #870	; 0x366
 80018da:	482e      	ldr	r0, [pc, #184]	; (8001994 <HAL_RCC_ClockConfig+0x21c>)
 80018dc:	f7fe fdda 	bl	8000494 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d107      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e8:	4b2c      	ldr	r3, [pc, #176]	; (800199c <HAL_RCC_ClockConfig+0x224>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d115      	bne.n	8001920 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0c0      	b.n	8001a7a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001900:	4b26      	ldr	r3, [pc, #152]	; (800199c <HAL_RCC_ClockConfig+0x224>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0b4      	b.n	8001a7a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_RCC_ClockConfig+0x224>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0ac      	b.n	8001a7a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_RCC_ClockConfig+0x224>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f023 0203 	bic.w	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	491b      	ldr	r1, [pc, #108]	; (800199c <HAL_RCC_ClockConfig+0x224>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001932:	f7fe ffd3 	bl	80008dc <HAL_GetTick>
 8001936:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001938:	e00a      	b.n	8001950 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193a:	f7fe ffcf 	bl	80008dc <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e094      	b.n	8001a7a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_RCC_ClockConfig+0x224>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 020c 	and.w	r2, r3, #12
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	429a      	cmp	r2, r3
 8001960:	d1eb      	bne.n	800193a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_RCC_ClockConfig+0x220>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d217      	bcs.n	80019a0 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_RCC_ClockConfig+0x220>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 0207 	bic.w	r2, r3, #7
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <HAL_RCC_ClockConfig+0x220>)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	4313      	orrs	r3, r2
 800197e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_ClockConfig+0x220>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d008      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e073      	b.n	8001a7a <HAL_RCC_ClockConfig+0x302>
 8001992:	bf00      	nop
 8001994:	08004d6c 	.word	0x08004d6c
 8001998:	40022000 	.word	0x40022000
 800199c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d025      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d018      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x26e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019bc:	d013      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x26e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80019c6:	d00e      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x26e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80019d0:	d009      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x26e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019da:	d004      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x26e>
 80019dc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80019e0:	4828      	ldr	r0, [pc, #160]	; (8001a84 <HAL_RCC_ClockConfig+0x30c>)
 80019e2:	f7fe fd57 	bl	8000494 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e6:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <HAL_RCC_ClockConfig+0x310>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	4925      	ldr	r1, [pc, #148]	; (8001a88 <HAL_RCC_ClockConfig+0x310>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d026      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d018      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x2c6>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a14:	d013      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x2c6>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001a1e:	d00e      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x2c6>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001a28:	d009      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x2c6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a32:	d004      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x2c6>
 8001a34:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001a38:	4812      	ldr	r0, [pc, #72]	; (8001a84 <HAL_RCC_ClockConfig+0x30c>)
 8001a3a:	f7fe fd2b 	bl	8000494 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_RCC_ClockConfig+0x310>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	490e      	ldr	r1, [pc, #56]	; (8001a88 <HAL_RCC_ClockConfig+0x310>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a52:	f000 f821 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_ClockConfig+0x310>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	490a      	ldr	r1, [pc, #40]	; (8001a8c <HAL_RCC_ClockConfig+0x314>)
 8001a64:	5ccb      	ldrb	r3, [r1, r3]
 8001a66:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_RCC_ClockConfig+0x318>)
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_RCC_ClockConfig+0x31c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd4a 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	08004d6c 	.word	0x08004d6c
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	08004eb0 	.word	0x08004eb0
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	b490      	push	{r4, r7}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001aa0:	1d3c      	adds	r4, r7, #4
 8001aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001aa8:	f240 2301 	movw	r3, #513	; 0x201
 8001aac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d002      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d003      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0x46>
 8001ad6:	e02d      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ada:	623b      	str	r3, [r7, #32]
      break;
 8001adc:	e02d      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	0c9b      	lsrs	r3, r3, #18
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aea:	4413      	add	r3, r2
 8001aec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001af0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0c5b      	lsrs	r3, r3, #17
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b16:	fb02 f203 	mul.w	r2, r2, r3
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	e004      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	623b      	str	r3, [r7, #32]
      break;
 8001b32:	e002      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b36:	623b      	str	r3, [r7, #32]
      break;
 8001b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3728      	adds	r7, #40	; 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc90      	pop	{r4, r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	08004da4 	.word	0x08004da4
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	007a1200 	.word	0x007a1200
 8001b54:	003d0900 	.word	0x003d0900

08001b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b5c:	4b02      	ldr	r3, [pc, #8]	; (8001b68 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	20000000 	.word	0x20000000

08001b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b70:	f7ff fff2 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4903      	ldr	r1, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08004ec0 	.word	0x08004ec0

08001b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b98:	f7ff ffde 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	0adb      	lsrs	r3, r3, #11
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4903      	ldr	r1, [pc, #12]	; (8001bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	08004ec0 	.word	0x08004ec0

08001bbc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d104      	bne.n	8001bd6 <HAL_RCC_GetClockConfig+0x1a>
 8001bcc:	f240 5123 	movw	r1, #1315	; 0x523
 8001bd0:	4818      	ldr	r0, [pc, #96]	; (8001c34 <HAL_RCC_GetClockConfig+0x78>)
 8001bd2:	f7fe fc5f 	bl	8000494 <assert_failed>
  assert_param(pFLatency != NULL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d104      	bne.n	8001be6 <HAL_RCC_GetClockConfig+0x2a>
 8001bdc:	f240 5124 	movw	r1, #1316	; 0x524
 8001be0:	4814      	ldr	r0, [pc, #80]	; (8001c34 <HAL_RCC_GetClockConfig+0x78>)
 8001be2:	f7fe fc57 	bl	8000494 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	220f      	movs	r2, #15
 8001bea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_RCC_GetClockConfig+0x7c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_RCC_GetClockConfig+0x7c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <HAL_RCC_GetClockConfig+0x7c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_GetClockConfig+0x7c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	08db      	lsrs	r3, r3, #3
 8001c16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_RCC_GetClockConfig+0x80>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0207 	and.w	r2, r3, #7
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	08004d6c 	.word	0x08004d6c
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40022000 	.word	0x40022000

08001c40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <RCC_Delay+0x34>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <RCC_Delay+0x38>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	0a5b      	lsrs	r3, r3, #9
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c5c:	bf00      	nop
  }
  while (Delay --);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1e5a      	subs	r2, r3, #1
 8001c62:	60fa      	str	r2, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f9      	bne.n	8001c5c <RCC_Delay+0x1c>
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000000 	.word	0x20000000
 8001c78:	10624dd3 	.word	0x10624dd3

08001c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0a7      	b.n	8001dde <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a55      	ldr	r2, [pc, #340]	; (8001de8 <HAL_TIM_Base_Init+0x16c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d027      	beq.n	8001ce8 <HAL_TIM_Base_Init+0x6c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a53      	ldr	r2, [pc, #332]	; (8001dec <HAL_TIM_Base_Init+0x170>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d022      	beq.n	8001ce8 <HAL_TIM_Base_Init+0x6c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001caa:	d01d      	beq.n	8001ce8 <HAL_TIM_Base_Init+0x6c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a4f      	ldr	r2, [pc, #316]	; (8001df0 <HAL_TIM_Base_Init+0x174>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d018      	beq.n	8001ce8 <HAL_TIM_Base_Init+0x6c>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a4e      	ldr	r2, [pc, #312]	; (8001df4 <HAL_TIM_Base_Init+0x178>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d013      	beq.n	8001ce8 <HAL_TIM_Base_Init+0x6c>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a4c      	ldr	r2, [pc, #304]	; (8001df8 <HAL_TIM_Base_Init+0x17c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00e      	beq.n	8001ce8 <HAL_TIM_Base_Init+0x6c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a4b      	ldr	r2, [pc, #300]	; (8001dfc <HAL_TIM_Base_Init+0x180>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d009      	beq.n	8001ce8 <HAL_TIM_Base_Init+0x6c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a49      	ldr	r2, [pc, #292]	; (8001e00 <HAL_TIM_Base_Init+0x184>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d004      	beq.n	8001ce8 <HAL_TIM_Base_Init+0x6c>
 8001cde:	f240 1113 	movw	r1, #275	; 0x113
 8001ce2:	4848      	ldr	r0, [pc, #288]	; (8001e04 <HAL_TIM_Base_Init+0x188>)
 8001ce4:	f7fe fbd6 	bl	8000494 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d014      	beq.n	8001d1a <HAL_TIM_Base_Init+0x9e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	d010      	beq.n	8001d1a <HAL_TIM_Base_Init+0x9e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d00c      	beq.n	8001d1a <HAL_TIM_Base_Init+0x9e>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b40      	cmp	r3, #64	; 0x40
 8001d06:	d008      	beq.n	8001d1a <HAL_TIM_Base_Init+0x9e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b60      	cmp	r3, #96	; 0x60
 8001d0e:	d004      	beq.n	8001d1a <HAL_TIM_Base_Init+0x9e>
 8001d10:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001d14:	483b      	ldr	r0, [pc, #236]	; (8001e04 <HAL_TIM_Base_Init+0x188>)
 8001d16:	f7fe fbbd 	bl	8000494 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00e      	beq.n	8001d40 <HAL_TIM_Base_Init+0xc4>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2a:	d009      	beq.n	8001d40 <HAL_TIM_Base_Init+0xc4>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d34:	d004      	beq.n	8001d40 <HAL_TIM_Base_Init+0xc4>
 8001d36:	f240 1115 	movw	r1, #277	; 0x115
 8001d3a:	4832      	ldr	r0, [pc, #200]	; (8001e04 <HAL_TIM_Base_Init+0x188>)
 8001d3c:	f7fe fbaa 	bl	8000494 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_TIM_Base_Init+0xde>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b80      	cmp	r3, #128	; 0x80
 8001d4e:	d004      	beq.n	8001d5a <HAL_TIM_Base_Init+0xde>
 8001d50:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001d54:	482b      	ldr	r0, [pc, #172]	; (8001e04 <HAL_TIM_Base_Init+0x188>)
 8001d56:	f7fe fb9d 	bl	8000494 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f84a 	bl	8001e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3304      	adds	r3, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f000 fa06 	bl	8002198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40012c00 	.word	0x40012c00
 8001dec:	40013400 	.word	0x40013400
 8001df0:	40000400 	.word	0x40000400
 8001df4:	40000800 	.word	0x40000800
 8001df8:	40000c00 	.word	0x40000c00
 8001dfc:	40001000 	.word	0x40001000
 8001e00:	40001400 	.word	0x40001400
 8001e04:	08004db4 	.word	0x08004db4

08001e08 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a3d      	ldr	r2, [pc, #244]	; (8001f20 <HAL_TIM_Base_Start_IT+0x104>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d027      	beq.n	8001e7e <HAL_TIM_Base_Start_IT+0x62>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a3c      	ldr	r2, [pc, #240]	; (8001f24 <HAL_TIM_Base_Start_IT+0x108>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d022      	beq.n	8001e7e <HAL_TIM_Base_Start_IT+0x62>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e40:	d01d      	beq.n	8001e7e <HAL_TIM_Base_Start_IT+0x62>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a38      	ldr	r2, [pc, #224]	; (8001f28 <HAL_TIM_Base_Start_IT+0x10c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d018      	beq.n	8001e7e <HAL_TIM_Base_Start_IT+0x62>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a36      	ldr	r2, [pc, #216]	; (8001f2c <HAL_TIM_Base_Start_IT+0x110>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <HAL_TIM_Base_Start_IT+0x62>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a35      	ldr	r2, [pc, #212]	; (8001f30 <HAL_TIM_Base_Start_IT+0x114>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00e      	beq.n	8001e7e <HAL_TIM_Base_Start_IT+0x62>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a33      	ldr	r2, [pc, #204]	; (8001f34 <HAL_TIM_Base_Start_IT+0x118>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_TIM_Base_Start_IT+0x62>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a32      	ldr	r2, [pc, #200]	; (8001f38 <HAL_TIM_Base_Start_IT+0x11c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d004      	beq.n	8001e7e <HAL_TIM_Base_Start_IT+0x62>
 8001e74:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001e78:	4830      	ldr	r0, [pc, #192]	; (8001f3c <HAL_TIM_Base_Start_IT+0x120>)
 8001e7a:	f7fe fb0b 	bl	8000494 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d001      	beq.n	8001e8e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e044      	b.n	8001f18 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2202      	movs	r2, #2
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <HAL_TIM_Base_Start_IT+0x104>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d018      	beq.n	8001ee2 <HAL_TIM_Base_Start_IT+0xc6>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <HAL_TIM_Base_Start_IT+0x108>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_TIM_Base_Start_IT+0xc6>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec2:	d00e      	beq.n	8001ee2 <HAL_TIM_Base_Start_IT+0xc6>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <HAL_TIM_Base_Start_IT+0x10c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <HAL_TIM_Base_Start_IT+0xc6>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a16      	ldr	r2, [pc, #88]	; (8001f2c <HAL_TIM_Base_Start_IT+0x110>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d004      	beq.n	8001ee2 <HAL_TIM_Base_Start_IT+0xc6>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <HAL_TIM_Base_Start_IT+0x114>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d111      	bne.n	8001f06 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b06      	cmp	r3, #6
 8001ef2:	d010      	beq.n	8001f16 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f04:	e007      	b.n	8001f16 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40013400 	.word	0x40013400
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	40000800 	.word	0x40000800
 8001f30:	40000c00 	.word	0x40000c00
 8001f34:	40001000 	.word	0x40001000
 8001f38:	40001400 	.word	0x40001400
 8001f3c:	08004db4 	.word	0x08004db4

08001f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d122      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d11b      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0202 	mvn.w	r2, #2
 8001f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8ed 	bl	8002162 <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f8e0 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8ef 	bl	8002174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d122      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0204 	mvn.w	r2, #4
 8001fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f8c3 	bl	8002162 <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e005      	b.n	8001fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8b6 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f8c5 	bl	8002174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d122      	bne.n	8002044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b08      	cmp	r3, #8
 800200a:	d11b      	bne.n	8002044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0208 	mvn.w	r2, #8
 8002014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2204      	movs	r2, #4
 800201a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f899 	bl	8002162 <HAL_TIM_IC_CaptureCallback>
 8002030:	e005      	b.n	800203e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f88c 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f89b 	bl	8002174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b10      	cmp	r3, #16
 8002050:	d122      	bne.n	8002098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b10      	cmp	r3, #16
 800205e:	d11b      	bne.n	8002098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0210 	mvn.w	r2, #16
 8002068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2208      	movs	r2, #8
 800206e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f86f 	bl	8002162 <HAL_TIM_IC_CaptureCallback>
 8002084:	e005      	b.n	8002092 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f862 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f871 	bl	8002174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10e      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0201 	mvn.w	r2, #1
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe f9d4 	bl	800046c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ce:	2b80      	cmp	r3, #128	; 0x80
 80020d0:	d10e      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d107      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8d7 	bl	800229e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fa:	2b40      	cmp	r3, #64	; 0x40
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d107      	bne.n	800211c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f835 	bl	8002186 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b20      	cmp	r3, #32
 8002128:	d10e      	bne.n	8002148 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b20      	cmp	r3, #32
 8002136:	d107      	bne.n	8002148 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0220 	mvn.w	r2, #32
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8a2 	bl	800228c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a33      	ldr	r2, [pc, #204]	; (8002278 <TIM_Base_SetConfig+0xe0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d013      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a32      	ldr	r2, [pc, #200]	; (800227c <TIM_Base_SetConfig+0xe4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00f      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021be:	d00b      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a2f      	ldr	r2, [pc, #188]	; (8002280 <TIM_Base_SetConfig+0xe8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d007      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a2e      	ldr	r2, [pc, #184]	; (8002284 <TIM_Base_SetConfig+0xec>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d003      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a2d      	ldr	r2, [pc, #180]	; (8002288 <TIM_Base_SetConfig+0xf0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d108      	bne.n	80021ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a22      	ldr	r2, [pc, #136]	; (8002278 <TIM_Base_SetConfig+0xe0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <TIM_Base_SetConfig+0x82>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a21      	ldr	r2, [pc, #132]	; (800227c <TIM_Base_SetConfig+0xe4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00f      	beq.n	800221a <TIM_Base_SetConfig+0x82>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002200:	d00b      	beq.n	800221a <TIM_Base_SetConfig+0x82>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <TIM_Base_SetConfig+0xe8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <TIM_Base_SetConfig+0x82>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <TIM_Base_SetConfig+0xec>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d003      	beq.n	800221a <TIM_Base_SetConfig+0x82>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a1c      	ldr	r2, [pc, #112]	; (8002288 <TIM_Base_SetConfig+0xf0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d108      	bne.n	800222c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <TIM_Base_SetConfig+0xe0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <TIM_Base_SetConfig+0xc8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a08      	ldr	r2, [pc, #32]	; (800227c <TIM_Base_SetConfig+0xe4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d103      	bne.n	8002268 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	615a      	str	r2, [r3, #20]
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40012c00 	.word	0x40012c00
 800227c:	40013400 	.word	0x40013400
 8002280:	40000400 	.word	0x40000400
 8002284:	40000800 	.word	0x40000800
 8002288:	40000c00 	.word	0x40000c00

0800228c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e09c      	b.n	80023fc <HAL_UART_Init+0x14c>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d02c      	beq.n	8002324 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a4d      	ldr	r2, [pc, #308]	; (8002404 <HAL_UART_Init+0x154>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00e      	beq.n	80022f2 <HAL_UART_Init+0x42>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a4b      	ldr	r2, [pc, #300]	; (8002408 <HAL_UART_Init+0x158>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d009      	beq.n	80022f2 <HAL_UART_Init+0x42>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a4a      	ldr	r2, [pc, #296]	; (800240c <HAL_UART_Init+0x15c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d004      	beq.n	80022f2 <HAL_UART_Init+0x42>
 80022e8:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80022ec:	4848      	ldr	r0, [pc, #288]	; (8002410 <HAL_UART_Init+0x160>)
 80022ee:	f7fe f8d1 	bl	8000494 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d032      	beq.n	8002360 <HAL_UART_Init+0xb0>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002302:	d02d      	beq.n	8002360 <HAL_UART_Init+0xb0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800230c:	d028      	beq.n	8002360 <HAL_UART_Init+0xb0>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002316:	d023      	beq.n	8002360 <HAL_UART_Init+0xb0>
 8002318:	f240 116d 	movw	r1, #365	; 0x16d
 800231c:	483c      	ldr	r0, [pc, #240]	; (8002410 <HAL_UART_Init+0x160>)
 800231e:	f7fe f8b9 	bl	8000494 <assert_failed>
 8002322:	e01d      	b.n	8002360 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a36      	ldr	r2, [pc, #216]	; (8002404 <HAL_UART_Init+0x154>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d018      	beq.n	8002360 <HAL_UART_Init+0xb0>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a35      	ldr	r2, [pc, #212]	; (8002408 <HAL_UART_Init+0x158>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d013      	beq.n	8002360 <HAL_UART_Init+0xb0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a33      	ldr	r2, [pc, #204]	; (800240c <HAL_UART_Init+0x15c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00e      	beq.n	8002360 <HAL_UART_Init+0xb0>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a33      	ldr	r2, [pc, #204]	; (8002414 <HAL_UART_Init+0x164>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_UART_Init+0xb0>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a31      	ldr	r2, [pc, #196]	; (8002418 <HAL_UART_Init+0x168>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_UART_Init+0xb0>
 8002356:	f240 1171 	movw	r1, #369	; 0x171
 800235a:	482d      	ldr	r0, [pc, #180]	; (8002410 <HAL_UART_Init+0x160>)
 800235c:	f7fe f89a 	bl	8000494 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <HAL_UART_Init+0xcc>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002370:	d004      	beq.n	800237c <HAL_UART_Init+0xcc>
 8002372:	f240 1173 	movw	r1, #371	; 0x173
 8002376:	4826      	ldr	r0, [pc, #152]	; (8002410 <HAL_UART_Init+0x160>)
 8002378:	f7fe f88c 	bl	8000494 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7fe fa09 	bl	80007a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2224      	movs	r2, #36	; 0x24
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f910 	bl	80025d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40013800 	.word	0x40013800
 8002408:	40004400 	.word	0x40004400
 800240c:	40004800 	.word	0x40004800
 8002410:	08004dec 	.word	0x08004dec
 8002414:	40004c00 	.word	0x40004c00
 8002418:	40005000 	.word	0x40005000

0800241c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b20      	cmp	r3, #32
 800243a:	d17c      	bne.n	8002536 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_UART_Transmit+0x2c>
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e075      	b.n	8002538 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_UART_Transmit+0x3e>
 8002456:	2302      	movs	r3, #2
 8002458:	e06e      	b.n	8002538 <HAL_UART_Transmit+0x11c>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2221      	movs	r2, #33	; 0x21
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002470:	f7fe fa34 	bl	80008dc <HAL_GetTick>
 8002474:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	88fa      	ldrh	r2, [r7, #6]
 800247a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	88fa      	ldrh	r2, [r7, #6]
 8002480:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248a:	d108      	bne.n	800249e <HAL_UART_Transmit+0x82>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d104      	bne.n	800249e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	e003      	b.n	80024a6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024ae:	e02a      	b.n	8002506 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2200      	movs	r2, #0
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f840 	bl	8002540 <UART_WaitOnFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e036      	b.n	8002538 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10b      	bne.n	80024e8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024de:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	3302      	adds	r3, #2
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	e007      	b.n	80024f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3301      	adds	r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1cf      	bne.n	80024b0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2200      	movs	r2, #0
 8002518:	2140      	movs	r1, #64	; 0x40
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f810 	bl	8002540 <UART_WaitOnFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e006      	b.n	8002538 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e000      	b.n	8002538 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002536:	2302      	movs	r3, #2
  }
}
 8002538:	4618      	mov	r0, r3
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002550:	e02c      	b.n	80025ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002558:	d028      	beq.n	80025ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <UART_WaitOnFlagUntilTimeout+0x30>
 8002560:	f7fe f9bc 	bl	80008dc <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	429a      	cmp	r2, r3
 800256e:	d21d      	bcs.n	80025ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800257e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e00f      	b.n	80025cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4013      	ands	r3, r2
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d0c3      	beq.n	8002552 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a5f      	ldr	r2, [pc, #380]	; (8002760 <UART_SetConfig+0x18c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d904      	bls.n	80025f0 <UART_SetConfig+0x1c>
 80025e6:	f640 6153 	movw	r1, #3667	; 0xe53
 80025ea:	485e      	ldr	r0, [pc, #376]	; (8002764 <UART_SetConfig+0x190>)
 80025ec:	f7fd ff52 	bl	8000494 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <UART_SetConfig+0x38>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002600:	d004      	beq.n	800260c <UART_SetConfig+0x38>
 8002602:	f640 6154 	movw	r1, #3668	; 0xe54
 8002606:	4857      	ldr	r0, [pc, #348]	; (8002764 <UART_SetConfig+0x190>)
 8002608:	f7fd ff44 	bl	8000494 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00e      	beq.n	8002632 <UART_SetConfig+0x5e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261c:	d009      	beq.n	8002632 <UART_SetConfig+0x5e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002626:	d004      	beq.n	8002632 <UART_SetConfig+0x5e>
 8002628:	f640 6155 	movw	r1, #3669	; 0xe55
 800262c:	484d      	ldr	r0, [pc, #308]	; (8002764 <UART_SetConfig+0x190>)
 800262e:	f7fd ff31 	bl	8000494 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d103      	bne.n	8002648 <UART_SetConfig+0x74>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d104      	bne.n	8002652 <UART_SetConfig+0x7e>
 8002648:	f640 6156 	movw	r1, #3670	; 0xe56
 800264c:	4845      	ldr	r0, [pc, #276]	; (8002764 <UART_SetConfig+0x190>)
 800264e:	f7fd ff21 	bl	8000494 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002684:	f023 030c 	bic.w	r3, r3, #12
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	430b      	orrs	r3, r1
 8002690:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2e      	ldr	r2, [pc, #184]	; (8002768 <UART_SetConfig+0x194>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d103      	bne.n	80026ba <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026b2:	f7ff fa6f 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	e002      	b.n	80026c0 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026ba:	f7ff fa57 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 80026be:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	009a      	lsls	r2, r3, #2
 80026ca:	441a      	add	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	4a25      	ldr	r2, [pc, #148]	; (800276c <UART_SetConfig+0x198>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	0119      	lsls	r1, r3, #4
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	009a      	lsls	r2, r3, #2
 80026ea:	441a      	add	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80026f6:	4b1d      	ldr	r3, [pc, #116]	; (800276c <UART_SetConfig+0x198>)
 80026f8:	fba3 0302 	umull	r0, r3, r3, r2
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	2064      	movs	r0, #100	; 0x64
 8002700:	fb00 f303 	mul.w	r3, r0, r3
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	3332      	adds	r3, #50	; 0x32
 800270a:	4a18      	ldr	r2, [pc, #96]	; (800276c <UART_SetConfig+0x198>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002716:	4419      	add	r1, r3
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	009a      	lsls	r2, r3, #2
 8002722:	441a      	add	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	fbb2 f2f3 	udiv	r2, r2, r3
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <UART_SetConfig+0x198>)
 8002730:	fba3 0302 	umull	r0, r3, r3, r2
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	2064      	movs	r0, #100	; 0x64
 8002738:	fb00 f303 	mul.w	r3, r0, r3
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	3332      	adds	r3, #50	; 0x32
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <UART_SetConfig+0x198>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	f003 020f 	and.w	r2, r3, #15
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	440a      	add	r2, r1
 8002754:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	0044aa20 	.word	0x0044aa20
 8002764:	08004dec 	.word	0x08004dec
 8002768:	40013800 	.word	0x40013800
 800276c:	51eb851f 	.word	0x51eb851f

08002770 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f103 0208 	add.w	r2, r3, #8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002788:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f103 0208 	add.w	r2, r3, #8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f103 0208 	add.w	r2, r3, #8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	601a      	str	r2, [r3, #0]
}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002822:	d103      	bne.n	800282c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e00c      	b.n	8002846 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3308      	adds	r3, #8
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e002      	b.n	800283a <vListInsert+0x2e>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	429a      	cmp	r2, r3
 8002844:	d2f6      	bcs.n	8002834 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	601a      	str	r2, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6892      	ldr	r2, [r2, #8]
 8002892:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6852      	ldr	r2, [r2, #4]
 800289c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d103      	bne.n	80028b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	1e5a      	subs	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b08c      	sub	sp, #48	; 0x30
 80028d2:	af04      	add	r7, sp, #16
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	4613      	mov	r3, r2
 80028dc:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fe14 	bl	8003510 <pvPortMalloc>
 80028e8:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00e      	beq.n	800290e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028f0:	2054      	movs	r0, #84	; 0x54
 80028f2:	f000 fe0d 	bl	8003510 <pvPortMalloc>
 80028f6:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
 8002904:	e005      	b.n	8002912 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002906:	6978      	ldr	r0, [r7, #20]
 8002908:	f000 fed6 	bl	80036b8 <vPortFree>
 800290c:	e001      	b.n	8002912 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002918:	88fa      	ldrh	r2, [r7, #6]
 800291a:	2300      	movs	r3, #0
 800291c:	9303      	str	r3, [sp, #12]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	9302      	str	r3, [sp, #8]
 8002922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f80e 	bl	8002950 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002934:	69f8      	ldr	r0, [r7, #28]
 8002936:	f000 f8a1 	bl	8002a7c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800293a:	2301      	movs	r3, #1
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	e002      	b.n	8002946 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002944:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002946:	69bb      	ldr	r3, [r7, #24]
    }
 8002948:	4618      	mov	r0, r3
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002968:	3b01      	subs	r3, #1
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f023 0307 	bic.w	r3, r3, #7
 8002976:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <prvInitialiseNewTask+0x3e>
 8002982:	f44f 7258 	mov.w	r2, #864	; 0x360
 8002986:	493b      	ldr	r1, [pc, #236]	; (8002a74 <prvInitialiseNewTask+0x124>)
 8002988:	483b      	ldr	r0, [pc, #236]	; (8002a78 <prvInitialiseNewTask+0x128>)
 800298a:	f001 f993 	bl	8003cb4 <iprintf>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01f      	beq.n	80029d4 <prvInitialiseNewTask+0x84>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	e012      	b.n	80029c0 <prvInitialiseNewTask+0x70>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	4413      	add	r3, r2
 80029a0:	7819      	ldrb	r1, [r3, #0]
 80029a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	4413      	add	r3, r2
 80029a8:	3334      	adds	r3, #52	; 0x34
 80029aa:	460a      	mov	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <prvInitialiseNewTask+0x78>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3301      	adds	r3, #1
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b0f      	cmp	r3, #15
 80029c4:	d9e9      	bls.n	800299a <prvInitialiseNewTask+0x4a>
 80029c6:	e000      	b.n	80029ca <prvInitialiseNewTask+0x7a>
            {
                break;
 80029c8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029d2:	e003      	b.n	80029dc <prvInitialiseNewTask+0x8c>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	2b1f      	cmp	r3, #31
 80029e0:	d905      	bls.n	80029ee <prvInitialiseNewTask+0x9e>
 80029e2:	f240 3297 	movw	r2, #919	; 0x397
 80029e6:	4923      	ldr	r1, [pc, #140]	; (8002a74 <prvInitialiseNewTask+0x124>)
 80029e8:	4823      	ldr	r0, [pc, #140]	; (8002a78 <prvInitialiseNewTask+0x128>)
 80029ea:	f001 f963 	bl	8003cb4 <iprintf>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	2b1f      	cmp	r3, #31
 80029f2:	d901      	bls.n	80029f8 <prvInitialiseNewTask+0xa8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029f4:	231f      	movs	r3, #31
 80029f6:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	6a3a      	ldr	r2, [r7, #32]
 80029fc:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	6a3a      	ldr	r2, [r7, #32]
 8002a02:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	2200      	movs	r2, #0
 8002a08:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fecd 	bl	80027ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	3318      	adds	r3, #24
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fec8 	bl	80027ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a22:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	f1c3 0220 	rsb	r2, r3, #32
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	334c      	adds	r3, #76	; 0x4c
 8002a38:	2204      	movs	r2, #4
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f001 f931 	bl	8003ca4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	3350      	adds	r3, #80	; 0x50
 8002a46:	2201      	movs	r2, #1
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 f92a 	bl	8003ca4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	68f9      	ldr	r1, [r7, #12]
 8002a54:	6938      	ldr	r0, [r7, #16]
 8002a56:	f000 ff45 	bl	80038e4 <pxPortInitialiseStack>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <prvInitialiseNewTask+0x11c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a6a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a6c:	bf00      	nop
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	08004e28 	.word	0x08004e28
 8002a78:	08004e3c 	.word	0x08004e3c

08002a7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a84:	f001 f826 	bl	8003ad4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a88:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <prvAddNewTaskToReadyList+0x108>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	4a3d      	ldr	r2, [pc, #244]	; (8002b84 <prvAddNewTaskToReadyList+0x108>)
 8002a90:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a92:	4b3d      	ldr	r3, [pc, #244]	; (8002b88 <prvAddNewTaskToReadyList+0x10c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a9a:	4a3b      	ldr	r2, [pc, #236]	; (8002b88 <prvAddNewTaskToReadyList+0x10c>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002aa0:	4b38      	ldr	r3, [pc, #224]	; (8002b84 <prvAddNewTaskToReadyList+0x108>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d110      	bne.n	8002aca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002aa8:	f000 fc1a 	bl	80032e0 <prvInitialiseTaskLists>
 8002aac:	e00d      	b.n	8002aca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002aae:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <prvAddNewTaskToReadyList+0x110>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ab6:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <prvAddNewTaskToReadyList+0x10c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d802      	bhi.n	8002aca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ac4:	4a30      	ldr	r2, [pc, #192]	; (8002b88 <prvAddNewTaskToReadyList+0x10c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002aca:	4b31      	ldr	r3, [pc, #196]	; (8002b90 <prvAddNewTaskToReadyList+0x114>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	4a2f      	ldr	r2, [pc, #188]	; (8002b90 <prvAddNewTaskToReadyList+0x114>)
 8002ad2:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	2201      	movs	r2, #1
 8002ada:	409a      	lsls	r2, r3
 8002adc:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <prvAddNewTaskToReadyList+0x118>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	4a2c      	ldr	r2, [pc, #176]	; (8002b94 <prvAddNewTaskToReadyList+0x118>)
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aea:	492b      	ldr	r1, [pc, #172]	; (8002b98 <prvAddNewTaskToReadyList+0x11c>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	3304      	adds	r3, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	3204      	adds	r2, #4
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	1d1a      	adds	r2, r3, #4
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <prvAddNewTaskToReadyList+0x11c>)
 8002b2a:	441a      	add	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	615a      	str	r2, [r3, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b34:	4918      	ldr	r1, [pc, #96]	; (8002b98 <prvAddNewTaskToReadyList+0x11c>)
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	1c59      	adds	r1, r3, #1
 8002b44:	4814      	ldr	r0, [pc, #80]	; (8002b98 <prvAddNewTaskToReadyList+0x11c>)
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4403      	add	r3, r0
 8002b50:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b52:	f000 ffed 	bl	8003b30 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <prvAddNewTaskToReadyList+0x110>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00e      	beq.n	8002b7c <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <prvAddNewTaskToReadyList+0x10c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d207      	bcs.n	8002b7c <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <prvAddNewTaskToReadyList+0x120>)
 8002b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000398 	.word	0x20000398
 8002b88:	200000a4 	.word	0x200000a4
 8002b8c:	200003a4 	.word	0x200003a4
 8002b90:	200003b4 	.word	0x200003b4
 8002b94:	200003a0 	.word	0x200003a0
 8002b98:	200000a8 	.word	0x200000a8
 8002b9c:	e000ed04 	.word	0xe000ed04

08002ba0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002ba8:	f000 ff94 	bl	8003ad4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <vTaskDelete+0x18>
 8002bb2:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <vTaskDelete+0xf8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	e000      	b.n	8002bba <vTaskDelete+0x1a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fe5b 	bl	800287c <uxListRemove>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d115      	bne.n	8002bf8 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd0:	4932      	ldr	r1, [pc, #200]	; (8002c9c <vTaskDelete+0xfc>)
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <vTaskDelete+0x58>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	2201      	movs	r2, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43da      	mvns	r2, r3
 8002bee:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <vTaskDelete+0x100>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	4a2a      	ldr	r2, [pc, #168]	; (8002ca0 <vTaskDelete+0x100>)
 8002bf6:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3318      	adds	r3, #24
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fe39 	bl	800287c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002c0a:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <vTaskDelete+0x104>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	4a24      	ldr	r2, [pc, #144]	; (8002ca4 <vTaskDelete+0x104>)
 8002c12:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002c14:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <vTaskDelete+0xf8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d10b      	bne.n	8002c36 <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3304      	adds	r3, #4
 8002c22:	4619      	mov	r1, r3
 8002c24:	4820      	ldr	r0, [pc, #128]	; (8002ca8 <vTaskDelete+0x108>)
 8002c26:	f7ff fdce 	bl	80027c6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002c2a:	4b20      	ldr	r3, [pc, #128]	; (8002cac <vTaskDelete+0x10c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	4a1e      	ldr	r2, [pc, #120]	; (8002cac <vTaskDelete+0x10c>)
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	e006      	b.n	8002c44 <vTaskDelete+0xa4>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002c36:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <vTaskDelete+0x110>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <vTaskDelete+0x110>)
 8002c3e:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002c40:	f000 fbcc 	bl	80033dc <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002c44:	f000 ff74 	bl	8003b30 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <vTaskDelete+0xf8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d002      	beq.n	8002c58 <vTaskDelete+0xb8>
        {
            prvDeleteTCB( pxTCB );
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fbb2 	bl	80033bc <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <vTaskDelete+0x114>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d016      	beq.n	8002c8e <vTaskDelete+0xee>
        {
            if( pxTCB == pxCurrentTCB )
 8002c60:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <vTaskDelete+0xf8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d111      	bne.n	8002c8e <vTaskDelete+0xee>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002c6a:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <vTaskDelete+0x118>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <vTaskDelete+0xde>
 8002c72:	f240 42dc 	movw	r2, #1244	; 0x4dc
 8002c76:	4911      	ldr	r1, [pc, #68]	; (8002cbc <vTaskDelete+0x11c>)
 8002c78:	4811      	ldr	r0, [pc, #68]	; (8002cc0 <vTaskDelete+0x120>)
 8002c7a:	f001 f81b 	bl	8003cb4 <iprintf>
                portYIELD_WITHIN_API();
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <vTaskDelete+0x124>)
 8002c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200000a4 	.word	0x200000a4
 8002c9c:	200000a8 	.word	0x200000a8
 8002ca0:	200003a0 	.word	0x200003a0
 8002ca4:	200003b4 	.word	0x200003b4
 8002ca8:	2000036c 	.word	0x2000036c
 8002cac:	20000380 	.word	0x20000380
 8002cb0:	20000398 	.word	0x20000398
 8002cb4:	200003a4 	.word	0x200003a4
 8002cb8:	200003c0 	.word	0x200003c0
 8002cbc:	08004e28 	.word	0x08004e28
 8002cc0:	08004e3c 	.word	0x08004e3c
 8002cc4:	e000ed04 	.word	0xe000ed04

08002cc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d012      	beq.n	8002d00 <vTaskDelay+0x38>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <vTaskDelay+0x58>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <vTaskDelay+0x26>
 8002ce2:	f240 5249 	movw	r2, #1353	; 0x549
 8002ce6:	490f      	ldr	r1, [pc, #60]	; (8002d24 <vTaskDelay+0x5c>)
 8002ce8:	480f      	ldr	r0, [pc, #60]	; (8002d28 <vTaskDelay+0x60>)
 8002cea:	f000 ffe3 	bl	8003cb4 <iprintf>
            vTaskSuspendAll();
 8002cee:	f000 f869 	bl	8002dc4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fb8b 	bl	8003410 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002cfa:	f000 f871 	bl	8002de0 <xTaskResumeAll>
 8002cfe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d107      	bne.n	8002d16 <vTaskDelay+0x4e>
        {
            portYIELD_WITHIN_API();
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <vTaskDelay+0x64>)
 8002d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200003c0 	.word	0x200003c0
 8002d24:	08004e28 	.word	0x08004e28
 8002d28:	08004e3c 	.word	0x08004e3c
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <vTaskStartScheduler+0x70>)
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2280      	movs	r2, #128	; 0x80
 8002d42:	4918      	ldr	r1, [pc, #96]	; (8002da4 <vTaskStartScheduler+0x74>)
 8002d44:	4818      	ldr	r0, [pc, #96]	; (8002da8 <vTaskStartScheduler+0x78>)
 8002d46:	f7ff fdc2 	bl	80028ce <xTaskCreate>
 8002d4a:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d116      	bne.n	8002d80 <vTaskStartScheduler+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d56:	f383 8811 	msr	BASEPRI, r3
 8002d5a:	f3bf 8f6f 	isb	sy
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002d64:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d66:	4b11      	ldr	r3, [pc, #68]	; (8002dac <vTaskStartScheduler+0x7c>)
 8002d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d6c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <vTaskStartScheduler+0x80>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <vTaskStartScheduler+0x84>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002d7a:	f000 fe2f 	bl	80039dc <xPortStartScheduler>
 8002d7e:	e009      	b.n	8002d94 <vTaskStartScheduler+0x64>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d86:	d105      	bne.n	8002d94 <vTaskStartScheduler+0x64>
 8002d88:	f44f 6204 	mov.w	r2, #2112	; 0x840
 8002d8c:	490a      	ldr	r1, [pc, #40]	; (8002db8 <vTaskStartScheduler+0x88>)
 8002d8e:	480b      	ldr	r0, [pc, #44]	; (8002dbc <vTaskStartScheduler+0x8c>)
 8002d90:	f000 ff90 	bl	8003cb4 <iprintf>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <vTaskStartScheduler+0x90>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200003bc 	.word	0x200003bc
 8002da4:	08004e4c 	.word	0x08004e4c
 8002da8:	080032b1 	.word	0x080032b1
 8002dac:	200003b8 	.word	0x200003b8
 8002db0:	200003a4 	.word	0x200003a4
 8002db4:	2000039c 	.word	0x2000039c
 8002db8:	08004e28 	.word	0x08004e28
 8002dbc:	08004e3c 	.word	0x08004e3c
 8002dc0:	2000000c 	.word	0x2000000c

08002dc4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <vTaskSuspendAll+0x18>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	4a03      	ldr	r2, [pc, #12]	; (8002ddc <vTaskSuspendAll+0x18>)
 8002dd0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002dd2:	bf00      	nop
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	200003c0 	.word	0x200003c0

08002de0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002dee:	4b6e      	ldr	r3, [pc, #440]	; (8002fa8 <xTaskResumeAll+0x1c8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <xTaskResumeAll+0x22>
 8002df6:	f640 02b3 	movw	r2, #2227	; 0x8b3
 8002dfa:	496c      	ldr	r1, [pc, #432]	; (8002fac <xTaskResumeAll+0x1cc>)
 8002dfc:	486c      	ldr	r0, [pc, #432]	; (8002fb0 <xTaskResumeAll+0x1d0>)
 8002dfe:	f000 ff59 	bl	8003cb4 <iprintf>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e02:	f000 fe67 	bl	8003ad4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e06:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <xTaskResumeAll+0x1c8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	4a66      	ldr	r2, [pc, #408]	; (8002fa8 <xTaskResumeAll+0x1c8>)
 8002e0e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e10:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <xTaskResumeAll+0x1c8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f040 80c0 	bne.w	8002f9a <xTaskResumeAll+0x1ba>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e1a:	4b66      	ldr	r3, [pc, #408]	; (8002fb4 <xTaskResumeAll+0x1d4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80bb 	beq.w	8002f9a <xTaskResumeAll+0x1ba>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e24:	e08a      	b.n	8002f3c <xTaskResumeAll+0x15c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e26:	4b64      	ldr	r3, [pc, #400]	; (8002fb8 <xTaskResumeAll+0x1d8>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	6a12      	ldr	r2, [r2, #32]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	69d2      	ldr	r2, [r2, #28]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3318      	adds	r3, #24
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d103      	bne.n	8002e5c <xTaskResumeAll+0x7c>
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	6a1a      	ldr	r2, [r3, #32]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	629a      	str	r2, [r3, #40]	; 0x28
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	1e5a      	subs	r2, r3, #1
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	68d2      	ldr	r2, [r2, #12]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	6892      	ldr	r2, [r2, #8]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d103      	bne.n	8002e9a <xTaskResumeAll+0xba>
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	615a      	str	r2, [r3, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	1e5a      	subs	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	2201      	movs	r2, #1
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	4b42      	ldr	r3, [pc, #264]	; (8002fbc <xTaskResumeAll+0x1dc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	4a40      	ldr	r2, [pc, #256]	; (8002fbc <xTaskResumeAll+0x1dc>)
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec0:	493f      	ldr	r1, [pc, #252]	; (8002fc0 <xTaskResumeAll+0x1e0>)
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	3304      	adds	r3, #4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	60da      	str	r2, [r3, #12]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	3204      	adds	r2, #4
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	1d1a      	adds	r2, r3, #4
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	609a      	str	r2, [r3, #8]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4a30      	ldr	r2, [pc, #192]	; (8002fc0 <xTaskResumeAll+0x1e0>)
 8002f00:	441a      	add	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	615a      	str	r2, [r3, #20]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0a:	492d      	ldr	r1, [pc, #180]	; (8002fc0 <xTaskResumeAll+0x1e0>)
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	1c59      	adds	r1, r3, #1
 8002f1a:	4829      	ldr	r0, [pc, #164]	; (8002fc0 <xTaskResumeAll+0x1e0>)
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4403      	add	r3, r0
 8002f26:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <xTaskResumeAll+0x1e4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d302      	bcc.n	8002f3c <xTaskResumeAll+0x15c>
                    {
                        xYieldPending = pdTRUE;
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <xTaskResumeAll+0x1e8>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <xTaskResumeAll+0x1d8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f47f af70 	bne.w	8002e26 <xTaskResumeAll+0x46>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <xTaskResumeAll+0x170>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f4c:	f000 fa46 	bl	80033dc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f50:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <xTaskResumeAll+0x1ec>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <xTaskResumeAll+0x19e>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f5c:	f000 f83a 	bl	8002fd4 <xTaskIncrementTick>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <xTaskResumeAll+0x18c>
                            {
                                xYieldPending = pdTRUE;
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <xTaskResumeAll+0x1e8>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f1      	bne.n	8002f5c <xTaskResumeAll+0x17c>

                        xPendedTicks = 0;
 8002f78:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <xTaskResumeAll+0x1ec>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <xTaskResumeAll+0x1e8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <xTaskResumeAll+0x1ba>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002f86:	2301      	movs	r3, #1
 8002f88:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <xTaskResumeAll+0x1f0>)
 8002f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f9a:	f000 fdc9 	bl	8003b30 <vPortExitCritical>

    return xAlreadyYielded;
 8002f9e:	693b      	ldr	r3, [r7, #16]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	200003c0 	.word	0x200003c0
 8002fac:	08004e28 	.word	0x08004e28
 8002fb0:	08004e3c 	.word	0x08004e3c
 8002fb4:	20000398 	.word	0x20000398
 8002fb8:	20000358 	.word	0x20000358
 8002fbc:	200003a0 	.word	0x200003a0
 8002fc0:	200000a8 	.word	0x200000a8
 8002fc4:	200000a4 	.word	0x200000a4
 8002fc8:	200003ac 	.word	0x200003ac
 8002fcc:	200003a8 	.word	0x200003a8
 8002fd0:	e000ed04 	.word	0xe000ed04

08002fd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fde:	4b7b      	ldr	r3, [pc, #492]	; (80031cc <xTaskIncrementTick+0x1f8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 80e7 	bne.w	80031b6 <xTaskIncrementTick+0x1e2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fe8:	4b79      	ldr	r3, [pc, #484]	; (80031d0 <xTaskIncrementTick+0x1fc>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ff0:	4a77      	ldr	r2, [pc, #476]	; (80031d0 <xTaskIncrementTick+0x1fc>)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11b      	bne.n	8003034 <xTaskIncrementTick+0x60>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ffc:	4b75      	ldr	r3, [pc, #468]	; (80031d4 <xTaskIncrementTick+0x200>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <xTaskIncrementTick+0x3e>
 8003006:	f640 22c7 	movw	r2, #2759	; 0xac7
 800300a:	4973      	ldr	r1, [pc, #460]	; (80031d8 <xTaskIncrementTick+0x204>)
 800300c:	4873      	ldr	r0, [pc, #460]	; (80031dc <xTaskIncrementTick+0x208>)
 800300e:	f000 fe51 	bl	8003cb4 <iprintf>
 8003012:	4b70      	ldr	r3, [pc, #448]	; (80031d4 <xTaskIncrementTick+0x200>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	4b71      	ldr	r3, [pc, #452]	; (80031e0 <xTaskIncrementTick+0x20c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a6d      	ldr	r2, [pc, #436]	; (80031d4 <xTaskIncrementTick+0x200>)
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4a6f      	ldr	r2, [pc, #444]	; (80031e0 <xTaskIncrementTick+0x20c>)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b6f      	ldr	r3, [pc, #444]	; (80031e4 <xTaskIncrementTick+0x210>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3301      	adds	r3, #1
 800302c:	4a6d      	ldr	r2, [pc, #436]	; (80031e4 <xTaskIncrementTick+0x210>)
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	f000 f9d4 	bl	80033dc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003034:	4b6c      	ldr	r3, [pc, #432]	; (80031e8 <xTaskIncrementTick+0x214>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	429a      	cmp	r2, r3
 800303c:	f0c0 80a6 	bcc.w	800318c <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003040:	4b64      	ldr	r3, [pc, #400]	; (80031d4 <xTaskIncrementTick+0x200>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <xTaskIncrementTick+0x80>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800304a:	4b67      	ldr	r3, [pc, #412]	; (80031e8 <xTaskIncrementTick+0x214>)
 800304c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003050:	601a      	str	r2, [r3, #0]
                    break;
 8003052:	e09b      	b.n	800318c <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003054:	4b5f      	ldr	r3, [pc, #380]	; (80031d4 <xTaskIncrementTick+0x200>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	429a      	cmp	r2, r3
 800306a:	d203      	bcs.n	8003074 <xTaskIncrementTick+0xa0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800306c:	4a5e      	ldr	r2, [pc, #376]	; (80031e8 <xTaskIncrementTick+0x214>)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003072:	e08b      	b.n	800318c <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	68d2      	ldr	r2, [r2, #12]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	6892      	ldr	r2, [r2, #8]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	3304      	adds	r3, #4
 8003096:	429a      	cmp	r2, r3
 8003098:	d103      	bne.n	80030a2 <xTaskIncrementTick+0xce>
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2200      	movs	r2, #0
 80030a6:	615a      	str	r2, [r3, #20]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	1e5a      	subs	r2, r3, #1
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01e      	beq.n	80030f8 <xTaskIncrementTick+0x124>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	6a12      	ldr	r2, [r2, #32]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	69d2      	ldr	r2, [r2, #28]
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	3318      	adds	r3, #24
 80030dc:	429a      	cmp	r2, r3
 80030de:	d103      	bne.n	80030e8 <xTaskIncrementTick+0x114>
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	6a1a      	ldr	r2, [r3, #32]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2200      	movs	r2, #0
 80030ec:	629a      	str	r2, [r3, #40]	; 0x28
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	1e5a      	subs	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	2201      	movs	r2, #1
 80030fe:	409a      	lsls	r2, r3
 8003100:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <xTaskIncrementTick+0x218>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4313      	orrs	r3, r2
 8003106:	4a39      	ldr	r2, [pc, #228]	; (80031ec <xTaskIncrementTick+0x218>)
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310e:	4938      	ldr	r1, [pc, #224]	; (80031f0 <xTaskIncrementTick+0x21c>)
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3304      	adds	r3, #4
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	3204      	adds	r2, #4
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1d1a      	adds	r2, r3, #4
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4a28      	ldr	r2, [pc, #160]	; (80031f0 <xTaskIncrementTick+0x21c>)
 800314e:	441a      	add	r2, r3
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	615a      	str	r2, [r3, #20]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003158:	4925      	ldr	r1, [pc, #148]	; (80031f0 <xTaskIncrementTick+0x21c>)
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	1c59      	adds	r1, r3, #1
 8003168:	4821      	ldr	r0, [pc, #132]	; (80031f0 <xTaskIncrementTick+0x21c>)
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4403      	add	r3, r0
 8003174:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <xTaskIncrementTick+0x220>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	429a      	cmp	r2, r3
 8003182:	f4ff af5d 	bcc.w	8003040 <xTaskIncrementTick+0x6c>
                            {
                                xSwitchRequired = pdTRUE;
 8003186:	2301      	movs	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800318a:	e759      	b.n	8003040 <xTaskIncrementTick+0x6c>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <xTaskIncrementTick+0x220>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003192:	4917      	ldr	r1, [pc, #92]	; (80031f0 <xTaskIncrementTick+0x21c>)
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d901      	bls.n	80031a8 <xTaskIncrementTick+0x1d4>
                {
                    xSwitchRequired = pdTRUE;
 80031a4:	2301      	movs	r3, #1
 80031a6:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <xTaskIncrementTick+0x224>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 80031b0:	2301      	movs	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	e004      	b.n	80031c0 <xTaskIncrementTick+0x1ec>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <xTaskIncrementTick+0x228>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3301      	adds	r3, #1
 80031bc:	4a0f      	ldr	r2, [pc, #60]	; (80031fc <xTaskIncrementTick+0x228>)
 80031be:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80031c0:	69fb      	ldr	r3, [r7, #28]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200003c0 	.word	0x200003c0
 80031d0:	2000039c 	.word	0x2000039c
 80031d4:	20000350 	.word	0x20000350
 80031d8:	08004e28 	.word	0x08004e28
 80031dc:	08004e3c 	.word	0x08004e3c
 80031e0:	20000354 	.word	0x20000354
 80031e4:	200003b0 	.word	0x200003b0
 80031e8:	200003b8 	.word	0x200003b8
 80031ec:	200003a0 	.word	0x200003a0
 80031f0:	200000a8 	.word	0x200000a8
 80031f4:	200000a4 	.word	0x200000a4
 80031f8:	200003ac 	.word	0x200003ac
 80031fc:	200003a8 	.word	0x200003a8

08003200 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003206:	4b23      	ldr	r3, [pc, #140]	; (8003294 <vTaskSwitchContext+0x94>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <vTaskSwitchContext+0x98>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003214:	e03a      	b.n	800328c <vTaskSwitchContext+0x8c>
        xYieldPending = pdFALSE;
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <vTaskSwitchContext+0x98>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800321c:	4b1f      	ldr	r3, [pc, #124]	; (800329c <vTaskSwitchContext+0x9c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	f1c3 031f 	rsb	r3, r3, #31
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	491b      	ldr	r1, [pc, #108]	; (80032a0 <vTaskSwitchContext+0xa0>)
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d105      	bne.n	8003252 <vTaskSwitchContext+0x52>
 8003246:	f640 4202 	movw	r2, #3074	; 0xc02
 800324a:	4916      	ldr	r1, [pc, #88]	; (80032a4 <vTaskSwitchContext+0xa4>)
 800324c:	4816      	ldr	r0, [pc, #88]	; (80032a8 <vTaskSwitchContext+0xa8>)
 800324e:	f000 fd31 	bl	8003cb4 <iprintf>
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4a10      	ldr	r2, [pc, #64]	; (80032a0 <vTaskSwitchContext+0xa0>)
 800325e:	4413      	add	r3, r2
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	3308      	adds	r3, #8
 8003274:	429a      	cmp	r2, r3
 8003276:	d104      	bne.n	8003282 <vTaskSwitchContext+0x82>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a08      	ldr	r2, [pc, #32]	; (80032ac <vTaskSwitchContext+0xac>)
 800328a:	6013      	str	r3, [r2, #0]
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	200003c0 	.word	0x200003c0
 8003298:	200003ac 	.word	0x200003ac
 800329c:	200003a0 	.word	0x200003a0
 80032a0:	200000a8 	.word	0x200000a8
 80032a4:	08004e28 	.word	0x08004e28
 80032a8:	08004e3c 	.word	0x08004e3c
 80032ac:	200000a4 	.word	0x200000a4

080032b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80032b8:	f000 f852 	bl	8003360 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <prvIdleTask+0x28>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d9f9      	bls.n	80032b8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <prvIdleTask+0x2c>)
 80032c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80032d4:	e7f0      	b.n	80032b8 <prvIdleTask+0x8>
 80032d6:	bf00      	nop
 80032d8:	200000a8 	.word	0x200000a8
 80032dc:	e000ed04 	.word	0xe000ed04

080032e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	e00c      	b.n	8003306 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <prvInitialiseTaskLists+0x60>)
 80032f8:	4413      	add	r3, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fa38 	bl	8002770 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3301      	adds	r3, #1
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b1f      	cmp	r3, #31
 800330a:	d9ef      	bls.n	80032ec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800330c:	480d      	ldr	r0, [pc, #52]	; (8003344 <prvInitialiseTaskLists+0x64>)
 800330e:	f7ff fa2f 	bl	8002770 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003312:	480d      	ldr	r0, [pc, #52]	; (8003348 <prvInitialiseTaskLists+0x68>)
 8003314:	f7ff fa2c 	bl	8002770 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003318:	480c      	ldr	r0, [pc, #48]	; (800334c <prvInitialiseTaskLists+0x6c>)
 800331a:	f7ff fa29 	bl	8002770 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800331e:	480c      	ldr	r0, [pc, #48]	; (8003350 <prvInitialiseTaskLists+0x70>)
 8003320:	f7ff fa26 	bl	8002770 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003324:	480b      	ldr	r0, [pc, #44]	; (8003354 <prvInitialiseTaskLists+0x74>)
 8003326:	f7ff fa23 	bl	8002770 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <prvInitialiseTaskLists+0x78>)
 800332c:	4a05      	ldr	r2, [pc, #20]	; (8003344 <prvInitialiseTaskLists+0x64>)
 800332e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <prvInitialiseTaskLists+0x7c>)
 8003332:	4a05      	ldr	r2, [pc, #20]	; (8003348 <prvInitialiseTaskLists+0x68>)
 8003334:	601a      	str	r2, [r3, #0]
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200000a8 	.word	0x200000a8
 8003344:	20000328 	.word	0x20000328
 8003348:	2000033c 	.word	0x2000033c
 800334c:	20000358 	.word	0x20000358
 8003350:	2000036c 	.word	0x2000036c
 8003354:	20000384 	.word	0x20000384
 8003358:	20000350 	.word	0x20000350
 800335c:	20000354 	.word	0x20000354

08003360 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003366:	e019      	b.n	800339c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003368:	f000 fbb4 	bl	8003ad4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <prvCheckTasksWaitingTermination+0x50>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fa7f 	bl	800287c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <prvCheckTasksWaitingTermination+0x54>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3b01      	subs	r3, #1
 8003384:	4a0b      	ldr	r2, [pc, #44]	; (80033b4 <prvCheckTasksWaitingTermination+0x54>)
 8003386:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <prvCheckTasksWaitingTermination+0x58>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3b01      	subs	r3, #1
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <prvCheckTasksWaitingTermination+0x58>)
 8003390:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003392:	f000 fbcd 	bl	8003b30 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f810 	bl	80033bc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <prvCheckTasksWaitingTermination+0x58>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e1      	bne.n	8003368 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	2000036c 	.word	0x2000036c
 80033b4:	20000398 	.word	0x20000398
 80033b8:	20000380 	.word	0x20000380

080033bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f975 	bl	80036b8 <vPortFree>
                vPortFree( pxTCB );
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f972 	bl	80036b8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <prvResetNextTaskUnblockTime+0x2c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80033ea:	4b08      	ldr	r3, [pc, #32]	; (800340c <prvResetNextTaskUnblockTime+0x30>)
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033f0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80033f2:	e005      	b.n	8003400 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <prvResetNextTaskUnblockTime+0x2c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a03      	ldr	r2, [pc, #12]	; (800340c <prvResetNextTaskUnblockTime+0x30>)
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	20000350 	.word	0x20000350
 800340c:	200003b8 	.word	0x200003b8

08003410 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800341a:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003420:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3304      	adds	r3, #4
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fa28 	bl	800287c <uxListRemove>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10b      	bne.n	800344a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003432:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	2201      	movs	r2, #1
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43da      	mvns	r2, r3
 8003440:	4b2e      	ldr	r3, [pc, #184]	; (80034fc <prvAddCurrentTaskToDelayedList+0xec>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4013      	ands	r3, r2
 8003446:	4a2d      	ldr	r2, [pc, #180]	; (80034fc <prvAddCurrentTaskToDelayedList+0xec>)
 8003448:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003450:	d124      	bne.n	800349c <prvAddCurrentTaskToDelayedList+0x8c>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d021      	beq.n	800349c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003458:	4b29      	ldr	r3, [pc, #164]	; (8003500 <prvAddCurrentTaskToDelayedList+0xf0>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	6892      	ldr	r2, [r2, #8]
 800346e:	60da      	str	r2, [r3, #12]
 8003470:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	3204      	adds	r2, #4
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	1d1a      	adds	r2, r3, #4
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <prvAddCurrentTaskToDelayedList+0xf0>)
 800348c:	615a      	str	r2, [r3, #20]
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	4a1a      	ldr	r2, [pc, #104]	; (8003500 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800349a:	e026      	b.n	80034ea <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d209      	bcs.n	80034c8 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034b4:	4b13      	ldr	r3, [pc, #76]	; (8003504 <prvAddCurrentTaskToDelayedList+0xf4>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3304      	adds	r3, #4
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f7ff f9a3 	bl	800280c <vListInsert>
}
 80034c6:	e010      	b.n	80034ea <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <prvAddCurrentTaskToDelayedList+0xf8>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3304      	adds	r3, #4
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	f7ff f999 	bl	800280c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80034da:	4b0c      	ldr	r3, [pc, #48]	; (800350c <prvAddCurrentTaskToDelayedList+0xfc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d202      	bcs.n	80034ea <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80034e4:	4a09      	ldr	r2, [pc, #36]	; (800350c <prvAddCurrentTaskToDelayedList+0xfc>)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6013      	str	r3, [r2, #0]
}
 80034ea:	bf00      	nop
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	2000039c 	.word	0x2000039c
 80034f8:	200000a4 	.word	0x200000a4
 80034fc:	200003a0 	.word	0x200003a0
 8003500:	20000384 	.word	0x20000384
 8003504:	20000354 	.word	0x20000354
 8003508:	20000350 	.word	0x20000350
 800350c:	200003b8 	.word	0x200003b8

08003510 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 800351c:	f7ff fc52 	bl	8002dc4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003520:	4b5d      	ldr	r3, [pc, #372]	; (8003698 <pvPortMalloc+0x188>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003528:	f000 f922 	bl	8003770 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800352c:	4b5b      	ldr	r3, [pc, #364]	; (800369c <pvPortMalloc+0x18c>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	f040 809c 	bne.w	8003672 <pvPortMalloc+0x162>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d028      	beq.n	8003592 <pvPortMalloc+0x82>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003540:	2208      	movs	r2, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	429a      	cmp	r2, r3
 800354a:	d222      	bcs.n	8003592 <pvPortMalloc+0x82>
            {
                xWantedSize += xHeapStructSize;
 800354c:	2208      	movs	r2, #8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01c      	beq.n	8003598 <pvPortMalloc+0x88>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f023 0307 	bic.w	r3, r3, #7
 8003564:	3308      	adds	r3, #8
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	d20f      	bcs.n	800358c <pvPortMalloc+0x7c>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f023 0307 	bic.w	r3, r3, #7
 8003572:	3308      	adds	r3, #8
 8003574:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <pvPortMalloc+0x88>
 8003580:	229c      	movs	r2, #156	; 0x9c
 8003582:	4947      	ldr	r1, [pc, #284]	; (80036a0 <pvPortMalloc+0x190>)
 8003584:	4847      	ldr	r0, [pc, #284]	; (80036a4 <pvPortMalloc+0x194>)
 8003586:	f000 fb95 	bl	8003cb4 <iprintf>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800358a:	e005      	b.n	8003598 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003590:	e002      	b.n	8003598 <pvPortMalloc+0x88>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	e000      	b.n	800359a <pvPortMalloc+0x8a>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003598:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d068      	beq.n	8003672 <pvPortMalloc+0x162>
 80035a0:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <pvPortMalloc+0x198>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d863      	bhi.n	8003672 <pvPortMalloc+0x162>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80035aa:	4b40      	ldr	r3, [pc, #256]	; (80036ac <pvPortMalloc+0x19c>)
 80035ac:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 80035ae:	4b3f      	ldr	r3, [pc, #252]	; (80036ac <pvPortMalloc+0x19c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035b4:	e004      	b.n	80035c0 <pvPortMalloc+0xb0>
                {
                    pxPreviousBlock = pxBlock;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d903      	bls.n	80035d2 <pvPortMalloc+0xc2>
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f1      	bne.n	80035b6 <pvPortMalloc+0xa6>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80035d2:	4b31      	ldr	r3, [pc, #196]	; (8003698 <pvPortMalloc+0x188>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d04a      	beq.n	8003672 <pvPortMalloc+0x162>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2208      	movs	r2, #8
 80035e2:	4413      	add	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	1ad2      	subs	r2, r2, r3
 80035f6:	2308      	movs	r3, #8
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d919      	bls.n	8003632 <pvPortMalloc+0x122>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4413      	add	r3, r2
 8003604:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <pvPortMalloc+0x10a>
 8003610:	22cf      	movs	r2, #207	; 0xcf
 8003612:	4923      	ldr	r1, [pc, #140]	; (80036a0 <pvPortMalloc+0x190>)
 8003614:	4823      	ldr	r0, [pc, #140]	; (80036a4 <pvPortMalloc+0x194>)
 8003616:	f000 fb4d 	bl	8003cb4 <iprintf>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	1ad2      	subs	r2, r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800362c:	68b8      	ldr	r0, [r7, #8]
 800362e:	f000 f901 	bl	8003834 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <pvPortMalloc+0x198>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <pvPortMalloc+0x198>)
 800363e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <pvPortMalloc+0x198>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <pvPortMalloc+0x1a0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d203      	bcs.n	8003654 <pvPortMalloc+0x144>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800364c:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <pvPortMalloc+0x198>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a17      	ldr	r2, [pc, #92]	; (80036b0 <pvPortMalloc+0x1a0>)
 8003652:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	4b10      	ldr	r3, [pc, #64]	; (800369c <pvPortMalloc+0x18c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	431a      	orrs	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <pvPortMalloc+0x1a4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	4a11      	ldr	r2, [pc, #68]	; (80036b4 <pvPortMalloc+0x1a4>)
 8003670:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003672:	f7ff fbb5 	bl	8002de0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <pvPortMalloc+0x17c>
 8003680:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003684:	4906      	ldr	r1, [pc, #24]	; (80036a0 <pvPortMalloc+0x190>)
 8003686:	4807      	ldr	r0, [pc, #28]	; (80036a4 <pvPortMalloc+0x194>)
 8003688:	f000 fb14 	bl	8003cb4 <iprintf>
    return pvReturn;
 800368c:	68fb      	ldr	r3, [r7, #12]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	200093cc 	.word	0x200093cc
 800369c:	200093e0 	.word	0x200093e0
 80036a0:	08004e54 	.word	0x08004e54
 80036a4:	08004e74 	.word	0x08004e74
 80036a8:	200093d0 	.word	0x200093d0
 80036ac:	200093c4 	.word	0x200093c4
 80036b0:	200093d4 	.word	0x200093d4
 80036b4:	200093d8 	.word	0x200093d8

080036b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d043      	beq.n	8003752 <vPortFree+0x9a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80036ca:	2308      	movs	r3, #8
 80036cc:	425b      	negs	r3, r3
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4413      	add	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	4b1f      	ldr	r3, [pc, #124]	; (800375c <vPortFree+0xa4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d105      	bne.n	80036f2 <vPortFree+0x3a>
 80036e6:	f44f 7292 	mov.w	r2, #292	; 0x124
 80036ea:	491d      	ldr	r1, [pc, #116]	; (8003760 <vPortFree+0xa8>)
 80036ec:	481d      	ldr	r0, [pc, #116]	; (8003764 <vPortFree+0xac>)
 80036ee:	f000 fae1 	bl	8003cb4 <iprintf>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <vPortFree+0x4e>
 80036fa:	f240 1225 	movw	r2, #293	; 0x125
 80036fe:	4918      	ldr	r1, [pc, #96]	; (8003760 <vPortFree+0xa8>)
 8003700:	4818      	ldr	r0, [pc, #96]	; (8003764 <vPortFree+0xac>)
 8003702:	f000 fad7 	bl	8003cb4 <iprintf>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <vPortFree+0xa4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01e      	beq.n	8003752 <vPortFree+0x9a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d11a      	bne.n	8003752 <vPortFree+0x9a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <vPortFree+0xa4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	43db      	mvns	r3, r3
 8003726:	401a      	ands	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800372c:	f7ff fb4a 	bl	8002dc4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <vPortFree+0xb0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4413      	add	r3, r2
 800373a:	4a0b      	ldr	r2, [pc, #44]	; (8003768 <vPortFree+0xb0>)
 800373c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800373e:	68b8      	ldr	r0, [r7, #8]
 8003740:	f000 f878 	bl	8003834 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <vPortFree+0xb4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3301      	adds	r3, #1
 800374a:	4a08      	ldr	r2, [pc, #32]	; (800376c <vPortFree+0xb4>)
 800374c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800374e:	f7ff fb47 	bl	8002de0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200093e0 	.word	0x200093e0
 8003760:	08004e54 	.word	0x08004e54
 8003764:	08004e74 	.word	0x08004e74
 8003768:	200093d0 	.word	0x200093d0
 800376c:	200093dc 	.word	0x200093dc

08003770 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003776:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800377a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800377c:	4b27      	ldr	r3, [pc, #156]	; (800381c <prvHeapInit+0xac>)
 800377e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00c      	beq.n	80037a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3307      	adds	r3, #7
 800378e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0307 	bic.w	r3, r3, #7
 8003796:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	4a1f      	ldr	r2, [pc, #124]	; (800381c <prvHeapInit+0xac>)
 80037a0:	4413      	add	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80037a8:	4a1d      	ldr	r2, [pc, #116]	; (8003820 <prvHeapInit+0xb0>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80037ae:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <prvHeapInit+0xb0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	4413      	add	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80037bc:	2208      	movs	r2, #8
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0307 	bic.w	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <prvHeapInit+0xb4>)
 80037d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80037d2:	4b14      	ldr	r3, [pc, #80]	; (8003824 <prvHeapInit+0xb4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <prvHeapInit+0xb4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <prvHeapInit+0xb4>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <prvHeapInit+0xb8>)
 80037fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a09      	ldr	r2, [pc, #36]	; (800382c <prvHeapInit+0xbc>)
 8003806:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003808:	4b09      	ldr	r3, [pc, #36]	; (8003830 <prvHeapInit+0xc0>)
 800380a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800380e:	601a      	str	r2, [r3, #0]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	200003c4 	.word	0x200003c4
 8003820:	200093c4 	.word	0x200093c4
 8003824:	200093cc 	.word	0x200093cc
 8003828:	200093d4 	.word	0x200093d4
 800382c:	200093d0 	.word	0x200093d0
 8003830:	200093e0 	.word	0x200093e0

08003834 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800383c:	4b27      	ldr	r3, [pc, #156]	; (80038dc <prvInsertBlockIntoFreeList+0xa8>)
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e002      	b.n	8003848 <prvInsertBlockIntoFreeList+0x14>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	429a      	cmp	r2, r3
 8003850:	d8f7      	bhi.n	8003842 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	4413      	add	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	429a      	cmp	r2, r3
 8003862:	d108      	bne.n	8003876 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	441a      	add	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	441a      	add	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d118      	bne.n	80038bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <prvInsertBlockIntoFreeList+0xac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d00d      	beq.n	80038b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	441a      	add	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e008      	b.n	80038c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80038b2:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <prvInsertBlockIntoFreeList+0xac>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e003      	b.n	80038c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d002      	beq.n	80038d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	200093c4 	.word	0x200093c4
 80038e0:	200093cc 	.word	0x200093cc

080038e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3b04      	subs	r3, #4
 80038f4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3b04      	subs	r3, #4
 8003902:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f023 0201 	bic.w	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3b04      	subs	r3, #4
 8003912:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003914:	4a08      	ldr	r2, [pc, #32]	; (8003938 <pxPortInitialiseStack+0x54>)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3b14      	subs	r3, #20
 800391e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3b20      	subs	r3, #32
 800392a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800392c:	68fb      	ldr	r3, [r7, #12]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	0800393d 	.word	0x0800393d

0800393c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003942:	2300      	movs	r3, #0
 8003944:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003946:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <prvTaskExitError+0x44>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800394e:	d004      	beq.n	800395a <prvTaskExitError+0x1e>
 8003950:	22ce      	movs	r2, #206	; 0xce
 8003952:	490c      	ldr	r1, [pc, #48]	; (8003984 <prvTaskExitError+0x48>)
 8003954:	480c      	ldr	r0, [pc, #48]	; (8003988 <prvTaskExitError+0x4c>)
 8003956:	f000 f9ad 	bl	8003cb4 <iprintf>
        __asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	607b      	str	r3, [r7, #4]
    }
 800396c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800396e:	bf00      	nop
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0fc      	beq.n	8003970 <prvTaskExitError+0x34>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000010 	.word	0x20000010
 8003984:	08004e84 	.word	0x08004e84
 8003988:	08004ea0 	.word	0x08004ea0
 800398c:	00000000 	.word	0x00000000

08003990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003990:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <pxCurrentTCBConst2>)
 8003992:	6819      	ldr	r1, [r3, #0]
 8003994:	6808      	ldr	r0, [r1, #0]
 8003996:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800399a:	f380 8809 	msr	PSP, r0
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f04f 0000 	mov.w	r0, #0
 80039a6:	f380 8811 	msr	BASEPRI, r0
 80039aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80039ae:	4770      	bx	lr

080039b0 <pxCurrentTCBConst2>:
 80039b0:	200000a4 	.word	0x200000a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop

080039b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80039b8:	4806      	ldr	r0, [pc, #24]	; (80039d4 <prvPortStartFirstTask+0x1c>)
 80039ba:	6800      	ldr	r0, [r0, #0]
 80039bc:	6800      	ldr	r0, [r0, #0]
 80039be:	f380 8808 	msr	MSP, r0
 80039c2:	b662      	cpsie	i
 80039c4:	b661      	cpsie	f
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	df00      	svc	0
 80039d0:	bf00      	nop
 80039d2:	0000      	.short	0x0000
 80039d4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop

080039dc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039e2:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <xPortStartScheduler+0xdc>)
 80039e4:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	22ff      	movs	r2, #255	; 0xff
 80039f2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4b2d      	ldr	r3, [pc, #180]	; (8003abc <xPortStartScheduler+0xe0>)
 8003a08:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a0a:	4b2d      	ldr	r3, [pc, #180]	; (8003ac0 <xPortStartScheduler+0xe4>)
 8003a0c:	2207      	movs	r2, #7
 8003a0e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a10:	e009      	b.n	8003a26 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8003a12:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <xPortStartScheduler+0xe4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	4a29      	ldr	r2, [pc, #164]	; (8003ac0 <xPortStartScheduler+0xe4>)
 8003a1a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	2b80      	cmp	r3, #128	; 0x80
 8003a30:	d0ef      	beq.n	8003a12 <xPortStartScheduler+0x36>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8003a32:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <xPortStartScheduler+0xe4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1c3 0307 	rsb	r3, r3, #7
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d005      	beq.n	8003a4a <xPortStartScheduler+0x6e>
 8003a3e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8003a42:	4920      	ldr	r1, [pc, #128]	; (8003ac4 <xPortStartScheduler+0xe8>)
 8003a44:	4820      	ldr	r0, [pc, #128]	; (8003ac8 <xPortStartScheduler+0xec>)
 8003a46:	f000 f935 	bl	8003cb4 <iprintf>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <xPortStartScheduler+0xe4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f1c3 0307 	rsb	r3, r3, #7
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d005      	beq.n	8003a62 <xPortStartScheduler+0x86>
 8003a56:	f240 123d 	movw	r2, #317	; 0x13d
 8003a5a:	491a      	ldr	r1, [pc, #104]	; (8003ac4 <xPortStartScheduler+0xe8>)
 8003a5c:	481a      	ldr	r0, [pc, #104]	; (8003ac8 <xPortStartScheduler+0xec>)
 8003a5e:	f000 f929 	bl	8003cb4 <iprintf>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a62:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <xPortStartScheduler+0xe4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <xPortStartScheduler+0xe4>)
 8003a6a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a6c:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <xPortStartScheduler+0xe4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a74:	4a12      	ldr	r2, [pc, #72]	; (8003ac0 <xPortStartScheduler+0xe4>)
 8003a76:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003a80:	4b12      	ldr	r3, [pc, #72]	; (8003acc <xPortStartScheduler+0xf0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a11      	ldr	r2, [pc, #68]	; (8003acc <xPortStartScheduler+0xf0>)
 8003a86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a8a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <xPortStartScheduler+0xf0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <xPortStartScheduler+0xf0>)
 8003a92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a96:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003a98:	f000 f8b8 	bl	8003c0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <xPortStartScheduler+0xf4>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003aa2:	f7ff ff89 	bl	80039b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003aa6:	f7ff fbab 	bl	8003200 <vTaskSwitchContext>
    prvTaskExitError();
 8003aaa:	f7ff ff47 	bl	800393c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	e000e400 	.word	0xe000e400
 8003abc:	200093e4 	.word	0x200093e4
 8003ac0:	200093e8 	.word	0x200093e8
 8003ac4:	08004e84 	.word	0x08004e84
 8003ac8:	08004ea0 	.word	0x08004ea0
 8003acc:	e000ed20 	.word	0xe000ed20
 8003ad0:	20000010 	.word	0x20000010

08003ad4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
        __asm volatile
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	607b      	str	r3, [r7, #4]
    }
 8003aec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <vPortEnterCritical+0x4c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3301      	adds	r3, #1
 8003af4:	4a0a      	ldr	r2, [pc, #40]	; (8003b20 <vPortEnterCritical+0x4c>)
 8003af6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <vPortEnterCritical+0x4c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10a      	bne.n	8003b16 <vPortEnterCritical+0x42>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <vPortEnterCritical+0x50>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <vPortEnterCritical+0x42>
 8003b0a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8003b0e:	4906      	ldr	r1, [pc, #24]	; (8003b28 <vPortEnterCritical+0x54>)
 8003b10:	4806      	ldr	r0, [pc, #24]	; (8003b2c <vPortEnterCritical+0x58>)
 8003b12:	f000 f8cf 	bl	8003cb4 <iprintf>
    }
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000010 	.word	0x20000010
 8003b24:	e000ed04 	.word	0xe000ed04
 8003b28:	08004e84 	.word	0x08004e84
 8003b2c:	08004ea0 	.word	0x08004ea0

08003b30 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <vPortExitCritical+0x40>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d105      	bne.n	8003b4a <vPortExitCritical+0x1a>
 8003b3e:	f240 1283 	movw	r2, #387	; 0x183
 8003b42:	490c      	ldr	r1, [pc, #48]	; (8003b74 <vPortExitCritical+0x44>)
 8003b44:	480c      	ldr	r0, [pc, #48]	; (8003b78 <vPortExitCritical+0x48>)
 8003b46:	f000 f8b5 	bl	8003cb4 <iprintf>
    uxCriticalNesting--;
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <vPortExitCritical+0x40>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <vPortExitCritical+0x40>)
 8003b52:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <vPortExitCritical+0x40>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <vPortExitCritical+0x38>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003b66:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000010 	.word	0x20000010
 8003b74:	08004e84 	.word	0x08004e84
 8003b78:	08004ea0 	.word	0x08004ea0
 8003b7c:	00000000 	.word	0x00000000

08003b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003b80:	f3ef 8009 	mrs	r0, PSP
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <pxCurrentTCBConst>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b90:	6010      	str	r0, [r2, #0]
 8003b92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003b96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b9a:	f380 8811 	msr	BASEPRI, r0
 8003b9e:	f7ff fb2f 	bl	8003200 <vTaskSwitchContext>
 8003ba2:	f04f 0000 	mov.w	r0, #0
 8003ba6:	f380 8811 	msr	BASEPRI, r0
 8003baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	6808      	ldr	r0, [r1, #0]
 8003bb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bb6:	f380 8809 	msr	PSP, r0
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	4770      	bx	lr

08003bc0 <pxCurrentTCBConst>:
 8003bc0:	200000a4 	.word	0x200000a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop

08003bc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
        __asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	607b      	str	r3, [r7, #4]
    }
 8003be0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003be2:	f7ff f9f7 	bl	8002fd4 <xTaskIncrementTick>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <xPortSysTickHandler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <xPortSysTickHandler+0x40>)
 8003bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f383 8811 	msr	BASEPRI, r3
    }
 8003bfe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	e000ed04 	.word	0xe000ed04

08003c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <vPortSetupTimerInterrupt+0x30>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <vPortSetupTimerInterrupt+0x34>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <vPortSetupTimerInterrupt+0x38>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <vPortSetupTimerInterrupt+0x3c>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	099b      	lsrs	r3, r3, #6
 8003c28:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <vPortSetupTimerInterrupt+0x40>)
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c2e:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <vPortSetupTimerInterrupt+0x30>)
 8003c30:	2207      	movs	r2, #7
 8003c32:	601a      	str	r2, [r3, #0]
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr
 8003c3c:	e000e010 	.word	0xe000e010
 8003c40:	e000e018 	.word	0xe000e018
 8003c44:	20000000 	.word	0x20000000
 8003c48:	10624dd3 	.word	0x10624dd3
 8003c4c:	e000e014 	.word	0xe000e014

08003c50 <__errno>:
 8003c50:	4b01      	ldr	r3, [pc, #4]	; (8003c58 <__errno+0x8>)
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000014 	.word	0x20000014

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	2600      	movs	r6, #0
 8003c60:	4d0c      	ldr	r5, [pc, #48]	; (8003c94 <__libc_init_array+0x38>)
 8003c62:	4c0d      	ldr	r4, [pc, #52]	; (8003c98 <__libc_init_array+0x3c>)
 8003c64:	1b64      	subs	r4, r4, r5
 8003c66:	10a4      	asrs	r4, r4, #2
 8003c68:	42a6      	cmp	r6, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	f000 fff8 	bl	8004c60 <_init>
 8003c70:	2600      	movs	r6, #0
 8003c72:	4d0a      	ldr	r5, [pc, #40]	; (8003c9c <__libc_init_array+0x40>)
 8003c74:	4c0a      	ldr	r4, [pc, #40]	; (8003ca0 <__libc_init_array+0x44>)
 8003c76:	1b64      	subs	r4, r4, r5
 8003c78:	10a4      	asrs	r4, r4, #2
 8003c7a:	42a6      	cmp	r6, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c84:	4798      	blx	r3
 8003c86:	3601      	adds	r6, #1
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8e:	4798      	blx	r3
 8003c90:	3601      	adds	r6, #1
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	08004f60 	.word	0x08004f60
 8003c98:	08004f60 	.word	0x08004f60
 8003c9c:	08004f60 	.word	0x08004f60
 8003ca0:	08004f64 	.word	0x08004f64

08003ca4 <memset>:
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4402      	add	r2, r0
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d100      	bne.n	8003cae <memset+0xa>
 8003cac:	4770      	bx	lr
 8003cae:	f803 1b01 	strb.w	r1, [r3], #1
 8003cb2:	e7f9      	b.n	8003ca8 <memset+0x4>

08003cb4 <iprintf>:
 8003cb4:	b40f      	push	{r0, r1, r2, r3}
 8003cb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <iprintf+0x2c>)
 8003cb8:	b513      	push	{r0, r1, r4, lr}
 8003cba:	681c      	ldr	r4, [r3, #0]
 8003cbc:	b124      	cbz	r4, 8003cc8 <iprintf+0x14>
 8003cbe:	69a3      	ldr	r3, [r4, #24]
 8003cc0:	b913      	cbnz	r3, 8003cc8 <iprintf+0x14>
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f000 fa5e 	bl	8004184 <__sinit>
 8003cc8:	ab05      	add	r3, sp, #20
 8003cca:	4620      	mov	r0, r4
 8003ccc:	9a04      	ldr	r2, [sp, #16]
 8003cce:	68a1      	ldr	r1, [r4, #8]
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	f000 fc29 	bl	8004528 <_vfiprintf_r>
 8003cd6:	b002      	add	sp, #8
 8003cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cdc:	b004      	add	sp, #16
 8003cde:	4770      	bx	lr
 8003ce0:	20000014 	.word	0x20000014

08003ce4 <_puts_r>:
 8003ce4:	b570      	push	{r4, r5, r6, lr}
 8003ce6:	460e      	mov	r6, r1
 8003ce8:	4605      	mov	r5, r0
 8003cea:	b118      	cbz	r0, 8003cf4 <_puts_r+0x10>
 8003cec:	6983      	ldr	r3, [r0, #24]
 8003cee:	b90b      	cbnz	r3, 8003cf4 <_puts_r+0x10>
 8003cf0:	f000 fa48 	bl	8004184 <__sinit>
 8003cf4:	69ab      	ldr	r3, [r5, #24]
 8003cf6:	68ac      	ldr	r4, [r5, #8]
 8003cf8:	b913      	cbnz	r3, 8003d00 <_puts_r+0x1c>
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f000 fa42 	bl	8004184 <__sinit>
 8003d00:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <_puts_r+0xd0>)
 8003d02:	429c      	cmp	r4, r3
 8003d04:	d120      	bne.n	8003d48 <_puts_r+0x64>
 8003d06:	686c      	ldr	r4, [r5, #4]
 8003d08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d0a:	07db      	lsls	r3, r3, #31
 8003d0c:	d405      	bmi.n	8003d1a <_puts_r+0x36>
 8003d0e:	89a3      	ldrh	r3, [r4, #12]
 8003d10:	0598      	lsls	r0, r3, #22
 8003d12:	d402      	bmi.n	8003d1a <_puts_r+0x36>
 8003d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d16:	f000 fad3 	bl	80042c0 <__retarget_lock_acquire_recursive>
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	0719      	lsls	r1, r3, #28
 8003d1e:	d51d      	bpl.n	8003d5c <_puts_r+0x78>
 8003d20:	6923      	ldr	r3, [r4, #16]
 8003d22:	b1db      	cbz	r3, 8003d5c <_puts_r+0x78>
 8003d24:	3e01      	subs	r6, #1
 8003d26:	68a3      	ldr	r3, [r4, #8]
 8003d28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	60a3      	str	r3, [r4, #8]
 8003d30:	bb39      	cbnz	r1, 8003d82 <_puts_r+0x9e>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	da38      	bge.n	8003da8 <_puts_r+0xc4>
 8003d36:	4622      	mov	r2, r4
 8003d38:	210a      	movs	r1, #10
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f000 f848 	bl	8003dd0 <__swbuf_r>
 8003d40:	3001      	adds	r0, #1
 8003d42:	d011      	beq.n	8003d68 <_puts_r+0x84>
 8003d44:	250a      	movs	r5, #10
 8003d46:	e011      	b.n	8003d6c <_puts_r+0x88>
 8003d48:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <_puts_r+0xd4>)
 8003d4a:	429c      	cmp	r4, r3
 8003d4c:	d101      	bne.n	8003d52 <_puts_r+0x6e>
 8003d4e:	68ac      	ldr	r4, [r5, #8]
 8003d50:	e7da      	b.n	8003d08 <_puts_r+0x24>
 8003d52:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <_puts_r+0xd8>)
 8003d54:	429c      	cmp	r4, r3
 8003d56:	bf08      	it	eq
 8003d58:	68ec      	ldreq	r4, [r5, #12]
 8003d5a:	e7d5      	b.n	8003d08 <_puts_r+0x24>
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f000 f888 	bl	8003e74 <__swsetup_r>
 8003d64:	2800      	cmp	r0, #0
 8003d66:	d0dd      	beq.n	8003d24 <_puts_r+0x40>
 8003d68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003d6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d6e:	07da      	lsls	r2, r3, #31
 8003d70:	d405      	bmi.n	8003d7e <_puts_r+0x9a>
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	059b      	lsls	r3, r3, #22
 8003d76:	d402      	bmi.n	8003d7e <_puts_r+0x9a>
 8003d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d7a:	f000 faa2 	bl	80042c2 <__retarget_lock_release_recursive>
 8003d7e:	4628      	mov	r0, r5
 8003d80:	bd70      	pop	{r4, r5, r6, pc}
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	da04      	bge.n	8003d90 <_puts_r+0xac>
 8003d86:	69a2      	ldr	r2, [r4, #24]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	dc06      	bgt.n	8003d9a <_puts_r+0xb6>
 8003d8c:	290a      	cmp	r1, #10
 8003d8e:	d004      	beq.n	8003d9a <_puts_r+0xb6>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	6022      	str	r2, [r4, #0]
 8003d96:	7019      	strb	r1, [r3, #0]
 8003d98:	e7c5      	b.n	8003d26 <_puts_r+0x42>
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f000 f817 	bl	8003dd0 <__swbuf_r>
 8003da2:	3001      	adds	r0, #1
 8003da4:	d1bf      	bne.n	8003d26 <_puts_r+0x42>
 8003da6:	e7df      	b.n	8003d68 <_puts_r+0x84>
 8003da8:	250a      	movs	r5, #10
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	6022      	str	r2, [r4, #0]
 8003db0:	701d      	strb	r5, [r3, #0]
 8003db2:	e7db      	b.n	8003d6c <_puts_r+0x88>
 8003db4:	08004eec 	.word	0x08004eec
 8003db8:	08004f0c 	.word	0x08004f0c
 8003dbc:	08004ecc 	.word	0x08004ecc

08003dc0 <puts>:
 8003dc0:	4b02      	ldr	r3, [pc, #8]	; (8003dcc <puts+0xc>)
 8003dc2:	4601      	mov	r1, r0
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	f7ff bf8d 	b.w	8003ce4 <_puts_r>
 8003dca:	bf00      	nop
 8003dcc:	20000014 	.word	0x20000014

08003dd0 <__swbuf_r>:
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd2:	460e      	mov	r6, r1
 8003dd4:	4614      	mov	r4, r2
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	b118      	cbz	r0, 8003de2 <__swbuf_r+0x12>
 8003dda:	6983      	ldr	r3, [r0, #24]
 8003ddc:	b90b      	cbnz	r3, 8003de2 <__swbuf_r+0x12>
 8003dde:	f000 f9d1 	bl	8004184 <__sinit>
 8003de2:	4b21      	ldr	r3, [pc, #132]	; (8003e68 <__swbuf_r+0x98>)
 8003de4:	429c      	cmp	r4, r3
 8003de6:	d12b      	bne.n	8003e40 <__swbuf_r+0x70>
 8003de8:	686c      	ldr	r4, [r5, #4]
 8003dea:	69a3      	ldr	r3, [r4, #24]
 8003dec:	60a3      	str	r3, [r4, #8]
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	071a      	lsls	r2, r3, #28
 8003df2:	d52f      	bpl.n	8003e54 <__swbuf_r+0x84>
 8003df4:	6923      	ldr	r3, [r4, #16]
 8003df6:	b36b      	cbz	r3, 8003e54 <__swbuf_r+0x84>
 8003df8:	6923      	ldr	r3, [r4, #16]
 8003dfa:	6820      	ldr	r0, [r4, #0]
 8003dfc:	b2f6      	uxtb	r6, r6
 8003dfe:	1ac0      	subs	r0, r0, r3
 8003e00:	6963      	ldr	r3, [r4, #20]
 8003e02:	4637      	mov	r7, r6
 8003e04:	4283      	cmp	r3, r0
 8003e06:	dc04      	bgt.n	8003e12 <__swbuf_r+0x42>
 8003e08:	4621      	mov	r1, r4
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	f000 f926 	bl	800405c <_fflush_r>
 8003e10:	bb30      	cbnz	r0, 8003e60 <__swbuf_r+0x90>
 8003e12:	68a3      	ldr	r3, [r4, #8]
 8003e14:	3001      	adds	r0, #1
 8003e16:	3b01      	subs	r3, #1
 8003e18:	60a3      	str	r3, [r4, #8]
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	6022      	str	r2, [r4, #0]
 8003e20:	701e      	strb	r6, [r3, #0]
 8003e22:	6963      	ldr	r3, [r4, #20]
 8003e24:	4283      	cmp	r3, r0
 8003e26:	d004      	beq.n	8003e32 <__swbuf_r+0x62>
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	07db      	lsls	r3, r3, #31
 8003e2c:	d506      	bpl.n	8003e3c <__swbuf_r+0x6c>
 8003e2e:	2e0a      	cmp	r6, #10
 8003e30:	d104      	bne.n	8003e3c <__swbuf_r+0x6c>
 8003e32:	4621      	mov	r1, r4
 8003e34:	4628      	mov	r0, r5
 8003e36:	f000 f911 	bl	800405c <_fflush_r>
 8003e3a:	b988      	cbnz	r0, 8003e60 <__swbuf_r+0x90>
 8003e3c:	4638      	mov	r0, r7
 8003e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <__swbuf_r+0x9c>)
 8003e42:	429c      	cmp	r4, r3
 8003e44:	d101      	bne.n	8003e4a <__swbuf_r+0x7a>
 8003e46:	68ac      	ldr	r4, [r5, #8]
 8003e48:	e7cf      	b.n	8003dea <__swbuf_r+0x1a>
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <__swbuf_r+0xa0>)
 8003e4c:	429c      	cmp	r4, r3
 8003e4e:	bf08      	it	eq
 8003e50:	68ec      	ldreq	r4, [r5, #12]
 8003e52:	e7ca      	b.n	8003dea <__swbuf_r+0x1a>
 8003e54:	4621      	mov	r1, r4
 8003e56:	4628      	mov	r0, r5
 8003e58:	f000 f80c 	bl	8003e74 <__swsetup_r>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d0cb      	beq.n	8003df8 <__swbuf_r+0x28>
 8003e60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003e64:	e7ea      	b.n	8003e3c <__swbuf_r+0x6c>
 8003e66:	bf00      	nop
 8003e68:	08004eec 	.word	0x08004eec
 8003e6c:	08004f0c 	.word	0x08004f0c
 8003e70:	08004ecc 	.word	0x08004ecc

08003e74 <__swsetup_r>:
 8003e74:	4b32      	ldr	r3, [pc, #200]	; (8003f40 <__swsetup_r+0xcc>)
 8003e76:	b570      	push	{r4, r5, r6, lr}
 8003e78:	681d      	ldr	r5, [r3, #0]
 8003e7a:	4606      	mov	r6, r0
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	b125      	cbz	r5, 8003e8a <__swsetup_r+0x16>
 8003e80:	69ab      	ldr	r3, [r5, #24]
 8003e82:	b913      	cbnz	r3, 8003e8a <__swsetup_r+0x16>
 8003e84:	4628      	mov	r0, r5
 8003e86:	f000 f97d 	bl	8004184 <__sinit>
 8003e8a:	4b2e      	ldr	r3, [pc, #184]	; (8003f44 <__swsetup_r+0xd0>)
 8003e8c:	429c      	cmp	r4, r3
 8003e8e:	d10f      	bne.n	8003eb0 <__swsetup_r+0x3c>
 8003e90:	686c      	ldr	r4, [r5, #4]
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e98:	0719      	lsls	r1, r3, #28
 8003e9a:	d42c      	bmi.n	8003ef6 <__swsetup_r+0x82>
 8003e9c:	06dd      	lsls	r5, r3, #27
 8003e9e:	d411      	bmi.n	8003ec4 <__swsetup_r+0x50>
 8003ea0:	2309      	movs	r3, #9
 8003ea2:	6033      	str	r3, [r6, #0]
 8003ea4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eac:	81a3      	strh	r3, [r4, #12]
 8003eae:	e03e      	b.n	8003f2e <__swsetup_r+0xba>
 8003eb0:	4b25      	ldr	r3, [pc, #148]	; (8003f48 <__swsetup_r+0xd4>)
 8003eb2:	429c      	cmp	r4, r3
 8003eb4:	d101      	bne.n	8003eba <__swsetup_r+0x46>
 8003eb6:	68ac      	ldr	r4, [r5, #8]
 8003eb8:	e7eb      	b.n	8003e92 <__swsetup_r+0x1e>
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <__swsetup_r+0xd8>)
 8003ebc:	429c      	cmp	r4, r3
 8003ebe:	bf08      	it	eq
 8003ec0:	68ec      	ldreq	r4, [r5, #12]
 8003ec2:	e7e6      	b.n	8003e92 <__swsetup_r+0x1e>
 8003ec4:	0758      	lsls	r0, r3, #29
 8003ec6:	d512      	bpl.n	8003eee <__swsetup_r+0x7a>
 8003ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eca:	b141      	cbz	r1, 8003ede <__swsetup_r+0x6a>
 8003ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ed0:	4299      	cmp	r1, r3
 8003ed2:	d002      	beq.n	8003eda <__swsetup_r+0x66>
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f000 fa59 	bl	800438c <_free_r>
 8003eda:	2300      	movs	r3, #0
 8003edc:	6363      	str	r3, [r4, #52]	; 0x34
 8003ede:	89a3      	ldrh	r3, [r4, #12]
 8003ee0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ee4:	81a3      	strh	r3, [r4, #12]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	6063      	str	r3, [r4, #4]
 8003eea:	6923      	ldr	r3, [r4, #16]
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	f043 0308 	orr.w	r3, r3, #8
 8003ef4:	81a3      	strh	r3, [r4, #12]
 8003ef6:	6923      	ldr	r3, [r4, #16]
 8003ef8:	b94b      	cbnz	r3, 8003f0e <__swsetup_r+0x9a>
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f04:	d003      	beq.n	8003f0e <__swsetup_r+0x9a>
 8003f06:	4621      	mov	r1, r4
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f000 f9ff 	bl	800430c <__smakebuf_r>
 8003f0e:	89a0      	ldrh	r0, [r4, #12]
 8003f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f14:	f010 0301 	ands.w	r3, r0, #1
 8003f18:	d00a      	beq.n	8003f30 <__swsetup_r+0xbc>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60a3      	str	r3, [r4, #8]
 8003f1e:	6963      	ldr	r3, [r4, #20]
 8003f20:	425b      	negs	r3, r3
 8003f22:	61a3      	str	r3, [r4, #24]
 8003f24:	6923      	ldr	r3, [r4, #16]
 8003f26:	b943      	cbnz	r3, 8003f3a <__swsetup_r+0xc6>
 8003f28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f2c:	d1ba      	bne.n	8003ea4 <__swsetup_r+0x30>
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	0781      	lsls	r1, r0, #30
 8003f32:	bf58      	it	pl
 8003f34:	6963      	ldrpl	r3, [r4, #20]
 8003f36:	60a3      	str	r3, [r4, #8]
 8003f38:	e7f4      	b.n	8003f24 <__swsetup_r+0xb0>
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	e7f7      	b.n	8003f2e <__swsetup_r+0xba>
 8003f3e:	bf00      	nop
 8003f40:	20000014 	.word	0x20000014
 8003f44:	08004eec 	.word	0x08004eec
 8003f48:	08004f0c 	.word	0x08004f0c
 8003f4c:	08004ecc 	.word	0x08004ecc

08003f50 <__sflush_r>:
 8003f50:	898a      	ldrh	r2, [r1, #12]
 8003f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f56:	4605      	mov	r5, r0
 8003f58:	0710      	lsls	r0, r2, #28
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	d458      	bmi.n	8004010 <__sflush_r+0xc0>
 8003f5e:	684b      	ldr	r3, [r1, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	dc05      	bgt.n	8003f70 <__sflush_r+0x20>
 8003f64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	dc02      	bgt.n	8003f70 <__sflush_r+0x20>
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f72:	2e00      	cmp	r6, #0
 8003f74:	d0f9      	beq.n	8003f6a <__sflush_r+0x1a>
 8003f76:	2300      	movs	r3, #0
 8003f78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f7c:	682f      	ldr	r7, [r5, #0]
 8003f7e:	602b      	str	r3, [r5, #0]
 8003f80:	d032      	beq.n	8003fe8 <__sflush_r+0x98>
 8003f82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	075a      	lsls	r2, r3, #29
 8003f88:	d505      	bpl.n	8003f96 <__sflush_r+0x46>
 8003f8a:	6863      	ldr	r3, [r4, #4]
 8003f8c:	1ac0      	subs	r0, r0, r3
 8003f8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f90:	b10b      	cbz	r3, 8003f96 <__sflush_r+0x46>
 8003f92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f94:	1ac0      	subs	r0, r0, r3
 8003f96:	2300      	movs	r3, #0
 8003f98:	4602      	mov	r2, r0
 8003f9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	6a21      	ldr	r1, [r4, #32]
 8003fa0:	47b0      	blx	r6
 8003fa2:	1c43      	adds	r3, r0, #1
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	d106      	bne.n	8003fb6 <__sflush_r+0x66>
 8003fa8:	6829      	ldr	r1, [r5, #0]
 8003faa:	291d      	cmp	r1, #29
 8003fac:	d82c      	bhi.n	8004008 <__sflush_r+0xb8>
 8003fae:	4a2a      	ldr	r2, [pc, #168]	; (8004058 <__sflush_r+0x108>)
 8003fb0:	40ca      	lsrs	r2, r1
 8003fb2:	07d6      	lsls	r6, r2, #31
 8003fb4:	d528      	bpl.n	8004008 <__sflush_r+0xb8>
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	6062      	str	r2, [r4, #4]
 8003fba:	6922      	ldr	r2, [r4, #16]
 8003fbc:	04d9      	lsls	r1, r3, #19
 8003fbe:	6022      	str	r2, [r4, #0]
 8003fc0:	d504      	bpl.n	8003fcc <__sflush_r+0x7c>
 8003fc2:	1c42      	adds	r2, r0, #1
 8003fc4:	d101      	bne.n	8003fca <__sflush_r+0x7a>
 8003fc6:	682b      	ldr	r3, [r5, #0]
 8003fc8:	b903      	cbnz	r3, 8003fcc <__sflush_r+0x7c>
 8003fca:	6560      	str	r0, [r4, #84]	; 0x54
 8003fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fce:	602f      	str	r7, [r5, #0]
 8003fd0:	2900      	cmp	r1, #0
 8003fd2:	d0ca      	beq.n	8003f6a <__sflush_r+0x1a>
 8003fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fd8:	4299      	cmp	r1, r3
 8003fda:	d002      	beq.n	8003fe2 <__sflush_r+0x92>
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f000 f9d5 	bl	800438c <_free_r>
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	6360      	str	r0, [r4, #52]	; 0x34
 8003fe6:	e7c1      	b.n	8003f6c <__sflush_r+0x1c>
 8003fe8:	6a21      	ldr	r1, [r4, #32]
 8003fea:	2301      	movs	r3, #1
 8003fec:	4628      	mov	r0, r5
 8003fee:	47b0      	blx	r6
 8003ff0:	1c41      	adds	r1, r0, #1
 8003ff2:	d1c7      	bne.n	8003f84 <__sflush_r+0x34>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0c4      	beq.n	8003f84 <__sflush_r+0x34>
 8003ffa:	2b1d      	cmp	r3, #29
 8003ffc:	d001      	beq.n	8004002 <__sflush_r+0xb2>
 8003ffe:	2b16      	cmp	r3, #22
 8004000:	d101      	bne.n	8004006 <__sflush_r+0xb6>
 8004002:	602f      	str	r7, [r5, #0]
 8004004:	e7b1      	b.n	8003f6a <__sflush_r+0x1a>
 8004006:	89a3      	ldrh	r3, [r4, #12]
 8004008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800400c:	81a3      	strh	r3, [r4, #12]
 800400e:	e7ad      	b.n	8003f6c <__sflush_r+0x1c>
 8004010:	690f      	ldr	r7, [r1, #16]
 8004012:	2f00      	cmp	r7, #0
 8004014:	d0a9      	beq.n	8003f6a <__sflush_r+0x1a>
 8004016:	0793      	lsls	r3, r2, #30
 8004018:	bf18      	it	ne
 800401a:	2300      	movne	r3, #0
 800401c:	680e      	ldr	r6, [r1, #0]
 800401e:	bf08      	it	eq
 8004020:	694b      	ldreq	r3, [r1, #20]
 8004022:	eba6 0807 	sub.w	r8, r6, r7
 8004026:	600f      	str	r7, [r1, #0]
 8004028:	608b      	str	r3, [r1, #8]
 800402a:	f1b8 0f00 	cmp.w	r8, #0
 800402e:	dd9c      	ble.n	8003f6a <__sflush_r+0x1a>
 8004030:	4643      	mov	r3, r8
 8004032:	463a      	mov	r2, r7
 8004034:	4628      	mov	r0, r5
 8004036:	6a21      	ldr	r1, [r4, #32]
 8004038:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800403a:	47b0      	blx	r6
 800403c:	2800      	cmp	r0, #0
 800403e:	dc06      	bgt.n	800404e <__sflush_r+0xfe>
 8004040:	89a3      	ldrh	r3, [r4, #12]
 8004042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800404a:	81a3      	strh	r3, [r4, #12]
 800404c:	e78e      	b.n	8003f6c <__sflush_r+0x1c>
 800404e:	4407      	add	r7, r0
 8004050:	eba8 0800 	sub.w	r8, r8, r0
 8004054:	e7e9      	b.n	800402a <__sflush_r+0xda>
 8004056:	bf00      	nop
 8004058:	20400001 	.word	0x20400001

0800405c <_fflush_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	690b      	ldr	r3, [r1, #16]
 8004060:	4605      	mov	r5, r0
 8004062:	460c      	mov	r4, r1
 8004064:	b913      	cbnz	r3, 800406c <_fflush_r+0x10>
 8004066:	2500      	movs	r5, #0
 8004068:	4628      	mov	r0, r5
 800406a:	bd38      	pop	{r3, r4, r5, pc}
 800406c:	b118      	cbz	r0, 8004076 <_fflush_r+0x1a>
 800406e:	6983      	ldr	r3, [r0, #24]
 8004070:	b90b      	cbnz	r3, 8004076 <_fflush_r+0x1a>
 8004072:	f000 f887 	bl	8004184 <__sinit>
 8004076:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <_fflush_r+0x6c>)
 8004078:	429c      	cmp	r4, r3
 800407a:	d11b      	bne.n	80040b4 <_fflush_r+0x58>
 800407c:	686c      	ldr	r4, [r5, #4]
 800407e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0ef      	beq.n	8004066 <_fflush_r+0xa>
 8004086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004088:	07d0      	lsls	r0, r2, #31
 800408a:	d404      	bmi.n	8004096 <_fflush_r+0x3a>
 800408c:	0599      	lsls	r1, r3, #22
 800408e:	d402      	bmi.n	8004096 <_fflush_r+0x3a>
 8004090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004092:	f000 f915 	bl	80042c0 <__retarget_lock_acquire_recursive>
 8004096:	4628      	mov	r0, r5
 8004098:	4621      	mov	r1, r4
 800409a:	f7ff ff59 	bl	8003f50 <__sflush_r>
 800409e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040a0:	4605      	mov	r5, r0
 80040a2:	07da      	lsls	r2, r3, #31
 80040a4:	d4e0      	bmi.n	8004068 <_fflush_r+0xc>
 80040a6:	89a3      	ldrh	r3, [r4, #12]
 80040a8:	059b      	lsls	r3, r3, #22
 80040aa:	d4dd      	bmi.n	8004068 <_fflush_r+0xc>
 80040ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040ae:	f000 f908 	bl	80042c2 <__retarget_lock_release_recursive>
 80040b2:	e7d9      	b.n	8004068 <_fflush_r+0xc>
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <_fflush_r+0x70>)
 80040b6:	429c      	cmp	r4, r3
 80040b8:	d101      	bne.n	80040be <_fflush_r+0x62>
 80040ba:	68ac      	ldr	r4, [r5, #8]
 80040bc:	e7df      	b.n	800407e <_fflush_r+0x22>
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <_fflush_r+0x74>)
 80040c0:	429c      	cmp	r4, r3
 80040c2:	bf08      	it	eq
 80040c4:	68ec      	ldreq	r4, [r5, #12]
 80040c6:	e7da      	b.n	800407e <_fflush_r+0x22>
 80040c8:	08004eec 	.word	0x08004eec
 80040cc:	08004f0c 	.word	0x08004f0c
 80040d0:	08004ecc 	.word	0x08004ecc

080040d4 <std>:
 80040d4:	2300      	movs	r3, #0
 80040d6:	b510      	push	{r4, lr}
 80040d8:	4604      	mov	r4, r0
 80040da:	e9c0 3300 	strd	r3, r3, [r0]
 80040de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040e2:	6083      	str	r3, [r0, #8]
 80040e4:	8181      	strh	r1, [r0, #12]
 80040e6:	6643      	str	r3, [r0, #100]	; 0x64
 80040e8:	81c2      	strh	r2, [r0, #14]
 80040ea:	6183      	str	r3, [r0, #24]
 80040ec:	4619      	mov	r1, r3
 80040ee:	2208      	movs	r2, #8
 80040f0:	305c      	adds	r0, #92	; 0x5c
 80040f2:	f7ff fdd7 	bl	8003ca4 <memset>
 80040f6:	4b05      	ldr	r3, [pc, #20]	; (800410c <std+0x38>)
 80040f8:	6224      	str	r4, [r4, #32]
 80040fa:	6263      	str	r3, [r4, #36]	; 0x24
 80040fc:	4b04      	ldr	r3, [pc, #16]	; (8004110 <std+0x3c>)
 80040fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <std+0x40>)
 8004102:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004104:	4b04      	ldr	r3, [pc, #16]	; (8004118 <std+0x44>)
 8004106:	6323      	str	r3, [r4, #48]	; 0x30
 8004108:	bd10      	pop	{r4, pc}
 800410a:	bf00      	nop
 800410c:	08004ad5 	.word	0x08004ad5
 8004110:	08004af7 	.word	0x08004af7
 8004114:	08004b2f 	.word	0x08004b2f
 8004118:	08004b53 	.word	0x08004b53

0800411c <_cleanup_r>:
 800411c:	4901      	ldr	r1, [pc, #4]	; (8004124 <_cleanup_r+0x8>)
 800411e:	f000 b8af 	b.w	8004280 <_fwalk_reent>
 8004122:	bf00      	nop
 8004124:	0800405d 	.word	0x0800405d

08004128 <__sfmoreglue>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	2568      	movs	r5, #104	; 0x68
 800412c:	1e4a      	subs	r2, r1, #1
 800412e:	4355      	muls	r5, r2
 8004130:	460e      	mov	r6, r1
 8004132:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004136:	f000 f975 	bl	8004424 <_malloc_r>
 800413a:	4604      	mov	r4, r0
 800413c:	b140      	cbz	r0, 8004150 <__sfmoreglue+0x28>
 800413e:	2100      	movs	r1, #0
 8004140:	e9c0 1600 	strd	r1, r6, [r0]
 8004144:	300c      	adds	r0, #12
 8004146:	60a0      	str	r0, [r4, #8]
 8004148:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800414c:	f7ff fdaa 	bl	8003ca4 <memset>
 8004150:	4620      	mov	r0, r4
 8004152:	bd70      	pop	{r4, r5, r6, pc}

08004154 <__sfp_lock_acquire>:
 8004154:	4801      	ldr	r0, [pc, #4]	; (800415c <__sfp_lock_acquire+0x8>)
 8004156:	f000 b8b3 	b.w	80042c0 <__retarget_lock_acquire_recursive>
 800415a:	bf00      	nop
 800415c:	2000948c 	.word	0x2000948c

08004160 <__sfp_lock_release>:
 8004160:	4801      	ldr	r0, [pc, #4]	; (8004168 <__sfp_lock_release+0x8>)
 8004162:	f000 b8ae 	b.w	80042c2 <__retarget_lock_release_recursive>
 8004166:	bf00      	nop
 8004168:	2000948c 	.word	0x2000948c

0800416c <__sinit_lock_acquire>:
 800416c:	4801      	ldr	r0, [pc, #4]	; (8004174 <__sinit_lock_acquire+0x8>)
 800416e:	f000 b8a7 	b.w	80042c0 <__retarget_lock_acquire_recursive>
 8004172:	bf00      	nop
 8004174:	20009487 	.word	0x20009487

08004178 <__sinit_lock_release>:
 8004178:	4801      	ldr	r0, [pc, #4]	; (8004180 <__sinit_lock_release+0x8>)
 800417a:	f000 b8a2 	b.w	80042c2 <__retarget_lock_release_recursive>
 800417e:	bf00      	nop
 8004180:	20009487 	.word	0x20009487

08004184 <__sinit>:
 8004184:	b510      	push	{r4, lr}
 8004186:	4604      	mov	r4, r0
 8004188:	f7ff fff0 	bl	800416c <__sinit_lock_acquire>
 800418c:	69a3      	ldr	r3, [r4, #24]
 800418e:	b11b      	cbz	r3, 8004198 <__sinit+0x14>
 8004190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004194:	f7ff bff0 	b.w	8004178 <__sinit_lock_release>
 8004198:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800419c:	6523      	str	r3, [r4, #80]	; 0x50
 800419e:	4b13      	ldr	r3, [pc, #76]	; (80041ec <__sinit+0x68>)
 80041a0:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <__sinit+0x6c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80041a6:	42a3      	cmp	r3, r4
 80041a8:	bf08      	it	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	4620      	mov	r0, r4
 80041ae:	bf08      	it	eq
 80041b0:	61a3      	streq	r3, [r4, #24]
 80041b2:	f000 f81f 	bl	80041f4 <__sfp>
 80041b6:	6060      	str	r0, [r4, #4]
 80041b8:	4620      	mov	r0, r4
 80041ba:	f000 f81b 	bl	80041f4 <__sfp>
 80041be:	60a0      	str	r0, [r4, #8]
 80041c0:	4620      	mov	r0, r4
 80041c2:	f000 f817 	bl	80041f4 <__sfp>
 80041c6:	2200      	movs	r2, #0
 80041c8:	2104      	movs	r1, #4
 80041ca:	60e0      	str	r0, [r4, #12]
 80041cc:	6860      	ldr	r0, [r4, #4]
 80041ce:	f7ff ff81 	bl	80040d4 <std>
 80041d2:	2201      	movs	r2, #1
 80041d4:	2109      	movs	r1, #9
 80041d6:	68a0      	ldr	r0, [r4, #8]
 80041d8:	f7ff ff7c 	bl	80040d4 <std>
 80041dc:	2202      	movs	r2, #2
 80041de:	2112      	movs	r1, #18
 80041e0:	68e0      	ldr	r0, [r4, #12]
 80041e2:	f7ff ff77 	bl	80040d4 <std>
 80041e6:	2301      	movs	r3, #1
 80041e8:	61a3      	str	r3, [r4, #24]
 80041ea:	e7d1      	b.n	8004190 <__sinit+0xc>
 80041ec:	08004ec8 	.word	0x08004ec8
 80041f0:	0800411d 	.word	0x0800411d

080041f4 <__sfp>:
 80041f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f6:	4607      	mov	r7, r0
 80041f8:	f7ff ffac 	bl	8004154 <__sfp_lock_acquire>
 80041fc:	4b1e      	ldr	r3, [pc, #120]	; (8004278 <__sfp+0x84>)
 80041fe:	681e      	ldr	r6, [r3, #0]
 8004200:	69b3      	ldr	r3, [r6, #24]
 8004202:	b913      	cbnz	r3, 800420a <__sfp+0x16>
 8004204:	4630      	mov	r0, r6
 8004206:	f7ff ffbd 	bl	8004184 <__sinit>
 800420a:	3648      	adds	r6, #72	; 0x48
 800420c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004210:	3b01      	subs	r3, #1
 8004212:	d503      	bpl.n	800421c <__sfp+0x28>
 8004214:	6833      	ldr	r3, [r6, #0]
 8004216:	b30b      	cbz	r3, 800425c <__sfp+0x68>
 8004218:	6836      	ldr	r6, [r6, #0]
 800421a:	e7f7      	b.n	800420c <__sfp+0x18>
 800421c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004220:	b9d5      	cbnz	r5, 8004258 <__sfp+0x64>
 8004222:	4b16      	ldr	r3, [pc, #88]	; (800427c <__sfp+0x88>)
 8004224:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004228:	60e3      	str	r3, [r4, #12]
 800422a:	6665      	str	r5, [r4, #100]	; 0x64
 800422c:	f000 f847 	bl	80042be <__retarget_lock_init_recursive>
 8004230:	f7ff ff96 	bl	8004160 <__sfp_lock_release>
 8004234:	2208      	movs	r2, #8
 8004236:	4629      	mov	r1, r5
 8004238:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800423c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004240:	6025      	str	r5, [r4, #0]
 8004242:	61a5      	str	r5, [r4, #24]
 8004244:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004248:	f7ff fd2c 	bl	8003ca4 <memset>
 800424c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004250:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004254:	4620      	mov	r0, r4
 8004256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004258:	3468      	adds	r4, #104	; 0x68
 800425a:	e7d9      	b.n	8004210 <__sfp+0x1c>
 800425c:	2104      	movs	r1, #4
 800425e:	4638      	mov	r0, r7
 8004260:	f7ff ff62 	bl	8004128 <__sfmoreglue>
 8004264:	4604      	mov	r4, r0
 8004266:	6030      	str	r0, [r6, #0]
 8004268:	2800      	cmp	r0, #0
 800426a:	d1d5      	bne.n	8004218 <__sfp+0x24>
 800426c:	f7ff ff78 	bl	8004160 <__sfp_lock_release>
 8004270:	230c      	movs	r3, #12
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	e7ee      	b.n	8004254 <__sfp+0x60>
 8004276:	bf00      	nop
 8004278:	08004ec8 	.word	0x08004ec8
 800427c:	ffff0001 	.word	0xffff0001

08004280 <_fwalk_reent>:
 8004280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004284:	4606      	mov	r6, r0
 8004286:	4688      	mov	r8, r1
 8004288:	2700      	movs	r7, #0
 800428a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800428e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004292:	f1b9 0901 	subs.w	r9, r9, #1
 8004296:	d505      	bpl.n	80042a4 <_fwalk_reent+0x24>
 8004298:	6824      	ldr	r4, [r4, #0]
 800429a:	2c00      	cmp	r4, #0
 800429c:	d1f7      	bne.n	800428e <_fwalk_reent+0xe>
 800429e:	4638      	mov	r0, r7
 80042a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a4:	89ab      	ldrh	r3, [r5, #12]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d907      	bls.n	80042ba <_fwalk_reent+0x3a>
 80042aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042ae:	3301      	adds	r3, #1
 80042b0:	d003      	beq.n	80042ba <_fwalk_reent+0x3a>
 80042b2:	4629      	mov	r1, r5
 80042b4:	4630      	mov	r0, r6
 80042b6:	47c0      	blx	r8
 80042b8:	4307      	orrs	r7, r0
 80042ba:	3568      	adds	r5, #104	; 0x68
 80042bc:	e7e9      	b.n	8004292 <_fwalk_reent+0x12>

080042be <__retarget_lock_init_recursive>:
 80042be:	4770      	bx	lr

080042c0 <__retarget_lock_acquire_recursive>:
 80042c0:	4770      	bx	lr

080042c2 <__retarget_lock_release_recursive>:
 80042c2:	4770      	bx	lr

080042c4 <__swhatbuf_r>:
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	460e      	mov	r6, r1
 80042c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042cc:	4614      	mov	r4, r2
 80042ce:	2900      	cmp	r1, #0
 80042d0:	461d      	mov	r5, r3
 80042d2:	b096      	sub	sp, #88	; 0x58
 80042d4:	da07      	bge.n	80042e6 <__swhatbuf_r+0x22>
 80042d6:	2300      	movs	r3, #0
 80042d8:	602b      	str	r3, [r5, #0]
 80042da:	89b3      	ldrh	r3, [r6, #12]
 80042dc:	061a      	lsls	r2, r3, #24
 80042de:	d410      	bmi.n	8004302 <__swhatbuf_r+0x3e>
 80042e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042e4:	e00e      	b.n	8004304 <__swhatbuf_r+0x40>
 80042e6:	466a      	mov	r2, sp
 80042e8:	f000 fc5a 	bl	8004ba0 <_fstat_r>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	dbf2      	blt.n	80042d6 <__swhatbuf_r+0x12>
 80042f0:	9a01      	ldr	r2, [sp, #4]
 80042f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80042f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80042fa:	425a      	negs	r2, r3
 80042fc:	415a      	adcs	r2, r3
 80042fe:	602a      	str	r2, [r5, #0]
 8004300:	e7ee      	b.n	80042e0 <__swhatbuf_r+0x1c>
 8004302:	2340      	movs	r3, #64	; 0x40
 8004304:	2000      	movs	r0, #0
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	b016      	add	sp, #88	; 0x58
 800430a:	bd70      	pop	{r4, r5, r6, pc}

0800430c <__smakebuf_r>:
 800430c:	898b      	ldrh	r3, [r1, #12]
 800430e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004310:	079d      	lsls	r5, r3, #30
 8004312:	4606      	mov	r6, r0
 8004314:	460c      	mov	r4, r1
 8004316:	d507      	bpl.n	8004328 <__smakebuf_r+0x1c>
 8004318:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800431c:	6023      	str	r3, [r4, #0]
 800431e:	6123      	str	r3, [r4, #16]
 8004320:	2301      	movs	r3, #1
 8004322:	6163      	str	r3, [r4, #20]
 8004324:	b002      	add	sp, #8
 8004326:	bd70      	pop	{r4, r5, r6, pc}
 8004328:	466a      	mov	r2, sp
 800432a:	ab01      	add	r3, sp, #4
 800432c:	f7ff ffca 	bl	80042c4 <__swhatbuf_r>
 8004330:	9900      	ldr	r1, [sp, #0]
 8004332:	4605      	mov	r5, r0
 8004334:	4630      	mov	r0, r6
 8004336:	f000 f875 	bl	8004424 <_malloc_r>
 800433a:	b948      	cbnz	r0, 8004350 <__smakebuf_r+0x44>
 800433c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004340:	059a      	lsls	r2, r3, #22
 8004342:	d4ef      	bmi.n	8004324 <__smakebuf_r+0x18>
 8004344:	f023 0303 	bic.w	r3, r3, #3
 8004348:	f043 0302 	orr.w	r3, r3, #2
 800434c:	81a3      	strh	r3, [r4, #12]
 800434e:	e7e3      	b.n	8004318 <__smakebuf_r+0xc>
 8004350:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <__smakebuf_r+0x7c>)
 8004352:	62b3      	str	r3, [r6, #40]	; 0x28
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	6020      	str	r0, [r4, #0]
 8004358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435c:	81a3      	strh	r3, [r4, #12]
 800435e:	9b00      	ldr	r3, [sp, #0]
 8004360:	6120      	str	r0, [r4, #16]
 8004362:	6163      	str	r3, [r4, #20]
 8004364:	9b01      	ldr	r3, [sp, #4]
 8004366:	b15b      	cbz	r3, 8004380 <__smakebuf_r+0x74>
 8004368:	4630      	mov	r0, r6
 800436a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800436e:	f000 fc29 	bl	8004bc4 <_isatty_r>
 8004372:	b128      	cbz	r0, 8004380 <__smakebuf_r+0x74>
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	f023 0303 	bic.w	r3, r3, #3
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	81a3      	strh	r3, [r4, #12]
 8004380:	89a0      	ldrh	r0, [r4, #12]
 8004382:	4305      	orrs	r5, r0
 8004384:	81a5      	strh	r5, [r4, #12]
 8004386:	e7cd      	b.n	8004324 <__smakebuf_r+0x18>
 8004388:	0800411d 	.word	0x0800411d

0800438c <_free_r>:
 800438c:	b538      	push	{r3, r4, r5, lr}
 800438e:	4605      	mov	r5, r0
 8004390:	2900      	cmp	r1, #0
 8004392:	d043      	beq.n	800441c <_free_r+0x90>
 8004394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004398:	1f0c      	subs	r4, r1, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	bfb8      	it	lt
 800439e:	18e4      	addlt	r4, r4, r3
 80043a0:	f000 fc40 	bl	8004c24 <__malloc_lock>
 80043a4:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <_free_r+0x94>)
 80043a6:	6813      	ldr	r3, [r2, #0]
 80043a8:	4610      	mov	r0, r2
 80043aa:	b933      	cbnz	r3, 80043ba <_free_r+0x2e>
 80043ac:	6063      	str	r3, [r4, #4]
 80043ae:	6014      	str	r4, [r2, #0]
 80043b0:	4628      	mov	r0, r5
 80043b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043b6:	f000 bc3b 	b.w	8004c30 <__malloc_unlock>
 80043ba:	42a3      	cmp	r3, r4
 80043bc:	d90a      	bls.n	80043d4 <_free_r+0x48>
 80043be:	6821      	ldr	r1, [r4, #0]
 80043c0:	1862      	adds	r2, r4, r1
 80043c2:	4293      	cmp	r3, r2
 80043c4:	bf01      	itttt	eq
 80043c6:	681a      	ldreq	r2, [r3, #0]
 80043c8:	685b      	ldreq	r3, [r3, #4]
 80043ca:	1852      	addeq	r2, r2, r1
 80043cc:	6022      	streq	r2, [r4, #0]
 80043ce:	6063      	str	r3, [r4, #4]
 80043d0:	6004      	str	r4, [r0, #0]
 80043d2:	e7ed      	b.n	80043b0 <_free_r+0x24>
 80043d4:	461a      	mov	r2, r3
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	b10b      	cbz	r3, 80043de <_free_r+0x52>
 80043da:	42a3      	cmp	r3, r4
 80043dc:	d9fa      	bls.n	80043d4 <_free_r+0x48>
 80043de:	6811      	ldr	r1, [r2, #0]
 80043e0:	1850      	adds	r0, r2, r1
 80043e2:	42a0      	cmp	r0, r4
 80043e4:	d10b      	bne.n	80043fe <_free_r+0x72>
 80043e6:	6820      	ldr	r0, [r4, #0]
 80043e8:	4401      	add	r1, r0
 80043ea:	1850      	adds	r0, r2, r1
 80043ec:	4283      	cmp	r3, r0
 80043ee:	6011      	str	r1, [r2, #0]
 80043f0:	d1de      	bne.n	80043b0 <_free_r+0x24>
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4401      	add	r1, r0
 80043f8:	6011      	str	r1, [r2, #0]
 80043fa:	6053      	str	r3, [r2, #4]
 80043fc:	e7d8      	b.n	80043b0 <_free_r+0x24>
 80043fe:	d902      	bls.n	8004406 <_free_r+0x7a>
 8004400:	230c      	movs	r3, #12
 8004402:	602b      	str	r3, [r5, #0]
 8004404:	e7d4      	b.n	80043b0 <_free_r+0x24>
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	1821      	adds	r1, r4, r0
 800440a:	428b      	cmp	r3, r1
 800440c:	bf01      	itttt	eq
 800440e:	6819      	ldreq	r1, [r3, #0]
 8004410:	685b      	ldreq	r3, [r3, #4]
 8004412:	1809      	addeq	r1, r1, r0
 8004414:	6021      	streq	r1, [r4, #0]
 8004416:	6063      	str	r3, [r4, #4]
 8004418:	6054      	str	r4, [r2, #4]
 800441a:	e7c9      	b.n	80043b0 <_free_r+0x24>
 800441c:	bd38      	pop	{r3, r4, r5, pc}
 800441e:	bf00      	nop
 8004420:	200093ec 	.word	0x200093ec

08004424 <_malloc_r>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	1ccd      	adds	r5, r1, #3
 8004428:	f025 0503 	bic.w	r5, r5, #3
 800442c:	3508      	adds	r5, #8
 800442e:	2d0c      	cmp	r5, #12
 8004430:	bf38      	it	cc
 8004432:	250c      	movcc	r5, #12
 8004434:	2d00      	cmp	r5, #0
 8004436:	4606      	mov	r6, r0
 8004438:	db01      	blt.n	800443e <_malloc_r+0x1a>
 800443a:	42a9      	cmp	r1, r5
 800443c:	d903      	bls.n	8004446 <_malloc_r+0x22>
 800443e:	230c      	movs	r3, #12
 8004440:	6033      	str	r3, [r6, #0]
 8004442:	2000      	movs	r0, #0
 8004444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004446:	f000 fbed 	bl	8004c24 <__malloc_lock>
 800444a:	4921      	ldr	r1, [pc, #132]	; (80044d0 <_malloc_r+0xac>)
 800444c:	680a      	ldr	r2, [r1, #0]
 800444e:	4614      	mov	r4, r2
 8004450:	b99c      	cbnz	r4, 800447a <_malloc_r+0x56>
 8004452:	4f20      	ldr	r7, [pc, #128]	; (80044d4 <_malloc_r+0xb0>)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	b923      	cbnz	r3, 8004462 <_malloc_r+0x3e>
 8004458:	4621      	mov	r1, r4
 800445a:	4630      	mov	r0, r6
 800445c:	f000 fb2a 	bl	8004ab4 <_sbrk_r>
 8004460:	6038      	str	r0, [r7, #0]
 8004462:	4629      	mov	r1, r5
 8004464:	4630      	mov	r0, r6
 8004466:	f000 fb25 	bl	8004ab4 <_sbrk_r>
 800446a:	1c43      	adds	r3, r0, #1
 800446c:	d123      	bne.n	80044b6 <_malloc_r+0x92>
 800446e:	230c      	movs	r3, #12
 8004470:	4630      	mov	r0, r6
 8004472:	6033      	str	r3, [r6, #0]
 8004474:	f000 fbdc 	bl	8004c30 <__malloc_unlock>
 8004478:	e7e3      	b.n	8004442 <_malloc_r+0x1e>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	1b5b      	subs	r3, r3, r5
 800447e:	d417      	bmi.n	80044b0 <_malloc_r+0x8c>
 8004480:	2b0b      	cmp	r3, #11
 8004482:	d903      	bls.n	800448c <_malloc_r+0x68>
 8004484:	6023      	str	r3, [r4, #0]
 8004486:	441c      	add	r4, r3
 8004488:	6025      	str	r5, [r4, #0]
 800448a:	e004      	b.n	8004496 <_malloc_r+0x72>
 800448c:	6863      	ldr	r3, [r4, #4]
 800448e:	42a2      	cmp	r2, r4
 8004490:	bf0c      	ite	eq
 8004492:	600b      	streq	r3, [r1, #0]
 8004494:	6053      	strne	r3, [r2, #4]
 8004496:	4630      	mov	r0, r6
 8004498:	f000 fbca 	bl	8004c30 <__malloc_unlock>
 800449c:	f104 000b 	add.w	r0, r4, #11
 80044a0:	1d23      	adds	r3, r4, #4
 80044a2:	f020 0007 	bic.w	r0, r0, #7
 80044a6:	1ac2      	subs	r2, r0, r3
 80044a8:	d0cc      	beq.n	8004444 <_malloc_r+0x20>
 80044aa:	1a1b      	subs	r3, r3, r0
 80044ac:	50a3      	str	r3, [r4, r2]
 80044ae:	e7c9      	b.n	8004444 <_malloc_r+0x20>
 80044b0:	4622      	mov	r2, r4
 80044b2:	6864      	ldr	r4, [r4, #4]
 80044b4:	e7cc      	b.n	8004450 <_malloc_r+0x2c>
 80044b6:	1cc4      	adds	r4, r0, #3
 80044b8:	f024 0403 	bic.w	r4, r4, #3
 80044bc:	42a0      	cmp	r0, r4
 80044be:	d0e3      	beq.n	8004488 <_malloc_r+0x64>
 80044c0:	1a21      	subs	r1, r4, r0
 80044c2:	4630      	mov	r0, r6
 80044c4:	f000 faf6 	bl	8004ab4 <_sbrk_r>
 80044c8:	3001      	adds	r0, #1
 80044ca:	d1dd      	bne.n	8004488 <_malloc_r+0x64>
 80044cc:	e7cf      	b.n	800446e <_malloc_r+0x4a>
 80044ce:	bf00      	nop
 80044d0:	200093ec 	.word	0x200093ec
 80044d4:	200093f0 	.word	0x200093f0

080044d8 <__sfputc_r>:
 80044d8:	6893      	ldr	r3, [r2, #8]
 80044da:	b410      	push	{r4}
 80044dc:	3b01      	subs	r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	6093      	str	r3, [r2, #8]
 80044e2:	da07      	bge.n	80044f4 <__sfputc_r+0x1c>
 80044e4:	6994      	ldr	r4, [r2, #24]
 80044e6:	42a3      	cmp	r3, r4
 80044e8:	db01      	blt.n	80044ee <__sfputc_r+0x16>
 80044ea:	290a      	cmp	r1, #10
 80044ec:	d102      	bne.n	80044f4 <__sfputc_r+0x1c>
 80044ee:	bc10      	pop	{r4}
 80044f0:	f7ff bc6e 	b.w	8003dd0 <__swbuf_r>
 80044f4:	6813      	ldr	r3, [r2, #0]
 80044f6:	1c58      	adds	r0, r3, #1
 80044f8:	6010      	str	r0, [r2, #0]
 80044fa:	7019      	strb	r1, [r3, #0]
 80044fc:	4608      	mov	r0, r1
 80044fe:	bc10      	pop	{r4}
 8004500:	4770      	bx	lr

08004502 <__sfputs_r>:
 8004502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004504:	4606      	mov	r6, r0
 8004506:	460f      	mov	r7, r1
 8004508:	4614      	mov	r4, r2
 800450a:	18d5      	adds	r5, r2, r3
 800450c:	42ac      	cmp	r4, r5
 800450e:	d101      	bne.n	8004514 <__sfputs_r+0x12>
 8004510:	2000      	movs	r0, #0
 8004512:	e007      	b.n	8004524 <__sfputs_r+0x22>
 8004514:	463a      	mov	r2, r7
 8004516:	4630      	mov	r0, r6
 8004518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800451c:	f7ff ffdc 	bl	80044d8 <__sfputc_r>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	d1f3      	bne.n	800450c <__sfputs_r+0xa>
 8004524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004528 <_vfiprintf_r>:
 8004528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452c:	460d      	mov	r5, r1
 800452e:	4614      	mov	r4, r2
 8004530:	4698      	mov	r8, r3
 8004532:	4606      	mov	r6, r0
 8004534:	b09d      	sub	sp, #116	; 0x74
 8004536:	b118      	cbz	r0, 8004540 <_vfiprintf_r+0x18>
 8004538:	6983      	ldr	r3, [r0, #24]
 800453a:	b90b      	cbnz	r3, 8004540 <_vfiprintf_r+0x18>
 800453c:	f7ff fe22 	bl	8004184 <__sinit>
 8004540:	4b89      	ldr	r3, [pc, #548]	; (8004768 <_vfiprintf_r+0x240>)
 8004542:	429d      	cmp	r5, r3
 8004544:	d11b      	bne.n	800457e <_vfiprintf_r+0x56>
 8004546:	6875      	ldr	r5, [r6, #4]
 8004548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800454a:	07d9      	lsls	r1, r3, #31
 800454c:	d405      	bmi.n	800455a <_vfiprintf_r+0x32>
 800454e:	89ab      	ldrh	r3, [r5, #12]
 8004550:	059a      	lsls	r2, r3, #22
 8004552:	d402      	bmi.n	800455a <_vfiprintf_r+0x32>
 8004554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004556:	f7ff feb3 	bl	80042c0 <__retarget_lock_acquire_recursive>
 800455a:	89ab      	ldrh	r3, [r5, #12]
 800455c:	071b      	lsls	r3, r3, #28
 800455e:	d501      	bpl.n	8004564 <_vfiprintf_r+0x3c>
 8004560:	692b      	ldr	r3, [r5, #16]
 8004562:	b9eb      	cbnz	r3, 80045a0 <_vfiprintf_r+0x78>
 8004564:	4629      	mov	r1, r5
 8004566:	4630      	mov	r0, r6
 8004568:	f7ff fc84 	bl	8003e74 <__swsetup_r>
 800456c:	b1c0      	cbz	r0, 80045a0 <_vfiprintf_r+0x78>
 800456e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004570:	07dc      	lsls	r4, r3, #31
 8004572:	d50e      	bpl.n	8004592 <_vfiprintf_r+0x6a>
 8004574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004578:	b01d      	add	sp, #116	; 0x74
 800457a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457e:	4b7b      	ldr	r3, [pc, #492]	; (800476c <_vfiprintf_r+0x244>)
 8004580:	429d      	cmp	r5, r3
 8004582:	d101      	bne.n	8004588 <_vfiprintf_r+0x60>
 8004584:	68b5      	ldr	r5, [r6, #8]
 8004586:	e7df      	b.n	8004548 <_vfiprintf_r+0x20>
 8004588:	4b79      	ldr	r3, [pc, #484]	; (8004770 <_vfiprintf_r+0x248>)
 800458a:	429d      	cmp	r5, r3
 800458c:	bf08      	it	eq
 800458e:	68f5      	ldreq	r5, [r6, #12]
 8004590:	e7da      	b.n	8004548 <_vfiprintf_r+0x20>
 8004592:	89ab      	ldrh	r3, [r5, #12]
 8004594:	0598      	lsls	r0, r3, #22
 8004596:	d4ed      	bmi.n	8004574 <_vfiprintf_r+0x4c>
 8004598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800459a:	f7ff fe92 	bl	80042c2 <__retarget_lock_release_recursive>
 800459e:	e7e9      	b.n	8004574 <_vfiprintf_r+0x4c>
 80045a0:	2300      	movs	r3, #0
 80045a2:	9309      	str	r3, [sp, #36]	; 0x24
 80045a4:	2320      	movs	r3, #32
 80045a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045aa:	2330      	movs	r3, #48	; 0x30
 80045ac:	f04f 0901 	mov.w	r9, #1
 80045b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80045b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004774 <_vfiprintf_r+0x24c>
 80045b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045bc:	4623      	mov	r3, r4
 80045be:	469a      	mov	sl, r3
 80045c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045c4:	b10a      	cbz	r2, 80045ca <_vfiprintf_r+0xa2>
 80045c6:	2a25      	cmp	r2, #37	; 0x25
 80045c8:	d1f9      	bne.n	80045be <_vfiprintf_r+0x96>
 80045ca:	ebba 0b04 	subs.w	fp, sl, r4
 80045ce:	d00b      	beq.n	80045e8 <_vfiprintf_r+0xc0>
 80045d0:	465b      	mov	r3, fp
 80045d2:	4622      	mov	r2, r4
 80045d4:	4629      	mov	r1, r5
 80045d6:	4630      	mov	r0, r6
 80045d8:	f7ff ff93 	bl	8004502 <__sfputs_r>
 80045dc:	3001      	adds	r0, #1
 80045de:	f000 80aa 	beq.w	8004736 <_vfiprintf_r+0x20e>
 80045e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045e4:	445a      	add	r2, fp
 80045e6:	9209      	str	r2, [sp, #36]	; 0x24
 80045e8:	f89a 3000 	ldrb.w	r3, [sl]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a2 	beq.w	8004736 <_vfiprintf_r+0x20e>
 80045f2:	2300      	movs	r3, #0
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045fc:	f10a 0a01 	add.w	sl, sl, #1
 8004600:	9304      	str	r3, [sp, #16]
 8004602:	9307      	str	r3, [sp, #28]
 8004604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004608:	931a      	str	r3, [sp, #104]	; 0x68
 800460a:	4654      	mov	r4, sl
 800460c:	2205      	movs	r2, #5
 800460e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004612:	4858      	ldr	r0, [pc, #352]	; (8004774 <_vfiprintf_r+0x24c>)
 8004614:	f000 faf8 	bl	8004c08 <memchr>
 8004618:	9a04      	ldr	r2, [sp, #16]
 800461a:	b9d8      	cbnz	r0, 8004654 <_vfiprintf_r+0x12c>
 800461c:	06d1      	lsls	r1, r2, #27
 800461e:	bf44      	itt	mi
 8004620:	2320      	movmi	r3, #32
 8004622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004626:	0713      	lsls	r3, r2, #28
 8004628:	bf44      	itt	mi
 800462a:	232b      	movmi	r3, #43	; 0x2b
 800462c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004630:	f89a 3000 	ldrb.w	r3, [sl]
 8004634:	2b2a      	cmp	r3, #42	; 0x2a
 8004636:	d015      	beq.n	8004664 <_vfiprintf_r+0x13c>
 8004638:	4654      	mov	r4, sl
 800463a:	2000      	movs	r0, #0
 800463c:	f04f 0c0a 	mov.w	ip, #10
 8004640:	9a07      	ldr	r2, [sp, #28]
 8004642:	4621      	mov	r1, r4
 8004644:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004648:	3b30      	subs	r3, #48	; 0x30
 800464a:	2b09      	cmp	r3, #9
 800464c:	d94e      	bls.n	80046ec <_vfiprintf_r+0x1c4>
 800464e:	b1b0      	cbz	r0, 800467e <_vfiprintf_r+0x156>
 8004650:	9207      	str	r2, [sp, #28]
 8004652:	e014      	b.n	800467e <_vfiprintf_r+0x156>
 8004654:	eba0 0308 	sub.w	r3, r0, r8
 8004658:	fa09 f303 	lsl.w	r3, r9, r3
 800465c:	4313      	orrs	r3, r2
 800465e:	46a2      	mov	sl, r4
 8004660:	9304      	str	r3, [sp, #16]
 8004662:	e7d2      	b.n	800460a <_vfiprintf_r+0xe2>
 8004664:	9b03      	ldr	r3, [sp, #12]
 8004666:	1d19      	adds	r1, r3, #4
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	9103      	str	r1, [sp, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	bfbb      	ittet	lt
 8004670:	425b      	neglt	r3, r3
 8004672:	f042 0202 	orrlt.w	r2, r2, #2
 8004676:	9307      	strge	r3, [sp, #28]
 8004678:	9307      	strlt	r3, [sp, #28]
 800467a:	bfb8      	it	lt
 800467c:	9204      	strlt	r2, [sp, #16]
 800467e:	7823      	ldrb	r3, [r4, #0]
 8004680:	2b2e      	cmp	r3, #46	; 0x2e
 8004682:	d10c      	bne.n	800469e <_vfiprintf_r+0x176>
 8004684:	7863      	ldrb	r3, [r4, #1]
 8004686:	2b2a      	cmp	r3, #42	; 0x2a
 8004688:	d135      	bne.n	80046f6 <_vfiprintf_r+0x1ce>
 800468a:	9b03      	ldr	r3, [sp, #12]
 800468c:	3402      	adds	r4, #2
 800468e:	1d1a      	adds	r2, r3, #4
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	9203      	str	r2, [sp, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	bfb8      	it	lt
 8004698:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800469c:	9305      	str	r3, [sp, #20]
 800469e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004784 <_vfiprintf_r+0x25c>
 80046a2:	2203      	movs	r2, #3
 80046a4:	4650      	mov	r0, sl
 80046a6:	7821      	ldrb	r1, [r4, #0]
 80046a8:	f000 faae 	bl	8004c08 <memchr>
 80046ac:	b140      	cbz	r0, 80046c0 <_vfiprintf_r+0x198>
 80046ae:	2340      	movs	r3, #64	; 0x40
 80046b0:	eba0 000a 	sub.w	r0, r0, sl
 80046b4:	fa03 f000 	lsl.w	r0, r3, r0
 80046b8:	9b04      	ldr	r3, [sp, #16]
 80046ba:	3401      	adds	r4, #1
 80046bc:	4303      	orrs	r3, r0
 80046be:	9304      	str	r3, [sp, #16]
 80046c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046c4:	2206      	movs	r2, #6
 80046c6:	482c      	ldr	r0, [pc, #176]	; (8004778 <_vfiprintf_r+0x250>)
 80046c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046cc:	f000 fa9c 	bl	8004c08 <memchr>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d03f      	beq.n	8004754 <_vfiprintf_r+0x22c>
 80046d4:	4b29      	ldr	r3, [pc, #164]	; (800477c <_vfiprintf_r+0x254>)
 80046d6:	bb1b      	cbnz	r3, 8004720 <_vfiprintf_r+0x1f8>
 80046d8:	9b03      	ldr	r3, [sp, #12]
 80046da:	3307      	adds	r3, #7
 80046dc:	f023 0307 	bic.w	r3, r3, #7
 80046e0:	3308      	adds	r3, #8
 80046e2:	9303      	str	r3, [sp, #12]
 80046e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e6:	443b      	add	r3, r7
 80046e8:	9309      	str	r3, [sp, #36]	; 0x24
 80046ea:	e767      	b.n	80045bc <_vfiprintf_r+0x94>
 80046ec:	460c      	mov	r4, r1
 80046ee:	2001      	movs	r0, #1
 80046f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80046f4:	e7a5      	b.n	8004642 <_vfiprintf_r+0x11a>
 80046f6:	2300      	movs	r3, #0
 80046f8:	f04f 0c0a 	mov.w	ip, #10
 80046fc:	4619      	mov	r1, r3
 80046fe:	3401      	adds	r4, #1
 8004700:	9305      	str	r3, [sp, #20]
 8004702:	4620      	mov	r0, r4
 8004704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004708:	3a30      	subs	r2, #48	; 0x30
 800470a:	2a09      	cmp	r2, #9
 800470c:	d903      	bls.n	8004716 <_vfiprintf_r+0x1ee>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0c5      	beq.n	800469e <_vfiprintf_r+0x176>
 8004712:	9105      	str	r1, [sp, #20]
 8004714:	e7c3      	b.n	800469e <_vfiprintf_r+0x176>
 8004716:	4604      	mov	r4, r0
 8004718:	2301      	movs	r3, #1
 800471a:	fb0c 2101 	mla	r1, ip, r1, r2
 800471e:	e7f0      	b.n	8004702 <_vfiprintf_r+0x1da>
 8004720:	ab03      	add	r3, sp, #12
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	462a      	mov	r2, r5
 8004726:	4630      	mov	r0, r6
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <_vfiprintf_r+0x258>)
 800472a:	a904      	add	r1, sp, #16
 800472c:	f3af 8000 	nop.w
 8004730:	4607      	mov	r7, r0
 8004732:	1c78      	adds	r0, r7, #1
 8004734:	d1d6      	bne.n	80046e4 <_vfiprintf_r+0x1bc>
 8004736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004738:	07d9      	lsls	r1, r3, #31
 800473a:	d405      	bmi.n	8004748 <_vfiprintf_r+0x220>
 800473c:	89ab      	ldrh	r3, [r5, #12]
 800473e:	059a      	lsls	r2, r3, #22
 8004740:	d402      	bmi.n	8004748 <_vfiprintf_r+0x220>
 8004742:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004744:	f7ff fdbd 	bl	80042c2 <__retarget_lock_release_recursive>
 8004748:	89ab      	ldrh	r3, [r5, #12]
 800474a:	065b      	lsls	r3, r3, #25
 800474c:	f53f af12 	bmi.w	8004574 <_vfiprintf_r+0x4c>
 8004750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004752:	e711      	b.n	8004578 <_vfiprintf_r+0x50>
 8004754:	ab03      	add	r3, sp, #12
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	462a      	mov	r2, r5
 800475a:	4630      	mov	r0, r6
 800475c:	4b08      	ldr	r3, [pc, #32]	; (8004780 <_vfiprintf_r+0x258>)
 800475e:	a904      	add	r1, sp, #16
 8004760:	f000 f882 	bl	8004868 <_printf_i>
 8004764:	e7e4      	b.n	8004730 <_vfiprintf_r+0x208>
 8004766:	bf00      	nop
 8004768:	08004eec 	.word	0x08004eec
 800476c:	08004f0c 	.word	0x08004f0c
 8004770:	08004ecc 	.word	0x08004ecc
 8004774:	08004f2c 	.word	0x08004f2c
 8004778:	08004f36 	.word	0x08004f36
 800477c:	00000000 	.word	0x00000000
 8004780:	08004503 	.word	0x08004503
 8004784:	08004f32 	.word	0x08004f32

08004788 <_printf_common>:
 8004788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800478c:	4616      	mov	r6, r2
 800478e:	4699      	mov	r9, r3
 8004790:	688a      	ldr	r2, [r1, #8]
 8004792:	690b      	ldr	r3, [r1, #16]
 8004794:	4607      	mov	r7, r0
 8004796:	4293      	cmp	r3, r2
 8004798:	bfb8      	it	lt
 800479a:	4613      	movlt	r3, r2
 800479c:	6033      	str	r3, [r6, #0]
 800479e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047a2:	460c      	mov	r4, r1
 80047a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047a8:	b10a      	cbz	r2, 80047ae <_printf_common+0x26>
 80047aa:	3301      	adds	r3, #1
 80047ac:	6033      	str	r3, [r6, #0]
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	0699      	lsls	r1, r3, #26
 80047b2:	bf42      	ittt	mi
 80047b4:	6833      	ldrmi	r3, [r6, #0]
 80047b6:	3302      	addmi	r3, #2
 80047b8:	6033      	strmi	r3, [r6, #0]
 80047ba:	6825      	ldr	r5, [r4, #0]
 80047bc:	f015 0506 	ands.w	r5, r5, #6
 80047c0:	d106      	bne.n	80047d0 <_printf_common+0x48>
 80047c2:	f104 0a19 	add.w	sl, r4, #25
 80047c6:	68e3      	ldr	r3, [r4, #12]
 80047c8:	6832      	ldr	r2, [r6, #0]
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	42ab      	cmp	r3, r5
 80047ce:	dc28      	bgt.n	8004822 <_printf_common+0x9a>
 80047d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047d4:	1e13      	subs	r3, r2, #0
 80047d6:	6822      	ldr	r2, [r4, #0]
 80047d8:	bf18      	it	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	0692      	lsls	r2, r2, #26
 80047de:	d42d      	bmi.n	800483c <_printf_common+0xb4>
 80047e0:	4649      	mov	r1, r9
 80047e2:	4638      	mov	r0, r7
 80047e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047e8:	47c0      	blx	r8
 80047ea:	3001      	adds	r0, #1
 80047ec:	d020      	beq.n	8004830 <_printf_common+0xa8>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	68e5      	ldr	r5, [r4, #12]
 80047f2:	f003 0306 	and.w	r3, r3, #6
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	bf18      	it	ne
 80047fa:	2500      	movne	r5, #0
 80047fc:	6832      	ldr	r2, [r6, #0]
 80047fe:	f04f 0600 	mov.w	r6, #0
 8004802:	68a3      	ldr	r3, [r4, #8]
 8004804:	bf08      	it	eq
 8004806:	1aad      	subeq	r5, r5, r2
 8004808:	6922      	ldr	r2, [r4, #16]
 800480a:	bf08      	it	eq
 800480c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004810:	4293      	cmp	r3, r2
 8004812:	bfc4      	itt	gt
 8004814:	1a9b      	subgt	r3, r3, r2
 8004816:	18ed      	addgt	r5, r5, r3
 8004818:	341a      	adds	r4, #26
 800481a:	42b5      	cmp	r5, r6
 800481c:	d11a      	bne.n	8004854 <_printf_common+0xcc>
 800481e:	2000      	movs	r0, #0
 8004820:	e008      	b.n	8004834 <_printf_common+0xac>
 8004822:	2301      	movs	r3, #1
 8004824:	4652      	mov	r2, sl
 8004826:	4649      	mov	r1, r9
 8004828:	4638      	mov	r0, r7
 800482a:	47c0      	blx	r8
 800482c:	3001      	adds	r0, #1
 800482e:	d103      	bne.n	8004838 <_printf_common+0xb0>
 8004830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004838:	3501      	adds	r5, #1
 800483a:	e7c4      	b.n	80047c6 <_printf_common+0x3e>
 800483c:	2030      	movs	r0, #48	; 0x30
 800483e:	18e1      	adds	r1, r4, r3
 8004840:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800484a:	4422      	add	r2, r4
 800484c:	3302      	adds	r3, #2
 800484e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004852:	e7c5      	b.n	80047e0 <_printf_common+0x58>
 8004854:	2301      	movs	r3, #1
 8004856:	4622      	mov	r2, r4
 8004858:	4649      	mov	r1, r9
 800485a:	4638      	mov	r0, r7
 800485c:	47c0      	blx	r8
 800485e:	3001      	adds	r0, #1
 8004860:	d0e6      	beq.n	8004830 <_printf_common+0xa8>
 8004862:	3601      	adds	r6, #1
 8004864:	e7d9      	b.n	800481a <_printf_common+0x92>
	...

08004868 <_printf_i>:
 8004868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800486c:	460c      	mov	r4, r1
 800486e:	7e27      	ldrb	r7, [r4, #24]
 8004870:	4691      	mov	r9, r2
 8004872:	2f78      	cmp	r7, #120	; 0x78
 8004874:	4680      	mov	r8, r0
 8004876:	469a      	mov	sl, r3
 8004878:	990c      	ldr	r1, [sp, #48]	; 0x30
 800487a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800487e:	d807      	bhi.n	8004890 <_printf_i+0x28>
 8004880:	2f62      	cmp	r7, #98	; 0x62
 8004882:	d80a      	bhi.n	800489a <_printf_i+0x32>
 8004884:	2f00      	cmp	r7, #0
 8004886:	f000 80d9 	beq.w	8004a3c <_printf_i+0x1d4>
 800488a:	2f58      	cmp	r7, #88	; 0x58
 800488c:	f000 80a4 	beq.w	80049d8 <_printf_i+0x170>
 8004890:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004894:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004898:	e03a      	b.n	8004910 <_printf_i+0xa8>
 800489a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800489e:	2b15      	cmp	r3, #21
 80048a0:	d8f6      	bhi.n	8004890 <_printf_i+0x28>
 80048a2:	a001      	add	r0, pc, #4	; (adr r0, 80048a8 <_printf_i+0x40>)
 80048a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048a8:	08004901 	.word	0x08004901
 80048ac:	08004915 	.word	0x08004915
 80048b0:	08004891 	.word	0x08004891
 80048b4:	08004891 	.word	0x08004891
 80048b8:	08004891 	.word	0x08004891
 80048bc:	08004891 	.word	0x08004891
 80048c0:	08004915 	.word	0x08004915
 80048c4:	08004891 	.word	0x08004891
 80048c8:	08004891 	.word	0x08004891
 80048cc:	08004891 	.word	0x08004891
 80048d0:	08004891 	.word	0x08004891
 80048d4:	08004a23 	.word	0x08004a23
 80048d8:	08004945 	.word	0x08004945
 80048dc:	08004a05 	.word	0x08004a05
 80048e0:	08004891 	.word	0x08004891
 80048e4:	08004891 	.word	0x08004891
 80048e8:	08004a45 	.word	0x08004a45
 80048ec:	08004891 	.word	0x08004891
 80048f0:	08004945 	.word	0x08004945
 80048f4:	08004891 	.word	0x08004891
 80048f8:	08004891 	.word	0x08004891
 80048fc:	08004a0d 	.word	0x08004a0d
 8004900:	680b      	ldr	r3, [r1, #0]
 8004902:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004906:	1d1a      	adds	r2, r3, #4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	600a      	str	r2, [r1, #0]
 800490c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004910:	2301      	movs	r3, #1
 8004912:	e0a4      	b.n	8004a5e <_printf_i+0x1f6>
 8004914:	6825      	ldr	r5, [r4, #0]
 8004916:	6808      	ldr	r0, [r1, #0]
 8004918:	062e      	lsls	r6, r5, #24
 800491a:	f100 0304 	add.w	r3, r0, #4
 800491e:	d50a      	bpl.n	8004936 <_printf_i+0xce>
 8004920:	6805      	ldr	r5, [r0, #0]
 8004922:	600b      	str	r3, [r1, #0]
 8004924:	2d00      	cmp	r5, #0
 8004926:	da03      	bge.n	8004930 <_printf_i+0xc8>
 8004928:	232d      	movs	r3, #45	; 0x2d
 800492a:	426d      	negs	r5, r5
 800492c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004930:	230a      	movs	r3, #10
 8004932:	485e      	ldr	r0, [pc, #376]	; (8004aac <_printf_i+0x244>)
 8004934:	e019      	b.n	800496a <_printf_i+0x102>
 8004936:	f015 0f40 	tst.w	r5, #64	; 0x40
 800493a:	6805      	ldr	r5, [r0, #0]
 800493c:	600b      	str	r3, [r1, #0]
 800493e:	bf18      	it	ne
 8004940:	b22d      	sxthne	r5, r5
 8004942:	e7ef      	b.n	8004924 <_printf_i+0xbc>
 8004944:	680b      	ldr	r3, [r1, #0]
 8004946:	6825      	ldr	r5, [r4, #0]
 8004948:	1d18      	adds	r0, r3, #4
 800494a:	6008      	str	r0, [r1, #0]
 800494c:	0628      	lsls	r0, r5, #24
 800494e:	d501      	bpl.n	8004954 <_printf_i+0xec>
 8004950:	681d      	ldr	r5, [r3, #0]
 8004952:	e002      	b.n	800495a <_printf_i+0xf2>
 8004954:	0669      	lsls	r1, r5, #25
 8004956:	d5fb      	bpl.n	8004950 <_printf_i+0xe8>
 8004958:	881d      	ldrh	r5, [r3, #0]
 800495a:	2f6f      	cmp	r7, #111	; 0x6f
 800495c:	bf0c      	ite	eq
 800495e:	2308      	moveq	r3, #8
 8004960:	230a      	movne	r3, #10
 8004962:	4852      	ldr	r0, [pc, #328]	; (8004aac <_printf_i+0x244>)
 8004964:	2100      	movs	r1, #0
 8004966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800496a:	6866      	ldr	r6, [r4, #4]
 800496c:	2e00      	cmp	r6, #0
 800496e:	bfa8      	it	ge
 8004970:	6821      	ldrge	r1, [r4, #0]
 8004972:	60a6      	str	r6, [r4, #8]
 8004974:	bfa4      	itt	ge
 8004976:	f021 0104 	bicge.w	r1, r1, #4
 800497a:	6021      	strge	r1, [r4, #0]
 800497c:	b90d      	cbnz	r5, 8004982 <_printf_i+0x11a>
 800497e:	2e00      	cmp	r6, #0
 8004980:	d04d      	beq.n	8004a1e <_printf_i+0x1b6>
 8004982:	4616      	mov	r6, r2
 8004984:	fbb5 f1f3 	udiv	r1, r5, r3
 8004988:	fb03 5711 	mls	r7, r3, r1, r5
 800498c:	5dc7      	ldrb	r7, [r0, r7]
 800498e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004992:	462f      	mov	r7, r5
 8004994:	42bb      	cmp	r3, r7
 8004996:	460d      	mov	r5, r1
 8004998:	d9f4      	bls.n	8004984 <_printf_i+0x11c>
 800499a:	2b08      	cmp	r3, #8
 800499c:	d10b      	bne.n	80049b6 <_printf_i+0x14e>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	07df      	lsls	r7, r3, #31
 80049a2:	d508      	bpl.n	80049b6 <_printf_i+0x14e>
 80049a4:	6923      	ldr	r3, [r4, #16]
 80049a6:	6861      	ldr	r1, [r4, #4]
 80049a8:	4299      	cmp	r1, r3
 80049aa:	bfde      	ittt	le
 80049ac:	2330      	movle	r3, #48	; 0x30
 80049ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049b2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80049b6:	1b92      	subs	r2, r2, r6
 80049b8:	6122      	str	r2, [r4, #16]
 80049ba:	464b      	mov	r3, r9
 80049bc:	4621      	mov	r1, r4
 80049be:	4640      	mov	r0, r8
 80049c0:	f8cd a000 	str.w	sl, [sp]
 80049c4:	aa03      	add	r2, sp, #12
 80049c6:	f7ff fedf 	bl	8004788 <_printf_common>
 80049ca:	3001      	adds	r0, #1
 80049cc:	d14c      	bne.n	8004a68 <_printf_i+0x200>
 80049ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049d2:	b004      	add	sp, #16
 80049d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d8:	4834      	ldr	r0, [pc, #208]	; (8004aac <_printf_i+0x244>)
 80049da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049de:	680e      	ldr	r6, [r1, #0]
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80049e6:	061f      	lsls	r7, r3, #24
 80049e8:	600e      	str	r6, [r1, #0]
 80049ea:	d514      	bpl.n	8004a16 <_printf_i+0x1ae>
 80049ec:	07d9      	lsls	r1, r3, #31
 80049ee:	bf44      	itt	mi
 80049f0:	f043 0320 	orrmi.w	r3, r3, #32
 80049f4:	6023      	strmi	r3, [r4, #0]
 80049f6:	b91d      	cbnz	r5, 8004a00 <_printf_i+0x198>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	f023 0320 	bic.w	r3, r3, #32
 80049fe:	6023      	str	r3, [r4, #0]
 8004a00:	2310      	movs	r3, #16
 8004a02:	e7af      	b.n	8004964 <_printf_i+0xfc>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	f043 0320 	orr.w	r3, r3, #32
 8004a0a:	6023      	str	r3, [r4, #0]
 8004a0c:	2378      	movs	r3, #120	; 0x78
 8004a0e:	4828      	ldr	r0, [pc, #160]	; (8004ab0 <_printf_i+0x248>)
 8004a10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a14:	e7e3      	b.n	80049de <_printf_i+0x176>
 8004a16:	065e      	lsls	r6, r3, #25
 8004a18:	bf48      	it	mi
 8004a1a:	b2ad      	uxthmi	r5, r5
 8004a1c:	e7e6      	b.n	80049ec <_printf_i+0x184>
 8004a1e:	4616      	mov	r6, r2
 8004a20:	e7bb      	b.n	800499a <_printf_i+0x132>
 8004a22:	680b      	ldr	r3, [r1, #0]
 8004a24:	6826      	ldr	r6, [r4, #0]
 8004a26:	1d1d      	adds	r5, r3, #4
 8004a28:	6960      	ldr	r0, [r4, #20]
 8004a2a:	600d      	str	r5, [r1, #0]
 8004a2c:	0635      	lsls	r5, r6, #24
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	d501      	bpl.n	8004a36 <_printf_i+0x1ce>
 8004a32:	6018      	str	r0, [r3, #0]
 8004a34:	e002      	b.n	8004a3c <_printf_i+0x1d4>
 8004a36:	0671      	lsls	r1, r6, #25
 8004a38:	d5fb      	bpl.n	8004a32 <_printf_i+0x1ca>
 8004a3a:	8018      	strh	r0, [r3, #0]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4616      	mov	r6, r2
 8004a40:	6123      	str	r3, [r4, #16]
 8004a42:	e7ba      	b.n	80049ba <_printf_i+0x152>
 8004a44:	680b      	ldr	r3, [r1, #0]
 8004a46:	1d1a      	adds	r2, r3, #4
 8004a48:	600a      	str	r2, [r1, #0]
 8004a4a:	681e      	ldr	r6, [r3, #0]
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4630      	mov	r0, r6
 8004a50:	6862      	ldr	r2, [r4, #4]
 8004a52:	f000 f8d9 	bl	8004c08 <memchr>
 8004a56:	b108      	cbz	r0, 8004a5c <_printf_i+0x1f4>
 8004a58:	1b80      	subs	r0, r0, r6
 8004a5a:	6060      	str	r0, [r4, #4]
 8004a5c:	6863      	ldr	r3, [r4, #4]
 8004a5e:	6123      	str	r3, [r4, #16]
 8004a60:	2300      	movs	r3, #0
 8004a62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a66:	e7a8      	b.n	80049ba <_printf_i+0x152>
 8004a68:	4632      	mov	r2, r6
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	6923      	ldr	r3, [r4, #16]
 8004a70:	47d0      	blx	sl
 8004a72:	3001      	adds	r0, #1
 8004a74:	d0ab      	beq.n	80049ce <_printf_i+0x166>
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	079b      	lsls	r3, r3, #30
 8004a7a:	d413      	bmi.n	8004aa4 <_printf_i+0x23c>
 8004a7c:	68e0      	ldr	r0, [r4, #12]
 8004a7e:	9b03      	ldr	r3, [sp, #12]
 8004a80:	4298      	cmp	r0, r3
 8004a82:	bfb8      	it	lt
 8004a84:	4618      	movlt	r0, r3
 8004a86:	e7a4      	b.n	80049d2 <_printf_i+0x16a>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4632      	mov	r2, r6
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	4640      	mov	r0, r8
 8004a90:	47d0      	blx	sl
 8004a92:	3001      	adds	r0, #1
 8004a94:	d09b      	beq.n	80049ce <_printf_i+0x166>
 8004a96:	3501      	adds	r5, #1
 8004a98:	68e3      	ldr	r3, [r4, #12]
 8004a9a:	9903      	ldr	r1, [sp, #12]
 8004a9c:	1a5b      	subs	r3, r3, r1
 8004a9e:	42ab      	cmp	r3, r5
 8004aa0:	dcf2      	bgt.n	8004a88 <_printf_i+0x220>
 8004aa2:	e7eb      	b.n	8004a7c <_printf_i+0x214>
 8004aa4:	2500      	movs	r5, #0
 8004aa6:	f104 0619 	add.w	r6, r4, #25
 8004aaa:	e7f5      	b.n	8004a98 <_printf_i+0x230>
 8004aac:	08004f3d 	.word	0x08004f3d
 8004ab0:	08004f4e 	.word	0x08004f4e

08004ab4 <_sbrk_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	4d05      	ldr	r5, [pc, #20]	; (8004ad0 <_sbrk_r+0x1c>)
 8004aba:	4604      	mov	r4, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	602b      	str	r3, [r5, #0]
 8004ac0:	f7fb fe0c 	bl	80006dc <_sbrk>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_sbrk_r+0x1a>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_sbrk_r+0x1a>
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	20009490 	.word	0x20009490

08004ad4 <__sread>:
 8004ad4:	b510      	push	{r4, lr}
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004adc:	f000 f8ae 	bl	8004c3c <_read_r>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	bfab      	itete	ge
 8004ae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ae8:	181b      	addge	r3, r3, r0
 8004aea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004aee:	bfac      	ite	ge
 8004af0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004af2:	81a3      	strhlt	r3, [r4, #12]
 8004af4:	bd10      	pop	{r4, pc}

08004af6 <__swrite>:
 8004af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afa:	461f      	mov	r7, r3
 8004afc:	898b      	ldrh	r3, [r1, #12]
 8004afe:	4605      	mov	r5, r0
 8004b00:	05db      	lsls	r3, r3, #23
 8004b02:	460c      	mov	r4, r1
 8004b04:	4616      	mov	r6, r2
 8004b06:	d505      	bpl.n	8004b14 <__swrite+0x1e>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b10:	f000 f868 	bl	8004be4 <_lseek_r>
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	4632      	mov	r2, r6
 8004b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b1c:	81a3      	strh	r3, [r4, #12]
 8004b1e:	4628      	mov	r0, r5
 8004b20:	463b      	mov	r3, r7
 8004b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b2a:	f000 b817 	b.w	8004b5c <_write_r>

08004b2e <__sseek>:
 8004b2e:	b510      	push	{r4, lr}
 8004b30:	460c      	mov	r4, r1
 8004b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b36:	f000 f855 	bl	8004be4 <_lseek_r>
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	bf15      	itete	ne
 8004b40:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b4a:	81a3      	strheq	r3, [r4, #12]
 8004b4c:	bf18      	it	ne
 8004b4e:	81a3      	strhne	r3, [r4, #12]
 8004b50:	bd10      	pop	{r4, pc}

08004b52 <__sclose>:
 8004b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b56:	f000 b813 	b.w	8004b80 <_close_r>
	...

08004b5c <_write_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	2200      	movs	r2, #0
 8004b66:	4d05      	ldr	r5, [pc, #20]	; (8004b7c <_write_r+0x20>)
 8004b68:	602a      	str	r2, [r5, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f7fb fd69 	bl	8000642 <_write>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d102      	bne.n	8004b7a <_write_r+0x1e>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	b103      	cbz	r3, 8004b7a <_write_r+0x1e>
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	bd38      	pop	{r3, r4, r5, pc}
 8004b7c:	20009490 	.word	0x20009490

08004b80 <_close_r>:
 8004b80:	b538      	push	{r3, r4, r5, lr}
 8004b82:	2300      	movs	r3, #0
 8004b84:	4d05      	ldr	r5, [pc, #20]	; (8004b9c <_close_r+0x1c>)
 8004b86:	4604      	mov	r4, r0
 8004b88:	4608      	mov	r0, r1
 8004b8a:	602b      	str	r3, [r5, #0]
 8004b8c:	f7fb fd75 	bl	800067a <_close>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_close_r+0x1a>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_close_r+0x1a>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	20009490 	.word	0x20009490

08004ba0 <_fstat_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	4d06      	ldr	r5, [pc, #24]	; (8004bc0 <_fstat_r+0x20>)
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	4608      	mov	r0, r1
 8004baa:	4611      	mov	r1, r2
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	f7fb fd6f 	bl	8000690 <_fstat>
 8004bb2:	1c43      	adds	r3, r0, #1
 8004bb4:	d102      	bne.n	8004bbc <_fstat_r+0x1c>
 8004bb6:	682b      	ldr	r3, [r5, #0]
 8004bb8:	b103      	cbz	r3, 8004bbc <_fstat_r+0x1c>
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	bd38      	pop	{r3, r4, r5, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20009490 	.word	0x20009490

08004bc4 <_isatty_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	4d05      	ldr	r5, [pc, #20]	; (8004be0 <_isatty_r+0x1c>)
 8004bca:	4604      	mov	r4, r0
 8004bcc:	4608      	mov	r0, r1
 8004bce:	602b      	str	r3, [r5, #0]
 8004bd0:	f7fb fd6d 	bl	80006ae <_isatty>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d102      	bne.n	8004bde <_isatty_r+0x1a>
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	b103      	cbz	r3, 8004bde <_isatty_r+0x1a>
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	20009490 	.word	0x20009490

08004be4 <_lseek_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4604      	mov	r4, r0
 8004be8:	4608      	mov	r0, r1
 8004bea:	4611      	mov	r1, r2
 8004bec:	2200      	movs	r2, #0
 8004bee:	4d05      	ldr	r5, [pc, #20]	; (8004c04 <_lseek_r+0x20>)
 8004bf0:	602a      	str	r2, [r5, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f7fb fd65 	bl	80006c2 <_lseek>
 8004bf8:	1c43      	adds	r3, r0, #1
 8004bfa:	d102      	bne.n	8004c02 <_lseek_r+0x1e>
 8004bfc:	682b      	ldr	r3, [r5, #0]
 8004bfe:	b103      	cbz	r3, 8004c02 <_lseek_r+0x1e>
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	bd38      	pop	{r3, r4, r5, pc}
 8004c04:	20009490 	.word	0x20009490

08004c08 <memchr>:
 8004c08:	4603      	mov	r3, r0
 8004c0a:	b510      	push	{r4, lr}
 8004c0c:	b2c9      	uxtb	r1, r1
 8004c0e:	4402      	add	r2, r0
 8004c10:	4293      	cmp	r3, r2
 8004c12:	4618      	mov	r0, r3
 8004c14:	d101      	bne.n	8004c1a <memchr+0x12>
 8004c16:	2000      	movs	r0, #0
 8004c18:	e003      	b.n	8004c22 <memchr+0x1a>
 8004c1a:	7804      	ldrb	r4, [r0, #0]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	428c      	cmp	r4, r1
 8004c20:	d1f6      	bne.n	8004c10 <memchr+0x8>
 8004c22:	bd10      	pop	{r4, pc}

08004c24 <__malloc_lock>:
 8004c24:	4801      	ldr	r0, [pc, #4]	; (8004c2c <__malloc_lock+0x8>)
 8004c26:	f7ff bb4b 	b.w	80042c0 <__retarget_lock_acquire_recursive>
 8004c2a:	bf00      	nop
 8004c2c:	20009488 	.word	0x20009488

08004c30 <__malloc_unlock>:
 8004c30:	4801      	ldr	r0, [pc, #4]	; (8004c38 <__malloc_unlock+0x8>)
 8004c32:	f7ff bb46 	b.w	80042c2 <__retarget_lock_release_recursive>
 8004c36:	bf00      	nop
 8004c38:	20009488 	.word	0x20009488

08004c3c <_read_r>:
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	2200      	movs	r2, #0
 8004c46:	4d05      	ldr	r5, [pc, #20]	; (8004c5c <_read_r+0x20>)
 8004c48:	602a      	str	r2, [r5, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f7fb fcdc 	bl	8000608 <_read>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d102      	bne.n	8004c5a <_read_r+0x1e>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	b103      	cbz	r3, 8004c5a <_read_r+0x1e>
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	20009490 	.word	0x20009490

08004c60 <_init>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr

08004c6c <_fini>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr
