/*******************************************************************************
        => gdb 高级命令
*******************************************************************************/
//工作环境相关设置
set args 运行时的参数             //指定运行时的参数
                                //如: set args 2
show args                       //查看设置好的运行参数
path dir                        //设定程序运行路径
show paths                      //查看程序的运行路径
set environment var [=value]    //设置环境变量
set var=value                   //修改运行时变量的值
show enviroment [var]           //查看环境变量
cd dir                          //进入到dir目录
pwd                             //显示当前的工作目录
shell command                   //运行shell的command命令

//设置断点和恢复命令
info b                          //查看断点
break(b) 行号或函数名 <条件表达式>  //设置断点
tbreak   行号或函数名 <条件表达式>  //设置临时断点，到达后自动删除
delete   断点号                  //删除指定断点
disable  断点号                  //停止指定断点
enable   断点号                  //激活指定断点
condition [断点号] <条件达式>     //修改对应的断点条件
ignore    [断点号] <num>         //在程序执行中，忽略对应断点 num 次
step(s)                         //单步恢复程序运行（且进入函数调用）
next(n)                         //单步恢复程序运行（且不进入函数调用）
until(u)  行号                  //跳到指定行号
finish                          //运行程序，直到当前函数完成返回
continue(c)                    //继续执行函数，直到函数结束或遇到新的断点

//查看源码相关
list   <行号> | <函数名>      //查看指定位置代码
file   [文件名]              //加载指定文件
forward-search 正则表达式     //源代码向前搜索
reverse-search 正则表达式     //源代码向后搜索
show directories            //显示定义了源文件搜索路径
info line                   //显示加载到 gdb 内存中的代码
disassemble 函数名           //查看指定函数的反汇编代码

//查看运行数据相关命令
print(p)   表达式 | 变量     //查看程序运行时对应的表达式和变量的值
x /<n/f/u> <addr>          //查看内存变量的内容
                           n    为整数，表示显示内存的长度
                           f    表示显示格式（d表示10进制，x表示16进制，t表示2进制，o表示10进制）
                           u    表示从当前地址往后请求显示的字节数
                           addr 表示变量内存的地址
display   表达式            //自动显示对应表达式的内容



/*******************************************************************************
        => gdb 实例
*******************************************************************************/
(gdb) set environment COMPANY=freeysh   //设置（COMPANY）环境变量
(gdb) show environment COMPANY          //显示环境变量的内容
(gdb) show environment PATH
(gdb) pwd



/*******************************************************************************
        => GDB-TUI
*******************************************************************************/
// 打开tui模式(Text User Interface)
  使用"gdbtui -q" 或 "gdb -tui -q"开始一个调试
$ gdbtui -q test_struct
(gdb) ....

___________________________________________________________
$ gcc -gdb3 simple_gdb.c -o simple_gdb
$ gdb simple_gdb 
(gdb) start
"ctrl+x ctrl+a" or "ctrl+x A"

___________________________________________________________
// TUI模式下有4个窗口
command                         命令窗口. 可以键入调试命令
source                          源代码窗口. 显示当前行,断点等信息
assembly                        汇编代码窗口
register                        寄存器窗口
% 除command 窗口外,其他三个窗口不可同时显示.其可用 layout 命令来进行选择
% 自己需要的窗口. 可参见 `help layout`   



/*******************************************************************************
        => GDB指令
*******************************************************************************/
list                     //查看程序源代码
break function          //在某函数的入口设定断点
break 行号               //在指定行添加断点
break 行号 if 条件       //当条件为真时，指定行号处断点生效
info break              //查看断点
delete                  //删除断点
run                     //开始运行程序
next                    //单步运行程序，不进入子函数
step                    //单步运行程序，进入子函数
continue               //继续运行程序
print 变量名             //查看指定变量的值
finish                  //运行程序，直到当前函数结束
display                 //
quit                    //Exit GDB
___________________________________________________________
list                    //显示当前行后面的源程序
list +                  //向后显示源代码							
list -                  //向前显示源代码
list <first> <last>     //显示从 first到last 之间的源代码
list <last>             //显示前行到last之间的源代码
list <linenum>          //显示程序第linenum行周围的源代码
list <function>         //显示函数程序的源代码
show listsize           //查看当前listsize设定
set listsize <count>    //设定一次显示源代码的行数

___________________________________________________________
// print
// <expr>是一个表达式， <f>是输出格式 
print <expr>
print /<f> <expr>

___________________________________________________________
// display
##//<expr>是一个表达式， <fmt>是输出格式 , <addr>表示内存地址
##//当display设定好1个或多个表达式后，只要程序停下来，
##//GDB就会自动显示这此参数

display <expr>
display /<fmt> <expr>
display /<fmt> <addr>
undisplay <dnums>       //删除自动显示，dnums为自动显示编号。
delete display <dnums>  //如果要同时删除多个，可以用空格分隔。
disable diaplay <dnums> //不删除自动显示而是让它失效或恢复。
enable diaplsy <dnums>
info display            //查看display设置的自动显示信息。

___________________________________________________________
// break
break                           //该命令没有参数时，它表示在下一条指令个停止。
break <function>                //在进入指定函数时停止
break <linenum>                 //在指定行号处停止
break +offset                   //在当前行号前面的 offset行处停止 
break -offset                   //在当前行号后面的 offset行处停止 
break file_name : linenum       //在源文件file_name的linenum处停止
break function_name : linenum   //在function_name的linenum处停止
break *address                  //在程序运行的内存处停止 
———————————————————————————————————————————————————————————
//info line后面可以跟，"行号，函数名，文件名:行号，文件名:函数名"
info line                       #
diaassemble                     //查看源程序在当前执行的机器码。
jump <linespec>                 //可以修改程序的执行顺序
singnal <singnal>               //产生1个信号量给被调用程序，singnal取值：1～15   
return <expression>             //强制返回
call <expr>                     //强制调用函数
