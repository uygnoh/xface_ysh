###########################################################
###  捕获变量
###########################################################
% ()小括号有2个功能， 1个是捕获，另一个是分组

% 小括号的捕获功能，捕获变量 
1. \s           表示匹配空白开头的行
2. \w           表示[a-zA-Z0-9_]
3.  +           表示匹配1个到多个单词
4.  ,           表示包含这个符号
5. (/\s(\w+),/  表示它匹配hterc,
6. (\w+)        这个括号，表示它启动了正则表达式的捕获功能
7. (\w+)        表示它把捕获的变量放到$1中
8. $1           表示它把捕获到的变量放入它里面
% 
$_ = "hello hterc, neighbor";
if(/\s(/w+),/){
    print $1;
}


% 让它捕获多个，"Hello there, neighbor"它正好匹配它
% \S表示不包含空白
$_ = "Hello there, neighbor";
if (/(\S+) (\S+), (\S+)/) {
    print "$1 $2 $3";
}



% "I fear that I'll be extinct after 1000 years.";
% 匹配上面的字符串中的数字并打印出来 {匹配数字}
% 运行结果： 1000
my $dino = "I fear that I'll be extinct after 1000 years.";
if($dino =~ /(\d*) years/) {
    print "$1 \n";
}



% 捕获其中的字符
% 运行结果： one two three four
$_ = "one two three four five six";
if(/(\S+) (\S+) (\S+) (\S+)/) {
    print "$1 $2 $3 $4 \n";
}


% 我们只想要它分组， 不要捕获
% ?:它表示只用来分组，不用来作捕获
% 运行结果： two three four five
$_ = "one two three four five six";
if(/(?:\S+) (\S+) (\S+) (\S+)/) {
    print "$1 $2 $3 $4 \n";
}



% 使用特殊变量来作捕获 $1 $2 $3 #n
% 我们用一个绑定表达式，再用一个正则表达式去捕获
% 使用”?:“只作分组，不作捕获
% 运行结果： Fred Barney
my $name = "Fred and Barney";
if ($name =~ m/(\w+) and (\w+)/) {
    print "$1, $2 \n";
}

% 运行结果： Fred Barney
my $name = "Fred and Barney";
if ($name =~ m/(\w+) (?:or|and) (\w+)/) {
    print "$1 $2 \n";
}

% 运行结果： Fred Barney
my $name = "Fred and Barney";
if ($name =~ m/(\w+) (or|and) (\w+)/) {
    print "$1 $3 \n";
}



###########################################################
###  重命明捕获
###########################################################
% 把第1个捕获到的命为name1, 把第2个捕获到的命为name2
% 重命明后它存储在一个特殊的hash中，$+{re_name}格式取出
% print "$1 $2", 重命名的这个变量在一个特殊的哈希里，
% 我们就用 $+{renameN} 取出里面的数据 。
% 运行结果： Fred Barney

my $name = "Fred and Barney";
if ($name =~ m/(?<name1>\w+) (?:or|and) (?<name2>\w+)/) {
    print "$+{name1} $+{name2}";
}



###########################################################
###  重命明用在反向引用的使用
###########################################################
% \g{last_name}反向引用
my $names = "Fred Flinstone and Wilma Flinstone";
if ($name =~ /(?<last_name>\w+) and \w+ \g{last_name}/) {
    print "$+{last_name}\n";
}


% \k<last_name>反向引用
my $names = "Fred Gates and Wilma Gates";
if ($name =~ /(?<last_name>\w+) and \w+ \k<last_name>/) {
    print "$+{last_name}\n";
}


%%  自动变量匹配
% $1        捕获到的是(\w+) 运行结果：three
% $&        捕获到的是/\s(\w+),/ 运行结果： three,
% $'        捕获到之后的字符串
% $`        捕获到之前的字符串    
% $`$&$'    捕获到的是原始的字符串
$_ = "one two three, four five six";
if (/\s(\w+),/) {
    print "$1\n";       # 捕获到小括号中的字符串
    print "$&\n";       # 匹配到的字符串
    print "$'\n";       # 匹配到之后的字符串
    print "$`\n";       # 匹配到之前的字符串  
    print "$`$&$'\n";   # 匹配的是原始的字符串
    print "$`<$&>$'\n"; # 把匹配的部分标识出来
}



###########################################################
###  perl支持的反斜线序列
###########################################################
% 锚定类的反斜线序列
% 所谓锚定，是指它匹配的是位置，而非字符，比如锚定行首的意思是匹配第一个字母前的空字符。
% 也就是很多人说的"零宽断言(zero-width assertions)"。
    \b：匹配单词边界处的空字符
    \B：匹配非单词边界处的空字符
    \<：匹配单词开头处的空字符
    \>：匹配单词结尾处的空字
    \A：匹配绝对行首，换句话说，就是输入内容的开头
    \z：匹配绝对行尾，换句话说，就是输入内容的绝对尾部
    \Z：匹配绝对行尾或绝对行尾换行符前的位置，换句话说，就是输入内容的尾部
    \G：强制从位移指针处进行匹配，详细内容见g和c修饰符以及\G
% 主要解释下\A \z \Z，其它的属于基础正则的内容，不多做解释了。
% \A \z \Z和^ $的区别主要体现在多行模式下。在多行模式下：
$txt = "abcd\nABCD\n";
$txt1 = "abcd\nABCD";

$txt =~ /^ABC*/;   # 无法匹配
$txt =~ /^ABC*/m;  # 匹配

$txt =~ /\Aabc/;   # 匹配
$txt =~ /\Aabc/m;  # 匹配
$txt =~ /\AABC/m;  # 无法匹配

$txt =~ /cd\n$/m;  # 不匹配
$txt =~ /cd$\n/m;  # 不匹配
$txt =~ /cd$/m;    # 匹配

$txt =~ /CD\Z\n/m  # 匹配
$txt =~ /CD\Z\n\Z/m; # 匹配
$txt =~ /CD\n\z/m; # 匹配

$txt1 =~ /CD\Z/m;  # 匹配
$txt1 =~ /CD\z/m;  # 匹配
% 从上面的$匹配示例可知，$代表的行尾，其实它在有换行符的时候匹配"\n"，
% 而不是"\n"的前、后，在没有换行符的时候，匹配行尾。




% 字符匹配反斜线序列
% 当然，除了以下这几种，还有\v \V \h \H \R \p \c \X，这些基本不会用上，所以都不会在本文解释。

    \w：匹配单词构成部分，等价于[_[:alnum:]]
    \W：匹配非单词构成部分，等价于[^_[:alnum:]]
    \s：匹配空白字符，等价于[[:space:]]
    \S：匹配非空白字符，等价于[^[:space:]]
    \d：匹配数字，等价于[0-9]
    \D：匹配非数字，等价于[^0-9]
    \N：不匹配换行符，等价于[^\n]。但\N{NAME}有特殊意义，
     表示匹配已命名(名为NAME)的unicode字符序列，本文不介绍该特殊用法
% 由于元字符.默认无法匹配换行符，所以需要匹配换行符的时候，可以使用特殊组合[\d\D]或者(\n|\N)来替换.，
% 换句话说，如果想匹配任意长度的任意字符，可以换成[\d\D]*或者(\n|\N)*，当然，前提是必须支持这3个反斜线序列。
% 之所以不用[\n\N]替代元字符.，是因为\N有特殊意义，不能随意接符号和字母。




% 分组引用的反斜线序列

    \1          ：反向引用，其中1可以替换为任意一个正整数，即使超出9，例如\111表示匹配第111个分组
    \g1 \g{1}   ：也是反向引用，只不过这种写法可以避免歧义，例如\g{1}11表示匹配第一个分组内容后两个数字1
    \g{-1}      ：还可以使用负数，表示距离\g左边的分组号，也就是相对距离。
                 例如(abc)([a-z])\g{-1}中的\g引用的是[a-z]，如果-1换成-2，则引用的abc
    \g{name}    ：引用已命名的分组(命名捕获)，其中name为分组的名称
    \k<name>    ：同上，引用已命名的分组(命名捕获)，其中name为分组的名称
    \K          ：不要将\K左边的内容放进$&。换句话说，\K左边的内容即使匹配成功了，也会重置匹配的位置

\1表示引用第一个分组，\11表示引用第11个分组，在基础正则中，是不支持引用超出9个分组的，
但显然perl会将\11的第二个1解析为引用，以便能引用更多分组。

同理\g1和\g11，只是使用\g引用的方式可以加上大括号使引用变得更安全，更易读，
且\g可以使用负数来表示从右向左相对引用。这样在\g{-2}的左边添加新的分组括号时，无须修改引用表达式。
此处暂时还没介绍到命名分组，所以\g{name}和\k<name>留在后面再介绍。

\K表示强制中断前面已完成的匹配。例如"abc22ABC" =~ /abc\K2.*/;，
虽然abc三个字母也被匹配，如果没有\K，这3个字母将放进$&中，
但是\K使得匹配完abc后立即切断前面的匹配，也就是从c字母后面开始重新匹配，所以这里匹配的结果是22ABC。
再例如，"abc123abcfoo"=~ /(abc)123\K\g1foo/;，它匹配到123后被切断，
但是分组引用还可以继续引用，所以匹配的结果是"abcfoo"。



###########################################################
###  perl的分组捕获和分组引用
###########################################################
% 分组的基本应用
在基础正则中，使用括号可以对匹配的内容进行分组，这种行为称为分组捕获。
捕获后可以通过\1这种反向引用方式去引用(访问)保存在分组中的匹配结果。
% 例如：
"abc11ddabc11" =~ /([a-z]*)([0-9]*)dd\1\2/;


% 在perl中，还可以使用\gN的方式来反向引用分组，这个在上一节"反斜线序列"中已经解释过了。
% 例如，以下是和上面等价的几种写法：
"abc11ddabc11" =~ /([a-z]*)([0-9]*)dd\g1\g2/;
"abc11ddabc11" =~ /([a-z]*)([0-9]*)dd\g{1}\g{2}/;
"abc11ddabc11" =~ /([a-z]*)([0-9]*)dd\g{-2}\g{-1}/;


% perl还会把分组的内容放进perl自带的特殊变量$1,$2,...,$N中，
% 它们和\1,\2,...\N在匹配成功时的结果上没有区别，
% 但是\N这种类型的反向引用只在正则匹配中有效，正则匹配结束后就消亡了，
% 而$N因为是perl的变量，即使正则已经退出匹配，也依然可以引用。
% 所以，我们可以使用$N的方式来输出分组匹配的结果：
"abc11ddabc11" =~ /([a-z]*)([0-9]*)dd\1\2/;
print "first group \\1: $1\n";
print "second group \\2: $2\n";
% 有两点需要注意：
    这些分组可能捕获到的是空值(比如那些允许匹配0次的量词)，但是整个匹配是成功的。
    这时候引用分组时，得到的结果也将是空值
    
    当分组匹配失败的时候，\1会在识别括号的时候重置，而$1仍保存上一次分组成功的值

% 第一点，示例可知：
"abcde" =~ /([0-9]*)de/;
print "null group: $1\n";


% 第二点，从机制上去分析。\1是每个正则匹配都相互独立的，而$1则保存分组捕获成功的值，即使这次值是上次捕获的。
% 这里稍微解释下正则匹配关于分组捕获的匹配过程：
例如，匹配表达式"12abc22abc" =~ /\d(abc)\d\d\1/;，当正则引擎去匹配数据时：
1.首先匹配第一个数字1，发现符合\d，于是继续用(abc)去匹配字符串，
  因为发现了是分组括号，于是会将第二个字符2放进分组，发现不匹配字母a，于是匹配失败，丢弃这个分组中的内容。
2.正则引擎继续向后匹配数值2，发现符合\d，于是用(abc)去匹配字符串，
  接着会将第三个字符a放进分组，发现能匹配，继续匹配字符串中的b、c发现都能匹配，
  于是分组捕获完成，将其赋值给$1，之后就能用\1和$1去引用这个分组的内容。
3.后面继续去匹配\d\d\1，直到匹配结束。
% 当然，具体匹配的过程不会真的这么简单，它会有一些优化匹配方式，以上只是用逻辑去描述匹配的过程。



% perl中更强大的分组捕获
% 在perl中，支持的分组捕获更强大、更完整，它除了支持普通分组(也就是直接用括号的分组)，还支持：

    命名捕获(?<NAME>...)：捕获后放进一个已分配好名称(即NAME)的分组中，
    以后可以使用这个名称来引用这个分组，如\g{NAME}引用
    
    匿名捕获(?:...)：仅分组，不捕获，所以后面无法再引用这个捕获
    固化分组(?>...)：一匹配成功就永不交回内容(用回溯的想法理解很容易)

% 匿名捕获(?:...)
% 匿名捕获是指仅分组，不捕获。因为不捕获，所以无法使用反向引用，也不会将分组结果赋值给$1这种特殊变量
如果使用匿名捕获，对and和or这样无关紧要，却有可能改变匹配行为的内容，可以将其放进一个无关的分组中。
这样不会对原有的其余正则表达式产生任何影响：
$str = "xiaofang or longshuai";
if ($str =~ /(\w+) (?:or|and) (\w+)/){
    print "name1: $1, name2: $2\n";
}
% 注意上面仍然使用$2引用第三个括号。
% 同样，如果要在正则内部使用反向引用，也一样使用\2来引用第三个括号。
另外，在前文还介绍过一个n修饰符，它也表示非捕获仅分组行为。但它只对普通分组有效，对命名分组无效。
且因为它是修饰符，它会使所有的普通分组都变成非捕获模式。
$str = "xiaofang or longshuai";
if ($str =~ /(\w+) (or|and) (\w+)/n){
    print "name1: $1, name2: $2\n";
}
% 由于上面开启了n修饰符，使得3个普通分组括号都变成非捕获仅分组行为，所以\1和$1都无法使用。除非正则中使用了命名分组。




% 命名捕获
% 命名捕获是指将捕获到的内容放进分组，这个分组是有名称的分组，
% 所以后面可以使用分组名去引用已捕获进这个分组的内容。
% 除此之外，和普通分组并无区别。
当要进行命名捕获时，使用(?<NAME>)的方式替代以前的分组括号()即可。
例如，要匹配abc并将其分组，以前普通分组的方式是(abc)，
如果将其放进命名为name1的分组中：(?<name1>abc)。
当使用命名捕获的时候，要在正则内部引用这个命名捕获，除了可以使用序号类的绝对引用(如\1或\g1或\g{1})，
% 还可以使用以下任意一种按名称引用方式：
    \g{NAME}
    \k{NAME}
    \k<NAME>
    \k'NAME'
% 如果要在正则外部引用这个命名捕获，除了可以使用序号类的绝对应用(如$1)，还可以使用$+{NAME}的方式。
% 实际上，后一种引用方式的本质是perl将命名捕获的内容放进了一个名为%+的特殊hash类型中，
% 所以可以使用$+{NAME}的方式引用，如果你不知道这一点，那就无视与此相关的内容即可，不过都很简单，一看就懂。
例如：
$str = "ma xiaofang or ma longshuai";
if ($str =~ /
            (?<firstname>\w+)\s  # firstname -> ma
            (?<name1>\w+)\s      # name1 -> xiaofang
            (?:or|and)\s         # group only, no capture
            \g1\s                # \g1 -> ma
            (?<name2>\w+)        # name2 -> longshuai
            /x){
    print "$1\n";
    print "$2\n";
    print "$3\n";
    # 或者指定名称来引用
    print "$+{firstname}\n$+{name1}\n$+{name2}\n";
}
% 其中上述代码中的\g1还可以替换为\1、\g{firstname}、\k{firstname}或\k<firstname>
% 通过使用命名捕获，可以无视序号，直接使用名称即可准确引用




% 固化分组
首先固化分组不是一种分组，所以无法去引用它。
它和"占有优先"匹配模式(贪婪匹配、惰性匹配、占有优先匹配三种匹配模式，见后文)是等价的除了这两种称呼，
在不同的书、不同的语言里还有一种称呼：原子匹配。

它的表示形式类似于分组(?>)，所以有些地方将其称呼为"固化分组"。
再次说明，固化分组不是分组，无法进行引用。如果非要将其看作是分组，
可以将其理解为被限定的匿名分组：不捕获，只分组。
    按照"占有优先"的字面意义来理解比较容易：只要匹配成功了，就绝不回溯。
    如果按照固化分组的概念来理解，就是将匹配成功的内容放进分组后，将其固定，
    不允许进行回溯。但是需要注意，这里的不回溯是放进分组中的内容不会回溯给分组外面，而分组内部的内容是可以回溯的。
% 如果不知道什么是回溯，看完下面的例子就明白。

% 例如"hello world"可以被hel.* world成功匹配，但不能被hel(?>.*) world匹配。
% 因为正常情况下，.*匹配到所有内容，然后往回释放已匹配的内容直到释放完空格为止，
% 这种往回释放字符的行为在正则术语中称为"回溯"。而固化分组后，.*已匹配后面所有内容，
% 这些内容一经匹配绝不交回，即无法回溯。
但是，如果正则表达式是hel(?>.* world)，即将原来分组外面的内容放进了分组内部，
这时在分组内部是会回溯的，也就是说能匹配"hello world"。

$str="ma longshuai gao xiaofang";
if($str =~ /ma (?>long.*)/){     # 成功
    print "matched\n";
}

if($str =~ /ma (?>long.*)gao/){   # 失败
    print "matched\n";
}

if($str =~ /ma (?>long.*gao)/){   # 成功
    print "matched\n";
}

if($str =~ /ma (?>long.*g)ao/){   # 成功
    print "matched\n";
}
% 固化分组看上去挺简单的，此处也仅介绍了它最简单的形式。但实际上固化分组很复杂，
% 它涉及了非常复杂的正则引擎匹配原理和回溯机制。如果有兴趣，可以阅读《精通正则表达式》一书的第四章。




###########################################################
###  环视锚定(断言)
###########################################################
% "环视"锚定，即lookaround anchor，也称为"零宽断言"，它表示匹配的是位置，不是字符。
(?=...)     ：表示从左向右的顺序环视。例如(?=\d)表示当前字符的右边是一个数字时就满足条件
(?!...)     ：表示顺序环视的取反。如(?!\d)表示当前字符的右边不是一个数字时就满足条件
(?<=...)    ：表示从右向左的逆序环视。例如(?<=\d)表示当前字符的左边是一个数字时就满足条件
(?<!)...    ：表示逆序环视的取反。如(?<!\d)表示当前字符的左边不是一个数字时就满足条件
% 关于"环视"锚定，最需要注意的一点是匹配的结果不占用任何字符，它仅仅只是锚定位置。

% 例如"your name is longshuai MA"和"your name is longfei MA"。
使用(?=longshuai)将能锚定第一个句子中单词"longshuai"前面的空字符，
但它的匹配结果是"longshuai"前的空白字符，所以(?=longshuai)long才能代表"long"这几个字符串，
% 所以仅对于此处的两个句子，long(?=shuai)和(?=longshuai)long是等价的。

% 一般为了方便理解，在顺序环视的时候会将匹配内容放在锚定括号的左边(如long(?=longshuai))，
在逆序环视的时候会将匹配的内容放在锚定括号的右边(如(?<=long)shuai)。
另外，无论是哪种锚定，都是从左向右匹配再做回溯的(假设允许回溯)，即使是逆序环视。
例如：
$str="abc123abcc12c34";

# 顺序环视
$str =~ /a.*c(?=\d)/;     # abc123abcc12c
print "$&\n";

# 顺序否定环视
$str =~ /a.*c(?!\d)/;     # abc123abc
print "$&\n";

# 逆序环视，这里能逆序匹配成功，靠的是锚定括号后面的c
$str =~ /a.*(?<=\d)c/;    # abc123abcc12c
print "$&\n";

# 逆序否定环视
$str =~ /a.*(?<!\d)c/;    # abc123abcc
print "$&\n";

逆序环视的表达式必须只能表示固定长度的字符串。
例如(?<=word)或(?<=word|word)可以，但(?<=word?)不可以，
因为?匹配0或1长度，长度不定，它无法对左边是word还是wordx做正确判断。
$str="hello worlds Gaoxiaofang";
$str =~ /he.*(?<=worlds?) Gao/;         # 报错
$str =~ /he.*(?<=worlds|world) Gao/;    # 报错
% 在PCRE中，这种变长的逆序环视锚定可重写为(?<=word|words)，但perl中不允许，因为perl严格要求长度必须固定。





###########################################################
###  \Q...\E
###########################################################

% perl中的\Q...\E用来强制包围一段字符，使得里面的正则符号都当做普通字符，
% 不会有特殊意义，它是一种非常强的引用。但注意，它无法强制变量的替换。
$sub="world";
$str="hello worlds gaoxiaofang";
$str =~ /\Q$sub\E/;  # $sub会替换，所以匹配成功world
$str =~ /\Q$sub.\E/; # 元字符"."被当做普通的字符，所以无法匹配





###########################################################
###  qr//创建正则对象
###########################################################
% 因为可以在正则模式中使用变量替换，
% 所以我们可以将正则中的一部分表达式事先保存在变量中。例如：
$str="hello worlds gaoxiaofang";
$pattern="w.*d";
$str =~ /$pattern/;
print "$&\n";
% 但是，这样缺陷很大，在保存正则表达式的变量中存放的特殊字符要防止有特殊意义。
% 例如，当使用m//的方式做匹配分隔符时，不能在变量中保存/，除非转义



% perl提供了qr/pattern/的功能，它把pattern部分构建成一个正则表达式对象，然后就可以：
    在正则表达式中直接引用这个对象
    可以将这个对象保存到变量中，通过引用变量的方式来引用这个已保存好的正则对象
    将引用变量插入到其它模式中构建更复杂的正则表达式
% 其中：qr//的定界符斜线可以替换为其它符号
    例如对称的括号类 qr() qr{} qr<> qr[]，
    一致的符号类   qr%% qr## qr!! qr$$ qr"" qr''等
    +
    但是使用单引号作为定界符时比较特殊(即qr'pattern')，
    它会将pattern部分使用单引号的方式去解析，
    例如变量$var无法替换，而是表示4个字符。
    但是正则表达式的元字符仍然起作用，例如$仍然表示行尾。




% $str="hello worlds gaoxiaofang";
% 直接作为正则表达式
$str =~ qr/w.*d/;
print "$&\n";
% 保存为变量，再作为正则表达式
$pattern=qr/w.*d/;
$str =~ $pattern;    # (1)
$str =~ /$pattern/;  # (2)
print "$&\n";
%保存为变量，作为正则表达式的一部分
$pattern=qr/w.*d/;
$str =~ /hel.* $pattern/;
print "$&\n";





% 还允许为这个正则对象设置修饰符，比如忽略大小写的匹配修饰符为i，
% 这样在真正匹配的时候，就只有这一部分正则对象会忽略大小写，其余部分仍然区分大小写。
$str="HELLO wORLDs gaoxiaofang";
$pattern=qr/w.*d/i;         # 忽略大小写
$str =~ /HEL.* $pattern/;   # 匹配成功，$pattern部分忽略大小写
$str =~ /hel.* $pattern/;   # 匹配失败
$str =~ /hel.* $pattern/i;  # 匹配成功，所有都忽略大小写




% qr如何构建正则对象
% 输出qr构建的正则引用，看看是怎样的结构：
$patt1=qr/w.*d/;
print "$patt1\n";
$patt2=qr/w.*d/i;    # 加上修饰符i
print "$patt2\n";
$patt3=qr/w.*d/img;  # 加上修饰符img
print "$patt3\n";
% 上面的print将输出如下结果：
(?^:w.*d)
(?^i:w.*d)
(?^mi:w.*d)

qr的作用实际上就是在我们给定的正则pattern基础上加上(?^:)并带上一些修饰符，得到的结果总是(?^FLAGS:pattern)。

但是上面patt3的修饰符g不见了。先可以看看(?^:)的作用：非捕获分组，并重置修饰符。
重置为哪些修饰符？对于(?^FLAGS:)来说，只有这些修饰符"alupimsx"是可用的，即(?^alupimsx:)：

    如果给定的修饰符不在这些修饰符内，则不被识别，有时候会报错
    如果给定的修饰符属于这几个修饰符，那么没有给定的修饰符部分将采用默认值(不同版本可能默认是否开启的值不同)



% 所以上面的g会被丢弃，甚至在进一步操作这个正则引用时，会报错。
% 既然qr给pattern部分加上了(?^:)，那么当它们插入到其它正则中的时候，
% 就能保证这一段是独立的，不受全局修饰符影响的模式。
$patt1=qr/w.*d/im;
$patt2=qr/hel.*d $patt1/i;
print "$patt2\n";     # 输出：(?^i:hel.*d (?^mi:w.*d))





% 正则引用作为标量的用法
既然qr//创建的正则对象引用是一个标量，那么标量可以出现的地方，
正则引用就可以出现。例如，放进hash结构，数组结构。
例如，放进数组中形成一个正则表达式列表，然后给定一个待匹配目标，依次用列表中的这些模式去匹配。
use v5.10.1;
my @patterns = (
    qr/(?:Willie )?Gilligan/,
    qr/Mary Ann/,
    qr/Ginger/,
    qr/(?:The )?Professor/,
    qr/Skipper/,
    qr/Mrs?. Howell/,
);

my $name = 'Ginger';
foreach my $pattern (@patterns) {
    if( $name =~ /$pattern/ ) {
        say "Match!";
        print "$pattern";
        last;
    }
}



% 还可以将这些正则引用放进hash中，为每个pattern都使用key来标识一下，
例如pattern1是用来匹配什么的：
use v5.10.1;
my %patterns = (
    Gilligan => qr/(?:Willie )?Gilligan/,
    'Mary Ann' => qr/Mary Ann/,
    Ginger => qr/Ginger/,
    Professor => qr/(?:The )?Professor/,
    Skipper => qr/Skipper/,
    'A Howell' => qr/Mrs?. Howell/,
);
my $name = 'Ginger';
my( $match ) = grep { $name =~ $patterns{$_} } keys %patterns;
say "Matched $match" if $match;
% 上面将grep语句的结果赋值给了一个标量，
% 所以如果有多个Pattern能匹配$name，多次执行，$match的值将可能会不一样。




% 构建复杂的正则表达式
有了qr，就可以将正则表达式细化成一小片一小片，然后组合起来。例如：
my $howells = qr/Thurston|Mrs/;
my $tagalongs = qr/Ginger|Mary Ann/;
my $passengers = qr/$howells|$tagalongs/;
my $crew = qr/Gilligan|Skipper/;
my $everyone = qr/$crew|$passengers/;
% 就像RFC 1738中对URL各个部分的解剖，如果转换成Perl正则，大概是这样的(了解即可)：
# 可复用的基本符号类
my $alpha = qr/[a-z]/;
my $digit = qr/\d/;
my $alphadigit = qr/(?i:$alpha|$digit)/;
my $safe = qr/[\$_.+-]/;
my $extra = qr/[!*'\(\),]/;
my $national = qr/[{}|\\^~\[\]`]/;
my $reserved = qr|[;/?:@&=]|;
my $hex = qr/(?i:$digit|[A-F])/;
my $escape = qr/%$hex$hex/;
my $unreserved = qr/$alpha|$digit|$safe|$extra/;
my $uchar = qr/$unreserved|$escape/;
my $xchar = qr/$unreserved|$reserved|$escape/;
my $ucharplus = qr/(?:$uchar|[;?&=])*/;
my $digits = qr/(?:$digit){1,}/;

# 可复用的URL组成元素
my $hsegment = $ucharplus;
my $hpath = qr|$hsegment(?:/$hsegment)*|;
my $search = $ucharplus;
my $scheme = qr|(?i:https?://)|;
my $port = qr/$digits/;
my $password = $ucharplus;
my $user = $ucharplus;

my $toplevel = qr/$alpha|$alpha(?:$alphadigit|-)*$alphadigit/;
my $domainlabel = qr/$alphadigit|$alphadigit(?:$alphadigit|-)*$alphadigit/x;
my $hostname = qr/(?:$domainlabel\.)*$toplevel/;
my $hostnumber = qr/$digits\.$digits\.$digits\.$digits/;
my $host = qr/$hostname|$hostnumber/;
my $hostport = qr/$host(?::$port)?/;
my $login = qr/(?:$user(?::$password)\@)?/;

my $urlpath = qr/(?:(?:$xchar)*)/;


% 然后我们就可以用上面看上去无比复杂的正则表达式去匹配一个路径是否是合格的http url：
use v5.10.1;
my $httpurl = qr|$scheme$hostport(?:/$hpath(?:\?$search)?)?|;
while( <> ) {
    say if /$httpurl/;
}



