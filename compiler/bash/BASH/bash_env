###########################################################
### bash位置参数变量
###########################################################
$n      n为数字,$0 代表命令本身. $1~$9 代表第一到第九个参数
        10以上需要用大括号包含.例如: ${10}
$*      这个变量代表命令中的所有的参数$*把所有的参数都看成一个整体
$@      这个变量也代表命令中的所有的参数$@把每个参数区别对待
$#      这个变量代表命令行中多有参数的个数



###########################################################
### bash预定义变量
###########################################################
$?      最后一次命令执行的返回状态
$$      表示当前 shell 进程的 PID
$!      shell 最后一次运行后台进程的 PID



###########################################################
### bash环境设置
###########################################################
LANG=C      %设置英文环境       

% BASH命令的执行顺序
1.以绝对路径或相对路径执行指令.例如:	/bin/ls	或 ./ls
2.有命令别名(alial)找到该指令来执行
3.由 bash 内置的指令来执行
4.通过 PATH 这个变量的顺序搜寻到的第 1 个指令来执行

% ｓｏｕｒｃｅ作用:在当前bash环境下读取并执行FileName中的命令。
% 注：该命令通常用命令“.”来替代。
% source命令与shell scripts的区别是，
% source在当前bash环境下执行命令，
% 而scripts是启动一个子shell来执行命令。
% 这样如果把设置环境变量（或alias等等）的命令写进scripts中，
% 就只会影响子shell,无法改变当前的BASH,
% 所以通过文件（命令列）设置环境变量时，要用source 命令。
source ~/.bashrc	不用退出系统,就可以使设定的环境变量生效
.      ~/.bashrc    不用退出系统,就可以使设定的环境变量生效
~/.bash_history		历史命令资料库
~/.bash_logout

% bash配置文件执行过程 
/etc/profile _______→ ~/.bash_profile	 _______→ 开始操作 bash
       ↧                 ↧
/etc/profile/*.sh	~/.bashrc
        ↧                 ↧
/etc/locale.conf	/etc/bashrc


% 设置bash环境命令
cat /etc/shells         系统合法的shell
history                 系统历史命令查看
tab                     键命令与文件补全功能
alias                   查询别名
alial 命令别名='原命令'   命令别名设定
type ls                 查询命令是否为 bash shell 的内置命令
env                     查看环境变量
set                     查看所有变量,包括环境变量
declare                 设置环境变量
typeset                 设置环境变量
locale                  影响显示系统语言的变量
PS1                     提示字段
ulimit                  文件系统及调试程序的限制关系



###########################################################
### bash环境变量设置
###########################################################
% declare [+/-][rxi][变量名称＝设置值] 或 declare -f
+/-                     "-"可用来指定变量的属性，"+"则是取消变量所设的属性。
r                       将变量设置为只读。
x                       指定的变量会成为环境变量，可供shell以外的程序来使用。
i                       [设置值]可以是数值，字符串或运算式。
-f                      仅显示函数
-F					    显示函数内容


% export [-fnp][变量名称]=[变量设置值]
% export命令的功能跟 declare功能部分重合；
% export WWC="wangwenchao" 相当于 declare -x WWC="wangwenchao"; 
% 功能export -n WWC 相当于 declare +x WWC; 
% 功能export查看导出的环境变量
-f                  代表[变量名称]中为函数名称。
-n                  删除指定的变量。变量实际上并未删除，
                    只是不会输出到后续指令的执行环境中。
-p                  列出所有的shell赋予程序的环境变量 


% nohup 命令是 no hanp up 的缩写。
% Unix/Linux下一般想让某个程序在后台运行，
% 很多都是使用 & 在程序结尾来让程序自动运行；
% 但如果要想在退出终端后，
% 程序依然还在后台运行，则要用 nohup与& 组合来实现。
% nohup用法: nohup Command [ Arg ... ] [&]
nohub gedit main.c & 
    

% type命令用来显示指定命令的类型，判断给出的指令是内部指令还是外部指令。
用法
    -t：输出“file”、“alias”或者“builtin”，
        分别表示给定的指令为“外部指令”、“命令别名”或者“内部指令”；
    -p：如果给出的指令为外部指令，则显示其绝对路径；
    -a：在环境变量“PATH”指定的路径中，显示给定指令的信息，包括命令别名。
    
结果_________________________________________________________
alias                           别名
keyword                         关键字，Shell保留字。
function                        函数，Shell函数。
builtin                         内建命令，Shell内建命令。
file                            文件，磁盘文件，外部命令。
unfound                         没有找到。



###########################################################
### bash内建命令
###########################################################
内部命令实际上是shell程序的一部分，其中包含的是一些比较简单的linux系统命令，
这些命令由shell程序识别并在shell程序内部完成运行，
通常在linux系统加载运行时shell就被加载并驻留在系统内存中。
内部命令是写在bash源码里面的，其执行速度比外部命令快，因为解析内部命令shell不需要创建子进程。
比如：exit，history，cd，echo等。
有些命令是由于其必要性才内建的，例如cd用来改变目录，
read会将来自用户（和文件）的输入数据传给Shell外亮。另一种内建命令的存在则是为了效率，
其中最典型的就是test命令，编写脚本时经常会用到它。另外还有I/O命令，
例如echo于printf.



###########################################################
### bash外部命令
###########################################################
外部命令是系统中的实用程序部分，因为实用程序的功能通常都比较强大，所以其包含的程序量也会很大
在系统加载时并不随系统一起被加载到内存中，而是在需要时才将其调用内存。
通常外部命令的实体并不包含在shell中，但是其命令执行过程是由shell程序控制的。
shell程序管理外部命令执行的路径查找、加载存放，并控制命令的执行。
外部命令是在bash之外额外安装的，通常放在/bin，/usr/bin，/sbin，/usr/sbin......等等。
可通过“echo $PATH”命令查看外部命令的存储路径，比如：ls、vi等。
外部命令就是由Shell副本（新的进程）所执行的命令，基本的过程如下：
    1 建立一个新的进程。此进程即为Shell的一个副本。
    2 在新的进程里，在PATH变量内所列出的目录中，寻找特定的命令。
      /bin:/usr/bin:/usr/X11R6/bin:/usr/local/bin为PATH变量典型的默认值。
      当命令名称包含有斜杠（/）符号时，将略过路径查找步骤。      
    3 在新的进程里，以所找到的新程序取代执行中的Shell程序并执行。
    4 程序完成后，最初的Shell会接着从终端读取下一条命令，
      和执行脚本里的下一条命令。      
用户在命令行输入命令后，
一般情况下Shell会fork并exec该命令，但是Shell的内建命令例外，
执行内建命令相当于调用Shell进程中的一个函数，并不创建新的进程.
PS:为了实现强大的功能，有些内建命令也有了外部命令实现的版本，
这些外部命令往往比对应的内部命令功能更强大，
但是相对效率可能会低（例如：cd、echo等）；同样一些外部命令为了执行效力的问题，
在内建命令中也有了实现（例如：printf）；如果一个命令既有内部实现又有外部实现，
直接使用使用的是其内部版本，要想使用其外部实现，可以使用绝对路径，
比如：echo是使用的其内部命令，/bin/echo是使用的其外部命令，
查看一个外部命令的路径，可以使用 which 命令，
例如which echo
/dev/null               垃圾桶



