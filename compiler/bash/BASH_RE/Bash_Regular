###########################################################
###  BASH Regular Expression
###########################################################

____________________________________________________________
.               匹配除了换行符外的任意 1个字符
____________________________________________________________
*               表示前面1个字符匹配0次或任意多次(aa* 匹配一个a)
____________________________________________________________
\               转义字符
____________________________________________________________
?               表示前面1个字符匹配0次或1次
____________________________________________________________
+               表示前面1个字符匹配1次或任意多次
____________________________________________________________
|               表示或关系
____________________________________________________________

[]              匹配中括号中任意 1个字符
____________________________________________________________
[^ ]            匹配除中括号指定的任意 1个字符([^0-9])
____________________________________________________________
\{n\}           表示其前面字符正好出现n次
                [0-9]\{4\} 匹配4位数字
____________________________________________________________           
\{n,\}          表示其前面数字出现不小于n次
                [0-9]\{2,\} 匹配2位以上数字
____________________________________________________________       
\{n,m\}         表示其前面字符出现至少n次，最多出现m次
                [a-z]\{6,8\} 匹配6到8位小写字母
                
                

###########################################################
###  位置锚定
###########################################################
^               匹配行首.例如: ^hello 匹配以hello开头的行
$               匹配行尾.例如: hello$ 匹配以hello结尾的行
^$              匹配空白行
^[[:space:]]*$  就是匹配N个空格，所以就是空白行 
\<              词首锚定，用于单词模式的左侧
\>              词尾锚定，用于单词模式的右侧
\<PATTERN\>     单词锚定，匹配整个单词，用于单词两侧。



###########################################################
###  分组机制
###########################################################
\(\)    将一个或多个字符捆绑在一起，当做一个整体时行处理。
        后向引用：引用前面分组括号中的模式所匹配到的字符(而不是模式本身)
Note：  分组括号中的模式所匹配到的内容会被正则表左式引擎记录于内部变量中，
        这些变量的命明方式为：\1, \2, \3, ...
        
        
        
###########################################################
###  bash 特殊符号 
###########################################################
\               转义符
|               管道符
;               连续命令分割符
$               调用变量的值
&               工作台控制(job control),将命令放入后台执行
/               路径分割符
> >>            文件输出重定向,分别代表 覆盖和追加
< <<            文件输入重定向,分别代表 覆盖和追加
' '             单引号,不具备变量置换功能(单引号会把里面的内容原样输出)
" "             双引号,具有变量置换功能, $可保留相关功能
` `             反引号,它的中间为可执行指令.
$()             与反引号功能一样,用于调用系统命令
{}              中间为命令块的组合.
()              中间为 shell 的起始和结束
~               使用者的家目錄
!               邏輯運算意義上的非,not 的意思！

% 特殊符號       代表意義
[:alnum:]       字母和数字,可以用来替代'a-z, A-Z, 0-9' 
[:alpha:]       字母，可以用来替代'a-z, A-Z' 
[:blank:]       代表空白鍵 與[Tab] 按鍵兩者
[:cntrl:]       代表鍵盤上面的控制按鍵，亦即包括 CR, LF, Tab, Del.. 等等 
[:digit:]       数字,可以用来替代'0-9' 
[:graph:]       图形字符 
[:lower:]       小写字母,可以用来替代'a-z' 
[:print:]       可打印字符 
[:punct:]       代表標點符號 (punctuation symbol)，亦即：" ' ? ! ; : # $... 
[:space:]       空白字符, 包括空白鍵, [Tab], CR 等等
[:upper:]       大写字母,可以用来替代'A-Z' 
[:xdigit:]      十六进制字符, 因此包括： 0-9, A-F, a-f 的數字與字元
___________________________________________________________
  \\        	反斜杠
  \a        	终端鸣响
  \b        	退格
  \f        	换页
  \n        	换行
  \r        	回车
  \t        	水平制表符
  \v        	垂直制表符
  \0        	null字符
  



###########################################################
###  元字符和集合
########################################################### 
___________________________________________________________
            正则表达式的特殊字符(元字符)6个元字符

	            . 	* 	[	\ 	^ 	$
	            
	            
___________________________________________________________
转义字符(\), 正则表达式\*与字符串*匹配,与字符串\*不匹配
转义字符后除以上六种之外的不该出现其他字符,例如:不该出现\u,这样
的组合被视为undefined(未定义的),后出的软件有可能会有特殊的解释


	            \. \* \$ \^ \[ \\


	

___________________________________________________________	
                单字符正则表达式:定义集合(1)
                                
基本用法
在一对方括号之间的字符为集合的内容,
	如:单字符正则表达式[abcd]与a或b,c,d匹配
圆点,星号,反斜线在方括号内时,代表它们自己
	如:[\*.]可匹配3个单字符



___________________________________________________________
                单字符正则表达式:定义集合(2)
                
用减号-定义一个区间
	如[a-d] [A-Z] [a-zA-Z0-9]
	[][] 集合含左右中括号两个字符
	减号在最后,则失去表示区间的意义
	[ad-]只与3个字符匹配

用^表示补集
	^在开头,则表示与集合内字符之外的任意字符匹配
	如:[^a-z]匹配任一非小写字母
	[^][]匹配任一非中括号字符

^不在开头,则失去其表示补集的意义
	如:[a-z^]能匹配27个单字符
	
	

###########################################################	
###  组合与锚点 
###########################################################

_________________________________________________
                    单字符正则表达式的组合(1)
串结
	如abc, [A-Z].[0-9]·
	
	
_________________________________________________
                        星号(*)
                        
                        
单字符正则表达式后跟*,匹配此单字符正则表达式的0次或任意多次出现
例:正则表达式12*4
% 与字符串1234不匹配,与1224,12224,14匹配
	
	
	
_________________________________________________	
                正则表达式[A-Z][0-9]*


此例中*作用的单字符正则表式为[0-9],
代表
[A-Z]
[A-Z][0-9]
[A-Z][0-9][0-9]
[A-Z][0-9][0-9][0-9],等等匹配

% 与A,A1,C45,D768匹配,与b64512,T56t不匹配


_________________________________________________
                单字符正则表达式的组合(2)
                
                
例:正则表达式[Cc]hapter *[1-4]
	在*号前有一个空格,允许数字1-4之前有多个或者0个空格。可匹配
	Chapter2, chapter 3等等。
例:正则表达式a\[i] *= *b\[j] *\* *c\[k]
	匹配字符串a[i]=b[j]*c[k],容许等号和星号两侧有空格
例:在vi中使用
	:1,$s/[0-9]*/xx/g



_________________________________________________
                    锚点:$与^
                    

$ 在尾部时有特殊意义,否则与其自身匹配
	例:123$ 匹配文件中行尾的123,不在行尾的123字符不匹配
	例:$123与字符串$123匹配
	例:.$ 匹配行尾的任意字符
	
^ 在首部时有特殊意义,否则与其自身匹配
	例:^printf匹配行首的printf字符串,不在行首的printf串不匹配
	例:Hel^lo与字符串Hel^lo匹配
	例:在vi中使用 :10,50s/^//g
	删除10-50行的每行行首的4个空格	
	
	

###########################################################	
####   正则表达式扩展
###########################################################
ERE:扩展的正则表达式(ERE)
PCRE: Perl-compatible regular expression
___________________________________________________________
            对基本正则表达式( BRE )进行了改进:

()                  # 表示分组:
|				    # 表示逻辑运算:表示逻辑“或” 的符号 
(xy)*               # 可匹配空字符串,xy,xyxy,xyxyxy
(pink|green)        # 与pink或green匹配
\{m,n\}	            # 重复次数定义:与星号地位类似的+和?,限定重复次数 
*                   # 号表示它左边的单字符正则表达式的0次或多次重复
+                   # 号表示1次或多次: [0-9]+ 匹配长度至少为1数字串
?                   # 表示0次或一次: a?匹配零个或一个a	 
[1-9][0-9]\{6,8\}   # [限定重复次数 \{m,n\}]; 匹配6～8位数字

    

###########################################################
###  grep
###########################################################
% grep在文件中查找字符串, grep(Global regular expression print)
% 语法: grep 模式 文件名列表
举例
grep O_RDWR *.h
ps -ef | grep liang
ls -l / | grep '^d' | wc –l
grep '[0-9]*' shudu.c
grep '[0-9][0-9]*' shudu.c


% egrep 使用扩展正则表达式ERE描述模式,在指定模式方面比grep更灵活, 
% fgrep 快速搜索指定字符串,按字符串搜索而不是按模式搜索。
% grep选项, 查PCRE语法:man pcresyntax
-F, --fixed-strings  Fixed strings (instead of regular expressions)
-G, --basic-regexp   Basic regular expression (BRE)
-E, --extended-r     egexp Extended regular expression (ERE)
-P, --perl-regexp    Perl-compatible regular expression (PCRE)

% grep/fgrep/egrep选项
-n 显示时每行前面显示行号
-v 显示所有不包含模式的行
-i 字母比较时忽略字母的大小写
例:grep -n main *.c
查找含有正则表达式main的行,并打印行号
当文件数超过一个时,除了输出行号,还输出文件名

例: grep -v '[Dd]isable' dev.stat>dev.active
取消文件中所有含有指定模式的行,生成新文件

例:grep -i richard telnos
在文件中检索字符串richard,不顾字母的大小写



###########################################################
###  sed, 流编辑
###########################################################

sed '命令' 文件名列表
sed –e '命令1' –e '命令2' –e '命令3' 文件名列表
sed -f 命令文件 文件名列表


tail -f pppd.log | sed 's/145\.37\.23\.26/桥西/g'
tail -f pppd.log | sed -f sed.cmd

% 其中 sed.cmd 文件
s/145\.37\.23\.26/桥西/g
s/102\.157\.23\.109/柳荫街/g
s/145\.37\.123\.57/大山子/g
cat pm.txt | sed ‘s/\[[^][]*]//g’


sed:正则表达式替换
模式描述中增加\(和\)
在正则表达式中圆括号,仍然代表它自身,在正则表达式中出现的\(和\)不影响匹配操作
[a-zA-Z_][a-zA-Z0-9_]*->number
\([a-zA-Z_][a-zA-Z0-9_]*\)->number

% 替换字符串中的 \0 \1 \2 ......

举例
s/\([a-zA-Z_][a-zA-Z0-9_]*\)->number/\1->num/g

将日期格式“月-日-年”改为“年.月.日”,
比如:将 04-26-1997替换为1997.04.26使用命令:
s/\([0-9][0-9]\)-\([0-9][0-9]\)-\([0-9][0-9]*\)/\3.\1.\2/g

生成文件改名的命令
[快视频www.kuai-vdo.com]-电视剧《三国演义》中文字幕_1080p高清_央视1994版-69.rmvb
sed 's/.*-\([0-9][0-9]\).rmvb/mv \0 第\1集.rmvb/‘





###########################################################
###  正则表达式 2
###########################################################
% 正则表达式Regular Expressions应用范围, Linux中的vi more grep yacc lex awk sed
% 字符串匹配操作和替换操作, 正则表达式规则与文件名通配符规则不同
% 正则表达式规则用于文本处理的场合, 文件名匹配规则用于文件处理的场合
% 不同软件对正则表达式的定义会有差异


########################################################### 
### 特殊字符(元字符)
###########################################################
% 正则表达式的特殊字符(元字符), 6个元字符, 其它字符与其自身匹配
  .    *    [    \    ^    $



###########################################################
### 正则表达式的转义
###########################################################
% 用反斜线可以取消特殊字符的特殊含义。
  如:正则表达end\.只与字符串end.匹配



% 单字符正则表达式
% 长的正则表达式由单字符正则表达式构成的, 非特殊字符与其自身匹配
如:正则表达式a与字符串a匹配, b与b,/与/


% 转义字符(\)
\. \* \$ \^ \[ \\  ;%正则表达式\*与字符串*匹配,与字符串\*不匹配

% 转义字符后除以上六种之外的不该出现其他字符,例如:不该出现\u,这样
% 的组合被视为undefined(未定义的),后出的软件有可能会有特殊的解释

% 圆点(·),匹配任意单字符



###########################################################
### 定义集合(1
###########################################################
% 定义集合(1)
% 单字符正则表达式:定义集合(1)
在一对方括号之间的字符为集合的内容,
如:单字符正则表达式[abcd]与a或b,c,d匹配
圆点,星号,反斜线在方括号内时,代表它们自己
如:[\*.]可匹配3个单字符



% 定义集合(2)
% 单字符正则表达式:定义集合(2)
用减号-定义一个区间
如[a-d] [A-Z] [a-zA-Z0-9]
[][] 集合含左右中括号两个字符
%减号在最后,则失去表示区间的意义,[ad-]只与3个字符匹配

% 用^表示补集
% ^在开头,则表示与集合内字符之外的任意字符匹配
如:[^a-z]匹配任一非小写字母
   [^][]匹配任一非中括号字符
%^不在开头,则失去其表示补集的意义
如:[a-z^]能匹配27个单字符



###########################################################
### 达式的组合
###########################################################
% 表达式的组合(1)
% 单字符正则表达式的组合(1)
串结, 如abc, [A-Z].[0-9]·

% 星号(*)
单字符正则表达式后跟*,匹配此单字符正则表达式的0次或任意多次出现
例:正则表达式12*4
与字符串1234不匹配,与1224,12224,14匹配
% 例: 正则表达式[A-Z][0-9]*
此例中*作用的单字符正则表式为[0-9],代表
    [A-Z]
    [A-Z][0-9]
    [A-Z][0-9][0-9]
    [A-Z][0-9][0-9][0-9],等等
与A,A1,C45,D768匹配,与b64512,T56t不匹配


% 表达式的组合(2)
% 单字符正则表达式的组合(2)
例:正则表达式[Cc]hapter *[1-4]
在*号前有一个空格,允许数字1-4之前有多个或者0个空格。可匹配Chapter2, chapter 3等等。

例:正则表达式a\[i] *= *b\[j] *\* *c\[k]
匹配字符串a[i]=b[j]*c[k],容许等号和星号两侧有空格

例:在vi中使用
:1,$s/[0-9]*/xx/g



###########################################################
### 锚点:$与^
########################################################### 

%_________________________________________________
$ 在尾部时有特殊意义,否则与其自身匹配
例:123$ 匹配文件中行尾的123,不在行尾的123字符不匹配

例:$123与字符串$123匹配

例:.$ 匹配行尾的任意字符

%_________________________________________________
^ 在首部时有特殊意义,否则与其自身匹配

例:^printf匹配行首的printf字符串,不在行首的printf串不匹配

例:Hel^lo与字符串Hel^lo匹配

例:在vi中使用 :10,50s/^//g
删除10-50行的每行行首的4个空格



###########################################################
### 正则表达式扩展
###########################################################
% ERE:扩展的正则表达式(ERE)
% PCRE: Perl-compatible regular expression
% 对基本正则表达式( BRE )进行了改进:

% 表示分组:圆括号()
% 表示逻辑运算:表示逻辑“或” 的符号 |
  (xy)* 可匹配空字符串,xy,xyxy,xyxyxy
  (pink|green) 与pink或green匹配
  
% 重复次数定义:与星号地位类似的+和?,限定重复次数 \{m,n\}
*号表示它左边的单字符正则表达式的0次或多次重复
+号表示1次或多次: [0-9]+ 匹配长度至少为1数字串
?表示0次或一次: a?,匹配零个或一个a

% 限定重复次数 \{m,n\},例如:[1-9][0-9]\{6,8\} 7-9位数字,首位非0

% 命名的预定义集合
[[:xdigit:]]十六进制数字
\d数字
\D非数字
比^和$更灵活的锚点定义
例如:寻找一个数字串,但是要求这个数字串不许出现在“合计”两个字之后



