/** N!=1x2x3x4...
  * 1, 基本条件({N=0,1} 1)
  * 2, 一般条件({N>=2} Nx(N-1)!)
  * A1,基本条件控制递归调用的结束
  * A2,一般条件控制递归调用向基本条件转化
  * 函数直接或间接调用自己，称为递归调用(Recursive Call)
  */
#include <stdio.h>
long fact(int n)
{
	if (n < 0)
		return -1;
	else if (n==0 || n==1)
		return 1;
	else
		return n * fact(n-1);
}
int main(void)
{
	printf("fact(3)=%d\n", fact(3));
	return 0;
}



/*
 * 斐波那契数列,1 1 2 3 5 8 13 21...
 * f(1)=f(2)=1
 * f(n)=f(n-1)+f(n-2)
*/
#include <stdio.h>
int fibo(int n)
{
	if (n <= 0)
		return -1;
	else if (n==1 || n==2)
		return 1;
	else
		return fibo(n-1)+fibo(n-2);
}
int main(void)
{
	printf("%d\n", fibo(5));
	return 0;
}


/*
        汉诺塔问题
	        印度神话，上帝创造世界时制作了 3 根金钢石柱子，
	        第一根上从下向上按大小顺序摞着 64片黄金圆盘，
	        上帝命婆罗门把圆盘从下开始按大小顺序重新摆放在第 2根柱子上，
	        规定每次只能移动 1个圆盘，在小圆盘上不能放大圆盘。
	        
        较为简单的形式： N==2
	        1,将1号圆盘从A移动到C
	        2,将2号圆盘从A移动到B
	        3,将1号圆盘从C移动到B
	        
        数学归纳法：
        A1,假设 N-1个圆盘的汉诺塔问题已经解决
        A2,将上面“N-1个圆盘”看成一个整体
	        1,将上面“N-1个圆盘”从A移动到C
	        2,将 N号圆盘从A移动到B
	        3,将上面“N-1个圆盘”C移动到B
        移动N个圆盘的->移动N-1个圆盘
*/
#include <stdio.h>
void move(int n, char a, char b);
void hanoi(int n, char a, char b, char c);

//将 “N个圆盘”借助于C从A移动到B
void hanoi(int n, char a, char b, char c)
{
	if (n == 1)
		move(n, a, b);
	else
	{
		hanoi(n-1, a, c, b);
		move(n, a, b);
		hanoi(n-1, c, b, a);
	}
}

void move(int n, char a, char b)
{
	printf("move %d: from %c to from %c\n", n, a, b);
}

int main(void)
{
	int n;
	printf("Input the number of disks:");
	scanf("%d", &n);
	printf("Steps of moving %d disks form A to B by means of C:\n", n);
	hanoi(n, 'A', 'B', 'C');
}



/* 普通递归
        1. 1		n=0,1
        2. nx(n-1)!	n>=2

        A.递推阶段
	        Fact(3)=3*Fact(2)
		        Fact(2)=3*Fact(1)
			        Fact(1)=1	终止条件
			        ========================
        B.回归阶段		========================
		        Fact(2)=2*1
	        Fact)3)=3*2
        返回结果：6
*/
unsigned long Fact(unsigned int n)
{
	if (n==0 || n==1)
		return 1;
	else
		return n * Fact(n-1);
}



/* 尾递归
        1. a		n=0,1
        2. f(n-1, nxa)	n>=2       
        A.递推阶段
	        Fact(3, 1)=Fact(2, 3)
		        Fact(2, 3)=Fact(1, 6)
			        Fact(1, 6)=6	终止条件
			        =======================
	        Fact(3, 1) a=3*1=3
	        Fact(2, 3) a=2*3=6
	        Fact(1, 6) 终止条件

*/
unsigned long Fact(unsigned int n, unsigned int a)
{
	if (n==0 || n==1)
		return 1;
	else
		return Fact(n-1, n*a);
}





