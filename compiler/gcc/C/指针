###########################################################
### 指针数组
###########################################################
/* 指针数组， 这是一个数组， 它的每一个元素都是指针变量 */
#include<stdio.h>
int main(void)
{

	//int a[3][6] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18};
	int a[3][6] = {{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}};

	int i, j;
	int *p[3];

	for (i = 0; i < 3; i++) {
	    p[i] = a[i];
		for (j = 0; j < 6; j++) {
			printf("%d ",p[i][j]);
		}
		printf("\n");
	}

	printf("hello.world\n");

	return 0;

}



############################################################
### 数组指针
############################################################
/* int (*p)[3]; */
/* 这是一个指针变量， 它指向一个一维数组 */
#include<stdio.h>
int main(void)
{
	
	int a[6][3] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18};
	int (*p)[3];
	
	p = a;
	int i,j;
	for (i=0;i<6;i++) {
		for (j=0;j<3;j++) {
			printf("%d,",p[i][j]);
		}
		printf("\n");
	}
	//printf("%d %d",&p[0][0],&p[0][1]);
	return 0;
}



############################################################
### 指针函数
############################################################
/* 指针函数， 这是一个函数， 它的返回值类型为指针 */
int * funtion(in a, int b)



############################################################
### 函数指针
############################################################
/* 函数指针， 这是一个指针， 它指向一个函数 */
int (* funtion)(int a, int b);



############################################################
### 二级指针
############################################################
/* 二级指针， 它指向另一个指针 */
#include <stdio.h>

int main(void) {
	int i;
	char *name[3] = {"apple", "ucos", "stm32"};
	char **ptr = name;
	for (i = 0; i < 3; i++) {
		printf("%s\n", *(name+i));
		printf("%s\n", ptr[i]);
		printf("%s\n", *(ptr+i));
		printf("%c\n", *(*(ptr+1)+2));
	}
	return 0;
}



###########################################################
### 数组
###########################################################
/* 指针和一维数组之间的关系 */
    int a[5];
    a,数组名代表数组的首地址&a[0]

    &a[i] == (a+i)
    a+1不是加上1个字节,取决于a的基类型

    一维数组元素的等价引用形式
    a[i] ↔ *(a + i)
    用下标形式访问数组元素的本质


/* 指针与一维数组间的关系的关键 */
牢记a[i] ↔ *(a+i)
一维数组和指针做函数形参是等同的
数组和指针并非在所有情况下都是等同的
sizeof(数组名)和sizeof(指针变量名),不可互换


/* 指针和二维数组之间的关系 */
换个角度看二维数组
int a[2][3];
a[i][j]
*(*(a+i)+j)

a=======&a[0]--->   &a[0][0] /{a[0][0], a[0][1], a[0][2]}

(a+1)===&a[1]--->   &a[1][0] /{a[1][0], a[1][1], a[1][2]}

a   代表二维数组的首地址,第0行的地址,行地址
a+i 代表第 i 行的地址, 但并非增加 i 个字节!

1)a包含2个元素a[0],a[1]
2)a[0],a[1]又分别是一个, 一维数组,包含3个元素


/* 指向二维数组的行指针 */
将二维数组a看成一维数组,有2个“int[3]型”元素
int a[2][3];
*(*(p+i)+j)

若要让一个指针指向它,则应定义为
    int (*p)[3];//行指针,基类型“int[3]型”
    p = a;      //&a[0]指向第0行的“int[3]型”元素


        p+i 指向第i行的“int[3]型”元素,即&a[i]
        *(p+i),即a[i],第i行的数组名,即指向第i行第0列的int型元素
        *(p+i)+j 指向第i行第j列的int型元素
        *(*(p+i)+j) 取出第i行第j列的内容(int型元素的值),即a[i][j]


/* 按行指针访问二维数组元素 */
int a[2][3];
int (*P)[3];
p = a;
for (i=0; i<m; i++) //行下标变化
{
    for (j=0; j<n; j++)//列下标变化
    {
        printf("%d", *(*(p+i)+j));
    }
}


//再换一个角度看二维数组, int a[2][3];
//将二维数组a看成一维数组,有6个int型元素
若要让一个指针指向它,则应定义为
int *p;         //列指针,基类型是int型
p = a[0];       //*(a+0)+0即&a[0][0],指向第0行第0列的int型元素

按列指针访问二维数组元素, 根据相对偏移量逐列查找
int *p;
p = &a[0][0];
for (i=0; i<m; i++)
{
    for (j=0; j<n; j++)
        printf("%d", *(p+i*n+j));
}

*(p+i*n+j) == p[i*n+j]







