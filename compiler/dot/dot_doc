############################################################
### // https://graphviz.org/documentation/
### // http://magjac.com/graphviz-visual-editor/
### // dot语言 //
############################################################
0 // graphviz dot安装
sudo apt-get install graphviz


1 // 创建文本文件并命名为*.dot, 编写dot脚本


2 // 编译脚本, 输出图片, 编译命令: 
dot text.dot -Tsvg -o text.svg



3 // 例程
digraph structs {
        prev;
        next;
        node [shape=record];
        struct1 [label="<f0> prev | <f1> | <f2> next"];
        struct1:f1 -> prev;
        struct1:f1 -> next;
}


4 // 例程
digraph G {
        rankdir=LR
        node [shape=box, color=blue] //节点的形状，节点边框的颜色
        node1 [style=filled] 
        node2 [style=filled, fillcolor=red] 
        node0 -> node1 -> node2
}



############################################################
### // 图的声明 //
############################################################
// 使用digraph graph_name可以声明一个图，而图的具体实现代码则由一对花
// 括号包含起来
digraph graph1 {
        //something
}



// 当图中某些内容同属一个类别时，我们可以声明一个子图将其包含在一起。
// 使用subgraph cluster_subgraph_name可以在声明一个子图。
// 注意：子图的名字必须以[cluster]开始，否则解析引擎无法进行识别
subgraph cluster_subgraph1 {
    // something
}



digraph example1 {
        label = "this is a graph";
        a;
        b;

        // 子图
        subgraph cluster_sub1 {
                label = "this is subgraph";
                bgcolor = greenyellow;
                c;
                d;
        }
}



############################################################
### // 结点和边的声明 //
############################################################
Dot里结点的声明十分简单。键入结点名字node_name;即可声明一个结点，同时，
结点默认的显示内容就是结点名字。当结点内容里面有空格时，我们可以将结点名
字用一对双引号包含起来，解析引擎会直接取双引号里面的内容创建结点。
使用符号->可以声明一条边。a -> b就代表一条由结点a连接到结点b的边。结点
可以连接到结点自身
a; b; c;
a -> b -> c -> c;



############################################################
### // 图的属性 //
############################################################
// 图的属性设置可以写在graph []里，或者直接写在外面：
digraph graph1 {
        bgcolor = red;
        graph [bgcolor = red];
}


// 图的属性包括
bgcolor         // 设置图的背景颜色，可以使用red、blue、green等形式，
                // 或者使用"#rrggbb"形式。
label           // 设置图的描述。label会继承到子图，子图里如果不想重复
                // 显示必须手动设置
rankdir         // 设置图的方向，包括：
                // TB（top to bottom）
                // BT（bottom to top）
                // LR（left to right）
                // RL（right to left）
rotate          // 设置图的旋转。
                // 如：rotate = 90便是逆时针旋转90度。
ratio           // 设置图的长宽比，可以是一个浮点数，也可以是：
                // fill、compress或者auto。



############################################################
### // 结点属性和边属性 //
############################################################
结点和边的属性设置非常简单，只需要在结点或者边的声明后面加上方括号，然后
在方括号里填写属性键值对即可。键值对之间使用逗号进行分割。
a [shape = egg, label = "this is node a"];
b [shape = circle, label = "this is node b"];
a -> b [style = dashed, label = "this is edge a to b"];


// shape：设置结点形状。
Mrecord（圆角矩形）、record（矩形）、circle（圆形）、
box（矩形，和record略有区别，下面会讲到）、egg（蛋形）、
doublecircle（双圆形）、plaintext（纯文本）、 ellipse（椭圆，默认）。


label           // 设置结点的显示内容，内容用双引号包含，可以使用转义字符。
                // 当结点内容!=结点名时使用

style           // 设置结点的样式。
                // filled(填充)、dotted（点状边框）、solid（普通边框）、
                // dashed（虚线边框）、bold（边框加粗）、invis（隐形）。

color           // 设置边框颜色。可以使用单词形式或者"#rrggbb"形式。

fillcolor       // 设置填充颜色，仅style = filled时有效。

width           // 设置结点宽度。

height          // 设置结点高度。

peripheries     // 设置结点边框个数。

fontcolor       // 设置结点内容颜色。可以使用单词形式或者"#rrggbb"形式。


需要重点强调的是：
如果设置了style = filled，此时设置的color是代表整体颜色。
但是如果设置了fillcolor再设置color的话，color代表边框颜色。


// 边的常用属性：
style           // 设置边的形状。
                // 包括：solid（实线）、dashed（虚线）、
                // dotted（点线）、bold（加粗）、invis（隐形）。

label           // 设置边标签。内容用双引号包含，可以使用转义字符。

color           // 设置边颜色。可以使用单词形式或者"#rrggbb"形式。

arrowhead       // 设置结点箭头样式。包括：none、empty、odiamond等



############################################################
### // 生成图形 //
############################################################
// 我们还可以巧妙地使用结点的某些属性来生成图形。如：就生成了一个实心黑色圆形。
circle [label="", shape="circle", width=0.5, fixedsize=true, style=filled, color=black];



