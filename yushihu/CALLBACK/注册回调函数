float add(float a, float b)
{
        return (a + b);
}
int main(void)
{
        // 函数指针的声明
        float (*fnptr_add)(float a, float b);
        
        // 函数指针的使用
        fnptr_add = add;
        float sum = fnptr_add(1, 2);
}
// SystemClock_Config();
void (*fnptr_systemclock_config)(void);         // 函数指针的声明
fnptr_systemclock_config = SystemClock_Config;  // 函数指针的赋值
fnptr_systemclock_config();                     // 函数指针的使用






//______________________________________________________________________________
//      => 函数指针注册函数
//______________________________________________________________________________
void (*fnptr_print)(const char *);              // 声明函数指针

                                                 // 注册函数指针
void log_info_register_callback(void (*fnptr)(const char *)
{
        fnptr_print = fnptr;
}
void log_info_unregister_callback(void)         // 反注册函数指针
{
        fnptr_print = NULL;
}

// 输出日志信息， 并追加时间戳
// string  = 原始的日志信息
void log_info(const char *string)
{
        // sprintf(); 格式化字符串（输出到字符缓冲区）
        char buffer[256];
        sprintf(buffer, "[%u] %s\r\n", HAL_GetTick(), string);
        if (fnptr_print != NULL) {
                fnptr_print(buffer);
        }
}

--------------------------------------------------------------------------------
#include <stdio.h>
#include <string.h>

void usart1_print(const char *string)
{
        HAL_UART_Transmit(huart1, (uint8_t *)str, strlen(str), HA_MAX_DELAY);
}
int main(void)
{
        // 注册回调函数
        log_info_register_callback(usart1_print);
        // 使用回调函数
        log_info("Program started ...");
        log_info("Delay 1000MS ...");
        HAL_Delay(1000);
        log_info("Delay complete ...");
}
