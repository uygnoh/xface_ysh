ARM GAS  /tmp/cc3gyAlT.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"object.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.rt_system_object_init,"ax",%progbits
  16              		.align	1
  17              		.global	rt_system_object_init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	rt_system_object_init:
  24              	.LFB15:
  25              		.file 1 "rtthread/src/object.c"
   1:rtthread/src/object.c **** /*
   2:rtthread/src/object.c ****  * Copyright (c) 2006-2021, RT-Thread Development Team
   3:rtthread/src/object.c ****  *
   4:rtthread/src/object.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rtthread/src/object.c ****  *
   6:rtthread/src/object.c ****  * Change Logs:
   7:rtthread/src/object.c ****  * Date           Author       Notes
   8:rtthread/src/object.c ****  * 2006-03-14     Bernard      the first version
   9:rtthread/src/object.c ****  * 2006-04-21     Bernard      change the scheduler lock to interrupt lock
  10:rtthread/src/object.c ****  * 2006-05-18     Bernard      fix the object init bug
  11:rtthread/src/object.c ****  * 2006-08-03     Bernard      add hook support
  12:rtthread/src/object.c ****  * 2007-01-28     Bernard      rename RT_OBJECT_Class_Static to RT_Object_Class_Static
  13:rtthread/src/object.c ****  * 2010-10-26     yi.qiu       add module support in rt_object_allocate and rt_object_free
  14:rtthread/src/object.c ****  * 2017-12-10     Bernard      Add object_info enum.
  15:rtthread/src/object.c ****  * 2018-01-25     Bernard      Fix the object find issue when enable MODULE.
  16:rtthread/src/object.c ****  */
  17:rtthread/src/object.c **** 
  18:rtthread/src/object.c **** #include <rtthread.h>
  19:rtthread/src/object.c **** #include <rthw.h>
  20:rtthread/src/object.c **** 
  21:rtthread/src/object.c **** /*
  22:rtthread/src/object.c ****  * define object_info for the number of rt_object_container items.
  23:rtthread/src/object.c ****  */
  24:rtthread/src/object.c **** enum rt_object_info_type
  25:rtthread/src/object.c **** {
  26:rtthread/src/object.c ****     RT_Object_Info_Thread = 0,                         /**< The object is a thread. */
  27:rtthread/src/object.c **** #ifdef RT_USING_SEMAPHORE
  28:rtthread/src/object.c ****     RT_Object_Info_Semaphore,                          /**< The object is a semaphore. */
  29:rtthread/src/object.c **** #endif
  30:rtthread/src/object.c **** #ifdef RT_USING_MUTEX
  31:rtthread/src/object.c ****     RT_Object_Info_Mutex,                              /**< The object is a mutex. */
  32:rtthread/src/object.c **** #endif
  33:rtthread/src/object.c **** #ifdef RT_USING_EVENT
ARM GAS  /tmp/cc3gyAlT.s 			page 2


  34:rtthread/src/object.c ****     RT_Object_Info_Event,                              /**< The object is a event. */
  35:rtthread/src/object.c **** #endif
  36:rtthread/src/object.c **** #ifdef RT_USING_MAILBOX
  37:rtthread/src/object.c ****     RT_Object_Info_MailBox,                            /**< The object is a mail box. */
  38:rtthread/src/object.c **** #endif
  39:rtthread/src/object.c **** #ifdef RT_USING_MESSAGEQUEUE
  40:rtthread/src/object.c ****     RT_Object_Info_MessageQueue,                       /**< The object is a message queue. */
  41:rtthread/src/object.c **** #endif
  42:rtthread/src/object.c **** #ifdef RT_USING_MEMHEAP
  43:rtthread/src/object.c ****     RT_Object_Info_MemHeap,                            /**< The object is a memory heap */
  44:rtthread/src/object.c **** #endif
  45:rtthread/src/object.c **** #ifdef RT_USING_MEMPOOL
  46:rtthread/src/object.c ****     RT_Object_Info_MemPool,                            /**< The object is a memory pool. */
  47:rtthread/src/object.c **** #endif
  48:rtthread/src/object.c **** #ifdef RT_USING_DEVICE
  49:rtthread/src/object.c ****     RT_Object_Info_Device,                             /**< The object is a device */
  50:rtthread/src/object.c **** #endif
  51:rtthread/src/object.c ****     RT_Object_Info_Timer,                              /**< The object is a timer. */
  52:rtthread/src/object.c ****     RT_Object_Info_Unknown,                            /**< The object is unknown. */
  53:rtthread/src/object.c **** };
  54:rtthread/src/object.c **** 
  55:rtthread/src/object.c **** #define _OBJ_CONTAINER_LIST_INIT(c)     \
  56:rtthread/src/object.c ****     {&(rt_object_container[c].object_list), &(rt_object_container[c].object_list)}
  57:rtthread/src/object.c **** static struct rt_object_information rt_object_container[RT_Object_Info_Unknown] =
  58:rtthread/src/object.c **** {
  59:rtthread/src/object.c ****     /* initialize object container - thread */
  60:rtthread/src/object.c ****     {RT_Object_Class_Thread, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Thread), sizeof(struct rt_thre
  61:rtthread/src/object.c **** #ifdef RT_USING_SEMAPHORE
  62:rtthread/src/object.c ****     /* initialize object container - semaphore */
  63:rtthread/src/object.c ****     {RT_Object_Class_Semaphore, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Semaphore), sizeof(struct r
  64:rtthread/src/object.c **** #endif
  65:rtthread/src/object.c **** #ifdef RT_USING_MUTEX
  66:rtthread/src/object.c ****     /* initialize object container - mutex */
  67:rtthread/src/object.c ****     {RT_Object_Class_Mutex, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Mutex), sizeof(struct rt_mutex)
  68:rtthread/src/object.c **** #endif
  69:rtthread/src/object.c **** #ifdef RT_USING_EVENT
  70:rtthread/src/object.c ****     /* initialize object container - event */
  71:rtthread/src/object.c ****     {RT_Object_Class_Event, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Event), sizeof(struct rt_event)
  72:rtthread/src/object.c **** #endif
  73:rtthread/src/object.c **** #ifdef RT_USING_MAILBOX
  74:rtthread/src/object.c ****     /* initialize object container - mailbox */
  75:rtthread/src/object.c ****     {RT_Object_Class_MailBox, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MailBox), sizeof(struct rt_ma
  76:rtthread/src/object.c **** #endif
  77:rtthread/src/object.c **** #ifdef RT_USING_MESSAGEQUEUE
  78:rtthread/src/object.c ****     /* initialize object container - message queue */
  79:rtthread/src/object.c ****     {RT_Object_Class_MessageQueue, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MessageQueue), sizeof(st
  80:rtthread/src/object.c **** #endif
  81:rtthread/src/object.c **** #ifdef RT_USING_MEMHEAP
  82:rtthread/src/object.c ****     /* initialize object container - memory heap */
  83:rtthread/src/object.c ****     {RT_Object_Class_MemHeap, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MemHeap), sizeof(struct rt_me
  84:rtthread/src/object.c **** #endif
  85:rtthread/src/object.c **** #ifdef RT_USING_MEMPOOL
  86:rtthread/src/object.c ****     /* initialize object container - memory pool */
  87:rtthread/src/object.c ****     {RT_Object_Class_MemPool, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MemPool), sizeof(struct rt_me
  88:rtthread/src/object.c **** #endif
  89:rtthread/src/object.c **** #ifdef RT_USING_DEVICE
  90:rtthread/src/object.c ****     /* initialize object container - device */
ARM GAS  /tmp/cc3gyAlT.s 			page 3


  91:rtthread/src/object.c ****     {RT_Object_Class_Device, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Device), sizeof(struct rt_devi
  92:rtthread/src/object.c **** #endif
  93:rtthread/src/object.c ****     /* initialize object container - timer */
  94:rtthread/src/object.c ****     {RT_Object_Class_Timer, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Timer), sizeof(struct rt_timer)
  95:rtthread/src/object.c **** };
  96:rtthread/src/object.c **** 
  97:rtthread/src/object.c **** #ifdef RT_USING_HOOK
  98:rtthread/src/object.c **** static void (*rt_object_attach_hook)(struct rt_object *object);
  99:rtthread/src/object.c **** static void (*rt_object_detach_hook)(struct rt_object *object);
 100:rtthread/src/object.c **** void (*rt_object_trytake_hook)(struct rt_object *object);
 101:rtthread/src/object.c **** void (*rt_object_take_hook)(struct rt_object *object);
 102:rtthread/src/object.c **** void (*rt_object_put_hook)(struct rt_object *object);
 103:rtthread/src/object.c **** 
 104:rtthread/src/object.c **** /**
 105:rtthread/src/object.c ****  * @addtogroup Hook
 106:rtthread/src/object.c ****  */
 107:rtthread/src/object.c **** 
 108:rtthread/src/object.c **** /**@{*/
 109:rtthread/src/object.c **** 
 110:rtthread/src/object.c **** /**
 111:rtthread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 112:rtthread/src/object.c ****  * attaches to kernel object system.
 113:rtthread/src/object.c ****  *
 114:rtthread/src/object.c ****  * @param hook the hook function
 115:rtthread/src/object.c ****  */
 116:rtthread/src/object.c **** void rt_object_attach_sethook(void (*hook)(struct rt_object *object))
 117:rtthread/src/object.c **** {
 118:rtthread/src/object.c ****     rt_object_attach_hook = hook;
 119:rtthread/src/object.c **** }
 120:rtthread/src/object.c **** 
 121:rtthread/src/object.c **** /**
 122:rtthread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 123:rtthread/src/object.c ****  * detaches from kernel object system.
 124:rtthread/src/object.c ****  *
 125:rtthread/src/object.c ****  * @param hook the hook function
 126:rtthread/src/object.c ****  */
 127:rtthread/src/object.c **** void rt_object_detach_sethook(void (*hook)(struct rt_object *object))
 128:rtthread/src/object.c **** {
 129:rtthread/src/object.c ****     rt_object_detach_hook = hook;
 130:rtthread/src/object.c **** }
 131:rtthread/src/object.c **** 
 132:rtthread/src/object.c **** /**
 133:rtthread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 134:rtthread/src/object.c ****  * is taken from kernel object system.
 135:rtthread/src/object.c ****  *
 136:rtthread/src/object.c ****  * The object is taken means:
 137:rtthread/src/object.c ****  * semaphore - semaphore is taken by thread
 138:rtthread/src/object.c ****  * mutex - mutex is taken by thread
 139:rtthread/src/object.c ****  * event - event is received by thread
 140:rtthread/src/object.c ****  * mailbox - mail is received by thread
 141:rtthread/src/object.c ****  * message queue - message is received by thread
 142:rtthread/src/object.c ****  *
 143:rtthread/src/object.c ****  * @param hook the hook function
 144:rtthread/src/object.c ****  */
 145:rtthread/src/object.c **** void rt_object_trytake_sethook(void (*hook)(struct rt_object *object))
 146:rtthread/src/object.c **** {
 147:rtthread/src/object.c ****     rt_object_trytake_hook = hook;
ARM GAS  /tmp/cc3gyAlT.s 			page 4


 148:rtthread/src/object.c **** }
 149:rtthread/src/object.c **** 
 150:rtthread/src/object.c **** /**
 151:rtthread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 152:rtthread/src/object.c ****  * have been taken from kernel object system.
 153:rtthread/src/object.c ****  *
 154:rtthread/src/object.c ****  * The object have been taken means:
 155:rtthread/src/object.c ****  * semaphore - semaphore have been taken by thread
 156:rtthread/src/object.c ****  * mutex - mutex have been taken by thread
 157:rtthread/src/object.c ****  * event - event have been received by thread
 158:rtthread/src/object.c ****  * mailbox - mail have been received by thread
 159:rtthread/src/object.c ****  * message queue - message have been received by thread
 160:rtthread/src/object.c ****  * timer - timer is started
 161:rtthread/src/object.c ****  *
 162:rtthread/src/object.c ****  * @param hook the hook function
 163:rtthread/src/object.c ****  */
 164:rtthread/src/object.c **** void rt_object_take_sethook(void (*hook)(struct rt_object *object))
 165:rtthread/src/object.c **** {
 166:rtthread/src/object.c ****     rt_object_take_hook = hook;
 167:rtthread/src/object.c **** }
 168:rtthread/src/object.c **** 
 169:rtthread/src/object.c **** /**
 170:rtthread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 171:rtthread/src/object.c ****  * is put to kernel object system.
 172:rtthread/src/object.c ****  *
 173:rtthread/src/object.c ****  * @param hook the hook function
 174:rtthread/src/object.c ****  */
 175:rtthread/src/object.c **** void rt_object_put_sethook(void (*hook)(struct rt_object *object))
 176:rtthread/src/object.c **** {
 177:rtthread/src/object.c ****     rt_object_put_hook = hook;
 178:rtthread/src/object.c **** }
 179:rtthread/src/object.c **** 
 180:rtthread/src/object.c **** /**@}*/
 181:rtthread/src/object.c **** #endif
 182:rtthread/src/object.c **** 
 183:rtthread/src/object.c **** /**
 184:rtthread/src/object.c ****  * @ingroup SystemInit
 185:rtthread/src/object.c ****  *
 186:rtthread/src/object.c ****  * This function will initialize system object management.
 187:rtthread/src/object.c ****  *
 188:rtthread/src/object.c ****  * @deprecated since 0.3.0, this function does not need to be invoked
 189:rtthread/src/object.c ****  * in the system initialization.
 190:rtthread/src/object.c ****  */
 191:rtthread/src/object.c **** void rt_system_object_init(void)
 192:rtthread/src/object.c **** {
  26              		.loc 1 192 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 193:rtthread/src/object.c **** }
  31              		.loc 1 193 0
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE15:
  36              		.section	.text.rt_object_get_information,"ax",%progbits
  37              		.align	1
ARM GAS  /tmp/cc3gyAlT.s 			page 5


  38              		.global	rt_object_get_information
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	rt_object_get_information:
  45              	.LFB16:
 194:rtthread/src/object.c **** 
 195:rtthread/src/object.c **** /**
 196:rtthread/src/object.c ****  * @addtogroup KernelObject
 197:rtthread/src/object.c ****  */
 198:rtthread/src/object.c **** 
 199:rtthread/src/object.c **** /**@{*/
 200:rtthread/src/object.c **** 
 201:rtthread/src/object.c **** /**
 202:rtthread/src/object.c ****  * This function will return the specified type of object information.
 203:rtthread/src/object.c ****  *
 204:rtthread/src/object.c ****  * @param type the type of object, which can be
 205:rtthread/src/object.c ****  *             RT_Object_Class_Thread/Semaphore/Mutex... etc
 206:rtthread/src/object.c ****  *
 207:rtthread/src/object.c ****  * @return the object type information or RT_NULL
 208:rtthread/src/object.c ****  */
 209:rtthread/src/object.c **** struct rt_object_information *
 210:rtthread/src/object.c **** rt_object_get_information(enum rt_object_class_type type)
 211:rtthread/src/object.c **** {
  46              		.loc 1 211 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51              	.LVL0:
 212:rtthread/src/object.c ****     int index;
 213:rtthread/src/object.c **** 
 214:rtthread/src/object.c ****     for (index = 0; index < RT_Object_Info_Unknown; index ++)
  52              		.loc 1 214 0
  53 0000 0023     		movs	r3, #0
  54              	.LVL1:
  55              	.L3:
  56              		.loc 1 214 0 is_stmt 0 discriminator 1
  57 0002 032B     		cmp	r3, #3
  58 0004 09DC     		bgt	.L7
 215:rtthread/src/object.c ****         if (rt_object_container[index].type == type) return &rt_object_container[index];
  59              		.loc 1 215 0 is_stmt 1
  60 0006 1A01     		lsls	r2, r3, #4
  61 0008 0549     		ldr	r1, .L9
  62 000a 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
  63 000c 8242     		cmp	r2, r0
  64 000e 01D0     		beq	.L8
 214:rtthread/src/object.c ****         if (rt_object_container[index].type == type) return &rt_object_container[index];
  65              		.loc 1 214 0 discriminator 2
  66 0010 0133     		adds	r3, r3, #1
  67              	.LVL2:
  68 0012 F6E7     		b	.L3
  69              	.L8:
  70              		.loc 1 215 0 discriminator 1
  71 0014 01EB0310 		add	r0, r1, r3, lsl #4
  72              	.LVL3:
ARM GAS  /tmp/cc3gyAlT.s 			page 6


  73 0018 7047     		bx	lr
  74              	.LVL4:
  75              	.L7:
 216:rtthread/src/object.c **** 
 217:rtthread/src/object.c ****     return RT_NULL;
  76              		.loc 1 217 0
  77 001a 0020     		movs	r0, #0
  78              	.LVL5:
 218:rtthread/src/object.c **** }
  79              		.loc 1 218 0
  80 001c 7047     		bx	lr
  81              	.L10:
  82 001e 00BF     		.align	2
  83              	.L9:
  84 0020 00000000 		.word	.LANCHOR0
  85              		.cfi_endproc
  86              	.LFE16:
  88              		.section	.text.rt_object_get_length,"ax",%progbits
  89              		.align	1
  90              		.global	rt_object_get_length
  91              		.syntax unified
  92              		.thumb
  93              		.thumb_func
  94              		.fpu softvfp
  96              	rt_object_get_length:
  97              	.LFB17:
 219:rtthread/src/object.c **** 
 220:rtthread/src/object.c **** /**
 221:rtthread/src/object.c ****  * This function will return the length of object list in object container.
 222:rtthread/src/object.c ****  *
 223:rtthread/src/object.c ****  * @param type the type of object, which can be
 224:rtthread/src/object.c ****  *             RT_Object_Class_Thread/Semaphore/Mutex... etc
 225:rtthread/src/object.c ****  * @return the length of object list
 226:rtthread/src/object.c ****  */
 227:rtthread/src/object.c **** int rt_object_get_length(enum rt_object_class_type type)
 228:rtthread/src/object.c **** {
  98              		.loc 1 228 0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              	.LVL6:
 103 0000 38B5     		push	{r3, r4, r5, lr}
 104              	.LCFI0:
 105              		.cfi_def_cfa_offset 16
 106              		.cfi_offset 3, -16
 107              		.cfi_offset 4, -12
 108              		.cfi_offset 5, -8
 109              		.cfi_offset 14, -4
 110              	.LVL7:
 229:rtthread/src/object.c ****     int count = 0;
 230:rtthread/src/object.c ****     rt_ubase_t level;
 231:rtthread/src/object.c ****     struct rt_list_node *node = RT_NULL;
 232:rtthread/src/object.c ****     struct rt_object_information *information = RT_NULL;
 233:rtthread/src/object.c **** 
 234:rtthread/src/object.c ****     information = rt_object_get_information((enum rt_object_class_type)type);
 111              		.loc 1 234 0
 112 0002 FFF7FEFF 		bl	rt_object_get_information
ARM GAS  /tmp/cc3gyAlT.s 			page 7


 113              	.LVL8:
 235:rtthread/src/object.c ****     if (information == RT_NULL) return 0;
 114              		.loc 1 235 0
 115 0006 70B1     		cbz	r0, .L15
 116 0008 0546     		mov	r5, r0
 236:rtthread/src/object.c **** 
 237:rtthread/src/object.c ****     level = rt_hw_interrupt_disable();
 117              		.loc 1 237 0
 118 000a FFF7FEFF 		bl	rt_hw_interrupt_disable
 119              	.LVL9:
 238:rtthread/src/object.c ****     /* get the count of objects */
 239:rtthread/src/object.c ****     rt_list_for_each(node, &(information->object_list))
 120              		.loc 1 239 0
 121 000e 6B68     		ldr	r3, [r5, #4]
 122              	.LVL10:
 229:rtthread/src/object.c ****     rt_ubase_t level;
 123              		.loc 1 229 0
 124 0010 0024     		movs	r4, #0
 125              		.loc 1 239 0
 126 0012 01E0     		b	.L13
 127              	.LVL11:
 128              	.L14:
 240:rtthread/src/object.c ****     {
 241:rtthread/src/object.c ****         count ++;
 129              		.loc 1 241 0 discriminator 3
 130 0014 0134     		adds	r4, r4, #1
 131              	.LVL12:
 239:rtthread/src/object.c ****     {
 132              		.loc 1 239 0 discriminator 3
 133 0016 1B68     		ldr	r3, [r3]
 134              	.LVL13:
 135              	.L13:
 239:rtthread/src/object.c ****     {
 136              		.loc 1 239 0 is_stmt 0 discriminator 1
 137 0018 2A1D     		adds	r2, r5, #4
 138 001a 9A42     		cmp	r2, r3
 139 001c FAD1     		bne	.L14
 242:rtthread/src/object.c ****     }
 243:rtthread/src/object.c ****     rt_hw_interrupt_enable(level);
 140              		.loc 1 243 0 is_stmt 1
 141 001e FFF7FEFF 		bl	rt_hw_interrupt_enable
 142              	.LVL14:
 143              	.L11:
 244:rtthread/src/object.c **** 
 245:rtthread/src/object.c ****     return count;
 246:rtthread/src/object.c **** }
 144              		.loc 1 246 0
 145 0022 2046     		mov	r0, r4
 146 0024 38BD     		pop	{r3, r4, r5, pc}
 147              	.LVL15:
 148              	.L15:
 235:rtthread/src/object.c **** 
 149              		.loc 1 235 0
 150 0026 0024     		movs	r4, #0
 151 0028 FBE7     		b	.L11
 152              		.cfi_endproc
 153              	.LFE17:
ARM GAS  /tmp/cc3gyAlT.s 			page 8


 155              		.section	.text.rt_object_get_pointers,"ax",%progbits
 156              		.align	1
 157              		.global	rt_object_get_pointers
 158              		.syntax unified
 159              		.thumb
 160              		.thumb_func
 161              		.fpu softvfp
 163              	rt_object_get_pointers:
 164              	.LFB18:
 247:rtthread/src/object.c **** 
 248:rtthread/src/object.c **** /**
 249:rtthread/src/object.c ****  * This function will copy the object pointer of the specified type,
 250:rtthread/src/object.c ****  * with the maximum size specified by maxlen.
 251:rtthread/src/object.c ****  *
 252:rtthread/src/object.c ****  * @param type the type of object, which can be
 253:rtthread/src/object.c ****  *             RT_Object_Class_Thread/Semaphore/Mutex... etc
 254:rtthread/src/object.c ****  * @param pointers the pointers will be saved to
 255:rtthread/src/object.c ****  * @param maxlen the maximum number of pointers can be saved
 256:rtthread/src/object.c ****  *
 257:rtthread/src/object.c ****  * @return the copied number of object pointers
 258:rtthread/src/object.c ****  */
 259:rtthread/src/object.c **** int rt_object_get_pointers(enum rt_object_class_type type, rt_object_t *pointers, int maxlen)
 260:rtthread/src/object.c **** {
 165              		.loc 1 260 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              	.LVL16:
 170 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 171              	.LCFI1:
 172              		.cfi_def_cfa_offset 24
 173              		.cfi_offset 4, -24
 174              		.cfi_offset 5, -20
 175              		.cfi_offset 6, -16
 176              		.cfi_offset 7, -12
 177              		.cfi_offset 8, -8
 178              		.cfi_offset 14, -4
 179              	.LVL17:
 261:rtthread/src/object.c ****     int index = 0;
 262:rtthread/src/object.c ****     rt_ubase_t level;
 263:rtthread/src/object.c **** 
 264:rtthread/src/object.c ****     struct rt_object *object;
 265:rtthread/src/object.c ****     struct rt_list_node *node = RT_NULL;
 266:rtthread/src/object.c ****     struct rt_object_information *information = RT_NULL;
 267:rtthread/src/object.c **** 
 268:rtthread/src/object.c ****     if (maxlen <= 0) return 0;
 180              		.loc 1 268 0
 181 0004 171E     		subs	r7, r2, #0
 182 0006 1BDD     		ble	.L22
 183 0008 0E46     		mov	r6, r1
 269:rtthread/src/object.c **** 
 270:rtthread/src/object.c ****     information = rt_object_get_information((enum rt_object_class_type)type);
 184              		.loc 1 270 0
 185 000a FFF7FEFF 		bl	rt_object_get_information
 186              	.LVL18:
 271:rtthread/src/object.c ****     if (information == RT_NULL) return 0;
 187              		.loc 1 271 0
ARM GAS  /tmp/cc3gyAlT.s 			page 9


 188 000e 8046     		mov	r8, r0
 189 0010 C0B1     		cbz	r0, .L23
 272:rtthread/src/object.c **** 
 273:rtthread/src/object.c ****     level = rt_hw_interrupt_disable();
 190              		.loc 1 273 0
 191 0012 FFF7FEFF 		bl	rt_hw_interrupt_disable
 192              	.LVL19:
 274:rtthread/src/object.c ****     /* retrieve pointer of object */
 275:rtthread/src/object.c ****     rt_list_for_each(node, &(information->object_list))
 193              		.loc 1 275 0
 194 0016 D8F80430 		ldr	r3, [r8, #4]
 195              	.LVL20:
 261:rtthread/src/object.c ****     rt_ubase_t level;
 196              		.loc 1 261 0
 197 001a 0024     		movs	r4, #0
 198              	.LVL21:
 199              	.L19:
 200              		.loc 1 275 0 discriminator 1
 201 001c 08F10405 		add	r5, r8, #4
 202 0020 9D42     		cmp	r5, r3
 203 0022 08D0     		beq	.L20
 276:rtthread/src/object.c ****     {
 277:rtthread/src/object.c ****         object = rt_list_entry(node, struct rt_object, list);
 204              		.loc 1 277 0
 205 0024 A3F10C05 		sub	r5, r3, #12
 206              	.LVL22:
 278:rtthread/src/object.c **** 
 279:rtthread/src/object.c ****         pointers[index] = object;
 207              		.loc 1 279 0
 208 0028 46F82450 		str	r5, [r6, r4, lsl #2]
 280:rtthread/src/object.c ****         index ++;
 209              		.loc 1 280 0
 210 002c 0134     		adds	r4, r4, #1
 211              	.LVL23:
 281:rtthread/src/object.c **** 
 282:rtthread/src/object.c ****         if (index >= maxlen) break;
 212              		.loc 1 282 0
 213 002e A742     		cmp	r7, r4
 214 0030 01DD     		ble	.L20
 275:rtthread/src/object.c ****     {
 215              		.loc 1 275 0 discriminator 2
 216 0032 1B68     		ldr	r3, [r3]
 217              	.LVL24:
 218 0034 F2E7     		b	.L19
 219              	.LVL25:
 220              	.L20:
 283:rtthread/src/object.c ****     }
 284:rtthread/src/object.c ****     rt_hw_interrupt_enable(level);
 221              		.loc 1 284 0
 222 0036 FFF7FEFF 		bl	rt_hw_interrupt_enable
 223              	.LVL26:
 224              	.L17:
 285:rtthread/src/object.c **** 
 286:rtthread/src/object.c ****     return index;
 287:rtthread/src/object.c **** }
 225              		.loc 1 287 0
 226 003a 2046     		mov	r0, r4
ARM GAS  /tmp/cc3gyAlT.s 			page 10


 227 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 228              	.LVL27:
 229              	.L22:
 268:rtthread/src/object.c **** 
 230              		.loc 1 268 0
 231 0040 0024     		movs	r4, #0
 232 0042 FAE7     		b	.L17
 233              	.LVL28:
 234              	.L23:
 271:rtthread/src/object.c **** 
 235              		.loc 1 271 0
 236 0044 0024     		movs	r4, #0
 237 0046 F8E7     		b	.L17
 238              		.cfi_endproc
 239              	.LFE18:
 241              		.section	.text.rt_object_init,"ax",%progbits
 242              		.align	1
 243              		.global	rt_object_init
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu softvfp
 249              	rt_object_init:
 250              	.LFB19:
 288:rtthread/src/object.c **** 
 289:rtthread/src/object.c **** /**
 290:rtthread/src/object.c ****  * This function will initialize an object and add it to object system
 291:rtthread/src/object.c ****  * management.
 292:rtthread/src/object.c ****  *
 293:rtthread/src/object.c ****  * @param object the specified object to be initialized.
 294:rtthread/src/object.c ****  * @param type the object type.
 295:rtthread/src/object.c ****  * @param name the object name. In system, the object's name must be unique.
 296:rtthread/src/object.c ****  */
 297:rtthread/src/object.c **** void rt_object_init(struct rt_object         *object,
 298:rtthread/src/object.c ****                     enum rt_object_class_type type,
 299:rtthread/src/object.c ****                     const char               *name)
 300:rtthread/src/object.c **** {
 251              		.loc 1 300 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              	.LVL29:
 256 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 257              	.LCFI2:
 258              		.cfi_def_cfa_offset 24
 259              		.cfi_offset 4, -24
 260              		.cfi_offset 5, -20
 261              		.cfi_offset 6, -16
 262              		.cfi_offset 7, -12
 263              		.cfi_offset 8, -8
 264              		.cfi_offset 14, -4
 265 0004 0646     		mov	r6, r0
 266 0006 0F46     		mov	r7, r1
 267 0008 9046     		mov	r8, r2
 268              	.LVL30:
 301:rtthread/src/object.c ****     register rt_base_t temp;
 302:rtthread/src/object.c ****     struct rt_list_node *node = RT_NULL;
ARM GAS  /tmp/cc3gyAlT.s 			page 11


 303:rtthread/src/object.c ****     struct rt_object_information *information;
 304:rtthread/src/object.c **** 
 305:rtthread/src/object.c ****     /* get object information */
 306:rtthread/src/object.c ****     information = rt_object_get_information(type);
 269              		.loc 1 306 0
 270 000a 0846     		mov	r0, r1
 271              	.LVL31:
 272 000c FFF7FEFF 		bl	rt_object_get_information
 273              	.LVL32:
 274 0010 0546     		mov	r5, r0
 275              	.LVL33:
 307:rtthread/src/object.c ****     RT_ASSERT(information != RT_NULL);
 308:rtthread/src/object.c **** 
 309:rtthread/src/object.c ****     /* check object type to avoid re-initialization */
 310:rtthread/src/object.c **** 
 311:rtthread/src/object.c ****     /* enter critical */
 312:rtthread/src/object.c ****     rt_enter_critical();
 276              		.loc 1 312 0
 277 0012 FFF7FEFF 		bl	rt_enter_critical
 278              	.LVL34:
 313:rtthread/src/object.c ****     /* try to find object */
 314:rtthread/src/object.c ****     for (node  = information->object_list.next;
 279              		.loc 1 314 0
 280 0016 6B68     		ldr	r3, [r5, #4]
 281              	.LVL35:
 282 0018 00E0     		b	.L26
 283              	.L27:
 284              	.LVL36:
 315:rtthread/src/object.c ****             node != &(information->object_list);
 316:rtthread/src/object.c ****             node  = node->next)
 285              		.loc 1 316 0
 286 001a 1B68     		ldr	r3, [r3]
 287              	.LVL37:
 288              	.L26:
 315:rtthread/src/object.c ****             node != &(information->object_list);
 289              		.loc 1 315 0 discriminator 1
 290 001c 2C1D     		adds	r4, r5, #4
 314:rtthread/src/object.c ****             node != &(information->object_list);
 291              		.loc 1 314 0 discriminator 1
 292 001e 9C42     		cmp	r4, r3
 293 0020 FBD1     		bne	.L27
 317:rtthread/src/object.c ****     {
 318:rtthread/src/object.c ****         struct rt_object *obj;
 319:rtthread/src/object.c **** 
 320:rtthread/src/object.c ****         obj = rt_list_entry(node, struct rt_object, list);
 321:rtthread/src/object.c ****         if (obj) /* skip warning when disable debug */
 322:rtthread/src/object.c ****         {
 323:rtthread/src/object.c ****             RT_ASSERT(obj != object);
 324:rtthread/src/object.c ****         }
 325:rtthread/src/object.c ****     }
 326:rtthread/src/object.c ****     /* leave critical */
 327:rtthread/src/object.c ****     rt_exit_critical();
 294              		.loc 1 327 0
 295 0022 FFF7FEFF 		bl	rt_exit_critical
 296              	.LVL38:
 328:rtthread/src/object.c **** 
 329:rtthread/src/object.c ****     /* initialize object's parameters */
ARM GAS  /tmp/cc3gyAlT.s 			page 12


 330:rtthread/src/object.c ****     /* set object type to static */
 331:rtthread/src/object.c ****     object->type = type | RT_Object_Class_Static;
 297              		.loc 1 331 0
 298 0026 67F07F07 		orn	r7, r7, #127
 299 002a 3772     		strb	r7, [r6, #8]
 332:rtthread/src/object.c ****     /* copy name */
 333:rtthread/src/object.c ****     rt_strncpy(object->name, name, RT_NAME_MAX);
 300              		.loc 1 333 0
 301 002c 0822     		movs	r2, #8
 302 002e 4146     		mov	r1, r8
 303 0030 3046     		mov	r0, r6
 304 0032 FFF7FEFF 		bl	rt_strncpy
 305              	.LVL39:
 334:rtthread/src/object.c **** 
 335:rtthread/src/object.c ****     RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
 336:rtthread/src/object.c **** 
 337:rtthread/src/object.c ****     /* lock interrupt */
 338:rtthread/src/object.c ****     temp = rt_hw_interrupt_disable();
 306              		.loc 1 338 0
 307 0036 FFF7FEFF 		bl	rt_hw_interrupt_disable
 308              	.LVL40:
 339:rtthread/src/object.c **** 
 340:rtthread/src/object.c ****     /* insert object into information object list */
 341:rtthread/src/object.c ****     rt_list_insert_after(&(information->object_list), &(object->list));
 309              		.loc 1 341 0
 310 003a 06F10C03 		add	r3, r6, #12
 311              	.LVL41:
 312              	.LBB7:
 313              	.LBB8:
 314              		.file 2 "rtthread/include/rtservice.h"
   1:rtthread/include/rtservice.h **** /*
   2:rtthread/include/rtservice.h ****  * Copyright (c) 2006-2021, RT-Thread Development Team
   3:rtthread/include/rtservice.h ****  *
   4:rtthread/include/rtservice.h ****  * SPDX-License-Identifier: Apache-2.0
   5:rtthread/include/rtservice.h ****  *
   6:rtthread/include/rtservice.h ****  * Change Logs:
   7:rtthread/include/rtservice.h ****  * Date           Author       Notes
   8:rtthread/include/rtservice.h ****  * 2006-03-16     Bernard      the first version
   9:rtthread/include/rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  10:rtthread/include/rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  11:rtthread/include/rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  12:rtthread/include/rtservice.h ****  * 2017-11-15     JasonJia     Modify rt_slist_foreach to rt_slist_for_each_entry.
  13:rtthread/include/rtservice.h ****  *                             Make code cleanup.
  14:rtthread/include/rtservice.h ****  */
  15:rtthread/include/rtservice.h **** 
  16:rtthread/include/rtservice.h **** #ifndef __RT_SERVICE_H__
  17:rtthread/include/rtservice.h **** #define __RT_SERVICE_H__
  18:rtthread/include/rtservice.h **** 
  19:rtthread/include/rtservice.h **** #ifdef __cplusplus
  20:rtthread/include/rtservice.h **** extern "C" {
  21:rtthread/include/rtservice.h **** #endif
  22:rtthread/include/rtservice.h **** 
  23:rtthread/include/rtservice.h **** /**
  24:rtthread/include/rtservice.h ****  * @addtogroup KernelService
  25:rtthread/include/rtservice.h ****  */
  26:rtthread/include/rtservice.h **** 
  27:rtthread/include/rtservice.h **** /**@{*/
ARM GAS  /tmp/cc3gyAlT.s 			page 13


  28:rtthread/include/rtservice.h **** 
  29:rtthread/include/rtservice.h **** /**
  30:rtthread/include/rtservice.h ****  * rt_container_of - return the member address of ptr, if the type of ptr is the
  31:rtthread/include/rtservice.h ****  * struct type.
  32:rtthread/include/rtservice.h ****  */
  33:rtthread/include/rtservice.h **** #define rt_container_of(ptr, type, member) \
  34:rtthread/include/rtservice.h ****     ((type *)((char *)(ptr) - (unsigned long)(&((type *)0)->member)))
  35:rtthread/include/rtservice.h **** 
  36:rtthread/include/rtservice.h **** 
  37:rtthread/include/rtservice.h **** /**
  38:rtthread/include/rtservice.h ****  * @brief initialize a list object
  39:rtthread/include/rtservice.h ****  */
  40:rtthread/include/rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  41:rtthread/include/rtservice.h **** 
  42:rtthread/include/rtservice.h **** /**
  43:rtthread/include/rtservice.h ****  * @brief initialize a list
  44:rtthread/include/rtservice.h ****  *
  45:rtthread/include/rtservice.h ****  * @param l list to be initialized
  46:rtthread/include/rtservice.h ****  */
  47:rtthread/include/rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  48:rtthread/include/rtservice.h **** {
  49:rtthread/include/rtservice.h ****     l->next = l->prev = l;
  50:rtthread/include/rtservice.h **** }
  51:rtthread/include/rtservice.h **** 
  52:rtthread/include/rtservice.h **** /**
  53:rtthread/include/rtservice.h ****  * @brief insert a node after a list
  54:rtthread/include/rtservice.h ****  *
  55:rtthread/include/rtservice.h ****  * @param l list to insert it
  56:rtthread/include/rtservice.h ****  * @param n new node to be inserted
  57:rtthread/include/rtservice.h ****  */
  58:rtthread/include/rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
  59:rtthread/include/rtservice.h **** {
  60:rtthread/include/rtservice.h ****     l->next->prev = n;
 315              		.loc 2 60 0
 316 003e 6A68     		ldr	r2, [r5, #4]
 317 0040 5360     		str	r3, [r2, #4]
  61:rtthread/include/rtservice.h ****     n->next = l->next;
 318              		.loc 2 61 0
 319 0042 6A68     		ldr	r2, [r5, #4]
 320 0044 F260     		str	r2, [r6, #12]
  62:rtthread/include/rtservice.h **** 
  63:rtthread/include/rtservice.h ****     l->next = n;
 321              		.loc 2 63 0
 322 0046 6B60     		str	r3, [r5, #4]
  64:rtthread/include/rtservice.h ****     n->prev = l;
 323              		.loc 2 64 0
 324 0048 3461     		str	r4, [r6, #16]
 325              	.LVL42:
 326              	.LBE8:
 327              	.LBE7:
 342:rtthread/src/object.c **** 
 343:rtthread/src/object.c ****     /* unlock interrupt */
 344:rtthread/src/object.c ****     rt_hw_interrupt_enable(temp);
 328              		.loc 1 344 0
 329 004a FFF7FEFF 		bl	rt_hw_interrupt_enable
 330              	.LVL43:
 345:rtthread/src/object.c **** }
ARM GAS  /tmp/cc3gyAlT.s 			page 14


 331              		.loc 1 345 0
 332 004e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 333              		.cfi_endproc
 334              	.LFE19:
 336              		.section	.text.rt_object_detach,"ax",%progbits
 337              		.align	1
 338              		.global	rt_object_detach
 339              		.syntax unified
 340              		.thumb
 341              		.thumb_func
 342              		.fpu softvfp
 344              	rt_object_detach:
 345              	.LFB20:
 346:rtthread/src/object.c **** 
 347:rtthread/src/object.c **** /**
 348:rtthread/src/object.c ****  * This function will detach a static object from object system,
 349:rtthread/src/object.c ****  * and the memory of static object is not freed.
 350:rtthread/src/object.c ****  *
 351:rtthread/src/object.c ****  * @param object the specified object to be detached.
 352:rtthread/src/object.c ****  */
 353:rtthread/src/object.c **** void rt_object_detach(rt_object_t object)
 354:rtthread/src/object.c **** {
 346              		.loc 1 354 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350              	.LVL44:
 351 0000 10B5     		push	{r4, lr}
 352              	.LCFI3:
 353              		.cfi_def_cfa_offset 8
 354              		.cfi_offset 4, -8
 355              		.cfi_offset 14, -4
 356 0002 0446     		mov	r4, r0
 355:rtthread/src/object.c ****     register rt_base_t temp;
 356:rtthread/src/object.c **** 
 357:rtthread/src/object.c ****     /* object check */
 358:rtthread/src/object.c ****     RT_ASSERT(object != RT_NULL);
 359:rtthread/src/object.c **** 
 360:rtthread/src/object.c ****     RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
 361:rtthread/src/object.c **** 
 362:rtthread/src/object.c ****     /* reset object type */
 363:rtthread/src/object.c ****     object->type = 0;
 357              		.loc 1 363 0
 358 0004 0023     		movs	r3, #0
 359 0006 0372     		strb	r3, [r0, #8]
 364:rtthread/src/object.c **** 
 365:rtthread/src/object.c ****     /* lock interrupt */
 366:rtthread/src/object.c ****     temp = rt_hw_interrupt_disable();
 360              		.loc 1 366 0
 361 0008 FFF7FEFF 		bl	rt_hw_interrupt_disable
 362              	.LVL45:
 367:rtthread/src/object.c **** 
 368:rtthread/src/object.c ****     /* remove from old list */
 369:rtthread/src/object.c ****     rt_list_remove(&(object->list));
 363              		.loc 1 369 0
 364 000c 04F10C03 		add	r3, r4, #12
 365              	.LVL46:
ARM GAS  /tmp/cc3gyAlT.s 			page 15


 366              	.LBB9:
 367              	.LBB10:
  65:rtthread/include/rtservice.h **** }
  66:rtthread/include/rtservice.h **** 
  67:rtthread/include/rtservice.h **** /**
  68:rtthread/include/rtservice.h ****  * @brief insert a node before a list
  69:rtthread/include/rtservice.h ****  *
  70:rtthread/include/rtservice.h ****  * @param n new node to be inserted
  71:rtthread/include/rtservice.h ****  * @param l list to insert it
  72:rtthread/include/rtservice.h ****  */
  73:rtthread/include/rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  74:rtthread/include/rtservice.h **** {
  75:rtthread/include/rtservice.h ****     l->prev->next = n;
  76:rtthread/include/rtservice.h ****     n->prev = l->prev;
  77:rtthread/include/rtservice.h **** 
  78:rtthread/include/rtservice.h ****     l->prev = n;
  79:rtthread/include/rtservice.h ****     n->next = l;
  80:rtthread/include/rtservice.h **** }
  81:rtthread/include/rtservice.h **** 
  82:rtthread/include/rtservice.h **** /**
  83:rtthread/include/rtservice.h ****  * @brief remove node from list.
  84:rtthread/include/rtservice.h ****  * @param n the node to remove from the list.
  85:rtthread/include/rtservice.h ****  */
  86:rtthread/include/rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
  87:rtthread/include/rtservice.h **** {
  88:rtthread/include/rtservice.h ****     n->next->prev = n->prev;
 368              		.loc 2 88 0
 369 0010 E268     		ldr	r2, [r4, #12]
 370 0012 2169     		ldr	r1, [r4, #16]
 371 0014 5160     		str	r1, [r2, #4]
  89:rtthread/include/rtservice.h ****     n->prev->next = n->next;
 372              		.loc 2 89 0
 373 0016 2269     		ldr	r2, [r4, #16]
 374 0018 E168     		ldr	r1, [r4, #12]
 375 001a 1160     		str	r1, [r2]
  90:rtthread/include/rtservice.h **** 
  91:rtthread/include/rtservice.h ****     n->next = n->prev = n;
 376              		.loc 2 91 0
 377 001c 2361     		str	r3, [r4, #16]
 378 001e E360     		str	r3, [r4, #12]
 379              	.LVL47:
 380              	.LBE10:
 381              	.LBE9:
 370:rtthread/src/object.c **** 
 371:rtthread/src/object.c ****     /* unlock interrupt */
 372:rtthread/src/object.c ****     rt_hw_interrupt_enable(temp);
 382              		.loc 1 372 0
 383 0020 FFF7FEFF 		bl	rt_hw_interrupt_enable
 384              	.LVL48:
 373:rtthread/src/object.c **** }
 385              		.loc 1 373 0
 386 0024 10BD     		pop	{r4, pc}
 387              		.cfi_endproc
 388              	.LFE20:
 390              		.section	.text.rt_object_is_systemobject,"ax",%progbits
 391              		.align	1
 392              		.global	rt_object_is_systemobject
ARM GAS  /tmp/cc3gyAlT.s 			page 16


 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 396              		.fpu softvfp
 398              	rt_object_is_systemobject:
 399              	.LFB21:
 374:rtthread/src/object.c **** 
 375:rtthread/src/object.c **** #ifdef RT_USING_HEAP
 376:rtthread/src/object.c **** /**
 377:rtthread/src/object.c ****  * This function will allocate an object from object system
 378:rtthread/src/object.c ****  *
 379:rtthread/src/object.c ****  * @param type the type of object
 380:rtthread/src/object.c ****  * @param name the object name. In system, the object's name must be unique.
 381:rtthread/src/object.c ****  *
 382:rtthread/src/object.c ****  * @return object
 383:rtthread/src/object.c ****  */
 384:rtthread/src/object.c **** rt_object_t rt_object_allocate(enum rt_object_class_type type, const char *name)
 385:rtthread/src/object.c **** {
 386:rtthread/src/object.c ****     struct rt_object *object;
 387:rtthread/src/object.c ****     register rt_base_t temp;
 388:rtthread/src/object.c ****     struct rt_object_information *information;
 389:rtthread/src/object.c **** 
 390:rtthread/src/object.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 391:rtthread/src/object.c **** 
 392:rtthread/src/object.c ****     /* get object information */
 393:rtthread/src/object.c ****     information = rt_object_get_information(type);
 394:rtthread/src/object.c ****     RT_ASSERT(information != RT_NULL);
 395:rtthread/src/object.c **** 
 396:rtthread/src/object.c ****     object = (struct rt_object *)RT_KERNEL_MALLOC(information->object_size);
 397:rtthread/src/object.c ****     if (object == RT_NULL)
 398:rtthread/src/object.c ****     {
 399:rtthread/src/object.c ****         /* no memory can be allocated */
 400:rtthread/src/object.c ****         return RT_NULL;
 401:rtthread/src/object.c ****     }
 402:rtthread/src/object.c **** 
 403:rtthread/src/object.c ****     /* clean memory data of object */
 404:rtthread/src/object.c ****     rt_memset(object, 0x0, information->object_size);
 405:rtthread/src/object.c **** 
 406:rtthread/src/object.c ****     /* initialize object's parameters */
 407:rtthread/src/object.c **** 
 408:rtthread/src/object.c ****     /* set object type */
 409:rtthread/src/object.c ****     object->type = type;
 410:rtthread/src/object.c **** 
 411:rtthread/src/object.c ****     /* set object flag */
 412:rtthread/src/object.c ****     object->flag = 0;
 413:rtthread/src/object.c **** 
 414:rtthread/src/object.c ****     /* copy name */
 415:rtthread/src/object.c ****     rt_strncpy(object->name, name, RT_NAME_MAX);
 416:rtthread/src/object.c **** 
 417:rtthread/src/object.c ****     RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
 418:rtthread/src/object.c **** 
 419:rtthread/src/object.c ****     /* lock interrupt */
 420:rtthread/src/object.c ****     temp = rt_hw_interrupt_disable();
 421:rtthread/src/object.c **** 
 422:rtthread/src/object.c ****     /* insert object into information object list */
 423:rtthread/src/object.c ****     rt_list_insert_after(&(information->object_list), &(object->list));
 424:rtthread/src/object.c **** 
ARM GAS  /tmp/cc3gyAlT.s 			page 17


 425:rtthread/src/object.c ****     /* unlock interrupt */
 426:rtthread/src/object.c ****     rt_hw_interrupt_enable(temp);
 427:rtthread/src/object.c **** 
 428:rtthread/src/object.c ****     /* return object */
 429:rtthread/src/object.c ****     return object;
 430:rtthread/src/object.c **** }
 431:rtthread/src/object.c **** 
 432:rtthread/src/object.c **** /**
 433:rtthread/src/object.c ****  * This function will delete an object and release object memory.
 434:rtthread/src/object.c ****  *
 435:rtthread/src/object.c ****  * @param object the specified object to be deleted.
 436:rtthread/src/object.c ****  */
 437:rtthread/src/object.c **** void rt_object_delete(rt_object_t object)
 438:rtthread/src/object.c **** {
 439:rtthread/src/object.c ****     register rt_base_t temp;
 440:rtthread/src/object.c **** 
 441:rtthread/src/object.c ****     /* object check */
 442:rtthread/src/object.c ****     RT_ASSERT(object != RT_NULL);
 443:rtthread/src/object.c ****     RT_ASSERT(!(object->type & RT_Object_Class_Static));
 444:rtthread/src/object.c **** 
 445:rtthread/src/object.c ****     RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
 446:rtthread/src/object.c **** 
 447:rtthread/src/object.c ****     /* reset object type */
 448:rtthread/src/object.c ****     object->type = RT_Object_Class_Null;
 449:rtthread/src/object.c **** 
 450:rtthread/src/object.c ****     /* lock interrupt */
 451:rtthread/src/object.c ****     temp = rt_hw_interrupt_disable();
 452:rtthread/src/object.c **** 
 453:rtthread/src/object.c ****     /* remove from old list */
 454:rtthread/src/object.c ****     rt_list_remove(&(object->list));
 455:rtthread/src/object.c **** 
 456:rtthread/src/object.c ****     /* unlock interrupt */
 457:rtthread/src/object.c ****     rt_hw_interrupt_enable(temp);
 458:rtthread/src/object.c **** 
 459:rtthread/src/object.c ****     /* free the memory of object */
 460:rtthread/src/object.c ****     RT_KERNEL_FREE(object);
 461:rtthread/src/object.c **** }
 462:rtthread/src/object.c **** #endif
 463:rtthread/src/object.c **** 
 464:rtthread/src/object.c **** /**
 465:rtthread/src/object.c ****  * This function will judge the object is system object or not.
 466:rtthread/src/object.c ****  * Normally, the system object is a static object and the type
 467:rtthread/src/object.c ****  * of object set to RT_Object_Class_Static.
 468:rtthread/src/object.c ****  *
 469:rtthread/src/object.c ****  * @param object the specified object to be judged.
 470:rtthread/src/object.c ****  *
 471:rtthread/src/object.c ****  * @return RT_TRUE if a system object, RT_FALSE for others.
 472:rtthread/src/object.c ****  */
 473:rtthread/src/object.c **** rt_bool_t rt_object_is_systemobject(rt_object_t object)
 474:rtthread/src/object.c **** {
 400              		.loc 1 474 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 404              		@ link register save eliminated.
 405              	.LVL49:
 475:rtthread/src/object.c ****     /* object check */
ARM GAS  /tmp/cc3gyAlT.s 			page 18


 476:rtthread/src/object.c ****     RT_ASSERT(object != RT_NULL);
 477:rtthread/src/object.c **** 
 478:rtthread/src/object.c ****     if (object->type & RT_Object_Class_Static)
 406              		.loc 1 478 0
 407 0000 90F90830 		ldrsb	r3, [r0, #8]
 408 0004 002B     		cmp	r3, #0
 409 0006 01DB     		blt	.L34
 479:rtthread/src/object.c ****         return RT_TRUE;
 480:rtthread/src/object.c **** 
 481:rtthread/src/object.c ****     return RT_FALSE;
 410              		.loc 1 481 0
 411 0008 0020     		movs	r0, #0
 412              	.LVL50:
 482:rtthread/src/object.c **** }
 413              		.loc 1 482 0
 414 000a 7047     		bx	lr
 415              	.LVL51:
 416              	.L34:
 479:rtthread/src/object.c ****         return RT_TRUE;
 417              		.loc 1 479 0
 418 000c 0120     		movs	r0, #1
 419              	.LVL52:
 420 000e 7047     		bx	lr
 421              		.cfi_endproc
 422              	.LFE21:
 424              		.section	.text.rt_object_get_type,"ax",%progbits
 425              		.align	1
 426              		.global	rt_object_get_type
 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 430              		.fpu softvfp
 432              	rt_object_get_type:
 433              	.LFB22:
 483:rtthread/src/object.c **** 
 484:rtthread/src/object.c **** /**
 485:rtthread/src/object.c ****  * This function will return the type of object without
 486:rtthread/src/object.c ****  * RT_Object_Class_Static flag.
 487:rtthread/src/object.c ****  *
 488:rtthread/src/object.c ****  * @param object the specified object to be get type.
 489:rtthread/src/object.c ****  *
 490:rtthread/src/object.c ****  * @return the type of object.
 491:rtthread/src/object.c ****  */
 492:rtthread/src/object.c **** rt_uint8_t rt_object_get_type(rt_object_t object)
 493:rtthread/src/object.c **** {
 434              		.loc 1 493 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439              	.LVL53:
 494:rtthread/src/object.c ****     /* object check */
 495:rtthread/src/object.c ****     RT_ASSERT(object != RT_NULL);
 496:rtthread/src/object.c **** 
 497:rtthread/src/object.c ****     return object->type & ~RT_Object_Class_Static;
 440              		.loc 1 497 0
 441 0000 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
ARM GAS  /tmp/cc3gyAlT.s 			page 19


 442              	.LVL54:
 498:rtthread/src/object.c **** }
 443              		.loc 1 498 0
 444 0002 00F07F00 		and	r0, r0, #127
 445 0006 7047     		bx	lr
 446              		.cfi_endproc
 447              	.LFE22:
 449              		.section	.text.rt_object_find,"ax",%progbits
 450              		.align	1
 451              		.global	rt_object_find
 452              		.syntax unified
 453              		.thumb
 454              		.thumb_func
 455              		.fpu softvfp
 457              	rt_object_find:
 458              	.LFB23:
 499:rtthread/src/object.c **** 
 500:rtthread/src/object.c **** /**
 501:rtthread/src/object.c ****  * This function will find specified name object from object
 502:rtthread/src/object.c ****  * container.
 503:rtthread/src/object.c ****  *
 504:rtthread/src/object.c ****  * @param name the specified name of object.
 505:rtthread/src/object.c ****  * @param type the type of object
 506:rtthread/src/object.c ****  *
 507:rtthread/src/object.c ****  * @return the found object or RT_NULL if there is no this object
 508:rtthread/src/object.c ****  * in object container.
 509:rtthread/src/object.c ****  *
 510:rtthread/src/object.c ****  * @note this function shall not be invoked in interrupt status.
 511:rtthread/src/object.c ****  */
 512:rtthread/src/object.c **** rt_object_t rt_object_find(const char *name, rt_uint8_t type)
 513:rtthread/src/object.c **** {
 459              		.loc 1 513 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463              	.LVL55:
 464 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 465              	.LCFI4:
 466              		.cfi_def_cfa_offset 24
 467              		.cfi_offset 3, -24
 468              		.cfi_offset 4, -20
 469              		.cfi_offset 5, -16
 470              		.cfi_offset 6, -12
 471              		.cfi_offset 7, -8
 472              		.cfi_offset 14, -4
 473 0002 0746     		mov	r7, r0
 474              	.LVL56:
 514:rtthread/src/object.c ****     struct rt_object *object = RT_NULL;
 515:rtthread/src/object.c ****     struct rt_list_node *node = RT_NULL;
 516:rtthread/src/object.c ****     struct rt_object_information *information = RT_NULL;
 517:rtthread/src/object.c **** 
 518:rtthread/src/object.c ****     information = rt_object_get_information((enum rt_object_class_type)type);
 475              		.loc 1 518 0
 476 0004 0846     		mov	r0, r1
 477              	.LVL57:
 478 0006 FFF7FEFF 		bl	rt_object_get_information
 479              	.LVL58:
ARM GAS  /tmp/cc3gyAlT.s 			page 20


 519:rtthread/src/object.c **** 
 520:rtthread/src/object.c ****     /* parameter check */
 521:rtthread/src/object.c ****     if ((name == RT_NULL) || (information == RT_NULL)) return RT_NULL;
 480              		.loc 1 521 0
 481 000a CFB1     		cbz	r7, .L41
 482 000c 0646     		mov	r6, r0
 483              		.loc 1 521 0 is_stmt 0 discriminator 2
 484 000e C8B1     		cbz	r0, .L42
 522:rtthread/src/object.c **** 
 523:rtthread/src/object.c ****     /* which is invoke in interrupt status */
 524:rtthread/src/object.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 525:rtthread/src/object.c **** 
 526:rtthread/src/object.c ****     /* enter critical */
 527:rtthread/src/object.c ****     rt_enter_critical();
 485              		.loc 1 527 0 is_stmt 1
 486 0010 FFF7FEFF 		bl	rt_enter_critical
 487              	.LVL59:
 528:rtthread/src/object.c **** 
 529:rtthread/src/object.c ****     /* try to find object */
 530:rtthread/src/object.c ****     rt_list_for_each(node, &(information->object_list))
 488              		.loc 1 530 0
 489 0014 7468     		ldr	r4, [r6, #4]
 490              	.LVL60:
 491              	.L38:
 492              		.loc 1 530 0 is_stmt 0 discriminator 1
 493 0016 331D     		adds	r3, r6, #4
 494 0018 A342     		cmp	r3, r4
 495 001a 0CD0     		beq	.L44
 531:rtthread/src/object.c ****     {
 532:rtthread/src/object.c ****         object = rt_list_entry(node, struct rt_object, list);
 496              		.loc 1 532 0 is_stmt 1
 497 001c A4F10C05 		sub	r5, r4, #12
 498              	.LVL61:
 533:rtthread/src/object.c ****         if (rt_strncmp(object->name, name, RT_NAME_MAX) == 0)
 499              		.loc 1 533 0
 500 0020 0822     		movs	r2, #8
 501 0022 3946     		mov	r1, r7
 502 0024 2846     		mov	r0, r5
 503 0026 FFF7FEFF 		bl	rt_strncmp
 504              	.LVL62:
 505 002a 08B1     		cbz	r0, .L45
 530:rtthread/src/object.c ****     {
 506              		.loc 1 530 0 discriminator 2
 507 002c 2468     		ldr	r4, [r4]
 508              	.LVL63:
 509 002e F2E7     		b	.L38
 510              	.L45:
 534:rtthread/src/object.c ****         {
 535:rtthread/src/object.c ****             /* leave critical */
 536:rtthread/src/object.c ****             rt_exit_critical();
 511              		.loc 1 536 0
 512 0030 FFF7FEFF 		bl	rt_exit_critical
 513              	.LVL64:
 537:rtthread/src/object.c **** 
 538:rtthread/src/object.c ****             return object;
 514              		.loc 1 538 0
 515 0034 02E0     		b	.L36
ARM GAS  /tmp/cc3gyAlT.s 			page 21


 516              	.LVL65:
 517              	.L44:
 539:rtthread/src/object.c ****         }
 540:rtthread/src/object.c ****     }
 541:rtthread/src/object.c **** 
 542:rtthread/src/object.c ****     /* leave critical */
 543:rtthread/src/object.c ****     rt_exit_critical();
 518              		.loc 1 543 0
 519 0036 FFF7FEFF 		bl	rt_exit_critical
 520              	.LVL66:
 544:rtthread/src/object.c **** 
 545:rtthread/src/object.c ****     return RT_NULL;
 521              		.loc 1 545 0
 522 003a 0025     		movs	r5, #0
 523              	.LVL67:
 524              	.L36:
 546:rtthread/src/object.c **** }
 525              		.loc 1 546 0
 526 003c 2846     		mov	r0, r5
 527 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 528              	.LVL68:
 529              	.L41:
 521:rtthread/src/object.c **** 
 530              		.loc 1 521 0
 531 0040 0025     		movs	r5, #0
 532 0042 FBE7     		b	.L36
 533              	.L42:
 534 0044 0025     		movs	r5, #0
 535 0046 F9E7     		b	.L36
 536              		.cfi_endproc
 537              	.LFE23:
 539              		.section	.data.rt_object_container,"aw",%progbits
 540              		.align	2
 541              		.set	.LANCHOR0,. + 0
 544              	rt_object_container:
 545 0000 01       		.byte	1
 546 0001 000000   		.space	3
 547 0004 04000000 		.word	rt_object_container+4
 548 0008 04000000 		.word	rt_object_container+4
 549 000c 78000000 		.word	120
 550 0010 02       		.byte	2
 551 0011 000000   		.space	3
 552 0014 14000000 		.word	rt_object_container+20
 553 0018 14000000 		.word	rt_object_container+20
 554 001c 20000000 		.word	32
 555 0020 05       		.byte	5
 556 0021 000000   		.space	3
 557 0024 24000000 		.word	rt_object_container+36
 558 0028 24000000 		.word	rt_object_container+36
 559 002c 30000000 		.word	48
 560 0030 0A       		.byte	10
 561 0031 000000   		.space	3
 562 0034 34000000 		.word	rt_object_container+52
 563 0038 34000000 		.word	rt_object_container+52
 564 003c 2C000000 		.word	44
 565              		.text
 566              	.Letext0:
ARM GAS  /tmp/cc3gyAlT.s 			page 22


 567              		.file 3 "rtthread/include/rtdef.h"
 568              		.file 4 "rtthread/include/rtthread.h"
 569              		.file 5 "rtthread/include/rthw.h"
ARM GAS  /tmp/cc3gyAlT.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 object.c
     /tmp/cc3gyAlT.s:16     .text.rt_system_object_init:0000000000000000 $t
     /tmp/cc3gyAlT.s:23     .text.rt_system_object_init:0000000000000000 rt_system_object_init
     /tmp/cc3gyAlT.s:37     .text.rt_object_get_information:0000000000000000 $t
     /tmp/cc3gyAlT.s:44     .text.rt_object_get_information:0000000000000000 rt_object_get_information
     /tmp/cc3gyAlT.s:84     .text.rt_object_get_information:0000000000000020 $d
     /tmp/cc3gyAlT.s:89     .text.rt_object_get_length:0000000000000000 $t
     /tmp/cc3gyAlT.s:96     .text.rt_object_get_length:0000000000000000 rt_object_get_length
     /tmp/cc3gyAlT.s:156    .text.rt_object_get_pointers:0000000000000000 $t
     /tmp/cc3gyAlT.s:163    .text.rt_object_get_pointers:0000000000000000 rt_object_get_pointers
     /tmp/cc3gyAlT.s:242    .text.rt_object_init:0000000000000000 $t
     /tmp/cc3gyAlT.s:249    .text.rt_object_init:0000000000000000 rt_object_init
     /tmp/cc3gyAlT.s:337    .text.rt_object_detach:0000000000000000 $t
     /tmp/cc3gyAlT.s:344    .text.rt_object_detach:0000000000000000 rt_object_detach
     /tmp/cc3gyAlT.s:391    .text.rt_object_is_systemobject:0000000000000000 $t
     /tmp/cc3gyAlT.s:398    .text.rt_object_is_systemobject:0000000000000000 rt_object_is_systemobject
     /tmp/cc3gyAlT.s:425    .text.rt_object_get_type:0000000000000000 $t
     /tmp/cc3gyAlT.s:432    .text.rt_object_get_type:0000000000000000 rt_object_get_type
     /tmp/cc3gyAlT.s:450    .text.rt_object_find:0000000000000000 $t
     /tmp/cc3gyAlT.s:457    .text.rt_object_find:0000000000000000 rt_object_find
     /tmp/cc3gyAlT.s:540    .data.rt_object_container:0000000000000000 $d
     /tmp/cc3gyAlT.s:544    .data.rt_object_container:0000000000000000 rt_object_container

UNDEFINED SYMBOLS
rt_hw_interrupt_disable
rt_hw_interrupt_enable
rt_enter_critical
rt_exit_critical
rt_strncpy
rt_strncmp
