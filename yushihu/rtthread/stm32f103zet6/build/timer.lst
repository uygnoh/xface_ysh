ARM GAS  /tmp/ccZMtG09.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"timer.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._rt_timer_init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	_rt_timer_init:
  23              	.LFB15:
  24              		.file 1 "rtthread/src/timer.c"
   1:rtthread/src/timer.c **** /*
   2:rtthread/src/timer.c ****  * Copyright (c) 2006-2021, RT-Thread Development Team
   3:rtthread/src/timer.c ****  *
   4:rtthread/src/timer.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rtthread/src/timer.c ****  *
   6:rtthread/src/timer.c ****  * Change Logs:
   7:rtthread/src/timer.c ****  * Date           Author       Notes
   8:rtthread/src/timer.c ****  * 2006-03-12     Bernard      first version
   9:rtthread/src/timer.c ****  * 2006-04-29     Bernard      implement thread timer
  10:rtthread/src/timer.c ****  * 2006-06-04     Bernard      implement rt_timer_control
  11:rtthread/src/timer.c ****  * 2006-08-10     Bernard      fix the periodic timer bug
  12:rtthread/src/timer.c ****  * 2006-09-03     Bernard      implement rt_timer_detach
  13:rtthread/src/timer.c ****  * 2009-11-11     LiJin        add soft timer
  14:rtthread/src/timer.c ****  * 2010-05-12     Bernard      fix the timer check bug.
  15:rtthread/src/timer.c ****  * 2010-11-02     Charlie      re-implement tick overflow issue
  16:rtthread/src/timer.c ****  * 2012-12-15     Bernard      fix the next timeout issue in soft timer
  17:rtthread/src/timer.c ****  * 2014-07-12     Bernard      does not lock scheduler when invoking soft-timer
  18:rtthread/src/timer.c ****  *                             timeout function.
  19:rtthread/src/timer.c ****  */
  20:rtthread/src/timer.c **** 
  21:rtthread/src/timer.c **** #include <rtthread.h>
  22:rtthread/src/timer.c **** #include <rthw.h>
  23:rtthread/src/timer.c **** 
  24:rtthread/src/timer.c **** /* hard timer list */
  25:rtthread/src/timer.c **** static rt_list_t rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL];
  26:rtthread/src/timer.c **** 
  27:rtthread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
  28:rtthread/src/timer.c **** 
  29:rtthread/src/timer.c **** #define RT_SOFT_TIMER_IDLE              1
  30:rtthread/src/timer.c **** #define RT_SOFT_TIMER_BUSY              0
  31:rtthread/src/timer.c **** 
  32:rtthread/src/timer.c **** #ifndef RT_TIMER_THREAD_STACK_SIZE
  33:rtthread/src/timer.c **** #define RT_TIMER_THREAD_STACK_SIZE     512
  34:rtthread/src/timer.c **** #endif
ARM GAS  /tmp/ccZMtG09.s 			page 2


  35:rtthread/src/timer.c **** 
  36:rtthread/src/timer.c **** #ifndef RT_TIMER_THREAD_PRIO
  37:rtthread/src/timer.c **** #define RT_TIMER_THREAD_PRIO           0
  38:rtthread/src/timer.c **** #endif
  39:rtthread/src/timer.c **** 
  40:rtthread/src/timer.c **** /* soft timer status */
  41:rtthread/src/timer.c **** static rt_uint8_t soft_timer_status = RT_SOFT_TIMER_IDLE;
  42:rtthread/src/timer.c **** /* soft timer list */
  43:rtthread/src/timer.c **** static rt_list_t rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL];
  44:rtthread/src/timer.c **** static struct rt_thread timer_thread;
  45:rtthread/src/timer.c **** ALIGN(RT_ALIGN_SIZE)
  46:rtthread/src/timer.c **** static rt_uint8_t timer_thread_stack[RT_TIMER_THREAD_STACK_SIZE];
  47:rtthread/src/timer.c **** #endif
  48:rtthread/src/timer.c **** 
  49:rtthread/src/timer.c **** #ifdef RT_USING_HOOK
  50:rtthread/src/timer.c **** extern void (*rt_object_take_hook)(struct rt_object *object);
  51:rtthread/src/timer.c **** extern void (*rt_object_put_hook)(struct rt_object *object);
  52:rtthread/src/timer.c **** static void (*rt_timer_enter_hook)(struct rt_timer *timer);
  53:rtthread/src/timer.c **** static void (*rt_timer_exit_hook)(struct rt_timer *timer);
  54:rtthread/src/timer.c **** 
  55:rtthread/src/timer.c **** /**
  56:rtthread/src/timer.c ****  * @addtogroup Hook
  57:rtthread/src/timer.c ****  */
  58:rtthread/src/timer.c **** 
  59:rtthread/src/timer.c **** /**@{*/
  60:rtthread/src/timer.c **** 
  61:rtthread/src/timer.c **** /**
  62:rtthread/src/timer.c ****  * This function will set a hook function, which will be invoked when enter
  63:rtthread/src/timer.c ****  * timer timeout callback function.
  64:rtthread/src/timer.c ****  *
  65:rtthread/src/timer.c ****  * @param hook the hook function
  66:rtthread/src/timer.c ****  */
  67:rtthread/src/timer.c **** void rt_timer_enter_sethook(void (*hook)(struct rt_timer *timer))
  68:rtthread/src/timer.c **** {
  69:rtthread/src/timer.c ****     rt_timer_enter_hook = hook;
  70:rtthread/src/timer.c **** }
  71:rtthread/src/timer.c **** 
  72:rtthread/src/timer.c **** /**
  73:rtthread/src/timer.c ****  * This function will set a hook function, which will be invoked when exit
  74:rtthread/src/timer.c ****  * timer timeout callback function.
  75:rtthread/src/timer.c ****  *
  76:rtthread/src/timer.c ****  * @param hook the hook function
  77:rtthread/src/timer.c ****  */
  78:rtthread/src/timer.c **** void rt_timer_exit_sethook(void (*hook)(struct rt_timer *timer))
  79:rtthread/src/timer.c **** {
  80:rtthread/src/timer.c ****     rt_timer_exit_hook = hook;
  81:rtthread/src/timer.c **** }
  82:rtthread/src/timer.c **** 
  83:rtthread/src/timer.c **** /**@}*/
  84:rtthread/src/timer.c **** #endif
  85:rtthread/src/timer.c **** 
  86:rtthread/src/timer.c **** static void _rt_timer_init(rt_timer_t timer,
  87:rtthread/src/timer.c ****                            void (*timeout)(void *parameter),
  88:rtthread/src/timer.c ****                            void      *parameter,
  89:rtthread/src/timer.c ****                            rt_tick_t  time,
  90:rtthread/src/timer.c ****                            rt_uint8_t flag)
  91:rtthread/src/timer.c **** {
ARM GAS  /tmp/ccZMtG09.s 			page 3


  25              		.loc 1 91 0
  26              		.cfi_startproc
  27              		@ args = 4, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
  31 0000 10B4     		push	{r4}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 4, -4
  92:rtthread/src/timer.c ****     int i;
  93:rtthread/src/timer.c **** 
  94:rtthread/src/timer.c ****     /* set flag */
  95:rtthread/src/timer.c ****     timer->parent.flag  = flag;
  96:rtthread/src/timer.c **** 
  97:rtthread/src/timer.c ****     /* set deactivated */
  98:rtthread/src/timer.c ****     timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  35              		.loc 1 98 0
  36 0002 9DF80440 		ldrb	r4, [sp, #4]	@ zero_extendqisi2
  37 0006 24F00104 		bic	r4, r4, #1
  38 000a 4472     		strb	r4, [r0, #9]
  99:rtthread/src/timer.c **** 
 100:rtthread/src/timer.c ****     timer->timeout_func = timeout;
  39              		.loc 1 100 0
  40 000c C161     		str	r1, [r0, #28]
 101:rtthread/src/timer.c ****     timer->parameter    = parameter;
  41              		.loc 1 101 0
  42 000e 0262     		str	r2, [r0, #32]
 102:rtthread/src/timer.c **** 
 103:rtthread/src/timer.c ****     timer->timeout_tick = 0;
  43              		.loc 1 103 0
  44 0010 0022     		movs	r2, #0
  45              	.LVL1:
  46 0012 8262     		str	r2, [r0, #40]
 104:rtthread/src/timer.c ****     timer->init_tick    = time;
  47              		.loc 1 104 0
  48 0014 4362     		str	r3, [r0, #36]
  49              	.LVL2:
 105:rtthread/src/timer.c **** 
 106:rtthread/src/timer.c ****     /* initialize timer list */
 107:rtthread/src/timer.c ****     for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  50              		.loc 1 107 0
  51 0016 1346     		mov	r3, r2
  52              	.LVL3:
  53              	.L2:
  54              		.loc 1 107 0 is_stmt 0 discriminator 1
  55 0018 002B     		cmp	r3, #0
  56 001a 01DD     		ble	.L3
 108:rtthread/src/timer.c ****     {
 109:rtthread/src/timer.c ****         rt_list_init(&(timer->row[i]));
 110:rtthread/src/timer.c ****     }
 111:rtthread/src/timer.c **** }
  57              		.loc 1 111 0 is_stmt 1
  58 001c 10BC     		pop	{r4}
  59              	.LCFI1:
  60              		.cfi_remember_state
  61              		.cfi_restore 4
ARM GAS  /tmp/ccZMtG09.s 			page 4


  62              		.cfi_def_cfa_offset 0
  63              	.LVL4:
  64 001e 7047     		bx	lr
  65              	.LVL5:
  66              	.L3:
  67              	.LCFI2:
  68              		.cfi_restore_state
 109:rtthread/src/timer.c ****     }
  69              		.loc 1 109 0 discriminator 3
  70 0020 9A1C     		adds	r2, r3, #2
  71 0022 00EBC202 		add	r2, r0, r2, lsl #3
  72 0026 111D     		adds	r1, r2, #4
  73              	.LVL6:
  74              	.LBB41:
  75              	.LBB42:
  76              		.file 2 "rtthread/include/rtservice.h"
   1:rtthread/include/rtservice.h **** /*
   2:rtthread/include/rtservice.h ****  * Copyright (c) 2006-2021, RT-Thread Development Team
   3:rtthread/include/rtservice.h ****  *
   4:rtthread/include/rtservice.h ****  * SPDX-License-Identifier: Apache-2.0
   5:rtthread/include/rtservice.h ****  *
   6:rtthread/include/rtservice.h ****  * Change Logs:
   7:rtthread/include/rtservice.h ****  * Date           Author       Notes
   8:rtthread/include/rtservice.h ****  * 2006-03-16     Bernard      the first version
   9:rtthread/include/rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  10:rtthread/include/rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  11:rtthread/include/rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  12:rtthread/include/rtservice.h ****  * 2017-11-15     JasonJia     Modify rt_slist_foreach to rt_slist_for_each_entry.
  13:rtthread/include/rtservice.h ****  *                             Make code cleanup.
  14:rtthread/include/rtservice.h ****  */
  15:rtthread/include/rtservice.h **** 
  16:rtthread/include/rtservice.h **** #ifndef __RT_SERVICE_H__
  17:rtthread/include/rtservice.h **** #define __RT_SERVICE_H__
  18:rtthread/include/rtservice.h **** 
  19:rtthread/include/rtservice.h **** #ifdef __cplusplus
  20:rtthread/include/rtservice.h **** extern "C" {
  21:rtthread/include/rtservice.h **** #endif
  22:rtthread/include/rtservice.h **** 
  23:rtthread/include/rtservice.h **** /**
  24:rtthread/include/rtservice.h ****  * @addtogroup KernelService
  25:rtthread/include/rtservice.h ****  */
  26:rtthread/include/rtservice.h **** 
  27:rtthread/include/rtservice.h **** /**@{*/
  28:rtthread/include/rtservice.h **** 
  29:rtthread/include/rtservice.h **** /**
  30:rtthread/include/rtservice.h ****  * rt_container_of - return the member address of ptr, if the type of ptr is the
  31:rtthread/include/rtservice.h ****  * struct type.
  32:rtthread/include/rtservice.h ****  */
  33:rtthread/include/rtservice.h **** #define rt_container_of(ptr, type, member) \
  34:rtthread/include/rtservice.h ****     ((type *)((char *)(ptr) - (unsigned long)(&((type *)0)->member)))
  35:rtthread/include/rtservice.h **** 
  36:rtthread/include/rtservice.h **** 
  37:rtthread/include/rtservice.h **** /**
  38:rtthread/include/rtservice.h ****  * @brief initialize a list object
  39:rtthread/include/rtservice.h ****  */
  40:rtthread/include/rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  41:rtthread/include/rtservice.h **** 
ARM GAS  /tmp/ccZMtG09.s 			page 5


  42:rtthread/include/rtservice.h **** /**
  43:rtthread/include/rtservice.h ****  * @brief initialize a list
  44:rtthread/include/rtservice.h ****  *
  45:rtthread/include/rtservice.h ****  * @param l list to be initialized
  46:rtthread/include/rtservice.h ****  */
  47:rtthread/include/rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  48:rtthread/include/rtservice.h **** {
  49:rtthread/include/rtservice.h ****     l->next = l->prev = l;
  77              		.loc 2 49 0 discriminator 3
  78 0028 9160     		str	r1, [r2, #8]
  79 002a 5160     		str	r1, [r2, #4]
  80              	.LVL7:
  81              	.LBE42:
  82              	.LBE41:
 107:rtthread/src/timer.c ****     {
  83              		.loc 1 107 0 discriminator 3
  84 002c 0133     		adds	r3, r3, #1
  85              	.LVL8:
  86 002e F3E7     		b	.L2
  87              		.cfi_endproc
  88              	.LFE15:
  90              		.section	.text.rt_timer_list_next_timeout,"ax",%progbits
  91              		.align	1
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu softvfp
  97              	rt_timer_list_next_timeout:
  98              	.LFB16:
 112:rtthread/src/timer.c **** 
 113:rtthread/src/timer.c **** /* the fist timer always in the last row */
 114:rtthread/src/timer.c **** static rt_tick_t rt_timer_list_next_timeout(rt_list_t timer_list[])
 115:rtthread/src/timer.c **** {
  99              		.loc 1 115 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              	.LVL9:
 104 0000 10B5     		push	{r4, lr}
 105              	.LCFI3:
 106              		.cfi_def_cfa_offset 8
 107              		.cfi_offset 4, -8
 108              		.cfi_offset 14, -4
 109 0002 0446     		mov	r4, r0
 110              	.LVL10:
 116:rtthread/src/timer.c ****     struct rt_timer *timer;
 117:rtthread/src/timer.c ****     register rt_base_t level;
 118:rtthread/src/timer.c ****     rt_tick_t timeout_tick = RT_TICK_MAX;
 119:rtthread/src/timer.c **** 
 120:rtthread/src/timer.c ****     /* disable interrupt */
 121:rtthread/src/timer.c ****     level = rt_hw_interrupt_disable();
 111              		.loc 1 121 0
 112 0004 FFF7FEFF 		bl	rt_hw_interrupt_disable
 113              	.LVL11:
 114              	.LBB43:
 115              	.LBB44:
  50:rtthread/include/rtservice.h **** }
ARM GAS  /tmp/ccZMtG09.s 			page 6


  51:rtthread/include/rtservice.h **** 
  52:rtthread/include/rtservice.h **** /**
  53:rtthread/include/rtservice.h ****  * @brief insert a node after a list
  54:rtthread/include/rtservice.h ****  *
  55:rtthread/include/rtservice.h ****  * @param l list to insert it
  56:rtthread/include/rtservice.h ****  * @param n new node to be inserted
  57:rtthread/include/rtservice.h ****  */
  58:rtthread/include/rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
  59:rtthread/include/rtservice.h **** {
  60:rtthread/include/rtservice.h ****     l->next->prev = n;
  61:rtthread/include/rtservice.h ****     n->next = l->next;
  62:rtthread/include/rtservice.h **** 
  63:rtthread/include/rtservice.h ****     l->next = n;
  64:rtthread/include/rtservice.h ****     n->prev = l;
  65:rtthread/include/rtservice.h **** }
  66:rtthread/include/rtservice.h **** 
  67:rtthread/include/rtservice.h **** /**
  68:rtthread/include/rtservice.h ****  * @brief insert a node before a list
  69:rtthread/include/rtservice.h ****  *
  70:rtthread/include/rtservice.h ****  * @param n new node to be inserted
  71:rtthread/include/rtservice.h ****  * @param l list to insert it
  72:rtthread/include/rtservice.h ****  */
  73:rtthread/include/rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  74:rtthread/include/rtservice.h **** {
  75:rtthread/include/rtservice.h ****     l->prev->next = n;
  76:rtthread/include/rtservice.h ****     n->prev = l->prev;
  77:rtthread/include/rtservice.h **** 
  78:rtthread/include/rtservice.h ****     l->prev = n;
  79:rtthread/include/rtservice.h ****     n->next = l;
  80:rtthread/include/rtservice.h **** }
  81:rtthread/include/rtservice.h **** 
  82:rtthread/include/rtservice.h **** /**
  83:rtthread/include/rtservice.h ****  * @brief remove node from list.
  84:rtthread/include/rtservice.h ****  * @param n the node to remove from the list.
  85:rtthread/include/rtservice.h ****  */
  86:rtthread/include/rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
  87:rtthread/include/rtservice.h **** {
  88:rtthread/include/rtservice.h ****     n->next->prev = n->prev;
  89:rtthread/include/rtservice.h ****     n->prev->next = n->next;
  90:rtthread/include/rtservice.h **** 
  91:rtthread/include/rtservice.h ****     n->next = n->prev = n;
  92:rtthread/include/rtservice.h **** }
  93:rtthread/include/rtservice.h **** 
  94:rtthread/include/rtservice.h **** /**
  95:rtthread/include/rtservice.h ****  * @brief tests whether a list is empty
  96:rtthread/include/rtservice.h ****  * @param l the list to test.
  97:rtthread/include/rtservice.h ****  */
  98:rtthread/include/rtservice.h **** rt_inline int rt_list_isempty(const rt_list_t *l)
  99:rtthread/include/rtservice.h **** {
 100:rtthread/include/rtservice.h ****     return l->next == l;
 116              		.loc 2 100 0
 117 0008 2368     		ldr	r3, [r4]
 118              	.LVL12:
 119              	.LBE44:
 120              	.LBE43:
 122:rtthread/src/timer.c **** 
 123:rtthread/src/timer.c ****     if (!rt_list_isempty(&timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
ARM GAS  /tmp/ccZMtG09.s 			page 7


 121              		.loc 1 123 0
 122 000a 9C42     		cmp	r4, r3
 123 000c 04D0     		beq	.L7
 124              	.LVL13:
 124:rtthread/src/timer.c ****     {
 125:rtthread/src/timer.c ****         timer = rt_list_entry(timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
 126:rtthread/src/timer.c ****                               struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
 127:rtthread/src/timer.c ****         timeout_tick = timer->timeout_tick;
 125              		.loc 1 127 0
 126 000e 5C69     		ldr	r4, [r3, #20]
 127              	.LVL14:
 128              	.L6:
 128:rtthread/src/timer.c ****     }
 129:rtthread/src/timer.c **** 
 130:rtthread/src/timer.c ****     /* enable interrupt */
 131:rtthread/src/timer.c ****     rt_hw_interrupt_enable(level);
 129              		.loc 1 131 0
 130 0010 FFF7FEFF 		bl	rt_hw_interrupt_enable
 131              	.LVL15:
 132:rtthread/src/timer.c **** 
 133:rtthread/src/timer.c ****     return timeout_tick;
 134:rtthread/src/timer.c **** }
 132              		.loc 1 134 0
 133 0014 2046     		mov	r0, r4
 134 0016 10BD     		pop	{r4, pc}
 135              	.LVL16:
 136              	.L7:
 118:rtthread/src/timer.c **** 
 137              		.loc 1 118 0
 138 0018 4FF0FF34 		mov	r4, #-1
 139              	.LVL17:
 140 001c F8E7     		b	.L6
 141              		.cfi_endproc
 142              	.LFE16:
 144              		.section	.text.rt_timer_init,"ax",%progbits
 145              		.align	1
 146              		.global	rt_timer_init
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu softvfp
 152              	rt_timer_init:
 153              	.LFB18:
 135:rtthread/src/timer.c **** 
 136:rtthread/src/timer.c **** rt_inline void _rt_timer_remove(rt_timer_t timer)
 137:rtthread/src/timer.c **** {
 138:rtthread/src/timer.c ****     int i;
 139:rtthread/src/timer.c **** 
 140:rtthread/src/timer.c ****     for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 141:rtthread/src/timer.c ****     {
 142:rtthread/src/timer.c ****         rt_list_remove(&timer->row[i]);
 143:rtthread/src/timer.c ****     }
 144:rtthread/src/timer.c **** }
 145:rtthread/src/timer.c **** 
 146:rtthread/src/timer.c **** #if RT_DEBUG_TIMER
 147:rtthread/src/timer.c **** static int rt_timer_count_height(struct rt_timer *timer)
 148:rtthread/src/timer.c **** {
ARM GAS  /tmp/ccZMtG09.s 			page 8


 149:rtthread/src/timer.c ****     int i, cnt = 0;
 150:rtthread/src/timer.c **** 
 151:rtthread/src/timer.c ****     for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 152:rtthread/src/timer.c ****     {
 153:rtthread/src/timer.c ****         if (!rt_list_isempty(&timer->row[i]))
 154:rtthread/src/timer.c ****             cnt++;
 155:rtthread/src/timer.c ****     }
 156:rtthread/src/timer.c ****     return cnt;
 157:rtthread/src/timer.c **** }
 158:rtthread/src/timer.c **** 
 159:rtthread/src/timer.c **** void rt_timer_dump(rt_list_t timer_heads[])
 160:rtthread/src/timer.c **** {
 161:rtthread/src/timer.c ****     rt_list_t *list;
 162:rtthread/src/timer.c **** 
 163:rtthread/src/timer.c ****     for (list = timer_heads[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
 164:rtthread/src/timer.c ****          list != &timer_heads[RT_TIMER_SKIP_LIST_LEVEL - 1];
 165:rtthread/src/timer.c ****          list = list->next)
 166:rtthread/src/timer.c ****     {
 167:rtthread/src/timer.c ****         struct rt_timer *timer = rt_list_entry(list,
 168:rtthread/src/timer.c ****                                                struct rt_timer,
 169:rtthread/src/timer.c ****                                                row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
 170:rtthread/src/timer.c ****         rt_kprintf("%d", rt_timer_count_height(timer));
 171:rtthread/src/timer.c ****     }
 172:rtthread/src/timer.c ****     rt_kprintf("\n");
 173:rtthread/src/timer.c **** }
 174:rtthread/src/timer.c **** #endif
 175:rtthread/src/timer.c **** 
 176:rtthread/src/timer.c **** /**
 177:rtthread/src/timer.c ****  * @addtogroup Clock
 178:rtthread/src/timer.c ****  */
 179:rtthread/src/timer.c **** 
 180:rtthread/src/timer.c **** /**@{*/
 181:rtthread/src/timer.c **** 
 182:rtthread/src/timer.c **** /**
 183:rtthread/src/timer.c ****  * This function will initialize a timer, normally this function is used to
 184:rtthread/src/timer.c ****  * initialize a static timer object.
 185:rtthread/src/timer.c ****  *
 186:rtthread/src/timer.c ****  * @param timer the static timer object
 187:rtthread/src/timer.c ****  * @param name the name of timer
 188:rtthread/src/timer.c ****  * @param timeout the timeout function
 189:rtthread/src/timer.c ****  * @param parameter the parameter of timeout function
 190:rtthread/src/timer.c ****  * @param time the tick of timer
 191:rtthread/src/timer.c ****  * @param flag the flag of timer
 192:rtthread/src/timer.c ****  */
 193:rtthread/src/timer.c **** void rt_timer_init(rt_timer_t  timer,
 194:rtthread/src/timer.c ****                    const char *name,
 195:rtthread/src/timer.c ****                    void (*timeout)(void *parameter),
 196:rtthread/src/timer.c ****                    void       *parameter,
 197:rtthread/src/timer.c ****                    rt_tick_t   time,
 198:rtthread/src/timer.c ****                    rt_uint8_t  flag)
 199:rtthread/src/timer.c **** {
 154              		.loc 1 199 0
 155              		.cfi_startproc
 156              		@ args = 8, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              	.LVL18:
 159 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccZMtG09.s 			page 9


 160              	.LCFI4:
 161              		.cfi_def_cfa_offset 16
 162              		.cfi_offset 4, -16
 163              		.cfi_offset 5, -12
 164              		.cfi_offset 6, -8
 165              		.cfi_offset 14, -4
 166 0002 82B0     		sub	sp, sp, #8
 167              	.LCFI5:
 168              		.cfi_def_cfa_offset 24
 169 0004 0446     		mov	r4, r0
 170 0006 1546     		mov	r5, r2
 171 0008 1E46     		mov	r6, r3
 200:rtthread/src/timer.c ****     /* timer check */
 201:rtthread/src/timer.c ****     RT_ASSERT(timer != RT_NULL);
 202:rtthread/src/timer.c **** 
 203:rtthread/src/timer.c ****     /* timer object initialization */
 204:rtthread/src/timer.c ****     rt_object_init((rt_object_t)timer, RT_Object_Class_Timer, name);
 172              		.loc 1 204 0
 173 000a 0A46     		mov	r2, r1
 174              	.LVL19:
 175 000c 0A21     		movs	r1, #10
 176              	.LVL20:
 177 000e FFF7FEFF 		bl	rt_object_init
 178              	.LVL21:
 205:rtthread/src/timer.c **** 
 206:rtthread/src/timer.c ****     _rt_timer_init(timer, timeout, parameter, time, flag);
 179              		.loc 1 206 0
 180 0012 9DF81C30 		ldrb	r3, [sp, #28]	@ zero_extendqisi2
 181 0016 0093     		str	r3, [sp]
 182 0018 069B     		ldr	r3, [sp, #24]
 183 001a 3246     		mov	r2, r6
 184 001c 2946     		mov	r1, r5
 185 001e 2046     		mov	r0, r4
 186 0020 FFF7FEFF 		bl	_rt_timer_init
 187              	.LVL22:
 207:rtthread/src/timer.c **** }
 188              		.loc 1 207 0
 189 0024 02B0     		add	sp, sp, #8
 190              	.LCFI6:
 191              		.cfi_def_cfa_offset 16
 192              		@ sp needed
 193 0026 70BD     		pop	{r4, r5, r6, pc}
 194              		.cfi_endproc
 195              	.LFE18:
 197              		.section	.text.rt_timer_detach,"ax",%progbits
 198              		.align	1
 199              		.global	rt_timer_detach
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 203              		.fpu softvfp
 205              	rt_timer_detach:
 206              	.LFB19:
 208:rtthread/src/timer.c **** 
 209:rtthread/src/timer.c **** /**
 210:rtthread/src/timer.c ****  * This function will detach a timer from timer management.
 211:rtthread/src/timer.c ****  *
ARM GAS  /tmp/ccZMtG09.s 			page 10


 212:rtthread/src/timer.c ****  * @param timer the static timer object
 213:rtthread/src/timer.c ****  *
 214:rtthread/src/timer.c ****  * @return the operation status, RT_EOK on OK; RT_ERROR on error
 215:rtthread/src/timer.c ****  */
 216:rtthread/src/timer.c **** rt_err_t rt_timer_detach(rt_timer_t timer)
 217:rtthread/src/timer.c **** {
 207              		.loc 1 217 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              	.LVL23:
 212 0000 70B5     		push	{r4, r5, r6, lr}
 213              	.LCFI7:
 214              		.cfi_def_cfa_offset 16
 215              		.cfi_offset 4, -16
 216              		.cfi_offset 5, -12
 217              		.cfi_offset 6, -8
 218              		.cfi_offset 14, -4
 219 0002 0446     		mov	r4, r0
 218:rtthread/src/timer.c ****     register rt_base_t level;
 219:rtthread/src/timer.c **** 
 220:rtthread/src/timer.c ****     /* timer check */
 221:rtthread/src/timer.c ****     RT_ASSERT(timer != RT_NULL);
 222:rtthread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 223:rtthread/src/timer.c ****     RT_ASSERT(rt_object_is_systemobject(&timer->parent));
 224:rtthread/src/timer.c **** 
 225:rtthread/src/timer.c ****     /* disable interrupt */
 226:rtthread/src/timer.c ****     level = rt_hw_interrupt_disable();
 220              		.loc 1 226 0
 221 0004 FFF7FEFF 		bl	rt_hw_interrupt_disable
 222              	.LVL24:
 223              	.LBB45:
 224              	.LBB46:
 140:rtthread/src/timer.c ****     {
 225              		.loc 1 140 0
 226 0008 0022     		movs	r2, #0
 227              	.LVL25:
 228              	.L12:
 229 000a 002A     		cmp	r2, #0
 230 000c 0ADD     		ble	.L13
 231              	.LVL26:
 232              	.LBE46:
 233              	.LBE45:
 227:rtthread/src/timer.c **** 
 228:rtthread/src/timer.c ****     _rt_timer_remove(timer);
 229:rtthread/src/timer.c ****     /* stop timer */
 230:rtthread/src/timer.c ****     timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 234              		.loc 1 230 0
 235 000e 637A     		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 236 0010 23F00103 		bic	r3, r3, #1
 237 0014 6372     		strb	r3, [r4, #9]
 231:rtthread/src/timer.c **** 
 232:rtthread/src/timer.c ****     /* enable interrupt */
 233:rtthread/src/timer.c ****     rt_hw_interrupt_enable(level);
 238              		.loc 1 233 0
 239 0016 FFF7FEFF 		bl	rt_hw_interrupt_enable
 240              	.LVL27:
ARM GAS  /tmp/ccZMtG09.s 			page 11


 234:rtthread/src/timer.c **** 
 235:rtthread/src/timer.c ****     rt_object_detach((rt_object_t)timer);
 241              		.loc 1 235 0
 242 001a 2046     		mov	r0, r4
 243 001c FFF7FEFF 		bl	rt_object_detach
 244              	.LVL28:
 236:rtthread/src/timer.c **** 
 237:rtthread/src/timer.c ****     return RT_EOK;
 238:rtthread/src/timer.c **** }
 245              		.loc 1 238 0
 246 0020 0020     		movs	r0, #0
 247 0022 70BD     		pop	{r4, r5, r6, pc}
 248              	.LVL29:
 249              	.L13:
 250              	.LBB50:
 251              	.LBB49:
 142:rtthread/src/timer.c ****     }
 252              		.loc 1 142 0
 253 0024 931C     		adds	r3, r2, #2
 254 0026 04EBC303 		add	r3, r4, r3, lsl #3
 255 002a 191D     		adds	r1, r3, #4
 256              	.LVL30:
 257              	.LBB47:
 258              	.LBB48:
  88:rtthread/include/rtservice.h ****     n->prev->next = n->next;
 259              		.loc 2 88 0
 260 002c 5D68     		ldr	r5, [r3, #4]
 261 002e 9E68     		ldr	r6, [r3, #8]
 262 0030 6E60     		str	r6, [r5, #4]
  89:rtthread/include/rtservice.h **** 
 263              		.loc 2 89 0
 264 0032 9D68     		ldr	r5, [r3, #8]
 265 0034 5E68     		ldr	r6, [r3, #4]
 266 0036 2E60     		str	r6, [r5]
  91:rtthread/include/rtservice.h **** }
 267              		.loc 2 91 0
 268 0038 9960     		str	r1, [r3, #8]
 269 003a 5960     		str	r1, [r3, #4]
 270              	.LVL31:
 271              	.LBE48:
 272              	.LBE47:
 140:rtthread/src/timer.c ****     {
 273              		.loc 1 140 0
 274 003c 0132     		adds	r2, r2, #1
 275              	.LVL32:
 276 003e E4E7     		b	.L12
 277              	.LBE49:
 278              	.LBE50:
 279              		.cfi_endproc
 280              	.LFE19:
 282              		.section	.text.rt_timer_start,"ax",%progbits
 283              		.align	1
 284              		.global	rt_timer_start
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 288              		.fpu softvfp
ARM GAS  /tmp/ccZMtG09.s 			page 12


 290              	rt_timer_start:
 291              	.LFB20:
 239:rtthread/src/timer.c **** 
 240:rtthread/src/timer.c **** #ifdef RT_USING_HEAP
 241:rtthread/src/timer.c **** /**
 242:rtthread/src/timer.c ****  * This function will create a timer
 243:rtthread/src/timer.c ****  *
 244:rtthread/src/timer.c ****  * @param name the name of timer
 245:rtthread/src/timer.c ****  * @param timeout the timeout function
 246:rtthread/src/timer.c ****  * @param parameter the parameter of timeout function
 247:rtthread/src/timer.c ****  * @param time the tick of timer
 248:rtthread/src/timer.c ****  * @param flag the flag of timer
 249:rtthread/src/timer.c ****  *
 250:rtthread/src/timer.c ****  * @return the created timer object
 251:rtthread/src/timer.c ****  */
 252:rtthread/src/timer.c **** rt_timer_t rt_timer_create(const char *name,
 253:rtthread/src/timer.c ****                            void (*timeout)(void *parameter),
 254:rtthread/src/timer.c ****                            void       *parameter,
 255:rtthread/src/timer.c ****                            rt_tick_t   time,
 256:rtthread/src/timer.c ****                            rt_uint8_t  flag)
 257:rtthread/src/timer.c **** {
 258:rtthread/src/timer.c ****     struct rt_timer *timer;
 259:rtthread/src/timer.c **** 
 260:rtthread/src/timer.c ****     /* allocate a object */
 261:rtthread/src/timer.c ****     timer = (struct rt_timer *)rt_object_allocate(RT_Object_Class_Timer, name);
 262:rtthread/src/timer.c ****     if (timer == RT_NULL)
 263:rtthread/src/timer.c ****     {
 264:rtthread/src/timer.c ****         return RT_NULL;
 265:rtthread/src/timer.c ****     }
 266:rtthread/src/timer.c **** 
 267:rtthread/src/timer.c ****     _rt_timer_init(timer, timeout, parameter, time, flag);
 268:rtthread/src/timer.c **** 
 269:rtthread/src/timer.c ****     return timer;
 270:rtthread/src/timer.c **** }
 271:rtthread/src/timer.c **** 
 272:rtthread/src/timer.c **** /**
 273:rtthread/src/timer.c ****  * This function will delete a timer and release timer memory
 274:rtthread/src/timer.c ****  *
 275:rtthread/src/timer.c ****  * @param timer the timer to be deleted
 276:rtthread/src/timer.c ****  *
 277:rtthread/src/timer.c ****  * @return the operation status, RT_EOK on OK; RT_ERROR on error
 278:rtthread/src/timer.c ****  */
 279:rtthread/src/timer.c **** rt_err_t rt_timer_delete(rt_timer_t timer)
 280:rtthread/src/timer.c **** {
 281:rtthread/src/timer.c ****     register rt_base_t level;
 282:rtthread/src/timer.c **** 
 283:rtthread/src/timer.c ****     /* timer check */
 284:rtthread/src/timer.c ****     RT_ASSERT(timer != RT_NULL);
 285:rtthread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 286:rtthread/src/timer.c ****     RT_ASSERT(rt_object_is_systemobject(&timer->parent) == RT_FALSE);
 287:rtthread/src/timer.c **** 
 288:rtthread/src/timer.c ****     /* disable interrupt */
 289:rtthread/src/timer.c ****     level = rt_hw_interrupt_disable();
 290:rtthread/src/timer.c **** 
 291:rtthread/src/timer.c ****     _rt_timer_remove(timer);
 292:rtthread/src/timer.c ****     /* stop timer */
 293:rtthread/src/timer.c ****     timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
ARM GAS  /tmp/ccZMtG09.s 			page 13


 294:rtthread/src/timer.c **** 
 295:rtthread/src/timer.c ****     /* enable interrupt */
 296:rtthread/src/timer.c ****     rt_hw_interrupt_enable(level);
 297:rtthread/src/timer.c **** 
 298:rtthread/src/timer.c ****     rt_object_delete((rt_object_t)timer);
 299:rtthread/src/timer.c **** 
 300:rtthread/src/timer.c ****     return RT_EOK;
 301:rtthread/src/timer.c **** }
 302:rtthread/src/timer.c **** #endif
 303:rtthread/src/timer.c **** 
 304:rtthread/src/timer.c **** /**
 305:rtthread/src/timer.c ****  * This function will start the timer
 306:rtthread/src/timer.c ****  *
 307:rtthread/src/timer.c ****  * @param timer the timer to be started
 308:rtthread/src/timer.c ****  *
 309:rtthread/src/timer.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 310:rtthread/src/timer.c ****  */
 311:rtthread/src/timer.c **** rt_err_t rt_timer_start(rt_timer_t timer)
 312:rtthread/src/timer.c **** {
 292              		.loc 1 312 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 8
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              	.LVL33:
 297 0000 70B5     		push	{r4, r5, r6, lr}
 298              	.LCFI8:
 299              		.cfi_def_cfa_offset 16
 300              		.cfi_offset 4, -16
 301              		.cfi_offset 5, -12
 302              		.cfi_offset 6, -8
 303              		.cfi_offset 14, -4
 304 0002 82B0     		sub	sp, sp, #8
 305              	.LCFI9:
 306              		.cfi_def_cfa_offset 24
 307 0004 0446     		mov	r4, r0
 313:rtthread/src/timer.c ****     unsigned int row_lvl;
 314:rtthread/src/timer.c ****     rt_list_t *timer_list;
 315:rtthread/src/timer.c ****     register rt_base_t level;
 316:rtthread/src/timer.c ****     rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
 317:rtthread/src/timer.c ****     unsigned int tst_nr;
 318:rtthread/src/timer.c ****     static unsigned int random_nr;
 319:rtthread/src/timer.c **** 
 320:rtthread/src/timer.c ****     /* timer check */
 321:rtthread/src/timer.c ****     RT_ASSERT(timer != RT_NULL);
 322:rtthread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 323:rtthread/src/timer.c **** 
 324:rtthread/src/timer.c ****     /* stop timer firstly */
 325:rtthread/src/timer.c ****     level = rt_hw_interrupt_disable();
 308              		.loc 1 325 0
 309 0006 FFF7FEFF 		bl	rt_hw_interrupt_disable
 310              	.LVL34:
 311 000a 0546     		mov	r5, r0
 312              	.LVL35:
 313              	.LBB51:
 314              	.LBB52:
 140:rtthread/src/timer.c ****     {
 315              		.loc 1 140 0
ARM GAS  /tmp/ccZMtG09.s 			page 14


 316 000c 0022     		movs	r2, #0
 317              	.LVL36:
 318              	.L16:
 319 000e 002A     		cmp	r2, #0
 320 0010 23DD     		ble	.L17
 321              	.LVL37:
 322              	.LBE52:
 323              	.LBE51:
 326:rtthread/src/timer.c ****     /* remove timer from list */
 327:rtthread/src/timer.c ****     _rt_timer_remove(timer);
 328:rtthread/src/timer.c ****     /* change status of timer */
 329:rtthread/src/timer.c ****     timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 324              		.loc 1 329 0
 325 0012 637A     		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 326 0014 23F00103 		bic	r3, r3, #1
 327 0018 6372     		strb	r3, [r4, #9]
 330:rtthread/src/timer.c **** 
 331:rtthread/src/timer.c ****     RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(timer->parent)));
 332:rtthread/src/timer.c **** 
 333:rtthread/src/timer.c ****     /*
 334:rtthread/src/timer.c ****      * get timeout tick,
 335:rtthread/src/timer.c ****      * the max timeout tick shall not great than RT_TICK_MAX/2
 336:rtthread/src/timer.c ****      */
 337:rtthread/src/timer.c ****     RT_ASSERT(timer->init_tick < RT_TICK_MAX / 2);
 338:rtthread/src/timer.c ****     timer->timeout_tick = rt_tick_get() + timer->init_tick;
 328              		.loc 1 338 0
 329 001a FFF7FEFF 		bl	rt_tick_get
 330              	.LVL38:
 331 001e 636A     		ldr	r3, [r4, #36]
 332 0020 1844     		add	r0, r0, r3
 333 0022 A062     		str	r0, [r4, #40]
 334              	.LVL39:
 339:rtthread/src/timer.c **** 
 340:rtthread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
 341:rtthread/src/timer.c ****     if (timer->parent.flag & RT_TIMER_FLAG_SOFT_TIMER)
 342:rtthread/src/timer.c ****     {
 343:rtthread/src/timer.c ****         /* insert timer to soft timer list */
 344:rtthread/src/timer.c ****         timer_list = rt_soft_timer_list;
 345:rtthread/src/timer.c ****     }
 346:rtthread/src/timer.c ****     else
 347:rtthread/src/timer.c **** #endif
 348:rtthread/src/timer.c ****     {
 349:rtthread/src/timer.c ****         /* insert timer to system timer list */
 350:rtthread/src/timer.c ****         timer_list = rt_timer_list;
 351:rtthread/src/timer.c ****     }
 352:rtthread/src/timer.c **** 
 353:rtthread/src/timer.c ****     row_head[0]  = &timer_list[0];
 335              		.loc 1 353 0
 336 0024 224B     		ldr	r3, .L24
 337 0026 0193     		str	r3, [sp, #4]
 338              	.LVL40:
 354:rtthread/src/timer.c ****     for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
 339              		.loc 1 354 0
 340 0028 0021     		movs	r1, #0
 341              	.LVL41:
 342              	.L18:
 343              		.loc 1 354 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccZMtG09.s 			page 15


 344 002a 49B3     		cbz	r1, .L22
 355:rtthread/src/timer.c ****     {
 356:rtthread/src/timer.c ****         for (; row_head[row_lvl] != timer_list[row_lvl].prev;
 357:rtthread/src/timer.c ****              row_head[row_lvl]  = row_head[row_lvl]->next)
 358:rtthread/src/timer.c ****         {
 359:rtthread/src/timer.c ****             struct rt_timer *t;
 360:rtthread/src/timer.c ****             rt_list_t *p = row_head[row_lvl]->next;
 361:rtthread/src/timer.c **** 
 362:rtthread/src/timer.c ****             /* fix up the entry pointer */
 363:rtthread/src/timer.c ****             t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
 364:rtthread/src/timer.c **** 
 365:rtthread/src/timer.c ****             /* If we have two timers that timeout at the same time, it's
 366:rtthread/src/timer.c ****              * preferred that the timer inserted early get called early.
 367:rtthread/src/timer.c ****              * So insert the new timer to the end the the some-timeout timer
 368:rtthread/src/timer.c ****              * list.
 369:rtthread/src/timer.c ****              */
 370:rtthread/src/timer.c ****             if ((t->timeout_tick - timer->timeout_tick) == 0)
 371:rtthread/src/timer.c ****             {
 372:rtthread/src/timer.c ****                 continue;
 373:rtthread/src/timer.c ****             }
 374:rtthread/src/timer.c ****             else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
 375:rtthread/src/timer.c ****             {
 376:rtthread/src/timer.c ****                 break;
 377:rtthread/src/timer.c ****             }
 378:rtthread/src/timer.c ****         }
 379:rtthread/src/timer.c ****         if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
 380:rtthread/src/timer.c ****             row_head[row_lvl + 1] = row_head[row_lvl] + 1;
 381:rtthread/src/timer.c ****     }
 382:rtthread/src/timer.c **** 
 383:rtthread/src/timer.c ****     /* Interestingly, this super simple timer insert counter works very very
 384:rtthread/src/timer.c ****      * well on distributing the list height uniformly. By means of "very very
 385:rtthread/src/timer.c ****      * well", I mean it beats the randomness of timer->timeout_tick very easily
 386:rtthread/src/timer.c ****      * (actually, the timeout_tick is not random and easy to be attacked). */
 387:rtthread/src/timer.c ****     random_nr++;
 345              		.loc 1 387 0 is_stmt 1
 346 002c 214A     		ldr	r2, .L24+4
 347 002e 1368     		ldr	r3, [r2]
 348 0030 0133     		adds	r3, r3, #1
 349 0032 1360     		str	r3, [r2]
 350              	.LVL42:
 388:rtthread/src/timer.c ****     tst_nr = random_nr;
 389:rtthread/src/timer.c **** 
 390:rtthread/src/timer.c ****     rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
 351              		.loc 1 390 0
 352 0034 019B     		ldr	r3, [sp, #4]
 353              	.LVL43:
 354 0036 04F11402 		add	r2, r4, #20
 355              	.LVL44:
 356              	.LBB56:
 357              	.LBB57:
  60:rtthread/include/rtservice.h ****     n->next = l->next;
 358              		.loc 2 60 0
 359 003a 1968     		ldr	r1, [r3]
 360              	.LVL45:
 361 003c 4A60     		str	r2, [r1, #4]
  61:rtthread/include/rtservice.h **** 
 362              		.loc 2 61 0
ARM GAS  /tmp/ccZMtG09.s 			page 16


 363 003e 1968     		ldr	r1, [r3]
 364 0040 6161     		str	r1, [r4, #20]
  63:rtthread/include/rtservice.h ****     n->prev = l;
 365              		.loc 2 63 0
 366 0042 1A60     		str	r2, [r3]
  64:rtthread/include/rtservice.h **** }
 367              		.loc 2 64 0
 368 0044 A361     		str	r3, [r4, #24]
 369              	.LVL46:
 370              	.LBE57:
 371              	.LBE56:
 391:rtthread/src/timer.c ****                          &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
 392:rtthread/src/timer.c ****     for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
 393:rtthread/src/timer.c ****     {
 394:rtthread/src/timer.c ****         if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
 395:rtthread/src/timer.c ****             rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
 396:rtthread/src/timer.c ****                                  &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
 397:rtthread/src/timer.c ****         else
 398:rtthread/src/timer.c ****             break;
 399:rtthread/src/timer.c ****         /* Shift over the bits we have tested. Works well with 1 bit and 2
 400:rtthread/src/timer.c ****          * bits. */
 401:rtthread/src/timer.c ****         tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
 402:rtthread/src/timer.c ****     }
 403:rtthread/src/timer.c **** 
 404:rtthread/src/timer.c ****     timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
 372              		.loc 1 404 0
 373 0046 637A     		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 374 0048 43F00103 		orr	r3, r3, #1
 375 004c 6372     		strb	r3, [r4, #9]
 405:rtthread/src/timer.c **** 
 406:rtthread/src/timer.c ****     /* enable interrupt */
 407:rtthread/src/timer.c ****     rt_hw_interrupt_enable(level);
 376              		.loc 1 407 0
 377 004e 2846     		mov	r0, r5
 378 0050 FFF7FEFF 		bl	rt_hw_interrupt_enable
 379              	.LVL47:
 408:rtthread/src/timer.c **** 
 409:rtthread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
 410:rtthread/src/timer.c ****     if (timer->parent.flag & RT_TIMER_FLAG_SOFT_TIMER)
 411:rtthread/src/timer.c ****     {
 412:rtthread/src/timer.c ****         /* check whether timer thread is ready */
 413:rtthread/src/timer.c ****         if ((soft_timer_status == RT_SOFT_TIMER_IDLE) &&
 414:rtthread/src/timer.c ****            ((timer_thread.stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND))
 415:rtthread/src/timer.c ****         {
 416:rtthread/src/timer.c ****             /* resume timer thread to check soft timer */
 417:rtthread/src/timer.c ****             rt_thread_resume(&timer_thread);
 418:rtthread/src/timer.c ****             rt_schedule();
 419:rtthread/src/timer.c ****         }
 420:rtthread/src/timer.c ****     }
 421:rtthread/src/timer.c **** #endif
 422:rtthread/src/timer.c **** 
 423:rtthread/src/timer.c ****     return RT_EOK;
 424:rtthread/src/timer.c **** }
 380              		.loc 1 424 0
 381 0054 0020     		movs	r0, #0
 382 0056 02B0     		add	sp, sp, #8
 383              	.LCFI10:
ARM GAS  /tmp/ccZMtG09.s 			page 17


 384              		.cfi_remember_state
 385              		.cfi_def_cfa_offset 16
 386              		@ sp needed
 387 0058 70BD     		pop	{r4, r5, r6, pc}
 388              	.LVL48:
 389              	.L17:
 390              	.LCFI11:
 391              		.cfi_restore_state
 392              	.LBB58:
 393              	.LBB55:
 142:rtthread/src/timer.c ****     }
 394              		.loc 1 142 0
 395 005a 931C     		adds	r3, r2, #2
 396 005c 04EBC303 		add	r3, r4, r3, lsl #3
 397 0060 191D     		adds	r1, r3, #4
 398              	.LVL49:
 399              	.LBB53:
 400              	.LBB54:
  88:rtthread/include/rtservice.h ****     n->prev->next = n->next;
 401              		.loc 2 88 0
 402 0062 5868     		ldr	r0, [r3, #4]
 403 0064 9E68     		ldr	r6, [r3, #8]
 404 0066 4660     		str	r6, [r0, #4]
  89:rtthread/include/rtservice.h **** 
 405              		.loc 2 89 0
 406 0068 9868     		ldr	r0, [r3, #8]
 407 006a 5E68     		ldr	r6, [r3, #4]
 408 006c 0660     		str	r6, [r0]
  91:rtthread/include/rtservice.h **** }
 409              		.loc 2 91 0
 410 006e 9960     		str	r1, [r3, #8]
 411 0070 5960     		str	r1, [r3, #4]
 412              	.LVL50:
 413              	.LBE54:
 414              	.LBE53:
 140:rtthread/src/timer.c ****     {
 415              		.loc 1 140 0
 416 0072 0132     		adds	r2, r2, #1
 417              	.LVL51:
 418 0074 CBE7     		b	.L16
 419              	.LVL52:
 420              	.L19:
 421              	.LBE55:
 422              	.LBE58:
 357:rtthread/src/timer.c ****         {
 423              		.loc 1 357 0
 424 0076 02AB     		add	r3, sp, #8
 425 0078 03EB8103 		add	r3, r3, r1, lsl #2
 426 007c 43F8042C 		str	r2, [r3, #-4]
 427              	.LVL53:
 428              	.L22:
 356:rtthread/src/timer.c ****              row_head[row_lvl]  = row_head[row_lvl]->next)
 429              		.loc 1 356 0
 430 0080 02AB     		add	r3, sp, #8
 431 0082 03EB8103 		add	r3, r3, r1, lsl #2
 432 0086 53F8046C 		ldr	r6, [r3, #-4]
 433 008a CB00     		lsls	r3, r1, #3
ARM GAS  /tmp/ccZMtG09.s 			page 18


 434 008c 084A     		ldr	r2, .L24
 435 008e 1A44     		add	r2, r2, r3
 436 0090 5268     		ldr	r2, [r2, #4]
 437 0092 9642     		cmp	r6, r2
 438 0094 09D0     		beq	.L20
 439              	.LBB59:
 360:rtthread/src/timer.c **** 
 440              		.loc 1 360 0
 441 0096 3268     		ldr	r2, [r6]
 442              	.LVL54:
 363:rtthread/src/timer.c **** 
 443              		.loc 1 363 0
 444 0098 1433     		adds	r3, r3, #20
 445 009a D31A     		subs	r3, r2, r3
 446              	.LVL55:
 370:rtthread/src/timer.c ****             {
 447              		.loc 1 370 0
 448 009c 9B6A     		ldr	r3, [r3, #40]
 449              	.LVL56:
 450 009e 9842     		cmp	r0, r3
 451 00a0 E9D0     		beq	.L19
 374:rtthread/src/timer.c ****             {
 452              		.loc 1 374 0
 453 00a2 1B1A     		subs	r3, r3, r0
 454 00a4 044E     		ldr	r6, .L24+8
 455 00a6 B342     		cmp	r3, r6
 456 00a8 E5D8     		bhi	.L19
 457              	.LVL57:
 458              	.L20:
 459              	.LBE59:
 354:rtthread/src/timer.c ****     {
 460              		.loc 1 354 0 discriminator 2
 461 00aa 0131     		adds	r1, r1, #1
 462              	.LVL58:
 463 00ac BDE7     		b	.L18
 464              	.L25:
 465 00ae 00BF     		.align	2
 466              	.L24:
 467 00b0 00000000 		.word	.LANCHOR0
 468 00b4 00000000 		.word	.LANCHOR1
 469 00b8 FEFFFF7F 		.word	2147483646
 470              		.cfi_endproc
 471              	.LFE20:
 473              		.section	.text.rt_timer_stop,"ax",%progbits
 474              		.align	1
 475              		.global	rt_timer_stop
 476              		.syntax unified
 477              		.thumb
 478              		.thumb_func
 479              		.fpu softvfp
 481              	rt_timer_stop:
 482              	.LFB21:
 425:rtthread/src/timer.c **** 
 426:rtthread/src/timer.c **** /**
 427:rtthread/src/timer.c ****  * This function will stop the timer
 428:rtthread/src/timer.c ****  *
 429:rtthread/src/timer.c ****  * @param timer the timer to be stopped
ARM GAS  /tmp/ccZMtG09.s 			page 19


 430:rtthread/src/timer.c ****  *
 431:rtthread/src/timer.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 432:rtthread/src/timer.c ****  */
 433:rtthread/src/timer.c **** rt_err_t rt_timer_stop(rt_timer_t timer)
 434:rtthread/src/timer.c **** {
 483              		.loc 1 434 0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 487              	.LVL59:
 435:rtthread/src/timer.c ****     register rt_base_t level;
 436:rtthread/src/timer.c **** 
 437:rtthread/src/timer.c ****     /* timer check */
 438:rtthread/src/timer.c ****     RT_ASSERT(timer != RT_NULL);
 439:rtthread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 440:rtthread/src/timer.c **** 
 441:rtthread/src/timer.c ****     if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
 488              		.loc 1 441 0
 489 0000 437A     		ldrb	r3, [r0, #9]	@ zero_extendqisi2
 490 0002 13F0010F 		tst	r3, #1
 491 0006 1CD0     		beq	.L30
 434:rtthread/src/timer.c ****     register rt_base_t level;
 492              		.loc 1 434 0
 493 0008 70B5     		push	{r4, r5, r6, lr}
 494              	.LCFI12:
 495              		.cfi_def_cfa_offset 16
 496              		.cfi_offset 4, -16
 497              		.cfi_offset 5, -12
 498              		.cfi_offset 6, -8
 499              		.cfi_offset 14, -4
 500 000a 0446     		mov	r4, r0
 442:rtthread/src/timer.c ****         return -RT_ERROR;
 443:rtthread/src/timer.c **** 
 444:rtthread/src/timer.c ****     RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(timer->parent)));
 445:rtthread/src/timer.c **** 
 446:rtthread/src/timer.c ****     /* disable interrupt */
 447:rtthread/src/timer.c ****     level = rt_hw_interrupt_disable();
 501              		.loc 1 447 0
 502 000c FFF7FEFF 		bl	rt_hw_interrupt_disable
 503              	.LVL60:
 504              	.LBB60:
 505              	.LBB61:
 140:rtthread/src/timer.c ****     {
 506              		.loc 1 140 0
 507 0010 0022     		movs	r2, #0
 508              	.LVL61:
 509              	.L28:
 510 0012 002A     		cmp	r2, #0
 511 0014 07DD     		ble	.L29
 512              	.LVL62:
 513              	.LBE61:
 514              	.LBE60:
 448:rtthread/src/timer.c **** 
 449:rtthread/src/timer.c ****     _rt_timer_remove(timer);
 450:rtthread/src/timer.c ****     /* change status */
 451:rtthread/src/timer.c ****     timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 515              		.loc 1 451 0
ARM GAS  /tmp/ccZMtG09.s 			page 20


 516 0016 637A     		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 517 0018 23F00103 		bic	r3, r3, #1
 518 001c 6372     		strb	r3, [r4, #9]
 452:rtthread/src/timer.c **** 
 453:rtthread/src/timer.c ****     /* enable interrupt */
 454:rtthread/src/timer.c ****     rt_hw_interrupt_enable(level);
 519              		.loc 1 454 0
 520 001e FFF7FEFF 		bl	rt_hw_interrupt_enable
 521              	.LVL63:
 455:rtthread/src/timer.c **** 
 456:rtthread/src/timer.c ****     return RT_EOK;
 522              		.loc 1 456 0
 523 0022 0020     		movs	r0, #0
 457:rtthread/src/timer.c **** }
 524              		.loc 1 457 0
 525 0024 70BD     		pop	{r4, r5, r6, pc}
 526              	.LVL64:
 527              	.L29:
 528              	.LBB65:
 529              	.LBB64:
 142:rtthread/src/timer.c ****     }
 530              		.loc 1 142 0
 531 0026 931C     		adds	r3, r2, #2
 532 0028 04EBC303 		add	r3, r4, r3, lsl #3
 533 002c 191D     		adds	r1, r3, #4
 534              	.LVL65:
 535              	.LBB62:
 536              	.LBB63:
  88:rtthread/include/rtservice.h ****     n->prev->next = n->next;
 537              		.loc 2 88 0
 538 002e 5D68     		ldr	r5, [r3, #4]
 539 0030 9E68     		ldr	r6, [r3, #8]
 540 0032 6E60     		str	r6, [r5, #4]
  89:rtthread/include/rtservice.h **** 
 541              		.loc 2 89 0
 542 0034 9D68     		ldr	r5, [r3, #8]
 543 0036 5E68     		ldr	r6, [r3, #4]
 544 0038 2E60     		str	r6, [r5]
  91:rtthread/include/rtservice.h **** }
 545              		.loc 2 91 0
 546 003a 9960     		str	r1, [r3, #8]
 547 003c 5960     		str	r1, [r3, #4]
 548              	.LVL66:
 549              	.LBE63:
 550              	.LBE62:
 140:rtthread/src/timer.c ****     {
 551              		.loc 1 140 0
 552 003e 0132     		adds	r2, r2, #1
 553              	.LVL67:
 554 0040 E7E7     		b	.L28
 555              	.LVL68:
 556              	.L30:
 557              	.LCFI13:
 558              		.cfi_def_cfa_offset 0
 559              		.cfi_restore 4
 560              		.cfi_restore 5
 561              		.cfi_restore 6
ARM GAS  /tmp/ccZMtG09.s 			page 21


 562              		.cfi_restore 14
 563              	.LBE64:
 564              	.LBE65:
 442:rtthread/src/timer.c **** 
 565              		.loc 1 442 0
 566 0042 4FF0FF30 		mov	r0, #-1
 567              	.LVL69:
 568              		.loc 1 457 0
 569 0046 7047     		bx	lr
 570              		.cfi_endproc
 571              	.LFE21:
 573              		.section	.text.rt_timer_control,"ax",%progbits
 574              		.align	1
 575              		.global	rt_timer_control
 576              		.syntax unified
 577              		.thumb
 578              		.thumb_func
 579              		.fpu softvfp
 581              	rt_timer_control:
 582              	.LFB22:
 458:rtthread/src/timer.c **** 
 459:rtthread/src/timer.c **** /**
 460:rtthread/src/timer.c ****  * This function will get or set some options of the timer
 461:rtthread/src/timer.c ****  *
 462:rtthread/src/timer.c ****  * @param timer the timer to be get or set
 463:rtthread/src/timer.c ****  * @param cmd the control command
 464:rtthread/src/timer.c ****  * @param arg the argument
 465:rtthread/src/timer.c ****  *
 466:rtthread/src/timer.c ****  * @return RT_EOK
 467:rtthread/src/timer.c ****  */
 468:rtthread/src/timer.c **** rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
 469:rtthread/src/timer.c **** {
 583              		.loc 1 469 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 0
 586              		@ frame_needed = 0, uses_anonymous_args = 0
 587              	.LVL70:
 588 0000 70B5     		push	{r4, r5, r6, lr}
 589              	.LCFI14:
 590              		.cfi_def_cfa_offset 16
 591              		.cfi_offset 4, -16
 592              		.cfi_offset 5, -12
 593              		.cfi_offset 6, -8
 594              		.cfi_offset 14, -4
 595 0002 0546     		mov	r5, r0
 596 0004 0C46     		mov	r4, r1
 597 0006 1646     		mov	r6, r2
 470:rtthread/src/timer.c ****     register rt_base_t level;
 471:rtthread/src/timer.c **** 
 472:rtthread/src/timer.c ****     /* timer check */
 473:rtthread/src/timer.c ****     RT_ASSERT(timer != RT_NULL);
 474:rtthread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 475:rtthread/src/timer.c **** 
 476:rtthread/src/timer.c ****     level = rt_hw_interrupt_disable();
 598              		.loc 1 476 0
 599 0008 FFF7FEFF 		bl	rt_hw_interrupt_disable
 600              	.LVL71:
ARM GAS  /tmp/ccZMtG09.s 			page 22


 477:rtthread/src/timer.c ****     switch (cmd)
 601              		.loc 1 477 0
 602 000c 042C     		cmp	r4, #4
 603 000e 06D8     		bhi	.L36
 604 0010 DFE804F0 		tbb	[pc, r4]
 605              	.L38:
 606 0014 09       		.byte	(.L37-.L38)/2
 607 0015 03       		.byte	(.L39-.L38)/2
 608 0016 0C       		.byte	(.L40-.L38)/2
 609 0017 11       		.byte	(.L41-.L38)/2
 610 0018 16       		.byte	(.L42-.L38)/2
 611 0019 00       		.p2align 1
 612              	.L39:
 478:rtthread/src/timer.c ****     {
 479:rtthread/src/timer.c ****     case RT_TIMER_CTRL_GET_TIME:
 480:rtthread/src/timer.c ****         *(rt_tick_t *)arg = timer->init_tick;
 613              		.loc 1 480 0
 614 001a 6B6A     		ldr	r3, [r5, #36]
 615 001c 3360     		str	r3, [r6]
 616              	.L36:
 481:rtthread/src/timer.c ****         break;
 482:rtthread/src/timer.c **** 
 483:rtthread/src/timer.c ****     case RT_TIMER_CTRL_SET_TIME:
 484:rtthread/src/timer.c ****         timer->init_tick = *(rt_tick_t *)arg;
 485:rtthread/src/timer.c ****         break;
 486:rtthread/src/timer.c **** 
 487:rtthread/src/timer.c ****     case RT_TIMER_CTRL_SET_ONESHOT:
 488:rtthread/src/timer.c ****         timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
 489:rtthread/src/timer.c ****         break;
 490:rtthread/src/timer.c **** 
 491:rtthread/src/timer.c ****     case RT_TIMER_CTRL_SET_PERIODIC:
 492:rtthread/src/timer.c ****         timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
 493:rtthread/src/timer.c ****         break;
 494:rtthread/src/timer.c **** 
 495:rtthread/src/timer.c ****     case RT_TIMER_CTRL_GET_STATE:
 496:rtthread/src/timer.c ****         if(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
 497:rtthread/src/timer.c ****         {
 498:rtthread/src/timer.c ****             /*timer is start and run*/
 499:rtthread/src/timer.c ****             *(rt_tick_t *)arg = RT_TIMER_FLAG_ACTIVATED;
 500:rtthread/src/timer.c ****         }
 501:rtthread/src/timer.c ****         else
 502:rtthread/src/timer.c ****         {
 503:rtthread/src/timer.c ****             /*timer is stop*/
 504:rtthread/src/timer.c ****             *(rt_tick_t *)arg = RT_TIMER_FLAG_DEACTIVATED;
 505:rtthread/src/timer.c ****         }
 506:rtthread/src/timer.c ****         break;
 507:rtthread/src/timer.c **** 
 508:rtthread/src/timer.c ****     default:
 509:rtthread/src/timer.c ****         break;
 510:rtthread/src/timer.c ****     }
 511:rtthread/src/timer.c ****     rt_hw_interrupt_enable(level);
 617              		.loc 1 511 0
 618 001e FFF7FEFF 		bl	rt_hw_interrupt_enable
 619              	.LVL72:
 512:rtthread/src/timer.c **** 
 513:rtthread/src/timer.c ****     return RT_EOK;
 514:rtthread/src/timer.c **** }
ARM GAS  /tmp/ccZMtG09.s 			page 23


 620              		.loc 1 514 0
 621 0022 0020     		movs	r0, #0
 622 0024 70BD     		pop	{r4, r5, r6, pc}
 623              	.LVL73:
 624              	.L37:
 484:rtthread/src/timer.c ****         break;
 625              		.loc 1 484 0
 626 0026 3368     		ldr	r3, [r6]
 627 0028 6B62     		str	r3, [r5, #36]
 485:rtthread/src/timer.c **** 
 628              		.loc 1 485 0
 629 002a F8E7     		b	.L36
 630              	.L40:
 488:rtthread/src/timer.c ****         break;
 631              		.loc 1 488 0
 632 002c 6B7A     		ldrb	r3, [r5, #9]	@ zero_extendqisi2
 633 002e 23F00203 		bic	r3, r3, #2
 634 0032 6B72     		strb	r3, [r5, #9]
 489:rtthread/src/timer.c **** 
 635              		.loc 1 489 0
 636 0034 F3E7     		b	.L36
 637              	.L41:
 492:rtthread/src/timer.c ****         break;
 638              		.loc 1 492 0
 639 0036 6B7A     		ldrb	r3, [r5, #9]	@ zero_extendqisi2
 640 0038 43F00203 		orr	r3, r3, #2
 641 003c 6B72     		strb	r3, [r5, #9]
 493:rtthread/src/timer.c **** 
 642              		.loc 1 493 0
 643 003e EEE7     		b	.L36
 644              	.L42:
 496:rtthread/src/timer.c ****         {
 645              		.loc 1 496 0
 646 0040 6B7A     		ldrb	r3, [r5, #9]	@ zero_extendqisi2
 647 0042 13F0010F 		tst	r3, #1
 648 0046 02D1     		bne	.L45
 504:rtthread/src/timer.c ****         }
 649              		.loc 1 504 0
 650 0048 0023     		movs	r3, #0
 651 004a 3360     		str	r3, [r6]
 652 004c E7E7     		b	.L36
 653              	.L45:
 499:rtthread/src/timer.c ****         }
 654              		.loc 1 499 0
 655 004e 0123     		movs	r3, #1
 656 0050 3360     		str	r3, [r6]
 657 0052 E4E7     		b	.L36
 658              		.cfi_endproc
 659              	.LFE22:
 661              		.section	.text.rt_timer_check,"ax",%progbits
 662              		.align	1
 663              		.global	rt_timer_check
 664              		.syntax unified
 665              		.thumb
 666              		.thumb_func
 667              		.fpu softvfp
 669              	rt_timer_check:
ARM GAS  /tmp/ccZMtG09.s 			page 24


 670              	.LFB23:
 515:rtthread/src/timer.c **** 
 516:rtthread/src/timer.c **** /**
 517:rtthread/src/timer.c ****  * This function will check timer list, if a timeout event happens, the
 518:rtthread/src/timer.c ****  * corresponding timeout function will be invoked.
 519:rtthread/src/timer.c ****  *
 520:rtthread/src/timer.c ****  * @note this function shall be invoked in operating system timer interrupt.
 521:rtthread/src/timer.c ****  */
 522:rtthread/src/timer.c **** void rt_timer_check(void)
 523:rtthread/src/timer.c **** {
 671              		.loc 1 523 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 8
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 675 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 676              	.LCFI15:
 677              		.cfi_def_cfa_offset 24
 678              		.cfi_offset 4, -24
 679              		.cfi_offset 5, -20
 680              		.cfi_offset 6, -16
 681              		.cfi_offset 7, -12
 682              		.cfi_offset 8, -8
 683              		.cfi_offset 14, -4
 684 0004 82B0     		sub	sp, sp, #8
 685              	.LCFI16:
 686              		.cfi_def_cfa_offset 32
 687              	.LVL74:
 688              	.LBB66:
 689              	.LBB67:
  49:rtthread/include/rtservice.h **** }
 690              		.loc 2 49 0
 691 0006 CDF804D0 		str	sp, [sp, #4]
 692 000a CDF800D0 		str	sp, [sp]
 693              	.LVL75:
 694              	.LBE67:
 695              	.LBE66:
 524:rtthread/src/timer.c ****     struct rt_timer *t;
 525:rtthread/src/timer.c ****     rt_tick_t current_tick;
 526:rtthread/src/timer.c ****     register rt_base_t level;
 527:rtthread/src/timer.c ****     rt_list_t list;
 528:rtthread/src/timer.c **** 
 529:rtthread/src/timer.c ****     rt_list_init(&list);
 530:rtthread/src/timer.c **** 
 531:rtthread/src/timer.c ****     RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check enter\n"));
 532:rtthread/src/timer.c **** 
 533:rtthread/src/timer.c ****     current_tick = rt_tick_get();
 696              		.loc 1 533 0
 697 000e FFF7FEFF 		bl	rt_tick_get
 698              	.LVL76:
 699 0012 0746     		mov	r7, r0
 700              	.LVL77:
 534:rtthread/src/timer.c **** 
 535:rtthread/src/timer.c ****     /* disable interrupt */
 536:rtthread/src/timer.c ****     level = rt_hw_interrupt_disable();
 701              		.loc 1 536 0
 702 0014 FFF7FEFF 		bl	rt_hw_interrupt_disable
 703              	.LVL78:
ARM GAS  /tmp/ccZMtG09.s 			page 25


 704 0018 0546     		mov	r5, r0
 705              	.LVL79:
 706              	.L47:
 707              	.LBB68:
 708              	.LBB69:
 709              		.loc 2 100 0
 710 001a 2E4B     		ldr	r3, .L56
 711 001c 1C68     		ldr	r4, [r3]
 712              	.LVL80:
 713              	.LBE69:
 714              	.LBE68:
 537:rtthread/src/timer.c **** 
 538:rtthread/src/timer.c ****     while (!rt_list_isempty(&rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
 715              		.loc 1 538 0
 716 001e 9C42     		cmp	r4, r3
 717 0020 05D1     		bne	.L53
 718              	.LVL81:
 719              	.L49:
 539:rtthread/src/timer.c ****     {
 540:rtthread/src/timer.c ****         t = rt_list_entry(rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
 541:rtthread/src/timer.c ****                           struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
 542:rtthread/src/timer.c **** 
 543:rtthread/src/timer.c ****         /*
 544:rtthread/src/timer.c ****          * It supposes that the new tick shall less than the half duration of
 545:rtthread/src/timer.c ****          * tick max.
 546:rtthread/src/timer.c ****          */
 547:rtthread/src/timer.c ****         if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
 548:rtthread/src/timer.c ****         {
 549:rtthread/src/timer.c ****             RT_OBJECT_HOOK_CALL(rt_timer_enter_hook, (t));
 550:rtthread/src/timer.c **** 
 551:rtthread/src/timer.c ****             /* remove timer from timer list firstly */
 552:rtthread/src/timer.c ****             _rt_timer_remove(t);
 553:rtthread/src/timer.c ****             if (!(t->parent.flag & RT_TIMER_FLAG_PERIODIC))
 554:rtthread/src/timer.c ****             {
 555:rtthread/src/timer.c ****                 t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 556:rtthread/src/timer.c ****             }
 557:rtthread/src/timer.c ****             /* add timer to temporary list  */
 558:rtthread/src/timer.c ****             rt_list_insert_after(&list, &(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
 559:rtthread/src/timer.c ****             /* call timeout function */
 560:rtthread/src/timer.c ****             t->timeout_func(t->parameter);
 561:rtthread/src/timer.c **** 
 562:rtthread/src/timer.c ****             /* re-get tick */
 563:rtthread/src/timer.c ****             current_tick = rt_tick_get();
 564:rtthread/src/timer.c **** 
 565:rtthread/src/timer.c ****             RT_OBJECT_HOOK_CALL(rt_timer_exit_hook, (t));
 566:rtthread/src/timer.c ****             RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));
 567:rtthread/src/timer.c **** 
 568:rtthread/src/timer.c ****             /* Check whether the timer object is detached or started again */
 569:rtthread/src/timer.c ****             if (rt_list_isempty(&list))
 570:rtthread/src/timer.c ****             {
 571:rtthread/src/timer.c ****                 continue;
 572:rtthread/src/timer.c ****             }
 573:rtthread/src/timer.c ****             rt_list_remove(&(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
 574:rtthread/src/timer.c ****             if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
 575:rtthread/src/timer.c ****                 (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
 576:rtthread/src/timer.c ****             {
 577:rtthread/src/timer.c ****                 /* start it */
ARM GAS  /tmp/ccZMtG09.s 			page 26


 578:rtthread/src/timer.c ****                 t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 579:rtthread/src/timer.c ****                 rt_timer_start(t);
 580:rtthread/src/timer.c ****             }
 581:rtthread/src/timer.c ****         }
 582:rtthread/src/timer.c ****         else break;
 583:rtthread/src/timer.c ****     }
 584:rtthread/src/timer.c **** 
 585:rtthread/src/timer.c ****     /* enable interrupt */
 586:rtthread/src/timer.c ****     rt_hw_interrupt_enable(level);
 720              		.loc 1 586 0
 721 0022 2846     		mov	r0, r5
 722 0024 FFF7FEFF 		bl	rt_hw_interrupt_enable
 723              	.LVL82:
 587:rtthread/src/timer.c **** 
 588:rtthread/src/timer.c ****     RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check leave\n"));
 589:rtthread/src/timer.c **** }
 724              		.loc 1 589 0
 725 0028 02B0     		add	sp, sp, #8
 726              	.LCFI17:
 727              		.cfi_remember_state
 728              		.cfi_def_cfa_offset 24
 729              		@ sp needed
 730 002a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 731              	.LVL83:
 732              	.L53:
 733              	.LCFI18:
 734              		.cfi_restore_state
 540:rtthread/src/timer.c ****                           struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
 735              		.loc 1 540 0
 736 002e A4F11406 		sub	r6, r4, #20
 737              	.LVL84:
 547:rtthread/src/timer.c ****         {
 738              		.loc 1 547 0
 739 0032 6369     		ldr	r3, [r4, #20]
 740 0034 FF1A     		subs	r7, r7, r3
 741              	.LVL85:
 742 0036 284B     		ldr	r3, .L56+4
 743 0038 9F42     		cmp	r7, r3
 744 003a F2D8     		bhi	.L49
 745              	.LBB70:
 746              	.LBB71:
 140:rtthread/src/timer.c ****     {
 747              		.loc 1 140 0
 748 003c 0021     		movs	r1, #0
 749              	.L48:
 750              	.LVL86:
 751 003e 0029     		cmp	r1, #0
 752 0040 30DD     		ble	.L50
 753              	.LVL87:
 754              	.LBE71:
 755              	.LBE70:
 553:rtthread/src/timer.c ****             {
 756              		.loc 1 553 0
 757 0042 14F80B3C 		ldrb	r3, [r4, #-11]	@ zero_extendqisi2
 758 0046 13F0020F 		tst	r3, #2
 759 004a 03D1     		bne	.L51
 555:rtthread/src/timer.c ****             }
ARM GAS  /tmp/ccZMtG09.s 			page 27


 760              		.loc 1 555 0
 761 004c 23F00103 		bic	r3, r3, #1
 762 0050 04F80B3C 		strb	r3, [r4, #-11]
 763              	.L51:
 764              	.LVL88:
 765              	.LBB75:
 766              	.LBB76:
  60:rtthread/include/rtservice.h ****     n->next = l->next;
 767              		.loc 2 60 0
 768 0054 009B     		ldr	r3, [sp]
 769 0056 5C60     		str	r4, [r3, #4]
  61:rtthread/include/rtservice.h **** 
 770              		.loc 2 61 0
 771 0058 2360     		str	r3, [r4]
  63:rtthread/include/rtservice.h ****     n->prev = l;
 772              		.loc 2 63 0
 773 005a 0DF10808 		add	r8, sp, #8
 774 005e 48F8084D 		str	r4, [r8, #-8]!
  64:rtthread/include/rtservice.h **** }
 775              		.loc 2 64 0
 776 0062 C4F80480 		str	r8, [r4, #4]
 777              	.LVL89:
 778              	.LBE76:
 779              	.LBE75:
 560:rtthread/src/timer.c **** 
 780              		.loc 1 560 0
 781 0066 A368     		ldr	r3, [r4, #8]
 782 0068 E068     		ldr	r0, [r4, #12]
 783 006a 9847     		blx	r3
 784              	.LVL90:
 563:rtthread/src/timer.c **** 
 785              		.loc 1 563 0
 786 006c FFF7FEFF 		bl	rt_tick_get
 787              	.LVL91:
 788 0070 0746     		mov	r7, r0
 789              	.LVL92:
 790              	.LBB77:
 791              	.LBB78:
 792              		.loc 2 100 0
 793 0072 009B     		ldr	r3, [sp]
 794              	.LVL93:
 795              	.LBE78:
 796              	.LBE77:
 569:rtthread/src/timer.c ****             {
 797              		.loc 1 569 0
 798 0074 4345     		cmp	r3, r8
 799 0076 D0D0     		beq	.L47
 800              	.LVL94:
 801              	.LBB79:
 802              	.LBB80:
  88:rtthread/include/rtservice.h ****     n->prev->next = n->next;
 803              		.loc 2 88 0
 804 0078 2368     		ldr	r3, [r4]
 805 007a 6268     		ldr	r2, [r4, #4]
 806 007c 5A60     		str	r2, [r3, #4]
  89:rtthread/include/rtservice.h **** 
 807              		.loc 2 89 0
ARM GAS  /tmp/ccZMtG09.s 			page 28


 808 007e 6368     		ldr	r3, [r4, #4]
 809 0080 2268     		ldr	r2, [r4]
 810 0082 1A60     		str	r2, [r3]
  91:rtthread/include/rtservice.h **** }
 811              		.loc 2 91 0
 812 0084 6460     		str	r4, [r4, #4]
 813 0086 2460     		str	r4, [r4]
 814              	.LVL95:
 815              	.LBE80:
 816              	.LBE79:
 574:rtthread/src/timer.c ****                 (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
 817              		.loc 1 574 0
 818 0088 14F80B3C 		ldrb	r3, [r4, #-11]	@ zero_extendqisi2
 819 008c 03F00302 		and	r2, r3, #3
 820 0090 032A     		cmp	r2, #3
 821 0092 C2D1     		bne	.L47
 578:rtthread/src/timer.c ****                 rt_timer_start(t);
 822              		.loc 1 578 0
 823 0094 23F00103 		bic	r3, r3, #1
 824 0098 04F80B3C 		strb	r3, [r4, #-11]
 579:rtthread/src/timer.c ****             }
 825              		.loc 1 579 0
 826 009c 3046     		mov	r0, r6
 827              	.LVL96:
 828 009e FFF7FEFF 		bl	rt_timer_start
 829              	.LVL97:
 830 00a2 BAE7     		b	.L47
 831              	.LVL98:
 832              	.L50:
 833              	.LBB81:
 834              	.LBB74:
 142:rtthread/src/timer.c ****     }
 835              		.loc 1 142 0
 836 00a4 A4F11402 		sub	r2, r4, #20
 837 00a8 8B1C     		adds	r3, r1, #2
 838 00aa DB00     		lsls	r3, r3, #3
 839 00ac 1A44     		add	r2, r2, r3
 840 00ae 0432     		adds	r2, r2, #4
 841              	.LVL99:
 842              	.LBB72:
 843              	.LBB73:
  88:rtthread/include/rtservice.h ****     n->prev->next = n->next;
 844              		.loc 2 88 0
 845 00b0 2344     		add	r3, r3, r4
 846 00b2 53F8100C 		ldr	r0, [r3, #-16]
 847 00b6 53F80C7C 		ldr	r7, [r3, #-12]
 848 00ba 4760     		str	r7, [r0, #4]
  89:rtthread/include/rtservice.h **** 
 849              		.loc 2 89 0
 850 00bc 53F80C0C 		ldr	r0, [r3, #-12]
 851 00c0 53F8107C 		ldr	r7, [r3, #-16]
 852 00c4 0760     		str	r7, [r0]
  91:rtthread/include/rtservice.h **** }
 853              		.loc 2 91 0
 854 00c6 43F80C2C 		str	r2, [r3, #-12]
 855 00ca 43F8102C 		str	r2, [r3, #-16]
 856              	.LVL100:
ARM GAS  /tmp/ccZMtG09.s 			page 29


 857              	.LBE73:
 858              	.LBE72:
 140:rtthread/src/timer.c ****     {
 859              		.loc 1 140 0
 860 00ce 0131     		adds	r1, r1, #1
 861              	.LVL101:
 862 00d0 B5E7     		b	.L48
 863              	.L57:
 864 00d2 00BF     		.align	2
 865              	.L56:
 866 00d4 00000000 		.word	.LANCHOR0
 867 00d8 FEFFFF7F 		.word	2147483646
 868              	.LBE74:
 869              	.LBE81:
 870              		.cfi_endproc
 871              	.LFE23:
 873              		.section	.text.rt_timer_next_timeout_tick,"ax",%progbits
 874              		.align	1
 875              		.global	rt_timer_next_timeout_tick
 876              		.syntax unified
 877              		.thumb
 878              		.thumb_func
 879              		.fpu softvfp
 881              	rt_timer_next_timeout_tick:
 882              	.LFB24:
 590:rtthread/src/timer.c **** 
 591:rtthread/src/timer.c **** /**
 592:rtthread/src/timer.c ****  * This function will return the next timeout tick in the system.
 593:rtthread/src/timer.c ****  *
 594:rtthread/src/timer.c ****  * @return the next timeout tick in the system
 595:rtthread/src/timer.c ****  */
 596:rtthread/src/timer.c **** rt_tick_t rt_timer_next_timeout_tick(void)
 597:rtthread/src/timer.c **** {
 883              		.loc 1 597 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 0
 886              		@ frame_needed = 0, uses_anonymous_args = 0
 887 0000 08B5     		push	{r3, lr}
 888              	.LCFI19:
 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 3, -8
 891              		.cfi_offset 14, -4
 598:rtthread/src/timer.c ****     return rt_timer_list_next_timeout(rt_timer_list);
 892              		.loc 1 598 0
 893 0002 0248     		ldr	r0, .L60
 894 0004 FFF7FEFF 		bl	rt_timer_list_next_timeout
 895              	.LVL102:
 599:rtthread/src/timer.c **** }
 896              		.loc 1 599 0
 897 0008 08BD     		pop	{r3, pc}
 898              	.L61:
 899 000a 00BF     		.align	2
 900              	.L60:
 901 000c 00000000 		.word	.LANCHOR0
 902              		.cfi_endproc
 903              	.LFE24:
 905              		.section	.text.rt_system_timer_init,"ax",%progbits
ARM GAS  /tmp/ccZMtG09.s 			page 30


 906              		.align	1
 907              		.global	rt_system_timer_init
 908              		.syntax unified
 909              		.thumb
 910              		.thumb_func
 911              		.fpu softvfp
 913              	rt_system_timer_init:
 914              	.LFB25:
 600:rtthread/src/timer.c **** 
 601:rtthread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
 602:rtthread/src/timer.c **** /**
 603:rtthread/src/timer.c ****  * This function will check software-timer list, if a timeout event happens, the
 604:rtthread/src/timer.c ****  * corresponding timeout function will be invoked.
 605:rtthread/src/timer.c ****  */
 606:rtthread/src/timer.c **** void rt_soft_timer_check(void)
 607:rtthread/src/timer.c **** {
 608:rtthread/src/timer.c ****     rt_tick_t current_tick;
 609:rtthread/src/timer.c ****     struct rt_timer *t;
 610:rtthread/src/timer.c ****     register rt_base_t level;
 611:rtthread/src/timer.c ****     rt_list_t list;
 612:rtthread/src/timer.c **** 
 613:rtthread/src/timer.c ****     rt_list_init(&list);
 614:rtthread/src/timer.c **** 
 615:rtthread/src/timer.c ****     RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check enter\n"));
 616:rtthread/src/timer.c **** 
 617:rtthread/src/timer.c ****     /* disable interrupt */
 618:rtthread/src/timer.c ****     level = rt_hw_interrupt_disable();
 619:rtthread/src/timer.c **** 
 620:rtthread/src/timer.c ****     while (!rt_list_isempty(&rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
 621:rtthread/src/timer.c ****     {
 622:rtthread/src/timer.c ****         t = rt_list_entry(rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
 623:rtthread/src/timer.c ****                             struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
 624:rtthread/src/timer.c **** 
 625:rtthread/src/timer.c ****         current_tick = rt_tick_get();
 626:rtthread/src/timer.c **** 
 627:rtthread/src/timer.c ****         /*
 628:rtthread/src/timer.c ****          * It supposes that the new tick shall less than the half duration of
 629:rtthread/src/timer.c ****          * tick max.
 630:rtthread/src/timer.c ****          */
 631:rtthread/src/timer.c ****         if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
 632:rtthread/src/timer.c ****         {
 633:rtthread/src/timer.c ****             RT_OBJECT_HOOK_CALL(rt_timer_enter_hook, (t));
 634:rtthread/src/timer.c **** 
 635:rtthread/src/timer.c ****             /* remove timer from timer list firstly */
 636:rtthread/src/timer.c ****             _rt_timer_remove(t);
 637:rtthread/src/timer.c ****             if (!(t->parent.flag & RT_TIMER_FLAG_PERIODIC))
 638:rtthread/src/timer.c ****             {
 639:rtthread/src/timer.c ****                 t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 640:rtthread/src/timer.c ****             }
 641:rtthread/src/timer.c ****             /* add timer to temporary list  */
 642:rtthread/src/timer.c ****             rt_list_insert_after(&list, &(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
 643:rtthread/src/timer.c **** 
 644:rtthread/src/timer.c ****             soft_timer_status = RT_SOFT_TIMER_BUSY;
 645:rtthread/src/timer.c ****             /* enable interrupt */
 646:rtthread/src/timer.c ****             rt_hw_interrupt_enable(level);
 647:rtthread/src/timer.c **** 
 648:rtthread/src/timer.c ****             /* call timeout function */
ARM GAS  /tmp/ccZMtG09.s 			page 31


 649:rtthread/src/timer.c ****             t->timeout_func(t->parameter);
 650:rtthread/src/timer.c **** 
 651:rtthread/src/timer.c ****             RT_OBJECT_HOOK_CALL(rt_timer_exit_hook, (t));
 652:rtthread/src/timer.c ****             RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));
 653:rtthread/src/timer.c **** 
 654:rtthread/src/timer.c ****             /* disable interrupt */
 655:rtthread/src/timer.c ****             level = rt_hw_interrupt_disable();
 656:rtthread/src/timer.c **** 
 657:rtthread/src/timer.c ****             soft_timer_status = RT_SOFT_TIMER_IDLE;
 658:rtthread/src/timer.c ****             /* Check whether the timer object is detached or started again */
 659:rtthread/src/timer.c ****             if (rt_list_isempty(&list))
 660:rtthread/src/timer.c ****             {
 661:rtthread/src/timer.c ****                 continue;
 662:rtthread/src/timer.c ****             }
 663:rtthread/src/timer.c ****             rt_list_remove(&(t->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
 664:rtthread/src/timer.c ****             if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
 665:rtthread/src/timer.c ****                 (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
 666:rtthread/src/timer.c ****             {
 667:rtthread/src/timer.c ****                 /* start it */
 668:rtthread/src/timer.c ****                 t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 669:rtthread/src/timer.c ****                 rt_timer_start(t);
 670:rtthread/src/timer.c ****             }
 671:rtthread/src/timer.c ****         }
 672:rtthread/src/timer.c ****         else break; /* not check anymore */
 673:rtthread/src/timer.c ****     }
 674:rtthread/src/timer.c ****     /* enable interrupt */
 675:rtthread/src/timer.c ****     rt_hw_interrupt_enable(level);
 676:rtthread/src/timer.c **** 
 677:rtthread/src/timer.c ****     RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check leave\n"));
 678:rtthread/src/timer.c **** }
 679:rtthread/src/timer.c **** 
 680:rtthread/src/timer.c **** /* system timer thread entry */
 681:rtthread/src/timer.c **** static void rt_thread_timer_entry(void *parameter)
 682:rtthread/src/timer.c **** {
 683:rtthread/src/timer.c ****     rt_tick_t next_timeout;
 684:rtthread/src/timer.c **** 
 685:rtthread/src/timer.c ****     while (1)
 686:rtthread/src/timer.c ****     {
 687:rtthread/src/timer.c ****         /* get the next timeout tick */
 688:rtthread/src/timer.c ****         next_timeout = rt_timer_list_next_timeout(rt_soft_timer_list);
 689:rtthread/src/timer.c ****         if (next_timeout == RT_TICK_MAX)
 690:rtthread/src/timer.c ****         {
 691:rtthread/src/timer.c ****             /* no software timer exist, suspend self. */
 692:rtthread/src/timer.c ****             rt_thread_suspend(rt_thread_self());
 693:rtthread/src/timer.c ****             rt_schedule();
 694:rtthread/src/timer.c ****         }
 695:rtthread/src/timer.c ****         else
 696:rtthread/src/timer.c ****         {
 697:rtthread/src/timer.c ****             rt_tick_t current_tick;
 698:rtthread/src/timer.c **** 
 699:rtthread/src/timer.c ****             /* get current tick */
 700:rtthread/src/timer.c ****             current_tick = rt_tick_get();
 701:rtthread/src/timer.c **** 
 702:rtthread/src/timer.c ****             if ((next_timeout - current_tick) < RT_TICK_MAX / 2)
 703:rtthread/src/timer.c ****             {
 704:rtthread/src/timer.c ****                 /* get the delta timeout tick */
 705:rtthread/src/timer.c ****                 next_timeout = next_timeout - current_tick;
ARM GAS  /tmp/ccZMtG09.s 			page 32


 706:rtthread/src/timer.c ****                 rt_thread_delay(next_timeout);
 707:rtthread/src/timer.c ****             }
 708:rtthread/src/timer.c ****         }
 709:rtthread/src/timer.c **** 
 710:rtthread/src/timer.c ****         /* check software timer */
 711:rtthread/src/timer.c ****         rt_soft_timer_check();
 712:rtthread/src/timer.c ****     }
 713:rtthread/src/timer.c **** }
 714:rtthread/src/timer.c **** #endif
 715:rtthread/src/timer.c **** 
 716:rtthread/src/timer.c **** /**
 717:rtthread/src/timer.c ****  * @ingroup SystemInit
 718:rtthread/src/timer.c ****  *
 719:rtthread/src/timer.c ****  * This function will initialize system timer
 720:rtthread/src/timer.c ****  */
 721:rtthread/src/timer.c **** void rt_system_timer_init(void)
 722:rtthread/src/timer.c **** {
 915              		.loc 1 722 0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 0
 918              		@ frame_needed = 0, uses_anonymous_args = 0
 919              		@ link register save eliminated.
 920              	.LVL103:
 723:rtthread/src/timer.c ****     int i;
 724:rtthread/src/timer.c **** 
 725:rtthread/src/timer.c ****     for (i = 0; i < sizeof(rt_timer_list) / sizeof(rt_timer_list[0]); i++)
 921              		.loc 1 725 0
 922 0000 0023     		movs	r3, #0
 923              	.LVL104:
 924              	.L63:
 925              		.loc 1 725 0 is_stmt 0 discriminator 1
 926 0002 03B1     		cbz	r3, .L64
 726:rtthread/src/timer.c ****     {
 727:rtthread/src/timer.c ****         rt_list_init(rt_timer_list + i);
 728:rtthread/src/timer.c ****     }
 729:rtthread/src/timer.c **** }
 927              		.loc 1 729 0 is_stmt 1
 928 0004 7047     		bx	lr
 929              	.L64:
 727:rtthread/src/timer.c ****     }
 930              		.loc 1 727 0 discriminator 3
 931 0006 0449     		ldr	r1, .L65
 932 0008 01EBC302 		add	r2, r1, r3, lsl #3
 933              	.LVL105:
 934              	.LBB82:
 935              	.LBB83:
  49:rtthread/include/rtservice.h **** }
 936              		.loc 2 49 0 discriminator 3
 937 000c 5260     		str	r2, [r2, #4]
 938 000e 41F83320 		str	r2, [r1, r3, lsl #3]
 939              	.LVL106:
 940              	.LBE83:
 941              	.LBE82:
 725:rtthread/src/timer.c ****     {
 942              		.loc 1 725 0 discriminator 3
 943 0012 0133     		adds	r3, r3, #1
 944              	.LVL107:
ARM GAS  /tmp/ccZMtG09.s 			page 33


 945 0014 F5E7     		b	.L63
 946              	.L66:
 947 0016 00BF     		.align	2
 948              	.L65:
 949 0018 00000000 		.word	.LANCHOR0
 950              		.cfi_endproc
 951              	.LFE25:
 953              		.section	.text.rt_system_timer_thread_init,"ax",%progbits
 954              		.align	1
 955              		.global	rt_system_timer_thread_init
 956              		.syntax unified
 957              		.thumb
 958              		.thumb_func
 959              		.fpu softvfp
 961              	rt_system_timer_thread_init:
 962              	.LFB26:
 730:rtthread/src/timer.c **** 
 731:rtthread/src/timer.c **** /**
 732:rtthread/src/timer.c ****  * @ingroup SystemInit
 733:rtthread/src/timer.c ****  *
 734:rtthread/src/timer.c ****  * This function will initialize system timer thread
 735:rtthread/src/timer.c ****  */
 736:rtthread/src/timer.c **** void rt_system_timer_thread_init(void)
 737:rtthread/src/timer.c **** {
 963              		.loc 1 737 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 0
 966              		@ frame_needed = 0, uses_anonymous_args = 0
 967              		@ link register save eliminated.
 738:rtthread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
 739:rtthread/src/timer.c ****     int i;
 740:rtthread/src/timer.c **** 
 741:rtthread/src/timer.c ****     for (i = 0;
 742:rtthread/src/timer.c ****          i < sizeof(rt_soft_timer_list) / sizeof(rt_soft_timer_list[0]);
 743:rtthread/src/timer.c ****          i++)
 744:rtthread/src/timer.c ****     {
 745:rtthread/src/timer.c ****         rt_list_init(rt_soft_timer_list + i);
 746:rtthread/src/timer.c ****     }
 747:rtthread/src/timer.c **** 
 748:rtthread/src/timer.c ****     /* start software timer thread */
 749:rtthread/src/timer.c ****     rt_thread_init(&timer_thread,
 750:rtthread/src/timer.c ****                    "timer",
 751:rtthread/src/timer.c ****                    rt_thread_timer_entry,
 752:rtthread/src/timer.c ****                    RT_NULL,
 753:rtthread/src/timer.c ****                    &timer_thread_stack[0],
 754:rtthread/src/timer.c ****                    sizeof(timer_thread_stack),
 755:rtthread/src/timer.c ****                    RT_TIMER_THREAD_PRIO,
 756:rtthread/src/timer.c ****                    10);
 757:rtthread/src/timer.c **** 
 758:rtthread/src/timer.c ****     /* startup */
 759:rtthread/src/timer.c ****     rt_thread_startup(&timer_thread);
 760:rtthread/src/timer.c **** #endif
 761:rtthread/src/timer.c **** }
 968              		.loc 1 761 0
 969 0000 7047     		bx	lr
 970              		.cfi_endproc
 971              	.LFE26:
ARM GAS  /tmp/ccZMtG09.s 			page 34


 973              		.section	.bss.random_nr.4670,"aw",%nobits
 974              		.align	2
 975              		.set	.LANCHOR1,. + 0
 978              	random_nr.4670:
 979 0000 00000000 		.space	4
 980              		.section	.bss.rt_timer_list,"aw",%nobits
 981              		.align	2
 982              		.set	.LANCHOR0,. + 0
 985              	rt_timer_list:
 986 0000 00000000 		.space	8
 986      00000000 
 987              		.text
 988              	.Letext0:
 989              		.file 3 "rtthread/include/rtdef.h"
 990              		.file 4 "rtthread/include/rtthread.h"
 991              		.file 5 "rtthread/include/rthw.h"
ARM GAS  /tmp/ccZMtG09.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 timer.c
     /tmp/ccZMtG09.s:16     .text._rt_timer_init:0000000000000000 $t
     /tmp/ccZMtG09.s:22     .text._rt_timer_init:0000000000000000 _rt_timer_init
     /tmp/ccZMtG09.s:91     .text.rt_timer_list_next_timeout:0000000000000000 $t
     /tmp/ccZMtG09.s:97     .text.rt_timer_list_next_timeout:0000000000000000 rt_timer_list_next_timeout
     /tmp/ccZMtG09.s:145    .text.rt_timer_init:0000000000000000 $t
     /tmp/ccZMtG09.s:152    .text.rt_timer_init:0000000000000000 rt_timer_init
     /tmp/ccZMtG09.s:198    .text.rt_timer_detach:0000000000000000 $t
     /tmp/ccZMtG09.s:205    .text.rt_timer_detach:0000000000000000 rt_timer_detach
     /tmp/ccZMtG09.s:283    .text.rt_timer_start:0000000000000000 $t
     /tmp/ccZMtG09.s:290    .text.rt_timer_start:0000000000000000 rt_timer_start
     /tmp/ccZMtG09.s:467    .text.rt_timer_start:00000000000000b0 $d
     /tmp/ccZMtG09.s:474    .text.rt_timer_stop:0000000000000000 $t
     /tmp/ccZMtG09.s:481    .text.rt_timer_stop:0000000000000000 rt_timer_stop
     /tmp/ccZMtG09.s:574    .text.rt_timer_control:0000000000000000 $t
     /tmp/ccZMtG09.s:581    .text.rt_timer_control:0000000000000000 rt_timer_control
     /tmp/ccZMtG09.s:606    .text.rt_timer_control:0000000000000014 $d
     /tmp/ccZMtG09.s:662    .text.rt_timer_check:0000000000000000 $t
     /tmp/ccZMtG09.s:669    .text.rt_timer_check:0000000000000000 rt_timer_check
     /tmp/ccZMtG09.s:866    .text.rt_timer_check:00000000000000d4 $d
     /tmp/ccZMtG09.s:874    .text.rt_timer_next_timeout_tick:0000000000000000 $t
     /tmp/ccZMtG09.s:881    .text.rt_timer_next_timeout_tick:0000000000000000 rt_timer_next_timeout_tick
     /tmp/ccZMtG09.s:901    .text.rt_timer_next_timeout_tick:000000000000000c $d
     /tmp/ccZMtG09.s:906    .text.rt_system_timer_init:0000000000000000 $t
     /tmp/ccZMtG09.s:913    .text.rt_system_timer_init:0000000000000000 rt_system_timer_init
     /tmp/ccZMtG09.s:949    .text.rt_system_timer_init:0000000000000018 $d
     /tmp/ccZMtG09.s:954    .text.rt_system_timer_thread_init:0000000000000000 $t
     /tmp/ccZMtG09.s:961    .text.rt_system_timer_thread_init:0000000000000000 rt_system_timer_thread_init
     /tmp/ccZMtG09.s:974    .bss.random_nr.4670:0000000000000000 $d
     /tmp/ccZMtG09.s:978    .bss.random_nr.4670:0000000000000000 random_nr.4670
     /tmp/ccZMtG09.s:981    .bss.rt_timer_list:0000000000000000 $d
     /tmp/ccZMtG09.s:985    .bss.rt_timer_list:0000000000000000 rt_timer_list
     /tmp/ccZMtG09.s:611    .text.rt_timer_control:0000000000000019 $d
     /tmp/ccZMtG09.s:611    .text.rt_timer_control:000000000000001a $t

UNDEFINED SYMBOLS
rt_hw_interrupt_disable
rt_hw_interrupt_enable
rt_object_init
rt_object_detach
rt_tick_get
