#______________________________________________________________________________
#       => Makefile 系统变量
#______________________________________________________________________________
        $*              # 
        $+              #
        $<              #
        $?              #
        $@              #
        $^              #
        $%              #
        


#______________________________________________________________________________
#       => Makefile 系统常量 make -p
#______________________________________________________________________________
        AS              # 汇编程序名称，默认 as
        CC              # C编译器名称， 默认 cc
        CPP             # C预编译名称， 默认 cc -E
        CXX             # C++编译器名称，默认 g++
        RM              # 文件删除程序别名，默认 rm -f



#______________________________________________________________________________
#       => Makefile 条件判断
#______________________________________________________________________________
        ifeq            # 判断是否相等，相等返回 TRUE， 不相等返回 FALSE
        ifneq           # 判断是否不相等
        ifdef           # 判断变量是否存在，存在返回 TRUE， 不存在返回 FALSE
        ifndef          # 判断变量是否不存在



#______________________________________________________________________________
#       => Makefile 伪目标
#______________________________________________________________________________
        .PHONY: clean
        # 声明目标为伪目标之后，
        # makefile将不会判断目标是否存在或该目标是否需在更新



#______________________________________________________________________________
#       => 内嵌函数（Makefile）
#______________________________________________________________________________
        $(wildcard PATTERN)                     # 当前目录下匹配模式的文件
        $(patsubst PATTERN, REPLACEMENT, TEXT)  # 模式替换函数
        $(patsubst %.c, %.o, $src) 等价于 $(src:.c=.o)



#______________________________________________________________________________
#       => 最原始的（Makefile）
#______________________________________________________________________________
.PHONY: clean
main: main.o add.o sub.o
	gcc -wall -g main.o add.o sub.o -o main
main.o: main.c
	gcc -wall -g -c main.c -o main.o
add.o: add.c
	gcc -wall -g -c add.c -o add.o
sub.o: sub.c
	gcc -wall -g -c sub.c -o sub.o
clean:
	rm -f main main.o add.o sub.o  
#______________________________________________________________
# 第一次简化（Makefile）
#______________________________________________________________
# Makefile自动化变量
#       $@   规则的目标文件名
#       $<   规则的第一个依赖文件名
#       $^   规则的所有的依赖文件列表
#______________________________________________________________
.PHONY: clean
OBJECTS=main.o add.o sub.o
main: $(OBJECTS)
	gcc -wall -g $^ -o $@
main.o: main.c
	gcc -wall -g -c $< -o $@
add.o: add.c
	gcc -wall -g -c $< -o $@
sub.o: sub.c
	gcc -wall -g -c $< -o $@
clean:
	rm -f main $(OBJECTS) 


#______________________________________________________________
# 二级目录__Makefile__
# main.c    Makefile    led/    pwm/    adc/
#______________________________________________________________
CC      = avr-gcc
OBJCOPY = avr-bojcopy
CFLAGS  = -Os -mmcu=atmega328p

#______________________________________________________________
# wildcard（函数）当前目录下匹配模式的文件
# gnu make工具的Makefile中$(SRC:%.c=%.o)的含义：
# 将SRC变量中所有以.c结尾的文件名替换成对应的以.o结尾的文件名，然后赋回给SRC
#______________________________________________________________
TARGET  = main
SUBDIR  = $(shell ls -d */)
ROOTSRC = $(wildcard *.c)
ROOTOBJ = $(ROOTSRC:%.c=%.o)
SUBSRC  = $(shell find $(SUBDIR) -name '*.c')
SUBOBJ  = $(SUBSRC:%.c=%.o)

#______________________________________________________________
# Makefile自动化变量
#       $@   规则的目标文件名
#       $<   规则的第一个依赖文件名
#       $^   规则的所有的依赖文件列表
#______________________________________________________________
#       （.c.o:） 等价于 （%.o:%.c）， 
#       注意其中的（.c.o），是一个旧格式（不要弄反了）
# 
# 注意！ （$< 对应了 xxx.c）， （$@ 对应了 xxx.o）
#______________________________________________________________
$(TARGET): $(ROOTOBJ) $(SUBOBJ)
	$(CC) $(CFLAGS) -o $(TARGET) $(ROOTOBJ) $(SUBOBJ)
.c.o:
	$(CC) $(CFLAGS) -c $< -o $@

.PHONY: clean
clean:
	rm -r $(TARGET) $(ROOTOBJ) $(SUBOBJ)
