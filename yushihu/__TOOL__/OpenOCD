// _____________________________________________________________________________
//      ESP32C3 JTAG Debug by OpenOCD & GDB
// _____________________________________________________________________________
        STM32-Serial            /dev/ttyUSB0
        STM32-USB_Serial        /dev/ttyACM0

        st-flash write ch.bin 0x8000000



// _____________________________________________________________________________
//      ESP32C3 JTAG Debug by OpenOCD & GDB
// _____________________________________________________________________________
// 设置CPU编译环境
idf.py  set-target esp32c3

// 编译所有代码
idf.py  all

// 第一个命令行进程
openocd -f board/esp32c3-builtin.cfg



// _____________________________________________________________________________
//      GDB 连接 OpenOCD
// _____________________________________________________________________________
$ vim gdbinit
set remotetimeout 100                   // 设置OpenOCD的超时时间
target extended-remote: 3333            // 设置OpenOCD的连接端口
set remote hardware-watchpoint-limit 2  // 设置ESP32C3的硬件断点支持数
mon reset halt                          // 重启CPU
flushregs                               // 更新寄存器
thb app_main                            // 设置中断在（app_main）
c


// 运行GDB
// 第二个命令行进程
riscv32-esp-elf-gdb build/blink.elf -x gdbinit






/*******************************************************************************
        => GDB 命令
*******************************************************************************/

        、、  N                   // 表示行号
        、、  file_name           // 表示文件名
        、、  function_name       // 表示函数名
        、、  watch               // 表示观察断点
        、、  var_name            // 表示变量名
        break   N                       // break 78 // 添加断点号（78）
        info break                      // 查看断点信息
        disable N                       // 禁止断点N
        enable  N                       // 使能断点N
        delete  N                       // 删除断点N
        break   file_name: N            // 设置文件中的断点
        break   function_name           // 使用函数名作为断点
        tbreak  N [function_name]        // 设置临时断点（它只运行一次）


        c                               // Continuing 让程序不断运行
        watch   var_name                // 通过变量名设置观察断点
        info    watch                   // 查看Watch断点


        //      GDB print Command
        // -------------------------------------//
                x       hexadecimal             // 16进制
                d       signed decimal          // 有符号小数
                u       unsigned decimal        // 无符号小数
                o       octal                   // 8进制
                t       binary                  // 2进制
                a       address                 //
                c       character               //
                f       floating number         //
                s       string                  //
        // -------------------------------------//
        print   /x      var_name                // 打印16进制
        print   /t      var_name                // 打印 2进制
        set     print address off               // 不显示地址信息
        set     print address on                // 显示地址信息
        set     print pretty on                 // 设置不同的显示格式
        set     print pretty off                // 关闭设置不同的显示格式
        print   function_name :: var_name       // 打印函数中变量的内容
                                                // 打印文件中变量的内容
        print   'file_path/app_main.c' :: var_name
                                                //
        print   var_name=6                      // 设置变量值（控制程序的流向）


        //      GDB display Command
        // -------------------------------------//
        display         var_name                // 显示变量的内容
        display /x      var_name                // 16进制显示变量的内容
        info            display                 // 查看display中信息
        disable         display         1       // 取消显示（ID:1）中的内容
        enable          display         1       // 显示（ID:1）中的内容
        undisplay       1                       // 删除 1号列表的变量
        delete          display         1       // 删除 1号列表的变量
        
        
        //      GDB Examine(x) Command
        // -------------------------------------//
        // x 命令格式
        x       /nfu    <address>               // Print memory
                n               // How many uints to print(default 1)
                f               // 打印格式（例如：x, d, u, ......）
                u               // 打印单位（Unit）
                <address>       // 输入的地址信息
        // （n）
                number          // 打印数量
        // （f）打印格式如下
                x       hexadecimal             // 16进制
                d       signed decimal          // 有符号小数
                u       unsigned decimal        // 无符号小数
                o       octal                   // 8进制
                t       binary                  // 2进制
                a       address                 //
                c       character               //
                f       floating number         //
                s       string                  //
        // （u）打印单位如下
                b       // Byte                 //
                h       // Half-word (2 btyes)  //
                w       // Word      (4 btyes)  //
                g       // Giant word(8 btyes)  //
        // -------------------------------------//
        //
        set             print address on        // 设置显示地址信息
        print           &var_name               // 打印变量的地址
        set     style address foreground green  // 前景色：绿色
        set     style address background red    // 背景色：红色
        //
        // print var_name
        // $1 = 0x12345678 "i am esp32c3"       // /13cb
        x               /13cb   0x12345678      // 打印（13个）字符，每个字符是1个Bytes
        x               /1sb    0x12345678      // 打印（1个）字符串
        
        
        
        //      GDB "Stepping" Command
        // -------------------------------------//
                next    [count]                 // 运行1行代码
                step    [count]                 // 进入函数内部中
                finish                          // 结束当前子函数
                until                           //
        // -------------------------------------//
        next    3                               // 运行下面3行代码
        until   139                             // 运行到139行
        



//      => arm-none-eabi-gdb的调试指令
//______________________________________________________________________________
        l               //list指令的缩写，意为列出当前执行的源代码。
                        //同时输入指令后重复按回车等效于再次输入上次的指令
                         
        c               //continue的缩写，在嵌入式GDB中我们不能使用RUN指令来运行代码，
                        //相应的我们需要continue指令来运行。
                        
        si              //step缩写，会进入子函数的单步运行
        ni              //next缩写，即会跳过子函数的单步运行
        u               //until缩写使用时后方加行号如： u 16 即运行到第16行
        p               //print缩写，使用时后面加变量名称如：p tmp ，用来显示变量数值
        display         //使用时后面加变量名称如：display tmp ，用于跟踪变量数值，
                        //在每次执行停下时会自动显示变量数值。
                        
        finish          //完成并跳出当前的子函数

        b               //break缩写，用于在程序中打断点，使用方式有很多种
        b 16            //在当前低16行代码出加断点。
        b i=1           //当i等于1时停止,类似于这种条件式断点的方式也是GDB独有的一种强大功能
        b main          //在main函数的入口打断点。

        i b             //info break 缩写，显示当前设置的断点信息。
	                //如下面这个查到了在main函数处有两个断点，序号分别为1 和 2.
	                
        d break         //delet break 缩写，删除所有断点
        d break 1       //删除序号为1的断点
        bt              //查看堆栈
        q/Ctrl+d        //使用q即quit指令或快捷键Ctrl+d来正常退出GDB


        list                    // 查看程序源代码
        break function          // 在某函数的入口设定断点
        break 行号              // 在指定行添加断点
        break 行号 if 条件      // 当条件为真时，指定行号处断点生效
        info break             // 查看断点
        delete                  // 删除断点
        run                     // 开始运行程序
        next                    // 单步运行程序，不进入子函数
        step                    // 单步运行程序，进入子函数
        continue                // 继续运行程序
        print 变量名             // 查看指定变量的值
        finish                  // 运行程序，直到当前函数结束
        display
        quit


//      => gdb文本图形界面
//______________________________________________________________________________

// 打开tui模式(Text User Interface)
// 使用"gdbtui -q" 或 "gdb -tui -q"开始一个调试
//___________________________________________________________
        $ gdbtui -q test_struct
        (gdb) ....


// 启动gdb_命令行下的图形界面
//___________________________________________________________
        $ gcc -gdb3 simple_gdb.c -o simple_gdb
        $ gdb simple_gdb 
        (gdb) start
        "ctrl+x ctrl+a" or "ctrl+x A"



// TUI模式下有4个窗口
// 除command 窗口外,其他三个窗口不可同时显示.其可用 layout 命令来进行选择
// 自己需要的窗口. 可参见 `help layout` 
//___________________________________________________________
        command                 // 命令窗口. 可以键入调试命令
        source                  // 源代码窗口. 显示当前行,断点等信息
        assembly                // 汇编代码窗口
        register               // 寄存器窗口






/*******************************************************************************
        => OpenOCD
*******************************************************************************/
// OpenOCD支持ST-Link的三个版本，
// 分别是ST-LINK, ST-LINK/V2, ST-LINK/V2-1配置文件要引用对应的
// ST-LINK配置，可以通过 “lsusb”命令 查看所使用的ST-LINK的ID确定版本
//___________________________________________________________
ST-LINK         interface/stlink-v1.cfg         0483:3744
ST-LINK/V2      interface/stlink-v2.cfg         0483:3748
ST-LINK/V2-1    interface/stlink-v2-1.cfg       0483:374b
//___________________________________________________________
//排除权限问题后，如果还出现open failed错误，那么需要检查ST-LINK版本是否对上了



// OpenOCD 调式STM32
// 打开第 1 个终端输入
//__________________________________________________________
openocd -f board/st_nucleo_f4.cfg
openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg


// 打开第 2 个终端输入
//__________________________________________________________
// 不过我们还没有完成所有的初始操作，此时我们需要输入指令来(复位, 停止MCU, 并加载elf文件)
arm-none-eabi-gdb blink.elf
        // 若是本地如下，若是局域网内则填写ip:port
	(gdb)	target remote localhost:3333
	
	// 进行初始化操作( 这里monitor意为这向连接的外部软件发送指令，此处即向Jlink发送指令，
	// 因为reset halt等指令不是GDB的内部指令 )
	(gdb)	monitor reset
	(gdb)	monitor halt
	
	//装载调试程序
        (gdb)   file <编译生成的elf文件>
	(gdb)	load



//      => STM32_SDT_V3.5.0
//______________________________________________________________________________
// stm32f10x.h
// _________________________________________________________
#if !defined (STM32F10X_LD) && !defined (STM32F10X_LD_VL) && \
    !defined (STM32F10X_MD) && !defined (STM32F10X_MD_VL) && \
    !defined (STM32F10X_HD) && !defined (STM32F10X_HD_VL) && \
    !defined (STM32F10X_XL) && !defined (STM32F10X_CL)
    #error "Please select first the target STM32F10x device  \
         used in your application (in stm32f10x.h file)"
#endif
#if !defined  USE_STDPERIPH_DRIVER
  /*#define USE_STDPERIPH_DRIVER*/
#endif


// 这里边包含一个条件编译，如果我们要把中断向量表存储在RAM或者FLASH
// 就要定义相关的宏文件位置 system_stm32f10x.c ->SystemInit();
// _________________________________________________________
#ifdef VECT_TAB_RAM
    NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0000000);
#else
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);
#endif


// 头文件相关 ->stm32f10x.h
// _________________________________________________________
#ifdef USE_STDPERIPH_DRIVER
  #include "stm32f10x_conf.h"
#endif


// Makefile.common
// _________________________________________________________
TypeOfMCU       =STM32F10X_MD
CFLAGSlib       +=-D $(TypeOfMCU)
CFLAGSlib       +=-D VECT_TAB_FLASH
CFLAGSlib       +=-D USE_STDPERIPH_DRIVER


// 此配置参数针对 STM32F10X标准固件函数库  V3.5.0
// _________________________________________________________

// 启动文件后缀名改为大写 =>[.S]

// 修改 core_cm3.c文件，针对STM32F10x_StdPeriph_Lib_V3.5.0库函数, 文件在 736 行处
// 打开工程文件STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\CoreSupport/core_cm3.c
// 在此文件的最后几行的位置，找到
	 __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
	 __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );	  
// 以下两行，并更改如下 _________________________________________________________________________
	 __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
	 __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
// 修改完成后，保存！注意，请再选中工程项目，刷新F5，再一次编译    
