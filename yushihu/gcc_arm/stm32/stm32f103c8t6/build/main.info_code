
build/main.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <deregister_tm_clones>:
 800010c:	4803      	ldr	r0, [pc, #12]	; (800011c <deregister_tm_clones+0x10>)
 800010e:	4b04      	ldr	r3, [pc, #16]	; (8000120 <deregister_tm_clones+0x14>)
 8000110:	4283      	cmp	r3, r0
 8000112:	d002      	beq.n	800011a <deregister_tm_clones+0xe>
 8000114:	4b03      	ldr	r3, [pc, #12]	; (8000124 <deregister_tm_clones+0x18>)
 8000116:	b103      	cbz	r3, 800011a <deregister_tm_clones+0xe>
 8000118:	4718      	bx	r3
 800011a:	4770      	bx	lr
 800011c:	20000444 	.word	0x20000444
 8000120:	20000444 	.word	0x20000444
 8000124:	00000000 	.word	0x00000000

08000128 <register_tm_clones>:
 8000128:	4805      	ldr	r0, [pc, #20]	; (8000140 <register_tm_clones+0x18>)
 800012a:	4906      	ldr	r1, [pc, #24]	; (8000144 <register_tm_clones+0x1c>)
 800012c:	1a09      	subs	r1, r1, r0
 800012e:	1089      	asrs	r1, r1, #2
 8000130:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000134:	1049      	asrs	r1, r1, #1
 8000136:	d002      	beq.n	800013e <register_tm_clones+0x16>
 8000138:	4b03      	ldr	r3, [pc, #12]	; (8000148 <register_tm_clones+0x20>)
 800013a:	b103      	cbz	r3, 800013e <register_tm_clones+0x16>
 800013c:	4718      	bx	r3
 800013e:	4770      	bx	lr
 8000140:	20000444 	.word	0x20000444
 8000144:	20000444 	.word	0x20000444
 8000148:	00000000 	.word	0x00000000

0800014c <__do_global_dtors_aux>:
 800014c:	b510      	push	{r4, lr}
 800014e:	4c06      	ldr	r4, [pc, #24]	; (8000168 <__do_global_dtors_aux+0x1c>)
 8000150:	7823      	ldrb	r3, [r4, #0]
 8000152:	b943      	cbnz	r3, 8000166 <__do_global_dtors_aux+0x1a>
 8000154:	f7ff ffda 	bl	800010c <deregister_tm_clones>
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <__do_global_dtors_aux+0x20>)
 800015a:	b113      	cbz	r3, 8000162 <__do_global_dtors_aux+0x16>
 800015c:	4804      	ldr	r0, [pc, #16]	; (8000170 <__do_global_dtors_aux+0x24>)
 800015e:	f3af 8000 	nop.w
 8000162:	2301      	movs	r3, #1
 8000164:	7023      	strb	r3, [r4, #0]
 8000166:	bd10      	pop	{r4, pc}
 8000168:	20000444 	.word	0x20000444
 800016c:	00000000 	.word	0x00000000
 8000170:	08000470 	.word	0x08000470

08000174 <frame_dummy>:
 8000174:	b508      	push	{r3, lr}
 8000176:	4b04      	ldr	r3, [pc, #16]	; (8000188 <frame_dummy+0x14>)
 8000178:	b11b      	cbz	r3, 8000182 <frame_dummy+0xe>
 800017a:	4904      	ldr	r1, [pc, #16]	; (800018c <frame_dummy+0x18>)
 800017c:	4804      	ldr	r0, [pc, #16]	; (8000190 <frame_dummy+0x1c>)
 800017e:	f3af 8000 	nop.w
 8000182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000186:	e7cf      	b.n	8000128 <register_tm_clones>
 8000188:	00000000 	.word	0x00000000
 800018c:	20000448 	.word	0x20000448
 8000190:	08000470 	.word	0x08000470

08000194 <atexit>:
 8000194:	2300      	movs	r3, #0
 8000196:	4601      	mov	r1, r0
 8000198:	461a      	mov	r2, r3
 800019a:	4618      	mov	r0, r3
 800019c:	f000 b83e 	b.w	800021c <__register_exitproc>

080001a0 <__libc_fini_array>:
 80001a0:	b538      	push	{r3, r4, r5, lr}
 80001a2:	4c0a      	ldr	r4, [pc, #40]	; (80001cc <__libc_fini_array+0x2c>)
 80001a4:	4d0a      	ldr	r5, [pc, #40]	; (80001d0 <__libc_fini_array+0x30>)
 80001a6:	1b64      	subs	r4, r4, r5
 80001a8:	10a4      	asrs	r4, r4, #2
 80001aa:	d00a      	beq.n	80001c2 <__libc_fini_array+0x22>
 80001ac:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80001b0:	3b01      	subs	r3, #1
 80001b2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80001b6:	3c01      	subs	r4, #1
 80001b8:	f855 3904 	ldr.w	r3, [r5], #-4
 80001bc:	4798      	blx	r3
 80001be:	2c00      	cmp	r4, #0
 80001c0:	d1f9      	bne.n	80001b6 <__libc_fini_array+0x16>
 80001c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80001c6:	f000 b959 	b.w	800047c <_fini>
 80001ca:	bf00      	nop
 80001cc:	08000498 	.word	0x08000498
 80001d0:	08000494 	.word	0x08000494

080001d4 <__libc_init_array>:
 80001d4:	b570      	push	{r4, r5, r6, lr}
 80001d6:	4e0d      	ldr	r6, [pc, #52]	; (800020c <__libc_init_array+0x38>)
 80001d8:	4d0d      	ldr	r5, [pc, #52]	; (8000210 <__libc_init_array+0x3c>)
 80001da:	1b76      	subs	r6, r6, r5
 80001dc:	10b6      	asrs	r6, r6, #2
 80001de:	d006      	beq.n	80001ee <__libc_init_array+0x1a>
 80001e0:	2400      	movs	r4, #0
 80001e2:	3401      	adds	r4, #1
 80001e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80001e8:	4798      	blx	r3
 80001ea:	42a6      	cmp	r6, r4
 80001ec:	d1f9      	bne.n	80001e2 <__libc_init_array+0xe>
 80001ee:	4e09      	ldr	r6, [pc, #36]	; (8000214 <__libc_init_array+0x40>)
 80001f0:	4d09      	ldr	r5, [pc, #36]	; (8000218 <__libc_init_array+0x44>)
 80001f2:	f000 f93d 	bl	8000470 <_init>
 80001f6:	1b76      	subs	r6, r6, r5
 80001f8:	10b6      	asrs	r6, r6, #2
 80001fa:	d006      	beq.n	800020a <__libc_init_array+0x36>
 80001fc:	2400      	movs	r4, #0
 80001fe:	3401      	adds	r4, #1
 8000200:	f855 3b04 	ldr.w	r3, [r5], #4
 8000204:	4798      	blx	r3
 8000206:	42a6      	cmp	r6, r4
 8000208:	d1f9      	bne.n	80001fe <__libc_init_array+0x2a>
 800020a:	bd70      	pop	{r4, r5, r6, pc}
 800020c:	0800048c 	.word	0x0800048c
 8000210:	0800048c 	.word	0x0800048c
 8000214:	08000494 	.word	0x08000494
 8000218:	0800048c 	.word	0x0800048c

0800021c <__register_exitproc>:
 800021c:	b4f0      	push	{r4, r5, r6, r7}
 800021e:	4c17      	ldr	r4, [pc, #92]	; (800027c <__register_exitproc+0x60>)
 8000220:	6825      	ldr	r5, [r4, #0]
 8000222:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8000226:	b30c      	cbz	r4, 800026c <__register_exitproc+0x50>
 8000228:	6865      	ldr	r5, [r4, #4]
 800022a:	2d1f      	cmp	r5, #31
 800022c:	dc23      	bgt.n	8000276 <__register_exitproc+0x5a>
 800022e:	b938      	cbnz	r0, 8000240 <__register_exitproc+0x24>
 8000230:	2000      	movs	r0, #0
 8000232:	1c6b      	adds	r3, r5, #1
 8000234:	3502      	adds	r5, #2
 8000236:	6063      	str	r3, [r4, #4]
 8000238:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
 800023e:	4770      	bx	lr
 8000240:	2601      	movs	r6, #1
 8000242:	eb04 0c85 	add.w	ip, r4, r5, lsl #2
 8000246:	f8cc 2088 	str.w	r2, [ip, #136]	; 0x88
 800024a:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 800024e:	fa06 f205 	lsl.w	r2, r6, r5
 8000252:	4317      	orrs	r7, r2
 8000254:	2802      	cmp	r0, #2
 8000256:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800025a:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
 800025e:	d1e7      	bne.n	8000230 <__register_exitproc+0x14>
 8000260:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8000264:	431a      	orrs	r2, r3
 8000266:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800026a:	e7e1      	b.n	8000230 <__register_exitproc+0x14>
 800026c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000270:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000274:	e7d8      	b.n	8000228 <__register_exitproc+0xc>
 8000276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800027a:	e7df      	b.n	800023c <__register_exitproc+0x20>
 800027c:	08000488 	.word	0x08000488

08000280 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop

08000284 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000284:	e7fe      	b.n	8000284 <HardFault_Handler>
 8000286:	bf00      	nop

08000288 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000288:	e7fe      	b.n	8000288 <MemManage_Handler>
 800028a:	bf00      	nop

0800028c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800028c:	e7fe      	b.n	800028c <BusFault_Handler>
 800028e:	bf00      	nop

08000290 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000290:	e7fe      	b.n	8000290 <UsageFault_Handler>
 8000292:	bf00      	nop

08000294 <SVC_Handler>:
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop

08000298 <DebugMon_Handler>:
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop

0800029c <PendSV_Handler>:
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <SysTick_Handler>:
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop

080002a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002a4:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80002a6:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 80002a8:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 80002ac:	4b3a      	ldr	r3, [pc, #232]	; (8000398 <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80002ae:	493b      	ldr	r1, [pc, #236]	; (800039c <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 80002b0:	6818      	ldr	r0, [r3, #0]
{
 80002b2:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 80002b4:	f040 0001 	orr.w	r0, r0, #1
 80002b8:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80002ba:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80002bc:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80002be:	4001      	ands	r1, r0
 80002c0:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002c2:	6819      	ldr	r1, [r3, #0]
 80002c4:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80002c8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80002cc:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002ce:	6819      	ldr	r1, [r3, #0]
 80002d0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80002d4:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80002d6:	6859      	ldr	r1, [r3, #4]
 80002d8:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 80002dc:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 80002de:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80002e0:	9400      	str	r4, [sp, #0]
 80002e2:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002e4:	6819      	ldr	r1, [r3, #0]
 80002e6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80002ea:	6019      	str	r1, [r3, #0]
 80002ec:	e003      	b.n	80002f6 <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80002ee:	9b00      	ldr	r3, [sp, #0]
 80002f0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80002f4:	d009      	beq.n	800030a <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80002f6:	6813      	ldr	r3, [r2, #0]
 80002f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002fc:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 80002fe:	9b00      	ldr	r3, [sp, #0]
 8000300:	3301      	adds	r3, #1
 8000302:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000304:	9b01      	ldr	r3, [sp, #4]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f1      	beq.n	80002ee <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800030a:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xf4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000312:	bf18      	it	ne
 8000314:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000316:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000318:	9b01      	ldr	r3, [sp, #4]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d006      	beq.n	800032c <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800031e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <SystemInit+0xfc>)
 8000324:	609a      	str	r2, [r3, #8]
}
 8000326:	b002      	add	sp, #8
 8000328:	bc30      	pop	{r4, r5}
 800032a:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800032c:	491d      	ldr	r1, [pc, #116]	; (80003a4 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000330:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000332:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000334:	f040 0010 	orr.w	r0, r0, #16
 8000338:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800033a:	6808      	ldr	r0, [r1, #0]
 800033c:	f020 0003 	bic.w	r0, r0, #3
 8000340:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000342:	6808      	ldr	r0, [r1, #0]
 8000344:	f040 0002 	orr.w	r0, r0, #2
 8000348:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800034a:	6859      	ldr	r1, [r3, #4]
 800034c:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800034e:	6859      	ldr	r1, [r3, #4]
 8000350:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000352:	6859      	ldr	r1, [r3, #4]
 8000354:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000358:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800035a:	6859      	ldr	r1, [r3, #4]
 800035c:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8000360:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000362:	6859      	ldr	r1, [r3, #4]
 8000364:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8000368:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 800036a:	6819      	ldr	r1, [r3, #0]
 800036c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000370:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000372:	6813      	ldr	r3, [r2, #0]
 8000374:	019b      	lsls	r3, r3, #6
 8000376:	d5fc      	bpl.n	8000372 <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000378:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800037a:	4907      	ldr	r1, [pc, #28]	; (8000398 <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800037c:	f023 0303 	bic.w	r3, r3, #3
 8000380:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000382:	6853      	ldr	r3, [r2, #4]
 8000384:	f043 0302 	orr.w	r3, r3, #2
 8000388:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800038a:	684b      	ldr	r3, [r1, #4]
 800038c:	f003 030c 	and.w	r3, r3, #12
 8000390:	2b08      	cmp	r3, #8
 8000392:	d1fa      	bne.n	800038a <SystemInit+0xe6>
 8000394:	e7c3      	b.n	800031e <SystemInit+0x7a>
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000
 800039c:	f8ff0000 	.word	0xf8ff0000
 80003a0:	e000ed00 	.word	0xe000ed00
 80003a4:	40022000 	.word	0x40022000

080003a8 <SystemCoreClockUpdate>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003a8:	4a11      	ldr	r2, [pc, #68]	; (80003f0 <SystemCoreClockUpdate+0x48>)
 80003aa:	6853      	ldr	r3, [r2, #4]
 80003ac:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 80003b0:	2b08      	cmp	r3, #8
 80003b2:	d10e      	bne.n	80003d2 <SystemCoreClockUpdate+0x2a>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80003b4:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003b6:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 80003b8:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 80003bc:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 80003be:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 80003c2:	d510      	bpl.n	80003e6 <SystemCoreClockUpdate+0x3e>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80003c4:	6852      	ldr	r2, [r2, #4]
 80003c6:	0392      	lsls	r2, r2, #14
 80003c8:	d40d      	bmi.n	80003e6 <SystemCoreClockUpdate+0x3e>
          SystemCoreClock = HSE_VALUE * pllmull;
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <SystemCoreClockUpdate+0x4c>)
 80003cc:	fb02 f303 	mul.w	r3, r2, r3
 80003d0:	e000      	b.n	80003d4 <SystemCoreClockUpdate+0x2c>
  switch (tmp)
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <SystemCoreClockUpdate+0x4c>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003d4:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <SystemCoreClockUpdate+0x48>)
 80003d6:	4908      	ldr	r1, [pc, #32]	; (80003f8 <SystemCoreClockUpdate+0x50>)
 80003d8:	6852      	ldr	r2, [r2, #4]
 80003da:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80003de:	5c8a      	ldrb	r2, [r1, r2]
  SystemCoreClock >>= tmp;  
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	610b      	str	r3, [r1, #16]
}
 80003e4:	4770      	bx	lr
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 80003e6:	4a05      	ldr	r2, [pc, #20]	; (80003fc <SystemCoreClockUpdate+0x54>)
 80003e8:	fb02 f303 	mul.w	r3, r2, r3
 80003ec:	e7f2      	b.n	80003d4 <SystemCoreClockUpdate+0x2c>
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000
 80003f4:	007a1200 	.word	0x007a1200
 80003f8:	20000430 	.word	0x20000430
 80003fc:	003d0900 	.word	0x003d0900

08000400 <register_fini>:
 8000400:	4b02      	ldr	r3, [pc, #8]	; (800040c <register_fini+0xc>)
 8000402:	b113      	cbz	r3, 800040a <register_fini+0xa>
 8000404:	4802      	ldr	r0, [pc, #8]	; (8000410 <register_fini+0x10>)
 8000406:	f7ff bec5 	b.w	8000194 <atexit>
 800040a:	4770      	bx	lr
 800040c:	00000000 	.word	0x00000000
 8000410:	080001a1 	.word	0x080001a1

08000414 <main>:
#include "stm32f10x.h"

int main(void)
{
        GPIOA->ODR |= 0;
 8000414:	4b02      	ldr	r3, [pc, #8]	; (8000420 <main+0xc>)
        return 0;
}
 8000416:	2000      	movs	r0, #0
        GPIOA->ODR |= 0;
 8000418:	68da      	ldr	r2, [r3, #12]
 800041a:	60da      	str	r2, [r3, #12]
}
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40010800 	.word	0x40010800

08000424 <Reset_Handler>:
 8000424:	2100      	movs	r1, #0
 8000426:	e003      	b.n	8000430 <LoopCopyDataInit>

08000428 <CopyDataInit>:
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <LoopFillZerobss+0x14>)
 800042a:	585b      	ldr	r3, [r3, r1]
 800042c:	5043      	str	r3, [r0, r1]
 800042e:	3104      	adds	r1, #4

08000430 <LoopCopyDataInit>:
 8000430:	480a      	ldr	r0, [pc, #40]	; (800045c <LoopFillZerobss+0x18>)
 8000432:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <LoopFillZerobss+0x1c>)
 8000434:	1842      	adds	r2, r0, r1
 8000436:	429a      	cmp	r2, r3
 8000438:	d3f6      	bcc.n	8000428 <CopyDataInit>
 800043a:	4a0a      	ldr	r2, [pc, #40]	; (8000464 <LoopFillZerobss+0x20>)
 800043c:	e002      	b.n	8000444 <LoopFillZerobss>

0800043e <FillZerobss>:
 800043e:	2300      	movs	r3, #0
 8000440:	f842 3b04 	str.w	r3, [r2], #4

08000444 <LoopFillZerobss>:
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <LoopFillZerobss+0x24>)
 8000446:	429a      	cmp	r2, r3
 8000448:	d3f9      	bcc.n	800043e <FillZerobss>
 800044a:	f7ff ff2b 	bl	80002a4 <SystemInit>
 800044e:	f7ff fec1 	bl	80001d4 <__libc_init_array>
 8000452:	f7ff ffdf 	bl	8000414 <main>
 8000456:	4770      	bx	lr
 8000458:	08000498 	.word	0x08000498
 800045c:	20000000 	.word	0x20000000
 8000460:	20000444 	.word	0x20000444
 8000464:	20000444 	.word	0x20000444
 8000468:	20000460 	.word	0x20000460

0800046c <ADC1_2_IRQHandler>:
 800046c:	e7fe      	b.n	800046c <ADC1_2_IRQHandler>
	...

08000470 <_init>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr

0800047c <_fini>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr
