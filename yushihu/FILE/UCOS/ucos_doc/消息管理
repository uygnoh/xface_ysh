/*******************************************************************************
        => UCOS 消息邮箱
*******************************************************************************/
// UCOS 任务定义
// ____________________________________________________________
// 设置任务的优先级
#define START_TASK_PRIO         9
#define LED01_TASK_PRIO         6
// 设置任务堆栈大小
#define START_STK_SIZE          64      // 64*4(Byte)
#define LED01_STK_SIZE          64      // 64*4(Byte)
// 创建任务堆栈空间
OS_STK  START_TASK_STK[START_STK_SIZE];
OS_STK  LED01_TASK_STK[LED01_STK_SIZE];
// 消息邮箱
OS_EVENT        *led01_mbox;

// UCOS 任务函数
// ____________________________________________________________
void start_task(void *args)
{
        INT8U   message_box[2];                 // 2个字节数据
                                                // 首先执行它
                                                // 进入任务前， 设置系统滴答定时器
                                                // 它会调用 OS_CPU_SysTickInit(cnts)
        OS_CPU_SysTickInitFreq(100*1000*1000);  // 设置系统时钟频率参数 (100MHz)
        OS_CPU_SR cpu_sr = 0;                   // 进入临界区所需的变量
        args = args;                            // 解除编译器警告
        OSStatInit();                           // 初始化统计任务
        OS_ENTER_CRITICAL();                    // 进入临界区
        OSTaskCreate(   led01_task,             // 任务入口
                        (void *)0,              // 任务参数
                                                // 任务堆栈（栈顶指针）
                        (OS_STK *)&LED01_TASK_STK[LED01_STK_SIZE - 1];
                        LED01_TASK_PRIO);       // 任务优先级
        OSTaskCreate(   led02_task,             // 任务入口
                        (void *)0,              // 任务参数
        OS_EXIT_CRITICAL();                     // 退出临界区
        
        while (1) {
                // 发送一个消息邮箱
                message_mbox[0] = 0x00;
                message_mbox[1] = 0x64;
                OSMboxPost(led01_mbox, (void *)&message_mbox);
                delay_ms(1000);
        }
}
void led01_task(void *args)
{
        INT8U *msg;
        INT16U led01_timer = 500;
        args = args;                            // 解除编译器警告
        for (;;) {                              // 接收消息邮箱
                                                // 10 表示等待 10个TICK
                msg = (INT8U *)OSMboxPend(led01_mbox, 10, &err);
                if (err == OS_ERR_NONE) {
                        led01_timer = msg[0] << 8 + msg[1];
                        if (led01_timer > 1000) led01_timer = 1000;
                        if (led01_timer < 1000) led01_timer = 100;
                }

        }
}




// 主程序
// ____________________________________________________________
int main(void)
{
        OS_Init();                              // 初始化UCOS系统
        led03_mbox = OSMboxCreate((void *)0);   // 创建LED03消息邮箱
        OSTaskCreate(   start_task,             // 任务入口
                        (void *)0,              // 任务参数
                                                // 任务堆栈（栈顶指针）
                        (OS_STK *)&START_TASK_STK[START_STK_SIZE - 1];
                        START_TASK_PRIO);       // 任务优先级
        OSStart();                              // 启动UCOS系统
}
