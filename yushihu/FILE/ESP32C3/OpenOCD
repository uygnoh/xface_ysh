// _____________________________________________________________________________
//      ESP32C3 JTAG Debug by OpenOCD & GDB
// _____________________________________________________________________________
// 设置CPU编译环境
idf.py  set-target esp32c3

// 编译所有代码
idf.py  all

// 第一个命令行进程
openocd -f board/esp32c3-builtin.cfg



// _____________________________________________________________________________
//      GDB 连接 OpenOCD
// _____________________________________________________________________________
$ vim gdbinit
set remotetimeout 100                   // 设置OpenOCD的超时时间
target extended-remote: 3333            // 设置OpenOCD的连接端口
set remote hardware-watchpoint-limit 2  // 设置ESP32C3的硬件断点支持数
mon reset halt                          // 重启CPU
flushregs                               // 更新寄存器
thb app_main                            // 设置中断在（app_main）
c


// 运行GDB
// 第二个命令行进程
riscv32-esp-elf-gdb build/blink.elf -x gdbinit



// _____________________________________________________________________________
//      GDB 命令
// _____________________________________________________________________________
        、、  N                   // 表示行号
        、、  file_name           // 表示文件名
        、、  function_name       // 表示函数名
        、、  watch               // 表示观察断点
        、、  var_name            // 表示变量名
        break   N                       // break 78 // 添加断点号（78）
        info break                      // 查看断点信息
        disable N                       // 禁止断点N
        enable  N                       // 使能断点N
        delete  N                       // 删除断点N
        break   file_name: N            // 设置文件中的断点
        break   function_name           // 使用函数名作为断点
        tbreak  N [function_name]        // 设置临时断点（它只运行一次）


        c                               // Continuing 让程序不断运行
        watch   var_name                // 通过变量名设置观察断点
        info    watch                   // 查看Watch断点


        //      GDB print Command
        // -------------------------------------//
                x       hexadecimal             // 16进制
                d       signed decimal          // 有符号小数
                u       unsigned decimal        // 无符号小数
                o       octal                   // 8进制
                t       binary                  // 2进制
                a       address                 //
                c       character               //
                f       floating number         //
                s       string                  //
        // -------------------------------------//
        print   /x      var_name                // 打印16进制
        print   /t      var_name                // 打印 2进制
        set     print address off               // 不显示地址信息
        set     print address on                // 显示地址信息
        set     print pretty on                 // 设置不同的显示格式
        set     print pretty off                // 关闭设置不同的显示格式
        print   function_name :: var_name       // 打印函数中变量的内容
                                                // 打印文件中变量的内容
        print   'file_path/app_main.c' :: var_name
                                                //
        print   var_name=6                      // 设置变量值（控制程序的流向）


        //      GDB display Command
        // -------------------------------------//
        display         var_name                // 显示变量的内容
        display /x      var_name                // 16进制显示变量的内容
        info            display                 // 查看display中信息
        disable         display         1       // 取消显示（ID:1）中的内容
        enable          display         1       // 显示（ID:1）中的内容
        undisplay       1                       // 删除 1号列表的变量
        delete          display         1       // 删除 1号列表的变量
        
        
        //      GDB Examine(x) Command
        // -------------------------------------//
        // x 命令格式
        x       /nfu    <address>               // Print memory
                n               // How many uints to print(default 1)
                f               // 打印格式（例如：x, d, u, ......）
                u               // 打印单位（Unit）
                <address>       // 输入的地址信息
        // （n）
                number          // 打印数量
        // （f）打印格式如下
                x       hexadecimal             // 16进制
                d       signed decimal          // 有符号小数
                u       unsigned decimal        // 无符号小数
                o       octal                   // 8进制
                t       binary                  // 2进制
                a       address                 //
                c       character               //
                f       floating number         //
                s       string                  //
        // （u）打印单位如下
                b       // Byte                 //
                h       // Half-word (2 btyes)  //
                w       // Word      (4 btyes)  //
                g       // Giant word(8 btyes)  //
        // -------------------------------------//
        //
        set             print address on        // 设置显示地址信息
        print           &var_name               // 打印变量的地址
        set     style address foreground green  // 前景色：绿色
        set     style address background red    // 背景色：红色
        //
        // print var_name
        // $1 = 0x12345678 "i am esp32c3"       // /13cb
        x               /13cb   0x12345678      // 打印（13个）字符，每个字符是1个Bytes
        x               /1sb    0x12345678      // 打印（1个）字符串
        
        
        
        //      GDB "Stepping" Command
        // -------------------------------------//
                next    [count]                 // 运行1行代码
                step    [count]                 // 进入函数内部中
                finish                          // 结束当前子函数
                until                           //
        // -------------------------------------//
        next    3                               // 运行下面3行代码
        until   139                             // 运行到139行
        
        
