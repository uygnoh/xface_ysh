//______________________________________________________________________________
//      => SCB
//______________________________________________________________________________
//  中断优先级分组寄存器， STM32F1XX只用到了第7位到第4位
// ._______________________________________.
// | GRP  | SCB->AIRC[10:8] |   IPR[7:4]   |       分配结果
// |______|_________________|______________|____________________________.
// |  0   |       111       |     0:4      |  0位抢占优先级, 4位响应优先级  |  7
// |  1   |       110       |     1:3      |  1位抢占优先级, 3位响应优先级  |  6
// |  2   |       101       |     2:2      |  2位抢占优先级, 2位响应优先级  |  5
// |  3   |       100       |     3:1      |  3位抢占优先级, 1位响应优先级  |  4
// |  4   |       011       |     4:0      |  4位抢占优先级, 0位响应优先级  |  3
// |______|_________________|______________|_____________________________.
// (uint32_t)(0x05FA0000) 访问密钥
#define SCB_AIRCR_VECTKEY               (uint32_t)(0x05FA0000)
#define PRIORITY_GROUP_00               (uint32_t)(0x05FA0700)
#define PRIORITY_GROUP_01               (uint32_t)(0x05FA0600)
#define PRIORITY_GROUP_02               (uint32_t)(0x05FA0500)
#define PRIORITY_GROUP_03               (uint32_t)(0x05FA0400)
#define PRIORITY_GROUP_04               (uint32_t)(0x05FA0300)
void scb_set_priority_grouping(void)
{
        SCB->AIRCR = PRIORITY_GROUP_04;
}




//______________________________________________________________________________
//      => SysTick_Cortex-M3 内部滴答定时器优先级设置
//______________________________________________________________________________
SCB->SHP[11] = 0xF0;    // 设置SYSTICK的优先级为15，注意SYSTICK
                        // 属于系统异常，所以他的优先级在SCB里设置



//______________________________________________________________________________
//      => 微控制器软件接口标准<CMSIS>
//______________________________________________________________________________
// (Cortex Microcontroller Software Interface Standard) 
// 是 Cortex-M 处理器系列的与供应商无关的硬件抽象层
        __I     // defines 'read only' permissions      定义只读允许位
        __O     // defines 'write only' permissions     定义只写允许位
        __IO    // defines 'read / write' permissions   定义读/写允许位



//______________________________________________________________________________
//      => NVIC
//______________________________________________________________________________
// 中断使能寄存器 (0xE000_E100 – 0xE000_E11C)
//_____________________________________________________________
__IO uint32_t ISER[8];  // Interrupt Set Enable Register


// 中断除能寄存器 (0xE000E180 - 0xE000_E19C)
//_____________________________________________________________
__IO uint32_t ICER[8];  // Interrupt Clear Enable Register


// 悬起寄存器族 (0xE000_E200 – 0xE000_E21C)
//_____________________________________________________________
__IO uint32_t ISPR[8];  // Interrupt Set Pending Register


// 解悬寄存器族 (0xE000E280 - 0xE000_E29C)
//_____________________________________________________________
__IO uint32_t ICPR[8];  // Interrupt Clear Pending Register


// 中断活动状态寄存器族 (0xE000_E300_0xE000_E31C) 
//_____________________________________________________________
__IO uint32_t IABR[8];  // Interrupt Active bit Register


// 中断优先级寄存器阵列 (0xE000_E400 – 0xE000_E4EF)
//_____________________________________________________________
__IO uint8_t  IP[240];  // Interrupt Priority Register (8Bit wide)


// 软件触发中断寄存器STIR (0xE000_EF00) 
//_____________________________________________________________
__O  uint32_t STIR;     // Software Trigger Interrupt Register
NVIC->STIR = 中断编号     // 影响编号为 8 的外部中断， 其悬起位被置位。
                           例如: 写入8， 则悬起 IRQ#8

// NVIC_外部中断使能
//_____________________________________________________________
NVIC->ISER[0] = uint32_t(0x10000000);   // TIM2, 中断使能
NVIC->ISER[1] = uint32_t(0x00020000);   // TIM5, 中断使能


// NVIC_外部中断优先级配置
//_____________________________________________________________
NVIC->IP[28] = uint8_t(0xF0);           // TIM2, 中断优先级设置
NVIC->IP[50] = uint8_t(0xF0);           // TIM5, 中断优先级设置



