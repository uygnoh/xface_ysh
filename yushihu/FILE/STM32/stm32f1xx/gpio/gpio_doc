//______________________________________________________________________________
//      => 两个32位配置寄存器(GPIOx_CRL, GPIOx_CRH)
//______________________________________________________________________________
//
//      GPIOx_CRL    -> 0  1  2   3   4   5   6   7          //  0~7 管脚
//      GPIOx_CRH    -> 8  9  10  11  12  13  14  15         // 8~16 管脚
//
//
//      在输出模式下(MODE[1:0] > 00)
//
//              CNF    MODE
//      ||      0 0    0 0     |  0  | 模拟输入
//      ||      0 1    0 0     |  4  | 浮空输入(复位后的状态) 
//      ||      1 0    0 0     |  8  | 下拉输入(如果 PxODR = 0)
//      ||      1 0    0 0     |  8  | 上拉输入(如果 PxODR = 1)
//      ||      1 1    0 0     |  C  | 保留
//
//      ||      0 0    0 1     |  1  | 推挽输出(10MHz)
//      ||      0 0    1 0     |  2  | 推挽输出(02MHz)
//      ||      0 0    1 1     |  3  | 推挽输出(50MHz)
//              
//      ||      0 1    0 1     |  5  | 开漏输出(10MHz)
//      ||      0 1    1 0     |  6  | 开漏输出(02MHz)
//      ||      0 1    1 1     |  7  | 开漏输出(02MHz)
//           
//      ||      1 0    0 1     |  9  | 复用推挽输出(10MHz)
//      ||      1 0    1 0     |  A  | 复用推挽输出(02MHz)
//      ||      1 0    1 1     |  B  | 复用推挽输出(50MHz)
//     
//      ||      1 1    0 1     |  D  | 复用开漏输出(10MHz)
//      ||      1 1    1 0     |  E  | 复用开漏输出(02MHz)
//      ||      1 1    1 1     |  F  | 复用开漏输出(50MHz)



//______________________________________________________________________________
//      => 端口位设置/清除寄存器(GPIOx_BSRR)
//______________________________________________________________________________
        31:16           // 写“1”，清除对应的ODRx位为0, x = 0..15
        15:0            // 写“1”，设置对应的ODRy位为1, x = 0..15



//______________________________________________________________________________
//      => 端口位清除寄存器(GPIOx_BRR)
//______________________________________________________________________________
        15:0            // 写“1”，清除对应的ODRx位为0, x = 0..15



//______________________________________________________________________________
//      => 端口配置锁定寄存器(GPIOx_LCKR)
//______________________________________________________________________________
31:17           // 保留
16              // LCKK:锁键 (Lock key)
                // 该位可随时读出,它只可通过锁键写入序列修改。
                0:端口配置锁键位激活
                1:端口配置锁键位被激活,下次系统复位前GPIOx_LCKR寄存器被锁住。
                // 锁键的写入序列:
                写1 -> 写0 -> 写1 -> 读0 -> 读1
                最后一个读可省略,但可以用来确认锁键已被激活。
                注:在操作锁键的写入序列时,不能改变LCK[15:0]的值。
                操作锁键写入序列中的任何错误将不能激活锁键
                
                

//______________________________________________________________________________
//      => 事件控制寄存器(AFIO_EVCR)
//______________________________________________________________________________
EVOE[7]         // EVOE位“1”允许事件输出 (Event output enable)
                // 该位可由软件读写。当设置该位后,Cortex的EVENTOUT将
                // 连接到由PORT[2:0]和PIN[3:0]选定的I/O口。

PORT[6:4]       // 端口选择, 选择用于输出Cortex的EVENTOUT信号的端口
        000     选择GPIOA
        001     选择GPIOB
        010     选择GPIOC
        011     选择GPIOD
        100     选择GPIOE

PIN[3:0]        // 引脚选择(x=A…E), 选择用于输出Cortex的EVENTOUT信号的引脚
        0000    选择GPIOx_PIN_0
        0001    选择GPIOx_PIN_1
        0010    选择GPIOx_PIN_2
        0011    选择GPIOx_PIN_3
        0100    选择GPIOx_PIN_4
        0101    选择GPIOx_PIN_5
        0110    选择GPIOx_PIN_6
        0111    选择GPIOx_PIN_7
        1000    选择GPIOx_PIN_8
        1001    选择GPIOx_PIN_9
        1010    选择GPIOx_PIN_10
        1011    选择GPIOx_PIN_11
        1100    选择GPIOx_PIN_12
        1101    选择GPIOx_PIN_13
        1110    选择GPIOx_PIN_14
        1111    选择GPIOx_PIN_15  
                
                
                
//______________________________________________________________________________
//      => 复用重映射和调试I/O配置寄存器(AFIO_MAPR)
//______________________________________________________________________________
SWJ_CFG[26:24]  // 串行线JTAG配置 (Serial wire JTAG configuration)
        000     // 完全SWJ(JTAG-DP + SW-DP):复位状态;
        001     // 完全SWJ(JTAG-DP + SW-DP)但没有NJTRST;
        010     // 关闭JTAG-DP,启用SW-DP;
        100     // 关闭JTAG-DP,关闭SW-DP;
        
        

//______________________________________________________________________________
//      => 外部中断配置寄存器组
//______________________________________________________________________________

        AFIO_EXTICR1_外部中断配置寄存器__1
//_____________________________________________________________
EXTIx[3:0]      // EXTIx配置(x = 0 … 3) 
                // 这些位可由软件读写，用于
                // 选择 EXTI0 ~ EXTI3 外部中断的输入源
        0000    // GPIOA
        0001    // GPIOB
        0011    // GPIOD
        0100    // GPIOE
        0101    // GPIOF
        0110    // GPIOG



        AFIO_EXTICR2_外部中断配置寄存器__2
//_____________________________________________________________
EXTIx[3:0]      // EXTIx配置(x = 4 … 4) 
                // 这些位可由软件读写，用于
                // 选择 EXTI4 ~ EXTI7 外部中断的输入源
        0000    // GPIOA
        0001    // GPIOB
        0011    // GPIOD
        0100    // GPIOE
        0101    // GPIOF
        0110    // GPIOG



        AFIO_EXTICR3_外部中断配置寄存器__3
//_____________________________________________________________
EXTIx[3:0]      // EXTIx配置(x = 8 … 11) 
                // 这些位可由软件读写，用于
                // 选择 EXTI8 ~ EXTI11 外部中断的输入源
        0000    // GPIOA
        0001    // GPIOB
        0011    // GPIOD
        0100    // GPIOE
        0101    // GPIOF
        0110    // GPIOG



        AFIO_EXTICR4_外部中断配置寄存器__4
//_____________________________________________________________
EXTIx[3:0]      // EXTIx配置(x = 12 … 15) 
                // 这些位可由软件读写，用于
                // 选择 EXTI12 ~ EXTI15 外部中断的输入源
        0000    // GPIOA
        0001    // GPIOB
        0011    // GPIOD
        0100    // GPIOE
        0101    // GPIOF
        0110    // GPIOG
