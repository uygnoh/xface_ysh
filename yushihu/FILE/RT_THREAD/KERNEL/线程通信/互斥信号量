// IPC (Internal Process Communication) 线程间通信
struct mutex {
        struct rt_ipc_object    parent;           // inherit from ipc_object
        rt_uint16_t             value;            // value of mutex
        rt_uint8_t              original_priority;// priority of last thread hold the mutex
        rt_uint8_t              hold;             // numbers of thread hold the mutex
        struct rt_thread        *owner;           // current owner of mutex
};
struct rt_mutex  static_mutex           // 定义静态互斥量
rt_mutex_t        dynamic_mutex         // 定义动态互斥量
// （静态互斥量）初始化与脱离
rt_err_t        rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
rt_err_t        rt_mutex_detach(rt_mutex_t mutex)

// （动态互斥量）创建与删除
rt_mutex_t      rt_mutex_create(const char *name, rt_uint8_t flag)
rt_err_t        rt_mutex_delete(rt_mutex_t mutex)

// 获取互斥量
// RT_WAITING_FOREVER = -1
rt_err_t        rt_mutex_take(rt_mutex_t mutex, rt_int32_t time);

// 释放互斥量
rt_err_t        rt_mutex_release(rt_mutext_t mutex)



//______________________________________________________________________________
//      线程1对2个number分别进行加1操作
//      线程2对2个number分别进行加1操作
//      使用互斥量保证2个number值保持一致
//______________________________________________________________________________
static rt_mutex_t       dynamic_mutex = RT_NULL;
static rt_uint8_t       number1 = 0;
static rt_uint8_t       number2 = 0;


ALIGN(RT_ALIGN_SIZE)
static char thread1_stack[1024];
static struct rt_thread thread1;
static void rt_thread_entry1(void *parameter)
{
        while (1) {
                rt_mutex_take(dynamic_mutex, RT_WAITING_FOREVER);       // 获取互斥量（dynamic_mutex - 1）
                number1++;
                rt_thread_mdelay(10);
                number2++;
                rt_mutex_release(dynamic_mutex);                        // 释放互斥量（dynamic_mutex + 1）
        }
}

ALIGN(RT_ALIGN_SIZE)
static char thread1_stack[1024];
static struct rt_thread thread2;
static void rt_thread_entry2(void *parameter)
{
        while (1) {
                // 线程2获取到互斥量后，检查number1,number2的值是否相等
                // 如果相等，则表示mutex起到了锁的作用
                rt_mutex_take(dynamic_mutex, RT_WAITING_FOREVER);
                if (number1 != number2) {
                        rt_kprintf("not protect number1 = %d, number2 = %d \n", number1, number2);
                } else {
                        rt_kprintf("mutex protect, number1 == number2 is %d \n", number1);
                }
                number1++;
                number2++;
                rt_mutex_release(dynamic_mutex);
                if (number1 >= 50) {
                        return;
                }
        }
}

int mutex_sample(void)
{
        dynamic_mutex = rt_mutex_create("dmutex", RT_IPC_FLAG_FIFO);
        if (dynamic_mutex == RT_NULL) {
                kprintf("create dynamic mutex failed.\n");
                return (-1);
        }
        rt_thread_init(&thread1,
                        "thread1",
                        r_thread_entry1,
                        RT_NULL,
                        &thread1_stack[0],
                        sizeof(thread_stack),
                        6,
                        5);
        rt_thread_startup(&thread1);
        rt_thread_init(&thread2,
                        "thread2",
                        r_thread_entry2,
                        RT_NULL,
                        &thread2_stack[0],
                        sizeof(thread_stack),
                        6,
                        5);
        rt_thread_startup(&thread2);
}
MSH_CMD_EXPORT(mutex_sample, mutex sample);
