//______________________________________________________________________________
//      => 创建静态线程
//______________________________________________________________________________
rt_err  rt_thread_init(
                struct rt_thread *thread,       // 线程控制块地址
                const char       *name,         // 线程名称
                void (*entry)(void *parameter), // 线程入口函数
                void              *parameter,   // 线程参数
                void              *stack_start, // 线程栈空间起始地址
                rt_uint32_t        stack_size,  // 线程栈大小
                rt_uint8_t         priority,    // 线程优先级
                rt_uint32_t        tick);       // 线程时间片参数
// 启动线程
rt_err_t rt_thread_startup(rt_thread_t thread);



// 静态线程 -> 程序示例
//_____________________________________________________________
ALIGN(RT_ALIGN_SIZE);
static char thread2_stack[1024];
static struct rt_thread thread2;
static void thread2_entry(void *parameter)
{
        rt_uint32_t count = 0;
        
        // 线程2拥有较高的优先级，经抢占线程1而获得执行
        for (count = 0; count < 10; count++) {
                rt_kprintf("thread2 count: %d\n", count);
        }
        rt_kprintf("thread2 exit\n");
        
        // 线程2运行结束后也将自动被系统删除
        // 线程控制块和线程栈依然在idle线程中删除
}



//______________________________________________________________________________
//      => 创建动态线程
//______________________________________________________________________________
rt_err  rt_thread_create(
                const char       *name,         // 线程名称
                void (*entry)(void *parameter), // 线程入口函数
                void              *parameter,   // 线程参数
                rt_uint32_t        stack_size,  // 线程栈大小
                rt_uint8_t         priority,
                rt_uint32_t        tick);     
// 启动线程
rt_err_t rt_thread_startup(rt_thread_t thread);



// 动态线程 -> 程序示例
//_____________________________________________________________
#define THREAD_PRIORITY         25
#define THREAD_STACK_SIZE       512
#define THREAD_TIMESLICE        5

static rt_thread_t tid1 = RT_NULL;
static void thread1_entry(void *parameter)
{
        rt_uint32_t count = 0;
        while (1) {
                rt_kprintf("thread1 count: %d\n", count++);
                rt_thread_mdelay(500);
        }
}



//______________________________________________________________________________
//      => 静态线程和动态线程的初始化
//______________________________________________________________________________
int thread_sample(void)
{
        // 动态线程初始化
        // 创建线程1，名称是thread1，入口是thread1_entry
        tid1 = rt_thread_create(
                        "htread1",
                        thread1_entry,
                        RT_NULL,
                        THREAD_STACK_SIZE,
                        THREAD_PRIORITY,
                        THREAD_TIMESLICE);
        // 如果获得线程控制块，启动这个线程
        if (tid1 != RT_NULL) {
                rt_thread_startup(tid1);
        }      
                
        // 静态线程初始化
        // 初始化线程2，名称是thread2，入口是thread2_entry
        rt_thread_init(
                        &thread2,
                        "thread2",
                        thread2_entry,
                        RT_NULL,
                        &thread2_stack[0],
                        sizeof(thread2_stack),
                        THREAD_PRIORITY - 1,
                        THREAD_TIMESLICE);
        rt_thread_startup(&thread2);
        
        return 0;
} 
