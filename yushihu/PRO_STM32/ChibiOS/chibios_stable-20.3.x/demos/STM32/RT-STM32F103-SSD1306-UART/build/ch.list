
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023b 	.word	0x0800023b
 8000010:	0800023b 	.word	0x0800023b
 8000014:	0800023b 	.word	0x0800023b
 8000018:	0800023b 	.word	0x0800023b
 800001c:	0800023b 	.word	0x0800023b
 8000020:	0800023b 	.word	0x0800023b
 8000024:	0800023b 	.word	0x0800023b
 8000028:	0800023b 	.word	0x0800023b
 800002c:	08002361 	.word	0x08002361
 8000030:	0800023b 	.word	0x0800023b
 8000034:	0800023b 	.word	0x0800023b
 8000038:	0800023b 	.word	0x0800023b
 800003c:	0800023b 	.word	0x0800023b
 8000040:	0800023b 	.word	0x0800023b
 8000044:	0800023b 	.word	0x0800023b
 8000048:	0800023b 	.word	0x0800023b
 800004c:	0800023b 	.word	0x0800023b
 8000050:	0800023b 	.word	0x0800023b
 8000054:	0800023b 	.word	0x0800023b
 8000058:	0800023b 	.word	0x0800023b
 800005c:	0800023b 	.word	0x0800023b
 8000060:	0800023b 	.word	0x0800023b
 8000064:	0800023b 	.word	0x0800023b
 8000068:	0800023b 	.word	0x0800023b
 800006c:	080030b1 	.word	0x080030b1
 8000070:	08003091 	.word	0x08003091
 8000074:	08003071 	.word	0x08003071
 8000078:	08003051 	.word	0x08003051
 800007c:	08003031 	.word	0x08003031
 8000080:	08003011 	.word	0x08003011
 8000084:	08002ff1 	.word	0x08002ff1
 8000088:	0800023b 	.word	0x0800023b
 800008c:	0800023b 	.word	0x0800023b
 8000090:	080027b1 	.word	0x080027b1
 8000094:	0800023b 	.word	0x0800023b
 8000098:	0800023b 	.word	0x0800023b
 800009c:	0800023b 	.word	0x0800023b
 80000a0:	0800023b 	.word	0x0800023b
 80000a4:	0800023b 	.word	0x0800023b
 80000a8:	0800023b 	.word	0x0800023b
 80000ac:	0800023b 	.word	0x0800023b
 80000b0:	08002d31 	.word	0x08002d31
 80000b4:	0800023b 	.word	0x0800023b
 80000b8:	0800023b 	.word	0x0800023b
 80000bc:	08002ed1 	.word	0x08002ed1
 80000c0:	08002df1 	.word	0x08002df1
 80000c4:	0800023b 	.word	0x0800023b
 80000c8:	0800023b 	.word	0x0800023b
 80000cc:	0800023b 	.word	0x0800023b
 80000d0:	0800023b 	.word	0x0800023b
 80000d4:	08002b71 	.word	0x08002b71
 80000d8:	0800023b 	.word	0x0800023b
 80000dc:	0800023b 	.word	0x0800023b
 80000e0:	0800023b 	.word	0x0800023b
 80000e4:	0800023b 	.word	0x0800023b
 80000e8:	0800023b 	.word	0x0800023b
 80000ec:	0800023b 	.word	0x0800023b
 80000f0:	0800023b 	.word	0x0800023b
 80000f4:	0800023b 	.word	0x0800023b
 80000f8:	0800023b 	.word	0x0800023b
 80000fc:	0800023b 	.word	0x0800023b
 8000100:	0800023b 	.word	0x0800023b
 8000104:	0800023b 	.word	0x0800023b
 8000108:	0800023b 	.word	0x0800023b
 800010c:	0800023b 	.word	0x0800023b
 8000110:	0800023b 	.word	0x0800023b
 8000114:	0800023b 	.word	0x0800023b
 8000118:	0800023b 	.word	0x0800023b
 800011c:	0800023b 	.word	0x0800023b
 8000120:	0800023b 	.word	0x0800023b
 8000124:	0800023b 	.word	0x0800023b
 8000128:	0800023b 	.word	0x0800023b
 800012c:	0800023b 	.word	0x0800023b
 8000130:	0800023b 	.word	0x0800023b
 8000134:	0800023b 	.word	0x0800023b
 8000138:	0800023b 	.word	0x0800023b
 800013c:	0800023b 	.word	0x0800023b
 8000140:	0800023b 	.word	0x0800023b
 8000144:	0800023b 	.word	0x0800023b
 8000148:	0800023b 	.word	0x0800023b
 800014c:	0800023b 	.word	0x0800023b
 8000150:	0800023b 	.word	0x0800023b
 8000154:	0800023b 	.word	0x0800023b
 8000158:	0800023b 	.word	0x0800023b
 800015c:	0800023b 	.word	0x0800023b

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4827      	ldr	r0, [pc, #156]	; (8000200 <endfiniloop+0x4>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4826      	ldr	r0, [pc, #152]	; (8000204 <endfiniloop+0x8>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800016e:	4826      	ldr	r0, [pc, #152]	; (8000208 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000170:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000174:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000178:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800017a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800017c:	f380 8814 	msr	CONTROL, r0
                isb
 8000180:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000184:	f002 ffec 	bl	8003160 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000188:	f002 fad2 	bl	8002730 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800018c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000190:	491e      	ldr	r1, [pc, #120]	; (800020c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000192:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <endfiniloop+0x4>)

08000194 <msloop>:
msloop:
                cmp     r1, r2
 8000194:	4291      	cmp	r1, r2
                itt     lo
 8000196:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000198:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800019c:	e7fa      	bcc.n	8000194 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800019e:	491c      	ldr	r1, [pc, #112]	; (8000210 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001a0:	4a18      	ldr	r2, [pc, #96]	; (8000204 <endfiniloop+0x8>)

080001a2 <psloop>:
psloop:
                cmp     r1, r2
 80001a2:	4291      	cmp	r1, r2
                itt     lo
 80001a4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001aa:	e7fa      	bcc.n	80001a2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80001ac:	4919      	ldr	r1, [pc, #100]	; (8000214 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80001ae:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80001b0:	4b1a      	ldr	r3, [pc, #104]	; (800021c <endfiniloop+0x20>)

080001b2 <dloop>:
dloop:
                cmp     r2, r3
 80001b2:	429a      	cmp	r2, r3
                ittt    lo
 80001b4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ba:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001be:	e7f8      	bcc.n	80001b2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001c0:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001c2:	4917      	ldr	r1, [pc, #92]	; (8000220 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <endfiniloop+0x28>)

080001c6 <bloop>:
bloop:
                cmp     r1, r2
 80001c6:	4291      	cmp	r1, r2
                itt     lo
 80001c8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001ca:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001ce:	e7fa      	bcc.n	80001c6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001d0:	f002 ff7e 	bl	80030d0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001d4:	f002 ffbc 	bl	8003150 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001d8:	4c13      	ldr	r4, [pc, #76]	; (8000228 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 80001da:	4d14      	ldr	r5, [pc, #80]	; (800022c <endfiniloop+0x30>)

080001dc <initloop>:
initloop:
                cmp     r4, r5
 80001dc:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001de:	da03      	bge.n	80001e8 <endinitloop>
                ldr     r1, [r4], #4
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001e4:	4788      	blx	r1
                b       initloop
 80001e6:	e7f9      	b.n	80001dc <initloop>

080001e8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e8:	f001 fdda 	bl	8001da0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001ec:	4c10      	ldr	r4, [pc, #64]	; (8000230 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 80001ee:	4d11      	ldr	r5, [pc, #68]	; (8000234 <endfiniloop+0x38>)

080001f0 <finiloop>:
finiloop:
                cmp     r4, r5
 80001f0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001f2:	da03      	bge.n	80001fc <endfiniloop>
                ldr     r1, [r4], #4
 80001f4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f8:	4788      	blx	r1
                b       finiloop
 80001fa:	e7f9      	b.n	80001f0 <finiloop>

080001fc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001fc:	f002 bfa0 	b.w	8003140 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000200:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000204:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000208:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000214:	080040c4 	.word	0x080040c4
                ldr     r2, =__data_base__
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800021c:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 8000220:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 8000224:	200013d0 	.word	0x200013d0
                ldr     r4, =__init_array_base__
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_base__
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end__
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800023a:	f000 f800 	bl	800023e <_unhandled_exception>

0800023e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023e:	e7fe      	b.n	800023e <_unhandled_exception>

08000240 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000250:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000252:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000256:	4628      	mov	r0, r5
                blx     r4
 8000258:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800025a:	2000      	movs	r0, #0
                bl      chThdExit
 800025c:	f002 f890 	bl	8002380 <chThdExit>

08000260 <_zombies>:
_zombies:       b       _zombies
 8000260:	e7fe      	b.n	8000260 <_zombies>

08000262 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000262:	f002 f8b5 	bl	80023d0 <chSchDoReschedule>

08000266 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000266:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000268:	e7fe      	b.n	8000268 <_port_exit_from_isr+0x2>
	...

0800026c <memcpy>:
 800026c:	4684      	mov	ip, r0
 800026e:	ea41 0300 	orr.w	r3, r1, r0
 8000272:	f013 0303 	ands.w	r3, r3, #3
 8000276:	d149      	bne.n	800030c <memcpy+0xa0>
 8000278:	3a40      	subs	r2, #64	; 0x40
 800027a:	d323      	bcc.n	80002c4 <memcpy+0x58>
 800027c:	680b      	ldr	r3, [r1, #0]
 800027e:	6003      	str	r3, [r0, #0]
 8000280:	684b      	ldr	r3, [r1, #4]
 8000282:	6043      	str	r3, [r0, #4]
 8000284:	688b      	ldr	r3, [r1, #8]
 8000286:	6083      	str	r3, [r0, #8]
 8000288:	68cb      	ldr	r3, [r1, #12]
 800028a:	60c3      	str	r3, [r0, #12]
 800028c:	690b      	ldr	r3, [r1, #16]
 800028e:	6103      	str	r3, [r0, #16]
 8000290:	694b      	ldr	r3, [r1, #20]
 8000292:	6143      	str	r3, [r0, #20]
 8000294:	698b      	ldr	r3, [r1, #24]
 8000296:	6183      	str	r3, [r0, #24]
 8000298:	69cb      	ldr	r3, [r1, #28]
 800029a:	61c3      	str	r3, [r0, #28]
 800029c:	6a0b      	ldr	r3, [r1, #32]
 800029e:	6203      	str	r3, [r0, #32]
 80002a0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80002a2:	6243      	str	r3, [r0, #36]	; 0x24
 80002a4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80002a6:	6283      	str	r3, [r0, #40]	; 0x28
 80002a8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80002aa:	62c3      	str	r3, [r0, #44]	; 0x2c
 80002ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80002ae:	6303      	str	r3, [r0, #48]	; 0x30
 80002b0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80002b2:	6343      	str	r3, [r0, #52]	; 0x34
 80002b4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80002b6:	6383      	str	r3, [r0, #56]	; 0x38
 80002b8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80002ba:	63c3      	str	r3, [r0, #60]	; 0x3c
 80002bc:	3040      	adds	r0, #64	; 0x40
 80002be:	3140      	adds	r1, #64	; 0x40
 80002c0:	3a40      	subs	r2, #64	; 0x40
 80002c2:	d2db      	bcs.n	800027c <memcpy+0x10>
 80002c4:	3230      	adds	r2, #48	; 0x30
 80002c6:	d30b      	bcc.n	80002e0 <memcpy+0x74>
 80002c8:	680b      	ldr	r3, [r1, #0]
 80002ca:	6003      	str	r3, [r0, #0]
 80002cc:	684b      	ldr	r3, [r1, #4]
 80002ce:	6043      	str	r3, [r0, #4]
 80002d0:	688b      	ldr	r3, [r1, #8]
 80002d2:	6083      	str	r3, [r0, #8]
 80002d4:	68cb      	ldr	r3, [r1, #12]
 80002d6:	60c3      	str	r3, [r0, #12]
 80002d8:	3010      	adds	r0, #16
 80002da:	3110      	adds	r1, #16
 80002dc:	3a10      	subs	r2, #16
 80002de:	d2f3      	bcs.n	80002c8 <memcpy+0x5c>
 80002e0:	320c      	adds	r2, #12
 80002e2:	d305      	bcc.n	80002f0 <memcpy+0x84>
 80002e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e8:	f840 3b04 	str.w	r3, [r0], #4
 80002ec:	3a04      	subs	r2, #4
 80002ee:	d2f9      	bcs.n	80002e4 <memcpy+0x78>
 80002f0:	3204      	adds	r2, #4
 80002f2:	d008      	beq.n	8000306 <memcpy+0x9a>
 80002f4:	07d2      	lsls	r2, r2, #31
 80002f6:	bf1c      	itt	ne
 80002f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000300:	d301      	bcc.n	8000306 <memcpy+0x9a>
 8000302:	880b      	ldrh	r3, [r1, #0]
 8000304:	8003      	strh	r3, [r0, #0]
 8000306:	4660      	mov	r0, ip
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	2a08      	cmp	r2, #8
 800030e:	d313      	bcc.n	8000338 <memcpy+0xcc>
 8000310:	078b      	lsls	r3, r1, #30
 8000312:	d0b1      	beq.n	8000278 <memcpy+0xc>
 8000314:	f010 0303 	ands.w	r3, r0, #3
 8000318:	d0ae      	beq.n	8000278 <memcpy+0xc>
 800031a:	f1c3 0304 	rsb	r3, r3, #4
 800031e:	1ad2      	subs	r2, r2, r3
 8000320:	07db      	lsls	r3, r3, #31
 8000322:	bf1c      	itt	ne
 8000324:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000328:	f800 3b01 	strbne.w	r3, [r0], #1
 800032c:	d3a4      	bcc.n	8000278 <memcpy+0xc>
 800032e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000332:	f820 3b02 	strh.w	r3, [r0], #2
 8000336:	e79f      	b.n	8000278 <memcpy+0xc>
 8000338:	3a04      	subs	r2, #4
 800033a:	d3d9      	bcc.n	80002f0 <memcpy+0x84>
 800033c:	3a01      	subs	r2, #1
 800033e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000342:	f800 3b01 	strb.w	r3, [r0], #1
 8000346:	d2f9      	bcs.n	800033c <memcpy+0xd0>
 8000348:	780b      	ldrb	r3, [r1, #0]
 800034a:	7003      	strb	r3, [r0, #0]
 800034c:	784b      	ldrb	r3, [r1, #1]
 800034e:	7043      	strb	r3, [r0, #1]
 8000350:	788b      	ldrb	r3, [r1, #2]
 8000352:	7083      	strb	r3, [r0, #2]
 8000354:	4660      	mov	r0, ip
 8000356:	4770      	bx	lr

08000358 <memset>:
 8000358:	b4f0      	push	{r4, r5, r6, r7}
 800035a:	0786      	lsls	r6, r0, #30
 800035c:	d043      	beq.n	80003e6 <memset+0x8e>
 800035e:	1e54      	subs	r4, r2, #1
 8000360:	2a00      	cmp	r2, #0
 8000362:	d03e      	beq.n	80003e2 <memset+0x8a>
 8000364:	b2ca      	uxtb	r2, r1
 8000366:	4603      	mov	r3, r0
 8000368:	e002      	b.n	8000370 <memset+0x18>
 800036a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800036e:	d338      	bcc.n	80003e2 <memset+0x8a>
 8000370:	f803 2b01 	strb.w	r2, [r3], #1
 8000374:	079d      	lsls	r5, r3, #30
 8000376:	d1f8      	bne.n	800036a <memset+0x12>
 8000378:	2c03      	cmp	r4, #3
 800037a:	d92b      	bls.n	80003d4 <memset+0x7c>
 800037c:	b2cd      	uxtb	r5, r1
 800037e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000382:	2c0f      	cmp	r4, #15
 8000384:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000388:	d916      	bls.n	80003b8 <memset+0x60>
 800038a:	f1a4 0710 	sub.w	r7, r4, #16
 800038e:	093f      	lsrs	r7, r7, #4
 8000390:	f103 0620 	add.w	r6, r3, #32
 8000394:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8000398:	f103 0210 	add.w	r2, r3, #16
 800039c:	e942 5504 	strd	r5, r5, [r2, #-16]
 80003a0:	e942 5502 	strd	r5, r5, [r2, #-8]
 80003a4:	3210      	adds	r2, #16
 80003a6:	42b2      	cmp	r2, r6
 80003a8:	d1f8      	bne.n	800039c <memset+0x44>
 80003aa:	f004 040f 	and.w	r4, r4, #15
 80003ae:	3701      	adds	r7, #1
 80003b0:	2c03      	cmp	r4, #3
 80003b2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80003b6:	d90d      	bls.n	80003d4 <memset+0x7c>
 80003b8:	461e      	mov	r6, r3
 80003ba:	4622      	mov	r2, r4
 80003bc:	3a04      	subs	r2, #4
 80003be:	2a03      	cmp	r2, #3
 80003c0:	f846 5b04 	str.w	r5, [r6], #4
 80003c4:	d8fa      	bhi.n	80003bc <memset+0x64>
 80003c6:	1f22      	subs	r2, r4, #4
 80003c8:	f022 0203 	bic.w	r2, r2, #3
 80003cc:	3204      	adds	r2, #4
 80003ce:	4413      	add	r3, r2
 80003d0:	f004 0403 	and.w	r4, r4, #3
 80003d4:	b12c      	cbz	r4, 80003e2 <memset+0x8a>
 80003d6:	b2c9      	uxtb	r1, r1
 80003d8:	441c      	add	r4, r3
 80003da:	f803 1b01 	strb.w	r1, [r3], #1
 80003de:	429c      	cmp	r4, r3
 80003e0:	d1fb      	bne.n	80003da <memset+0x82>
 80003e2:	bcf0      	pop	{r4, r5, r6, r7}
 80003e4:	4770      	bx	lr
 80003e6:	4614      	mov	r4, r2
 80003e8:	4603      	mov	r3, r0
 80003ea:	e7c5      	b.n	8000378 <memset+0x20>
 80003ec:	0000      	movs	r0, r0
	...

080003f0 <dmaStreamAllocI.part.0.constprop.42>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    osalDbgCheck(false);
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
 80003f2:	2501      	movs	r5, #1
    if ((dma.allocated_mask & mask) == 0U) {
 80003f4:	4a25      	ldr	r2, [pc, #148]	; (800048c <dmaStreamAllocI.part.0.constprop.42+0x9c>)
    uint32_t mask = (1U << i);
 80003f6:	fa05 f400 	lsl.w	r4, r5, r0
    if ((dma.allocated_mask & mask) == 0U) {
 80003fa:	6813      	ldr	r3, [r2, #0]
 80003fc:	421c      	tst	r4, r3
 80003fe:	d001      	beq.n	8000404 <dmaStreamAllocI.part.0.constprop.42+0x14>

      return dmastp;
    }
  }

  return NULL;
 8000400:	2000      	movs	r0, #0
}
 8000402:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rccEnableDMA1(true);
 8000404:	4f22      	ldr	r7, [pc, #136]	; (8000490 <dmaStreamAllocI.part.0.constprop.42+0xa0>)
      dma.allocated_mask  |= mask;
 8000406:	4323      	orrs	r3, r4
 8000408:	6013      	str	r3, [r2, #0]
        rccEnableDMA1(true);
 800040a:	f8d7 c014 	ldr.w	ip, [r7, #20]
      dma.streams[i].func  = func;
 800040e:	1c46      	adds	r6, r0, #1
 8000410:	f842 1036 	str.w	r1, [r2, r6, lsl #3]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8000414:	f8df e080 	ldr.w	lr, [pc, #128]	; 8000498 <dmaStreamAllocI.part.0.constprop.42+0xa8>
      dma.streams[i].param = param;
 8000418:	491e      	ldr	r1, [pc, #120]	; (8000494 <dmaStreamAllocI.part.0.constprop.42+0xa4>)
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 800041a:	0103      	lsls	r3, r0, #4
      dma.streams[i].param = param;
 800041c:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
        rccEnableDMA1(true);
 8000420:	f04c 0001 	orr.w	r0, ip, #1
      dma.streams[i].param = param;
 8000424:	6071      	str	r1, [r6, #4]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8000426:	eb0e 0c03 	add.w	ip, lr, r3
        rccEnableDMA1(true);
 800042a:	6178      	str	r0, [r7, #20]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 800042c:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8000430:	6856      	ldr	r6, [r2, #4]
        rccEnableDMA1(true);
 8000432:	6978      	ldr	r0, [r7, #20]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8000434:	420e      	tst	r6, r1
 8000436:	d012      	beq.n	800045e <dmaStreamAllocI.part.0.constprop.42+0x6e>
      dmaStreamDisable(dmastp);
 8000438:	210e      	movs	r1, #14
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800043a:	2500      	movs	r5, #0
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800043c:	eb0e 0003 	add.w	r0, lr, r3
      dmaStreamDisable(dmastp);
 8000440:	f85e 7003 	ldr.w	r7, [lr, r3]
 8000444:	6843      	ldr	r3, [r0, #4]
        dma.isr_mask |= mask;
 8000446:	4334      	orrs	r4, r6
 8000448:	6054      	str	r4, [r2, #4]
      dmaStreamDisable(dmastp);
 800044a:	681c      	ldr	r4, [r3, #0]
 800044c:	7b42      	ldrb	r2, [r0, #13]
 800044e:	f024 040f 	bic.w	r4, r4, #15
 8000452:	fa01 f202 	lsl.w	r2, r1, r2
 8000456:	601c      	str	r4, [r3, #0]
 8000458:	607a      	str	r2, [r7, #4]
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800045a:	601d      	str	r5, [r3, #0]
}
 800045c:	bdf0      	pop	{r4, r5, r6, r7, pc}

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800045e:	2750      	movs	r7, #80	; 0x50
          nvicEnableVector(dmastp->vector, priority);
 8000460:	f89c 000f 	ldrb.w	r0, [ip, #15]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000464:	0941      	lsrs	r1, r0, #5
 8000466:	0089      	lsls	r1, r1, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000468:	f100 4c60 	add.w	ip, r0, #3758096384	; 0xe0000000
 800046c:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000470:	f000 001f 	and.w	r0, r0, #31
 8000474:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
 8000478:	4085      	lsls	r5, r0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800047a:	f50c 4c61 	add.w	ip, ip, #57600	; 0xe100
 800047e:	f88c 7300 	strb.w	r7, [ip, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000482:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000486:	600d      	str	r5, [r1, #0]
 8000488:	e7d6      	b.n	8000438 <dmaStreamAllocI.part.0.constprop.42+0x48>
 800048a:	bf00      	nop
 800048c:	20000f44 	.word	0x20000f44
 8000490:	40021000 	.word	0x40021000
 8000494:	20000834 	.word	0x20000834
 8000498:	08003ef0 	.word	0x08003ef0
 800049c:	00000000 	.word	0x00000000

080004a0 <usb_lld_start_in.constprop.21>:
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80004a0:	68c2      	ldr	r2, [r0, #12]
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 80004a2:	b410      	push	{r4}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80004a4:	6953      	ldr	r3, [r2, #20]

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 80004a6:	8a11      	ldrh	r1, [r2, #16]
  n = isp->txsize;
 80004a8:	681a      	ldr	r2, [r3, #0]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80004aa:	4c17      	ldr	r4, [pc, #92]	; (8000508 <usb_lld_start_in.constprop.21+0x68>)
 80004ac:	4291      	cmp	r1, r2
 80004ae:	bf28      	it	cs
 80004b0:	4611      	movcs	r1, r2
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
 80004b2:	60d9      	str	r1, [r3, #12]
  usb_packet_write_from_buffer(ep, isp->txbuf, n);
 80004b4:	6898      	ldr	r0, [r3, #8]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80004b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80004b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80004bc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80004c0:	681a      	ldr	r2, [r3, #0]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80004c2:	6059      	str	r1, [r3, #4]
  while (i > 0) {
 80004c4:	b189      	cbz	r1, 80004ea <usb_lld_start_in.constprop.21+0x4a>
 80004c6:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 80004ca:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80004ce:	0052      	lsls	r2, r2, #1
 80004d0:	3901      	subs	r1, #1
 80004d2:	0849      	lsrs	r1, r1, #1
 80004d4:	1d13      	adds	r3, r2, #4
 80004d6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80004da:	e000      	b.n	80004de <usb_lld_start_in.constprop.21+0x3e>
 80004dc:	3304      	adds	r3, #4
    w |= *buf++ << 8;
 80004de:	f830 4b02 	ldrh.w	r4, [r0], #2
  while (i > 0) {
 80004e2:	4299      	cmp	r1, r3
    *pmap++ = (stm32_usb_pma_t)w;
 80004e4:	6014      	str	r4, [r2, #0]
 80004e6:	461a      	mov	r2, r3
  while (i > 0) {
 80004e8:	d1f8      	bne.n	80004dc <usb_lld_start_in.constprop.21+0x3c>

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <usb_lld_start_in.constprop.21+0x68>)
}
 80004ec:	bc10      	pop	{r4}
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80004ee:	6813      	ldr	r3, [r2, #0]
 80004f0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80004f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004f8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80004fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	4770      	bx	lr
 8000508:	40005c00 	.word	0x40005c00
 800050c:	00000000 	.word	0x00000000

08000510 <usb_lld_start_out.constprop.20>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000510:	68c1      	ldr	r1, [r0, #12]
 8000512:	698a      	ldr	r2, [r1, #24]
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8000514:	6813      	ldr	r3, [r2, #0]
 8000516:	b19b      	cbz	r3, 8000540 <usb_lld_start_out.constprop.20+0x30>
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8000518:	8a49      	ldrh	r1, [r1, #18]
 800051a:	440b      	add	r3, r1
 800051c:	3b01      	subs	r3, #1
 800051e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000522:	8193      	strh	r3, [r2, #12]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8000524:	4a08      	ldr	r2, [pc, #32]	; (8000548 <usb_lld_start_out.constprop.20+0x38>)
 8000526:	6813      	ldr	r3, [r2, #0]
 8000528:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800052c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000530:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	4770      	bx	lr
    osp->rxpkts = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	8193      	strh	r3, [r2, #12]
 8000544:	e7ee      	b.n	8000524 <usb_lld_start_out.constprop.20+0x14>
 8000546:	bf00      	nop
 8000548:	40005c00 	.word	0x40005c00
 800054c:	00000000 	.word	0x00000000

08000550 <gotoXy>:
}

static void gotoXy(void *ip, uint8_t x, uint8_t y) {
  SSD1306Driver *drvp = (SSD1306Driver *)ip;

  drvp->x = x;
 8000550:	7301      	strb	r1, [r0, #12]
  drvp->y = y;
 8000552:	7342      	strb	r2, [r0, #13]
}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
	...

08000560 <drawPixel>:
  if (x > SSD1306_WIDTH || y > SSD1306_HEIGHT) return;
 8000560:	2980      	cmp	r1, #128	; 0x80
 8000562:	d81d      	bhi.n	80005a0 <drawPixel+0x40>
 8000564:	2a40      	cmp	r2, #64	; 0x40
 8000566:	d81b      	bhi.n	80005a0 <drawPixel+0x40>
static void drawPixel(void *ip, uint8_t x, uint8_t y, ssd1306_color_t color) {
 8000568:	b430      	push	{r4, r5}
  if (drvp->inv) {
 800056a:	7b84      	ldrb	r4, [r0, #14]
 800056c:	b114      	cbz	r4, 8000574 <drawPixel+0x14>
    color = (ssd1306_color_t)!color;
 800056e:	fab3 f383 	clz	r3, r3
 8000572:	095b      	lsrs	r3, r3, #5
 8000574:	2501      	movs	r5, #1
 8000576:	08d4      	lsrs	r4, r2, #3
 8000578:	eb04 14c4 	add.w	r4, r4, r4, lsl #7
 800057c:	4421      	add	r1, r4
 800057e:	4429      	add	r1, r5
 8000580:	4401      	add	r1, r0
 8000582:	f002 0207 	and.w	r2, r2, #7
 8000586:	f991 000f 	ldrsb.w	r0, [r1, #15]
 800058a:	fa05 f202 	lsl.w	r2, r5, r2
 800058e:	b252      	sxtb	r2, r2
  if (color == SSD1306_COLOR_WHITE) {
 8000590:	42ab      	cmp	r3, r5
    drvp->fb[x + (y / 8) * SSD1306_WIDTH_FIXED + 1] |= 1 << (y % 8);
 8000592:	bf0c      	ite	eq
 8000594:	4302      	orreq	r2, r0
    drvp->fb[x + (y / 8) * SSD1306_WIDTH_FIXED + 1] &= ~(1 << (y % 8));
 8000596:	ea20 0202 	bicne.w	r2, r0, r2
 800059a:	73ca      	strb	r2, [r1, #15]
}
 800059c:	bc30      	pop	{r4, r5}
 800059e:	4770      	bx	lr
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
	...

080005b0 <PUTC>:

static char PUTC(void *ip, char ch, const ssd1306_font_t *font, ssd1306_color_t color) {
 80005b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SSD1306Driver *drvp = (SSD1306Driver *)ip;
  uint32_t i, b, j;

  // Check available space in OLED
  if (drvp->x + font->fw >= SSD1306_WIDTH ||
 80005b4:	f890 c00c 	ldrb.w	ip, [r0, #12]
 80005b8:	f892 e000 	ldrb.w	lr, [r2]
static char PUTC(void *ip, char ch, const ssd1306_font_t *font, ssd1306_color_t color) {
 80005bc:	b083      	sub	sp, #12
  if (drvp->x + font->fw >= SSD1306_WIDTH ||
 80005be:	eb0c 070e 	add.w	r7, ip, lr
 80005c2:	2f7f      	cmp	r7, #127	; 0x7f
 80005c4:	dc3c      	bgt.n	8000640 <PUTC+0x90>
      drvp->y + font->fh >= SSD1306_HEIGHT) {
 80005c6:	7854      	ldrb	r4, [r2, #1]
 80005c8:	7b45      	ldrb	r5, [r0, #13]
 80005ca:	4425      	add	r5, r4
  if (drvp->x + font->fw >= SSD1306_WIDTH ||
 80005cc:	2d3f      	cmp	r5, #63	; 0x3f
 80005ce:	dc37      	bgt.n	8000640 <PUTC+0x90>
 80005d0:	4698      	mov	r8, r3
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	4616      	mov	r6, r2
 80005d6:	4605      	mov	r5, r0
    return 0;
  }

  // Go through font
  for (i = 0; i < font->fh; i++) {
 80005d8:	b36c      	cbz	r4, 8000636 <PUTC+0x86>
 80005da:	f04f 0a00 	mov.w	sl, #0
 80005de:	4673      	mov	r3, lr
 80005e0:	f1a1 0b20 	sub.w	fp, r1, #32
    b = font->dt[(ch - 32) * font->fh + i];
 80005e4:	fb0b a204 	mla	r2, fp, r4, sl
 80005e8:	6871      	ldr	r1, [r6, #4]
 80005ea:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
    for (j = 0; j < font->fw; j++) {
 80005ee:	b1db      	cbz	r3, 8000628 <PUTC+0x78>
 80005f0:	2400      	movs	r4, #0
 80005f2:	fa5f f98a 	uxtb.w	r9, sl
      if ((b << j) & 0x8000) {
 80005f6:	fa07 f304 	lsl.w	r3, r7, r4
 80005fa:	041b      	lsls	r3, r3, #16
        drawPixel(drvp, drvp->x + j, drvp->y + i, color);
      } else {
        drawPixel(drvp, drvp->x + j, drvp->y + i,(ssd1306_color_t)! color);
 80005fc:	bf58      	it	pl
 80005fe:	fab8 f388 	clzpl	r3, r8
 8000602:	7b6a      	ldrb	r2, [r5, #13]
 8000604:	eb0c 0104 	add.w	r1, ip, r4
 8000608:	444a      	add	r2, r9
        drawPixel(drvp, drvp->x + j, drvp->y + i, color);
 800060a:	bf4c      	ite	mi
 800060c:	4643      	movmi	r3, r8
        drawPixel(drvp, drvp->x + j, drvp->y + i,(ssd1306_color_t)! color);
 800060e:	095b      	lsrpl	r3, r3, #5
 8000610:	b2c9      	uxtb	r1, r1
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	4628      	mov	r0, r5
 8000616:	f7ff ffa3 	bl	8000560 <drawPixel>
    for (j = 0; j < font->fw; j++) {
 800061a:	7833      	ldrb	r3, [r6, #0]
 800061c:	3401      	adds	r4, #1
 800061e:	429c      	cmp	r4, r3
 8000620:	f895 c00c 	ldrb.w	ip, [r5, #12]
 8000624:	d3e7      	bcc.n	80005f6 <PUTC+0x46>
 8000626:	7874      	ldrb	r4, [r6, #1]
  for (i = 0; i < font->fh; i++) {
 8000628:	f10a 0a01 	add.w	sl, sl, #1
 800062c:	45a2      	cmp	sl, r4
 800062e:	d3d9      	bcc.n	80005e4 <PUTC+0x34>
 8000630:	469e      	mov	lr, r3
 8000632:	eb0c 0703 	add.w	r7, ip, r3
  		}
  	}
  */

  // Increase pointer
  drvp->x += font->fw;
 8000636:	9801      	ldr	r0, [sp, #4]
 8000638:	732f      	strb	r7, [r5, #12]

  // Return character written
  return ch;
}
 800063a:	b003      	add	sp, #12
 800063c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
 8000640:	2000      	movs	r0, #0
}
 8000642:	b003      	add	sp, #12
 8000644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000650 <PUTS>:

static char PUTS(void *ip, char *str, const ssd1306_font_t *font, ssd1306_color_t color) {
 8000650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000652:	460c      	mov	r4, r1
  // Write characters
  while (*str) {
 8000654:	7809      	ldrb	r1, [r1, #0]
 8000656:	b181      	cbz	r1, 800067a <PUTS+0x2a>
 8000658:	4607      	mov	r7, r0
 800065a:	4616      	mov	r6, r2
 800065c:	461d      	mov	r5, r3
 800065e:	e002      	b.n	8000666 <PUTS+0x16>
 8000660:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000664:	b149      	cbz	r1, 800067a <PUTS+0x2a>
    // Write character by character
    if (PUTC(ip, *str, font, color) != *str) {
 8000666:	462b      	mov	r3, r5
 8000668:	4632      	mov	r2, r6
 800066a:	4638      	mov	r0, r7
 800066c:	f7ff ffa0 	bl	80005b0 <PUTC>
 8000670:	7823      	ldrb	r3, [r4, #0]
 8000672:	4298      	cmp	r0, r3
 8000674:	d0f4      	beq.n	8000660 <PUTS+0x10>
    str++;
  }

  // Everything OK, zero should be returned
  return *str;
}
 8000676:	4618      	mov	r0, r3
 8000678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static char PUTS(void *ip, char *str, const ssd1306_font_t *font, ssd1306_color_t color) {
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000680 <toggleInvert>:
  drvp->inv = !drvp->inv;
 8000680:	7b83      	ldrb	r3, [r0, #14]
 8000682:	f100 0110 	add.w	r1, r0, #16
 8000686:	fab3 f383 	clz	r3, r3
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	7383      	strb	r3, [r0, #14]
  for (idx = 0; idx < sizeof(drvp->fb); idx++) {
 800068e:	2200      	movs	r2, #0
    if (idx % SSD1306_WIDTH_FIXED == 0) continue;
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <toggleInvert+0x38>)
 8000692:	e00b      	b.n	80006ac <toggleInvert+0x2c>
 8000694:	fba0 c302 	umull	ip, r3, r0, r2
 8000698:	08db      	lsrs	r3, r3, #3
 800069a:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	b113      	cbz	r3, 80006aa <toggleInvert+0x2a>
    drvp->fb[idx] = ~drvp->fb[idx];
 80006a4:	780b      	ldrb	r3, [r1, #0]
 80006a6:	43db      	mvns	r3, r3
 80006a8:	700b      	strb	r3, [r1, #0]
 80006aa:	3101      	adds	r1, #1
  for (idx = 0; idx < sizeof(drvp->fb); idx++) {
 80006ac:	3201      	adds	r2, #1
 80006ae:	b292      	uxth	r2, r2
 80006b0:	f5b2 6f81 	cmp.w	r2, #1032	; 0x408
 80006b4:	d1ee      	bne.n	8000694 <toggleInvert+0x14>
}
 80006b6:	4770      	bx	lr
 80006b8:	0fe03f81 	.word	0x0fe03f81
 80006bc:	00000000 	.word	0x00000000

080006c0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80006c0:	b430      	push	{r4, r5}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80006c2:	2320      	movs	r3, #32
 80006c4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <chCoreAllocFromTop+0x38>)
 80006ca:	4249      	negs	r1, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80006cc:	e9d3 4500 	ldrd	r4, r5, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80006d0:	1a28      	subs	r0, r5, r0
 80006d2:	4008      	ands	r0, r1
  prev = p - offset;
 80006d4:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80006d6:	42a2      	cmp	r2, r4
 80006d8:	d307      	bcc.n	80006ea <chCoreAllocFromTop+0x2a>
 80006da:	4295      	cmp	r5, r2
 80006dc:	d305      	bcc.n	80006ea <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	2300      	movs	r3, #0
 80006e2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 80006e6:	bc30      	pop	{r4, r5}
 80006e8:	4770      	bx	lr
    return NULL;
 80006ea:	2000      	movs	r0, #0
 80006ec:	2300      	movs	r3, #0
 80006ee:	f383 8811 	msr	BASEPRI, r3
}
 80006f2:	bc30      	pop	{r4, r5}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000f20 	.word	0x20000f20
 80006fc:	00000000 	.word	0x00000000

08000700 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000700:	4a02      	ldr	r2, [pc, #8]	; (800070c <notify1+0xc>)
 8000702:	68d3      	ldr	r3, [r2, #12]
 8000704:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000708:	60d3      	str	r3, [r2, #12]
}
 800070a:	4770      	bx	lr
 800070c:	40013800 	.word	0x40013800

08000710 <_port_irq_epilogue>:
 8000710:	2320      	movs	r3, #32
 8000712:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <_port_irq_epilogue+0x3c>)
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800071e:	d102      	bne.n	8000726 <_port_irq_epilogue+0x16>
 8000720:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000724:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000726:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800072a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800072e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000730:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000732:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000736:	4a06      	ldr	r2, [pc, #24]	; (8000750 <_port_irq_epilogue+0x40>)
 8000738:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800073a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800073c:	6889      	ldr	r1, [r1, #8]
 800073e:	6892      	ldr	r2, [r2, #8]
 8000740:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000742:	bf8c      	ite	hi
 8000744:	4a03      	ldrhi	r2, [pc, #12]	; (8000754 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000746:	4a04      	ldrls	r2, [pc, #16]	; (8000758 <_port_irq_epilogue+0x48>)
 8000748:	619a      	str	r2, [r3, #24]
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00
 8000750:	20000d88 	.word	0x20000d88
 8000754:	08000263 	.word	0x08000263
 8000758:	08000266 	.word	0x08000266
 800075c:	00000000 	.word	0x00000000

08000760 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000762:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000764:	e9d3 4200 	ldrd	r4, r2, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000768:	4249      	negs	r1, r1
 800076a:	1a10      	subs	r0, r2, r0
 800076c:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800076e:	42a0      	cmp	r0, r4
 8000770:	d304      	bcc.n	800077c <chCoreAllocAlignedI+0x1c>
 8000772:	4282      	cmp	r2, r0
 8000774:	d302      	bcc.n	800077c <chCoreAllocAlignedI+0x1c>
  ch_memcore.topmem = prev;
 8000776:	6058      	str	r0, [r3, #4]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000778:	bc10      	pop	{r4}
 800077a:	4770      	bx	lr
    return NULL;
 800077c:	2000      	movs	r0, #0
 800077e:	bc10      	pop	{r4}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000f20 	.word	0x20000f20
	...

08000790 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <chTMStopMeasurementX+0x44>)
 8000794:	685b      	ldr	r3, [r3, #4]
  tmp->last = (now - tmp->last) - offset;
 8000796:	6881      	ldr	r1, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000798:	6f52      	ldr	r2, [r2, #116]	; 0x74
  tmp->last = (now - tmp->last) - offset;
 800079a:	1a5b      	subs	r3, r3, r1
 800079c:	1a9b      	subs	r3, r3, r2
  tmp->n++;
 800079e:	68c2      	ldr	r2, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80007a0:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
  tmp->cumulative += (rttime_t)tmp->last;
 80007a4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
 80007a8:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 80007aa:	3201      	adds	r2, #1
  tmp->cumulative += (rttime_t)tmp->last;
 80007ac:	eb14 0b03 	adds.w	fp, r4, r3
  tmp->last = (now - tmp->last) - offset;
 80007b0:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if (tmp->last < tmp->best) {
 80007b4:	6802      	ldr	r2, [r0, #0]
  tmp->cumulative += (rttime_t)tmp->last;
 80007b6:	f145 0c00 	adc.w	ip, r5, #0
  if (tmp->last > tmp->worst) {
 80007ba:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 80007bc:	bf88      	it	hi
 80007be:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 80007c0:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80007c2:	e9c0 bc04 	strd	fp, ip, [r0, #16]
}
 80007c6:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
    tmp->best = tmp->last;
 80007ca:	bf38      	it	cc
 80007cc:	6003      	strcc	r3, [r0, #0]
}
 80007ce:	4770      	bx	lr
 80007d0:	e0001000 	.word	0xe0001000
 80007d4:	20000d88 	.word	0x20000d88
	...

080007e0 <chTMStartMeasurementX>:
 80007e0:	4b01      	ldr	r3, [pc, #4]	; (80007e8 <chTMStartMeasurementX+0x8>)
 80007e2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 80007e4:	6083      	str	r3, [r0, #8]
}
 80007e6:	4770      	bx	lr
 80007e8:	e0001000 	.word	0xe0001000
 80007ec:	00000000 	.word	0x00000000

080007f0 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80007f0:	2320      	movs	r3, #32
 80007f2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 80007f6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80007fa:	2b07      	cmp	r3, #7
 80007fc:	d80e      	bhi.n	800081c <wakeup+0x2c>
 80007fe:	e8df f003 	tbb	[pc, r3]
 8000802:	0d28      	.short	0x0d28
 8000804:	0408240d 	.word	0x0408240d
 8000808:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
 800080a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800080c:	6893      	ldr	r3, [r2, #8]
 800080e:	3301      	adds	r3, #1
 8000810:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000812:	e9d0 2300 	ldrd	r2, r3, [r0]
 8000816:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000818:	6802      	ldr	r2, [r0, #0]
 800081a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800081c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800081e:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000820:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8000824:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8000828:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 800082a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800082e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	428a      	cmp	r2, r1
 8000834:	d2fb      	bcs.n	800082e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8000836:	685a      	ldr	r2, [r3, #4]
 8000838:	2100      	movs	r1, #0
 800083a:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800083e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000840:	6058      	str	r0, [r3, #4]
 8000842:	f381 8811 	msr	BASEPRI, r1
}
 8000846:	bc10      	pop	{r4}
 8000848:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800084a:	2200      	movs	r2, #0
 800084c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	e7e4      	b.n	800081c <wakeup+0x2c>
 8000852:	2300      	movs	r3, #0
 8000854:	f383 8811 	msr	BASEPRI, r3
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000d88 	.word	0x20000d88

08000860 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8000860:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 8000862:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 8000866:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 8000868:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 800086c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800086e:	689a      	ldr	r2, [r3, #8]
 8000870:	4282      	cmp	r2, r0
 8000872:	d2fb      	bcs.n	800086c <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 8000874:	685a      	ldr	r2, [r3, #4]
}
 8000876:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 8000878:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 800087c:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 800087e:	6059      	str	r1, [r3, #4]
}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000d88 	.word	0x20000d88
	...

08000890 <chEvtBroadcastFlagsI.constprop.34>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000892:	4f16      	ldr	r7, [pc, #88]	; (80008ec <chEvtBroadcastFlagsI.constprop.34+0x5c>)
 8000894:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000898:	42bc      	cmp	r4, r7
 800089a:	d020      	beq.n	80008de <chEvtBroadcastFlagsI.constprop.34+0x4e>
 800089c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800089e:	2600      	movs	r6, #0
 80008a0:	e004      	b.n	80008ac <chEvtBroadcastFlagsI.constprop.34+0x1c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80008a2:	2a0b      	cmp	r2, #11
 80008a4:	d01c      	beq.n	80008e0 <chEvtBroadcastFlagsI.constprop.34+0x50>
    elp = elp->next;
 80008a6:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80008a8:	42bc      	cmp	r4, r7
 80008aa:	d018      	beq.n	80008de <chEvtBroadcastFlagsI.constprop.34+0x4e>
    elp->flags |= flags;
 80008ac:	68e3      	ldr	r3, [r4, #12]
 80008ae:	432b      	orrs	r3, r5
 80008b0:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80008b2:	b115      	cbz	r5, 80008ba <chEvtBroadcastFlagsI.constprop.34+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 80008b4:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 80008b6:	421d      	tst	r5, r3
 80008b8:	d0f5      	beq.n	80008a6 <chEvtBroadcastFlagsI.constprop.34+0x16>
  tp->epending |= events;
 80008ba:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 80008be:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80008c0:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 80008c4:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 80008c6:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 80008c8:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80008ca:	d1ea      	bne.n	80008a2 <chEvtBroadcastFlagsI.constprop.34+0x12>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80008cc:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80008ce:	4213      	tst	r3, r2
 80008d0:	d0e9      	beq.n	80008a6 <chEvtBroadcastFlagsI.constprop.34+0x16>
    tp->u.rdymsg = MSG_OK;
 80008d2:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80008d4:	f7ff ffc4 	bl	8000860 <chSchReadyI>
    elp = elp->next;
 80008d8:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80008da:	42bc      	cmp	r4, r7
 80008dc:	d1e6      	bne.n	80008ac <chEvtBroadcastFlagsI.constprop.34+0x1c>
}
 80008de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80008e0:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80008e2:	ea32 0303 	bics.w	r3, r2, r3
 80008e6:	d1de      	bne.n	80008a6 <chEvtBroadcastFlagsI.constprop.34+0x16>
 80008e8:	e7f3      	b.n	80008d2 <chEvtBroadcastFlagsI.constprop.34+0x42>
 80008ea:	bf00      	nop
 80008ec:	2000086c 	.word	0x2000086c

080008f0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80008f0:	e7fe      	b.n	80008f0 <_idle_thread>
 80008f2:	bf00      	nop
	...

08000900 <i2c_lld_start>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8000900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  I2C_TypeDef *dp = i2cp->i2c;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8000902:	7806      	ldrb	r6, [r0, #0]
void i2c_lld_start(I2CDriver *i2cp) {
 8000904:	4605      	mov	r5, r0
  if (i2cp->state == I2C_STOP) {
 8000906:	2e01      	cmp	r6, #1
  I2C_TypeDef *dp = i2cp->i2c;
 8000908:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if (i2cp->state == I2C_STOP) {
 800090a:	d03d      	beq.n	8000988 <i2c_lld_start+0x88>
  I2C_TypeDef *dp = i2cp->i2c;
 800090c:	4623      	mov	r3, r4
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800090e:	e9d5 700b 	ldrd	r7, r0, [r5, #44]	; 0x2c

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8000912:	f44f 6110 	mov.w	r1, #2304	; 0x900
  dp->CR1 = I2C_CR1_SWRST;
 8000916:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
  dp->CR1 = 0;
 800091a:	2200      	movs	r2, #0
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 800091c:	f64f 76c0 	movw	r6, #65472	; 0xffc0
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8000920:	f8d7 e004 	ldr.w	lr, [r7, #4]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8000924:	6847      	ldr	r7, [r0, #4]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8000926:	f104 0010 	add.w	r0, r4, #16
 800092a:	f8ce 0008 	str.w	r0, [lr, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800092e:	60b8      	str	r0, [r7, #8]
  dp->CR1 = I2C_CR1_SWRST;
 8000930:	f8c4 c000 	str.w	ip, [r4]
  dp->CR1 = 0;
 8000934:	6022      	str	r2, [r4, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8000936:	6061      	str	r1, [r4, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8000938:	6859      	ldr	r1, [r3, #4]

  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
 800093a:	686d      	ldr	r5, [r5, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 800093c:	4031      	ands	r1, r6
  int32_t clock_speed = i2cp->config->clock_speed;
 800093e:	6868      	ldr	r0, [r5, #4]
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 8000940:	7a2f      	ldrb	r7, [r5, #8]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8000942:	6059      	str	r1, [r3, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8000944:	6859      	ldr	r1, [r3, #4]
  if (clock_speed <= 100000) {
 8000946:	4e43      	ldr	r6, [pc, #268]	; (8000a54 <i2c_lld_start+0x154>)
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8000948:	f041 0124 	orr.w	r1, r1, #36	; 0x24
  if (clock_speed <= 100000) {
 800094c:	42b0      	cmp	r0, r6
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 800094e:	6059      	str	r1, [r3, #4]
  if (clock_speed <= 100000) {
 8000950:	dd56      	ble.n	8000a00 <i2c_lld_start+0x100>
  else if (clock_speed <= 400000) {
 8000952:	4941      	ldr	r1, [pc, #260]	; (8000a58 <i2c_lld_start+0x158>)
 8000954:	4288      	cmp	r0, r1
 8000956:	dc07      	bgt.n	8000968 <i2c_lld_start+0x68>
    if (duty == FAST_DUTY_CYCLE_2) {
 8000958:	2f02      	cmp	r7, #2
 800095a:	d063      	beq.n	8000a24 <i2c_lld_start+0x124>
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 800095c:	2f03      	cmp	r7, #3
 800095e:	d06c      	beq.n	8000a3a <i2c_lld_start+0x13a>
 8000960:	f648 72ff 	movw	r2, #36863	; 0x8fff
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8000964:	210b      	movs	r1, #11
 8000966:	6219      	str	r1, [r3, #32]
  dp->CCR = regCCR;
 8000968:	61da      	str	r2, [r3, #28]
  switch (opmode) {
 800096a:	7829      	ldrb	r1, [r5, #0]
  regCR1 = dp->CR1;
 800096c:	681a      	ldr	r2, [r3, #0]
  switch (opmode) {
 800096e:	2902      	cmp	r1, #2
  regCR1 = dp->CR1;
 8000970:	b292      	uxth	r2, r2
  switch (opmode) {
 8000972:	d051      	beq.n	8000a18 <i2c_lld_start+0x118>
 8000974:	2903      	cmp	r1, #3
 8000976:	d04c      	beq.n	8000a12 <i2c_lld_start+0x112>
 8000978:	2901      	cmp	r1, #1
 800097a:	d03d      	beq.n	80009f8 <i2c_lld_start+0xf8>
  dp->CR1 = regCR1;
 800097c:	601a      	str	r2, [r3, #0]
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 800097e:	6823      	ldr	r3, [r4, #0]
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6023      	str	r3, [r4, #0]
}
 8000986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8000988:	219a      	movs	r1, #154	; 0x9a
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 800098a:	228a      	movs	r2, #138	; 0x8a
    if (&I2CD1 == i2cp) {
 800098c:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <i2c_lld_start+0x15c>)
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 800098e:	e9c0 2109 	strd	r2, r1, [r0, #36]	; 0x24
    if (&I2CD1 == i2cp) {
 8000992:	4298      	cmp	r0, r3
 8000994:	d1ba      	bne.n	800090c <i2c_lld_start+0xc>
      rccResetI2C1();
 8000996:	4f32      	ldr	r7, [pc, #200]	; (8000a60 <i2c_lld_start+0x160>)
 8000998:	4932      	ldr	r1, [pc, #200]	; (8000a64 <i2c_lld_start+0x164>)
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	2006      	movs	r0, #6
 800099e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	f7ff fd1f 	bl	80003f0 <dmaStreamAllocI.part.0.constprop.42>
 80009b2:	492d      	ldr	r1, [pc, #180]	; (8000a68 <i2c_lld_start+0x168>)
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C1_RX_DMA_STREAM,
 80009b4:	62e8      	str	r0, [r5, #44]	; 0x2c
 80009b6:	2005      	movs	r0, #5
 80009b8:	f7ff fd1a 	bl	80003f0 <dmaStreamAllocI.part.0.constprop.42>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80009bc:	2250      	movs	r2, #80	; 0x50
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80009be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
      rccEnableI2C1(true);
 80009c2:	69fb      	ldr	r3, [r7, #28]
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C1_TX_DMA_STREAM,
 80009c4:	6328      	str	r0, [r5, #48]	; 0x30
      rccEnableI2C1(true);
 80009c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ca:	61fb      	str	r3, [r7, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80009cc:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <i2c_lld_start+0x16c>)
 80009ce:	69f8      	ldr	r0, [r7, #28]
 80009d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80009d4:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80009d8:	6019      	str	r1, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80009da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80009de:	f8c3 6184 	str.w	r6, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80009e2:	605e      	str	r6, [r3, #4]
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80009e4:	e9d5 2309 	ldrd	r2, r3, [r5, #36]	; 0x24
 80009e8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80009ec:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80009f0:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
 80009f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80009f6:	e78a      	b.n	800090e <i2c_lld_start+0xe>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 80009f8:	f022 020a 	bic.w	r2, r2, #10
 80009fc:	b292      	uxth	r2, r2
 80009fe:	e7bd      	b.n	800097c <i2c_lld_start+0x7c>
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <i2c_lld_start+0x170>)
 8000a02:	0040      	lsls	r0, r0, #1
 8000a04:	fb92 f2f0 	sdiv	r2, r2, r0
    dp->TRISE = I2C_CLK_FREQ + 1;
 8000a08:	2125      	movs	r1, #37	; 0x25
 8000a0a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000a0e:	6219      	str	r1, [r3, #32]
 8000a10:	e7aa      	b.n	8000968 <i2c_lld_start+0x68>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8000a12:	f042 020a 	orr.w	r2, r2, #10
 8000a16:	e7b1      	b.n	800097c <i2c_lld_start+0x7c>
 8000a18:	f022 0208 	bic.w	r2, r2, #8
 8000a1c:	b292      	uxth	r2, r2
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8000a1e:	f042 0202 	orr.w	r2, r2, #2
 8000a22:	e7ab      	b.n	800097c <i2c_lld_start+0x7c>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8000a24:	4912      	ldr	r1, [pc, #72]	; (8000a70 <i2c_lld_start+0x170>)
 8000a26:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000a2a:	fb91 f2f2 	sdiv	r2, r1, r2
 8000a2e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8000a32:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000a36:	b292      	uxth	r2, r2
 8000a38:	e794      	b.n	8000964 <i2c_lld_start+0x64>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8000a3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000a3e:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <i2c_lld_start+0x170>)
 8000a40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000a44:	fb92 f2f0 	sdiv	r2, r2, r0
 8000a48:	ea6f 4282 	mvn.w	r2, r2, lsl #18
 8000a4c:	ea6f 4292 	mvn.w	r2, r2, lsr #18
 8000a50:	b292      	uxth	r2, r2
 8000a52:	e787      	b.n	8000964 <i2c_lld_start+0x64>
 8000a54:	000186a0 	.word	0x000186a0
 8000a58:	00061a80 	.word	0x00061a80
 8000a5c:	20000834 	.word	0x20000834
 8000a60:	40021000 	.word	0x40021000
 8000a64:	08000ac1 	.word	0x08000ac1
 8000a68:	08000a81 	.word	0x08000a81
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	02255100 	.word	0x02255100
	...

08000a80 <i2c_lld_serve_tx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000a80:	070b      	lsls	r3, r1, #28
 8000a82:	d412      	bmi.n	8000aaa <i2c_lld_serve_tx_end_irq+0x2a>
  I2C_TypeDef *dp = i2cp->i2c;
 8000a84:	e9d0 200c 	ldrd	r2, r0, [r0, #48]	; 0x30
  dmaStreamDisable(i2cp->dmatx);
 8000a88:	230e      	movs	r3, #14
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8000a8a:	b430      	push	{r4, r5}
  dmaStreamDisable(i2cp->dmatx);
 8000a8c:	e9d2 5400 	ldrd	r5, r4, [r2]
 8000a90:	6821      	ldr	r1, [r4, #0]
 8000a92:	f021 010f 	bic.w	r1, r1, #15
 8000a96:	6021      	str	r1, [r4, #0]
 8000a98:	7b52      	ldrb	r2, [r2, #13]
 8000a9a:	4093      	lsls	r3, r2
 8000a9c:	606b      	str	r3, [r5, #4]
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8000a9e:	6843      	ldr	r3, [r0, #4]
}
 8000aa0:	bc30      	pop	{r4, r5}
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8000aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa6:	6043      	str	r3, [r0, #4]
}
 8000aa8:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 8000aaa:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000aac:	4b01      	ldr	r3, [pc, #4]	; (8000ab4 <i2c_lld_serve_tx_end_irq+0x34>)
 8000aae:	4a02      	ldr	r2, [pc, #8]	; (8000ab8 <i2c_lld_serve_tx_end_irq+0x38>)
 8000ab0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ab2:	e7fe      	b.n	8000ab2 <i2c_lld_serve_tx_end_irq+0x32>
 8000ab4:	20000d88 	.word	0x20000d88
 8000ab8:	08003fc4 	.word	0x08003fc4
 8000abc:	00000000 	.word	0x00000000

08000ac0 <i2c_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000ac0:	f011 0108 	ands.w	r1, r1, #8
 8000ac4:	d126      	bne.n	8000b14 <i2c_lld_serve_rx_end_irq+0x54>
  dmaStreamDisable(i2cp->dmarx);
 8000ac6:	220e      	movs	r2, #14
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8000ac8:	b570      	push	{r4, r5, r6, lr}
  dmaStreamDisable(i2cp->dmarx);
 8000aca:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  I2C_TypeDef *dp = i2cp->i2c;
 8000acc:	6b43      	ldr	r3, [r0, #52]	; 0x34
  dmaStreamDisable(i2cp->dmarx);
 8000ace:	6866      	ldr	r6, [r4, #4]
 8000ad0:	6835      	ldr	r5, [r6, #0]
 8000ad2:	f025 050f 	bic.w	r5, r5, #15
 8000ad6:	6035      	str	r5, [r6, #0]
 8000ad8:	7b65      	ldrb	r5, [r4, #13]
 8000ada:	6824      	ldr	r4, [r4, #0]
 8000adc:	40aa      	lsls	r2, r5
 8000ade:	6062      	str	r2, [r4, #4]
  dp->CR2 &= ~I2C_CR2_LAST;
 8000ae0:	685a      	ldr	r2, [r3, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000ae2:	2420      	movs	r4, #32
 8000ae4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ae8:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000af0:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	f384 8811 	msr	BASEPRI, r4
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8000afe:	69c3      	ldr	r3, [r0, #28]
 8000b00:	b123      	cbz	r3, 8000b0c <i2c_lld_serve_rx_end_irq+0x4c>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8000b02:	61c1      	str	r1, [r0, #28]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8000b04:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 8000b06:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000b08:	f7ff feaa 	bl	8000860 <chSchReadyI>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f383 8811 	msr	BASEPRI, r3
}
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
 8000b16:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <i2c_lld_serve_rx_end_irq+0x60>)
 8000b18:	4a02      	ldr	r2, [pc, #8]	; (8000b24 <i2c_lld_serve_rx_end_irq+0x64>)
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b1c:	e7fe      	b.n	8000b1c <i2c_lld_serve_rx_end_irq+0x5c>
 8000b1e:	bf00      	nop
 8000b20:	20000d88 	.word	0x20000d88
 8000b24:	08003fc4 	.word	0x08003fc4
	...

08000b30 <dmaServeInterrupt>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
 8000b30:	b430      	push	{r4, r5}
  uint32_t flags;
  uint32_t selfindex = (uint32_t)dmastp->selfindex;

  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8000b32:	6804      	ldr	r4, [r0, #0]
 8000b34:	7b43      	ldrb	r3, [r0, #13]
 8000b36:	6821      	ldr	r1, [r4, #0]
  if (flags & dmastp->channel->CCR) {
 8000b38:	6842      	ldr	r2, [r0, #4]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8000b3a:	40d9      	lsrs	r1, r3
  if (flags & dmastp->channel->CCR) {
 8000b3c:	6812      	ldr	r2, [r2, #0]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8000b3e:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8000b42:	420a      	tst	r2, r1
 8000b44:	d00e      	beq.n	8000b64 <dmaServeInterrupt+0x34>
  uint32_t selfindex = (uint32_t)dmastp->selfindex;
 8000b46:	7b82      	ldrb	r2, [r0, #14]
    dmastp->dma->IFCR = flags << dmastp->shift;
    if (dma.streams[selfindex].func) {
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <dmaServeInterrupt+0x38>)
 8000b4a:	3201      	adds	r2, #1
 8000b4c:	f850 5032 	ldr.w	r5, [r0, r2, lsl #3]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	6063      	str	r3, [r4, #4]
    if (dma.streams[selfindex].func) {
 8000b56:	b12d      	cbz	r5, 8000b64 <dmaServeInterrupt+0x34>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8000b58:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000b5c:	462b      	mov	r3, r5
    }
  }
}
 8000b5e:	bc30      	pop	{r4, r5}
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8000b60:	6850      	ldr	r0, [r2, #4]
 8000b62:	4718      	bx	r3
}
 8000b64:	bc30      	pop	{r4, r5}
 8000b66:	4770      	bx	lr
 8000b68:	20000f44 	.word	0x20000f44
 8000b6c:	00000000 	.word	0x00000000

08000b70 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8000b70:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 8000b74:	2a15      	cmp	r2, #21
 8000b76:	d815      	bhi.n	8000ba4 <_usb_ep0out+0x34>
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f640 6141 	movw	r1, #3649	; 0xe41
 8000b7e:	4093      	lsls	r3, r2
 8000b80:	420b      	tst	r3, r1
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8000b82:	b570      	push	{r4, r5, r6, lr}
 8000b84:	4604      	mov	r4, r0
 8000b86:	d124      	bne.n	8000bd2 <_usb_ep0out+0x62>
 8000b88:	f413 1580 	ands.w	r5, r3, #1048576	; 0x100000
 8000b8c:	d00b      	beq.n	8000ba6 <_usb_ep0out+0x36>
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8000b8e:	68c3      	ldr	r3, [r0, #12]
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	b92b      	cbnz	r3, 8000ba2 <_usb_ep0out+0x32>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8000b96:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8000b98:	b103      	cbz	r3, 8000b9c <_usb_ep0out+0x2c>
      usbp->ep0endcb(usbp);
 8000b9a:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8000ba2:	bd70      	pop	{r4, r5, r6, pc}
 8000ba4:	4770      	bx	lr
 8000ba6:	029b      	lsls	r3, r3, #10
 8000ba8:	d5fb      	bpl.n	8000ba2 <_usb_ep0out+0x32>
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8000baa:	220b      	movs	r2, #11
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000bac:	2320      	movs	r3, #32
 8000bae:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8000bb2:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8000bb6:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000bb8:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8000bba:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000bbc:	f042 0201 	orr.w	r2, r2, #1
 8000bc0:	8102      	strh	r2, [r0, #8]
  isp->txbuf  = buf;
 8000bc2:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8000bc4:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8000bc8:	f7ff fc6a 	bl	80004a0 <usb_lld_start_in.constprop.21>
 8000bcc:	f385 8811 	msr	BASEPRI, r5
}
 8000bd0:	bd70      	pop	{r4, r5, r6, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000bd2:	f248 0680 	movw	r6, #32896	; 0x8080
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <_usb_ep0out+0xa0>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000bd8:	6843      	ldr	r3, [r0, #4]
 8000bda:	680a      	ldr	r2, [r1, #0]
 8000bdc:	681d      	ldr	r5, [r3, #0]
 8000bde:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000be6:	f082 0210 	eor.w	r2, r2, #16
 8000bea:	4332      	orrs	r2, r6
 8000bec:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000bee:	680b      	ldr	r3, [r1, #0]
 8000bf0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bf8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000bfc:	4333      	orrs	r3, r6
 8000bfe:	600b      	str	r3, [r1, #0]
 8000c00:	b10d      	cbz	r5, 8000c06 <_usb_ep0out+0x96>
 8000c02:	2106      	movs	r1, #6
 8000c04:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000c06:	2306      	movs	r3, #6
 8000c08:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8000c0c:	bd70      	pop	{r4, r5, r6, pc}
 8000c0e:	bf00      	nop
 8000c10:	40005c00 	.word	0x40005c00
	...

08000c20 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000c20:	b538      	push	{r3, r4, r5, lr}
  switch (usbp->ep0state) {
 8000c22:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000c26:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 8000c28:	2b15      	cmp	r3, #21
 8000c2a:	d82a      	bhi.n	8000c82 <_usb_ep0in+0x62>
 8000c2c:	e8df f003 	tbb	[pc, r3]
 8000c30:	2929290b 	.word	0x2929290b
 8000c34:	290b2929 	.word	0x290b2929
 8000c38:	503a2a29 	.word	0x503a2a29
 8000c3c:	29292929 	.word	0x29292929
 8000c40:	29292929 	.word	0x29292929
 8000c44:	0b0b      	.short	0x0b0b
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000c46:	f248 0080 	movw	r0, #32896	; 0x8080
 8000c4a:	492f      	ldr	r1, [pc, #188]	; (8000d08 <_usb_ep0in+0xe8>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000c4c:	6863      	ldr	r3, [r4, #4]
 8000c4e:	680a      	ldr	r2, [r1, #0]
 8000c50:	681d      	ldr	r5, [r3, #0]
 8000c52:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c5a:	f082 0210 	eor.w	r2, r2, #16
 8000c5e:	4302      	orrs	r2, r0
 8000c60:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000c62:	680b      	ldr	r3, [r1, #0]
 8000c64:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000c70:	4303      	orrs	r3, r0
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	b115      	cbz	r5, 8000c7c <_usb_ep0in+0x5c>
 8000c76:	2106      	movs	r1, #6
 8000c78:	4620      	mov	r0, r4
 8000c7a:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000c7c:	2306      	movs	r3, #6
 8000c7e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8000c82:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 8000c84:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
 8000c88:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
    if ((usbp->ep0n < max) &&
 8000c8c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    max = (size_t)get_hword(&usbp->setup[6]);
 8000c8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    if ((usbp->ep0n < max) &&
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d206      	bcs.n	8000ca4 <_usb_ep0in+0x84>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8000c96:	68c3      	ldr	r3, [r0, #12]
 8000c98:	8a1b      	ldrh	r3, [r3, #16]
 8000c9a:	fbb2 f5f3 	udiv	r5, r2, r3
 8000c9e:	fb03 2515 	mls	r5, r3, r5, r2
    if ((usbp->ep0n < max) &&
 8000ca2:	b1e5      	cbz	r5, 8000cde <_usb_ep0in+0xbe>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8000ca4:	2214      	movs	r2, #20
 8000ca6:	2320      	movs	r3, #32
 8000ca8:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8000cac:	f383 8811 	msr	BASEPRI, r3
  osp->rxbuf  = buf;
 8000cb0:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
 8000cb2:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000cb4:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8000cb6:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000cb8:	f042 0201 	orr.w	r2, r2, #1
 8000cbc:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8000cbe:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 8000cc0:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 8000cc2:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 8000cc6:	f7ff fc23 	bl	8000510 <usb_lld_start_out.constprop.20>
 8000cca:	f385 8811 	msr	BASEPRI, r5
}
 8000cce:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8000cd0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8000cd2:	b103      	cbz	r3, 8000cd6 <_usb_ep0in+0xb6>
      usbp->ep0endcb(usbp);
 8000cd4:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8000cdc:	bd38      	pop	{r3, r4, r5, pc}
 8000cde:	2320      	movs	r3, #32
 8000ce0:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8000ce4:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000ce6:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8000ce8:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000cea:	f042 0201 	orr.w	r2, r2, #1
 8000cee:	8102      	strh	r2, [r0, #8]
  isp->txbuf  = buf;
 8000cf0:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8000cf2:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8000cf6:	f7ff fbd3 	bl	80004a0 <usb_lld_start_in.constprop.21>
 8000cfa:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8000cfe:	230a      	movs	r3, #10
 8000d00:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop
 8000d08:	40005c00 	.word	0x40005c00
 8000d0c:	00000000 	.word	0x00000000

08000d10 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8000d10:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8000d12:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8000d16:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8000d18:	b113      	cbz	r3, 8000d20 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  udp = USB_GET_DESCRIPTOR(ep);
 8000d20:	4bbb      	ldr	r3, [pc, #748]	; (8001010 <_usb_ep0setup+0x300>)
  usbReadSetup(usbp, ep, usbp->setup);
 8000d22:	f104 0274 	add.w	r2, r4, #116	; 0x74
 8000d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d2c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000d30:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000d3a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	f103 0010 	add.w	r0, r3, #16
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8000d44:	6819      	ldr	r1, [r3, #0]
 8000d46:	3304      	adds	r3, #4
  for (n = 0; n < 4; n++) {
 8000d48:	4283      	cmp	r3, r0
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8000d4a:	f822 1b02 	strh.w	r1, [r2], #2
  for (n = 0; n < 4; n++) {
 8000d4e:	d1f9      	bne.n	8000d44 <_usb_ep0setup+0x34>
  if ((usbp->config->requests_hook_cb == NULL) ||
 8000d50:	6863      	ldr	r3, [r4, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	b35b      	cbz	r3, 8000dae <_usb_ep0setup+0x9e>
      !(usbp->config->requests_hook_cb(usbp))) {
 8000d56:	4620      	mov	r0, r4
 8000d58:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8000d5a:	b340      	cbz	r0, 8000dae <_usb_ep0setup+0x9e>
 8000d5c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8000d5e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
  hw |= (uint16_t)*p << 8U;
 8000d62:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
 8000d66:	f894 107a 	ldrb.w	r1, [r4, #122]	; 0x7a
  max = (size_t)get_hword(&usbp->setup[6]);
 8000d6a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  if (usbp->ep0n > max) {
 8000d6e:	4291      	cmp	r1, r2
 8000d70:	bf2c      	ite	cs
 8000d72:	4611      	movcs	r1, r2
    usbp->ep0n = max;
 8000d74:	66e1      	strcc	r1, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000d76:	061a      	lsls	r2, r3, #24
 8000d78:	f100 80a1 	bmi.w	8000ebe <_usb_ep0setup+0x1ae>
    if (usbp->ep0n != 0U) {
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	d072      	beq.n	8000e66 <_usb_ep0setup+0x156>
      usbp->ep0state = USB_EP0_OUT_RX;
 8000d80:	2215      	movs	r2, #21
 8000d82:	2320      	movs	r3, #32
 8000d84:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8000d88:	f383 8811 	msr	BASEPRI, r3
  osp->rxcnt  = 0;
 8000d8c:	2500      	movs	r5, #0
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8000d8e:	e9d4 611a 	ldrd	r6, r1, [r4, #104]	; 0x68
  osp = usbp->epc[ep]->out_state;
 8000d92:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000d94:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8000d96:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000d98:	f042 0201 	orr.w	r2, r2, #1
 8000d9c:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8000d9e:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8000da0:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 8000da4:	f7ff fbb4 	bl	8000510 <usb_lld_start_out.constprop.20>
 8000da8:	f385 8811 	msr	BASEPRI, r5
}
 8000dac:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8000dae:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000db2:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8000db6:	4618      	mov	r0, r3
 8000db8:	d01e      	beq.n	8000df8 <_usb_ep0setup+0xe8>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000dba:	f248 0080 	movw	r0, #32896	; 0x8080
 8000dbe:	4994      	ldr	r1, [pc, #592]	; (8001010 <_usb_ep0setup+0x300>)
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000dc0:	6863      	ldr	r3, [r4, #4]
 8000dc2:	680a      	ldr	r2, [r1, #0]
 8000dc4:	681d      	ldr	r5, [r3, #0]
 8000dc6:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dce:	f082 0210 	eor.w	r2, r2, #16
 8000dd2:	4302      	orrs	r2, r0
 8000dd4:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000dd6:	680b      	ldr	r3, [r1, #0]
 8000dd8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000de0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000de4:	4303      	orrs	r3, r0
 8000de6:	600b      	str	r3, [r1, #0]
 8000de8:	b115      	cbz	r5, 8000df0 <_usb_ep0setup+0xe0>
 8000dea:	2106      	movs	r1, #6
 8000dec:	4620      	mov	r0, r4
 8000dee:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8000df0:	2306      	movs	r3, #6
 8000df2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8000df6:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000df8:	f240 3102 	movw	r1, #770	; 0x302
           ((uint32_t)usbp->setup[1] << 8U))) {
 8000dfc:	f894 6075 	ldrb.w	r6, [r4, #117]	; 0x75
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000e00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8000e04:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000e08:	428a      	cmp	r2, r1
 8000e0a:	f000 811f 	beq.w	800104c <_usb_ep0setup+0x33c>
 8000e0e:	d840      	bhi.n	8000e92 <_usb_ep0setup+0x182>
 8000e10:	2a02      	cmp	r2, #2
 8000e12:	f000 8103 	beq.w	800101c <_usb_ep0setup+0x30c>
 8000e16:	f240 80c0 	bls.w	8000f9a <_usb_ep0setup+0x28a>
 8000e1a:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8000e1e:	f000 80c5 	beq.w	8000fac <_usb_ep0setup+0x29c>
 8000e22:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000e26:	f000 8090 	beq.w	8000f4a <_usb_ep0setup+0x23a>
 8000e2a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000e2e:	d1c4      	bne.n	8000dba <_usb_ep0setup+0xaa>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8000e30:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d1c0      	bne.n	8000dba <_usb_ep0setup+0xaa>
      usbp->status &= ~2U;
 8000e38:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000e3c:	66a5      	str	r5, [r4, #104]	; 0x68
      usbp->status &= ~2U;
 8000e3e:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000e42:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      usbp->status &= ~2U;
 8000e46:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 8000e4a:	e00a      	b.n	8000e62 <_usb_ep0setup+0x152>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000e4c:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 8000e50:	f080 808a 	bcs.w	8000f68 <_usb_ep0setup+0x258>
 8000e54:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000e58:	d1af      	bne.n	8000dba <_usb_ep0setup+0xaa>
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8000e5a:	4b6e      	ldr	r3, [pc, #440]	; (8001014 <_usb_ep0setup+0x304>)
 8000e5c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8000e60:	6723      	str	r3, [r4, #112]	; 0x70
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000e62:	0603      	lsls	r3, r0, #24
 8000e64:	d443      	bmi.n	8000eee <_usb_ep0setup+0x1de>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8000e66:	220b      	movs	r2, #11
 8000e68:	2320      	movs	r3, #32
 8000e6a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8000e6e:	f383 8811 	msr	BASEPRI, r3
  isp->txbuf  = buf;
 8000e72:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
 8000e74:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000e76:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8000e78:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000e7a:	f042 0201 	orr.w	r2, r2, #1
 8000e7e:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8000e80:	4620      	mov	r0, r4
  isp->txbuf  = buf;
 8000e82:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8000e84:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8000e88:	f7ff fb0a 	bl	80004a0 <usb_lld_start_in.constprop.21>
 8000e8c:	f385 8811 	msr	BASEPRI, r5
}
 8000e90:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000e92:	f240 6101 	movw	r1, #1537	; 0x601
 8000e96:	428a      	cmp	r2, r1
 8000e98:	d9d8      	bls.n	8000e4c <_usb_ep0setup+0x13c>
 8000e9a:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 8000e9e:	d03c      	beq.n	8000f1a <_usb_ep0setup+0x20a>
 8000ea0:	f640 4102 	movw	r1, #3074	; 0xc02
 8000ea4:	428a      	cmp	r2, r1
 8000ea6:	f000 80ac 	beq.w	8001002 <_usb_ep0setup+0x2f2>
 8000eaa:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000eae:	d184      	bne.n	8000dba <_usb_ep0setup+0xaa>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f104 017f 	add.w	r1, r4, #127	; 0x7f
 8000eb6:	e9c4 251b 	strd	r2, r5, [r4, #108]	; 0x6c
 8000eba:	66a1      	str	r1, [r4, #104]	; 0x68
 8000ebc:	e751      	b.n	8000d62 <_usb_ep0setup+0x52>
    if (usbp->ep0n != 0U) {
 8000ebe:	b1b1      	cbz	r1, 8000eee <_usb_ep0setup+0x1de>
      usbp->ep0state = USB_EP0_IN_TX;
 8000ec0:	2209      	movs	r2, #9
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8000ec8:	f383 8811 	msr	BASEPRI, r3
  isp->txcnt  = 0;
 8000ecc:	2500      	movs	r5, #0
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8000ece:	e9d4 611a 	ldrd	r6, r1, [r4, #104]	; 0x68
  isp = usbp->epc[ep]->in_state;
 8000ed2:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000ed4:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8000ed6:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000ed8:	f042 0201 	orr.w	r2, r2, #1
 8000edc:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8000ede:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8000ee0:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 8000ee4:	f7ff fadc 	bl	80004a0 <usb_lld_start_in.constprop.21>
 8000ee8:	f385 8811 	msr	BASEPRI, r5
}
 8000eec:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8000eee:	2214      	movs	r2, #20
 8000ef0:	2320      	movs	r3, #32
 8000ef2:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8000ef6:	f383 8811 	msr	BASEPRI, r3
  osp->rxbuf  = buf;
 8000efa:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
 8000efc:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000efe:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8000f00:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000f02:	f042 0201 	orr.w	r2, r2, #1
 8000f06:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8000f08:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 8000f0a:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 8000f0c:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 8000f10:	f7ff fafe 	bl	8000510 <usb_lld_start_out.constprop.20>
 8000f14:	f385 8811 	msr	BASEPRI, r5
}
 8000f18:	bd70      	pop	{r4, r5, r6, pc}
      if (usbp->state == USB_ACTIVE) {
 8000f1a:	7823      	ldrb	r3, [r4, #0]
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	f000 80c1 	beq.w	80010a4 <_usb_ep0setup+0x394>
      if (usbp->setup[2] != 0U) {
 8000f22:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8000f26:	b14b      	cbz	r3, 8000f3c <_usb_ep0setup+0x22c>
        usbp->state = USB_ACTIVE;
 8000f28:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8000f2a:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 8000f2c:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_ACTIVE;
 8000f30:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	b113      	cbz	r3, 8000f3c <_usb_ep0setup+0x22c>
 8000f36:	2102      	movs	r1, #2
 8000f38:	4620      	mov	r0, r4
 8000f3a:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 8000f42:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8000f46:	6723      	str	r3, [r4, #112]	; 0x70
 8000f48:	e78b      	b.n	8000e62 <_usb_ep0setup+0x152>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8000f4a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	f47f af33 	bne.w	8000dba <_usb_ep0setup+0xaa>
      usbp->status |= 2U;
 8000f54:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000f58:	66a5      	str	r5, [r4, #104]	; 0x68
      usbp->status |= 2U;
 8000f5a:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000f5e:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      usbp->status |= 2U;
 8000f62:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 8000f66:	e77c      	b.n	8000e62 <_usb_ep0setup+0x152>
  hw |= (uint16_t)*p << 8U;
 8000f68:	f894 1079 	ldrb.w	r1, [r4, #121]	; 0x79
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000f6c:	6862      	ldr	r2, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 8000f6e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000f72:	6856      	ldr	r6, [r2, #4]
 8000f74:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000f78:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000f7c:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8000f80:	4620      	mov	r0, r4
 8000f82:	47b0      	blx	r6
    if (dp == NULL) {
 8000f84:	2800      	cmp	r0, #0
 8000f86:	f43f af18 	beq.w	8000dba <_usb_ep0setup+0xaa>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8000f8a:	e9d0 2300 	ldrd	r2, r3, [r0]
 8000f8e:	6725      	str	r5, [r4, #112]	; 0x70
 8000f90:	e9c4 321a 	strd	r3, r2, [r4, #104]	; 0x68
 8000f94:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000f98:	e6e3      	b.n	8000d62 <_usb_ep0setup+0x52>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000f9a:	bb7a      	cbnz	r2, 8000ffc <_usb_ep0setup+0x2ec>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8000fa2:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
 8000fa6:	66a0      	str	r0, [r4, #104]	; 0x68
 8000fa8:	460a      	mov	r2, r1
 8000faa:	e6da      	b.n	8000d62 <_usb_ep0setup+0x52>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8000fac:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f47f af02 	bne.w	8000dba <_usb_ep0setup+0xaa>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8000fb6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8000fba:	f012 030f 	ands.w	r3, r2, #15
 8000fbe:	d018      	beq.n	8000ff2 <_usb_ep0setup+0x2e2>
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fc6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8000fca:	f012 0f80 	tst.w	r2, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	f040 8099 	bne.w	8001106 <_usb_ep0setup+0x3f6>
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8000fd4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8000fd8:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8000fdc:	d009      	beq.n	8000ff2 <_usb_ep0setup+0x2e2>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fe8:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 8000fec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ff0:	601a      	str	r2, [r3, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8000ff8:	6723      	str	r3, [r4, #112]	; 0x70
 8000ffa:	e732      	b.n	8000e62 <_usb_ep0setup+0x152>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000ffc:	2a01      	cmp	r2, #1
 8000ffe:	f47f aedc 	bne.w	8000dba <_usb_ep0setup+0xaa>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8001002:	2202      	movs	r2, #2
 8001004:	2000      	movs	r0, #0
 8001006:	4904      	ldr	r1, [pc, #16]	; (8001018 <_usb_ep0setup+0x308>)
 8001008:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
 800100c:	66a1      	str	r1, [r4, #104]	; 0x68
 800100e:	e6a8      	b.n	8000d62 <_usb_ep0setup+0x52>
 8001010:	40005c00 	.word	0x40005c00
 8001014:	08001151 	.word	0x08001151
 8001018:	080040c0 	.word	0x080040c0
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800101c:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8001020:	f001 000f 	and.w	r0, r1, #15
 8001024:	f011 0f80 	tst.w	r1, #128	; 0x80
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8001028:	4946      	ldr	r1, [pc, #280]	; (8001144 <_usb_ep0setup+0x434>)
 800102a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800102e:	d12c      	bne.n	800108a <_usb_ep0setup+0x37a>
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8001030:	f411 5140 	ands.w	r1, r1, #12288	; 0x3000
 8001034:	f43f aec1 	beq.w	8000dba <_usb_ep0setup+0xaa>
 8001038:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800103c:	d12b      	bne.n	8001096 <_usb_ep0setup+0x386>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800103e:	2502      	movs	r5, #2
 8001040:	2000      	movs	r0, #0
 8001042:	4941      	ldr	r1, [pc, #260]	; (8001148 <_usb_ep0setup+0x438>)
 8001044:	e9c4 501b 	strd	r5, r0, [r4, #108]	; 0x6c
 8001048:	66a1      	str	r1, [r4, #104]	; 0x68
 800104a:	e68a      	b.n	8000d62 <_usb_ep0setup+0x52>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800104c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001050:	2b00      	cmp	r3, #0
 8001052:	f47f aeb2 	bne.w	8000dba <_usb_ep0setup+0xaa>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001056:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 800105a:	f012 030f 	ands.w	r3, r2, #15
 800105e:	d0c8      	beq.n	8000ff2 <_usb_ep0setup+0x2e2>
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001066:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800106a:	f012 0f80 	tst.w	r2, #128	; 0x80
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	d15b      	bne.n	800112a <_usb_ep0setup+0x41a>
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001072:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001076:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800107a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 800107e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001082:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	e7b3      	b.n	8000ff2 <_usb_ep0setup+0x2e2>
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 800108a:	f011 0130 	ands.w	r1, r1, #48	; 0x30
 800108e:	f43f ae94 	beq.w	8000dba <_usb_ep0setup+0xaa>
 8001092:	2910      	cmp	r1, #16
 8001094:	d0d3      	beq.n	800103e <_usb_ep0setup+0x32e>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001096:	2502      	movs	r5, #2
 8001098:	2000      	movs	r0, #0
 800109a:	492c      	ldr	r1, [pc, #176]	; (800114c <_usb_ep0setup+0x43c>)
 800109c:	e9c4 501b 	strd	r5, r0, [r4, #108]	; 0x6c
 80010a0:	66a1      	str	r1, [r4, #104]	; 0x68
 80010a2:	e65e      	b.n	8000d62 <_usb_ep0setup+0x52>
 80010a4:	2320      	movs	r3, #32
 80010a6:	f383 8811 	msr	BASEPRI, r3
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80010aa:	2201      	movs	r2, #1
  usbp->pmnext = 64;
 80010ac:	2640      	movs	r6, #64	; 0x40
    EPR_TOGGLE(i, 0);
 80010ae:	f248 0080 	movw	r0, #32896	; 0x8080
  usbp->transmitting &= 1U;
 80010b2:	8921      	ldrh	r1, [r4, #8]
  usbp->receiving    &= 1U;
 80010b4:	8963      	ldrh	r3, [r4, #10]
    usbp->epc[i] = NULL;
 80010b6:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80010ba:	e9c4 5506 	strd	r5, r5, [r4, #24]
 80010be:	e9c4 5508 	strd	r5, r5, [r4, #32]
  usbp->transmitting &= 1U;
 80010c2:	4011      	ands	r1, r2
  usbp->receiving    &= 1U;
 80010c4:	4013      	ands	r3, r2
    usbp->epc[i] = NULL;
 80010c6:	62a5      	str	r5, [r4, #40]	; 0x28
  usbp->transmitting &= 1U;
 80010c8:	8121      	strh	r1, [r4, #8]
  usbp->receiving    &= 1U;
 80010ca:	8163      	strh	r3, [r4, #10]
  usbp->pmnext = 64;
 80010cc:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
 80010d0:	0093      	lsls	r3, r2, #2
 80010d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010d6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    EPR_TOGGLE(i, 0);
 80010da:	6819      	ldr	r1, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80010dc:	3201      	adds	r2, #1
    EPR_TOGGLE(i, 0);
 80010de:	4301      	orrs	r1, r0
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80010e0:	2a08      	cmp	r2, #8
    EPR_TOGGLE(i, 0);
 80010e2:	6019      	str	r1, [r3, #0]
    EPR_SET(i, 0);
 80010e4:	6018      	str	r0, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80010e6:	d1f3      	bne.n	80010d0 <_usb_ep0setup+0x3c0>
 80010e8:	2300      	movs	r3, #0
 80010ea:	f383 8811 	msr	BASEPRI, r3
        usbp->state = USB_SELECTED;
 80010ee:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80010f0:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = 0U;
 80010f2:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_SELECTED;
 80010f6:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80010f8:	6813      	ldr	r3, [r2, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f43f af11 	beq.w	8000f22 <_usb_ep0setup+0x212>
 8001100:	4620      	mov	r0, r4
 8001102:	4798      	blx	r3
 8001104:	e70d      	b.n	8000f22 <_usb_ep0setup+0x212>
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8001106:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800110a:	2a30      	cmp	r2, #48	; 0x30
 800110c:	f43f af71 	beq.w	8000ff2 <_usb_ep0setup+0x2e2>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800111a:	f082 0220 	eor.w	r2, r2, #32
 800111e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001122:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e763      	b.n	8000ff2 <_usb_ep0setup+0x2e2>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800112a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800112e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001132:	f082 0210 	eor.w	r2, r2, #16
 8001136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800113a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e757      	b.n	8000ff2 <_usb_ep0setup+0x2e2>
 8001142:	bf00      	nop
 8001144:	40005c00 	.word	0x40005c00
 8001148:	08003fc0 	.word	0x08003fc0
 800114c:	08003f60 	.word	0x08003f60

08001150 <set_address>:
  usbp->address = usbp->setup[2];
 8001150:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001154:	6842      	ldr	r2, [r0, #4]
  usbp->address = usbp->setup[2];
 8001156:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 800115a:	4906      	ldr	r1, [pc, #24]	; (8001174 <set_address+0x24>)
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
static void set_address(USBDriver *usbp) {
 8001162:	b510      	push	{r4, lr}
 8001164:	4604      	mov	r4, r0
 8001166:	64cb      	str	r3, [r1, #76]	; 0x4c
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001168:	b10a      	cbz	r2, 800116e <set_address+0x1e>
 800116a:	2101      	movs	r1, #1
 800116c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 800116e:	2303      	movs	r3, #3
 8001170:	7023      	strb	r3, [r4, #0]
}
 8001172:	bd10      	pop	{r4, pc}
 8001174:	40005c00 	.word	0x40005c00
	...

08001180 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8001180:	2000      	movs	r0, #0
 8001182:	4770      	bx	lr
	...

08001190 <chSchWakeupS.constprop.11>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001190:	b470      	push	{r4, r5, r6}
 8001192:	4604      	mov	r4, r0
  ntp->u.rdymsg = msg;
 8001194:	2600      	movs	r6, #0
  thread_t *otp = currp;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <chSchWakeupS.constprop.11+0x58>)
  if (ntp->prio <= otp->prio) {
 8001198:	6880      	ldr	r0, [r0, #8]
  thread_t *otp = currp;
 800119a:	6999      	ldr	r1, [r3, #24]
  ntp->u.rdymsg = msg;
 800119c:	6266      	str	r6, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 800119e:	688d      	ldr	r5, [r1, #8]
 80011a0:	42a8      	cmp	r0, r5
 80011a2:	d80c      	bhi.n	80011be <chSchWakeupS.constprop.11+0x2e>
  tp->state = CH_STATE_READY;
 80011a4:	f884 6020 	strb.w	r6, [r4, #32]
    cp = cp->queue.next;
 80011a8:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	4290      	cmp	r0, r2
 80011ae:	d9fb      	bls.n	80011a8 <chSchWakeupS.constprop.11+0x18>
  tp->queue.prev             = cp->queue.prev;
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80011b6:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80011b8:	605c      	str	r4, [r3, #4]
}
 80011ba:	bc70      	pop	{r4, r5, r6}
 80011bc:	4770      	bx	lr
  cp = (thread_t *)&ch.rlist.queue;
 80011be:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
 80011c0:	f881 6020 	strb.w	r6, [r1, #32]
    cp = cp->queue.next;
 80011c4:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 80011c6:	6890      	ldr	r0, [r2, #8]
 80011c8:	4285      	cmp	r5, r0
 80011ca:	d3fb      	bcc.n	80011c4 <chSchWakeupS.constprop.11+0x34>
    ntp->state = CH_STATE_CURRENT;
 80011cc:	2501      	movs	r5, #1
  tp->queue.prev             = cp->queue.prev;
 80011ce:	6850      	ldr	r0, [r2, #4]
 80011d0:	e9c1 2000 	strd	r2, r0, [r1]
  tp->queue.prev->queue.next = tp;
 80011d4:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
 80011d6:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 80011d8:	f884 5020 	strb.w	r5, [r4, #32]
    chSysSwitch(ntp, otp);
 80011dc:	4620      	mov	r0, r4
    currp = ntp;
 80011de:	619c      	str	r4, [r3, #24]
}
 80011e0:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 80011e2:	f7ff b82d 	b.w	8000240 <_port_switch>
 80011e6:	bf00      	nop
 80011e8:	20000d88 	.word	0x20000d88
 80011ec:	00000000 	.word	0x00000000

080011f0 <chThdCreateStatic.constprop.6>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 80011f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f2:	2420      	movs	r4, #32
 80011f4:	f384 8811 	msr	BASEPRI, r4
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80011f8:	2500      	movs	r5, #0
  tp->state     = CH_STATE_WTSTART;
 80011fa:	2702      	movs	r7, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 80011fc:	2601      	movs	r6, #1
  tp = (thread_t *)((uint8_t *)wsp + size -
 80011fe:	3948      	subs	r1, #72	; 0x48
 8001200:	1844      	adds	r4, r0, r1
  REG_INSERT(tp);
 8001202:	4914      	ldr	r1, [pc, #80]	; (8001254 <chThdCreateStatic.constprop.6+0x64>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001204:	f844 3c24 	str.w	r3, [r4, #-36]
  tp->prio      = prio;
 8001208:	60a2      	str	r2, [r4, #8]
  tp->realprio  = prio;
 800120a:	63e2      	str	r2, [r4, #60]	; 0x3c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800120c:	f1a4 0324 	sub.w	r3, r4, #36	; 0x24
 8001210:	4a11      	ldr	r2, [pc, #68]	; (8001258 <chThdCreateStatic.constprop.6+0x68>)
  REG_INSERT(tp);
 8001212:	6121      	str	r1, [r4, #16]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001214:	60e3      	str	r3, [r4, #12]
  tp->name      = name;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <chThdCreateStatic.constprop.6+0x6c>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001218:	f844 2c04 	str.w	r2, [r4, #-4]
  REG_INSERT(tp);
 800121c:	694a      	ldr	r2, [r1, #20]
  tp->wabase = (stkalign_t *)wsp;
 800121e:	61e0      	str	r0, [r4, #28]
  tp->name      = name;
 8001220:	61a3      	str	r3, [r4, #24]
  list_init(&tp->waiting);
 8001222:	f104 0028 	add.w	r0, r4, #40	; 0x28
  queue_init(&tp->msgqueue);
 8001226:	f104 032c 	add.w	r3, r4, #44	; 0x2c
  REG_INSERT(tp);
 800122a:	6162      	str	r2, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800122c:	f844 5c20 	str.w	r5, [r4, #-32]
  tp->state     = CH_STATE_WTSTART;
 8001230:	8427      	strh	r7, [r4, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001232:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
  tp->epending  = (eventmask_t)0;
 8001236:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  REG_INSERT(tp);
 800123a:	6114      	str	r4, [r2, #16]
  tqp->next = (thread_t *)tqp;
 800123c:	e9c4 030a 	strd	r0, r3, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 8001240:	6323      	str	r3, [r4, #48]	; 0x30
  chSchWakeupS(tp, MSG_OK);
 8001242:	4620      	mov	r0, r4
  REG_INSERT(tp);
 8001244:	614c      	str	r4, [r1, #20]
  chSchWakeupS(tp, MSG_OK);
 8001246:	f7ff ffa3 	bl	8001190 <chSchWakeupS.constprop.11>
 800124a:	f385 8811 	msr	BASEPRI, r5
}
 800124e:	4620      	mov	r0, r4
 8001250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001252:	bf00      	nop
 8001254:	20000d88 	.word	0x20000d88
 8001258:	08000251 	.word	0x08000251
 800125c:	08003f64 	.word	0x08003f64

08001260 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8001260:	b430      	push	{r4, r5}
  currp->state = CH_STATE_CURRENT;
 8001262:	2501      	movs	r5, #1
  thread_t *otp = currp;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <chSchGoSleepS+0x24>)
 8001266:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8001268:	681a      	ldr	r2, [r3, #0]
  otp->state = newstate;
 800126a:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800126e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
 8001270:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 8001272:	6063      	str	r3, [r4, #4]
  currp->state = CH_STATE_CURRENT;
 8001274:	f882 5020 	strb.w	r5, [r2, #32]
  tqp->next             = tp->queue.next;
 8001278:	601c      	str	r4, [r3, #0]
}
 800127a:	bc30      	pop	{r4, r5}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800127c:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800127e:	f7fe bfdf 	b.w	8000240 <_port_switch>
 8001282:	bf00      	nop
 8001284:	20000d88 	.word	0x20000d88
	...

08001290 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8001292:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001294:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8001296:	d04a      	beq.n	800132e <chSchGoSleepTimeoutS+0x9e>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    chVTDoSetI(&vt, timeout, wakeup, currp);
 800129c:	4c52      	ldr	r4, [pc, #328]	; (80013e8 <chSchGoSleepTimeoutS+0x158>)
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 80012a0:	69a2      	ldr	r2, [r4, #24]
 80012a2:	4607      	mov	r7, r0
  vtp->func = vtfunc;
 80012a4:	4851      	ldr	r0, [pc, #324]	; (80013ec <chSchGoSleepTimeoutS+0x15c>)
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80012a6:	2901      	cmp	r1, #1
  vtp->par = par;
 80012a8:	9205      	str	r2, [sp, #20]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	69e2      	ldr	r2, [r4, #28]
  vtp->func = vtfunc;
 80012ae:	9004      	str	r0, [sp, #16]
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80012b0:	f104 061c 	add.w	r6, r4, #28
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80012b4:	d937      	bls.n	8001326 <chSchGoSleepTimeoutS+0x96>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80012b6:	42b2      	cmp	r2, r6
 80012b8:	d061      	beq.n	800137e <chSchGoSleepTimeoutS+0xee>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 80012ba:	8d25      	ldrh	r5, [r4, #40]	; 0x28
 80012bc:	6890      	ldr	r0, [r2, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 80012be:	1b5b      	subs	r3, r3, r5
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	1859      	adds	r1, r3, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 80012c4:	d33a      	bcc.n	800133c <chSchGoSleepTimeoutS+0xac>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 80012c6:	6812      	ldr	r2, [r2, #0]
      delta -= p->delta;
 80012c8:	1a09      	subs	r1, r1, r0
 80012ca:	6890      	ldr	r0, [r2, #8]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80012cc:	4281      	cmp	r1, r0
 80012ce:	d904      	bls.n	80012da <chSchGoSleepTimeoutS+0x4a>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 80012d0:	6812      	ldr	r2, [r2, #0]
    delta -= p->delta;
 80012d2:	1a09      	subs	r1, r1, r0
  while (p->delta < delta) {
 80012d4:	6890      	ldr	r0, [r2, #8]
 80012d6:	4288      	cmp	r0, r1
 80012d8:	d3fa      	bcc.n	80012d0 <chSchGoSleepTimeoutS+0x40>
  /* Calculate new delta for the following entry.*/
  p->delta -= delta;

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 80012da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  vtp->prev = vtp->next->prev;
 80012de:	6853      	ldr	r3, [r2, #4]
  vtp->prev->next = vtp;
 80012e0:	ad01      	add	r5, sp, #4
  vtp->prev = vtp->next->prev;
 80012e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  vtp->prev->next = vtp;
 80012e6:	601d      	str	r5, [r3, #0]
  p->prev = vtp;
 80012e8:	6055      	str	r5, [r2, #4]
  vtp->delta = delta;
 80012ea:	9103      	str	r1, [sp, #12]
  p->delta -= delta;
 80012ec:	6893      	ldr	r3, [r2, #8]
 80012ee:	1a59      	subs	r1, r3, r1
 80012f0:	6091      	str	r1, [r2, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80012f2:	6260      	str	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 80012f4:	4638      	mov	r0, r7
 80012f6:	f7ff ffb3 	bl	8001260 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80012fa:	9b04      	ldr	r3, [sp, #16]
 80012fc:	b17b      	cbz	r3, 800131e <chSchGoSleepTimeoutS+0x8e>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80012fe:	69e2      	ldr	r2, [r4, #28]
 8001300:	9b01      	ldr	r3, [sp, #4]
 8001302:	42aa      	cmp	r2, r5
 8001304:	d049      	beq.n	800139a <chSchGoSleepTimeoutS+0x10a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
 8001306:	2100      	movs	r1, #0
    vtp->prev->next = vtp->next;
 8001308:	9a02      	ldr	r2, [sp, #8]
 800130a:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 800130c:	9b01      	ldr	r3, [sp, #4]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800130e:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 8001310:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8001312:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001314:	d003      	beq.n	800131e <chSchGoSleepTimeoutS+0x8e>
      vtp->next->delta += vtp->delta;
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	9903      	ldr	r1, [sp, #12]
 800131a:	440a      	add	r2, r1
 800131c:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 800131e:	69a3      	ldr	r3, [r4, #24]
 8001320:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8001322:	b007      	add	sp, #28
 8001324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001326:	42b2      	cmp	r2, r6
 8001328:	d015      	beq.n	8001356 <chSchGoSleepTimeoutS+0xc6>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800132a:	2102      	movs	r1, #2
 800132c:	e7c5      	b.n	80012ba <chSchGoSleepTimeoutS+0x2a>
    chSchGoSleepS(newstate);
 800132e:	f7ff ff97 	bl	8001260 <chSchGoSleepS>
 8001332:	4c2d      	ldr	r4, [pc, #180]	; (80013e8 <chSchGoSleepTimeoutS+0x158>)
  return currp->u.rdymsg;
 8001334:	69a3      	ldr	r3, [r4, #24]
 8001336:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8001338:	b007      	add	sp, #28
 800133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 800133c:	4281      	cmp	r1, r0
 800133e:	d2c5      	bcs.n	80012cc <chSchGoSleepTimeoutS+0x3c>
  return systime + (systime_t)interval;
 8001340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001344:	4299      	cmp	r1, r3
 8001346:	bf94      	ite	ls
 8001348:	186d      	addls	r5, r5, r1
 800134a:	18ed      	addhi	r5, r5, r3
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800134c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001350:	b2ad      	uxth	r5, r5
 8001352:	635d      	str	r5, [r3, #52]	; 0x34
 8001354:	e7ba      	b.n	80012cc <chSchGoSleepTimeoutS+0x3c>
      vtp->delta = delay;
 8001356:	2202      	movs	r2, #2
      ch.vtlist.next = vtp;
 8001358:	ad01      	add	r5, sp, #4
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800135a:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 800135e:	e9c4 5507 	strd	r5, r5, [r4, #28]
      ch.vtlist.lasttime = now;
 8001362:	8523      	strh	r3, [r4, #40]	; 0x28
      vtp->delta = delay;
 8001364:	9203      	str	r2, [sp, #12]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001366:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 800136a:	f04f 0c00 	mov.w	ip, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800136e:	2002      	movs	r0, #2
 8001370:	4413      	add	r3, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001372:	b29b      	uxth	r3, r3
 8001374:	634b      	str	r3, [r1, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001376:	f8c1 c010 	str.w	ip, [r1, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800137a:	60c8      	str	r0, [r1, #12]
 800137c:	e7ba      	b.n	80012f4 <chSchGoSleepTimeoutS+0x64>
 800137e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001382:	428a      	cmp	r2, r1
 8001384:	bf28      	it	cs
 8001386:	460a      	movcs	r2, r1
      ch.vtlist.next = vtp;
 8001388:	ad01      	add	r5, sp, #4
      ch.vtlist.lasttime = now;
 800138a:	8523      	strh	r3, [r4, #40]	; 0x28
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800138c:	e9cd 6601 	strd	r6, r6, [sp, #4]
      vtp->delta = delay;
 8001390:	9103      	str	r1, [sp, #12]
 8001392:	b292      	uxth	r2, r2
      ch.vtlist.prev = vtp;
 8001394:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8001398:	e7e5      	b.n	8001366 <chSchGoSleepTimeoutS+0xd6>
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 800139a:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800139c:	42b3      	cmp	r3, r6
  ch.vtlist.next = vtp->next;
 800139e:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80013a0:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 80013a2:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80013a4:	d019      	beq.n	80013da <chSchGoSleepTimeoutS+0x14a>
  return (systime_t)STM32_ST_TIM->CNT;
 80013a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	9d03      	ldr	r5, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80013ae:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 80013b0:	442a      	add	r2, r5
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80013b6:	1a5b      	subs	r3, r3, r1
 80013b8:	b29b      	uxth	r3, r3

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d9af      	bls.n	800131e <chSchGoSleepTimeoutS+0x8e>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 80013be:	1ad0      	subs	r0, r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80013c0:	2801      	cmp	r0, #1
 80013c2:	d90e      	bls.n	80013e2 <chSchGoSleepTimeoutS+0x152>
 80013c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c8:	429a      	cmp	r2, r3
 80013ca:	bf28      	it	cs
 80013cc:	461a      	movcs	r2, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80013ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 80013d2:	440a      	add	r2, r1
 80013d4:	b292      	uxth	r2, r2
 80013d6:	6342      	str	r2, [r0, #52]	; 0x34
 80013d8:	e7a1      	b.n	800131e <chSchGoSleepTimeoutS+0x8e>
  STM32_ST_TIM->DIER = 0U;
 80013da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	e79d      	b.n	800131e <chSchGoSleepTimeoutS+0x8e>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80013e2:	1c9a      	adds	r2, r3, #2
 80013e4:	e7f3      	b.n	80013ce <chSchGoSleepTimeoutS+0x13e>
 80013e6:	bf00      	nop
 80013e8:	20000d88 	.word	0x20000d88
 80013ec:	080007f1 	.word	0x080007f1

080013f0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80013f0:	b161      	cbz	r1, 800140c <chThdEnqueueTimeoutS+0x1c>
 80013f2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 80013f6:	b410      	push	{r4}
  queue_insert(currp, tqp);
 80013f8:	699b      	ldr	r3, [r3, #24]
  tp->queue.prev             = tqp->prev;
 80013fa:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80013fc:	2004      	movs	r0, #4
 80013fe:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 8001402:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8001404:	6053      	str	r3, [r2, #4]
}
 8001406:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001408:	f7ff bf42 	b.w	8001290 <chSchGoSleepTimeoutS>
}
 800140c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000d88 	.word	0x20000d88
	...

08001420 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001422:	4604      	mov	r4, r0
 8001424:	460f      	mov	r7, r1
 8001426:	4616      	mov	r6, r2
 8001428:	2320      	movs	r3, #32
 800142a:	f383 8811 	msr	BASEPRI, r3
 800142e:	e005      	b.n	800143c <oqPutTimeout+0x1c>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8001430:	4631      	mov	r1, r6
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff ffdc 	bl	80013f0 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001438:	2800      	cmp	r0, #0
 800143a:	db17      	blt.n	800146c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
 800143c:	68a5      	ldr	r5, [r4, #8]
 800143e:	2d00      	cmp	r5, #0
 8001440:	d0f6      	beq.n	8001430 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001442:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001444:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001446:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001448:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800144a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800144c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800144e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001450:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001454:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001456:	bf24      	itt	cs
 8001458:	68e3      	ldrcs	r3, [r4, #12]
 800145a:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 800145c:	69e3      	ldr	r3, [r4, #28]
 800145e:	b10b      	cbz	r3, 8001464 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001460:	4620      	mov	r0, r4
 8001462:	4798      	blx	r3
 8001464:	2000      	movs	r0, #0
 8001466:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 800146a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800146c:	f385 8811 	msr	BASEPRI, r5
 8001470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001472:	bf00      	nop
	...

08001480 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001480:	3030      	adds	r0, #48	; 0x30
 8001482:	f7ff bfcd 	b.w	8001420 <oqPutTimeout>
 8001486:	bf00      	nop
	...

08001490 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001490:	3030      	adds	r0, #48	; 0x30
 8001492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001496:	f7ff bfc3 	b.w	8001420 <oqPutTimeout>
 800149a:	bf00      	nop
 800149c:	0000      	movs	r0, r0
	...

080014a0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80014a0:	b570      	push	{r4, r5, r6, lr}
 80014a2:	2320      	movs	r3, #32
 80014a4:	4604      	mov	r4, r0
 80014a6:	460e      	mov	r6, r1
 80014a8:	f383 8811 	msr	BASEPRI, r3
 80014ac:	e005      	b.n	80014ba <iqGetTimeout+0x1a>
 80014ae:	4631      	mov	r1, r6
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff ff9d 	bl	80013f0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80014b6:	2800      	cmp	r0, #0
 80014b8:	db18      	blt.n	80014ec <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 80014ba:	68a5      	ldr	r5, [r4, #8]
 80014bc:	2d00      	cmp	r5, #0
 80014be:	d0f6      	beq.n	80014ae <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 80014c0:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 80014c2:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 80014c4:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 80014c6:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 80014c8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80014ca:	4282      	cmp	r2, r0
  iqp->q_counter--;
 80014cc:	60a3      	str	r3, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer;
 80014ce:	bf28      	it	cs
 80014d0:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 80014d2:	61a2      	str	r2, [r4, #24]
 80014d4:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 80014d6:	bf28      	it	cs
 80014d8:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 80014da:	69e3      	ldr	r3, [r4, #28]
 80014dc:	b10b      	cbz	r3, 80014e2 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 80014de:	4620      	mov	r0, r4
 80014e0:	4798      	blx	r3
 80014e2:	2300      	movs	r3, #0
 80014e4:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 80014e8:	4628      	mov	r0, r5
}
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
 80014ec:	f385 8811 	msr	BASEPRI, r5
 80014f0:	bd70      	pop	{r4, r5, r6, pc}
 80014f2:	bf00      	nop
	...

08001500 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001500:	300c      	adds	r0, #12
 8001502:	f7ff bfcd 	b.w	80014a0 <iqGetTimeout>
 8001506:	bf00      	nop
	...

08001510 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001510:	300c      	adds	r0, #12
 8001512:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001516:	f7ff bfc3 	b.w	80014a0 <iqGetTimeout>
 800151a:	bf00      	nop
 800151c:	0000      	movs	r0, r0
	...

08001520 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8001520:	b508      	push	{r3, lr}
 8001522:	4601      	mov	r1, r0
 8001524:	2320      	movs	r3, #32
 8001526:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800152a:	2008      	movs	r0, #8
 800152c:	f7ff feb0 	bl	8001290 <chSchGoSleepTimeoutS>
 8001530:	2300      	movs	r3, #0
 8001532:	f383 8811 	msr	BASEPRI, r3
}
 8001536:	bd08      	pop	{r3, pc}
	...

08001540 <Thread1>:
        (void)arg;

        chRegSetThreadName("blinker");
        while (true)
        {
                palClearPad(GPIOA, 2);
 8001540:	2504      	movs	r5, #4
 8001542:	462e      	mov	r6, r5
{
 8001544:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <Thread1+0x28>)
 8001548:	4a08      	ldr	r2, [pc, #32]	; (800156c <Thread1+0x2c>)
 800154a:	699b      	ldr	r3, [r3, #24]
                palClearPad(GPIOA, 2);
 800154c:	4c08      	ldr	r4, [pc, #32]	; (8001570 <Thread1+0x30>)
 800154e:	619a      	str	r2, [r3, #24]
 8001550:	6166      	str	r6, [r4, #20]
                chThdSleepMilliseconds(500);
 8001552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001556:	f7ff ffe3 	bl	8001520 <chThdSleep>
                palSetPad(GPIOA, 2);
 800155a:	6125      	str	r5, [r4, #16]
                chThdSleepMilliseconds(500);
 800155c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001560:	f7ff ffde 	bl	8001520 <chThdSleep>
 8001564:	e7f4      	b.n	8001550 <Thread1+0x10>
 8001566:	bf00      	nop
 8001568:	20000d88 	.word	0x20000d88
 800156c:	08003ee8 	.word	0x08003ee8
 8001570:	40010800 	.word	0x40010800
	...

08001580 <i2c_lld_master_transmit_timeout.constprop.39>:
 *                      timeout the driver must be stopped and restarted
 *                      because the bus is in an uncertain state</b>.
 *
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
 8001580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(STM32F1XX_I2C)
  osalDbgCheck((rxbytes == 0) || ((rxbytes > 1) && (rxbuf != NULL)));
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 8001584:	2700      	movs	r7, #0

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8001586:	0049      	lsls	r1, r1, #1
 8001588:	8401      	strh	r1, [r0, #32]
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
 800158a:	4699      	mov	r9, r3
  I2C_TypeDef *dp = i2cp->i2c;
 800158c:	6b41      	ldr	r1, [r0, #52]	; 0x34
  i2cp->errors = I2C_NO_ERROR;
 800158e:	6087      	str	r7, [r0, #8]
 8001590:	f387 8811 	msr	BASEPRI, r7
  return (systime_t)STM32_ST_TIM->CNT;
 8001594:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8001598:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800159a:	463e      	mov	r6, r7
 800159c:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80015a0:	e9d0 3c0a 	ldrd	r3, ip, [r0, #40]	; 0x28
 80015a4:	f8ce 3000 	str.w	r3, [lr]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80015a8:	f8dc c004 	ldr.w	ip, [ip, #4]
 80015ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 80015ae:	f8ce 200c 	str.w	r2, [lr, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 80015b2:	f8ce 9004 	str.w	r9, [lr, #4]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80015b6:	f8cc 3000 	str.w	r3, [ip]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 80015ba:	f8cc 700c 	str.w	r7, [ip, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 80015be:	f8cc 7004 	str.w	r7, [ip, #4]
 80015c2:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80015c6:	4645      	mov	r5, r8
 80015c8:	2420      	movs	r4, #32
 80015ca:	b292      	uxth	r2, r2
 80015cc:	e001      	b.n	80015d2 <i2c_lld_master_transmit_timeout.constprop.39+0x52>
 80015ce:	f386 8811 	msr	BASEPRI, r6
 80015d2:	f384 8811 	msr	BASEPRI, r4
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 80015d6:	698b      	ldr	r3, [r1, #24]
 80015d8:	079f      	lsls	r7, r3, #30
 80015da:	d402      	bmi.n	80015e2 <i2c_lld_master_transmit_timeout.constprop.39+0x62>
 80015dc:	680b      	ldr	r3, [r1, #0]
 80015de:	059b      	lsls	r3, r3, #22
 80015e0:	d51e      	bpl.n	8001620 <i2c_lld_master_transmit_timeout.constprop.39+0xa0>
 80015e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80015e4:	1a9b      	subs	r3, r3, r2
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	2b63      	cmp	r3, #99	; 0x63
 80015ea:	d9f0      	bls.n	80015ce <i2c_lld_master_transmit_timeout.constprop.39+0x4e>
      dmaStreamDisable(i2cp->dmatx);
 80015ec:	230e      	movs	r3, #14
      dmaStreamDisable(i2cp->dmarx);
 80015ee:	e9d0 210b 	ldrd	r2, r1, [r0, #44]	; 0x2c
      dmaStreamDisable(i2cp->dmatx);
 80015f2:	e9d1 5400 	ldrd	r5, r4, [r1]
 80015f6:	6820      	ldr	r0, [r4, #0]
 80015f8:	f020 000f 	bic.w	r0, r0, #15
 80015fc:	6020      	str	r0, [r4, #0]
 80015fe:	7b49      	ldrb	r1, [r1, #13]
      dmaStreamDisable(i2cp->dmarx);
 8001600:	6850      	ldr	r0, [r2, #4]
      dmaStreamDisable(i2cp->dmatx);
 8001602:	fa03 f101 	lsl.w	r1, r3, r1
 8001606:	6069      	str	r1, [r5, #4]
      dmaStreamDisable(i2cp->dmarx);
 8001608:	6801      	ldr	r1, [r0, #0]
 800160a:	6814      	ldr	r4, [r2, #0]
 800160c:	f021 010f 	bic.w	r1, r1, #15
 8001610:	6001      	str	r1, [r0, #0]
      return MSG_TIMEOUT;
 8001612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      dmaStreamDisable(i2cp->dmarx);
 8001616:	7b52      	ldrb	r2, [r2, #13]
 8001618:	4093      	lsls	r3, r2
 800161a:	6063      	str	r3, [r4, #4]
    dmaStreamDisable(i2cp->dmatx);
    dmaStreamDisable(i2cp->dmarx);
  }

  return msg;
}
 800161c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  *trp = tp;
 8001620:	4603      	mov	r3, r0
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8001622:	684a      	ldr	r2, [r1, #4]
  return ch.rlist.current;
 8001624:	4d15      	ldr	r5, [pc, #84]	; (800167c <i2c_lld_master_transmit_timeout.constprop.39+0xfc>)
 8001626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800162a:	604a      	str	r2, [r1, #4]
  dp->CR1 |= I2C_CR1_START;
 800162c:	680a      	ldr	r2, [r1, #0]
 800162e:	4604      	mov	r4, r0
 8001630:	69a8      	ldr	r0, [r5, #24]
 8001632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001636:	600a      	str	r2, [r1, #0]
 8001638:	f843 0f1c 	str.w	r0, [r3, #28]!
  tp->u.wttrp = trp;
 800163c:	6243      	str	r3, [r0, #36]	; 0x24
    chSchGoSleepS(newstate);
 800163e:	2003      	movs	r0, #3
 8001640:	f7ff fe0e 	bl	8001260 <chSchGoSleepS>
  return currp->u.rdymsg;
 8001644:	69ab      	ldr	r3, [r5, #24]
 8001646:	6a58      	ldr	r0, [r3, #36]	; 0x24
  if (msg != MSG_OK) {
 8001648:	2800      	cmp	r0, #0
 800164a:	d0e7      	beq.n	800161c <i2c_lld_master_transmit_timeout.constprop.39+0x9c>
    dmaStreamDisable(i2cp->dmarx);
 800164c:	e9d4 250b 	ldrd	r2, r5, [r4, #44]	; 0x2c
    dmaStreamDisable(i2cp->dmatx);
 8001650:	230e      	movs	r3, #14
 8001652:	686c      	ldr	r4, [r5, #4]
 8001654:	6821      	ldr	r1, [r4, #0]
 8001656:	f021 010f 	bic.w	r1, r1, #15
 800165a:	6021      	str	r1, [r4, #0]
 800165c:	7b69      	ldrb	r1, [r5, #13]
 800165e:	682d      	ldr	r5, [r5, #0]
    dmaStreamDisable(i2cp->dmarx);
 8001660:	6854      	ldr	r4, [r2, #4]
    dmaStreamDisable(i2cp->dmatx);
 8001662:	fa03 f101 	lsl.w	r1, r3, r1
 8001666:	6069      	str	r1, [r5, #4]
    dmaStreamDisable(i2cp->dmarx);
 8001668:	6821      	ldr	r1, [r4, #0]
 800166a:	6815      	ldr	r5, [r2, #0]
 800166c:	f021 010f 	bic.w	r1, r1, #15
 8001670:	6021      	str	r1, [r4, #0]
 8001672:	7b52      	ldrb	r2, [r2, #13]
 8001674:	4093      	lsls	r3, r2
 8001676:	606b      	str	r3, [r5, #4]
}
 8001678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800167c:	20000d88 	.word	0x20000d88

08001680 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8001680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 8001682:	4a38      	ldr	r2, [pc, #224]	; (8001764 <chMtxLockS+0xe4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8001684:	6883      	ldr	r3, [r0, #8]
  thread_t *ctp = currp;
 8001686:	6995      	ldr	r5, [r2, #24]
  if (mp->owner != NULL) {
 8001688:	2b00      	cmp	r3, #0
 800168a:	d040      	beq.n	800170e <chMtxLockS+0x8e>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 800168c:	68a9      	ldr	r1, [r5, #8]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	4604      	mov	r4, r0
 8001692:	4291      	cmp	r1, r2
 8001694:	d907      	bls.n	80016a6 <chMtxLockS+0x26>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8001696:	f893 2020 	ldrb.w	r2, [r3, #32]
        tp->prio = ctp->prio;
 800169a:	6099      	str	r1, [r3, #8]
        switch (tp->state) {
 800169c:	2a06      	cmp	r2, #6
 800169e:	d03b      	beq.n	8001718 <chMtxLockS+0x98>
 80016a0:	2a07      	cmp	r2, #7
 80016a2:	d015      	beq.n	80016d0 <chMtxLockS+0x50>
 80016a4:	b342      	cbz	r2, 80016f8 <chMtxLockS+0x78>
        }
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
 80016a6:	4626      	mov	r6, r4
 80016a8:	4623      	mov	r3, r4
 80016aa:	e003      	b.n	80016b4 <chMtxLockS+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80016ac:	6899      	ldr	r1, [r3, #8]
 80016ae:	68aa      	ldr	r2, [r5, #8]
 80016b0:	4291      	cmp	r1, r2
 80016b2:	d32a      	bcc.n	800170a <chMtxLockS+0x8a>
    cp = cp->queue.next;
 80016b4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80016b6:	429c      	cmp	r4, r3
 80016b8:	d1f8      	bne.n	80016ac <chMtxLockS+0x2c>
  tp->queue.prev             = cp->queue.prev;
 80016ba:	6873      	ldr	r3, [r6, #4]
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80016bc:	2006      	movs	r0, #6
 80016be:	e9c5 6300 	strd	r6, r3, [r5]
  tp->queue.prev->queue.next = tp;
 80016c2:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 80016c4:	6075      	str	r5, [r6, #4]
      ctp->u.wtmtxp = mp;
 80016c6:	626c      	str	r4, [r5, #36]	; 0x24
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
  }
}
 80016c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 80016cc:	f7ff bdc8 	b.w	8001260 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 80016d0:	681f      	ldr	r7, [r3, #0]
 80016d2:	6858      	ldr	r0, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80016d4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80016d6:	6007      	str	r7, [r0, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80016d8:	681f      	ldr	r7, [r3, #0]
 80016da:	4632      	mov	r2, r6
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	e002      	b.n	80016e6 <chMtxLockS+0x66>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80016e0:	6890      	ldr	r0, [r2, #8]
 80016e2:	4288      	cmp	r0, r1
 80016e4:	d334      	bcc.n	8001750 <chMtxLockS+0xd0>
    cp = cp->queue.next;
 80016e6:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80016e8:	4296      	cmp	r6, r2
 80016ea:	d1f9      	bne.n	80016e0 <chMtxLockS+0x60>
  tp->queue.prev             = cp->queue.prev;
 80016ec:	6872      	ldr	r2, [r6, #4]
 80016ee:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 80016f2:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 80016f4:	6073      	str	r3, [r6, #4]
 80016f6:	e7d6      	b.n	80016a6 <chMtxLockS+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
 80016f8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80016fc:	6011      	str	r1, [r2, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 80016fe:	4618      	mov	r0, r3
  tp->queue.next->queue.prev = tp->queue.prev;
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	f7ff f8ac 	bl	8000860 <chSchReadyI>
 8001708:	e7cd      	b.n	80016a6 <chMtxLockS+0x26>
    cp = cp->queue.next;
 800170a:	461e      	mov	r6, r3
 800170c:	e7d5      	b.n	80016ba <chMtxLockS+0x3a>
    mp->next = ctp->mtxlist;
 800170e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001710:	e9c0 5302 	strd	r5, r3, [r0, #8]
    ctp->mtxlist = mp;
 8001714:	63a8      	str	r0, [r5, #56]	; 0x38
}
 8001716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8001718:	681f      	ldr	r7, [r3, #0]
 800171a:	6858      	ldr	r0, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800171c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800171e:	6007      	str	r7, [r0, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001720:	681f      	ldr	r7, [r3, #0]
 8001722:	46b4      	mov	ip, r6
 8001724:	4632      	mov	r2, r6
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	e002      	b.n	8001730 <chMtxLockS+0xb0>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800172a:	6890      	ldr	r0, [r2, #8]
 800172c:	4288      	cmp	r0, r1
 800172e:	d316      	bcc.n	800175e <chMtxLockS+0xde>
    cp = cp->queue.next;
 8001730:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001732:	4296      	cmp	r6, r2
 8001734:	d1f9      	bne.n	800172a <chMtxLockS+0xaa>
  tp->queue.prev             = cp->queue.prev;
 8001736:	f8dc 2004 	ldr.w	r2, [ip, #4]
      while (tp->prio < ctp->prio) {
 800173a:	68a9      	ldr	r1, [r5, #8]
 800173c:	e9c3 c200 	strd	ip, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8001740:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8001742:	f8cc 3004 	str.w	r3, [ip, #4]
          tp = tp->u.wtmtxp->owner;
 8001746:	68b3      	ldr	r3, [r6, #8]
      while (tp->prio < ctp->prio) {
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	428a      	cmp	r2, r1
 800174c:	d3a3      	bcc.n	8001696 <chMtxLockS+0x16>
 800174e:	e7aa      	b.n	80016a6 <chMtxLockS+0x26>
    cp = cp->queue.next;
 8001750:	4616      	mov	r6, r2
  tp->queue.prev             = cp->queue.prev;
 8001752:	6872      	ldr	r2, [r6, #4]
 8001754:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8001758:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 800175a:	6073      	str	r3, [r6, #4]
 800175c:	e7a3      	b.n	80016a6 <chMtxLockS+0x26>
    cp = cp->queue.next;
 800175e:	4694      	mov	ip, r2
 8001760:	e7e9      	b.n	8001736 <chMtxLockS+0xb6>
 8001762:	bf00      	nop
 8001764:	20000d88 	.word	0x20000d88
	...

08001770 <chprintf.constprop.3>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001770:	b40e      	push	{r1, r2, r3}
    c = *fmt++;
 8001772:	2148      	movs	r1, #72	; 0x48
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001778:	4683      	mov	fp, r0
  int n = 0;
 800177a:	2600      	movs	r6, #0
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 800177c:	b086      	sub	sp, #24
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800177e:	aa10      	add	r2, sp, #64	; 0x40
    c = *fmt++;
 8001780:	4dc0      	ldr	r5, [pc, #768]	; (8001a84 <chprintf.constprop.3+0x314>)
  va_start(ap, fmt);
 8001782:	9202      	str	r2, [sp, #8]
 8001784:	9201      	str	r2, [sp, #4]
      streamPut(chp, (uint8_t)c);
 8001786:	f8db 2000 	ldr.w	r2, [fp]
 800178a:	4658      	mov	r0, fp
 800178c:	68d2      	ldr	r2, [r2, #12]
      n++;
 800178e:	3601      	adds	r6, #1
 8001790:	462c      	mov	r4, r5
      streamPut(chp, (uint8_t)c);
 8001792:	4790      	blx	r2
    c = *fmt++;
 8001794:	7821      	ldrb	r1, [r4, #0]
 8001796:	1c65      	adds	r5, r4, #1
    if (c == 0) {
 8001798:	2900      	cmp	r1, #0
 800179a:	d075      	beq.n	8001888 <chprintf.constprop.3+0x118>
    if (c != '%') {
 800179c:	2925      	cmp	r1, #37	; 0x25
 800179e:	d1f2      	bne.n	8001786 <chprintf.constprop.3+0x16>
    if (*fmt == '-') {
 80017a0:	7863      	ldrb	r3, [r4, #1]
 80017a2:	2b2d      	cmp	r3, #45	; 0x2d
 80017a4:	bf03      	ittte	eq
 80017a6:	78a3      	ldrbeq	r3, [r4, #2]
      fmt++;
 80017a8:	1ca5      	addeq	r5, r4, #2
      left_align = true;
 80017aa:	2001      	moveq	r0, #1
    left_align = false;
 80017ac:	2000      	movne	r0, #0
    if (*fmt == '+') {
 80017ae:	2b2b      	cmp	r3, #43	; 0x2b
      do_sign = true;
 80017b0:	bf05      	ittet	eq
 80017b2:	f04f 0c01 	moveq.w	ip, #1
 80017b6:	786b      	ldrbeq	r3, [r5, #1]
    do_sign = false;
 80017b8:	f04f 0c00 	movne.w	ip, #0
      fmt++;
 80017bc:	4465      	addeq	r5, ip
    if (*fmt == '0') {
 80017be:	2b30      	cmp	r3, #48	; 0x30
 80017c0:	bf03      	ittte	eq
 80017c2:	786b      	ldrbeq	r3, [r5, #1]
      filler = '0';
 80017c4:	2730      	moveq	r7, #48	; 0x30
      fmt++;
 80017c6:	3501      	addeq	r5, #1
    filler = ' ';
 80017c8:	2720      	movne	r7, #32
    if ( *fmt == '*') {
 80017ca:	2b2a      	cmp	r3, #42	; 0x2a
 80017cc:	d145      	bne.n	800185a <chprintf.constprop.3+0xea>
      width = va_arg(ap, int);
 80017ce:	9b01      	ldr	r3, [sp, #4]
      c = *fmt++;
 80017d0:	1cac      	adds	r4, r5, #2
      width = va_arg(ap, int);
 80017d2:	f103 0904 	add.w	r9, r3, #4
 80017d6:	681a      	ldr	r2, [r3, #0]
      c = *fmt++;
 80017d8:	786b      	ldrb	r3, [r5, #1]
    if (c == '.') {
 80017da:	2b2e      	cmp	r3, #46	; 0x2e
 80017dc:	f104 0801 	add.w	r8, r4, #1
 80017e0:	7821      	ldrb	r1, [r4, #0]
 80017e2:	f000 8082 	beq.w	80018ea <chprintf.constprop.3+0x17a>
    precision = 0;
 80017e6:	f04f 0e00 	mov.w	lr, #0
    if (c == 'l' || c == 'L') {
 80017ea:	f003 05df 	and.w	r5, r3, #223	; 0xdf
 80017ee:	2d4c      	cmp	r5, #76	; 0x4c
 80017f0:	d050      	beq.n	8001894 <chprintf.constprop.3+0x124>
      is_long = (c >= 'A') && (c <= 'Z');
 80017f2:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
    switch (c) {
 80017f6:	2b63      	cmp	r3, #99	; 0x63
      is_long = (c >= 'A') && (c <= 'Z');
 80017f8:	b2c9      	uxtb	r1, r1
    switch (c) {
 80017fa:	f000 80e4 	beq.w	80019c6 <chprintf.constprop.3+0x256>
 80017fe:	d95e      	bls.n	80018be <chprintf.constprop.3+0x14e>
 8001800:	2b70      	cmp	r3, #112	; 0x70
 8001802:	f000 8125 	beq.w	8001a50 <chprintf.constprop.3+0x2e0>
 8001806:	f240 80a7 	bls.w	8001958 <chprintf.constprop.3+0x1e8>
 800180a:	2b75      	cmp	r3, #117	; 0x75
 800180c:	f000 8137 	beq.w	8001a7e <chprintf.constprop.3+0x30e>
 8001810:	2b78      	cmp	r3, #120	; 0x78
 8001812:	f000 811d 	beq.w	8001a50 <chprintf.constprop.3+0x2e0>
 8001816:	2b73      	cmp	r3, #115	; 0x73
 8001818:	d15e      	bne.n	80018d8 <chprintf.constprop.3+0x168>
      if ((s = va_arg(ap, char *)) == 0) {
 800181a:	f8d9 5000 	ldr.w	r5, [r9]
 800181e:	f109 0304 	add.w	r3, r9, #4
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	2d00      	cmp	r5, #0
 8001826:	f000 8198 	beq.w	8001b5a <chprintf.constprop.3+0x3ea>
 800182a:	782b      	ldrb	r3, [r5, #0]
      if (precision == 0) {
 800182c:	f1be 0f00 	cmp.w	lr, #0
 8001830:	f040 817e 	bne.w	8001b30 <chprintf.constprop.3+0x3c0>
      for (p = s; *p && (--precision >= 0); p++)
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 81a2 	beq.w	8001b7e <chprintf.constprop.3+0x40e>
 800183a:	46a8      	mov	r8, r5
 800183c:	f647 7efe 	movw	lr, #32766	; 0x7ffe
 8001840:	4645      	mov	r5, r8
 8001842:	e002      	b.n	800184a <chprintf.constprop.3+0xda>
 8001844:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8001848:	d005      	beq.n	8001856 <chprintf.constprop.3+0xe6>
 800184a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800184e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f6      	bne.n	8001844 <chprintf.constprop.3+0xd4>
      filler = ' ';
 8001856:	2720      	movs	r7, #32
 8001858:	e0c1      	b.n	80019de <chprintf.constprop.3+0x26e>
        c = *fmt++;
 800185a:	1c6c      	adds	r4, r5, #1
        if (c == 0) {
 800185c:	b1a3      	cbz	r3, 8001888 <chprintf.constprop.3+0x118>
        if (c >= '0' && c <= '9') {
 800185e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001862:	b2c9      	uxtb	r1, r1
 8001864:	2909      	cmp	r1, #9
      width = 0;
 8001866:	bf98      	it	ls
 8001868:	2200      	movls	r2, #0
        if (c >= '0' && c <= '9') {
 800186a:	d902      	bls.n	8001872 <chprintf.constprop.3+0x102>
 800186c:	e167      	b.n	8001b3e <chprintf.constprop.3+0x3ce>
 800186e:	2909      	cmp	r1, #9
 8001870:	d849      	bhi.n	8001906 <chprintf.constprop.3+0x196>
        c = *fmt++;
 8001872:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 8001876:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        if (c >= '0' && c <= '9') {
 800187a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
          width = width * 10 + c;
 800187e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
        if (c >= '0' && c <= '9') {
 8001882:	b2e9      	uxtb	r1, r5
        if (c == 0) {
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f2      	bne.n	800186e <chprintf.constprop.3+0xfe>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8001888:	4630      	mov	r0, r6
 800188a:	b006      	add	sp, #24
 800188c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001890:	b003      	add	sp, #12
 8001892:	4770      	bx	lr
      if (c == 0) {
 8001894:	2900      	cmp	r1, #0
 8001896:	d0f7      	beq.n	8001888 <chprintf.constprop.3+0x118>
    switch (c) {
 8001898:	2963      	cmp	r1, #99	; 0x63
 800189a:	f000 8093 	beq.w	80019c4 <chprintf.constprop.3+0x254>
 800189e:	d94d      	bls.n	800193c <chprintf.constprop.3+0x1cc>
 80018a0:	2970      	cmp	r1, #112	; 0x70
 80018a2:	f000 80d4 	beq.w	8001a4e <chprintf.constprop.3+0x2de>
 80018a6:	f240 8085 	bls.w	80019b4 <chprintf.constprop.3+0x244>
 80018aa:	2975      	cmp	r1, #117	; 0x75
 80018ac:	f000 80e6 	beq.w	8001a7c <chprintf.constprop.3+0x30c>
 80018b0:	2978      	cmp	r1, #120	; 0x78
 80018b2:	f000 80cc 	beq.w	8001a4e <chprintf.constprop.3+0x2de>
 80018b6:	2973      	cmp	r1, #115	; 0x73
 80018b8:	d14b      	bne.n	8001952 <chprintf.constprop.3+0x1e2>
      c = *fmt++;
 80018ba:	4644      	mov	r4, r8
 80018bc:	e7ad      	b.n	800181a <chprintf.constprop.3+0xaa>
    switch (c) {
 80018be:	2b4f      	cmp	r3, #79	; 0x4f
 80018c0:	d050      	beq.n	8001964 <chprintf.constprop.3+0x1f4>
 80018c2:	f240 80ee 	bls.w	8001aa2 <chprintf.constprop.3+0x332>
 80018c6:	2b55      	cmp	r3, #85	; 0x55
 80018c8:	f000 80d9 	beq.w	8001a7e <chprintf.constprop.3+0x30e>
 80018cc:	2b58      	cmp	r3, #88	; 0x58
 80018ce:	f000 80bf 	beq.w	8001a50 <chprintf.constprop.3+0x2e0>
 80018d2:	2b50      	cmp	r3, #80	; 0x50
 80018d4:	f000 80bc 	beq.w	8001a50 <chprintf.constprop.3+0x2e0>
      *p++ = c;
 80018d8:	f10d 0818 	add.w	r8, sp, #24
 80018dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80018e0:	f808 3d0c 	strb.w	r3, [r8, #-12]!
 80018e4:	f10d 050d 	add.w	r5, sp, #13
 80018e8:	e079      	b.n	80019de <chprintf.constprop.3+0x26e>
      if (c == 0) {
 80018ea:	2900      	cmp	r1, #0
 80018ec:	d0cc      	beq.n	8001888 <chprintf.constprop.3+0x118>
      if (c == '*') {
 80018ee:	292a      	cmp	r1, #42	; 0x2a
 80018f0:	d10c      	bne.n	800190c <chprintf.constprop.3+0x19c>
        precision = va_arg(ap, int);
 80018f2:	f8d9 e000 	ldr.w	lr, [r9]
        c = *fmt++;
 80018f6:	7863      	ldrb	r3, [r4, #1]
 80018f8:	f104 0803 	add.w	r8, r4, #3
 80018fc:	78a1      	ldrb	r1, [r4, #2]
        precision = va_arg(ap, int);
 80018fe:	f109 0904 	add.w	r9, r9, #4
        c = *fmt++;
 8001902:	3402      	adds	r4, #2
 8001904:	e771      	b.n	80017ea <chprintf.constprop.3+0x7a>
        if (c >= '0' && c <= '9') {
 8001906:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800190a:	e766      	b.n	80017da <chprintf.constprop.3+0x6a>
    precision = 0;
 800190c:	f04f 0e00 	mov.w	lr, #0
 8001910:	e005      	b.n	800191e <chprintf.constprop.3+0x1ae>
          if (c == 0) {
 8001912:	4651      	mov	r1, sl
          precision = precision * 10 + c;
 8001914:	eb03 0e44 	add.w	lr, r3, r4, lsl #1
 8001918:	46a8      	mov	r8, r5
          if (c == 0) {
 800191a:	2900      	cmp	r1, #0
 800191c:	d0b4      	beq.n	8001888 <chprintf.constprop.3+0x118>
 800191e:	4645      	mov	r5, r8
        while (c >= '0' && c <= '9') {
 8001920:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b09      	cmp	r3, #9
 8001928:	f815 ab01 	ldrb.w	sl, [r5], #1
          precision = precision * 10 + c;
 800192c:	eb0e 048e 	add.w	r4, lr, lr, lsl #2
        while (c >= '0' && c <= '9') {
 8001930:	d9ef      	bls.n	8001912 <chprintf.constprop.3+0x1a2>
 8001932:	460b      	mov	r3, r1
 8001934:	4644      	mov	r4, r8
 8001936:	4651      	mov	r1, sl
 8001938:	46a8      	mov	r8, r5
 800193a:	e756      	b.n	80017ea <chprintf.constprop.3+0x7a>
    switch (c) {
 800193c:	294f      	cmp	r1, #79	; 0x4f
 800193e:	d03f      	beq.n	80019c0 <chprintf.constprop.3+0x250>
 8001940:	f240 80ea 	bls.w	8001b18 <chprintf.constprop.3+0x3a8>
 8001944:	2955      	cmp	r1, #85	; 0x55
 8001946:	f000 8099 	beq.w	8001a7c <chprintf.constprop.3+0x30c>
 800194a:	2958      	cmp	r1, #88	; 0x58
 800194c:	d07f      	beq.n	8001a4e <chprintf.constprop.3+0x2de>
 800194e:	2950      	cmp	r1, #80	; 0x50
 8001950:	d07d      	beq.n	8001a4e <chprintf.constprop.3+0x2de>
      c = *fmt++;
 8001952:	4644      	mov	r4, r8
    switch (c) {
 8001954:	460b      	mov	r3, r1
 8001956:	e7bf      	b.n	80018d8 <chprintf.constprop.3+0x168>
 8001958:	2b69      	cmp	r3, #105	; 0x69
 800195a:	f000 80a7 	beq.w	8001aac <chprintf.constprop.3+0x33c>
 800195e:	2b6f      	cmp	r3, #111	; 0x6f
 8001960:	f040 8103 	bne.w	8001b6a <chprintf.constprop.3+0x3fa>
      c = 8;
 8001964:	f04f 0808 	mov.w	r8, #8
 8001968:	464b      	mov	r3, r9
 800196a:	f853 cb04 	ldr.w	ip, [r3], #4
  q = p + MAX_FILLER;
 800196e:	f10d 0517 	add.w	r5, sp, #23
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	4629      	mov	r1, r5
 8001976:	4663      	mov	r3, ip
    i = (int)(l % radix);
 8001978:	fbb3 fef8 	udiv	lr, r3, r8
 800197c:	fb08 331e 	mls	r3, r8, lr, r3
    i += '0';
 8001980:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    if (i > '9') {
 8001984:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
      i += 'A' - '0' - 10;
 8001988:	bfc8      	it	gt
 800198a:	f103 0c37 	addgt.w	ip, r3, #55	; 0x37
    l /= radix;
 800198e:	4673      	mov	r3, lr
    *--q = i;
 8001990:	f801 cd01 	strb.w	ip, [r1, #-1]!
  } while ((ll /= radix) != 0);
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1ef      	bne.n	8001978 <chprintf.constprop.3+0x208>
  i = (int)(p + MAX_FILLER - q);
 8001998:	1a6d      	subs	r5, r5, r1
 800199a:	ab03      	add	r3, sp, #12
 800199c:	eb01 0e05 	add.w	lr, r1, r5
    *p++ = *q++;
 80019a0:	f811 cb01 	ldrb.w	ip, [r1], #1
  while (--i);
 80019a4:	4571      	cmp	r1, lr
    *p++ = *q++;
 80019a6:	f803 cb01 	strb.w	ip, [r3], #1
  while (--i);
 80019aa:	d1f9      	bne.n	80019a0 <chprintf.constprop.3+0x230>
 80019ac:	ab03      	add	r3, sp, #12
 80019ae:	441d      	add	r5, r3
    s = tmpbuf;
 80019b0:	4698      	mov	r8, r3
 80019b2:	e014      	b.n	80019de <chprintf.constprop.3+0x26e>
    switch (c) {
 80019b4:	2969      	cmp	r1, #105	; 0x69
 80019b6:	f000 80b4 	beq.w	8001b22 <chprintf.constprop.3+0x3b2>
 80019ba:	296f      	cmp	r1, #111	; 0x6f
 80019bc:	f040 80d9 	bne.w	8001b72 <chprintf.constprop.3+0x402>
      c = *fmt++;
 80019c0:	4644      	mov	r4, r8
 80019c2:	e7cf      	b.n	8001964 <chprintf.constprop.3+0x1f4>
 80019c4:	4644      	mov	r4, r8
      filler = ' ';
 80019c6:	2720      	movs	r7, #32
      *p++ = va_arg(ap, int);
 80019c8:	f8d9 3000 	ldr.w	r3, [r9]
 80019cc:	f10d 0818 	add.w	r8, sp, #24
 80019d0:	f109 0104 	add.w	r1, r9, #4
 80019d4:	9101      	str	r1, [sp, #4]
 80019d6:	f808 3d0c 	strb.w	r3, [r8, #-12]!
 80019da:	f10d 050d 	add.w	r5, sp, #13
    i = (int)(p - s);
 80019de:	eba5 0508 	sub.w	r5, r5, r8
 80019e2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
    if ((width -= i) < 0) {
 80019e6:	1b55      	subs	r5, r2, r5
 80019e8:	d43a      	bmi.n	8001a60 <chprintf.constprop.3+0x2f0>
    if (left_align == false) {
 80019ea:	bba0      	cbnz	r0, 8001a56 <chprintf.constprop.3+0x2e6>
      width = -width;
 80019ec:	f1c5 0a00 	rsb	sl, r5, #0
    if (width < 0) {
 80019f0:	b395      	cbz	r5, 8001a58 <chprintf.constprop.3+0x2e8>
      if (*s == '-' && filler == '0') {
 80019f2:	f898 1000 	ldrb.w	r1, [r8]
 80019f6:	292d      	cmp	r1, #45	; 0x2d
 80019f8:	d046      	beq.n	8001a88 <chprintf.constprop.3+0x318>
        streamPut(chp, (uint8_t)filler);
 80019fa:	f8db 3000 	ldr.w	r3, [fp]
 80019fe:	4639      	mov	r1, r7
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	4658      	mov	r0, fp
 8001a04:	4798      	blx	r3
      } while (++width != 0);
 8001a06:	f11a 0a01 	adds.w	sl, sl, #1
 8001a0a:	d1f6      	bne.n	80019fa <chprintf.constprop.3+0x28a>
    while (--i >= 0) {
 8001a0c:	f1b9 0f00 	cmp.w	r9, #0
 8001a10:	442e      	add	r6, r5
 8001a12:	f6ff aebf 	blt.w	8001794 <chprintf.constprop.3+0x24>
      width = -width;
 8001a16:	464d      	mov	r5, r9
      streamPut(chp, (uint8_t)*s++);
 8001a18:	f8db 3000 	ldr.w	r3, [fp]
    while (--i >= 0) {
 8001a1c:	3d01      	subs	r5, #1
      streamPut(chp, (uint8_t)*s++);
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001a24:	4658      	mov	r0, fp
 8001a26:	4798      	blx	r3
    while (--i >= 0) {
 8001a28:	1c6b      	adds	r3, r5, #1
 8001a2a:	d1f5      	bne.n	8001a18 <chprintf.constprop.3+0x2a8>
 8001a2c:	3601      	adds	r6, #1
 8001a2e:	444e      	add	r6, r9
    while (width) {
 8001a30:	f1ba 0f00 	cmp.w	sl, #0
 8001a34:	f43f aeae 	beq.w	8001794 <chprintf.constprop.3+0x24>
 8001a38:	4655      	mov	r5, sl
      streamPut(chp, (uint8_t)filler);
 8001a3a:	f8db 3000 	ldr.w	r3, [fp]
 8001a3e:	4639      	mov	r1, r7
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	4658      	mov	r0, fp
 8001a44:	4798      	blx	r3
    while (width) {
 8001a46:	3d01      	subs	r5, #1
 8001a48:	d1f7      	bne.n	8001a3a <chprintf.constprop.3+0x2ca>
 8001a4a:	4456      	add	r6, sl
 8001a4c:	e6a2      	b.n	8001794 <chprintf.constprop.3+0x24>
      c = *fmt++;
 8001a4e:	4644      	mov	r4, r8
      c = 16;
 8001a50:	f04f 0810 	mov.w	r8, #16
 8001a54:	e788      	b.n	8001968 <chprintf.constprop.3+0x1f8>
    if (left_align == false) {
 8001a56:	46aa      	mov	sl, r5
    while (--i >= 0) {
 8001a58:	f1b9 0f00 	cmp.w	r9, #0
 8001a5c:	dadb      	bge.n	8001a16 <chprintf.constprop.3+0x2a6>
 8001a5e:	e7e7      	b.n	8001a30 <chprintf.constprop.3+0x2c0>
    if (left_align == false) {
 8001a60:	b928      	cbnz	r0, 8001a6e <chprintf.constprop.3+0x2fe>
    while (--i >= 0) {
 8001a62:	f1b9 0f00 	cmp.w	r9, #0
 8001a66:	f6ff ae95 	blt.w	8001794 <chprintf.constprop.3+0x24>
      width = -width;
 8001a6a:	4682      	mov	sl, r0
 8001a6c:	e7d3      	b.n	8001a16 <chprintf.constprop.3+0x2a6>
    while (--i >= 0) {
 8001a6e:	f1b9 0f00 	cmp.w	r9, #0
 8001a72:	f6ff ae8f 	blt.w	8001794 <chprintf.constprop.3+0x24>
      width = 0;
 8001a76:	f04f 0a00 	mov.w	sl, #0
 8001a7a:	e7cc      	b.n	8001a16 <chprintf.constprop.3+0x2a6>
      c = *fmt++;
 8001a7c:	4644      	mov	r4, r8
      c = 10;
 8001a7e:	f04f 080a 	mov.w	r8, #10
 8001a82:	e771      	b.n	8001968 <chprintf.constprop.3+0x1f8>
 8001a84:	08003f85 	.word	0x08003f85
      if (*s == '-' && filler == '0') {
 8001a88:	2f30      	cmp	r7, #48	; 0x30
 8001a8a:	d1b6      	bne.n	80019fa <chprintf.constprop.3+0x28a>
        streamPut(chp, (uint8_t)*s++);
 8001a8c:	f8db 3000 	ldr.w	r3, [fp]
 8001a90:	4658      	mov	r0, fp
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4798      	blx	r3
 8001a96:	3601      	adds	r6, #1
 8001a98:	f108 0801 	add.w	r8, r8, #1
 8001a9c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8001aa0:	e7ab      	b.n	80019fa <chprintf.constprop.3+0x28a>
    switch (c) {
 8001aa2:	2b44      	cmp	r3, #68	; 0x44
 8001aa4:	d002      	beq.n	8001aac <chprintf.constprop.3+0x33c>
 8001aa6:	2b49      	cmp	r3, #73	; 0x49
 8001aa8:	f47f af16 	bne.w	80018d8 <chprintf.constprop.3+0x168>
 8001aac:	464b      	mov	r3, r9
 8001aae:	f853 eb04 	ldr.w	lr, [r3], #4
      if (is_long) {
 8001ab2:	2919      	cmp	r1, #25
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	d937      	bls.n	8001b28 <chprintf.constprop.3+0x3b8>
      if (l < 0) {
 8001ab8:	f1be 0f00 	cmp.w	lr, #0
 8001abc:	db43      	blt.n	8001b46 <chprintf.constprop.3+0x3d6>
        if (do_sign) {
 8001abe:	f1bc 0f00 	cmp.w	ip, #0
 8001ac2:	d048      	beq.n	8001b56 <chprintf.constprop.3+0x3e6>
          *p++ = '+';
 8001ac4:	232b      	movs	r3, #43	; 0x2b
 8001ac6:	f10d 050d 	add.w	r5, sp, #13
 8001aca:	f88d 300c 	strb.w	r3, [sp, #12]
  q = p + MAX_FILLER;
 8001ace:	4673      	mov	r3, lr
 8001ad0:	f105 0c0b 	add.w	ip, r5, #11
 8001ad4:	4696      	mov	lr, r2
 8001ad6:	4661      	mov	r1, ip
 8001ad8:	461a      	mov	r2, r3
    i = (int)(l % radix);
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <chprintf.constprop.3+0x414>)
 8001adc:	fba3 8302 	umull	r8, r3, r3, r2
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	4698      	mov	r8, r3
 8001ae4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ae8:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
  } while ((ll /= radix) != 0);
 8001aec:	4642      	mov	r2, r8
    i += '0';
 8001aee:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8001af0:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while ((ll /= radix) != 0);
 8001af4:	2a00      	cmp	r2, #0
 8001af6:	d1f0      	bne.n	8001ada <chprintf.constprop.3+0x36a>
 8001af8:	4672      	mov	r2, lr
  i = (int)(p + MAX_FILLER - q);
 8001afa:	ebac 0c01 	sub.w	ip, ip, r1
 8001afe:	eb01 080c 	add.w	r8, r1, ip
 8001b02:	1e6b      	subs	r3, r5, #1
    *p++ = *q++;
 8001b04:	f811 eb01 	ldrb.w	lr, [r1], #1
  while (--i);
 8001b08:	4541      	cmp	r1, r8
    *p++ = *q++;
 8001b0a:	f803 ef01 	strb.w	lr, [r3, #1]!
  while (--i);
 8001b0e:	d1f9      	bne.n	8001b04 <chprintf.constprop.3+0x394>
 8001b10:	4465      	add	r5, ip
    s = tmpbuf;
 8001b12:	f10d 080c 	add.w	r8, sp, #12
 8001b16:	e762      	b.n	80019de <chprintf.constprop.3+0x26e>
    switch (c) {
 8001b18:	2944      	cmp	r1, #68	; 0x44
 8001b1a:	d002      	beq.n	8001b22 <chprintf.constprop.3+0x3b2>
 8001b1c:	2949      	cmp	r1, #73	; 0x49
 8001b1e:	f47f af18 	bne.w	8001952 <chprintf.constprop.3+0x1e2>
      c = *fmt++;
 8001b22:	4644      	mov	r4, r8
 8001b24:	f109 0304 	add.w	r3, r9, #4
        l = va_arg(ap, long);
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	f8d9 e000 	ldr.w	lr, [r9]
 8001b2e:	e7c3      	b.n	8001ab8 <chprintf.constprop.3+0x348>
      for (p = s; *p && (--precision >= 0); p++)
 8001b30:	b32b      	cbz	r3, 8001b7e <chprintf.constprop.3+0x40e>
 8001b32:	f1be 0e01 	subs.w	lr, lr, #1
 8001b36:	46a8      	mov	r8, r5
 8001b38:	f57f ae82 	bpl.w	8001840 <chprintf.constprop.3+0xd0>
 8001b3c:	e68b      	b.n	8001856 <chprintf.constprop.3+0xe6>
        if (c >= '0' && c <= '9') {
 8001b3e:	f8dd 9004 	ldr.w	r9, [sp, #4]
      width = 0;
 8001b42:	2200      	movs	r2, #0
 8001b44:	e649      	b.n	80017da <chprintf.constprop.3+0x6a>
        *p++ = '-';
 8001b46:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8001b48:	f1ce 0e00 	rsb	lr, lr, #0
        *p++ = '-';
 8001b4c:	f88d 300c 	strb.w	r3, [sp, #12]
 8001b50:	f10d 050d 	add.w	r5, sp, #13
 8001b54:	e7bb      	b.n	8001ace <chprintf.constprop.3+0x35e>
    p = tmpbuf;
 8001b56:	ad03      	add	r5, sp, #12
 8001b58:	e7b9      	b.n	8001ace <chprintf.constprop.3+0x35e>
      if (precision == 0) {
 8001b5a:	f1be 0f00 	cmp.w	lr, #0
 8001b5e:	d10c      	bne.n	8001b7a <chprintf.constprop.3+0x40a>
      for (p = s; *p && (--precision >= 0); p++)
 8001b60:	f647 7efe 	movw	lr, #32766	; 0x7ffe
      if (precision == 0) {
 8001b64:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8001b88 <chprintf.constprop.3+0x418>
 8001b68:	e66a      	b.n	8001840 <chprintf.constprop.3+0xd0>
    switch (c) {
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	f47f aeb4 	bne.w	80018d8 <chprintf.constprop.3+0x168>
 8001b70:	e79c      	b.n	8001aac <chprintf.constprop.3+0x33c>
 8001b72:	2964      	cmp	r1, #100	; 0x64
 8001b74:	f47f aeed 	bne.w	8001952 <chprintf.constprop.3+0x1e2>
 8001b78:	e7d3      	b.n	8001b22 <chprintf.constprop.3+0x3b2>
      if (precision == 0) {
 8001b7a:	4d03      	ldr	r5, [pc, #12]	; (8001b88 <chprintf.constprop.3+0x418>)
 8001b7c:	e7d9      	b.n	8001b32 <chprintf.constprop.3+0x3c2>
      for (p = s; *p && (--precision >= 0); p++)
 8001b7e:	46a8      	mov	r8, r5
      filler = ' ';
 8001b80:	2720      	movs	r7, #32
 8001b82:	e72c      	b.n	80019de <chprintf.constprop.3+0x26e>
 8001b84:	cccccccd 	.word	0xcccccccd
 8001b88:	08003f94 	.word	0x08003f94
 8001b8c:	00000000 	.word	0x00000000

08001b90 <fillScreen>:
static void fillScreen(void *ip, ssd1306_color_t color) {
 8001b90:	2900      	cmp	r1, #0
 8001b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b94:	bf0c      	ite	eq
 8001b96:	2700      	moveq	r7, #0
 8001b98:	27ff      	movne	r7, #255	; 0xff
    drvp->fb[SSD1306_WIDTH_FIXED * idx] = 0x40;
 8001b9a:	2640      	movs	r6, #64	; 0x40
 8001b9c:	f100 0410 	add.w	r4, r0, #16
 8001ba0:	f500 6583 	add.w	r5, r0, #1048	; 0x418
 8001ba4:	f804 6c01 	strb.w	r6, [r4, #-1]
    memset(&drvp->fb[SSD1306_WIDTH_FIXED * idx + 1],
 8001ba8:	4620      	mov	r0, r4
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	4639      	mov	r1, r7
 8001bae:	3481      	adds	r4, #129	; 0x81
 8001bb0:	f7fe fbd2 	bl	8000358 <memset>
  for (idx = 0; idx < 8; idx++) {
 8001bb4:	42ac      	cmp	r4, r5
 8001bb6:	d1f5      	bne.n	8001ba4 <fillScreen+0x14>
}
 8001bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	0000      	movs	r0, r0
	...

08001bc0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8001bca:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8001bce:	f04f 0a20 	mov.w	sl, #32
 8001bd2:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8001bd6:	b342      	cbz	r2, 8001c2a <oqWriteTimeout+0x6a>
 8001bd8:	4604      	mov	r4, r0
 8001bda:	460f      	mov	r7, r1
 8001bdc:	4616      	mov	r6, r2
 8001bde:	f04f 0b00 	mov.w	fp, #0
  if (n > oqGetEmptyI(oqp)) {
 8001be2:	68a2      	ldr	r2, [r4, #8]
 8001be4:	4296      	cmp	r6, r2
 8001be6:	bf98      	it	ls
 8001be8:	4635      	movls	r5, r6
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001bea:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8001bee:	bf88      	it	hi
 8001bf0:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001bf2:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8001bf6:	45a8      	cmp	r8, r5
 8001bf8:	d840      	bhi.n	8001c7c <oqWriteTimeout+0xbc>
  else if (n > s1) {
 8001bfa:	d32b      	bcc.n	8001c54 <oqWriteTimeout+0x94>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001bfc:	462a      	mov	r2, r5
 8001bfe:	4639      	mov	r1, r7
 8001c00:	f7fe fb34 	bl	800026c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8001c04:	68e2      	ldr	r2, [r4, #12]
 8001c06:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8001c08:	68a2      	ldr	r2, [r4, #8]
 8001c0a:	1b52      	subs	r2, r2, r5
 8001c0c:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8001c0e:	b19d      	cbz	r5, 8001c38 <oqWriteTimeout+0x78>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8001c10:	f1b9 0f00 	cmp.w	r9, #0
 8001c14:	d001      	beq.n	8001c1a <oqWriteTimeout+0x5a>
        nfy(oqp);
 8001c16:	4620      	mov	r0, r4
 8001c18:	47c8      	blx	r9
 8001c1a:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8001c1e:	1b76      	subs	r6, r6, r5
      bp += done;
 8001c20:	442f      	add	r7, r5
 8001c22:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8001c26:	2e00      	cmp	r6, #0
 8001c28:	d1db      	bne.n	8001be2 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8001c2a:	9803      	ldr	r0, [sp, #12]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8001c32:	b005      	add	sp, #20
 8001c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c38:	9902      	ldr	r1, [sp, #8]
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f7ff fbd8 	bl	80013f0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d0ce      	beq.n	8001be2 <oqWriteTimeout+0x22>
 8001c44:	9b03      	ldr	r3, [sp, #12]
 8001c46:	1b98      	subs	r0, r3, r6
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f383 8811 	msr	BASEPRI, r3
}
 8001c4e:	b005      	add	sp, #20
 8001c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8001c54:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001c58:	4642      	mov	r2, r8
 8001c5a:	4639      	mov	r1, r7
    s2 = n - s1;
 8001c5c:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001c5e:	f7fe fb05 	bl	800026c <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8001c62:	eb07 0108 	add.w	r1, r7, r8
 8001c66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8001c6a:	68e0      	ldr	r0, [r4, #12]
 8001c6c:	4642      	mov	r2, r8
 8001c6e:	f7fe fafd 	bl	800026c <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8001c72:	4643      	mov	r3, r8
 8001c74:	68e2      	ldr	r2, [r4, #12]
 8001c76:	18d3      	adds	r3, r2, r3
 8001c78:	6163      	str	r3, [r4, #20]
 8001c7a:	e7c5      	b.n	8001c08 <oqWriteTimeout+0x48>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001c7c:	462a      	mov	r2, r5
 8001c7e:	4639      	mov	r1, r7
 8001c80:	f7fe faf4 	bl	800026c <memcpy>
    oqp->q_wrptr += n;
 8001c84:	6962      	ldr	r2, [r4, #20]
 8001c86:	442a      	add	r2, r5
 8001c88:	6162      	str	r2, [r4, #20]
 8001c8a:	e7bd      	b.n	8001c08 <oqWriteTimeout+0x48>
 8001c8c:	0000      	movs	r0, r0
	...

08001c90 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001c90:	3030      	adds	r0, #48	; 0x30
 8001c92:	f7ff bf95 	b.w	8001bc0 <oqWriteTimeout>
 8001c96:	bf00      	nop
	...

08001ca0 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001ca0:	3030      	adds	r0, #48	; 0x30
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ca6:	f7ff bf8b 	b.w	8001bc0 <oqWriteTimeout>
 8001caa:	bf00      	nop
 8001cac:	0000      	movs	r0, r0
	...

08001cb0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8001cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8001cba:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8001cbe:	f04f 0a20 	mov.w	sl, #32
 8001cc2:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8001cc6:	b342      	cbz	r2, 8001d1a <iqReadTimeout+0x6a>
 8001cc8:	4604      	mov	r4, r0
 8001cca:	460f      	mov	r7, r1
 8001ccc:	4616      	mov	r6, r2
 8001cce:	f04f 0b00 	mov.w	fp, #0
  if (n > iqGetFullI(iqp)) {
 8001cd2:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001cd4:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8001cd6:	4296      	cmp	r6, r2
 8001cd8:	bf98      	it	ls
 8001cda:	4635      	movls	r5, r6
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001cdc:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8001cde:	bf88      	it	hi
 8001ce0:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001ce2:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8001ce6:	45a8      	cmp	r8, r5
 8001ce8:	d840      	bhi.n	8001d6c <iqReadTimeout+0xbc>
  else if (n > s1) {
 8001cea:	d32b      	bcc.n	8001d44 <iqReadTimeout+0x94>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8001cec:	462a      	mov	r2, r5
 8001cee:	4638      	mov	r0, r7
 8001cf0:	f7fe fabc 	bl	800026c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8001cf4:	68e2      	ldr	r2, [r4, #12]
 8001cf6:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8001cf8:	68a2      	ldr	r2, [r4, #8]
 8001cfa:	1b52      	subs	r2, r2, r5
 8001cfc:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8001cfe:	b19d      	cbz	r5, 8001d28 <iqReadTimeout+0x78>
      if (nfy != NULL) {
 8001d00:	f1b9 0f00 	cmp.w	r9, #0
 8001d04:	d001      	beq.n	8001d0a <iqReadTimeout+0x5a>
        nfy(iqp);
 8001d06:	4620      	mov	r0, r4
 8001d08:	47c8      	blx	r9
 8001d0a:	f38b 8811 	msr	BASEPRI, fp
      n  -= done;
 8001d0e:	1b76      	subs	r6, r6, r5
      bp += done;
 8001d10:	442f      	add	r7, r5
 8001d12:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8001d16:	2e00      	cmp	r6, #0
 8001d18:	d1db      	bne.n	8001cd2 <iqReadTimeout+0x22>
  if (n > iqGetFullI(iqp)) {
 8001d1a:	9803      	ldr	r0, [sp, #12]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f383 8811 	msr	BASEPRI, r3
}
 8001d22:	b005      	add	sp, #20
 8001d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d28:	9902      	ldr	r1, [sp, #8]
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f7ff fb60 	bl	80013f0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001d30:	2800      	cmp	r0, #0
 8001d32:	d0ce      	beq.n	8001cd2 <iqReadTimeout+0x22>
 8001d34:	9b03      	ldr	r3, [sp, #12]
 8001d36:	1b98      	subs	r0, r3, r6
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f383 8811 	msr	BASEPRI, r3
}
 8001d3e:	b005      	add	sp, #20
 8001d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8001d44:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8001d48:	4642      	mov	r2, r8
 8001d4a:	4638      	mov	r0, r7
    s2 = n - s1;
 8001d4c:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8001d4e:	f7fe fa8d 	bl	800026c <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8001d52:	eb07 0008 	add.w	r0, r7, r8
 8001d56:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8001d5a:	68e1      	ldr	r1, [r4, #12]
 8001d5c:	4642      	mov	r2, r8
 8001d5e:	f7fe fa85 	bl	800026c <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8001d62:	4643      	mov	r3, r8
 8001d64:	68e2      	ldr	r2, [r4, #12]
 8001d66:	18d3      	adds	r3, r2, r3
 8001d68:	61a3      	str	r3, [r4, #24]
 8001d6a:	e7c5      	b.n	8001cf8 <iqReadTimeout+0x48>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8001d6c:	462a      	mov	r2, r5
 8001d6e:	4638      	mov	r0, r7
 8001d70:	f7fe fa7c 	bl	800026c <memcpy>
    iqp->q_rdptr += n;
 8001d74:	69a2      	ldr	r2, [r4, #24]
 8001d76:	442a      	add	r2, r5
 8001d78:	61a2      	str	r2, [r4, #24]
 8001d7a:	e7bd      	b.n	8001cf8 <iqReadTimeout+0x48>
 8001d7c:	0000      	movs	r0, r0
	...

08001d80 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001d80:	300c      	adds	r0, #12
 8001d82:	f7ff bf95 	b.w	8001cb0 <iqReadTimeout>
 8001d86:	bf00      	nop
	...

08001d90 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001d90:	300c      	adds	r0, #12
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d96:	f7ff bf8b 	b.w	8001cb0 <iqReadTimeout>
 8001d9a:	bf00      	nop
 8001d9c:	0000      	movs	r0, r0
	...

08001da0 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8001da0:	2100      	movs	r1, #0
 8001da2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  dma.allocated_mask = 0U;
 8001da6:	4813      	ldr	r0, [pc, #76]	; (8001df4 <main+0x54>)
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <main+0x58>)

/*
 * Application entry point.
 */
int main(void)
{
 8001daa:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  dma.isr_mask       = 0U;
 8001dae:	6041      	str	r1, [r0, #4]
 8001db0:	691d      	ldr	r5, [r3, #16]
 8001db2:	611c      	str	r4, [r3, #16]
 8001db4:	691d      	ldr	r5, [r3, #16]
 8001db6:	6119      	str	r1, [r3, #16]
 8001db8:	691d      	ldr	r5, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8001dba:	68dd      	ldr	r5, [r3, #12]
 8001dbc:	60dc      	str	r4, [r3, #12]
 8001dbe:	68dc      	ldr	r4, [r3, #12]
 8001dc0:	60d9      	str	r1, [r3, #12]
 8001dc2:	68dc      	ldr	r4, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(true);
 8001dc4:	69dc      	ldr	r4, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 8001dc6:	4d0d      	ldr	r5, [pc, #52]	; (8001dfc <main+0x5c>)
  rccEnablePWRInterface(true);
 8001dc8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8001dcc:	61dc      	str	r4, [r3, #28]
 8001dce:	69dc      	ldr	r4, [r3, #28]
  rccEnableBKPInterface(true);
 8001dd0:	69dc      	ldr	r4, [r3, #28]
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8001dd2:	460a      	mov	r2, r1
 8001dd4:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8001dd8:	61dc      	str	r4, [r3, #28]
 8001dda:	69db      	ldr	r3, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 8001ddc:	682c      	ldr	r4, [r5, #0]
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <main+0x60>)
 8001de0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8001de4:	602c      	str	r4, [r5, #0]
 8001de6:	b087      	sub	sp, #28
  dma.allocated_mask = 0U;
 8001de8:	6001      	str	r1, [r0, #0]
 8001dea:	4606      	mov	r6, r0
  dma.isr_mask       = 0U;
 8001dec:	4c05      	ldr	r4, [pc, #20]	; (8001e04 <main+0x64>)
 8001dee:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8001df2:	e00b      	b.n	8001e0c <main+0x6c>
 8001df4:	20000f44 	.word	0x20000f44
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	08003f04 	.word	0x08003f04
 8001e04:	40020008 	.word	0x40020008
 8001e08:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8001e0c:	3310      	adds	r3, #16
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001e0e:	4299      	cmp	r1, r3
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8001e10:	6022      	str	r2, [r4, #0]
    dma.streams[i].func = NULL;
 8001e12:	f846 2f08 	str.w	r2, [r6, #8]!
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001e16:	d1f7      	bne.n	8001e08 <main+0x68>
  DMA1->IFCR = 0xFFFFFFFFU;
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e1c:	2160      	movs	r1, #96	; 0x60
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e1e:	f44f 7680 	mov.w	r6, #256	; 0x100
 8001e22:	f44f 7900 	mov.w	r9, #512	; 0x200
 8001e26:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8001e2a:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8001e2e:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8001e32:	f04f 0a80 	mov.w	sl, #128	; 0x80
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 8001e36:	f04f 3588 	mov.w	r5, #2290649224	; 0x88888888
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8001e3a:	f04f 0c01 	mov.w	ip, #1
 8001e3e:	4bc1      	ldr	r3, [pc, #772]	; (8002144 <main+0x3a4>)
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 8001e40:	4cc1      	ldr	r4, [pc, #772]	; (8002148 <main+0x3a8>)
 8001e42:	6058      	str	r0, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e44:	4bc1      	ldr	r3, [pc, #772]	; (800214c <main+0x3ac>)
  ADC1->CR1 = 0;
  ADC1->CR2 = ADC_CR2_ADON;

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 8001e46:	4627      	mov	r7, r4
 8001e48:	f883 1306 	strb.w	r1, [r3, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e4c:	f8c3 b180 	str.w	fp, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e50:	f8c3 b000 	str.w	fp, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e54:	f883 1307 	strb.w	r1, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e58:	f8c3 a180 	str.w	sl, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e5c:	f8c3 a000 	str.w	sl, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e60:	f883 1308 	strb.w	r1, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e64:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e68:	601e      	str	r6, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e6a:	f883 1309 	strb.w	r1, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e6e:	f8c3 9180 	str.w	r9, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e72:	f8c3 9000 	str.w	r9, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e76:	f883 130a 	strb.w	r1, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e7a:	f8c3 8180 	str.w	r8, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e7e:	f8c3 8000 	str.w	r8, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e82:	f883 1317 	strb.w	r1, [r3, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e86:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e8a:	f8c3 e000 	str.w	lr, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e8e:	f883 1328 	strb.w	r1, [r3, #808]	; 0x328
  rccEnableAPB2(APB2_EN_MASK, true);
 8001e92:	49af      	ldr	r1, [pc, #700]	; (8002150 <main+0x3b0>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e94:	f8c3 6184 	str.w	r6, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e98:	605e      	str	r6, [r3, #4]
 8001e9a:	698e      	ldr	r6, [r1, #24]
  GPIOA->ODR = config->PAData.odr;
 8001e9c:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
  rccEnableAPB2(APB2_EN_MASK, true);
 8001ea0:	f046 067d 	orr.w	r6, r6, #125	; 0x7d
 8001ea4:	618e      	str	r6, [r1, #24]
  GPIOA->CRH = config->PAData.crh;
 8001ea6:	4eab      	ldr	r6, [pc, #684]	; (8002154 <main+0x3b4>)
  GPIOA->ODR = config->PAData.odr;
 8001ea8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
  rccEnableAPB2(APB2_EN_MASK, true);
 8001eac:	f8d1 e018 	ldr.w	lr, [r1, #24]
  GPIOA->ODR = config->PAData.odr;
 8001eb0:	60d8      	str	r0, [r3, #12]
  GPIOA->CRH = config->PAData.crh;
 8001eb2:	605e      	str	r6, [r3, #4]
  GPIOA->CRL = config->PAData.crl;
 8001eb4:	f5a6 4682 	sub.w	r6, r6, #16640	; 0x4100
 8001eb8:	3e30      	subs	r6, #48	; 0x30
 8001eba:	601e      	str	r6, [r3, #0]
  GPIOB->CRH = config->PBData.crh;
 8001ebc:	f506 4689 	add.w	r6, r6, #17536	; 0x4480
 8001ec0:	3630      	adds	r6, #48	; 0x30
  GPIOB->ODR = config->PBData.odr;
 8001ec2:	f8c3 040c 	str.w	r0, [r3, #1036]	; 0x40c
  GPIOB->CRH = config->PBData.crh;
 8001ec6:	f8c3 6404 	str.w	r6, [r3, #1028]	; 0x404
  GPIOB->CRL = config->PBData.crl;
 8001eca:	f106 46ee 	add.w	r6, r6, #1996488704	; 0x77000000
 8001ece:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
  GPIOC->ODR = config->PCData.odr;
 8001ed2:	4ea1      	ldr	r6, [pc, #644]	; (8002158 <main+0x3b8>)
 8001ed4:	60f0      	str	r0, [r6, #12]
  GPIOC->CRH = config->PCData.crh;
 8001ed6:	6075      	str	r5, [r6, #4]
  GPIOC->CRL = config->PCData.crl;
 8001ed8:	6035      	str	r5, [r6, #0]
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8001eda:	4ea0      	ldr	r6, [pc, #640]	; (800215c <main+0x3bc>)
  GPIOD->ODR = config->PDData.odr;
 8001edc:	f8c3 0c0c 	str.w	r0, [r3, #3084]	; 0xc0c
  GPIOD->CRH = config->PDData.crh;
 8001ee0:	f8c3 5c04 	str.w	r5, [r3, #3076]	; 0xc04
  GPIOD->CRL = config->PDData.crl;
 8001ee4:	f8c3 6c00 	str.w	r6, [r3, #3072]	; 0xc00
  GPIOB->ODR = config->PBData.odr;
 8001ee8:	4443      	add	r3, r8
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8001eea:	f8c3 0c0c 	str.w	r0, [r3, #3084]	; 0xc0c
  GPIOE->CRH = config->PEData.crh;
 8001eee:	f8c3 5c04 	str.w	r5, [r3, #3076]	; 0xc04
  GPIOE->CRL = config->PEData.crl;
 8001ef2:	f8c3 5c00 	str.w	r5, [r3, #3072]	; 0xc00
 8001ef6:	4b9a      	ldr	r3, [pc, #616]	; (8002160 <main+0x3c0>)
 8001ef8:	f883 c000 	strb.w	ip, [r3]
  rccEnableADC1(true);
 8001efc:	6988      	ldr	r0, [r1, #24]
  adcp->config   = NULL;
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	ea40 0009 	orr.w	r0, r0, r9
 8001f04:	6188      	str	r0, [r1, #24]
  adcp->samples  = NULL;
  adcp->depth    = 0;
 8001f06:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8001f0a:	6989      	ldr	r1, [r1, #24]
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 8001f0c:	f242 518a 	movw	r1, #9610	; 0x258a
  adcp->grpp     = NULL;
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8001f10:	e9c3 2204 	strd	r2, r2, [r3, #16]
  mp->owner = NULL;
 8001f14:	621a      	str	r2, [r3, #32]
  ADCD1.dmastp  = NULL;
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c
  ADCD1.adc = ADC1;
 8001f18:	629c      	str	r4, [r3, #40]	; 0x28
  ADC1->CR1 = 0;
 8001f1a:	6062      	str	r2, [r4, #4]
  ADC1->CR2 = ADC_CR2_ADON;
 8001f1c:	f8c4 c008 	str.w	ip, [r4, #8]
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 8001f20:	6319      	str	r1, [r3, #48]	; 0x30
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 8001f22:	2109      	movs	r1, #9
  tqp->next = (thread_t *)tqp;
 8001f24:	f103 0218 	add.w	r2, r3, #24
 8001f28:	60a1      	str	r1, [r4, #8]
  tqp->prev = (thread_t *)tqp;
 8001f2a:	e9c3 2206 	strd	r2, r2, [r3, #24]
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	071d      	lsls	r5, r3, #28
 8001f32:	d4fc      	bmi.n	8001f2e <main+0x18e>
    ;

  /* Calibration.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 8001f34:	2305      	movs	r3, #5
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 8001f36:	4e84      	ldr	r6, [pc, #528]	; (8002148 <main+0x3a8>)
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 8001f38:	60bb      	str	r3, [r7, #8]
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 8001f3a:	68b2      	ldr	r2, [r6, #8]
 8001f3c:	f012 0204 	ands.w	r2, r2, #4
 8001f40:	d1fb      	bne.n	8001f3a <main+0x19a>
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8001f42:	4d88      	ldr	r5, [pc, #544]	; (8002164 <main+0x3c4>)
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8001f44:	2001      	movs	r0, #1
 8001f46:	462c      	mov	r4, r5
  oqp->q_counter = size;
 8001f48:	2710      	movs	r7, #16
    ;

  /* Return the ADC in low power mode.*/
  ADC1->CR2 = 0;
  rccDisableADC1();
 8001f4a:	4981      	ldr	r1, [pc, #516]	; (8002150 <main+0x3b0>)
  ADC1->CR2 = 0;
 8001f4c:	60b2      	str	r2, [r6, #8]
  rccDisableADC1();
 8001f4e:	698e      	ldr	r6, [r1, #24]
  iqp->q_notify  = infy;
 8001f50:	62aa      	str	r2, [r5, #40]	; 0x28
 8001f52:	f426 7600 	bic.w	r6, r6, #512	; 0x200
 8001f56:	618e      	str	r6, [r1, #24]
 8001f58:	6989      	ldr	r1, [r1, #24]
 8001f5a:	4983      	ldr	r1, [pc, #524]	; (8002168 <main+0x3c8>)
  oqp->q_top     = bp + size;
 8001f5c:	f105 0674 	add.w	r6, r5, #116	; 0x74
 8001f60:	f844 1b04 	str.w	r1, [r4], #4
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8001f64:	606c      	str	r4, [r5, #4]
 8001f66:	4981      	ldr	r1, [pc, #516]	; (800216c <main+0x3cc>)
  I2CD1.i2c    = I2C1;
 8001f68:	4c81      	ldr	r4, [pc, #516]	; (8002170 <main+0x3d0>)
  i2cp->config = NULL;
 8001f6a:	604a      	str	r2, [r1, #4]
 8001f6c:	634c      	str	r4, [r1, #52]	; 0x34
  tqp->next = (thread_t *)tqp;
 8001f6e:	f101 040c 	add.w	r4, r1, #12
 8001f72:	614a      	str	r2, [r1, #20]
  I2CD1.thread = NULL;
 8001f74:	61ca      	str	r2, [r1, #28]
  I2CD1.dmatx  = NULL;
 8001f76:	e9c1 220b 	strd	r2, r2, [r1, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 8001f7a:	e9c1 4403 	strd	r4, r4, [r1, #12]
  i2cp->state  = I2C_STOP;
 8001f7e:	7008      	strb	r0, [r1, #0]
  tqp->next = (thread_t *)tqp;
 8001f80:	f105 010c 	add.w	r1, r5, #12
  tqp->prev = (thread_t *)tqp;
 8001f84:	e9c5 1103 	strd	r1, r1, [r5, #12]
  iqp->q_buffer  = bp;
 8001f88:	f105 0154 	add.w	r1, r5, #84	; 0x54
 8001f8c:	61a9      	str	r1, [r5, #24]
  iqp->q_wrptr   = bp;
 8001f8e:	e9c5 1108 	strd	r1, r1, [r5, #32]
  iqp->q_top     = bp + size;
 8001f92:	f105 0164 	add.w	r1, r5, #100	; 0x64
 8001f96:	61e9      	str	r1, [r5, #28]
  oqp->q_buffer  = bp;
 8001f98:	63e9      	str	r1, [r5, #60]	; 0x3c
  oqp->q_wrptr   = bp;
 8001f9a:	e9c5 1111 	strd	r1, r1, [r5, #68]	; 0x44
  tqp->next = (thread_t *)tqp;
 8001f9e:	f105 0130 	add.w	r1, r5, #48	; 0x30
  oqp->q_top     = bp + size;
 8001fa2:	642e      	str	r6, [r5, #64]	; 0x40
  tqp->prev = (thread_t *)tqp;
 8001fa4:	e9c5 110c 	strd	r1, r1, [r5, #48]	; 0x30
  oqp->q_notify  = onfy;
 8001fa8:	4e72      	ldr	r6, [pc, #456]	; (8002174 <main+0x3d4>)
  usbp->state        = USB_STOP;
 8001faa:	4973      	ldr	r1, [pc, #460]	; (8002178 <main+0x3d8>)
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 8001fac:	4c73      	ldr	r4, [pc, #460]	; (800217c <main+0x3dc>)
  iqp->q_counter = 0;
 8001fae:	616a      	str	r2, [r5, #20]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8001fb0:	7228      	strb	r0, [r5, #8]
    usbp->in_params[i]  = NULL;
 8001fb2:	4613      	mov	r3, r2
  iqp->q_link    = link;
 8001fb4:	62ed      	str	r5, [r5, #44]	; 0x2c
  oqp->q_counter = size;
 8001fb6:	63af      	str	r7, [r5, #56]	; 0x38
  oqp->q_notify  = onfy;
 8001fb8:	64ee      	str	r6, [r5, #76]	; 0x4c
  usbp->state        = USB_STOP;
 8001fba:	7008      	strb	r0, [r1, #0]
  usbp->config       = NULL;
 8001fbc:	604a      	str	r2, [r1, #4]
  oqp->q_link    = link;
 8001fbe:	652d      	str	r5, [r5, #80]	; 0x50
 8001fc0:	676c      	str	r4, [r5, #116]	; 0x74
 8001fc2:	f101 022c 	add.w	r2, r1, #44	; 0x2c
 8001fc6:	f101 0048 	add.w	r0, r1, #72	; 0x48
    usbp->in_params[i]  = NULL;
 8001fca:	f842 3b04 	str.w	r3, [r2], #4
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8001fce:	4290      	cmp	r0, r2
    usbp->out_params[i] = NULL;
 8001fd0:	6193      	str	r3, [r2, #24]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8001fd2:	d1fa      	bne.n	8001fca <main+0x22a>
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001fd4:	f04f 0e01 	mov.w	lr, #1
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001fd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fdc:	f648 499f 	movw	r9, #35999	; 0x8c9f
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001fe0:	f64f 74ff 	movw	r4, #65535	; 0xffff
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001fe4:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001fe8:	f04f 0880 	mov.w	r8, #128	; 0x80
  ch.vtlist.delta = (sysinterval_t)-1;
 8001fec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
  ST_ENABLE_CLOCK();
 8001ff0:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8002150 <main+0x3b0>
  usbp->transmitting = 0;
 8001ff4:	608b      	str	r3, [r1, #8]
 8001ff6:	f8db 101c 	ldr.w	r1, [fp, #28]
  ST_ENABLE_STOP();
 8001ffa:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 80021a0 <main+0x400>
  ST_ENABLE_CLOCK();
 8001ffe:	ea41 010e 	orr.w	r1, r1, lr
 8002002:	f8cb 101c 	str.w	r1, [fp, #28]
 8002006:	f8db 101c 	ldr.w	r1, [fp, #28]
  ST_ENABLE_STOP();
 800200a:	f8da 1004 	ldr.w	r1, [sl, #4]
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
 800200e:	2004      	movs	r0, #4
 8002010:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002014:	f8ca 1004 	str.w	r1, [sl, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002018:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800201c:	62d4      	str	r4, [r2, #44]	; 0x2c
  tqp->next = (thread_t *)tqp;
 800201e:	4c58      	ldr	r4, [pc, #352]	; (8002180 <main+0x3e0>)
  STM32_ST_TIM->CCMR1  = 0;
 8002020:	6193      	str	r3, [r2, #24]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002022:	4958      	ldr	r1, [pc, #352]	; (8002184 <main+0x3e4>)
  tqp->prev = (thread_t *)tqp;
 8002024:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCR[0] = 0;
 8002026:	6353      	str	r3, [r2, #52]	; 0x34
  ch.rlist.prio = NOPRIO;
 8002028:	60a3      	str	r3, [r4, #8]
  STM32_ST_TIM->DIER   = 0;
 800202a:	60d3      	str	r3, [r2, #12]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 800202c:	6124      	str	r4, [r4, #16]
  STM32_ST_TIM->CR2    = 0;
 800202e:	6053      	str	r3, [r2, #4]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8002030:	6164      	str	r4, [r4, #20]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002032:	f8c2 e014 	str.w	lr, [r2, #20]
  ch.vtlist.lasttime = (systime_t)0;
 8002036:	8523      	strh	r3, [r4, #40]	; 0x28
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002038:	f8c2 e000 	str.w	lr, [r2]
 800203c:	4a43      	ldr	r2, [pc, #268]	; (800214c <main+0x3ac>)
  H_NEXT(&default_heap.header) = NULL;
 800203e:	604b      	str	r3, [r1, #4]
 8002040:	f882 831c 	strb.w	r8, [r2, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002044:	f8c2 c180 	str.w	ip, [r2, #384]	; 0x180
  H_PAGES(&default_heap.header) = 0;
 8002048:	608b      	str	r3, [r1, #8]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800204a:	f8c2 c000 	str.w	ip, [r2]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 800204e:	f104 0c1c 	add.w	ip, r4, #28
  ch_memcore.basemem = __heap_base__;
 8002052:	4a4d      	ldr	r2, [pc, #308]	; (8002188 <main+0x3e8>)
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8002054:	e9c4 cc07 	strd	ip, ip, [r4, #28]
 8002058:	f8df c148 	ldr.w	ip, [pc, #328]	; 80021a4 <main+0x404>
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800205c:	f8df e148 	ldr.w	lr, [pc, #328]	; 80021a8 <main+0x408>
 8002060:	f8c2 c000 	str.w	ip, [r2]
  ch_memcore.topmem  = __heap_end__;
 8002064:	f8df c144 	ldr.w	ip, [pc, #324]	; 80021ac <main+0x40c>
 8002068:	f8c1 e000 	str.w	lr, [r1]
 800206c:	f8c2 c004 	str.w	ip, [r2, #4]
  tqp->next = (thread_t *)tqp;
 8002070:	4a46      	ldr	r2, [pc, #280]	; (800218c <main+0x3ec>)
 8002072:	f101 0e0c 	add.w	lr, r1, #12
 8002076:	f8c1 e00c 	str.w	lr, [r1, #12]
  ch.vtlist.delta = (sysinterval_t)-1;
 800207a:	6267      	str	r7, [r4, #36]	; 0x24
 800207c:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
 800207e:	f8c1 e010 	str.w	lr, [r1, #16]
 8002082:	614b      	str	r3, [r1, #20]
  ch.tm.offset = (rtcnt_t)0;
 8002084:	6763      	str	r3, [r4, #116]	; 0x74
  tmp->last       = (rtcnt_t)0;
 8002086:	e9cd 3301 	strd	r3, r3, [sp, #4]
  tmp->n          = (ucnt_t)0;
 800208a:	9303      	str	r3, [sp, #12]
 800208c:	6093      	str	r3, [r2, #8]
  mp->next = NULL;
 800208e:	6153      	str	r3, [r2, #20]
 8002090:	62d3      	str	r3, [r2, #44]	; 0x2c
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8002092:	f102 0310 	add.w	r3, r2, #16
 8002096:	6113      	str	r3, [r2, #16]
  mp->object_size = size;
 8002098:	2314      	movs	r3, #20
  tmp->cumulative = (rttime_t)0;
 800209a:	f04f 0800 	mov.w	r8, #0
 800209e:	f04f 0900 	mov.w	r9, #0
 80020a2:	6193      	str	r3, [r2, #24]
 80020a4:	f102 0328 	add.w	r3, r2, #40	; 0x28
 80020a8:	6293      	str	r3, [r2, #40]	; 0x28
 80020aa:	231c      	movs	r3, #28
 80020ac:	4606      	mov	r6, r0
  tmp->best       = (rtcnt_t)-1;
 80020ae:	9700      	str	r7, [sp, #0]
 80020b0:	f102 0724 	add.w	r7, r2, #36	; 0x24
 80020b4:	6257      	str	r7, [r2, #36]	; 0x24
 80020b6:	f102 0c3c 	add.w	ip, r2, #60	; 0x3c
 80020ba:	f102 0740 	add.w	r7, r2, #64	; 0x40
  mp->provider = provider;
 80020be:	4934      	ldr	r1, [pc, #208]	; (8002190 <main+0x3f0>)
  tmp->cumulative = (rttime_t)0;
 80020c0:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80020c4:	e9c2 2200 	strd	r2, r2, [r2]
 80020c8:	e9c2 c70f 	strd	ip, r7, [r2, #60]	; 0x3c
  mp->object_size = size;
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	f102 0344 	add.w	r3, r2, #68	; 0x44
 80020d2:	6453      	str	r3, [r2, #68]	; 0x44
  mp->align = align;
 80020d4:	61d0      	str	r0, [r2, #28]
 80020d6:	6350      	str	r0, [r2, #52]	; 0x34
  mp->provider = provider;
 80020d8:	6211      	str	r1, [r2, #32]
 80020da:	6391      	str	r1, [r2, #56]	; 0x38
    chTMStartMeasurementX(&tm);
 80020dc:	4668      	mov	r0, sp
 80020de:	f7fe fb7f 	bl	80007e0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 80020e2:	4668      	mov	r0, sp
 80020e4:	f7fe fb54 	bl	8000790 <chTMStopMeasurementX>
  } while (i > 0U);
 80020e8:	3e01      	subs	r6, #1
 80020ea:	d1f7      	bne.n	80020dc <main+0x33c>
  tp->prio      = prio;
 80020ec:	2080      	movs	r0, #128	; 0x80
  tp->refs      = (trefs_t)1;
 80020ee:	2201      	movs	r2, #1
  REG_INSERT(tp);
 80020f0:	4b28      	ldr	r3, [pc, #160]	; (8002194 <main+0x3f4>)
  tp->prio      = prio;
 80020f2:	63a0      	str	r0, [r4, #56]	; 0x38
  tp->realprio  = prio;
 80020f4:	66e0      	str	r0, [r4, #108]	; 0x6c
  ch.tm.offset = tm.best;
 80020f6:	9800      	ldr	r0, [sp, #0]
  REG_INSERT(tp);
 80020f8:	6961      	ldr	r1, [r4, #20]
  tp->name      = name;
 80020fa:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 80021b0 <main+0x410>
 80020fe:	6760      	str	r0, [r4, #116]	; 0x74
  tlp->next = (thread_t *)tlp;
 8002100:	f103 0728 	add.w	r7, r3, #40	; 0x28
  tqp->next = (thread_t *)tqp;
 8002104:	f103 002c 	add.w	r0, r3, #44	; 0x2c
  REG_INSERT(tp);
 8002108:	e9c4 1e11 	strd	r1, lr, [r4, #68]	; 0x44
  tp->flags     = CH_FLAG_MODE_STATIC;
 800210c:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  tp->epending  = (eventmask_t)0;
 8002110:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
  REG_INSERT(tp);
 8002114:	6424      	str	r4, [r4, #64]	; 0x40
  tp->refs      = (trefs_t)1;
 8002116:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
  REG_INSERT(tp);
 800211a:	610b      	str	r3, [r1, #16]
 800211c:	2120      	movs	r1, #32
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800211e:	e9c4 3305 	strd	r3, r3, [r4, #20]
  currp->state = CH_STATE_CURRENT;
 8002122:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  currp->wabase = NULL;
 8002126:	64e6      	str	r6, [r4, #76]	; 0x4c
 8002128:	e9c4 7016 	strd	r7, r0, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
 800212c:	6620      	str	r0, [r4, #96]	; 0x60
 800212e:	f381 8811 	msr	BASEPRI, r1
  __ASM volatile ("cpsie i" : : : "memory");
 8002132:	b662      	cpsie	i
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002134:	f64f 0eff 	movw	lr, #63743	; 0xf8ff
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002138:	f04f 0c10 	mov.w	ip, #16
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b16      	ldr	r3, [pc, #88]	; (8002198 <main+0x3f8>)
  reg_value  =  (reg_value                                   |
 800213e:	4817      	ldr	r0, [pc, #92]	; (800219c <main+0x3fc>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002140:	68df      	ldr	r7, [r3, #12]
 8002142:	e037      	b.n	80021b4 <main+0x414>
 8002144:	40020000 	.word	0x40020000
 8002148:	40012400 	.word	0x40012400
 800214c:	e000e100 	.word	0xe000e100
 8002150:	40021000 	.word	0x40021000
 8002154:	888884b8 	.word	0x888884b8
 8002158:	40011000 	.word	0x40011000
 800215c:	88888844 	.word	0x88888844
 8002160:	20000800 	.word	0x20000800
 8002164:	2000086c 	.word	0x2000086c
 8002168:	08004078 	.word	0x08004078
 800216c:	20000834 	.word	0x20000834
 8002170:	40005400 	.word	0x40005400
 8002174:	08000701 	.word	0x08000701
 8002178:	20000d00 	.word	0x20000d00
 800217c:	40013800 	.word	0x40013800
 8002180:	20000d88 	.word	0x20000d88
 8002184:	20000f28 	.word	0x20000f28
 8002188:	20000f20 	.word	0x20000f20
 800218c:	20000e00 	.word	0x20000e00
 8002190:	08000761 	.word	0x08000761
 8002194:	20000db8 	.word	0x20000db8
 8002198:	e000ed00 	.word	0xe000ed00
 800219c:	05fa0300 	.word	0x05fa0300
 80021a0:	e0042000 	.word	0xe0042000
 80021a4:	200013d0 	.word	0x200013d0
 80021a8:	080006c1 	.word	0x080006c1
 80021ac:	20005000 	.word	0x20005000
 80021b0:	08003f6c 	.word	0x08003f6c
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b4:	ea07 070e 	and.w	r7, r7, lr
  reg_value  =  (reg_value                                   |
 80021b8:	4338      	orrs	r0, r7
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80021ba:	f10e 4e60 	add.w	lr, lr, #3758096384	; 0xe0000000
  SCB->AIRCR =  reg_value;
 80021be:	60d8      	str	r0, [r3, #12]
 80021c0:	f6ae 3e0f 	subw	lr, lr, #2831	; 0xb0f
 80021c4:	f8de 000c 	ldr.w	r0, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80021c8:	4f54      	ldr	r7, [pc, #336]	; (800231c <main+0x57c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80021ca:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 80021ce:	f8ce 000c 	str.w	r0, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80021d2:	6838      	ldr	r0, [r7, #0]
 80021d4:	4310      	orrs	r0, r2
 80021d6:	6038      	str	r0, [r7, #0]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	f883 c01f 	strb.w	ip, [r3, #31]
 80021dc:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80021e0:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
 80021e4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80021e6:	f381 8811 	msr	BASEPRI, r1
  tp->state     = CH_STATE_WTSTART;
 80021ea:	2702      	movs	r7, #2
  tp->wabase = tdp->wbase;
 80021ec:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <main+0x580>)
  REG_INSERT(tp);
 80021ee:	6961      	ldr	r1, [r4, #20]
  tp->prio      = prio;
 80021f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  tp->mtxlist   = NULL;
 80021f4:	e9c3 6232 	strd	r6, r2, [r3, #200]	; 0xc8
  tp->flags     = CH_FLAG_MODE_STATIC;
 80021f8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80021fc:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800234c <main+0x5ac>
 8002200:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002204:	f8df c148 	ldr.w	ip, [pc, #328]	; 8002350 <main+0x5b0>
  tp->name      = name;
 8002208:	4846      	ldr	r0, [pc, #280]	; (8002324 <main+0x584>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800220a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  REG_INSERT(tp);
 800220e:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8002212:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  tp->state     = CH_STATE_WTSTART;
 8002216:	f8a3 70b0 	strh.w	r7, [r3, #176]	; 0xb0
  tp->name      = name;
 800221a:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800221e:	671e      	str	r6, [r3, #112]	; 0x70
  tp->epending  = (eventmask_t)0;
 8002220:	f8c3 60c4 	str.w	r6, [r3, #196]	; 0xc4
  REG_INSERT(tp);
 8002224:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
 8002228:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800222c:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
 8002230:	f8c3 c08c 	str.w	ip, [r3, #140]	; 0x8c
  tlp->next = (thread_t *)tlp;
 8002234:	f103 07b8 	add.w	r7, r3, #184	; 0xb8
  REG_INSERT(tp);
 8002238:	610a      	str	r2, [r1, #16]
  tqp->next = (thread_t *)tqp;
 800223a:	f103 01bc 	add.w	r1, r3, #188	; 0xbc
  chSchWakeupS(tp, MSG_OK);
 800223e:	4610      	mov	r0, r2
 8002240:	e9c3 712e 	strd	r7, r1, [r3, #184]	; 0xb8
  tqp->prev = (thread_t *)tqp;
 8002244:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  REG_INSERT(tp);
 8002248:	6162      	str	r2, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 800224a:	f7fe ffa1 	bl	8001190 <chSchWakeupS.constprop.11>
 800224e:	f386 8811 	msr	BASEPRI, r6
 8002252:	2008      	movs	r0, #8
  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 8002254:	4631      	mov	r1, r6
 8002256:	4633      	mov	r3, r6
 8002258:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    crh <<= 4;
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
    else
      crl |= cfg;
    if ((mask & 0x8000) == 0)
 800225c:	0414      	lsls	r4, r2, #16
    mh <<= 4;
 800225e:	ea4f 1101 	mov.w	r1, r1, lsl #4
    crh <<= 4;
 8002262:	ea4f 1606 	mov.w	r6, r6, lsl #4
    ml <<= 4;
 8002266:	ea4f 1303 	mov.w	r3, r3, lsl #4
      mh |= 0xf;
 800226a:	bf54      	ite	pl
 800226c:	f041 010f 	orrpl.w	r1, r1, #15
    else
      crh |= cfg;
 8002270:	f046 0603 	orrmi.w	r6, r6, #3
  for (i = 0; i < 8; i++) {
 8002274:	3801      	subs	r0, #1
      ml |= 0xf;
 8002276:	f043 030f 	orr.w	r3, r3, #15
    mask <<= 1;
 800227a:	ea4f 0242 	mov.w	r2, r2, lsl #1
  for (i = 0; i < 8; i++) {
 800227e:	d1ed      	bne.n	800225c <main+0x4bc>
  }
  port->CRH = (port->CRH & mh) | crh;
 8002280:	4c29      	ldr	r4, [pc, #164]	; (8002328 <main+0x588>)

        //palSetPadMode(IOPORT2, 6, PAL_MODE_STM32_ALTERNATE_OPENDRAIN); // SCL
        //palSetPadMode(IOPORT2, 7, PAL_MODE_STM32_ALTERNATE_OPENDRAIN); // SDA
        palSetPadMode(IOPORT3, 13, PAL_MODE_OUTPUT_PUSHPULL);         // LED on PC13

        chThdSleepMilliseconds(10);
 8002282:	2014      	movs	r0, #20
 8002284:	6862      	ldr	r2, [r4, #4]
 8002286:	400a      	ands	r2, r1
 8002288:	4316      	orrs	r6, r2
 800228a:	6066      	str	r6, [r4, #4]
  port->CRL = (port->CRL & ml) | crl;
 800228c:	6822      	ldr	r2, [r4, #0]
 800228e:	4013      	ands	r3, r2
 8002290:	6023      	str	r3, [r4, #0]
 8002292:	f7ff f945 	bl	8001520 <chThdSleep>
 8002296:	2220      	movs	r2, #32
 8002298:	f382 8811 	msr	BASEPRI, r2
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800229c:	7a2b      	ldrb	r3, [r5, #8]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d02d      	beq.n	80022fe <main+0x55e>
  u->BRR = fck;
 80022a2:	f240 3ca9 	movw	ip, #937	; 0x3a9
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80022a6:	2740      	movs	r7, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80022a8:	2601      	movs	r6, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80022aa:	f242 142c 	movw	r4, #8492	; 0x212c
  u->SR = 0;
 80022ae:	2200      	movs	r2, #0
    sdp->rxmask = 0xFF;
 80022b0:	20ff      	movs	r0, #255	; 0xff

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 80022b2:	2102      	movs	r1, #2
  USART_TypeDef *u = sdp->usart;
 80022b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  u->BRR = fck;
 80022b6:	f8c3 c008 	str.w	ip, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80022ba:	611f      	str	r7, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80022bc:	615e      	str	r6, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80022be:	60dc      	str	r4, [r3, #12]
  u->SR = 0;
 80022c0:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80022c2:	681c      	ldr	r4, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80022c4:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 80022c6:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 80022ca:	7229      	strb	r1, [r5, #8]
 80022cc:	f382 8811 	msr	BASEPRI, r2
        sdStart(&SD1, NULL);

        // Blink Thread
        chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO + 1, Thread1, NULL);
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <main+0x58c>)
 80022d2:	2281      	movs	r2, #129	; 0x81
 80022d4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80022d8:	4815      	ldr	r0, [pc, #84]	; (8002330 <main+0x590>)
 80022da:	f7fe ff89 	bl	80011f0 <chThdCreateStatic.constprop.6>
        chprintf(chp, "Hello world\n\r");
 80022de:	4915      	ldr	r1, [pc, #84]	; (8002334 <main+0x594>)
 80022e0:	4815      	ldr	r0, [pc, #84]	; (8002338 <main+0x598>)
 80022e2:	f7ff fa45 	bl	8001770 <chprintf.constprop.3>
        // SSD1306 Thread
        chThdCreateStatic(waOledDisplay, sizeof(waOledDisplay), NORMALPRIO, OledDisplay, NULL);
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <main+0x59c>)
 80022e8:	2280      	movs	r2, #128	; 0x80
 80022ea:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 80022ee:	4814      	ldr	r0, [pc, #80]	; (8002340 <main+0x5a0>)
 80022f0:	f7fe ff7e 	bl	80011f0 <chThdCreateStatic.constprop.6>

        while (true)
        {
                chThdSleepMilliseconds(500);
 80022f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022f8:	f7ff f912 	bl	8001520 <chThdSleep>
 80022fc:	e7fa      	b.n	80022f4 <main+0x554>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80022fe:	24c0      	movs	r4, #192	; 0xc0
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
 8002300:	4910      	ldr	r1, [pc, #64]	; (8002344 <main+0x5a4>)
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <main+0x5a8>)
 8002304:	6988      	ldr	r0, [r1, #24]
 8002306:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800230a:	6188      	str	r0, [r1, #24]
 800230c:	6989      	ldr	r1, [r1, #24]
 800230e:	f883 4325 	strb.w	r4, [r3, #805]	; 0x325
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002312:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	e7c3      	b.n	80022a2 <main+0x502>
 800231a:	bf00      	nop
 800231c:	e0001000 	.word	0xe0001000
 8002320:	20000e48 	.word	0x20000e48
 8002324:	08003fdc 	.word	0x08003fdc
 8002328:	40011000 	.word	0x40011000
 800232c:	08001541 	.word	0x08001541
 8002330:	20001288 	.word	0x20001288
 8002334:	08003f84 	.word	0x08003f84
 8002338:	2000086c 	.word	0x2000086c
 800233c:	08002601 	.word	0x08002601
 8002340:	20000fc0 	.word	0x20000fc0
 8002344:	40021000 	.word	0x40021000
 8002348:	e000e100 	.word	0xe000e100
 800234c:	080008f1 	.word	0x080008f1
 8002350:	08000251 	.word	0x08000251
	...

08002360 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002360:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8002364:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002366:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800236a:	2300      	movs	r3, #0
 800236c:	f383 8811 	msr	BASEPRI, r3
}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
	...

08002380 <chThdExit>:
void chThdExit(msg_t msg) {
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	2220      	movs	r2, #32
 8002384:	4603      	mov	r3, r0
 8002386:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800238a:	4a10      	ldr	r2, [pc, #64]	; (80023cc <chThdExit+0x4c>)
 800238c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 800238e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8002390:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8002394:	42a8      	cmp	r0, r5
  tp->u.exitcode = msg;
 8002396:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8002398:	d006      	beq.n	80023a8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 800239a:	6803      	ldr	r3, [r0, #0]
 800239c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800239e:	f7fe fa5f 	bl	8000860 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 80023a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 80023a4:	42a8      	cmp	r0, r5
 80023a6:	d1f8      	bne.n	800239a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 80023a8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80023ac:	b943      	cbnz	r3, 80023c0 <chThdExit+0x40>
 80023ae:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80023b2:	079b      	lsls	r3, r3, #30
 80023b4:	d104      	bne.n	80023c0 <chThdExit+0x40>
    REG_REMOVE(tp);
 80023b6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80023ba:	611a      	str	r2, [r3, #16]
 80023bc:	6922      	ldr	r2, [r4, #16]
 80023be:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 80023c0:	200f      	movs	r0, #15
}
 80023c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80023c6:	f7fe bf4b 	b.w	8001260 <chSchGoSleepS>
 80023ca:	bf00      	nop
 80023cc:	20000d88 	.word	0x20000d88

080023d0 <chSchDoReschedule>:
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80023d0:	2101      	movs	r1, #1
void chSchDoRescheduleAhead(void) {
 80023d2:	b430      	push	{r4, r5}
  tp->state = CH_STATE_READY;
 80023d4:	2500      	movs	r5, #0
  thread_t *otp = currp;
 80023d6:	4a0d      	ldr	r2, [pc, #52]	; (800240c <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 80023d8:	6810      	ldr	r0, [r2, #0]
 80023da:	6994      	ldr	r4, [r2, #24]
  tqp->next             = tp->queue.next;
 80023dc:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80023de:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 80023e0:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80023e4:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 80023e6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80023e8:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 80023ea:	f884 5020 	strb.w	r5, [r4, #32]
 80023ee:	e000      	b.n	80023f2 <chSchDoReschedule+0x22>
 80023f0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	4291      	cmp	r1, r2
 80023f6:	d3fb      	bcc.n	80023f0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 80023f8:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80023fa:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 80023fc:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8002400:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002402:	605c      	str	r4, [r3, #4]
}
 8002404:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8002406:	f7fd bf1b 	b.w	8000240 <_port_switch>
 800240a:	bf00      	nop
 800240c:	20000d88 	.word	0x20000d88

08002410 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8002410:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8002412:	4d1c      	ldr	r5, [pc, #112]	; (8002484 <chMtxUnlock+0x74>)
 8002414:	2320      	movs	r3, #32
 8002416:	69ae      	ldr	r6, [r5, #24]
 8002418:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 800241c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 800241e:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8002420:	4284      	cmp	r4, r0
    ctp->mtxlist = mp->next;
 8002422:	63b3      	str	r3, [r6, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8002424:	d027      	beq.n	8002476 <chMtxUnlock+0x66>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8002426:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8002428:	b14b      	cbz	r3, 800243e <chMtxUnlock+0x2e>
 800242a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800242c:	4293      	cmp	r3, r2
 800242e:	d003      	beq.n	8002438 <chMtxUnlock+0x28>
 8002430:	6892      	ldr	r2, [r2, #8]
 8002432:	4291      	cmp	r1, r2
 8002434:	bf38      	it	cc
 8002436:	4611      	movcc	r1, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8002438:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f5      	bne.n	800242a <chMtxUnlock+0x1a>
 800243e:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
 8002440:	6822      	ldr	r2, [r4, #0]
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 8002442:	60b1      	str	r1, [r6, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8002444:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002446:	6002      	str	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002448:	6050      	str	r0, [r2, #4]
 800244a:	e9c3 4102 	strd	r4, r1, [r3, #8]

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800244e:	4620      	mov	r0, r4
      tp->mtxlist = mp;
 8002450:	63a3      	str	r3, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 8002452:	f7fe fa05 	bl	8000860 <chSchReadyI>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 8002456:	682a      	ldr	r2, [r5, #0]
 8002458:	69ab      	ldr	r3, [r5, #24]
  if (chSchIsRescRequiredI()) {
 800245a:	6892      	ldr	r2, [r2, #8]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	d803      	bhi.n	800246a <chMtxUnlock+0x5a>
 8002462:	2300      	movs	r3, #0
 8002464:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 8002468:	bd70      	pop	{r4, r5, r6, pc}
    chSchDoRescheduleAhead();
 800246a:	f7ff ffb1 	bl	80023d0 <chSchDoReschedule>
 800246e:	2300      	movs	r3, #0
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 8002476:	2300      	movs	r3, #0
 8002478:	60a3      	str	r3, [r4, #8]
 800247a:	2300      	movs	r3, #0
 800247c:	f383 8811 	msr	BASEPRI, r3
}
 8002480:	bd70      	pop	{r4, r5, r6, pc}
 8002482:	bf00      	nop
 8002484:	20000d88 	.word	0x20000d88
	...

08002490 <wrCmd>:
static msg_t wrCmd(void *ip, uint8_t cmd) {
 8002490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t txbuf[] = { 0x00, cmd };
 8002494:	2600      	movs	r6, #0
static msg_t wrCmd(void *ip, uint8_t cmd) {
 8002496:	b082      	sub	sp, #8
  i2cAcquireBus(drvp->config->i2cp);
 8002498:	6883      	ldr	r3, [r0, #8]
  uint8_t txbuf[] = { 0x00, cmd };
 800249a:	f88d 1005 	strb.w	r1, [sp, #5]
 800249e:	f88d 6004 	strb.w	r6, [sp, #4]
static msg_t wrCmd(void *ip, uint8_t cmd) {
 80024a2:	4604      	mov	r4, r0
 */
void i2cAcquireBus(I2CDriver *i2cp) {

  osalDbgCheck(i2cp != NULL);

  osalMutexLock(&i2cp->mutex);
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	2720      	movs	r7, #32
 80024a8:	300c      	adds	r0, #12
 80024aa:	f387 8811 	msr	BASEPRI, r7
  chMtxLockS(mp);
 80024ae:	f7ff f8e7 	bl	8001680 <chMtxLockS>
 80024b2:	f386 8811 	msr	BASEPRI, r6
  i2cStart(drvp->config->i2cp, drvp->config->i2ccfg);
 80024b6:	68a3      	ldr	r3, [r4, #8]
 80024b8:	e9d3 5300 	ldrd	r5, r3, [r3]
 80024bc:	f387 8811 	msr	BASEPRI, r7
  i2cp->state = I2C_READY;
 80024c0:	f04f 0802 	mov.w	r8, #2
  i2cp->config = config;
 80024c4:	606b      	str	r3, [r5, #4]
  i2c_lld_start(i2cp);
 80024c6:	4628      	mov	r0, r5
 80024c8:	f7fe fa1a 	bl	8000900 <i2c_lld_start>
  i2cp->state = I2C_READY;
 80024cc:	f885 8000 	strb.w	r8, [r5]
 80024d0:	f386 8811 	msr	BASEPRI, r6
  ret = i2cMasterTransmitTimeout(drvp->config->i2cp, drvp->config->sad,
 80024d4:	68a3      	ldr	r3, [r4, #8]
 80024d6:	681d      	ldr	r5, [r3, #0]
 80024d8:	7a19      	ldrb	r1, [r3, #8]
 80024da:	f387 8811 	msr	BASEPRI, r7
  i2cp->state = I2C_ACTIVE_TX;
 80024de:	2303      	movs	r3, #3
  i2cp->errors = I2C_NO_ERROR;
 80024e0:	60ae      	str	r6, [r5, #8]
  i2cp->state = I2C_ACTIVE_TX;
 80024e2:	702b      	strb	r3, [r5, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 80024e4:	aa01      	add	r2, sp, #4
 80024e6:	4643      	mov	r3, r8
 80024e8:	4628      	mov	r0, r5
 80024ea:	f7ff f849 	bl	8001580 <i2c_lld_master_transmit_timeout.constprop.39>
 80024ee:	4606      	mov	r6, r0
  if (rdymsg == MSG_TIMEOUT) {
 80024f0:	3001      	adds	r0, #1
    i2cp->state = I2C_LOCKED;
 80024f2:	bf0a      	itet	eq
 80024f4:	2305      	moveq	r3, #5
    i2cp->state = I2C_READY;
 80024f6:	f885 8000 	strbne.w	r8, [r5]
    i2cp->state = I2C_LOCKED;
 80024fa:	702b      	strbeq	r3, [r5, #0]
 80024fc:	2300      	movs	r3, #0
 80024fe:	f383 8811 	msr	BASEPRI, r3
  i2cReleaseBus(drvp->config->i2cp);
 8002502:	68a3      	ldr	r3, [r4, #8]
 */
void i2cReleaseBus(I2CDriver *i2cp) {

  osalDbgCheck(i2cp != NULL);

  osalMutexUnlock(&i2cp->mutex);
 8002504:	6818      	ldr	r0, [r3, #0]
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8002506:	300c      	adds	r0, #12
 8002508:	f7ff ff82 	bl	8002410 <chMtxUnlock>
}
 800250c:	4630      	mov	r0, r6
 800250e:	b002      	add	sp, #8
 8002510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002520 <setDisplay>:

static void setDisplay(void *ip, uint8_t on) {
 8002520:	b538      	push	{r3, r4, r5, lr}
 8002522:	460d      	mov	r5, r1
 8002524:	4604      	mov	r4, r0
  wrCmd(ip, 0x8D);
 8002526:	218d      	movs	r1, #141	; 0x8d
 8002528:	f7ff ffb2 	bl	8002490 <wrCmd>
  wrCmd(ip, on ? 0x14 : 0x10);
 800252c:	2d00      	cmp	r5, #0
 800252e:	bf14      	ite	ne
 8002530:	2114      	movne	r1, #20
 8002532:	2110      	moveq	r1, #16
 8002534:	4620      	mov	r0, r4
 8002536:	f7ff ffab 	bl	8002490 <wrCmd>
  wrCmd(ip, 0xAE);
 800253a:	4620      	mov	r0, r4
}
 800253c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  wrCmd(ip, 0xAE);
 8002540:	21ae      	movs	r1, #174	; 0xae
 8002542:	f7ff bfa5 	b.w	8002490 <wrCmd>
 8002546:	bf00      	nop
	...

08002550 <updateScreen>:
static void updateScreen(void *ip) {
 8002550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002554:	4604      	mov	r4, r0
 8002556:	25b0      	movs	r5, #176	; 0xb0
    wrCmd(drvp, 0x00);
 8002558:	f04f 0800 	mov.w	r8, #0
 800255c:	f04f 0920 	mov.w	r9, #32
 8002560:	f100 070f 	add.w	r7, r0, #15
 8002564:	f200 4b17 	addw	fp, r0, #1047	; 0x417
    wrCmd(drvp, 0xB0 + idx);
 8002568:	4629      	mov	r1, r5
 800256a:	4620      	mov	r0, r4
 800256c:	f7ff ff90 	bl	8002490 <wrCmd>
    wrCmd(drvp, 0x00);
 8002570:	2100      	movs	r1, #0
 8002572:	4620      	mov	r0, r4
 8002574:	f7ff ff8c 	bl	8002490 <wrCmd>
    wrCmd(drvp, 0x10);
 8002578:	2110      	movs	r1, #16
 800257a:	4620      	mov	r0, r4
 800257c:	f7ff ff88 	bl	8002490 <wrCmd>
  i2cAcquireBus(drvp->config->i2cp);
 8002580:	68a3      	ldr	r3, [r4, #8]
  osalMutexLock(&i2cp->mutex);
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	300c      	adds	r0, #12
 8002586:	f389 8811 	msr	BASEPRI, r9
 800258a:	f7ff f879 	bl	8001680 <chMtxLockS>
 800258e:	f388 8811 	msr	BASEPRI, r8
  i2cStart(drvp->config->i2cp, drvp->config->i2ccfg);
 8002592:	68a3      	ldr	r3, [r4, #8]
 8002594:	e9d3 6300 	ldrd	r6, r3, [r3]
 8002598:	f389 8811 	msr	BASEPRI, r9
  i2cp->state = I2C_READY;
 800259c:	f04f 0a02 	mov.w	sl, #2
  i2cp->config = config;
 80025a0:	6073      	str	r3, [r6, #4]
  i2c_lld_start(i2cp);
 80025a2:	4630      	mov	r0, r6
 80025a4:	f7fe f9ac 	bl	8000900 <i2c_lld_start>
  i2cp->state = I2C_READY;
 80025a8:	f886 a000 	strb.w	sl, [r6]
 80025ac:	f388 8811 	msr	BASEPRI, r8
  ret = i2cMasterTransmitTimeout(drvp->config->i2cp, drvp->config->sad,
 80025b0:	68a3      	ldr	r3, [r4, #8]
 80025b2:	681e      	ldr	r6, [r3, #0]
 80025b4:	7a19      	ldrb	r1, [r3, #8]
 80025b6:	f389 8811 	msr	BASEPRI, r9
  i2cp->state = I2C_ACTIVE_TX;
 80025ba:	2303      	movs	r3, #3
  i2cp->errors = I2C_NO_ERROR;
 80025bc:	f8c6 8008 	str.w	r8, [r6, #8]
  i2cp->state = I2C_ACTIVE_TX;
 80025c0:	7033      	strb	r3, [r6, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 80025c2:	463a      	mov	r2, r7
 80025c4:	2381      	movs	r3, #129	; 0x81
 80025c6:	4630      	mov	r0, r6
 80025c8:	f7fe ffda 	bl	8001580 <i2c_lld_master_transmit_timeout.constprop.39>
  if (rdymsg == MSG_TIMEOUT) {
 80025cc:	3001      	adds	r0, #1
    i2cp->state = I2C_LOCKED;
 80025ce:	bf0a      	itet	eq
 80025d0:	2305      	moveq	r3, #5
    i2cp->state = I2C_READY;
 80025d2:	f886 a000 	strbne.w	sl, [r6]
    i2cp->state = I2C_LOCKED;
 80025d6:	7033      	strbeq	r3, [r6, #0]
 80025d8:	f388 8811 	msr	BASEPRI, r8
  i2cReleaseBus(drvp->config->i2cp);
 80025dc:	68a3      	ldr	r3, [r4, #8]
 80025de:	3781      	adds	r7, #129	; 0x81
  osalMutexUnlock(&i2cp->mutex);
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	3501      	adds	r5, #1
 80025e4:	300c      	adds	r0, #12
 80025e6:	f7ff ff13 	bl	8002410 <chMtxUnlock>
  for (idx = 0; idx < 8; idx++) {
 80025ea:	45bb      	cmp	fp, r7
 80025ec:	b2ed      	uxtb	r5, r5
 80025ee:	d1bb      	bne.n	8002568 <updateScreen+0x18>
}
 80025f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002600 <OledDisplay>:
{
 8002600:	b580      	push	{r7, lr}

void ssd1306ObjectInit(SSD1306Driver *devp) {
  devp->vmt = &vmt_ssd1306;
  devp->config = NULL;

  devp->state = SSD1306_STOP;
 8002602:	2701      	movs	r7, #1
 8002604:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <OledDisplay+0xfc>)
 8002606:	b088      	sub	sp, #32
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	4a3d      	ldr	r2, [pc, #244]	; (8002700 <OledDisplay+0x100>)
}

void ssd1306Start(SSD1306Driver *devp, const SSD1306Config *config) {
  const uint8_t cmds[] = {
 800260c:	4c3d      	ldr	r4, [pc, #244]	; (8002704 <OledDisplay+0x104>)
 800260e:	ad01      	add	r5, sp, #4
 8002610:	619a      	str	r2, [r3, #24]
 8002612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002616:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  devp->vmt = &vmt_ssd1306;
 800261a:	4e3b      	ldr	r6, [pc, #236]	; (8002708 <OledDisplay+0x108>)
 800261c:	4c3b      	ldr	r4, [pc, #236]	; (800270c <OledDisplay+0x10c>)
  chDbgCheck((devp != NULL) && (config != NULL));

  chDbgAssert((devp->state == SSD1306_STOP) || (devp->state == SSD1306_READY),
              "ssd1306Start(), invalid state");

  devp->config = config;
 800261e:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <OledDisplay+0x110>)
  const uint8_t cmds[] = {
 8002620:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  // A little delay
  chThdSleepMilliseconds(100);
 8002624:	20c8      	movs	r0, #200	; 0xc8
  devp->state = SSD1306_STOP;
 8002626:	7127      	strb	r7, [r4, #4]
  devp->vmt = &vmt_ssd1306;
 8002628:	6026      	str	r6, [r4, #0]
  devp->config = config;
 800262a:	60a3      	str	r3, [r4, #8]

  // OLED initialize
  for (idx = 0; idx < sizeof(cmds) / sizeof(cmds[0]); idx++) {
    wrCmd(devp, cmds[idx]);
 800262c:	4627      	mov	r7, r4
  chThdSleepMilliseconds(100);
 800262e:	f7fe ff77 	bl	8001520 <chThdSleep>
 8002632:	f10d 0503 	add.w	r5, sp, #3
 8002636:	f10d 061f 	add.w	r6, sp, #31
    wrCmd(devp, cmds[idx]);
 800263a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800263e:	4638      	mov	r0, r7
 8002640:	f7ff ff26 	bl	8002490 <wrCmd>
  for (idx = 0; idx < sizeof(cmds) / sizeof(cmds[0]); idx++) {
 8002644:	42b5      	cmp	r5, r6
 8002646:	d1f8      	bne.n	800263a <OledDisplay+0x3a>
    drvp->fb[SSD1306_WIDTH_FIXED * idx] = 0x40;
 8002648:	2740      	movs	r7, #64	; 0x40
 800264a:	4d32      	ldr	r5, [pc, #200]	; (8002714 <OledDisplay+0x114>)
 800264c:	f505 6681 	add.w	r6, r5, #1032	; 0x408
 8002650:	f805 7c01 	strb.w	r7, [r5, #-1]
    memset(&drvp->fb[SSD1306_WIDTH_FIXED * idx + 1],
 8002654:	4628      	mov	r0, r5
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	21ff      	movs	r1, #255	; 0xff
 800265a:	3581      	adds	r5, #129	; 0x81
 800265c:	f7fd fe7c 	bl	8000358 <memset>
  for (idx = 0; idx < 8; idx++) {
 8002660:	42b5      	cmp	r5, r6
 8002662:	d1f5      	bne.n	8002650 <OledDisplay+0x50>

  // Clear screen
  fillScreen(devp, SSD1306_COLOR_WHITE);

  // Update screen
  updateScreen(devp);
 8002664:	4829      	ldr	r0, [pc, #164]	; (800270c <OledDisplay+0x10c>)
 8002666:	f7ff ff73 	bl	8002550 <updateScreen>

  // Set default value
  devp->x = 0;
 800266a:	2100      	movs	r1, #0
  devp->y = 0;

  devp->state = SSD1306_READY;
 800266c:	2202      	movs	r2, #2
        ssd1306FillScreen(&SSD1306D1, 0x00);
 800266e:	6823      	ldr	r3, [r4, #0]
  devp->x = 0;
 8002670:	81a1      	strh	r1, [r4, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
  devp->state = SSD1306_READY;
 8002674:	7122      	strb	r2, [r4, #4]
 8002676:	4825      	ldr	r0, [pc, #148]	; (800270c <OledDisplay+0x10c>)
 8002678:	4798      	blx	r3
                ssd1306GotoXy(&SSD1306D1, 0, 1);
 800267a:	4d24      	ldr	r5, [pc, #144]	; (800270c <OledDisplay+0x10c>)
                ssd1306Puts(&SSD1306D1, snum0, &ssd1306_font_11x18, SSD1306_COLOR_WHITE);
 800267c:	4e26      	ldr	r6, [pc, #152]	; (8002718 <OledDisplay+0x118>)
 800267e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002724 <OledDisplay+0x124>
                ssd1306GotoXy(&SSD1306D1, 0, 1);
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	4628      	mov	r0, r5
 8002686:	2201      	movs	r2, #1
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2100      	movs	r1, #0
 800268c:	4798      	blx	r3
                ssd1306Puts(&SSD1306D1, snum0, &ssd1306_font_11x18, SSD1306_COLOR_WHITE);
 800268e:	6822      	ldr	r2, [r4, #0]
 8002690:	4641      	mov	r1, r8
 8002692:	6997      	ldr	r7, [r2, #24]
 8002694:	2301      	movs	r3, #1
 8002696:	4632      	mov	r2, r6
 8002698:	4628      	mov	r0, r5
 800269a:	47b8      	blx	r7
                ssd1306UpdateScreen(&SSD1306D1);
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	4628      	mov	r0, r5
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4798      	blx	r3
                chThdSleepMilliseconds(100);
 80026a4:	20c8      	movs	r0, #200	; 0xc8
 80026a6:	f7fe ff3b 	bl	8001520 <chThdSleep>
                ssd1306GotoXy(&SSD1306D1, 0, 19);
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	4628      	mov	r0, r5
 80026ae:	2213      	movs	r2, #19
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2100      	movs	r1, #0
 80026b4:	4798      	blx	r3
                ssd1306Puts(&SSD1306D1, snum1, &ssd1306_font_11x18, SSD1306_COLOR_WHITE);
 80026b6:	6822      	ldr	r2, [r4, #0]
 80026b8:	4918      	ldr	r1, [pc, #96]	; (800271c <OledDisplay+0x11c>)
 80026ba:	6997      	ldr	r7, [r2, #24]
 80026bc:	2301      	movs	r3, #1
 80026be:	4632      	mov	r2, r6
 80026c0:	4628      	mov	r0, r5
 80026c2:	47b8      	blx	r7
                ssd1306UpdateScreen(&SSD1306D1);
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	4628      	mov	r0, r5
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4798      	blx	r3
                chThdSleepMilliseconds(100);
 80026cc:	20c8      	movs	r0, #200	; 0xc8
 80026ce:	f7fe ff27 	bl	8001520 <chThdSleep>
                ssd1306GotoXy(&SSD1306D1, 0, 39);
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	4628      	mov	r0, r5
 80026d6:	2227      	movs	r2, #39	; 0x27
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2100      	movs	r1, #0
 80026dc:	4798      	blx	r3
                ssd1306Puts(&SSD1306D1, ionnum, &ssd1306_font_11x18, SSD1306_COLOR_WHITE);
 80026de:	6822      	ldr	r2, [r4, #0]
 80026e0:	490f      	ldr	r1, [pc, #60]	; (8002720 <OledDisplay+0x120>)
 80026e2:	6997      	ldr	r7, [r2, #24]
 80026e4:	2301      	movs	r3, #1
 80026e6:	4632      	mov	r2, r6
 80026e8:	4628      	mov	r0, r5
 80026ea:	47b8      	blx	r7
                ssd1306UpdateScreen(&SSD1306D1);
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	4628      	mov	r0, r5
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4798      	blx	r3
                chThdSleepMilliseconds(100);
 80026f4:	20c8      	movs	r0, #200	; 0xc8
 80026f6:	f7fe ff13 	bl	8001520 <chThdSleep>
 80026fa:	e7c2      	b.n	8002682 <OledDisplay+0x82>
 80026fc:	20000d88 	.word	0x20000d88
 8002700:	08003edc 	.word	0x08003edc
 8002704:	08003164 	.word	0x08003164
 8002708:	080040a0 	.word	0x080040a0
 800270c:	200008e8 	.word	0x200008e8
 8002710:	0800406c 	.word	0x0800406c
 8002714:	200008f8 	.word	0x200008f8
 8002718:	08004064 	.word	0x08004064
 800271c:	20000fb4 	.word	0x20000fb4
 8002720:	20000f9c 	.word	0x20000f9c
 8002724:	20000fa8 	.word	0x20000fa8
	...

08002730 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <__early_init+0x70>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002732:	461a      	mov	r2, r3
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002734:	6819      	ldr	r1, [r3, #0]
 8002736:	f041 0101 	orr.w	r1, r1, #1
 800273a:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800273c:	6813      	ldr	r3, [r2, #0]
 800273e:	0798      	lsls	r0, r3, #30
 8002740:	d5fc      	bpl.n	800273c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002742:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002744:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002746:	4916      	ldr	r1, [pc, #88]	; (80027a0 <__early_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002748:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800274c:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800274e:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002750:	684b      	ldr	r3, [r1, #4]
 8002752:	f013 0f0c 	tst.w	r3, #12
 8002756:	d1fb      	bne.n	8002750 <__early_init+0x20>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8002758:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800275a:	4a11      	ldr	r2, [pc, #68]	; (80027a0 <__early_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 800275c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002760:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8002762:	6813      	ldr	r3, [r2, #0]
 8002764:	0399      	lsls	r1, r3, #14
 8002766:	d5fc      	bpl.n	8002762 <__early_init+0x32>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002768:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800276a:	490d      	ldr	r1, [pc, #52]	; (80027a0 <__early_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800276c:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002770:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8002772:	6813      	ldr	r3, [r2, #0]
 8002774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002778:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800277a:	680b      	ldr	r3, [r1, #0]
 800277c:	019b      	lsls	r3, r3, #6
 800277e:	d5fc      	bpl.n	800277a <__early_init+0x4a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8002780:	2212      	movs	r2, #18
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <__early_init+0x74>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8002784:	4808      	ldr	r0, [pc, #32]	; (80027a8 <__early_init+0x78>)
 8002786:	6048      	str	r0, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 8002788:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800278a:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <__early_init+0x70>)
  RCC->CFGR |= STM32_SW;
 800278e:	f043 0302 	orr.w	r3, r3, #2
 8002792:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002794:	6853      	ldr	r3, [r2, #4]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	d1fa      	bne.n	8002794 <__early_init+0x64>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 800279e:	4770      	bx	lr
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40022000 	.word	0x40022000
 80027a8:	001d6400 	.word	0x001d6400
 80027ac:	00000000 	.word	0x00000000

080027b0 <Vector90>:
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80027b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  istr = STM32_USB->ISTR;
 80027b4:	4b9e      	ldr	r3, [pc, #632]	; (8002a30 <Vector90+0x280>)
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80027b6:	b085      	sub	sp, #20
  istr = STM32_USB->ISTR;
 80027b8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (istr & ISTR_RESET) {
 80027ba:	0562      	lsls	r2, r4, #21
 80027bc:	f100 80ad 	bmi.w	800291a <Vector90+0x16a>
  if (istr & ISTR_SUSP) {
 80027c0:	0526      	lsls	r6, r4, #20
 80027c2:	f100 8119 	bmi.w	80029f8 <Vector90+0x248>
  if (istr & ISTR_WKUP) {
 80027c6:	04e5      	lsls	r5, r4, #19
 80027c8:	d508      	bpl.n	80027dc <Vector90+0x2c>
    uint32_t fnr = STM32_USB->FNR;
 80027ca:	4b99      	ldr	r3, [pc, #612]	; (8002a30 <Vector90+0x280>)
 80027cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 80027ce:	0410      	lsls	r0, r2, #16
 80027d0:	f140 81a0 	bpl.w	8002b14 <Vector90+0x364>
    STM32_USB->ISTR = ~ISTR_WKUP;
 80027d4:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 80027d8:	4b95      	ldr	r3, [pc, #596]	; (8002a30 <Vector90+0x280>)
 80027da:	645a      	str	r2, [r3, #68]	; 0x44
  if (istr & ISTR_SOF) {
 80027dc:	05a1      	lsls	r1, r4, #22
 80027de:	d50b      	bpl.n	80027f8 <Vector90+0x48>
    _usb_isr_invoke_sof_cb(usbp);
 80027e0:	f8df a250 	ldr.w	sl, [pc, #592]	; 8002a34 <Vector90+0x284>
 80027e4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	b10b      	cbz	r3, 80027f0 <Vector90+0x40>
 80027ec:	4650      	mov	r0, sl
 80027ee:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 80027f0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80027f4:	4b8e      	ldr	r3, [pc, #568]	; (8002a30 <Vector90+0x280>)
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44
  while (istr & ISTR_CTR) {
 80027f8:	0423      	lsls	r3, r4, #16
 80027fa:	d57a      	bpl.n	80028f2 <Vector90+0x142>
 80027fc:	f8df a234 	ldr.w	sl, [pc, #564]	; 8002a34 <Vector90+0x284>
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002800:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8002a30 <Vector90+0x280>
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
 8002804:	f004 040f 	and.w	r4, r4, #15
 8002808:	00a5      	lsls	r5, r4, #2
 800280a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800280e:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
  uint32_t epr = STM32_USB->EPR[ep];
 8002812:	f8d5 8000 	ldr.w	r8, [r5]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8002816:	1ca6      	adds	r6, r4, #2
 8002818:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
  if (epr & EPR_CTR_TX) {
 800281c:	f018 0f80 	tst.w	r8, #128	; 0x80
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8002820:	685f      	ldr	r7, [r3, #4]
  if (epr & EPR_CTR_TX) {
 8002822:	d04c      	beq.n	80028be <Vector90+0x10e>
    USBInEndpointState *isp = epcp->in_state;
 8002824:	f8d7 c014 	ldr.w	ip, [r7, #20]
    EPR_CLEAR_CTR_TX(ep);
 8002828:	682a      	ldr	r2, [r5, #0]
    isp->txcnt += isp->txlast;
 800282a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800282e:	f8dc 100c 	ldr.w	r1, [ip, #12]
    n = isp->txsize - isp->txcnt;
 8002832:	f8dc 0000 	ldr.w	r0, [ip]
    EPR_CLEAR_CTR_TX(ep);
 8002836:	f422 4278 	bic.w	r2, r2, #63488	; 0xf800
    isp->txcnt += isp->txlast;
 800283a:	440b      	add	r3, r1
    EPR_CLEAR_CTR_TX(ep);
 800283c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    if (n > 0) {
 8002844:	1ac0      	subs	r0, r0, r3
    EPR_CLEAR_CTR_TX(ep);
 8002846:	602a      	str	r2, [r5, #0]
    isp->txcnt += isp->txlast;
 8002848:	f8cc 3004 	str.w	r3, [ip, #4]
    if (n > 0) {
 800284c:	d056      	beq.n	80028fc <Vector90+0x14c>
      if (n > epcp->in_maxsize)
 800284e:	8a3b      	ldrh	r3, [r7, #16]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002850:	ea4f 1904 	mov.w	r9, r4, lsl #4
 8002854:	4298      	cmp	r0, r3
 8002856:	bf28      	it	cs
 8002858:	4618      	movcs	r0, r3
      isp->txlast = n;
 800285a:	f8cc 000c 	str.w	r0, [ip, #12]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800285e:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
      isp->txbuf += isp->txlast;
 8002862:	f8dc 3008 	ldr.w	r3, [ip, #8]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002866:	f102 4e80 	add.w	lr, r2, #1073741824	; 0x40000000
 800286a:	f50e 4ec0 	add.w	lr, lr, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800286e:	f85e 2009 	ldr.w	r2, [lr, r9]
      isp->txbuf += isp->txlast;
 8002872:	4419      	add	r1, r3
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002874:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002878:	44ce      	add	lr, r9
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800287a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
      isp->txbuf += isp->txlast;
 800287e:	f8cc 1008 	str.w	r1, [ip, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002882:	0052      	lsls	r2, r2, #1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8002884:	f8ce 0004 	str.w	r0, [lr, #4]
  while (i > 0) {
 8002888:	b168      	cbz	r0, 80028a6 <Vector90+0xf6>
 800288a:	3801      	subs	r0, #1
 800288c:	0840      	lsrs	r0, r0, #1
 800288e:	1d13      	adds	r3, r2, #4
 8002890:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002894:	4684      	mov	ip, r0
 8002896:	e000      	b.n	800289a <Vector90+0xea>
 8002898:	3304      	adds	r3, #4
    w |= *buf++ << 8;
 800289a:	f831 0b02 	ldrh.w	r0, [r1], #2
  while (i > 0) {
 800289e:	459c      	cmp	ip, r3
    *pmap++ = (stm32_usb_pma_t)w;
 80028a0:	6010      	str	r0, [r2, #0]
 80028a2:	461a      	mov	r2, r3
  while (i > 0) {
 80028a4:	d1f8      	bne.n	8002898 <Vector90+0xe8>
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80028a6:	682b      	ldr	r3, [r5, #0]
 80028a8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80028ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80028b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028bc:	602b      	str	r3, [r5, #0]
  if (epr & EPR_CTR_RX) {
 80028be:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 80028c2:	d012      	beq.n	80028ea <Vector90+0x13a>
    EPR_CLEAR_CTR_RX(ep);
 80028c4:	682b      	ldr	r3, [r5, #0]
    if (epr & EPR_SETUP) {
 80028c6:	f418 6f00 	tst.w	r8, #2048	; 0x800
    EPR_CLEAR_CTR_RX(ep);
 80028ca:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80028ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d6:	b2e1      	uxtb	r1, r4
 80028d8:	602b      	str	r3, [r5, #0]
    if (epr & EPR_SETUP) {
 80028da:	f000 80af 	beq.w	8002a3c <Vector90+0x28c>
      _usb_isr_invoke_setup_cb(usbp, ep);
 80028de:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 80028e2:	6873      	ldr	r3, [r6, #4]
 80028e4:	4853      	ldr	r0, [pc, #332]	; (8002a34 <Vector90+0x284>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4798      	blx	r3
    istr = STM32_USB->ISTR;
 80028ea:	f8db 4044 	ldr.w	r4, [fp, #68]	; 0x44
  while (istr & ISTR_CTR) {
 80028ee:	0422      	lsls	r2, r4, #16
 80028f0:	d488      	bmi.n	8002804 <Vector90+0x54>
}
 80028f2:	b005      	add	sp, #20
 80028f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 80028f8:	f7fd bf0a 	b.w	8000710 <_port_irq_epilogue>
      _usb_isr_invoke_in_cb(usbp, ep);
 80028fc:	2101      	movs	r1, #1
 80028fe:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 8002902:	40a1      	lsls	r1, r4
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	ea23 0301 	bic.w	r3, r3, r1
 800290a:	f8aa 3008 	strh.w	r3, [sl, #8]
 800290e:	2a00      	cmp	r2, #0
 8002910:	d0d5      	beq.n	80028be <Vector90+0x10e>
 8002912:	4621      	mov	r1, r4
 8002914:	4847      	ldr	r0, [pc, #284]	; (8002a34 <Vector90+0x284>)
 8002916:	4790      	blx	r2
 8002918:	e7d1      	b.n	80028be <Vector90+0x10e>
  usbp->status        = 0;
 800291a:	2200      	movs	r2, #0
    STM32_USB->ISTR = ~ISTR_RESET;
 800291c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
  usbp->state         = USB_READY;
 8002920:	f8df a110 	ldr.w	sl, [pc, #272]	; 8002a34 <Vector90+0x284>
 8002924:	6459      	str	r1, [r3, #68]	; 0x44
  if (usbp->config->sof_cb != NULL)
 8002926:	f8da 5004 	ldr.w	r5, [sl, #4]
  usbp->status        = 0;
 800292a:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
  usbp->ep0state = USB_EP0_STP_WAITING;
 800292e:	f88a 2064 	strb.w	r2, [sl, #100]	; 0x64
 8002932:	68e9      	ldr	r1, [r5, #12]
  usbp->pmnext = 64;
 8002934:	2040      	movs	r0, #64	; 0x40
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
 8002936:	4291      	cmp	r1, r2
 8002938:	bf14      	ite	ne
 800293a:	f44f 4c1e 	movne.w	ip, #40448	; 0x9e00
 800293e:	f44f 4c1c 	moveq.w	ip, #39936	; 0x9c00
  usbp->state         = USB_READY;
 8002942:	f04f 0802 	mov.w	r8, #2
  STM32_USB->DADDR  = DADDR_EF;
 8002946:	f04f 0e80 	mov.w	lr, #128	; 0x80
    dp->RXCOUNT0 = nblocks;
 800294a:	f44f 4708 	mov.w	r7, #34816	; 0x8800
  if (STM32_USB->EPR[ep] & EPR_DTOG_RX) {
 800294e:	f246 2120 	movw	r1, #25120	; 0x6220
 8002952:	f242 2620 	movw	r6, #8736	; 0x2220
    usbp->epc[i] = NULL;
 8002956:	e9ca 2204 	strd	r2, r2, [sl, #16]
 800295a:	e9ca 2206 	strd	r2, r2, [sl, #24]
 800295e:	e9ca 2208 	strd	r2, r2, [sl, #32]
 8002962:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
  usbp->transmitting  = 0;
 8002966:	f8ca 2008 	str.w	r2, [sl, #8]
  usbp->state         = USB_READY;
 800296a:	f88a 8000 	strb.w	r8, [sl]
  STM32_USB->BTABLE = BTABLE_ADDR;
 800296e:	651a      	str	r2, [r3, #80]	; 0x50
  STM32_USB->ISTR   = 0;
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8002972:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
  STM32_USB->CNTR = cntr;
 8002976:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
  usbp->pmnext = 64;
 800297a:	f8ca 0084 	str.w	r0, [sl, #132]	; 0x84
  dp = USB_GET_DESCRIPTOR(ep);
 800297e:	6d18      	ldr	r0, [r3, #80]	; 0x50
  usbp->epc[0] = &ep0config;
 8002980:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8002a38 <Vector90+0x288>
  dp = USB_GET_DESCRIPTOR(ep);
 8002984:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002988:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
  usbp->epc[0] = &ep0config;
 800298c:	f8ca c00c 	str.w	ip, [sl, #12]
    dp->TXCOUNT0 = 0;
 8002990:	6042      	str	r2, [r0, #4]
  next = usbp->pmnext;
 8002992:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8002996:	f102 0c40 	add.w	ip, r2, #64	; 0x40
 800299a:	f8ca c084 	str.w	ip, [sl, #132]	; 0x84
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 800299e:	6002      	str	r2, [r0, #0]
    dp->RXCOUNT0 = nblocks;
 80029a0:	60c7      	str	r7, [r0, #12]
  next = usbp->pmnext;
 80029a2:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 80029a6:	f102 0740 	add.w	r7, r2, #64	; 0x40
 80029aa:	f8ca 7084 	str.w	r7, [sl, #132]	; 0x84
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 80029ae:	6082      	str	r2, [r0, #8]
  if (STM32_USB->EPR[ep] & EPR_DTOG_RX) {
 80029b0:	6818      	ldr	r0, [r3, #0]
  if (STM32_USB->EPR[ep] & EPR_DTOG_TX) {
 80029b2:	681a      	ldr	r2, [r3, #0]
  if (STM32_USB->EPR[ep] & EPR_DTOG_RX) {
 80029b4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80029b8:	bf18      	it	ne
 80029ba:	460b      	movne	r3, r1
  EPR_SET(ep, epr | ep);
 80029bc:	f248 2180 	movw	r1, #33408	; 0x8280
  if (STM32_USB->EPR[ep] & EPR_DTOG_RX) {
 80029c0:	bf08      	it	eq
 80029c2:	4633      	moveq	r3, r6
  EPR_TOGGLE(ep, epr);
 80029c4:	f647 0070 	movw	r0, #30832	; 0x7870
  if (STM32_USB->EPR[ep] & EPR_DTOG_TX) {
 80029c8:	0657      	lsls	r7, r2, #25
  EPR_SET(ep, epr | ep);
 80029ca:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <Vector90+0x280>)
    epr |= EPR_DTOG_TX;
 80029cc:	bf48      	it	mi
 80029ce:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
  EPR_SET(ep, epr | ep);
 80029d2:	6011      	str	r1, [r2, #0]
  EPR_TOGGLE(ep, epr);
 80029d4:	6811      	ldr	r1, [r2, #0]
 80029d6:	4003      	ands	r3, r0
 80029d8:	404b      	eors	r3, r1
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 80029da:	682d      	ldr	r5, [r5, #0]
 80029dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	2d00      	cmp	r5, #0
 80029e8:	f43f aeea 	beq.w	80027c0 <Vector90+0x10>
 80029ec:	2100      	movs	r1, #0
 80029ee:	4811      	ldr	r0, [pc, #68]	; (8002a34 <Vector90+0x284>)
 80029f0:	47a8      	blx	r5
  if (istr & ISTR_SUSP) {
 80029f2:	0526      	lsls	r6, r4, #20
 80029f4:	f57f aee7 	bpl.w	80027c6 <Vector90+0x16>
    STM32_USB->ISTR = ~ISTR_SUSP;
 80029f8:	f46f 6000 	mvn.w	r0, #2048	; 0x800
  usbp->state       = USB_SUSPENDED;
 80029fc:	2105      	movs	r1, #5
    STM32_USB->CNTR |= CNTR_FSUSP;
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <Vector90+0x280>)
  usbp->saved_state = usbp->state;
 8002a00:	f8df a030 	ldr.w	sl, [pc, #48]	; 8002a34 <Vector90+0x284>
 8002a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a06:	f042 0208 	orr.w	r2, r2, #8
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40
    STM32_USB->ISTR = ~ISTR_SUSP;
 8002a0c:	6458      	str	r0, [r3, #68]	; 0x44
 8002a0e:	f89a 2000 	ldrb.w	r2, [sl]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002a12:	f8da 3004 	ldr.w	r3, [sl, #4]
  usbp->saved_state = usbp->state;
 8002a16:	f88a 2080 	strb.w	r2, [sl, #128]	; 0x80
  usbp->state       = USB_SUSPENDED;
 8002a1a:	f88a 1000 	strb.w	r1, [sl]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	b113      	cbz	r3, 8002a28 <Vector90+0x278>
 8002a22:	2104      	movs	r1, #4
 8002a24:	4650      	mov	r0, sl
 8002a26:	4798      	blx	r3
  usbp->transmitting  = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8ca 3008 	str.w	r3, [sl, #8]
 8002a2e:	e6ca      	b.n	80027c6 <Vector90+0x16>
 8002a30:	40005c00 	.word	0x40005c00
 8002a34:	20000d00 	.word	0x20000d00
 8002a38:	08003f9c 	.word	0x08003f9c
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002a3c:	f8db 3050 	ldr.w	r3, [fp, #80]	; 0x50
      USBOutEndpointState *osp = epcp->out_state;
 8002a40:	f8d7 e018 	ldr.w	lr, [r7, #24]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002a44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a48:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8002a4c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8002a50:	689a      	ldr	r2, [r3, #8]
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8002a52:	68d8      	ldr	r0, [r3, #12]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8002a54:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8002a58:	f3c0 0909 	ubfx	r9, r0, #0, #10
 8002a5c:	9002      	str	r0, [sp, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8002a5e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 8002a62:	f8de 0008 	ldr.w	r0, [lr, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8002a66:	005b      	lsls	r3, r3, #1
  while (i >= 2) {
 8002a68:	f1b9 0f01 	cmp.w	r9, #1
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	9300      	str	r3, [sp, #0]
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 8002a70:	9001      	str	r0, [sp, #4]
  while (i >= 2) {
 8002a72:	d972      	bls.n	8002b5a <Vector90+0x3aa>
 8002a74:	f1a9 0302 	sub.w	r3, r9, #2
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	f102 0804 	add.w	r8, r2, #4
 8002a7e:	9303      	str	r3, [sp, #12]
 8002a80:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 8002a84:	1c83      	adds	r3, r0, #2
    uint32_t w = *pmap++;
 8002a86:	6810      	ldr	r0, [r2, #0]
 8002a88:	3204      	adds	r2, #4
    *buf++ = (uint8_t)(w >> 8);
 8002a8a:	ea4f 2c10 	mov.w	ip, r0, lsr #8
  while (i >= 2) {
 8002a8e:	4590      	cmp	r8, r2
    *buf++ = (uint8_t)w;
 8002a90:	f803 0c02 	strb.w	r0, [r3, #-2]
    *buf++ = (uint8_t)(w >> 8);
 8002a94:	f803 cc01 	strb.w	ip, [r3, #-1]
 8002a98:	f103 0302 	add.w	r3, r3, #2
  while (i >= 2) {
 8002a9c:	d1f3      	bne.n	8002a86 <Vector90+0x2d6>
 8002a9e:	9b03      	ldr	r3, [sp, #12]
 8002aa0:	9a00      	ldr	r2, [sp, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002aa8:	9200      	str	r2, [sp, #0]
 8002aaa:	9a01      	ldr	r2, [sp, #4]
 8002aac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	9b02      	ldr	r3, [sp, #8]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
  if (i >= 1) {
 8002ab8:	b11b      	cbz	r3, 8002ac2 <Vector90+0x312>
    *buf = (uint8_t)*pmap;
 8002aba:	9b00      	ldr	r3, [sp, #0]
 8002abc:	9a01      	ldr	r2, [sp, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	7013      	strb	r3, [r2, #0]
      osp->rxpkts -= 1;
 8002ac2:	f8be 300c 	ldrh.w	r3, [lr, #12]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8002ac6:	f8b7 c012 	ldrh.w	ip, [r7, #18]
      osp->rxpkts -= 1;
 8002aca:	1e5f      	subs	r7, r3, #1
      osp->rxsize -= n;
 8002acc:	f8de 3000 	ldr.w	r3, [lr]
      osp->rxcnt  += n;
 8002ad0:	e9de 0201 	ldrd	r0, r2, [lr, #4]
      osp->rxpkts -= 1;
 8002ad4:	b2bf      	uxth	r7, r7
      osp->rxbuf += n;
 8002ad6:	444a      	add	r2, r9
      osp->rxcnt  += n;
 8002ad8:	4448      	add	r0, r9
      osp->rxsize -= n;
 8002ada:	eba3 0309 	sub.w	r3, r3, r9
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8002ade:	45cc      	cmp	ip, r9
      osp->rxpkts -= 1;
 8002ae0:	f8ae 700c 	strh.w	r7, [lr, #12]
      osp->rxcnt  += n;
 8002ae4:	e9ce 0201 	strd	r0, r2, [lr, #4]
      osp->rxsize -= n;
 8002ae8:	f8ce 3000 	str.w	r3, [lr]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8002aec:	d926      	bls.n	8002b3c <Vector90+0x38c>
        _usb_isr_invoke_out_cb(usbp, ep);
 8002aee:	2201      	movs	r2, #1
 8002af0:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8002af4:	6870      	ldr	r0, [r6, #4]
 8002af6:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8002afa:	fa02 f404 	lsl.w	r4, r2, r4
 8002afe:	68c5      	ldr	r5, [r0, #12]
 8002b00:	ea23 0404 	bic.w	r4, r3, r4
 8002b04:	f8aa 400a 	strh.w	r4, [sl, #10]
 8002b08:	2d00      	cmp	r5, #0
 8002b0a:	f43f aeee 	beq.w	80028ea <Vector90+0x13a>
 8002b0e:	4815      	ldr	r0, [pc, #84]	; (8002b64 <Vector90+0x3b4>)
 8002b10:	47a8      	blx	r5
 8002b12:	e6ea      	b.n	80028ea <Vector90+0x13a>
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8002b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  usbp->state = usbp->saved_state;
 8002b16:	f8df a04c 	ldr.w	sl, [pc, #76]	; 8002b64 <Vector90+0x3b4>
 8002b1a:	f022 0208 	bic.w	r2, r2, #8
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b20:	f89a 2080 	ldrb.w	r2, [sl, #128]	; 0x80
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002b24:	f8da 3004 	ldr.w	r3, [sl, #4]
  usbp->state = usbp->saved_state;
 8002b28:	f88a 2000 	strb.w	r2, [sl]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f43f ae50 	beq.w	80027d4 <Vector90+0x24>
 8002b34:	4650      	mov	r0, sl
 8002b36:	2105      	movs	r1, #5
 8002b38:	4798      	blx	r3
 8002b3a:	e64b      	b.n	80027d4 <Vector90+0x24>
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8002b3c:	2f00      	cmp	r7, #0
 8002b3e:	d0d6      	beq.n	8002aee <Vector90+0x33e>
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8002b40:	682b      	ldr	r3, [r5, #0]
 8002b42:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b56:	602b      	str	r3, [r5, #0]
 8002b58:	e6c7      	b.n	80028ea <Vector90+0x13a>
  while (i >= 2) {
 8002b5a:	464b      	mov	r3, r9
  if (i >= 1) {
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ac      	bne.n	8002aba <Vector90+0x30a>
 8002b60:	e7af      	b.n	8002ac2 <Vector90+0x312>
 8002b62:	bf00      	nop
 8002b64:	20000d00 	.word	0x20000d00
	...

08002b70 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8002b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8002b74:	4d68      	ldr	r5, [pc, #416]	; (8002d18 <VectorD4+0x1a8>)
 8002b76:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8002b78:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 8002b7c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8002b7e:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8002b80:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8002b82:	d47d      	bmi.n	8002c80 <VectorD4+0x110>
 8002b84:	2320      	movs	r3, #32
 8002b86:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002b8a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002b8e:	d04d      	beq.n	8002c2c <VectorD4+0xbc>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8002b90:	f04f 0900 	mov.w	r9, #0
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8002b94:	4f61      	ldr	r7, [pc, #388]	; (8002d1c <VectorD4+0x1ac>)
 8002b96:	e008      	b.n	8002baa <VectorD4+0x3a>
    if (sr & USART_SR_RXNE)
 8002b98:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8002b9a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8002b9e:	d41d      	bmi.n	8002bdc <VectorD4+0x6c>
    sr = u->SR;
 8002ba0:	6834      	ldr	r4, [r6, #0]
 8002ba2:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002ba4:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002ba8:	d040      	beq.n	8002c2c <VectorD4+0xbc>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8002baa:	0723      	lsls	r3, r4, #28
 8002bac:	d0f4      	beq.n	8002b98 <VectorD4+0x28>
    sts |= SD_OVERRUN_ERROR;
 8002bae:	f014 0f08 	tst.w	r4, #8
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2000      	moveq	r0, #0
 8002bb6:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 8002bb8:	07e1      	lsls	r1, r4, #31
    sts |= SD_PARITY_ERROR;
 8002bba:	bf48      	it	mi
 8002bbc:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8002bc0:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8002bc2:	bf48      	it	mi
 8002bc4:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8002bc8:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8002bca:	bf48      	it	mi
 8002bcc:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 8002bd0:	f7fd fe5e 	bl	8000890 <chEvtBroadcastFlagsI.constprop.34>
    if (sr & USART_SR_RXNE)
 8002bd4:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8002bd6:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8002bda:	d5e1      	bpl.n	8002ba0 <VectorD4+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8002bdc:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8002bde:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d03d      	beq.n	8002c62 <VectorD4+0xf2>
  if (!iqIsFullI(iqp)) {
 8002be6:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d040      	beq.n	8002c70 <VectorD4+0x100>
    iqp->q_counter++;
 8002bee:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8002bf0:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8002bf2:	3201      	adds	r2, #1
 8002bf4:	ea04 0a0a 	and.w	sl, r4, sl
 8002bf8:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8002bfa:	6229      	str	r1, [r5, #32]
 8002bfc:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 8002c00:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d301      	bcc.n	8002c0c <VectorD4+0x9c>
      iqp->q_wrptr = iqp->q_buffer;
 8002c08:	69ab      	ldr	r3, [r5, #24]
 8002c0a:	622b      	str	r3, [r5, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002c0c:	68eb      	ldr	r3, [r5, #12]
 8002c0e:	42bb      	cmp	r3, r7
 8002c10:	d0c6      	beq.n	8002ba0 <VectorD4+0x30>
  tqp->next             = tp->queue.next;
 8002c12:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 8002c14:	4618      	mov	r0, r3
 8002c16:	60ea      	str	r2, [r5, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002c18:	6057      	str	r7, [r2, #4]
  tp->u.rdymsg = msg;
 8002c1a:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002c1e:	f7fd fe1f 	bl	8000860 <chSchReadyI>
    sr = u->SR;
 8002c22:	6834      	ldr	r4, [r6, #0]
 8002c24:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002c26:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8002c2a:	d1be      	bne.n	8002baa <VectorD4+0x3a>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8002c32:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002c36:	d001      	beq.n	8002c3c <VectorD4+0xcc>
 8002c38:	0622      	lsls	r2, r4, #24
 8002c3a:	d42f      	bmi.n	8002c9c <VectorD4+0x12c>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8002c3c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8002c40:	d00b      	beq.n	8002c5a <VectorD4+0xea>
 8002c42:	0663      	lsls	r3, r4, #25
 8002c44:	d509      	bpl.n	8002c5a <VectorD4+0xea>
 8002c46:	2320      	movs	r3, #32
 8002c48:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 8002c4c:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d048      	beq.n	8002ce6 <VectorD4+0x176>
 8002c54:	2300      	movs	r3, #0
 8002c56:	f383 8811 	msr	BASEPRI, r3
}
 8002c5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8002c5e:	f7fd bd57 	b.w	8000710 <_port_irq_epilogue>
 8002c62:	2004      	movs	r0, #4
 8002c64:	f7fd fe14 	bl	8000890 <chEvtBroadcastFlagsI.constprop.34>
  if (!iqIsFullI(iqp)) {
 8002c68:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d1be      	bne.n	8002bee <VectorD4+0x7e>
 8002c70:	696a      	ldr	r2, [r5, #20]
 8002c72:	2a00      	cmp	r2, #0
 8002c74:	d0bb      	beq.n	8002bee <VectorD4+0x7e>
 8002c76:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c7a:	f7fd fe09 	bl	8000890 <chEvtBroadcastFlagsI.constprop.34>
 8002c7e:	e78f      	b.n	8002ba0 <VectorD4+0x30>
 8002c80:	2320      	movs	r3, #32
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c8a:	f7fd fe01 	bl	8000890 <chEvtBroadcastFlagsI.constprop.34>
    u->SR = ~USART_SR_LBD;
 8002c8e:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8002c92:	6033      	str	r3, [r6, #0]
 8002c94:	2300      	movs	r3, #0
 8002c96:	f383 8811 	msr	BASEPRI, r3
 8002c9a:	e773      	b.n	8002b84 <VectorD4+0x14>
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8002ca2:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d029      	beq.n	8002cfe <VectorD4+0x18e>
    oqp->q_counter++;
 8002caa:	6baa      	ldr	r2, [r5, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8002cac:	6c28      	ldr	r0, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8002cae:	1c59      	adds	r1, r3, #1
    oqp->q_counter++;
 8002cb0:	3201      	adds	r2, #1
 8002cb2:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8002cb4:	64a9      	str	r1, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8002cb6:	4281      	cmp	r1, r0
    b = *oqp->q_rdptr++;
 8002cb8:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8002cba:	d301      	bcc.n	8002cc0 <VectorD4+0x150>
      oqp->q_rdptr = oqp->q_buffer;
 8002cbc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002cbe:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002cc0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002cc2:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <VectorD4+0x1b0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d009      	beq.n	8002cdc <VectorD4+0x16c>
  tp->u.rdymsg = msg;
 8002cc8:	f04f 0c00 	mov.w	ip, #0
  tqp->next             = tp->queue.next;
 8002ccc:	6819      	ldr	r1, [r3, #0]
  (void) chSchReadyI(tp);
 8002cce:	4618      	mov	r0, r3
 8002cd0:	6329      	str	r1, [r5, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 8002cd2:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
 8002cd4:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002cd8:	f7fd fdc2 	bl	8000860 <chSchReadyI>
      u->DR = b;
 8002cdc:	6077      	str	r7, [r6, #4]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	e7aa      	b.n	8002c3c <VectorD4+0xcc>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8002ce6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0b3      	beq.n	8002c54 <VectorD4+0xe4>
 8002cec:	2010      	movs	r0, #16
 8002cee:	f7fd fdcf 	bl	8000890 <chEvtBroadcastFlagsI.constprop.34>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002cf2:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8002cf6:	ea08 0303 	and.w	r3, r8, r3
 8002cfa:	60f3      	str	r3, [r6, #12]
 8002cfc:	e7aa      	b.n	8002c54 <VectorD4+0xe4>
  if (!oqIsEmptyI(oqp)) {
 8002cfe:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002d00:	2a00      	cmp	r2, #0
 8002d02:	d0d2      	beq.n	8002caa <VectorD4+0x13a>
 8002d04:	2008      	movs	r0, #8
 8002d06:	f7fd fdc3 	bl	8000890 <chEvtBroadcastFlagsI.constprop.34>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8002d0a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8002d0e:	ea08 0303 	and.w	r3, r8, r3
 8002d12:	60f3      	str	r3, [r6, #12]
 8002d14:	e7e3      	b.n	8002cde <VectorD4+0x16e>
 8002d16:	bf00      	nop
 8002d18:	2000086c 	.word	0x2000086c
 8002d1c:	20000878 	.word	0x20000878
 8002d20:	2000089c 	.word	0x2000089c
	...

08002d30 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8002d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8002d34:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8002d38:	6933      	ldr	r3, [r6, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8002d3a:	68f2      	ldr	r2, [r6, #12]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8002d40:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8002d42:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8002d44:	6132      	str	r2, [r6, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8002d46:	d403      	bmi.n	8002d50 <VectorB0+0x20>
}
 8002d48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8002d4c:	f7fd bce0 	b.w	8000710 <_port_irq_epilogue>
 8002d50:	2320      	movs	r3, #32
 8002d52:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8002d56:	4c22      	ldr	r4, [pc, #136]	; (8002de0 <VectorB0+0xb0>)
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8002d58:	f04f 0800 	mov.w	r8, #0
  vtp = ch.vtlist.next;
 8002d5c:	46a1      	mov	r9, r4
 8002d5e:	f859 3f1c 	ldr.w	r3, [r9, #28]!
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	6a70      	ldr	r0, [r6, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8002d66:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8002d68:	b280      	uxth	r0, r0
  return (sysinterval_t)((systime_t)(end - start));
 8002d6a:	1a47      	subs	r7, r0, r1
 8002d6c:	b2bf      	uxth	r7, r7
    if (nowdelta < vtp->delta) {
 8002d6e:	4297      	cmp	r7, r2
 8002d70:	d31b      	bcc.n	8002daa <VectorB0+0x7a>
 8002d72:	2520      	movs	r5, #32
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002d74:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 8002d76:	4411      	add	r1, r2

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8002d78:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8002d7a:	8521      	strh	r1, [r4, #40]	; 0x28
      nowdelta -= vtp->delta;
 8002d7c:	eba7 0702 	sub.w	r7, r7, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002d80:	f8c0 9004 	str.w	r9, [r0, #4]
      fn = vtp->func;
 8002d84:	68da      	ldr	r2, [r3, #12]
      ch.vtlist.next = vtp->next;
 8002d86:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
 8002d88:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0U;
 8002d8c:	bf08      	it	eq
 8002d8e:	f8c6 800c 	streq.w	r8, [r6, #12]
 8002d92:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8002d96:	6918      	ldr	r0, [r3, #16]
 8002d98:	4790      	blx	r2
 8002d9a:	f385 8811 	msr	BASEPRI, r5
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8002d9e:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	4297      	cmp	r7, r2
 8002da4:	d3de      	bcc.n	8002d64 <VectorB0+0x34>
 8002da6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8002da8:	e7e4      	b.n	8002d74 <VectorB0+0x44>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8002daa:	69e2      	ldr	r2, [r4, #28]
 8002dac:	454a      	cmp	r2, r9
 8002dae:	d00f      	beq.n	8002dd0 <VectorB0+0xa0>
  return systime + (systime_t)interval;
 8002db0:	f64f 75ff 	movw	r5, #65535	; 0xffff
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8002db4:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 8002db6:	8520      	strh	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8002db8:	1bcf      	subs	r7, r1, r7
 8002dba:	6097      	str	r7, [r2, #8]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	42ab      	cmp	r3, r5
 8002dc0:	bf28      	it	cs
 8002dc2:	462b      	movcs	r3, r5
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	bf2c      	ite	cs
 8002dc8:	18c0      	addcs	r0, r0, r3
 8002dca:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002dcc:	b280      	uxth	r0, r0
 8002dce:	6370      	str	r0, [r6, #52]	; 0x34
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f383 8811 	msr	BASEPRI, r3
}
 8002dd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8002dda:	f7fd bc99 	b.w	8000710 <_port_irq_epilogue>
 8002dde:	bf00      	nop
 8002de0:	20000d88 	.word	0x20000d88
	...

08002df0 <VectorC0>:
  uint16_t sr = I2CD1.i2c->SR1;
 8002df0:	4a36      	ldr	r2, [pc, #216]	; (8002ecc <VectorC0+0xdc>)
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8002df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dmaStreamDisable(i2cp->dmatx);
 8002df4:	e9d2 640c 	ldrd	r6, r4, [r2, #48]	; 0x30
  uint16_t sr = I2CD1.i2c->SR1;
 8002df8:	6960      	ldr	r0, [r4, #20]
  dmaStreamDisable(i2cp->dmatx);
 8002dfa:	230e      	movs	r3, #14
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002dfc:	f400 415f 	and.w	r1, r0, #57088	; 0xdf00
 8002e00:	43c9      	mvns	r1, r1
  dmaStreamDisable(i2cp->dmatx);
 8002e02:	6877      	ldr	r7, [r6, #4]
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002e04:	6161      	str	r1, [r4, #20]
  dmaStreamDisable(i2cp->dmatx);
 8002e06:	683d      	ldr	r5, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8002e08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8002e0a:	f025 050f 	bic.w	r5, r5, #15
 8002e0e:	603d      	str	r5, [r7, #0]
 8002e10:	7b75      	ldrb	r5, [r6, #13]
 8002e12:	6837      	ldr	r7, [r6, #0]
 8002e14:	fa03 f505 	lsl.w	r5, r3, r5
  dmaStreamDisable(i2cp->dmarx);
 8002e18:	684e      	ldr	r6, [r1, #4]
  dmaStreamDisable(i2cp->dmatx);
 8002e1a:	607d      	str	r5, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8002e1c:	6835      	ldr	r5, [r6, #0]
 8002e1e:	680f      	ldr	r7, [r1, #0]
 8002e20:	f025 050f 	bic.w	r5, r5, #15
 8002e24:	6035      	str	r5, [r6, #0]
 8002e26:	7b4d      	ldrb	r5, [r1, #13]
  uint16_t sr = I2CD1.i2c->SR1;
 8002e28:	b281      	uxth	r1, r0
  dmaStreamDisable(i2cp->dmarx);
 8002e2a:	40ab      	lsls	r3, r5
 8002e2c:	607b      	str	r3, [r7, #4]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 8002e2e:	f411 7380 	ands.w	r3, r1, #256	; 0x100
 8002e32:	d137      	bne.n	8002ea4 <VectorC0+0xb4>
  i2cp->errors = I2C_NO_ERROR;
 8002e34:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8002e36:	058f      	lsls	r7, r1, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8002e38:	bf44      	itt	mi
 8002e3a:	f043 0302 	orrmi.w	r3, r3, #2
 8002e3e:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8002e40:	054e      	lsls	r6, r1, #21
 8002e42:	d50a      	bpl.n	8002e5a <VectorC0+0x6a>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8002e44:	6865      	ldr	r5, [r4, #4]
    i2cp->errors |= I2C_ACK_FAILURE;
 8002e46:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8002e4a:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8002e4e:	6065      	str	r5, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8002e50:	6825      	ldr	r5, [r4, #0]
 8002e52:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8002e56:	6025      	str	r5, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8002e58:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8002e5a:	050d      	lsls	r5, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 8002e5c:	bf44      	itt	mi
 8002e5e:	f043 0308 	orrmi.w	r3, r3, #8
 8002e62:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8002e64:	044c      	lsls	r4, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 8002e66:	bf44      	itt	mi
 8002e68:	f043 0320 	orrmi.w	r3, r3, #32
 8002e6c:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8002e6e:	04c9      	lsls	r1, r1, #19
 8002e70:	b200      	sxth	r0, r0
 8002e72:	d51f      	bpl.n	8002eb4 <VectorC0+0xc4>
    i2cp->errors |= I2C_PEC_ERROR;
 8002e74:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002e78:	2800      	cmp	r0, #0
    i2cp->errors |= I2C_PEC_ERROR;
 8002e7a:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002e7c:	db22      	blt.n	8002ec4 <VectorC0+0xd4>
 8002e7e:	2320      	movs	r3, #32
 8002e80:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8002e84:	69d0      	ldr	r0, [r2, #28]
 8002e86:	b130      	cbz	r0, 8002e96 <VectorC0+0xa6>
    tp->u.rdymsg = msg;
 8002e88:	f06f 0101 	mvn.w	r1, #1
    *trp = NULL;
 8002e8c:	2300      	movs	r3, #0
    tp->u.rdymsg = msg;
 8002e8e:	6241      	str	r1, [r0, #36]	; 0x24
    *trp = NULL;
 8002e90:	61d3      	str	r3, [r2, #28]
    (void) chSchReadyI(tp);
 8002e92:	f7fd fce5 	bl	8000860 <chSchReadyI>
 8002e96:	2300      	movs	r3, #0
 8002e98:	f383 8811 	msr	BASEPRI, r3
}
 8002e9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8002ea0:	f7fd bc36 	b.w	8000710 <_port_irq_epilogue>
    i2cp->errors |= I2C_BUS_ERROR;
 8002ea4:	2601      	movs	r6, #1
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 8002ea6:	6965      	ldr	r5, [r4, #20]
 8002ea8:	4633      	mov	r3, r6
 8002eaa:	f425 7580 	bic.w	r5, r5, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 8002eae:	6096      	str	r6, [r2, #8]
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 8002eb0:	6165      	str	r5, [r4, #20]
 8002eb2:	e7c0      	b.n	8002e36 <VectorC0+0x46>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	db05      	blt.n	8002ec4 <VectorC0+0xd4>
  if (i2cp->errors != I2C_NO_ERROR)
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e0      	bne.n	8002e7e <VectorC0+0x8e>
}
 8002ebc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8002ec0:	f7fd bc26 	b.w	8000710 <_port_irq_epilogue>
    i2cp->errors |= I2C_SMB_ALERT;
 8002ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ec8:	6093      	str	r3, [r2, #8]
 8002eca:	e7d8      	b.n	8002e7e <VectorC0+0x8e>
 8002ecc:	20000834 	.word	0x20000834

08002ed0 <VectorBC>:
  I2C_TypeDef *dp = i2cp->i2c;
 8002ed0:	4a40      	ldr	r2, [pc, #256]	; (8002fd4 <VectorBC+0x104>)
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8002ed2:	b538      	push	{r3, r4, r5, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8002ed4:	6b54      	ldr	r4, [r2, #52]	; 0x34
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002ed6:	4940      	ldr	r1, [pc, #256]	; (8002fd8 <VectorBC+0x108>)
  uint32_t regSR2 = dp->SR2;
 8002ed8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8002eda:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002edc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002ee0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ee4:	428b      	cmp	r3, r1
 8002ee6:	d04a      	beq.n	8002f7e <VectorBC+0xae>
 8002ee8:	d916      	bls.n	8002f18 <VectorBC+0x48>
 8002eea:	493c      	ldr	r1, [pc, #240]	; (8002fdc <VectorBC+0x10c>)
 8002eec:	428b      	cmp	r3, r1
 8002eee:	d025      	beq.n	8002f3c <VectorBC+0x6c>
 8002ef0:	3102      	adds	r1, #2
 8002ef2:	428b      	cmp	r3, r1
 8002ef4:	d032      	beq.n	8002f5c <VectorBC+0x8c>
 8002ef6:	493a      	ldr	r1, [pc, #232]	; (8002fe0 <VectorBC+0x110>)
 8002ef8:	428b      	cmp	r3, r1
 8002efa:	d02a      	beq.n	8002f52 <VectorBC+0x82>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8002efc:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8002f00:	bf18      	it	ne
 8002f02:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 8002f04:	05eb      	lsls	r3, r5, #23
 8002f06:	d503      	bpl.n	8002f10 <VectorBC+0x40>
    dp->SR1 &= ~I2C_SR1_BERR;
 8002f08:	6963      	ldr	r3, [r4, #20]
 8002f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f0e:	6163      	str	r3, [r4, #20]
}
 8002f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8002f14:	f7fd bbfc 	b.w	8000710 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002f18:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8002f1c:	d002      	beq.n	8002f24 <VectorBC+0x54>
 8002f1e:	3901      	subs	r1, #1
 8002f20:	428b      	cmp	r3, r1
 8002f22:	d1eb      	bne.n	8002efc <VectorBC+0x2c>
    if ((i2cp->addr >> 8) > 0) {
 8002f24:	8c13      	ldrh	r3, [r2, #32]
 8002f26:	0a1a      	lsrs	r2, r3, #8
 8002f28:	d016      	beq.n	8002f58 <VectorBC+0x88>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002f32:	f002 0206 	and.w	r2, r2, #6
 8002f36:	4313      	orrs	r3, r2
 8002f38:	6123      	str	r3, [r4, #16]
 8002f3a:	e7df      	b.n	8002efc <VectorBC+0x2c>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002f3c:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002f3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8002f44:	6852      	ldr	r2, [r2, #4]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002f46:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002f48:	6813      	ldr	r3, [r2, #0]
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	e7d4      	b.n	8002efc <VectorBC+0x2c>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8002f52:	8c13      	ldrh	r3, [r2, #32]
 8002f54:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8002f58:	6123      	str	r3, [r4, #16]
 8002f5a:	e7cf      	b.n	8002efc <VectorBC+0x2c>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8002f5c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    (void)dp->DR; /* clear BTF.*/
 8002f5e:	6921      	ldr	r1, [r4, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	b30b      	cbz	r3, 8002faa <VectorBC+0xda>
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002f66:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 8002f68:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002f6a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8002f6e:	f041 0101 	orr.w	r1, r1, #1
 8002f72:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002f74:	6023      	str	r3, [r4, #0]
}
 8002f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8002f7a:	f7fd bbc9 	b.w	8000710 <_port_irq_epilogue>
    dmaStreamEnable(i2cp->dmarx);
 8002f7e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002f80:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8002f82:	685b      	ldr	r3, [r3, #4]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002f84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f88:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8002f92:	6862      	ldr	r2, [r4, #4]
 8002f94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f98:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d8ad      	bhi.n	8002efc <VectorBC+0x2c>
      dp->CR1 &= ~I2C_CR1_ACK;
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fa6:	6023      	str	r3, [r4, #0]
 8002fa8:	e7a8      	b.n	8002efc <VectorBC+0x2c>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002faa:	6861      	ldr	r1, [r4, #4]
 8002fac:	2020      	movs	r0, #32
 8002fae:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002fb2:	6061      	str	r1, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8002fb4:	6821      	ldr	r1, [r4, #0]
 8002fb6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002fba:	6021      	str	r1, [r4, #0]
 8002fbc:	f380 8811 	msr	BASEPRI, r0
  if (*trp != NULL) {
 8002fc0:	69d0      	ldr	r0, [r2, #28]
 8002fc2:	b118      	cbz	r0, 8002fcc <VectorBC+0xfc>
    tp->u.rdymsg = msg;
 8002fc4:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8002fc6:	61d3      	str	r3, [r2, #28]
    (void) chSchReadyI(tp);
 8002fc8:	f7fd fc4a 	bl	8000860 <chSchReadyI>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	e793      	b.n	8002efc <VectorBC+0x2c>
 8002fd4:	20000834 	.word	0x20000834
 8002fd8:	00030002 	.word	0x00030002
 8002fdc:	00070082 	.word	0x00070082
 8002fe0:	00030008 	.word	0x00030008
	...

08002ff0 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002ff0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8002ff2:	4803      	ldr	r0, [pc, #12]	; (8003000 <Vector84+0x10>)
 8002ff4:	f7fd fd9c 	bl	8000b30 <dmaServeInterrupt>
}
 8002ff8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8002ffc:	f7fd bb88 	b.w	8000710 <_port_irq_epilogue>
 8003000:	08003f50 	.word	0x08003f50
	...

08003010 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8003010:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8003012:	4803      	ldr	r0, [pc, #12]	; (8003020 <Vector80+0x10>)
 8003014:	f7fd fd8c 	bl	8000b30 <dmaServeInterrupt>
}
 8003018:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800301c:	f7fd bb78 	b.w	8000710 <_port_irq_epilogue>
 8003020:	08003f40 	.word	0x08003f40
	...

08003030 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8003030:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8003032:	4803      	ldr	r0, [pc, #12]	; (8003040 <Vector7C+0x10>)
 8003034:	f7fd fd7c 	bl	8000b30 <dmaServeInterrupt>
}
 8003038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800303c:	f7fd bb68 	b.w	8000710 <_port_irq_epilogue>
 8003040:	08003f30 	.word	0x08003f30
	...

08003050 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8003050:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8003052:	4803      	ldr	r0, [pc, #12]	; (8003060 <Vector78+0x10>)
 8003054:	f7fd fd6c 	bl	8000b30 <dmaServeInterrupt>
}
 8003058:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800305c:	f7fd bb58 	b.w	8000710 <_port_irq_epilogue>
 8003060:	08003f20 	.word	0x08003f20
	...

08003070 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8003070:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8003072:	4803      	ldr	r0, [pc, #12]	; (8003080 <Vector74+0x10>)
 8003074:	f7fd fd5c 	bl	8000b30 <dmaServeInterrupt>
}
 8003078:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800307c:	f7fd bb48 	b.w	8000710 <_port_irq_epilogue>
 8003080:	08003f10 	.word	0x08003f10
	...

08003090 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8003090:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8003092:	4803      	ldr	r0, [pc, #12]	; (80030a0 <Vector70+0x10>)
 8003094:	f7fd fd4c 	bl	8000b30 <dmaServeInterrupt>
}
 8003098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800309c:	f7fd bb38 	b.w	8000710 <_port_irq_epilogue>
 80030a0:	08003f00 	.word	0x08003f00
	...

080030b0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80030b0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 80030b2:	4803      	ldr	r0, [pc, #12]	; (80030c0 <Vector6C+0x10>)
 80030b4:	f7fd fd3c 	bl	8000b30 <dmaServeInterrupt>
}
 80030b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80030bc:	f7fd bb28 	b.w	8000710 <_port_irq_epilogue>
 80030c0:	08003ef0 	.word	0x08003ef0
	...

080030d0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80030d0:	b4f0      	push	{r4, r5, r6, r7}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80030d2:	2700      	movs	r7, #0
 80030d4:	4e13      	ldr	r6, [pc, #76]	; (8003124 <__init_ram_areas+0x54>)
void __init_ram_areas(void) {
 80030d6:	4d14      	ldr	r5, [pc, #80]	; (8003128 <__init_ram_areas+0x58>)
 80030d8:	4c14      	ldr	r4, [pc, #80]	; (800312c <__init_ram_areas+0x5c>)
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <__init_ram_areas+0x60>)
 80030dc:	4915      	ldr	r1, [pc, #84]	; (8003134 <__init_ram_areas+0x64>)
 80030de:	f106 0c70 	add.w	ip, r6, #112	; 0x70
    while (p < rap->clear_area) {
 80030e2:	429c      	cmp	r4, r3
 80030e4:	d911      	bls.n	800310a <__init_ram_areas+0x3a>
 80030e6:	461a      	mov	r2, r3
 80030e8:	3904      	subs	r1, #4
      *p = *tp;
 80030ea:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80030ee:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 80030f2:	4294      	cmp	r4, r2
 80030f4:	d8f9      	bhi.n	80030ea <__init_ram_areas+0x1a>
 80030f6:	43da      	mvns	r2, r3
 80030f8:	4414      	add	r4, r2
 80030fa:	f024 0403 	bic.w	r4, r4, #3
 80030fe:	3404      	adds	r4, #4
 8003100:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 8003102:	429d      	cmp	r5, r3
 8003104:	d903      	bls.n	800310e <__init_ram_areas+0x3e>
      *p = 0;
 8003106:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 800310a:	429d      	cmp	r5, r3
 800310c:	d8fb      	bhi.n	8003106 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800310e:	4566      	cmp	r6, ip
 8003110:	d005      	beq.n	800311e <__init_ram_areas+0x4e>
 8003112:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 8003116:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 800311a:	3610      	adds	r6, #16
 800311c:	e7e1      	b.n	80030e2 <__init_ram_areas+0x12>
#endif
}
 800311e:	bcf0      	pop	{r4, r5, r6, r7}
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	08003fe4 	.word	0x08003fe4
 8003128:	200013d0 	.word	0x200013d0
 800312c:	200013d0 	.word	0x200013d0
 8003130:	200013d0 	.word	0x200013d0
 8003134:	080040c4 	.word	0x080040c4
	...

08003140 <__default_exit>:
void __default_exit(void) {
 8003140:	e7fe      	b.n	8003140 <__default_exit>
 8003142:	bf00      	nop
	...

08003150 <__late_init>:
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
	...

08003160 <__core_init>:
}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
