/*******************************************************************************
        => ChibiOS 如何建立自己的板级（board）配置
*******************************************************************************/
// ChibiOS的编译体系背景：
// ____________________________________________________________
// ChibiOS的编译体系是非常清晰的，由如下几部分构成：
        APP层， HAL层， BOARD层， OS层， PLATFORM层， CPU层等
        每一层般都有对应的 makefile 文件分别构建
// 比如在 demos 中的 STM32F4-DISCOVERY 板子的工程中
        platform // 使用了  /os/hal/ports/STM32/STM32F4xx/platform.mk
        board    // 使用了  /os/hal/boards/ST_STM32F4_DISCOVERY/board.mk
        cpu      // 使用了  /os/common/ports/ARMCMx/compilers/GCC/mk/port_v7m.mk 等



// 文件准备：
// ____________________________________________________________
// 这里我们以STM32F4的样板工程为例，我们可以看到上面board的mk目录，
// 进入/os/hal/boards/ST_STM32F4_DISCOVERY目录，可以看到如下文件：
        board.c         // 该文件实现了板级的底层初始化代码，包括IO等
        board.h         // 该文件定义了板级的配置，主要就是IO的配置情况，
                        // 包括输入输出 、 复用关系等
        board.mk        // 该文件是本目录的编译文件，用于组织形成board包
        cfg             // 该文件夹是用于IDE，这里不使用
// 由此，我们可以拷贝整个这个文件夹，为了以后使用方便，我们可以将新的文件夹
// 同样放在 /os/hal/boards/ 目录下，取名 --- myboard



// 文件修改：
// ____________________________________________________________
// 我们可以修改board.h中所定义的板子名字，由宏BOARD_NAME定义。
// 对于IO口的定义，我们可以按照里面的例子进行修改，这里要注意的是，
// 修改的时候一定要修改全面，不能只修改几个定义，很多的定义是环环
// 相扣的，虽然有点啰嗦，但是后面使用的时候就会很方便，毕竟板子一般
// 是固定的，定义一次就可以了，看得时候也会很清晰。
//
// 对于board.c文件，我们基本上不用做太多的修改，当然我们也可以在
// 里面加入自己想要的实现的代码，但目前并不建议修改。
//
// 最后关键是要修改board.mk文件，里面定义了本目录的路径，需要
// 修改BOARDSRC这个变量为当前的目录下的c文件（目前就一个board.c），
// BOARDINC这个变量修改为当前的目录（到时候会通过这个变量来寻找board.h这个头文件）



// 将自定义板级包添加到make中（文件位置如下）
// cd $CHIBIOS/demos/STM32/RT-STM32F103-MAPLEMINI/Makefile
// ____________________________________________________________
// 上面已经完成了自定义板级包的制作，现在我们可以将它添加到我们的make中了，
// 修改自己的工程目录下的Makefile文件，找到# HAL-OSAL files (optional).
// 这一行，在下面找到原来的board.mk，然后替换为我们刚刚定义的board.mk文件即可



