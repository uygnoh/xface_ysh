/*******************************************************************************
        => ADC
*******************************************************************************/
// ADC 规则序列通道（转换顺序）
// ____________________________________________________________
                                // BIT[23:20]   规则通道序列长度
ADC1_SQR1 = (3 - 1) << 20;      // (3 - 1):     表示总共有 3 个通道转换
ADC1_SQR2 = 0;                  // No element in this register

// 配置 ADC输入通道 - 0, ADC输入通道 - 14， ADC输入通道 - 3
                                // SQ1[4  : 0 ]: 规则序列中的第1个转换
                                // SQ2[9  : 5 ]: 规则序列中的第2个转换
                                // SQ3[14 : 10]: 规则序列中的第3个转换
                                // 这些位由软件定义转换序列中转换通道的编号(0 ~ 17)
ADC1_SQR3 = (3 << 10) | (14 << 5) | (0 << 0);



// ADC 采样时间
// ____________________________________________________________
// ADC采样时间寄存器 1(ADC_SMPR1)      // SMP10 - SMP17
// ADC采样时间寄存器 2(ADC_SMPR2)      // SMP0  - SMP9
// 配置 ADC输入通道 - 0, ADC输入通道 - 14， ADC输入通道 - 3 采样时间
        ADC resolution is 12-bit
        the sample rate for ADC_CHANNEL_IN0  is 3  cycle
        the sample rate for ADC_CHANNEL_IN14 is 15 cycle
        the sample rate for ADC_CHANNEL_IN3  is 15 cycle
        // 则3个通道的总采样时间为: 
        (3 + 12) + (15 + 12) + (15 + 12)





/*******************************************************************************
        => ChibiOS ADC driver
*******************************************************************************/
typedef struct {
        bool                      circular;             // 循环
        adc_channels_num_t        num_channels;         // 序列长度
        adccallback_t             end_cb;               // 结束回调函数
        adcerrorcallback_t        error_cb;             // 错误回调函数
        uint32_t                  cr1;                 // ADC 控制寄存器 1
        uint32_t                  cr2;                 // ADC 控制寄存器 2
        uint32_t                  smpr1;               // ADC 采样时间寄存器 1
        uint32_t                  smpr2;               // ADC 采样时间寄存器 2
        uint16_t                  htr;                 // ADC 看门狗高阀值寄存器
        uint16_t                  ltr;                 // ADC 看门狗低阀值寄存器
        uint32_t                  sqr1;                // ADC 规则序列寄存器 1
        uint32_t                  sqr2;                // ADC 规则序列寄存器 2
        uint32_t                  sqr3;                // ADC 规则序列寄存器 3
} ADCConversionGroup;

typedef void (*adccallback_t)(ADCDriver *adcp);
typedef void (*adcerrorcallback_t)(ADCDriver *adcp, adcerror_t err);


