
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023b 	.word	0x0800023b
 8000010:	0800023b 	.word	0x0800023b
 8000014:	0800023b 	.word	0x0800023b
 8000018:	0800023b 	.word	0x0800023b
 800001c:	0800023b 	.word	0x0800023b
 8000020:	0800023b 	.word	0x0800023b
 8000024:	0800023b 	.word	0x0800023b
 8000028:	0800023b 	.word	0x0800023b
 800002c:	080028d1 	.word	0x080028d1
 8000030:	0800023b 	.word	0x0800023b
 8000034:	0800023b 	.word	0x0800023b
 8000038:	0800023b 	.word	0x0800023b
 800003c:	0800023b 	.word	0x0800023b
 8000040:	0800023b 	.word	0x0800023b
 8000044:	0800023b 	.word	0x0800023b
 8000048:	0800023b 	.word	0x0800023b
 800004c:	0800023b 	.word	0x0800023b
 8000050:	0800023b 	.word	0x0800023b
 8000054:	0800023b 	.word	0x0800023b
 8000058:	0800023b 	.word	0x0800023b
 800005c:	0800023b 	.word	0x0800023b
 8000060:	0800023b 	.word	0x0800023b
 8000064:	0800023b 	.word	0x0800023b
 8000068:	0800023b 	.word	0x0800023b
 800006c:	08003611 	.word	0x08003611
 8000070:	080035f1 	.word	0x080035f1
 8000074:	080035d1 	.word	0x080035d1
 8000078:	080035b1 	.word	0x080035b1
 800007c:	08003591 	.word	0x08003591
 8000080:	08003571 	.word	0x08003571
 8000084:	08003551 	.word	0x08003551
 8000088:	0800023b 	.word	0x0800023b
 800008c:	0800023b 	.word	0x0800023b
 8000090:	08002d21 	.word	0x08002d21
 8000094:	0800023b 	.word	0x0800023b
 8000098:	0800023b 	.word	0x0800023b
 800009c:	0800023b 	.word	0x0800023b
 80000a0:	0800023b 	.word	0x0800023b
 80000a4:	0800023b 	.word	0x0800023b
 80000a8:	0800023b 	.word	0x0800023b
 80000ac:	0800023b 	.word	0x0800023b
 80000b0:	080032a1 	.word	0x080032a1
 80000b4:	0800023b 	.word	0x0800023b
 80000b8:	0800023b 	.word	0x0800023b
 80000bc:	08003441 	.word	0x08003441
 80000c0:	08003361 	.word	0x08003361
 80000c4:	0800023b 	.word	0x0800023b
 80000c8:	0800023b 	.word	0x0800023b
 80000cc:	0800023b 	.word	0x0800023b
 80000d0:	0800023b 	.word	0x0800023b
 80000d4:	080030e1 	.word	0x080030e1
 80000d8:	0800023b 	.word	0x0800023b
 80000dc:	0800023b 	.word	0x0800023b
 80000e0:	0800023b 	.word	0x0800023b
 80000e4:	0800023b 	.word	0x0800023b
 80000e8:	0800023b 	.word	0x0800023b
 80000ec:	0800023b 	.word	0x0800023b
 80000f0:	0800023b 	.word	0x0800023b
 80000f4:	0800023b 	.word	0x0800023b
 80000f8:	0800023b 	.word	0x0800023b
 80000fc:	0800023b 	.word	0x0800023b
 8000100:	0800023b 	.word	0x0800023b
 8000104:	0800023b 	.word	0x0800023b
 8000108:	0800023b 	.word	0x0800023b
 800010c:	0800023b 	.word	0x0800023b
 8000110:	0800023b 	.word	0x0800023b
 8000114:	0800023b 	.word	0x0800023b
 8000118:	0800023b 	.word	0x0800023b
 800011c:	0800023b 	.word	0x0800023b
 8000120:	0800023b 	.word	0x0800023b
 8000124:	0800023b 	.word	0x0800023b
 8000128:	0800023b 	.word	0x0800023b
 800012c:	0800023b 	.word	0x0800023b
 8000130:	0800023b 	.word	0x0800023b
 8000134:	0800023b 	.word	0x0800023b
 8000138:	0800023b 	.word	0x0800023b
 800013c:	0800023b 	.word	0x0800023b
 8000140:	0800023b 	.word	0x0800023b
 8000144:	0800023b 	.word	0x0800023b
 8000148:	0800023b 	.word	0x0800023b
 800014c:	0800023b 	.word	0x0800023b
 8000150:	0800023b 	.word	0x0800023b
 8000154:	0800023b 	.word	0x0800023b
 8000158:	0800023b 	.word	0x0800023b
 800015c:	0800023b 	.word	0x0800023b

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4827      	ldr	r0, [pc, #156]	; (8000200 <endfiniloop+0x4>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4826      	ldr	r0, [pc, #152]	; (8000204 <endfiniloop+0x8>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800016e:	4826      	ldr	r0, [pc, #152]	; (8000208 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000170:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000174:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000178:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800017a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800017c:	f380 8814 	msr	CONTROL, r0
                isb
 8000180:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000184:	f003 fa9c 	bl	80036c0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000188:	f002 fd8a 	bl	8002ca0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800018c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000190:	491e      	ldr	r1, [pc, #120]	; (800020c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000192:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <endfiniloop+0x4>)

08000194 <msloop>:
msloop:
                cmp     r1, r2
 8000194:	4291      	cmp	r1, r2
                itt     lo
 8000196:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000198:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800019c:	e7fa      	bcc.n	8000194 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800019e:	491c      	ldr	r1, [pc, #112]	; (8000210 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001a0:	4a18      	ldr	r2, [pc, #96]	; (8000204 <endfiniloop+0x8>)

080001a2 <psloop>:
psloop:
                cmp     r1, r2
 80001a2:	4291      	cmp	r1, r2
                itt     lo
 80001a4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001aa:	e7fa      	bcc.n	80001a2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80001ac:	4919      	ldr	r1, [pc, #100]	; (8000214 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80001ae:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80001b0:	4b1a      	ldr	r3, [pc, #104]	; (800021c <endfiniloop+0x20>)

080001b2 <dloop>:
dloop:
                cmp     r2, r3
 80001b2:	429a      	cmp	r2, r3
                ittt    lo
 80001b4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ba:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001be:	e7f8      	bcc.n	80001b2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001c0:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001c2:	4917      	ldr	r1, [pc, #92]	; (8000220 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <endfiniloop+0x28>)

080001c6 <bloop>:
bloop:
                cmp     r1, r2
 80001c6:	4291      	cmp	r1, r2
                itt     lo
 80001c8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001ca:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001ce:	e7fa      	bcc.n	80001c6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001d0:	f003 fa2e 	bl	8003630 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001d4:	f003 fa6c 	bl	80036b0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001d8:	4c13      	ldr	r4, [pc, #76]	; (8000228 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 80001da:	4d14      	ldr	r5, [pc, #80]	; (800022c <endfiniloop+0x30>)

080001dc <initloop>:
initloop:
                cmp     r4, r5
 80001dc:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001de:	da03      	bge.n	80001e8 <endinitloop>
                ldr     r1, [r4], #4
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001e4:	4788      	blx	r1
                b       initloop
 80001e6:	e7f9      	b.n	80001dc <initloop>

080001e8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e8:	f002 f84a 	bl	8002280 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001ec:	4c10      	ldr	r4, [pc, #64]	; (8000230 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 80001ee:	4d11      	ldr	r5, [pc, #68]	; (8000234 <endfiniloop+0x38>)

080001f0 <finiloop>:
finiloop:
                cmp     r4, r5
 80001f0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001f2:	da03      	bge.n	80001fc <endfiniloop>
                ldr     r1, [r4], #4
 80001f4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f8:	4788      	blx	r1
                b       finiloop
 80001fa:	e7f9      	b.n	80001f0 <finiloop>

080001fc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001fc:	f003 ba50 	b.w	80036a0 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000200:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000204:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000208:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000214:	0800469c 	.word	0x0800469c
                ldr     r2, =__data_base__
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800021c:	20000824 	.word	0x20000824
                ldr     r1, =__bss_base__
 8000220:	20000828 	.word	0x20000828
                ldr     r2, =__bss_end__
 8000224:	200014f0 	.word	0x200014f0
                ldr     r4, =__init_array_base__
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_base__
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end__
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800023a:	f000 f800 	bl	800023e <_unhandled_exception>

0800023e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023e:	e7fe      	b.n	800023e <_unhandled_exception>

08000240 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000250:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000252:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000256:	4628      	mov	r0, r5
                blx     r4
 8000258:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800025a:	2000      	movs	r0, #0
                bl      chThdExit
 800025c:	f002 fb48 	bl	80028f0 <chThdExit>

08000260 <_zombies>:
_zombies:       b       _zombies
 8000260:	e7fe      	b.n	8000260 <_zombies>

08000262 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000262:	f002 fb6d 	bl	8002940 <chSchDoReschedule>

08000266 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000266:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000268:	e7fe      	b.n	8000268 <_port_exit_from_isr+0x2>
	...

0800026c <__aeabi_frsub>:
 800026c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000270:	e002      	b.n	8000278 <__addsf3>
 8000272:	bf00      	nop

08000274 <__aeabi_fsub>:
 8000274:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000278 <__addsf3>:
 8000278:	0042      	lsls	r2, r0, #1
 800027a:	bf1f      	itttt	ne
 800027c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000280:	ea92 0f03 	teqne	r2, r3
 8000284:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000288:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800028c:	d06a      	beq.n	8000364 <__addsf3+0xec>
 800028e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000292:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000296:	bfc1      	itttt	gt
 8000298:	18d2      	addgt	r2, r2, r3
 800029a:	4041      	eorgt	r1, r0
 800029c:	4048      	eorgt	r0, r1
 800029e:	4041      	eorgt	r1, r0
 80002a0:	bfb8      	it	lt
 80002a2:	425b      	neglt	r3, r3
 80002a4:	2b19      	cmp	r3, #25
 80002a6:	bf88      	it	hi
 80002a8:	4770      	bxhi	lr
 80002aa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002b6:	bf18      	it	ne
 80002b8:	4240      	negne	r0, r0
 80002ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002be:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002c6:	bf18      	it	ne
 80002c8:	4249      	negne	r1, r1
 80002ca:	ea92 0f03 	teq	r2, r3
 80002ce:	d03f      	beq.n	8000350 <__addsf3+0xd8>
 80002d0:	f1a2 0201 	sub.w	r2, r2, #1
 80002d4:	fa41 fc03 	asr.w	ip, r1, r3
 80002d8:	eb10 000c 	adds.w	r0, r0, ip
 80002dc:	f1c3 0320 	rsb	r3, r3, #32
 80002e0:	fa01 f103 	lsl.w	r1, r1, r3
 80002e4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	d502      	bpl.n	80002f0 <__addsf3+0x78>
 80002ea:	4249      	negs	r1, r1
 80002ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002f4:	d313      	bcc.n	800031e <__addsf3+0xa6>
 80002f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002fa:	d306      	bcc.n	800030a <__addsf3+0x92>
 80002fc:	0840      	lsrs	r0, r0, #1
 80002fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000302:	f102 0201 	add.w	r2, r2, #1
 8000306:	2afe      	cmp	r2, #254	; 0xfe
 8000308:	d251      	bcs.n	80003ae <__addsf3+0x136>
 800030a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800030e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000312:	bf08      	it	eq
 8000314:	f020 0001 	biceq.w	r0, r0, #1
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	4770      	bx	lr
 800031e:	0049      	lsls	r1, r1, #1
 8000320:	eb40 0000 	adc.w	r0, r0, r0
 8000324:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	d1ed      	bne.n	800030a <__addsf3+0x92>
 800032e:	fab0 fc80 	clz	ip, r0
 8000332:	f1ac 0c08 	sub.w	ip, ip, #8
 8000336:	ebb2 020c 	subs.w	r2, r2, ip
 800033a:	fa00 f00c 	lsl.w	r0, r0, ip
 800033e:	bfaa      	itet	ge
 8000340:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000344:	4252      	neglt	r2, r2
 8000346:	4318      	orrge	r0, r3
 8000348:	bfbc      	itt	lt
 800034a:	40d0      	lsrlt	r0, r2
 800034c:	4318      	orrlt	r0, r3
 800034e:	4770      	bx	lr
 8000350:	f092 0f00 	teq	r2, #0
 8000354:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000358:	bf06      	itte	eq
 800035a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800035e:	3201      	addeq	r2, #1
 8000360:	3b01      	subne	r3, #1
 8000362:	e7b5      	b.n	80002d0 <__addsf3+0x58>
 8000364:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000368:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800036c:	bf18      	it	ne
 800036e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000372:	d021      	beq.n	80003b8 <__addsf3+0x140>
 8000374:	ea92 0f03 	teq	r2, r3
 8000378:	d004      	beq.n	8000384 <__addsf3+0x10c>
 800037a:	f092 0f00 	teq	r2, #0
 800037e:	bf08      	it	eq
 8000380:	4608      	moveq	r0, r1
 8000382:	4770      	bx	lr
 8000384:	ea90 0f01 	teq	r0, r1
 8000388:	bf1c      	itt	ne
 800038a:	2000      	movne	r0, #0
 800038c:	4770      	bxne	lr
 800038e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000392:	d104      	bne.n	800039e <__addsf3+0x126>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	bf28      	it	cs
 8000398:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800039c:	4770      	bx	lr
 800039e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003a2:	bf3c      	itt	cc
 80003a4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003a8:	4770      	bxcc	lr
 80003aa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003ae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003b6:	4770      	bx	lr
 80003b8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003bc:	bf16      	itet	ne
 80003be:	4608      	movne	r0, r1
 80003c0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003c4:	4601      	movne	r1, r0
 80003c6:	0242      	lsls	r2, r0, #9
 80003c8:	bf06      	itte	eq
 80003ca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003ce:	ea90 0f01 	teqeq	r0, r1
 80003d2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003d6:	4770      	bx	lr

080003d8 <__aeabi_ui2f>:
 80003d8:	f04f 0300 	mov.w	r3, #0
 80003dc:	e004      	b.n	80003e8 <__aeabi_i2f+0x8>
 80003de:	bf00      	nop

080003e0 <__aeabi_i2f>:
 80003e0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003e4:	bf48      	it	mi
 80003e6:	4240      	negmi	r0, r0
 80003e8:	ea5f 0c00 	movs.w	ip, r0
 80003ec:	bf08      	it	eq
 80003ee:	4770      	bxeq	lr
 80003f0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003f4:	4601      	mov	r1, r0
 80003f6:	f04f 0000 	mov.w	r0, #0
 80003fa:	e01c      	b.n	8000436 <__aeabi_l2f+0x2a>

080003fc <__aeabi_ul2f>:
 80003fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000400:	bf08      	it	eq
 8000402:	4770      	bxeq	lr
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	e00a      	b.n	8000420 <__aeabi_l2f+0x14>
 800040a:	bf00      	nop

0800040c <__aeabi_l2f>:
 800040c:	ea50 0201 	orrs.w	r2, r0, r1
 8000410:	bf08      	it	eq
 8000412:	4770      	bxeq	lr
 8000414:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000418:	d502      	bpl.n	8000420 <__aeabi_l2f+0x14>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	ea5f 0c01 	movs.w	ip, r1
 8000424:	bf02      	ittt	eq
 8000426:	4684      	moveq	ip, r0
 8000428:	4601      	moveq	r1, r0
 800042a:	2000      	moveq	r0, #0
 800042c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000430:	bf08      	it	eq
 8000432:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000436:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800043a:	fabc f28c 	clz	r2, ip
 800043e:	3a08      	subs	r2, #8
 8000440:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000444:	db10      	blt.n	8000468 <__aeabi_l2f+0x5c>
 8000446:	fa01 fc02 	lsl.w	ip, r1, r2
 800044a:	4463      	add	r3, ip
 800044c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000450:	f1c2 0220 	rsb	r2, r2, #32
 8000454:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000458:	fa20 f202 	lsr.w	r2, r0, r2
 800045c:	eb43 0002 	adc.w	r0, r3, r2
 8000460:	bf08      	it	eq
 8000462:	f020 0001 	biceq.w	r0, r0, #1
 8000466:	4770      	bx	lr
 8000468:	f102 0220 	add.w	r2, r2, #32
 800046c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000470:	f1c2 0220 	rsb	r2, r2, #32
 8000474:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000478:	fa21 f202 	lsr.w	r2, r1, r2
 800047c:	eb43 0002 	adc.w	r0, r3, r2
 8000480:	bf08      	it	eq
 8000482:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000486:	4770      	bx	lr

08000488 <__aeabi_f2uiz>:
 8000488:	0042      	lsls	r2, r0, #1
 800048a:	d20e      	bcs.n	80004aa <__aeabi_f2uiz+0x22>
 800048c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000490:	d30b      	bcc.n	80004aa <__aeabi_f2uiz+0x22>
 8000492:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000496:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800049a:	d409      	bmi.n	80004b0 <__aeabi_f2uiz+0x28>
 800049c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004a4:	fa23 f002 	lsr.w	r0, r3, r2
 80004a8:	4770      	bx	lr
 80004aa:	f04f 0000 	mov.w	r0, #0
 80004ae:	4770      	bx	lr
 80004b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004b4:	d101      	bne.n	80004ba <__aeabi_f2uiz+0x32>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d102      	bne.n	80004c0 <__aeabi_f2uiz+0x38>
 80004ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004be:	4770      	bx	lr
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <memcpy>:
 80004c8:	4684      	mov	ip, r0
 80004ca:	ea41 0300 	orr.w	r3, r1, r0
 80004ce:	f013 0303 	ands.w	r3, r3, #3
 80004d2:	d149      	bne.n	8000568 <memcpy+0xa0>
 80004d4:	3a40      	subs	r2, #64	; 0x40
 80004d6:	d323      	bcc.n	8000520 <memcpy+0x58>
 80004d8:	680b      	ldr	r3, [r1, #0]
 80004da:	6003      	str	r3, [r0, #0]
 80004dc:	684b      	ldr	r3, [r1, #4]
 80004de:	6043      	str	r3, [r0, #4]
 80004e0:	688b      	ldr	r3, [r1, #8]
 80004e2:	6083      	str	r3, [r0, #8]
 80004e4:	68cb      	ldr	r3, [r1, #12]
 80004e6:	60c3      	str	r3, [r0, #12]
 80004e8:	690b      	ldr	r3, [r1, #16]
 80004ea:	6103      	str	r3, [r0, #16]
 80004ec:	694b      	ldr	r3, [r1, #20]
 80004ee:	6143      	str	r3, [r0, #20]
 80004f0:	698b      	ldr	r3, [r1, #24]
 80004f2:	6183      	str	r3, [r0, #24]
 80004f4:	69cb      	ldr	r3, [r1, #28]
 80004f6:	61c3      	str	r3, [r0, #28]
 80004f8:	6a0b      	ldr	r3, [r1, #32]
 80004fa:	6203      	str	r3, [r0, #32]
 80004fc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80004fe:	6243      	str	r3, [r0, #36]	; 0x24
 8000500:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000502:	6283      	str	r3, [r0, #40]	; 0x28
 8000504:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000506:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000508:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800050a:	6303      	str	r3, [r0, #48]	; 0x30
 800050c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800050e:	6343      	str	r3, [r0, #52]	; 0x34
 8000510:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8000512:	6383      	str	r3, [r0, #56]	; 0x38
 8000514:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000516:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000518:	3040      	adds	r0, #64	; 0x40
 800051a:	3140      	adds	r1, #64	; 0x40
 800051c:	3a40      	subs	r2, #64	; 0x40
 800051e:	d2db      	bcs.n	80004d8 <memcpy+0x10>
 8000520:	3230      	adds	r2, #48	; 0x30
 8000522:	d30b      	bcc.n	800053c <memcpy+0x74>
 8000524:	680b      	ldr	r3, [r1, #0]
 8000526:	6003      	str	r3, [r0, #0]
 8000528:	684b      	ldr	r3, [r1, #4]
 800052a:	6043      	str	r3, [r0, #4]
 800052c:	688b      	ldr	r3, [r1, #8]
 800052e:	6083      	str	r3, [r0, #8]
 8000530:	68cb      	ldr	r3, [r1, #12]
 8000532:	60c3      	str	r3, [r0, #12]
 8000534:	3010      	adds	r0, #16
 8000536:	3110      	adds	r1, #16
 8000538:	3a10      	subs	r2, #16
 800053a:	d2f3      	bcs.n	8000524 <memcpy+0x5c>
 800053c:	320c      	adds	r2, #12
 800053e:	d305      	bcc.n	800054c <memcpy+0x84>
 8000540:	f851 3b04 	ldr.w	r3, [r1], #4
 8000544:	f840 3b04 	str.w	r3, [r0], #4
 8000548:	3a04      	subs	r2, #4
 800054a:	d2f9      	bcs.n	8000540 <memcpy+0x78>
 800054c:	3204      	adds	r2, #4
 800054e:	d008      	beq.n	8000562 <memcpy+0x9a>
 8000550:	07d2      	lsls	r2, r2, #31
 8000552:	bf1c      	itt	ne
 8000554:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000558:	f800 3b01 	strbne.w	r3, [r0], #1
 800055c:	d301      	bcc.n	8000562 <memcpy+0x9a>
 800055e:	880b      	ldrh	r3, [r1, #0]
 8000560:	8003      	strh	r3, [r0, #0]
 8000562:	4660      	mov	r0, ip
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	2a08      	cmp	r2, #8
 800056a:	d313      	bcc.n	8000594 <memcpy+0xcc>
 800056c:	078b      	lsls	r3, r1, #30
 800056e:	d0b1      	beq.n	80004d4 <memcpy+0xc>
 8000570:	f010 0303 	ands.w	r3, r0, #3
 8000574:	d0ae      	beq.n	80004d4 <memcpy+0xc>
 8000576:	f1c3 0304 	rsb	r3, r3, #4
 800057a:	1ad2      	subs	r2, r2, r3
 800057c:	07db      	lsls	r3, r3, #31
 800057e:	bf1c      	itt	ne
 8000580:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000584:	f800 3b01 	strbne.w	r3, [r0], #1
 8000588:	d3a4      	bcc.n	80004d4 <memcpy+0xc>
 800058a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800058e:	f820 3b02 	strh.w	r3, [r0], #2
 8000592:	e79f      	b.n	80004d4 <memcpy+0xc>
 8000594:	3a04      	subs	r2, #4
 8000596:	d3d9      	bcc.n	800054c <memcpy+0x84>
 8000598:	3a01      	subs	r2, #1
 800059a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800059e:	f800 3b01 	strb.w	r3, [r0], #1
 80005a2:	d2f9      	bcs.n	8000598 <memcpy+0xd0>
 80005a4:	780b      	ldrb	r3, [r1, #0]
 80005a6:	7003      	strb	r3, [r0, #0]
 80005a8:	784b      	ldrb	r3, [r1, #1]
 80005aa:	7043      	strb	r3, [r0, #1]
 80005ac:	788b      	ldrb	r3, [r1, #2]
 80005ae:	7083      	strb	r3, [r0, #2]
 80005b0:	4660      	mov	r0, ip
 80005b2:	4770      	bx	lr

080005b4 <memset>:
 80005b4:	b4f0      	push	{r4, r5, r6, r7}
 80005b6:	0786      	lsls	r6, r0, #30
 80005b8:	d043      	beq.n	8000642 <memset+0x8e>
 80005ba:	1e54      	subs	r4, r2, #1
 80005bc:	2a00      	cmp	r2, #0
 80005be:	d03e      	beq.n	800063e <memset+0x8a>
 80005c0:	b2ca      	uxtb	r2, r1
 80005c2:	4603      	mov	r3, r0
 80005c4:	e002      	b.n	80005cc <memset+0x18>
 80005c6:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80005ca:	d338      	bcc.n	800063e <memset+0x8a>
 80005cc:	f803 2b01 	strb.w	r2, [r3], #1
 80005d0:	079d      	lsls	r5, r3, #30
 80005d2:	d1f8      	bne.n	80005c6 <memset+0x12>
 80005d4:	2c03      	cmp	r4, #3
 80005d6:	d92b      	bls.n	8000630 <memset+0x7c>
 80005d8:	b2cd      	uxtb	r5, r1
 80005da:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80005de:	2c0f      	cmp	r4, #15
 80005e0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80005e4:	d916      	bls.n	8000614 <memset+0x60>
 80005e6:	f1a4 0710 	sub.w	r7, r4, #16
 80005ea:	093f      	lsrs	r7, r7, #4
 80005ec:	f103 0620 	add.w	r6, r3, #32
 80005f0:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80005f4:	f103 0210 	add.w	r2, r3, #16
 80005f8:	e942 5504 	strd	r5, r5, [r2, #-16]
 80005fc:	e942 5502 	strd	r5, r5, [r2, #-8]
 8000600:	3210      	adds	r2, #16
 8000602:	42b2      	cmp	r2, r6
 8000604:	d1f8      	bne.n	80005f8 <memset+0x44>
 8000606:	f004 040f 	and.w	r4, r4, #15
 800060a:	3701      	adds	r7, #1
 800060c:	2c03      	cmp	r4, #3
 800060e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8000612:	d90d      	bls.n	8000630 <memset+0x7c>
 8000614:	461e      	mov	r6, r3
 8000616:	4622      	mov	r2, r4
 8000618:	3a04      	subs	r2, #4
 800061a:	2a03      	cmp	r2, #3
 800061c:	f846 5b04 	str.w	r5, [r6], #4
 8000620:	d8fa      	bhi.n	8000618 <memset+0x64>
 8000622:	1f22      	subs	r2, r4, #4
 8000624:	f022 0203 	bic.w	r2, r2, #3
 8000628:	3204      	adds	r2, #4
 800062a:	4413      	add	r3, r2
 800062c:	f004 0403 	and.w	r4, r4, #3
 8000630:	b12c      	cbz	r4, 800063e <memset+0x8a>
 8000632:	b2c9      	uxtb	r1, r1
 8000634:	441c      	add	r4, r3
 8000636:	f803 1b01 	strb.w	r1, [r3], #1
 800063a:	429c      	cmp	r4, r3
 800063c:	d1fb      	bne.n	8000636 <memset+0x82>
 800063e:	bcf0      	pop	{r4, r5, r6, r7}
 8000640:	4770      	bx	lr
 8000642:	4614      	mov	r4, r2
 8000644:	4603      	mov	r3, r0
 8000646:	e7c5      	b.n	80005d4 <memset+0x20>
	...

08000650 <adc_lld_start_conversion.constprop.40>:
 *
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
  uint32_t mode, cr2;
  const ADCConversionGroup *grpp = adcp->grpp;
 8000650:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <adc_lld_start_conversion.constprop.40+0x70>)
void adc_lld_start_conversion(ADCDriver *adcp) {
 8000652:	b470      	push	{r4, r5, r6}
  const ADCConversionGroup *grpp = adcp->grpp;
 8000654:	6913      	ldr	r3, [r2, #16]

  /* DMA setup.*/
  mode = adcp->dmamode;
 8000656:	6b14      	ldr	r4, [r2, #48]	; 0x30
  if (grpp->circular) {
 8000658:	7818      	ldrb	r0, [r3, #0]
 800065a:	68d1      	ldr	r1, [r2, #12]
 800065c:	b128      	cbz	r0, 800066a <adc_lld_start_conversion.constprop.40+0x1a>
    mode |= STM32_DMA_CR_CIRC;
    if (adcp->depth > 1) {
 800065e:	2901      	cmp	r1, #1
    mode |= STM32_DMA_CR_CIRC;
 8000660:	bf94      	ite	ls
 8000662:	f044 0420 	orrls.w	r4, r4, #32
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
 8000666:	f044 0424 	orrhi.w	r4, r4, #36	; 0x24
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 800066a:	885d      	ldrh	r5, [r3, #2]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 800066c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 800066e:	fb01 f105 	mul.w	r1, r1, r5
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8000672:	6840      	ldr	r0, [r0, #4]
 8000674:	6895      	ldr	r5, [r2, #8]
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 8000676:	6a92      	ldr	r2, [r2, #40]	; 0x28
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8000678:	60c5      	str	r5, [r0, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 800067a:	6041      	str	r1, [r0, #4]
  dmaStreamSetMode(adcp->dmastp, mode);
 800067c:	6004      	str	r4, [r0, #0]
  dmaStreamEnable(adcp->dmastp);
 800067e:	6805      	ldr	r5, [r0, #0]
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_ADON;
 8000680:	e9d3 4103 	ldrd	r4, r1, [r3, #12]
  dmaStreamEnable(adcp->dmastp);
 8000684:	f045 0501 	orr.w	r5, r5, #1
  if ((cr2 & (ADC_CR2_EXTTRIG | ADC_CR2_JEXTTRIG)) == 0)
 8000688:	f411 1f84 	tst.w	r1, #1081344	; 0x108000
  dmaStreamEnable(adcp->dmastp);
 800068c:	6005      	str	r5, [r0, #0]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 800068e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_ADON;
 8000692:	bf14      	ite	ne
 8000694:	f441 7080 	orrne.w	r0, r1, #256	; 0x100
    cr2 |= ADC_CR2_CONT;
 8000698:	f441 7081 	orreq.w	r0, r1, #258	; 0x102
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 800069c:	6054      	str	r4, [r2, #4]
    cr2 |= ADC_CR2_CONT;
 800069e:	f040 0001 	orr.w	r0, r0, #1
  adcp->adc->CR2   = grpp->cr2 | cr2;
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
 80006a2:	69dc      	ldr	r4, [r3, #28]
  adcp->adc->CR2   = grpp->cr2 | cr2;
 80006a4:	4301      	orrs	r1, r0
  adcp->adc->SMPR2 = grpp->smpr2;
 80006a6:	e9d3 6505 	ldrd	r6, r5, [r3, #20]
  adcp->adc->CR2   = grpp->cr2 | cr2;
 80006aa:	6091      	str	r1, [r2, #8]
  adcp->adc->SMPR1 = grpp->smpr1;
 80006ac:	60d6      	str	r6, [r2, #12]
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;
 80006ae:	e9d3 1308 	ldrd	r1, r3, [r3, #32]
  adcp->adc->SMPR2 = grpp->smpr2;
 80006b2:	6115      	str	r5, [r2, #16]
  adcp->adc->SQR1  = grpp->sqr1;
 80006b4:	62d4      	str	r4, [r2, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 80006b6:	6311      	str	r1, [r2, #48]	; 0x30

  /* ADC start by writing ADC_CR2_ADON a second time.*/
  adcp->adc->CR2   = cr2;
}
 80006b8:	bc70      	pop	{r4, r5, r6}
  adcp->adc->SQR3  = grpp->sqr3;
 80006ba:	6353      	str	r3, [r2, #52]	; 0x34
  adcp->adc->CR2   = cr2;
 80006bc:	6090      	str	r0, [r2, #8]
}
 80006be:	4770      	bx	lr
 80006c0:	20000828 	.word	0x20000828
	...

080006d0 <usb_lld_start_in.constprop.18>:
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80006d0:	68c2      	ldr	r2, [r0, #12]
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 80006d2:	b410      	push	{r4}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80006d4:	6953      	ldr	r3, [r2, #20]

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 80006d6:	8a11      	ldrh	r1, [r2, #16]
  n = isp->txsize;
 80006d8:	681a      	ldr	r2, [r3, #0]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80006da:	4c17      	ldr	r4, [pc, #92]	; (8000738 <usb_lld_start_in.constprop.18+0x68>)
 80006dc:	4291      	cmp	r1, r2
 80006de:	bf28      	it	cs
 80006e0:	4611      	movcs	r1, r2
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
 80006e2:	60d9      	str	r1, [r3, #12]
  usb_packet_write_from_buffer(ep, isp->txbuf, n);
 80006e4:	6898      	ldr	r0, [r3, #8]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80006e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80006e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006ec:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80006f0:	681a      	ldr	r2, [r3, #0]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80006f2:	6059      	str	r1, [r3, #4]
  while (i > 0) {
 80006f4:	b189      	cbz	r1, 800071a <usb_lld_start_in.constprop.18+0x4a>
 80006f6:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 80006fa:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	3901      	subs	r1, #1
 8000702:	0849      	lsrs	r1, r1, #1
 8000704:	1d13      	adds	r3, r2, #4
 8000706:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800070a:	e000      	b.n	800070e <usb_lld_start_in.constprop.18+0x3e>
 800070c:	3304      	adds	r3, #4
    w |= *buf++ << 8;
 800070e:	f830 4b02 	ldrh.w	r4, [r0], #2
  while (i > 0) {
 8000712:	4299      	cmp	r1, r3
    *pmap++ = (stm32_usb_pma_t)w;
 8000714:	6014      	str	r4, [r2, #0]
 8000716:	461a      	mov	r2, r3
  while (i > 0) {
 8000718:	d1f8      	bne.n	800070c <usb_lld_start_in.constprop.18+0x3c>

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <usb_lld_start_in.constprop.18+0x68>)
}
 800071c:	bc10      	pop	{r4}
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 800071e:	6813      	ldr	r3, [r2, #0]
 8000720:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000728:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800072c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6013      	str	r3, [r2, #0]
}
 8000736:	4770      	bx	lr
 8000738:	40005c00 	.word	0x40005c00
 800073c:	00000000 	.word	0x00000000

08000740 <usb_lld_start_out.constprop.17>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000740:	68c1      	ldr	r1, [r0, #12]
 8000742:	698a      	ldr	r2, [r1, #24]
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8000744:	6813      	ldr	r3, [r2, #0]
 8000746:	b19b      	cbz	r3, 8000770 <usb_lld_start_out.constprop.17+0x30>
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8000748:	8a49      	ldrh	r1, [r1, #18]
 800074a:	440b      	add	r3, r1
 800074c:	3b01      	subs	r3, #1
 800074e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000752:	8193      	strh	r3, [r2, #12]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8000754:	4a08      	ldr	r2, [pc, #32]	; (8000778 <usb_lld_start_out.constprop.17+0x38>)
 8000756:	6813      	ldr	r3, [r2, #0]
 8000758:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800075c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000760:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6013      	str	r3, [r2, #0]
}
 800076e:	4770      	bx	lr
    osp->rxpkts = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	8193      	strh	r3, [r2, #12]
 8000774:	e7ee      	b.n	8000754 <usb_lld_start_out.constprop.17+0x14>
 8000776:	bf00      	nop
 8000778:	40005c00 	.word	0x40005c00
 800077c:	00000000 	.word	0x00000000

08000780 <gotoXy>:

static void gotoXy(void *ip, uint8_t x, uint8_t y)
{
        SSD1306Driver *drvp = (SSD1306Driver *)ip;

        drvp->x = x;
 8000780:	7301      	strb	r1, [r0, #12]
        drvp->y = y;
 8000782:	7342      	strb	r2, [r0, #13]
}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
	...

08000790 <drawPixel>:
        if (x > SSD1306_WIDTH || y > SSD1306_HEIGHT) return;
 8000790:	2980      	cmp	r1, #128	; 0x80
 8000792:	d81d      	bhi.n	80007d0 <drawPixel+0x40>
 8000794:	2a40      	cmp	r2, #64	; 0x40
 8000796:	d81b      	bhi.n	80007d0 <drawPixel+0x40>
{
 8000798:	b430      	push	{r4, r5}
        if (drvp->inv) {
 800079a:	7b84      	ldrb	r4, [r0, #14]
 800079c:	b114      	cbz	r4, 80007a4 <drawPixel+0x14>
                color = (ssd1306_color_t)!color;
 800079e:	fab3 f383 	clz	r3, r3
 80007a2:	095b      	lsrs	r3, r3, #5
 80007a4:	2501      	movs	r5, #1
 80007a6:	08d4      	lsrs	r4, r2, #3
 80007a8:	eb04 14c4 	add.w	r4, r4, r4, lsl #7
 80007ac:	4421      	add	r1, r4
 80007ae:	4429      	add	r1, r5
 80007b0:	4401      	add	r1, r0
 80007b2:	f002 0207 	and.w	r2, r2, #7
 80007b6:	f991 000f 	ldrsb.w	r0, [r1, #15]
 80007ba:	fa05 f202 	lsl.w	r2, r5, r2
 80007be:	b252      	sxtb	r2, r2
        if (color == SSD1306_COLOR_WHITE) {
 80007c0:	42ab      	cmp	r3, r5
                drvp->fb[x + (y / 8) * SSD1306_WIDTH_FIXED + 1] |= 1 << (y % 8);
 80007c2:	bf0c      	ite	eq
 80007c4:	4302      	orreq	r2, r0
                drvp->fb[x + (y / 8) * SSD1306_WIDTH_FIXED + 1] &= ~(1 << (y % 8));
 80007c6:	ea20 0202 	bicne.w	r2, r0, r2
 80007ca:	73ca      	strb	r2, [r1, #15]
}
 80007cc:	bc30      	pop	{r4, r5}
 80007ce:	4770      	bx	lr
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
	...

080007e0 <PUTC>:

static char PUTC(void *ip, char ch, const ssd1306_font_t *font, ssd1306_color_t color)
{
 80007e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SSD1306Driver *drvp = (SSD1306Driver *)ip;
        uint32_t i, b, j;

        // Check available space in OLED
        if (drvp->x + font->fw >= SSD1306_WIDTH ||
 80007e4:	f890 c00c 	ldrb.w	ip, [r0, #12]
 80007e8:	f892 e000 	ldrb.w	lr, [r2]
{
 80007ec:	b083      	sub	sp, #12
        if (drvp->x + font->fw >= SSD1306_WIDTH ||
 80007ee:	eb0c 070e 	add.w	r7, ip, lr
 80007f2:	2f7f      	cmp	r7, #127	; 0x7f
 80007f4:	dc3c      	bgt.n	8000870 <PUTC+0x90>
                drvp->y + font->fh >= SSD1306_HEIGHT) {
 80007f6:	7854      	ldrb	r4, [r2, #1]
 80007f8:	7b45      	ldrb	r5, [r0, #13]
 80007fa:	4425      	add	r5, r4
        if (drvp->x + font->fw >= SSD1306_WIDTH ||
 80007fc:	2d3f      	cmp	r5, #63	; 0x3f
 80007fe:	dc37      	bgt.n	8000870 <PUTC+0x90>
 8000800:	4698      	mov	r8, r3
 8000802:	9101      	str	r1, [sp, #4]
 8000804:	4616      	mov	r6, r2
 8000806:	4605      	mov	r5, r0
                return 0;
        }

        // Go through font
        for (i = 0; i < font->fh; i++) {
 8000808:	b36c      	cbz	r4, 8000866 <PUTC+0x86>
 800080a:	f04f 0a00 	mov.w	sl, #0
 800080e:	4673      	mov	r3, lr
 8000810:	f1a1 0b20 	sub.w	fp, r1, #32
                b = font->dt[(ch - 32) * font->fh + i];
 8000814:	fb0b a204 	mla	r2, fp, r4, sl
 8000818:	6871      	ldr	r1, [r6, #4]
 800081a:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
                for (j = 0; j < font->fw; j++) {
 800081e:	b1db      	cbz	r3, 8000858 <PUTC+0x78>
 8000820:	2400      	movs	r4, #0
 8000822:	fa5f f98a 	uxtb.w	r9, sl
                        if ((b << j) & 0x8000) {
 8000826:	fa07 f304 	lsl.w	r3, r7, r4
 800082a:	041b      	lsls	r3, r3, #16
                                drawPixel(drvp, drvp->x + j, drvp->y + i, color);
                        } else {
                                drawPixel(drvp, drvp->x + j, drvp->y + i, (ssd1306_color_t)! color);
 800082c:	bf58      	it	pl
 800082e:	fab8 f388 	clzpl	r3, r8
 8000832:	7b6a      	ldrb	r2, [r5, #13]
 8000834:	eb0c 0104 	add.w	r1, ip, r4
 8000838:	444a      	add	r2, r9
                                drawPixel(drvp, drvp->x + j, drvp->y + i, color);
 800083a:	bf4c      	ite	mi
 800083c:	4643      	movmi	r3, r8
                                drawPixel(drvp, drvp->x + j, drvp->y + i, (ssd1306_color_t)! color);
 800083e:	095b      	lsrpl	r3, r3, #5
 8000840:	b2c9      	uxtb	r1, r1
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	4628      	mov	r0, r5
 8000846:	f7ff ffa3 	bl	8000790 <drawPixel>
                for (j = 0; j < font->fw; j++) {
 800084a:	7833      	ldrb	r3, [r6, #0]
 800084c:	3401      	adds	r4, #1
 800084e:	429c      	cmp	r4, r3
 8000850:	f895 c00c 	ldrb.w	ip, [r5, #12]
 8000854:	d3e7      	bcc.n	8000826 <PUTC+0x46>
 8000856:	7874      	ldrb	r4, [r6, #1]
        for (i = 0; i < font->fh; i++) {
 8000858:	f10a 0a01 	add.w	sl, sl, #1
 800085c:	45a2      	cmp	sl, r4
 800085e:	d3d9      	bcc.n	8000814 <PUTC+0x34>
 8000860:	469e      	mov	lr, r3
 8000862:	eb0c 0703 	add.w	r7, ip, r3
                }
        }
        */

        // Increase pointer
        drvp->x += font->fw;
 8000866:	9801      	ldr	r0, [sp, #4]
 8000868:	732f      	strb	r7, [r5, #12]

        // Return character written
        return ch;
}
 800086a:	b003      	add	sp, #12
 800086c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return 0;
 8000870:	2000      	movs	r0, #0
}
 8000872:	b003      	add	sp, #12
 8000874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000880 <PUTS>:

static char PUTS(void *ip, char *str, const ssd1306_font_t *font, ssd1306_color_t color)
{
 8000880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000882:	460c      	mov	r4, r1
        // Write characters
        while (*str) {
 8000884:	7809      	ldrb	r1, [r1, #0]
 8000886:	b181      	cbz	r1, 80008aa <PUTS+0x2a>
 8000888:	4607      	mov	r7, r0
 800088a:	4616      	mov	r6, r2
 800088c:	461d      	mov	r5, r3
 800088e:	e002      	b.n	8000896 <PUTS+0x16>
 8000890:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000894:	b149      	cbz	r1, 80008aa <PUTS+0x2a>
                // Write character by character
                if (PUTC(ip, *str, font, color) != *str) {
 8000896:	462b      	mov	r3, r5
 8000898:	4632      	mov	r2, r6
 800089a:	4638      	mov	r0, r7
 800089c:	f7ff ffa0 	bl	80007e0 <PUTC>
 80008a0:	7823      	ldrb	r3, [r4, #0]
 80008a2:	4298      	cmp	r0, r3
 80008a4:	d0f4      	beq.n	8000890 <PUTS+0x10>
                str++;
        }

        // Everything OK, zero should be returned
        return *str;
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008b0 <toggleInvert>:
        drvp->inv = !drvp->inv;
 80008b0:	7b83      	ldrb	r3, [r0, #14]
 80008b2:	f100 0110 	add.w	r1, r0, #16
 80008b6:	fab3 f383 	clz	r3, r3
 80008ba:	095b      	lsrs	r3, r3, #5
 80008bc:	7383      	strb	r3, [r0, #14]
        for (idx = 0; idx < sizeof(drvp->fb); idx++) {
 80008be:	2200      	movs	r2, #0
                if (idx % SSD1306_WIDTH_FIXED == 0) continue;
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <toggleInvert+0x38>)
 80008c2:	e00b      	b.n	80008dc <toggleInvert+0x2c>
 80008c4:	fba0 c302 	umull	ip, r3, r0, r2
 80008c8:	08db      	lsrs	r3, r3, #3
 80008ca:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b113      	cbz	r3, 80008da <toggleInvert+0x2a>
                drvp->fb[idx] = ~drvp->fb[idx];
 80008d4:	780b      	ldrb	r3, [r1, #0]
 80008d6:	43db      	mvns	r3, r3
 80008d8:	700b      	strb	r3, [r1, #0]
 80008da:	3101      	adds	r1, #1
        for (idx = 0; idx < sizeof(drvp->fb); idx++) {
 80008dc:	3201      	adds	r2, #1
 80008de:	b292      	uxth	r2, r2
 80008e0:	f5b2 6f81 	cmp.w	r2, #1032	; 0x408
 80008e4:	d1ee      	bne.n	80008c4 <toggleInvert+0x14>
}
 80008e6:	4770      	bx	lr
 80008e8:	0fe03f81 	.word	0x0fe03f81
 80008ec:	00000000 	.word	0x00000000

080008f0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80008f0:	b430      	push	{r4, r5}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80008f2:	2320      	movs	r3, #32
 80008f4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <chCoreAllocFromTop+0x38>)
 80008fa:	4249      	negs	r1, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80008fc:	e9d3 4500 	ldrd	r4, r5, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000900:	1a28      	subs	r0, r5, r0
 8000902:	4008      	ands	r0, r1
  prev = p - offset;
 8000904:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000906:	42a2      	cmp	r2, r4
 8000908:	d307      	bcc.n	800091a <chCoreAllocFromTop+0x2a>
 800090a:	4295      	cmp	r5, r2
 800090c:	d305      	bcc.n	800091a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	2300      	movs	r3, #0
 8000912:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000916:	bc30      	pop	{r4, r5}
 8000918:	4770      	bx	lr
    return NULL;
 800091a:	2000      	movs	r0, #0
 800091c:	2300      	movs	r3, #0
 800091e:	f383 8811 	msr	BASEPRI, r3
}
 8000922:	bc30      	pop	{r4, r5}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000f50 	.word	0x20000f50
 800092c:	00000000 	.word	0x00000000

08000930 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000930:	4a02      	ldr	r2, [pc, #8]	; (800093c <notify1+0xc>)
 8000932:	68d3      	ldr	r3, [r2, #12]
 8000934:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000938:	60d3      	str	r3, [r2, #12]
}
 800093a:	4770      	bx	lr
 800093c:	40013800 	.word	0x40013800

08000940 <adcerrorcallback>:
static void adcerrorcallback(ADCDriver *adcp, adcerror_t err) 
{

        (void)adcp;
        (void)err;
}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
	...

08000950 <adccallback>:
        ad0in = (float) samples2[0];
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <adccallback+0x10>)
{
 8000952:	b510      	push	{r4, lr}
        ad0in = (float) samples2[0];
 8000954:	8818      	ldrh	r0, [r3, #0]
 8000956:	f7ff fd3f 	bl	80003d8 <__aeabi_ui2f>
 800095a:	4c02      	ldr	r4, [pc, #8]	; (8000964 <adccallback+0x14>)
 800095c:	6020      	str	r0, [r4, #0]
}
 800095e:	bd10      	pop	{r4, pc}
 8000960:	20000fdc 	.word	0x20000fdc
 8000964:	20000db0 	.word	0x20000db0
	...

08000970 <_port_irq_epilogue>:
 8000970:	2320      	movs	r3, #32
 8000972:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <_port_irq_epilogue+0x3c>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800097e:	d102      	bne.n	8000986 <_port_irq_epilogue+0x16>
 8000980:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000984:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000986:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800098a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800098e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000990:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000992:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000996:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <_port_irq_epilogue+0x40>)
 8000998:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800099a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800099c:	6889      	ldr	r1, [r1, #8]
 800099e:	6892      	ldr	r2, [r2, #8]
 80009a0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 80009a2:	bf8c      	ite	hi
 80009a4:	4a03      	ldrhi	r2, [pc, #12]	; (80009b4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 80009a6:	4a04      	ldrls	r2, [pc, #16]	; (80009b8 <_port_irq_epilogue+0x48>)
 80009a8:	619a      	str	r2, [r3, #24]
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00
 80009b0:	20000db4 	.word	0x20000db4
 80009b4:	08000263 	.word	0x08000263
 80009b8:	08000266 	.word	0x08000266
 80009bc:	00000000 	.word	0x00000000

080009c0 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80009c2:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80009c4:	e9d3 4200 	ldrd	r4, r2, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80009c8:	4249      	negs	r1, r1
 80009ca:	1a10      	subs	r0, r2, r0
 80009cc:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80009ce:	42a0      	cmp	r0, r4
 80009d0:	d304      	bcc.n	80009dc <chCoreAllocAlignedI+0x1c>
 80009d2:	4282      	cmp	r2, r0
 80009d4:	d302      	bcc.n	80009dc <chCoreAllocAlignedI+0x1c>
  ch_memcore.topmem = prev;
 80009d6:	6058      	str	r0, [r3, #4]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80009d8:	bc10      	pop	{r4}
 80009da:	4770      	bx	lr
    return NULL;
 80009dc:	2000      	movs	r0, #0
 80009de:	bc10      	pop	{r4}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000f50 	.word	0x20000f50
	...

080009f0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <chTMStopMeasurementX+0x44>)
 80009f4:	685b      	ldr	r3, [r3, #4]
  tmp->last = (now - tmp->last) - offset;
 80009f6:	6881      	ldr	r1, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80009f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
  tmp->last = (now - tmp->last) - offset;
 80009fa:	1a5b      	subs	r3, r3, r1
 80009fc:	1a9b      	subs	r3, r3, r2
  tmp->n++;
 80009fe:	68c2      	ldr	r2, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000a00:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
  tmp->cumulative += (rttime_t)tmp->last;
 8000a04:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
 8000a08:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 8000a0a:	3201      	adds	r2, #1
  tmp->cumulative += (rttime_t)tmp->last;
 8000a0c:	eb14 0b03 	adds.w	fp, r4, r3
  tmp->last = (now - tmp->last) - offset;
 8000a10:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if (tmp->last < tmp->best) {
 8000a14:	6802      	ldr	r2, [r0, #0]
  tmp->cumulative += (rttime_t)tmp->last;
 8000a16:	f145 0c00 	adc.w	ip, r5, #0
  if (tmp->last > tmp->worst) {
 8000a1a:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000a1c:	bf88      	it	hi
 8000a1e:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8000a20:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000a22:	e9c0 bc04 	strd	fp, ip, [r0, #16]
}
 8000a26:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
    tmp->best = tmp->last;
 8000a2a:	bf38      	it	cc
 8000a2c:	6003      	strcc	r3, [r0, #0]
}
 8000a2e:	4770      	bx	lr
 8000a30:	e0001000 	.word	0xe0001000
 8000a34:	20000db4 	.word	0x20000db4
	...

08000a40 <chTMStartMeasurementX>:
 8000a40:	4b01      	ldr	r3, [pc, #4]	; (8000a48 <chTMStartMeasurementX+0x8>)
 8000a42:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8000a44:	6083      	str	r3, [r0, #8]
}
 8000a46:	4770      	bx	lr
 8000a48:	e0001000 	.word	0xe0001000
 8000a4c:	00000000 	.word	0x00000000

08000a50 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000a50:	2320      	movs	r3, #32
 8000a52:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000a56:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000a5a:	2b07      	cmp	r3, #7
 8000a5c:	d80e      	bhi.n	8000a7c <wakeup+0x2c>
 8000a5e:	e8df f003 	tbb	[pc, r3]
 8000a62:	0d28      	.short	0x0d28
 8000a64:	0408240d 	.word	0x0408240d
 8000a68:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
 8000a6a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000a6c:	6893      	ldr	r3, [r2, #8]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000a72:	e9d0 2300 	ldrd	r2, r3, [r0]
 8000a76:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000a78:	6802      	ldr	r2, [r0, #0]
 8000a7a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 8000a7c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8000a7e:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000a80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8000a84:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8000a88:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8000a8a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000a8e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	428a      	cmp	r2, r1
 8000a94:	d2fb      	bcs.n	8000a8e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	2100      	movs	r1, #0
 8000a9a:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000a9e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000aa0:	6058      	str	r0, [r3, #4]
 8000aa2:	f381 8811 	msr	BASEPRI, r1
}
 8000aa6:	bc10      	pop	{r4}
 8000aa8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8000aaa:	2200      	movs	r2, #0
 8000aac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e7e4      	b.n	8000a7c <wakeup+0x2c>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f383 8811 	msr	BASEPRI, r3
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000db4 	.word	0x20000db4

08000ac0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8000ac0:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 8000ac2:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 8000ac6:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 8000ac8:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 8000acc:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000ace:	689a      	ldr	r2, [r3, #8]
 8000ad0:	4282      	cmp	r2, r0
 8000ad2:	d2fb      	bcs.n	8000acc <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 8000ad4:	685a      	ldr	r2, [r3, #4]
}
 8000ad6:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 8000ad8:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8000adc:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8000ade:	6059      	str	r1, [r3, #4]
}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000db4 	.word	0x20000db4
	...

08000af0 <chEvtBroadcastFlagsI.constprop.31>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000af2:	4f16      	ldr	r7, [pc, #88]	; (8000b4c <chEvtBroadcastFlagsI.constprop.31+0x5c>)
 8000af4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000af8:	42bc      	cmp	r4, r7
 8000afa:	d020      	beq.n	8000b3e <chEvtBroadcastFlagsI.constprop.31+0x4e>
 8000afc:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000afe:	2600      	movs	r6, #0
 8000b00:	e004      	b.n	8000b0c <chEvtBroadcastFlagsI.constprop.31+0x1c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000b02:	2a0b      	cmp	r2, #11
 8000b04:	d01c      	beq.n	8000b40 <chEvtBroadcastFlagsI.constprop.31+0x50>
    elp = elp->next;
 8000b06:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000b08:	42bc      	cmp	r4, r7
 8000b0a:	d018      	beq.n	8000b3e <chEvtBroadcastFlagsI.constprop.31+0x4e>
    elp->flags |= flags;
 8000b0c:	68e3      	ldr	r3, [r4, #12]
 8000b0e:	432b      	orrs	r3, r5
 8000b10:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000b12:	b115      	cbz	r5, 8000b1a <chEvtBroadcastFlagsI.constprop.31+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000b14:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000b16:	421d      	tst	r5, r3
 8000b18:	d0f5      	beq.n	8000b06 <chEvtBroadcastFlagsI.constprop.31+0x16>
  tp->epending |= events;
 8000b1a:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 8000b1e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000b20:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8000b24:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000b26:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000b28:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000b2a:	d1ea      	bne.n	8000b02 <chEvtBroadcastFlagsI.constprop.31+0x12>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000b2c:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000b2e:	4213      	tst	r3, r2
 8000b30:	d0e9      	beq.n	8000b06 <chEvtBroadcastFlagsI.constprop.31+0x16>
    tp->u.rdymsg = MSG_OK;
 8000b32:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000b34:	f7ff ffc4 	bl	8000ac0 <chSchReadyI>
    elp = elp->next;
 8000b38:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000b3a:	42bc      	cmp	r4, r7
 8000b3c:	d1e6      	bne.n	8000b0c <chEvtBroadcastFlagsI.constprop.31+0x1c>
}
 8000b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000b40:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000b42:	ea32 0303 	bics.w	r3, r2, r3
 8000b46:	d1de      	bne.n	8000b06 <chEvtBroadcastFlagsI.constprop.31+0x16>
 8000b48:	e7f3      	b.n	8000b32 <chEvtBroadcastFlagsI.constprop.31+0x42>
 8000b4a:	bf00      	nop
 8000b4c:	20000894 	.word	0x20000894

08000b50 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8000b50:	6803      	ldr	r3, [r0, #0]
 8000b52:	b143      	cbz	r3, 8000b66 <chThdResumeI+0x16>
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8000b54:	b410      	push	{r4}
 8000b56:	4602      	mov	r2, r0
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8000b58:	2400      	movs	r4, #0
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8000b5a:	4618      	mov	r0, r3
    *trp = NULL;
 8000b5c:	6014      	str	r4, [r2, #0]
    tp->u.rdymsg = msg;
 8000b5e:	6259      	str	r1, [r3, #36]	; 0x24
  }
}
 8000b60:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
 8000b62:	f7ff bfad 	b.w	8000ac0 <chSchReadyI>
 8000b66:	4770      	bx	lr
	...

08000b70 <adc_lld_serve_rx_interrupt>:
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8000b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
 8000b74:	070d      	lsls	r5, r1, #28
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8000b76:	4604      	mov	r4, r0
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
 8000b78:	d525      	bpl.n	8000bc6 <adc_lld_serve_rx_interrupt+0x56>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8000b7a:	230e      	movs	r3, #14
  adcp->adc->CR2 = 0;
 8000b7c:	2100      	movs	r1, #0
  dmaStreamDisable(adcp->dmastp);
 8000b7e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8000b80:	6907      	ldr	r7, [r0, #16]
  dmaStreamDisable(adcp->dmastp);
 8000b82:	6856      	ldr	r6, [r2, #4]
 8000b84:	6835      	ldr	r5, [r6, #0]
 8000b86:	f025 050f 	bic.w	r5, r5, #15
 8000b8a:	6035      	str	r5, [r6, #0]
 8000b8c:	7b56      	ldrb	r6, [r2, #13]
 8000b8e:	6815      	ldr	r5, [r2, #0]
 8000b90:	40b3      	lsls	r3, r6
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8000b92:	68ba      	ldr	r2, [r7, #8]
  dmaStreamDisable(adcp->dmastp);
 8000b94:	606b      	str	r3, [r5, #4]
  adcp->adc->CR2 = 0;
 8000b96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b98:	6099      	str	r1, [r3, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d044      	beq.n	8000c28 <adc_lld_serve_rx_interrupt+0xb8>
 8000b9e:	2305      	movs	r3, #5
 8000ba0:	7003      	strb	r3, [r0, #0]
 8000ba2:	4790      	blx	r2
 8000ba4:	7823      	ldrb	r3, [r4, #0]
 8000ba6:	2b05      	cmp	r3, #5
 8000ba8:	d03e      	beq.n	8000c28 <adc_lld_serve_rx_interrupt+0xb8>
 8000baa:	2320      	movs	r3, #32
 8000bac:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bb4:	f104 0014 	add.w	r0, r4, #20
 8000bb8:	f7ff ffca 	bl	8000b50 <chThdResumeI>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f383 8811 	msr	BASEPRI, r3
}
 8000bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 8000bc6:	078a      	lsls	r2, r1, #30
 8000bc8:	d525      	bpl.n	8000c16 <adc_lld_serve_rx_interrupt+0xa6>
      _adc_isr_full_code(adcp);
 8000bca:	6903      	ldr	r3, [r0, #16]
 8000bcc:	781a      	ldrb	r2, [r3, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	d12e      	bne.n	8000c32 <adc_lld_serve_rx_interrupt+0xc2>
  dmaStreamDisable(adcp->dmastp);
 8000bd4:	210e      	movs	r1, #14
 8000bd6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000bd8:	686f      	ldr	r7, [r5, #4]
 8000bda:	683e      	ldr	r6, [r7, #0]
 8000bdc:	f026 060f 	bic.w	r6, r6, #15
 8000be0:	603e      	str	r6, [r7, #0]
 8000be2:	7b6f      	ldrb	r7, [r5, #13]
 8000be4:	682e      	ldr	r6, [r5, #0]
  adcp->adc->CR2 = 0;
 8000be6:	6a85      	ldr	r5, [r0, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 8000be8:	40b9      	lsls	r1, r7
 8000bea:	6071      	str	r1, [r6, #4]
  adcp->adc->CR2 = 0;
 8000bec:	60aa      	str	r2, [r5, #8]
      _adc_isr_full_code(adcp);
 8000bee:	b35b      	cbz	r3, 8000c48 <adc_lld_serve_rx_interrupt+0xd8>
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	7002      	strb	r2, [r0, #0]
 8000bf4:	4798      	blx	r3
 8000bf6:	7823      	ldrb	r3, [r4, #0]
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	d025      	beq.n	8000c48 <adc_lld_serve_rx_interrupt+0xd8>
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	f383 8811 	msr	BASEPRI, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f104 0014 	add.w	r0, r4, #20
 8000c08:	f7ff ffa2 	bl	8000b50 <chThdResumeI>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f383 8811 	msr	BASEPRI, r3
}
 8000c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 8000c16:	074b      	lsls	r3, r1, #29
 8000c18:	d5d3      	bpl.n	8000bc2 <adc_lld_serve_rx_interrupt+0x52>
      _adc_isr_half_code(adcp);
 8000c1a:	6903      	ldr	r3, [r0, #16]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0cf      	beq.n	8000bc2 <adc_lld_serve_rx_interrupt+0x52>
}
 8000c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _adc_isr_half_code(adcp);
 8000c26:	4718      	bx	r3
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8000c28:	2202      	movs	r2, #2
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	7022      	strb	r2, [r4, #0]
 8000c2e:	6123      	str	r3, [r4, #16]
 8000c30:	e7bb      	b.n	8000baa <adc_lld_serve_rx_interrupt+0x3a>
      _adc_isr_full_code(adcp);
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0c5      	beq.n	8000bc2 <adc_lld_serve_rx_interrupt+0x52>
 8000c36:	2204      	movs	r2, #4
 8000c38:	7002      	strb	r2, [r0, #0]
 8000c3a:	4798      	blx	r3
 8000c3c:	7823      	ldrb	r3, [r4, #0]
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d1bf      	bne.n	8000bc2 <adc_lld_serve_rx_interrupt+0x52>
 8000c42:	2303      	movs	r3, #3
 8000c44:	7023      	strb	r3, [r4, #0]
 8000c46:	e7bc      	b.n	8000bc2 <adc_lld_serve_rx_interrupt+0x52>
 8000c48:	2202      	movs	r2, #2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	7022      	strb	r2, [r4, #0]
 8000c4e:	6123      	str	r3, [r4, #16]
 8000c50:	e7d4      	b.n	8000bfc <adc_lld_serve_rx_interrupt+0x8c>
 8000c52:	bf00      	nop
	...

08000c60 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000c60:	e7fe      	b.n	8000c60 <_idle_thread>
 8000c62:	bf00      	nop
	...

08000c70 <i2c_lld_serve_rx_end_irq>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8000c70:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000c72:	f011 0408 	ands.w	r4, r1, #8
 8000c76:	d121      	bne.n	8000cbc <i2c_lld_serve_rx_end_irq+0x4c>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmarx);
 8000c78:	220e      	movs	r2, #14
 8000c7a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  I2C_TypeDef *dp = i2cp->i2c;
 8000c7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  dmaStreamDisable(i2cp->dmarx);
 8000c7e:	684e      	ldr	r6, [r1, #4]
 8000c80:	6835      	ldr	r5, [r6, #0]
 8000c82:	f025 050f 	bic.w	r5, r5, #15
 8000c86:	6035      	str	r5, [r6, #0]
 8000c88:	7b4d      	ldrb	r5, [r1, #13]
 8000c8a:	6809      	ldr	r1, [r1, #0]
 8000c8c:	40aa      	lsls	r2, r5
 8000c8e:	604a      	str	r2, [r1, #4]

  dp->CR2 &= ~I2C_CR2_LAST;
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	2120      	movs	r1, #32
 8000c94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c98:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ca0:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	f381 8811 	msr	BASEPRI, r1
 8000cae:	301c      	adds	r0, #28
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	f7ff ff4d 	bl	8000b50 <chThdResumeI>
 8000cb6:	f384 8811 	msr	BASEPRI, r4
  _i2c_wakeup_isr(i2cp);
}
 8000cba:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000cbe:	4b02      	ldr	r3, [pc, #8]	; (8000cc8 <i2c_lld_serve_rx_end_irq+0x58>)
 8000cc0:	4a02      	ldr	r2, [pc, #8]	; (8000ccc <i2c_lld_serve_rx_end_irq+0x5c>)
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cc4:	e7fe      	b.n	8000cc4 <i2c_lld_serve_rx_end_irq+0x54>
 8000cc6:	bf00      	nop
 8000cc8:	20000db4 	.word	0x20000db4
 8000ccc:	0800458c 	.word	0x0800458c

08000cd0 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000cd0:	070b      	lsls	r3, r1, #28
 8000cd2:	d412      	bmi.n	8000cfa <i2c_lld_serve_tx_end_irq+0x2a>
  I2C_TypeDef *dp = i2cp->i2c;
 8000cd4:	e9d0 200c 	ldrd	r2, r0, [r0, #48]	; 0x30
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8000cd8:	230e      	movs	r3, #14
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8000cda:	b430      	push	{r4, r5}
  dmaStreamDisable(i2cp->dmatx);
 8000cdc:	e9d2 5400 	ldrd	r5, r4, [r2]
 8000ce0:	6821      	ldr	r1, [r4, #0]
 8000ce2:	f021 010f 	bic.w	r1, r1, #15
 8000ce6:	6021      	str	r1, [r4, #0]
 8000ce8:	7b52      	ldrb	r2, [r2, #13]
 8000cea:	4093      	lsls	r3, r2
 8000cec:	606b      	str	r3, [r5, #4]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8000cee:	6843      	ldr	r3, [r0, #4]
}
 8000cf0:	bc30      	pop	{r4, r5}
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8000cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf6:	6043      	str	r3, [r0, #4]
}
 8000cf8:	4770      	bx	lr
 8000cfa:	b672      	cpsid	i
 8000cfc:	4b01      	ldr	r3, [pc, #4]	; (8000d04 <i2c_lld_serve_tx_end_irq+0x34>)
 8000cfe:	4a02      	ldr	r2, [pc, #8]	; (8000d08 <i2c_lld_serve_tx_end_irq+0x38>)
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d02:	e7fe      	b.n	8000d02 <i2c_lld_serve_tx_end_irq+0x32>
 8000d04:	20000db4 	.word	0x20000db4
 8000d08:	0800458c 	.word	0x0800458c
 8000d0c:	00000000 	.word	0x00000000

08000d10 <_pal_lld_setgroupmode>:
  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 8000d10:	2300      	movs	r3, #0
                           iomode_t mode) {
 8000d12:	b4f0      	push	{r4, r5, r6, r7}
  mh = ml = crh = crl = 0;
 8000d14:	461d      	mov	r5, r3
 8000d16:	461c      	mov	r4, r3
 8000d18:	461e      	mov	r6, r3
  cfg = cfgtab[mode];
 8000d1a:	2708      	movs	r7, #8
 8000d1c:	f8df c048 	ldr.w	ip, [pc, #72]	; 8000d68 <_pal_lld_setgroupmode+0x58>
 8000d20:	f81c 2002 	ldrb.w	r2, [ip, r2]
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 8000d24:	f011 0f80 	tst.w	r1, #128	; 0x80
    ml <<= 4;
 8000d28:	ea4f 1404 	mov.w	r4, r4, lsl #4
    crl <<= 4;
 8000d2c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    mh <<= 4;
 8000d30:	ea4f 1606 	mov.w	r6, r6, lsl #4
    crh <<= 4;
 8000d34:	ea4f 1505 	mov.w	r5, r5, lsl #4
      ml |= 0xf;
 8000d38:	bf0c      	ite	eq
 8000d3a:	f044 040f 	orreq.w	r4, r4, #15
    else
      crl |= cfg;
 8000d3e:	4313      	orrne	r3, r2
    if ((mask & 0x8000) == 0)
 8000d40:	f411 4f00 	tst.w	r1, #32768	; 0x8000
      mh |= 0xf;
 8000d44:	bf0c      	ite	eq
 8000d46:	f046 060f 	orreq.w	r6, r6, #15
    else
      crh |= cfg;
 8000d4a:	4315      	orrne	r5, r2
  for (i = 0; i < 8; i++) {
 8000d4c:	3f01      	subs	r7, #1
    mask <<= 1;
 8000d4e:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = 0; i < 8; i++) {
 8000d52:	d1e7      	bne.n	8000d24 <_pal_lld_setgroupmode+0x14>
  }
  port->CRH = (port->CRH & mh) | crh;
 8000d54:	6842      	ldr	r2, [r0, #4]
 8000d56:	4016      	ands	r6, r2
 8000d58:	4335      	orrs	r5, r6
 8000d5a:	6045      	str	r5, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 8000d5c:	6802      	ldr	r2, [r0, #0]
 8000d5e:	4014      	ands	r4, r2
 8000d60:	4323      	orrs	r3, r4
 8000d62:	6003      	str	r3, [r0, #0]
}
 8000d64:	bcf0      	pop	{r4, r5, r6, r7}
 8000d66:	4770      	bx	lr
 8000d68:	08004528 	.word	0x08004528
 8000d6c:	00000000 	.word	0x00000000

08000d70 <dmaStreamAllocI.part.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    osalDbgCheck(false);
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
 8000d74:	2701      	movs	r7, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8000d76:	4c28      	ldr	r4, [pc, #160]	; (8000e18 <dmaStreamAllocI.part.0+0xa8>)
    uint32_t mask = (1U << i);
 8000d78:	fa07 f600 	lsl.w	r6, r7, r0
    if ((dma.allocated_mask & mask) == 0U) {
 8000d7c:	6825      	ldr	r5, [r4, #0]
 8000d7e:	422e      	tst	r6, r5
 8000d80:	d002      	beq.n	8000d88 <dmaStreamAllocI.part.0+0x18>

      return dmastp;
    }
  }

  return NULL;
 8000d82:	2000      	movs	r0, #0
}
 8000d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rccEnableDMA1(true);
 8000d88:	f8df c090 	ldr.w	ip, [pc, #144]	; 8000e1c <dmaStreamAllocI.part.0+0xac>
      dma.allocated_mask  |= mask;
 8000d8c:	4335      	orrs	r5, r6
 8000d8e:	6025      	str	r5, [r4, #0]
        rccEnableDMA1(true);
 8000d90:	f8dc 9014 	ldr.w	r9, [ip, #20]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8000d94:	f8df e088 	ldr.w	lr, [pc, #136]	; 8000e20 <dmaStreamAllocI.part.0+0xb0>
      dma.streams[i].func  = func;
 8000d98:	1c45      	adds	r5, r0, #1
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8000d9a:	ea4f 1800 	mov.w	r8, r0, lsl #4
      dma.streams[i].func  = func;
 8000d9e:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
        rccEnableDMA1(true);
 8000da2:	f049 0001 	orr.w	r0, r9, #1
      dma.streams[i].param = param;
 8000da6:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8000daa:	eb0e 0908 	add.w	r9, lr, r8
      dma.streams[i].param = param;
 8000dae:	606b      	str	r3, [r5, #4]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8000db0:	6862      	ldr	r2, [r4, #4]
 8000db2:	f8d9 3008 	ldr.w	r3, [r9, #8]
        rccEnableDMA1(true);
 8000db6:	f8cc 0014 	str.w	r0, [ip, #20]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8000dba:	421a      	tst	r2, r3
        rccEnableDMA1(true);
 8000dbc:	f8dc 0014 	ldr.w	r0, [ip, #20]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8000dc0:	d012      	beq.n	8000de8 <dmaStreamAllocI.part.0+0x78>
      dmaStreamDisable(dmastp);
 8000dc2:	210e      	movs	r1, #14
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8000dc4:	2500      	movs	r5, #0
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8000dc6:	eb0e 0008 	add.w	r0, lr, r8
      dmaStreamDisable(dmastp);
 8000dca:	6843      	ldr	r3, [r0, #4]
        dma.isr_mask |= mask;
 8000dcc:	4316      	orrs	r6, r2
 8000dce:	6066      	str	r6, [r4, #4]
      dmaStreamDisable(dmastp);
 8000dd0:	7b42      	ldrb	r2, [r0, #13]
 8000dd2:	681c      	ldr	r4, [r3, #0]
 8000dd4:	f85e 7008 	ldr.w	r7, [lr, r8]
 8000dd8:	f024 040f 	bic.w	r4, r4, #15
 8000ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8000de0:	601c      	str	r4, [r3, #0]
 8000de2:	607a      	str	r2, [r7, #4]
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8000de4:	601d      	str	r5, [r3, #0]
 8000de6:	e7cd      	b.n	8000d84 <dmaStreamAllocI.part.0+0x14>
          nvicEnableVector(dmastp->vector, priority);
 8000de8:	f899 000f 	ldrb.w	r0, [r9, #15]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000dec:	0109      	lsls	r1, r1, #4
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000dee:	0943      	lsrs	r3, r0, #5
 8000df0:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000df2:	f100 4560 	add.w	r5, r0, #3758096384	; 0xe0000000
 8000df6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000dfa:	f000 001f 	and.w	r0, r0, #31
 8000dfe:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000e02:	4087      	lsls	r7, r0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000e04:	b2c9      	uxtb	r1, r1
 8000e06:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8000e0a:	f885 1300 	strb.w	r1, [r5, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000e0e:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000e12:	601f      	str	r7, [r3, #0]
 8000e14:	e7d5      	b.n	8000dc2 <dmaStreamAllocI.part.0+0x52>
 8000e16:	bf00      	nop
 8000e18:	20000f74 	.word	0x20000f74
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	08004464 	.word	0x08004464
	...

08000e30 <i2c_lld_start>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8000e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  I2C_TypeDef *dp = i2cp->i2c;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8000e32:	7806      	ldrb	r6, [r0, #0]
void i2c_lld_start(I2CDriver *i2cp) {
 8000e34:	4605      	mov	r5, r0
  if (i2cp->state == I2C_STOP) {
 8000e36:	2e01      	cmp	r6, #1
  I2C_TypeDef *dp = i2cp->i2c;
 8000e38:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if (i2cp->state == I2C_STOP) {
 8000e3a:	d03d      	beq.n	8000eb8 <i2c_lld_start+0x88>
  I2C_TypeDef *dp = i2cp->i2c;
 8000e3c:	4623      	mov	r3, r4
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8000e3e:	e9d5 700b 	ldrd	r7, r0, [r5, #44]	; 0x2c

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8000e42:	f44f 6110 	mov.w	r1, #2304	; 0x900
  dp->CR1 = I2C_CR1_SWRST;
 8000e46:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
  dp->CR1 = 0;
 8000e4a:	2200      	movs	r2, #0
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8000e4c:	f64f 76c0 	movw	r6, #65472	; 0xffc0
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8000e50:	f8d7 e004 	ldr.w	lr, [r7, #4]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8000e54:	6847      	ldr	r7, [r0, #4]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8000e56:	f104 0010 	add.w	r0, r4, #16
 8000e5a:	f8ce 0008 	str.w	r0, [lr, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8000e5e:	60b8      	str	r0, [r7, #8]
  dp->CR1 = I2C_CR1_SWRST;
 8000e60:	f8c4 c000 	str.w	ip, [r4]
  dp->CR1 = 0;
 8000e64:	6022      	str	r2, [r4, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8000e66:	6061      	str	r1, [r4, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8000e68:	6859      	ldr	r1, [r3, #4]

  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
 8000e6a:	686d      	ldr	r5, [r5, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8000e6c:	4031      	ands	r1, r6
  int32_t clock_speed = i2cp->config->clock_speed;
 8000e6e:	6868      	ldr	r0, [r5, #4]
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 8000e70:	7a2f      	ldrb	r7, [r5, #8]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8000e72:	6059      	str	r1, [r3, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8000e74:	6859      	ldr	r1, [r3, #4]
  if (clock_speed <= 100000) {
 8000e76:	4e46      	ldr	r6, [pc, #280]	; (8000f90 <i2c_lld_start+0x160>)
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8000e78:	f041 0124 	orr.w	r1, r1, #36	; 0x24
  if (clock_speed <= 100000) {
 8000e7c:	42b0      	cmp	r0, r6
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8000e7e:	6059      	str	r1, [r3, #4]
  if (clock_speed <= 100000) {
 8000e80:	dd5c      	ble.n	8000f3c <i2c_lld_start+0x10c>
  else if (clock_speed <= 400000) {
 8000e82:	4944      	ldr	r1, [pc, #272]	; (8000f94 <i2c_lld_start+0x164>)
 8000e84:	4288      	cmp	r0, r1
 8000e86:	dc07      	bgt.n	8000e98 <i2c_lld_start+0x68>
    if (duty == FAST_DUTY_CYCLE_2) {
 8000e88:	2f02      	cmp	r7, #2
 8000e8a:	d069      	beq.n	8000f60 <i2c_lld_start+0x130>
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8000e8c:	2f03      	cmp	r7, #3
 8000e8e:	d072      	beq.n	8000f76 <i2c_lld_start+0x146>
 8000e90:	f648 72ff 	movw	r2, #36863	; 0x8fff
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8000e94:	210b      	movs	r1, #11
 8000e96:	6219      	str	r1, [r3, #32]
  dp->CCR = regCCR;
 8000e98:	61da      	str	r2, [r3, #28]
  switch (opmode) {
 8000e9a:	7829      	ldrb	r1, [r5, #0]
  regCR1 = dp->CR1;
 8000e9c:	681a      	ldr	r2, [r3, #0]
  switch (opmode) {
 8000e9e:	2902      	cmp	r1, #2
  regCR1 = dp->CR1;
 8000ea0:	b292      	uxth	r2, r2
  switch (opmode) {
 8000ea2:	d057      	beq.n	8000f54 <i2c_lld_start+0x124>
 8000ea4:	2903      	cmp	r1, #3
 8000ea6:	d052      	beq.n	8000f4e <i2c_lld_start+0x11e>
 8000ea8:	2901      	cmp	r1, #1
 8000eaa:	d043      	beq.n	8000f34 <i2c_lld_start+0x104>
  dp->CR1 = regCR1;
 8000eac:	601a      	str	r2, [r3, #0]
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6023      	str	r3, [r4, #0]
}
 8000eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8000eb8:	219a      	movs	r1, #154	; 0x9a
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8000eba:	228a      	movs	r2, #138	; 0x8a
    if (&I2CD1 == i2cp) {
 8000ebc:	4b36      	ldr	r3, [pc, #216]	; (8000f98 <i2c_lld_start+0x168>)
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8000ebe:	e9c0 2109 	strd	r2, r1, [r0, #36]	; 0x24
    if (&I2CD1 == i2cp) {
 8000ec2:	4298      	cmp	r0, r3
 8000ec4:	d1ba      	bne.n	8000e3c <i2c_lld_start+0xc>
      rccResetI2C1();
 8000ec6:	4f35      	ldr	r7, [pc, #212]	; (8000f9c <i2c_lld_start+0x16c>)
 8000ec8:	4603      	mov	r3, r0
 8000eca:	6939      	ldr	r1, [r7, #16]
 8000ecc:	4a34      	ldr	r2, [pc, #208]	; (8000fa0 <i2c_lld_start+0x170>)
 8000ece:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000ed2:	6139      	str	r1, [r7, #16]
 8000ed4:	6938      	ldr	r0, [r7, #16]
 8000ed6:	2105      	movs	r1, #5
 8000ed8:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
 8000edc:	6138      	str	r0, [r7, #16]
 8000ede:	2006      	movs	r0, #6
 8000ee0:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8000ee4:	f7ff ff44 	bl	8000d70 <dmaStreamAllocI.part.0>
 8000ee8:	2105      	movs	r1, #5
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C1_RX_DMA_STREAM,
 8000eea:	62e8      	str	r0, [r5, #44]	; 0x2c
 8000eec:	462b      	mov	r3, r5
 8000eee:	4608      	mov	r0, r1
 8000ef0:	4a2c      	ldr	r2, [pc, #176]	; (8000fa4 <i2c_lld_start+0x174>)
 8000ef2:	f7ff ff3d 	bl	8000d70 <dmaStreamAllocI.part.0>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000ef6:	2150      	movs	r1, #80	; 0x50
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000ef8:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
      rccEnableI2C1(true);
 8000efc:	69fa      	ldr	r2, [r7, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <i2c_lld_start+0x178>)
 8000f00:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C1_TX_DMA_STREAM,
 8000f04:	6328      	str	r0, [r5, #48]	; 0x30
      rccEnableI2C1(true);
 8000f06:	61fa      	str	r2, [r7, #28]
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	f883 131f 	strb.w	r1, [r3, #799]	; 0x31f
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000f0e:	f8c3 c180 	str.w	ip, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000f12:	f8c3 c000 	str.w	ip, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000f16:	f883 1320 	strb.w	r1, [r3, #800]	; 0x320
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000f1a:	f8c3 6184 	str.w	r6, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000f1e:	605e      	str	r6, [r3, #4]
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8000f20:	e9d5 2309 	ldrd	r2, r3, [r5, #36]	; 0x24
 8000f24:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8000f28:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8000f2c:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
 8000f30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f32:	e784      	b.n	8000e3e <i2c_lld_start+0xe>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8000f34:	f022 020a 	bic.w	r2, r2, #10
 8000f38:	b292      	uxth	r2, r2
 8000f3a:	e7b7      	b.n	8000eac <i2c_lld_start+0x7c>
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <i2c_lld_start+0x17c>)
 8000f3e:	0040      	lsls	r0, r0, #1
 8000f40:	fb92 f2f0 	sdiv	r2, r2, r0
    dp->TRISE = I2C_CLK_FREQ + 1;
 8000f44:	2125      	movs	r1, #37	; 0x25
 8000f46:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000f4a:	6219      	str	r1, [r3, #32]
 8000f4c:	e7a4      	b.n	8000e98 <i2c_lld_start+0x68>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8000f4e:	f042 020a 	orr.w	r2, r2, #10
 8000f52:	e7ab      	b.n	8000eac <i2c_lld_start+0x7c>
 8000f54:	f022 0208 	bic.w	r2, r2, #8
 8000f58:	b292      	uxth	r2, r2
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8000f5a:	f042 0202 	orr.w	r2, r2, #2
 8000f5e:	e7a5      	b.n	8000eac <i2c_lld_start+0x7c>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8000f60:	4912      	ldr	r1, [pc, #72]	; (8000fac <i2c_lld_start+0x17c>)
 8000f62:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000f66:	fb91 f2f2 	sdiv	r2, r1, r2
 8000f6a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8000f6e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000f72:	b292      	uxth	r2, r2
 8000f74:	e78e      	b.n	8000e94 <i2c_lld_start+0x64>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8000f76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <i2c_lld_start+0x17c>)
 8000f7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f80:	fb92 f2f0 	sdiv	r2, r2, r0
 8000f84:	ea6f 4282 	mvn.w	r2, r2, lsl #18
 8000f88:	ea6f 4292 	mvn.w	r2, r2, lsr #18
 8000f8c:	b292      	uxth	r2, r2
 8000f8e:	e781      	b.n	8000e94 <i2c_lld_start+0x64>
 8000f90:	000186a0 	.word	0x000186a0
 8000f94:	00061a80 	.word	0x00061a80
 8000f98:	2000085c 	.word	0x2000085c
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	08000c71 	.word	0x08000c71
 8000fa4:	08000cd1 	.word	0x08000cd1
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	02255100 	.word	0x02255100

08000fb0 <dmaServeInterrupt>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
 8000fb0:	b430      	push	{r4, r5}
  uint32_t flags;
  uint32_t selfindex = (uint32_t)dmastp->selfindex;

  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8000fb2:	6804      	ldr	r4, [r0, #0]
 8000fb4:	7b43      	ldrb	r3, [r0, #13]
 8000fb6:	6821      	ldr	r1, [r4, #0]
  if (flags & dmastp->channel->CCR) {
 8000fb8:	6842      	ldr	r2, [r0, #4]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8000fba:	40d9      	lsrs	r1, r3
  if (flags & dmastp->channel->CCR) {
 8000fbc:	6812      	ldr	r2, [r2, #0]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8000fbe:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8000fc2:	420a      	tst	r2, r1
 8000fc4:	d00e      	beq.n	8000fe4 <dmaServeInterrupt+0x34>
  uint32_t selfindex = (uint32_t)dmastp->selfindex;
 8000fc6:	7b82      	ldrb	r2, [r0, #14]
    dmastp->dma->IFCR = flags << dmastp->shift;
    if (dma.streams[selfindex].func) {
 8000fc8:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <dmaServeInterrupt+0x38>)
 8000fca:	3201      	adds	r2, #1
 8000fcc:	f850 5032 	ldr.w	r5, [r0, r2, lsl #3]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	6063      	str	r3, [r4, #4]
    if (dma.streams[selfindex].func) {
 8000fd6:	b12d      	cbz	r5, 8000fe4 <dmaServeInterrupt+0x34>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8000fd8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000fdc:	462b      	mov	r3, r5
    }
  }
}
 8000fde:	bc30      	pop	{r4, r5}
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8000fe0:	6850      	ldr	r0, [r2, #4]
 8000fe2:	4718      	bx	r3
}
 8000fe4:	bc30      	pop	{r4, r5}
 8000fe6:	4770      	bx	lr
 8000fe8:	20000f74 	.word	0x20000f74
 8000fec:	00000000 	.word	0x00000000

08000ff0 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8000ff0:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 8000ff4:	2a15      	cmp	r2, #21
 8000ff6:	d815      	bhi.n	8001024 <_usb_ep0out+0x34>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f640 6141 	movw	r1, #3649	; 0xe41
 8000ffe:	4093      	lsls	r3, r2
 8001000:	420b      	tst	r3, r1
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001002:	b570      	push	{r4, r5, r6, lr}
 8001004:	4604      	mov	r4, r0
 8001006:	d124      	bne.n	8001052 <_usb_ep0out+0x62>
 8001008:	f413 1580 	ands.w	r5, r3, #1048576	; 0x100000
 800100c:	d00b      	beq.n	8001026 <_usb_ep0out+0x36>
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 800100e:	68c3      	ldr	r3, [r0, #12]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	b92b      	cbnz	r3, 8001022 <_usb_ep0out+0x32>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8001016:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001018:	b103      	cbz	r3, 800101c <_usb_ep0out+0x2c>
      usbp->ep0endcb(usbp);
 800101a:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 800101c:	2300      	movs	r3, #0
 800101e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8001022:	bd70      	pop	{r4, r5, r6, pc}
 8001024:	4770      	bx	lr
 8001026:	029b      	lsls	r3, r3, #10
 8001028:	d5fb      	bpl.n	8001022 <_usb_ep0out+0x32>
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 800102a:	220b      	movs	r2, #11
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800102c:	2320      	movs	r3, #32
 800102e:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8001032:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001036:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001038:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 800103a:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800103c:	f042 0201 	orr.w	r2, r2, #1
 8001040:	8102      	strh	r2, [r0, #8]
  isp->txbuf  = buf;
 8001042:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8001044:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8001048:	f7ff fb42 	bl	80006d0 <usb_lld_start_in.constprop.18>
 800104c:	f385 8811 	msr	BASEPRI, r5
}
 8001050:	bd70      	pop	{r4, r5, r6, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001052:	f248 0680 	movw	r6, #32896	; 0x8080
 8001056:	490e      	ldr	r1, [pc, #56]	; (8001090 <_usb_ep0out+0xa0>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001058:	6843      	ldr	r3, [r0, #4]
 800105a:	680a      	ldr	r2, [r1, #0]
 800105c:	681d      	ldr	r5, [r3, #0]
 800105e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001066:	f082 0210 	eor.w	r2, r2, #16
 800106a:	4332      	orrs	r2, r6
 800106c:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 800106e:	680b      	ldr	r3, [r1, #0]
 8001070:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001078:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800107c:	4333      	orrs	r3, r6
 800107e:	600b      	str	r3, [r1, #0]
 8001080:	b10d      	cbz	r5, 8001086 <_usb_ep0out+0x96>
 8001082:	2106      	movs	r1, #6
 8001084:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001086:	2306      	movs	r3, #6
 8001088:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 800108c:	bd70      	pop	{r4, r5, r6, pc}
 800108e:	bf00      	nop
 8001090:	40005c00 	.word	0x40005c00
	...

080010a0 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80010a0:	b538      	push	{r3, r4, r5, lr}
  switch (usbp->ep0state) {
 80010a2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80010a6:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 80010a8:	2b15      	cmp	r3, #21
 80010aa:	d82a      	bhi.n	8001102 <_usb_ep0in+0x62>
 80010ac:	e8df f003 	tbb	[pc, r3]
 80010b0:	2929290b 	.word	0x2929290b
 80010b4:	290b2929 	.word	0x290b2929
 80010b8:	503a2a29 	.word	0x503a2a29
 80010bc:	29292929 	.word	0x29292929
 80010c0:	29292929 	.word	0x29292929
 80010c4:	0b0b      	.short	0x0b0b
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80010c6:	f248 0080 	movw	r0, #32896	; 0x8080
 80010ca:	492f      	ldr	r1, [pc, #188]	; (8001188 <_usb_ep0in+0xe8>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80010cc:	6863      	ldr	r3, [r4, #4]
 80010ce:	680a      	ldr	r2, [r1, #0]
 80010d0:	681d      	ldr	r5, [r3, #0]
 80010d2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80010d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010da:	f082 0210 	eor.w	r2, r2, #16
 80010de:	4302      	orrs	r2, r0
 80010e0:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80010e2:	680b      	ldr	r3, [r1, #0]
 80010e4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80010e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80010f0:	4303      	orrs	r3, r0
 80010f2:	600b      	str	r3, [r1, #0]
 80010f4:	b115      	cbz	r5, 80010fc <_usb_ep0in+0x5c>
 80010f6:	2106      	movs	r1, #6
 80010f8:	4620      	mov	r0, r4
 80010fa:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 80010fc:	2306      	movs	r3, #6
 80010fe:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001102:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 8001104:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
 8001108:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
    if ((usbp->ep0n < max) &&
 800110c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    max = (size_t)get_hword(&usbp->setup[6]);
 800110e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    if ((usbp->ep0n < max) &&
 8001112:	429a      	cmp	r2, r3
 8001114:	d206      	bcs.n	8001124 <_usb_ep0in+0x84>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8001116:	68c3      	ldr	r3, [r0, #12]
 8001118:	8a1b      	ldrh	r3, [r3, #16]
 800111a:	fbb2 f5f3 	udiv	r5, r2, r3
 800111e:	fb03 2515 	mls	r5, r3, r5, r2
    if ((usbp->ep0n < max) &&
 8001122:	b1e5      	cbz	r5, 800115e <_usb_ep0in+0xbe>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001124:	2214      	movs	r2, #20
 8001126:	2320      	movs	r3, #32
 8001128:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800112c:	f383 8811 	msr	BASEPRI, r3
  osp->rxbuf  = buf;
 8001130:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
 8001132:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001134:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001136:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001138:	f042 0201 	orr.w	r2, r2, #1
 800113c:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800113e:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 8001140:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 8001142:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 8001146:	f7ff fafb 	bl	8000740 <usb_lld_start_out.constprop.17>
 800114a:	f385 8811 	msr	BASEPRI, r5
}
 800114e:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8001150:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001152:	b103      	cbz	r3, 8001156 <_usb_ep0in+0xb6>
      usbp->ep0endcb(usbp);
 8001154:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001156:	2300      	movs	r3, #0
 8001158:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 800115c:	bd38      	pop	{r3, r4, r5, pc}
 800115e:	2320      	movs	r3, #32
 8001160:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001164:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001166:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001168:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800116a:	f042 0201 	orr.w	r2, r2, #1
 800116e:	8102      	strh	r2, [r0, #8]
  isp->txbuf  = buf;
 8001170:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8001172:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8001176:	f7ff faab 	bl	80006d0 <usb_lld_start_in.constprop.18>
 800117a:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 800117e:	230a      	movs	r3, #10
 8001180:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001184:	bd38      	pop	{r3, r4, r5, pc}
 8001186:	bf00      	nop
 8001188:	40005c00 	.word	0x40005c00
 800118c:	00000000 	.word	0x00000000

08001190 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001190:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001192:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001196:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001198:	b113      	cbz	r3, 80011a0 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 800119a:	2300      	movs	r3, #0
 800119c:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  udp = USB_GET_DESCRIPTOR(ep);
 80011a0:	4bbb      	ldr	r3, [pc, #748]	; (8001490 <_usb_ep0setup+0x300>)
  usbReadSetup(usbp, ep, usbp->setup);
 80011a2:	f104 0274 	add.w	r2, r4, #116	; 0x74
 80011a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011ac:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80011b0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80011ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	f103 0010 	add.w	r0, r3, #16
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80011c4:	6819      	ldr	r1, [r3, #0]
 80011c6:	3304      	adds	r3, #4
  for (n = 0; n < 4; n++) {
 80011c8:	4283      	cmp	r3, r0
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80011ca:	f822 1b02 	strh.w	r1, [r2], #2
  for (n = 0; n < 4; n++) {
 80011ce:	d1f9      	bne.n	80011c4 <_usb_ep0setup+0x34>
  if ((usbp->config->requests_hook_cb == NULL) ||
 80011d0:	6863      	ldr	r3, [r4, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	b35b      	cbz	r3, 800122e <_usb_ep0setup+0x9e>
      !(usbp->config->requests_hook_cb(usbp))) {
 80011d6:	4620      	mov	r0, r4
 80011d8:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 80011da:	b340      	cbz	r0, 800122e <_usb_ep0setup+0x9e>
 80011dc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80011de:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
  hw |= (uint16_t)*p << 8U;
 80011e2:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
 80011e6:	f894 107a 	ldrb.w	r1, [r4, #122]	; 0x7a
  max = (size_t)get_hword(&usbp->setup[6]);
 80011ea:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  if (usbp->ep0n > max) {
 80011ee:	4291      	cmp	r1, r2
 80011f0:	bf2c      	ite	cs
 80011f2:	4611      	movcs	r1, r2
    usbp->ep0n = max;
 80011f4:	66e1      	strcc	r1, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80011f6:	061a      	lsls	r2, r3, #24
 80011f8:	f100 80a1 	bmi.w	800133e <_usb_ep0setup+0x1ae>
    if (usbp->ep0n != 0U) {
 80011fc:	2900      	cmp	r1, #0
 80011fe:	d072      	beq.n	80012e6 <_usb_ep0setup+0x156>
      usbp->ep0state = USB_EP0_OUT_RX;
 8001200:	2215      	movs	r2, #21
 8001202:	2320      	movs	r3, #32
 8001204:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001208:	f383 8811 	msr	BASEPRI, r3
  osp->rxcnt  = 0;
 800120c:	2500      	movs	r5, #0
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 800120e:	e9d4 611a 	ldrd	r6, r1, [r4, #104]	; 0x68
  osp = usbp->epc[ep]->out_state;
 8001212:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001214:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001216:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001218:	f042 0201 	orr.w	r2, r2, #1
 800121c:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800121e:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8001220:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 8001224:	f7ff fa8c 	bl	8000740 <usb_lld_start_out.constprop.17>
 8001228:	f385 8811 	msr	BASEPRI, r5
}
 800122c:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800122e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8001232:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8001236:	4618      	mov	r0, r3
 8001238:	d01e      	beq.n	8001278 <_usb_ep0setup+0xe8>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800123a:	f248 0080 	movw	r0, #32896	; 0x8080
 800123e:	4994      	ldr	r1, [pc, #592]	; (8001490 <_usb_ep0setup+0x300>)
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001240:	6863      	ldr	r3, [r4, #4]
 8001242:	680a      	ldr	r2, [r1, #0]
 8001244:	681d      	ldr	r5, [r3, #0]
 8001246:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800124a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800124e:	f082 0210 	eor.w	r2, r2, #16
 8001252:	4302      	orrs	r2, r0
 8001254:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001256:	680b      	ldr	r3, [r1, #0]
 8001258:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800125c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001260:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001264:	4303      	orrs	r3, r0
 8001266:	600b      	str	r3, [r1, #0]
 8001268:	b115      	cbz	r5, 8001270 <_usb_ep0setup+0xe0>
 800126a:	2106      	movs	r1, #6
 800126c:	4620      	mov	r0, r4
 800126e:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8001270:	2306      	movs	r3, #6
 8001272:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001276:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001278:	f240 3102 	movw	r1, #770	; 0x302
           ((uint32_t)usbp->setup[1] << 8U))) {
 800127c:	f894 6075 	ldrb.w	r6, [r4, #117]	; 0x75
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001280:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8001284:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001288:	428a      	cmp	r2, r1
 800128a:	f000 811f 	beq.w	80014cc <_usb_ep0setup+0x33c>
 800128e:	d840      	bhi.n	8001312 <_usb_ep0setup+0x182>
 8001290:	2a02      	cmp	r2, #2
 8001292:	f000 8103 	beq.w	800149c <_usb_ep0setup+0x30c>
 8001296:	f240 80c0 	bls.w	800141a <_usb_ep0setup+0x28a>
 800129a:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800129e:	f000 80c5 	beq.w	800142c <_usb_ep0setup+0x29c>
 80012a2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80012a6:	f000 8090 	beq.w	80013ca <_usb_ep0setup+0x23a>
 80012aa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80012ae:	d1c4      	bne.n	800123a <_usb_ep0setup+0xaa>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80012b0:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d1c0      	bne.n	800123a <_usb_ep0setup+0xaa>
      usbp->status &= ~2U;
 80012b8:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80012bc:	66a5      	str	r5, [r4, #104]	; 0x68
      usbp->status &= ~2U;
 80012be:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80012c2:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      usbp->status &= ~2U;
 80012c6:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 80012ca:	e00a      	b.n	80012e2 <_usb_ep0setup+0x152>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80012cc:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 80012d0:	f080 808a 	bcs.w	80013e8 <_usb_ep0setup+0x258>
 80012d4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80012d8:	d1af      	bne.n	800123a <_usb_ep0setup+0xaa>
    usbSetupTransfer(usbp, NULL, 0, set_address);
 80012da:	4b6e      	ldr	r3, [pc, #440]	; (8001494 <_usb_ep0setup+0x304>)
 80012dc:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 80012e0:	6723      	str	r3, [r4, #112]	; 0x70
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80012e2:	0603      	lsls	r3, r0, #24
 80012e4:	d443      	bmi.n	800136e <_usb_ep0setup+0x1de>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 80012e6:	220b      	movs	r2, #11
 80012e8:	2320      	movs	r3, #32
 80012ea:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 80012ee:	f383 8811 	msr	BASEPRI, r3
  isp->txbuf  = buf;
 80012f2:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
 80012f4:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80012f6:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 80012f8:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80012fa:	f042 0201 	orr.w	r2, r2, #1
 80012fe:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8001300:	4620      	mov	r0, r4
  isp->txbuf  = buf;
 8001302:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8001304:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8001308:	f7ff f9e2 	bl	80006d0 <usb_lld_start_in.constprop.18>
 800130c:	f385 8811 	msr	BASEPRI, r5
}
 8001310:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001312:	f240 6101 	movw	r1, #1537	; 0x601
 8001316:	428a      	cmp	r2, r1
 8001318:	d9d8      	bls.n	80012cc <_usb_ep0setup+0x13c>
 800131a:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 800131e:	d03c      	beq.n	800139a <_usb_ep0setup+0x20a>
 8001320:	f640 4102 	movw	r1, #3074	; 0xc02
 8001324:	428a      	cmp	r2, r1
 8001326:	f000 80ac 	beq.w	8001482 <_usb_ep0setup+0x2f2>
 800132a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800132e:	d184      	bne.n	800123a <_usb_ep0setup+0xaa>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8001330:	2201      	movs	r2, #1
 8001332:	f104 017f 	add.w	r1, r4, #127	; 0x7f
 8001336:	e9c4 251b 	strd	r2, r5, [r4, #108]	; 0x6c
 800133a:	66a1      	str	r1, [r4, #104]	; 0x68
 800133c:	e751      	b.n	80011e2 <_usb_ep0setup+0x52>
    if (usbp->ep0n != 0U) {
 800133e:	b1b1      	cbz	r1, 800136e <_usb_ep0setup+0x1de>
      usbp->ep0state = USB_EP0_IN_TX;
 8001340:	2209      	movs	r2, #9
 8001342:	2320      	movs	r3, #32
 8001344:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001348:	f383 8811 	msr	BASEPRI, r3
  isp->txcnt  = 0;
 800134c:	2500      	movs	r5, #0
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 800134e:	e9d4 611a 	ldrd	r6, r1, [r4, #104]	; 0x68
  isp = usbp->epc[ep]->in_state;
 8001352:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001354:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8001356:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001358:	f042 0201 	orr.w	r2, r2, #1
 800135c:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800135e:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8001360:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 8001364:	f7ff f9b4 	bl	80006d0 <usb_lld_start_in.constprop.18>
 8001368:	f385 8811 	msr	BASEPRI, r5
}
 800136c:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 800136e:	2214      	movs	r2, #20
 8001370:	2320      	movs	r3, #32
 8001372:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8001376:	f383 8811 	msr	BASEPRI, r3
  osp->rxbuf  = buf;
 800137a:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
 800137c:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800137e:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001380:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001382:	f042 0201 	orr.w	r2, r2, #1
 8001386:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8001388:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 800138a:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 800138c:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 8001390:	f7ff f9d6 	bl	8000740 <usb_lld_start_out.constprop.17>
 8001394:	f385 8811 	msr	BASEPRI, r5
}
 8001398:	bd70      	pop	{r4, r5, r6, pc}
      if (usbp->state == USB_ACTIVE) {
 800139a:	7823      	ldrb	r3, [r4, #0]
 800139c:	2b04      	cmp	r3, #4
 800139e:	f000 80c1 	beq.w	8001524 <_usb_ep0setup+0x394>
      if (usbp->setup[2] != 0U) {
 80013a2:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80013a6:	b14b      	cbz	r3, 80013bc <_usb_ep0setup+0x22c>
        usbp->state = USB_ACTIVE;
 80013a8:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80013aa:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 80013ac:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_ACTIVE;
 80013b0:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	b113      	cbz	r3, 80013bc <_usb_ep0setup+0x22c>
 80013b6:	2102      	movs	r1, #2
 80013b8:	4620      	mov	r0, r4
 80013ba:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80013bc:	2300      	movs	r3, #0
 80013be:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 80013c2:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 80013c6:	6723      	str	r3, [r4, #112]	; 0x70
 80013c8:	e78b      	b.n	80012e2 <_usb_ep0setup+0x152>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80013ca:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	f47f af33 	bne.w	800123a <_usb_ep0setup+0xaa>
      usbp->status |= 2U;
 80013d4:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80013d8:	66a5      	str	r5, [r4, #104]	; 0x68
      usbp->status |= 2U;
 80013da:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80013de:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      usbp->status |= 2U;
 80013e2:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 80013e6:	e77c      	b.n	80012e2 <_usb_ep0setup+0x152>
  hw |= (uint16_t)*p << 8U;
 80013e8:	f894 1079 	ldrb.w	r1, [r4, #121]	; 0x79
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80013ec:	6862      	ldr	r2, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 80013ee:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80013f2:	6856      	ldr	r6, [r2, #4]
 80013f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80013f8:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80013fc:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8001400:	4620      	mov	r0, r4
 8001402:	47b0      	blx	r6
    if (dp == NULL) {
 8001404:	2800      	cmp	r0, #0
 8001406:	f43f af18 	beq.w	800123a <_usb_ep0setup+0xaa>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800140a:	e9d0 2300 	ldrd	r2, r3, [r0]
 800140e:	6725      	str	r5, [r4, #112]	; 0x70
 8001410:	e9c4 321a 	strd	r3, r2, [r4, #104]	; 0x68
 8001414:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8001418:	e6e3      	b.n	80011e2 <_usb_ep0setup+0x52>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800141a:	bb7a      	cbnz	r2, 800147c <_usb_ep0setup+0x2ec>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800141c:	2102      	movs	r1, #2
 800141e:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8001422:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
 8001426:	66a0      	str	r0, [r4, #104]	; 0x68
 8001428:	460a      	mov	r2, r1
 800142a:	e6da      	b.n	80011e2 <_usb_ep0setup+0x52>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800142c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001430:	2b00      	cmp	r3, #0
 8001432:	f47f af02 	bne.w	800123a <_usb_ep0setup+0xaa>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001436:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 800143a:	f012 030f 	ands.w	r3, r2, #15
 800143e:	d018      	beq.n	8001472 <_usb_ep0setup+0x2e2>
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001446:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800144a:	f012 0f80 	tst.w	r2, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	f040 8099 	bne.w	8001586 <_usb_ep0setup+0x3f6>
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8001454:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8001458:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800145c:	d009      	beq.n	8001472 <_usb_ep0setup+0x2e2>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001468:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 800146c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001470:	601a      	str	r2, [r3, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001472:	2300      	movs	r3, #0
 8001474:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8001478:	6723      	str	r3, [r4, #112]	; 0x70
 800147a:	e732      	b.n	80012e2 <_usb_ep0setup+0x152>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800147c:	2a01      	cmp	r2, #1
 800147e:	f47f aedc 	bne.w	800123a <_usb_ep0setup+0xaa>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8001482:	2202      	movs	r2, #2
 8001484:	2000      	movs	r0, #0
 8001486:	4904      	ldr	r1, [pc, #16]	; (8001498 <_usb_ep0setup+0x308>)
 8001488:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
 800148c:	66a1      	str	r1, [r4, #104]	; 0x68
 800148e:	e6a8      	b.n	80011e2 <_usb_ep0setup+0x52>
 8001490:	40005c00 	.word	0x40005c00
 8001494:	080015d1 	.word	0x080015d1
 8001498:	08004698 	.word	0x08004698
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800149c:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 80014a0:	f001 000f 	and.w	r0, r1, #15
 80014a4:	f011 0f80 	tst.w	r1, #128	; 0x80
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 80014a8:	4946      	ldr	r1, [pc, #280]	; (80015c4 <_usb_ep0setup+0x434>)
 80014aa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80014ae:	d12c      	bne.n	800150a <_usb_ep0setup+0x37a>
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 80014b0:	f411 5140 	ands.w	r1, r1, #12288	; 0x3000
 80014b4:	f43f aec1 	beq.w	800123a <_usb_ep0setup+0xaa>
 80014b8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80014bc:	d12b      	bne.n	8001516 <_usb_ep0setup+0x386>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80014be:	2502      	movs	r5, #2
 80014c0:	2000      	movs	r0, #0
 80014c2:	4941      	ldr	r1, [pc, #260]	; (80015c8 <_usb_ep0setup+0x438>)
 80014c4:	e9c4 501b 	strd	r5, r0, [r4, #108]	; 0x6c
 80014c8:	66a1      	str	r1, [r4, #104]	; 0x68
 80014ca:	e68a      	b.n	80011e2 <_usb_ep0setup+0x52>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80014cc:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f47f aeb2 	bne.w	800123a <_usb_ep0setup+0xaa>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80014d6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 80014da:	f012 030f 	ands.w	r3, r2, #15
 80014de:	d0c8      	beq.n	8001472 <_usb_ep0setup+0x2e2>
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014e6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80014ea:	f012 0f80 	tst.w	r2, #128	; 0x80
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	d15b      	bne.n	80015aa <_usb_ep0setup+0x41a>
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80014f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014fa:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 80014fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e7b3      	b.n	8001472 <_usb_ep0setup+0x2e2>
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 800150a:	f011 0130 	ands.w	r1, r1, #48	; 0x30
 800150e:	f43f ae94 	beq.w	800123a <_usb_ep0setup+0xaa>
 8001512:	2910      	cmp	r1, #16
 8001514:	d0d3      	beq.n	80014be <_usb_ep0setup+0x32e>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001516:	2502      	movs	r5, #2
 8001518:	2000      	movs	r0, #0
 800151a:	492c      	ldr	r1, [pc, #176]	; (80015cc <_usb_ep0setup+0x43c>)
 800151c:	e9c4 501b 	strd	r5, r0, [r4, #108]	; 0x6c
 8001520:	66a1      	str	r1, [r4, #104]	; 0x68
 8001522:	e65e      	b.n	80011e2 <_usb_ep0setup+0x52>
 8001524:	2320      	movs	r3, #32
 8001526:	f383 8811 	msr	BASEPRI, r3
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 800152a:	2201      	movs	r2, #1
  usbp->pmnext = 64;
 800152c:	2640      	movs	r6, #64	; 0x40
    EPR_TOGGLE(i, 0);
 800152e:	f248 0080 	movw	r0, #32896	; 0x8080
  usbp->transmitting &= 1U;
 8001532:	8921      	ldrh	r1, [r4, #8]
  usbp->receiving    &= 1U;
 8001534:	8963      	ldrh	r3, [r4, #10]
    usbp->epc[i] = NULL;
 8001536:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800153a:	e9c4 5506 	strd	r5, r5, [r4, #24]
 800153e:	e9c4 5508 	strd	r5, r5, [r4, #32]
  usbp->transmitting &= 1U;
 8001542:	4011      	ands	r1, r2
  usbp->receiving    &= 1U;
 8001544:	4013      	ands	r3, r2
    usbp->epc[i] = NULL;
 8001546:	62a5      	str	r5, [r4, #40]	; 0x28
  usbp->transmitting &= 1U;
 8001548:	8121      	strh	r1, [r4, #8]
  usbp->receiving    &= 1U;
 800154a:	8163      	strh	r3, [r4, #10]
  usbp->pmnext = 64;
 800154c:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
 8001550:	0093      	lsls	r3, r2, #2
 8001552:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001556:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    EPR_TOGGLE(i, 0);
 800155a:	6819      	ldr	r1, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 800155c:	3201      	adds	r2, #1
    EPR_TOGGLE(i, 0);
 800155e:	4301      	orrs	r1, r0
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8001560:	2a08      	cmp	r2, #8
    EPR_TOGGLE(i, 0);
 8001562:	6019      	str	r1, [r3, #0]
    EPR_SET(i, 0);
 8001564:	6018      	str	r0, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8001566:	d1f3      	bne.n	8001550 <_usb_ep0setup+0x3c0>
 8001568:	2300      	movs	r3, #0
 800156a:	f383 8811 	msr	BASEPRI, r3
        usbp->state = USB_SELECTED;
 800156e:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001570:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = 0U;
 8001572:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_SELECTED;
 8001576:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001578:	6813      	ldr	r3, [r2, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f43f af11 	beq.w	80013a2 <_usb_ep0setup+0x212>
 8001580:	4620      	mov	r0, r4
 8001582:	4798      	blx	r3
 8001584:	e70d      	b.n	80013a2 <_usb_ep0setup+0x212>
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8001586:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800158a:	2a30      	cmp	r2, #48	; 0x30
 800158c:	f43f af71 	beq.w	8001472 <_usb_ep0setup+0x2e2>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800159a:	f082 0220 	eor.w	r2, r2, #32
 800159e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e763      	b.n	8001472 <_usb_ep0setup+0x2e2>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80015aa:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80015ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015b2:	f082 0210 	eor.w	r2, r2, #16
 80015b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e757      	b.n	8001472 <_usb_ep0setup+0x2e2>
 80015c2:	bf00      	nop
 80015c4:	40005c00 	.word	0x40005c00
 80015c8:	08004588 	.word	0x08004588
 80015cc:	080044d4 	.word	0x080044d4

080015d0 <set_address>:
  usbp->address = usbp->setup[2];
 80015d0:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80015d4:	6842      	ldr	r2, [r0, #4]
  usbp->address = usbp->setup[2];
 80015d6:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 80015da:	4906      	ldr	r1, [pc, #24]	; (80015f4 <set_address+0x24>)
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
static void set_address(USBDriver *usbp) {
 80015e2:	b510      	push	{r4, lr}
 80015e4:	4604      	mov	r4, r0
 80015e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80015e8:	b10a      	cbz	r2, 80015ee <set_address+0x1e>
 80015ea:	2101      	movs	r1, #1
 80015ec:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 80015ee:	2303      	movs	r3, #3
 80015f0:	7023      	strb	r3, [r4, #0]
}
 80015f2:	bd10      	pop	{r4, pc}
 80015f4:	40005c00 	.word	0x40005c00
	...

08001600 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8001600:	2000      	movs	r0, #0
 8001602:	4770      	bx	lr
	...

08001610 <chSchWakeupS.constprop.9>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001610:	b470      	push	{r4, r5, r6}
 8001612:	4604      	mov	r4, r0
  ntp->u.rdymsg = msg;
 8001614:	2600      	movs	r6, #0
  thread_t *otp = currp;
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <chSchWakeupS.constprop.9+0x58>)
  if (ntp->prio <= otp->prio) {
 8001618:	6880      	ldr	r0, [r0, #8]
  thread_t *otp = currp;
 800161a:	6999      	ldr	r1, [r3, #24]
  ntp->u.rdymsg = msg;
 800161c:	6266      	str	r6, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 800161e:	688d      	ldr	r5, [r1, #8]
 8001620:	42a8      	cmp	r0, r5
 8001622:	d80c      	bhi.n	800163e <chSchWakeupS.constprop.9+0x2e>
  tp->state = CH_STATE_READY;
 8001624:	f884 6020 	strb.w	r6, [r4, #32]
    cp = cp->queue.next;
 8001628:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	4290      	cmp	r0, r2
 800162e:	d9fb      	bls.n	8001628 <chSchWakeupS.constprop.9+0x18>
  tp->queue.prev             = cp->queue.prev;
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8001636:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8001638:	605c      	str	r4, [r3, #4]
}
 800163a:	bc70      	pop	{r4, r5, r6}
 800163c:	4770      	bx	lr
  cp = (thread_t *)&ch.rlist.queue;
 800163e:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
 8001640:	f881 6020 	strb.w	r6, [r1, #32]
    cp = cp->queue.next;
 8001644:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 8001646:	6890      	ldr	r0, [r2, #8]
 8001648:	4285      	cmp	r5, r0
 800164a:	d3fb      	bcc.n	8001644 <chSchWakeupS.constprop.9+0x34>
    ntp->state = CH_STATE_CURRENT;
 800164c:	2501      	movs	r5, #1
  tp->queue.prev             = cp->queue.prev;
 800164e:	6850      	ldr	r0, [r2, #4]
 8001650:	e9c1 2000 	strd	r2, r0, [r1]
  tp->queue.prev->queue.next = tp;
 8001654:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
 8001656:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8001658:	f884 5020 	strb.w	r5, [r4, #32]
    chSysSwitch(ntp, otp);
 800165c:	4620      	mov	r0, r4
    currp = ntp;
 800165e:	619c      	str	r4, [r3, #24]
}
 8001660:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 8001662:	f7fe bded 	b.w	8000240 <_port_switch>
 8001666:	bf00      	nop
 8001668:	20000db4 	.word	0x20000db4
 800166c:	00000000 	.word	0x00000000

08001670 <chThdCreateStatic.constprop.4>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8001670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001672:	2420      	movs	r4, #32
 8001674:	f384 8811 	msr	BASEPRI, r4
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001678:	2500      	movs	r5, #0
  tp->state     = CH_STATE_WTSTART;
 800167a:	2702      	movs	r7, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 800167c:	2601      	movs	r6, #1
  tp = (thread_t *)((uint8_t *)wsp + size -
 800167e:	3948      	subs	r1, #72	; 0x48
 8001680:	1844      	adds	r4, r0, r1
  REG_INSERT(tp);
 8001682:	4914      	ldr	r1, [pc, #80]	; (80016d4 <chThdCreateStatic.constprop.4+0x64>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001684:	f844 3c24 	str.w	r3, [r4, #-36]
  tp->prio      = prio;
 8001688:	60a2      	str	r2, [r4, #8]
  tp->realprio  = prio;
 800168a:	63e2      	str	r2, [r4, #60]	; 0x3c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800168c:	f1a4 0324 	sub.w	r3, r4, #36	; 0x24
 8001690:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <chThdCreateStatic.constprop.4+0x68>)
  REG_INSERT(tp);
 8001692:	6121      	str	r1, [r4, #16]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001694:	60e3      	str	r3, [r4, #12]
  tp->name      = name;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <chThdCreateStatic.constprop.4+0x6c>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001698:	f844 2c04 	str.w	r2, [r4, #-4]
  REG_INSERT(tp);
 800169c:	694a      	ldr	r2, [r1, #20]
  tp->wabase = (stkalign_t *)wsp;
 800169e:	61e0      	str	r0, [r4, #28]
  tp->name      = name;
 80016a0:	61a3      	str	r3, [r4, #24]
  list_init(&tp->waiting);
 80016a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
  queue_init(&tp->msgqueue);
 80016a6:	f104 032c 	add.w	r3, r4, #44	; 0x2c
  REG_INSERT(tp);
 80016aa:	6162      	str	r2, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80016ac:	f844 5c20 	str.w	r5, [r4, #-32]
  tp->state     = CH_STATE_WTSTART;
 80016b0:	8427      	strh	r7, [r4, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80016b2:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
  tp->epending  = (eventmask_t)0;
 80016b6:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  REG_INSERT(tp);
 80016ba:	6114      	str	r4, [r2, #16]
  tqp->next = (thread_t *)tqp;
 80016bc:	e9c4 030a 	strd	r0, r3, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 80016c0:	6323      	str	r3, [r4, #48]	; 0x30
  chSchWakeupS(tp, MSG_OK);
 80016c2:	4620      	mov	r0, r4
  REG_INSERT(tp);
 80016c4:	614c      	str	r4, [r1, #20]
  chSchWakeupS(tp, MSG_OK);
 80016c6:	f7ff ffa3 	bl	8001610 <chSchWakeupS.constprop.9>
 80016ca:	f385 8811 	msr	BASEPRI, r5
}
 80016ce:	4620      	mov	r0, r4
 80016d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000db4 	.word	0x20000db4
 80016d8:	08000251 	.word	0x08000251
 80016dc:	0800453c 	.word	0x0800453c

080016e0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 80016e0:	b430      	push	{r4, r5}
  currp->state = CH_STATE_CURRENT;
 80016e2:	2501      	movs	r5, #1
  thread_t *otp = currp;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <chSchGoSleepS+0x24>)
 80016e6:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 80016e8:	681a      	ldr	r2, [r3, #0]
  otp->state = newstate;
 80016ea:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 80016ee:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
 80016f0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 80016f2:	6063      	str	r3, [r4, #4]
  currp->state = CH_STATE_CURRENT;
 80016f4:	f882 5020 	strb.w	r5, [r2, #32]
  tqp->next             = tp->queue.next;
 80016f8:	601c      	str	r4, [r3, #0]
}
 80016fa:	bc30      	pop	{r4, r5}
  currp = queue_fifo_remove(&ch.rlist.queue);
 80016fc:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 80016fe:	f7fe bd9f 	b.w	8000240 <_port_switch>
 8001702:	bf00      	nop
 8001704:	20000db4 	.word	0x20000db4
	...

08001710 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001710:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8001712:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001714:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8001716:	d04a      	beq.n	80017ae <chSchGoSleepTimeoutS+0x9e>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001718:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    chVTDoSetI(&vt, timeout, wakeup, currp);
 800171c:	4c52      	ldr	r4, [pc, #328]	; (8001868 <chSchGoSleepTimeoutS+0x158>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 8001720:	69a2      	ldr	r2, [r4, #24]
 8001722:	4607      	mov	r7, r0
  vtp->func = vtfunc;
 8001724:	4851      	ldr	r0, [pc, #324]	; (800186c <chSchGoSleepTimeoutS+0x15c>)
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001726:	2901      	cmp	r1, #1
  vtp->par = par;
 8001728:	9205      	str	r2, [sp, #20]
 800172a:	b29b      	uxth	r3, r3
 800172c:	69e2      	ldr	r2, [r4, #28]
  vtp->func = vtfunc;
 800172e:	9004      	str	r0, [sp, #16]
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001730:	f104 061c 	add.w	r6, r4, #28
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001734:	d937      	bls.n	80017a6 <chSchGoSleepTimeoutS+0x96>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001736:	42b2      	cmp	r2, r6
 8001738:	d061      	beq.n	80017fe <chSchGoSleepTimeoutS+0xee>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800173a:	8d25      	ldrh	r5, [r4, #40]	; 0x28
 800173c:	6890      	ldr	r0, [r2, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800173e:	1b5b      	subs	r3, r3, r5
 8001740:	b29b      	uxth	r3, r3
 8001742:	1859      	adds	r1, r3, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001744:	d33a      	bcc.n	80017bc <chSchGoSleepTimeoutS+0xac>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 8001746:	6812      	ldr	r2, [r2, #0]
      delta -= p->delta;
 8001748:	1a09      	subs	r1, r1, r0
 800174a:	6890      	ldr	r0, [r2, #8]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 800174c:	4281      	cmp	r1, r0
 800174e:	d904      	bls.n	800175a <chSchGoSleepTimeoutS+0x4a>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 8001750:	6812      	ldr	r2, [r2, #0]
    delta -= p->delta;
 8001752:	1a09      	subs	r1, r1, r0
  while (p->delta < delta) {
 8001754:	6890      	ldr	r0, [r2, #8]
 8001756:	4288      	cmp	r0, r1
 8001758:	d3fa      	bcc.n	8001750 <chSchGoSleepTimeoutS+0x40>
  /* Calculate new delta for the following entry.*/
  p->delta -= delta;

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 800175a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  vtp->prev = vtp->next->prev;
 800175e:	6853      	ldr	r3, [r2, #4]
  vtp->prev->next = vtp;
 8001760:	ad01      	add	r5, sp, #4
  vtp->prev = vtp->next->prev;
 8001762:	e9cd 2301 	strd	r2, r3, [sp, #4]
  vtp->prev->next = vtp;
 8001766:	601d      	str	r5, [r3, #0]
  p->prev = vtp;
 8001768:	6055      	str	r5, [r2, #4]
  vtp->delta = delta;
 800176a:	9103      	str	r1, [sp, #12]
  p->delta -= delta;
 800176c:	6893      	ldr	r3, [r2, #8]
 800176e:	1a59      	subs	r1, r3, r1
 8001770:	6091      	str	r1, [r2, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001772:	6260      	str	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001774:	4638      	mov	r0, r7
 8001776:	f7ff ffb3 	bl	80016e0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800177a:	9b04      	ldr	r3, [sp, #16]
 800177c:	b17b      	cbz	r3, 800179e <chSchGoSleepTimeoutS+0x8e>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800177e:	69e2      	ldr	r2, [r4, #28]
 8001780:	9b01      	ldr	r3, [sp, #4]
 8001782:	42aa      	cmp	r2, r5
 8001784:	d049      	beq.n	800181a <chSchGoSleepTimeoutS+0x10a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
 8001786:	2100      	movs	r1, #0
    vtp->prev->next = vtp->next;
 8001788:	9a02      	ldr	r2, [sp, #8]
 800178a:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 800178c:	9b01      	ldr	r3, [sp, #4]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800178e:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 8001790:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8001792:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001794:	d003      	beq.n	800179e <chSchGoSleepTimeoutS+0x8e>
      vtp->next->delta += vtp->delta;
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	9903      	ldr	r1, [sp, #12]
 800179a:	440a      	add	r2, r1
 800179c:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 800179e:	69a3      	ldr	r3, [r4, #24]
 80017a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 80017a2:	b007      	add	sp, #28
 80017a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80017a6:	42b2      	cmp	r2, r6
 80017a8:	d015      	beq.n	80017d6 <chSchGoSleepTimeoutS+0xc6>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80017aa:	2102      	movs	r1, #2
 80017ac:	e7c5      	b.n	800173a <chSchGoSleepTimeoutS+0x2a>
    chSchGoSleepS(newstate);
 80017ae:	f7ff ff97 	bl	80016e0 <chSchGoSleepS>
 80017b2:	4c2d      	ldr	r4, [pc, #180]	; (8001868 <chSchGoSleepTimeoutS+0x158>)
  return currp->u.rdymsg;
 80017b4:	69a3      	ldr	r3, [r4, #24]
 80017b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 80017b8:	b007      	add	sp, #28
 80017ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 80017bc:	4281      	cmp	r1, r0
 80017be:	d2c5      	bcs.n	800174c <chSchGoSleepTimeoutS+0x3c>
  return systime + (systime_t)interval;
 80017c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c4:	4299      	cmp	r1, r3
 80017c6:	bf94      	ite	ls
 80017c8:	186d      	addls	r5, r5, r1
 80017ca:	18ed      	addhi	r5, r5, r3
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80017cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017d0:	b2ad      	uxth	r5, r5
 80017d2:	635d      	str	r5, [r3, #52]	; 0x34
 80017d4:	e7ba      	b.n	800174c <chSchGoSleepTimeoutS+0x3c>
      vtp->delta = delay;
 80017d6:	2202      	movs	r2, #2
      ch.vtlist.next = vtp;
 80017d8:	ad01      	add	r5, sp, #4
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80017da:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 80017de:	e9c4 5507 	strd	r5, r5, [r4, #28]
      ch.vtlist.lasttime = now;
 80017e2:	8523      	strh	r3, [r4, #40]	; 0x28
      vtp->delta = delay;
 80017e4:	9203      	str	r2, [sp, #12]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80017e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 80017ea:	f04f 0c00 	mov.w	ip, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80017ee:	2002      	movs	r0, #2
 80017f0:	4413      	add	r3, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	634b      	str	r3, [r1, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80017f6:	f8c1 c010 	str.w	ip, [r1, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80017fa:	60c8      	str	r0, [r1, #12]
 80017fc:	e7ba      	b.n	8001774 <chSchGoSleepTimeoutS+0x64>
 80017fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001802:	428a      	cmp	r2, r1
 8001804:	bf28      	it	cs
 8001806:	460a      	movcs	r2, r1
      ch.vtlist.next = vtp;
 8001808:	ad01      	add	r5, sp, #4
      ch.vtlist.lasttime = now;
 800180a:	8523      	strh	r3, [r4, #40]	; 0x28
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800180c:	e9cd 6601 	strd	r6, r6, [sp, #4]
      vtp->delta = delay;
 8001810:	9103      	str	r1, [sp, #12]
 8001812:	b292      	uxth	r2, r2
      ch.vtlist.prev = vtp;
 8001814:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8001818:	e7e5      	b.n	80017e6 <chSchGoSleepTimeoutS+0xd6>
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 800181a:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800181c:	42b3      	cmp	r3, r6
  ch.vtlist.next = vtp->next;
 800181e:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001820:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 8001822:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001824:	d019      	beq.n	800185a <chSchGoSleepTimeoutS+0x14a>
  return (systime_t)STM32_ST_TIM->CNT;
 8001826:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	9d03      	ldr	r5, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 800182e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8001830:	442a      	add	r2, r5
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001836:	1a5b      	subs	r3, r3, r1
 8001838:	b29b      	uxth	r3, r3

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 800183a:	429a      	cmp	r2, r3
 800183c:	d9af      	bls.n	800179e <chSchGoSleepTimeoutS+0x8e>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 800183e:	1ad0      	subs	r0, r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001840:	2801      	cmp	r0, #1
 8001842:	d90e      	bls.n	8001862 <chSchGoSleepTimeoutS+0x152>
 8001844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001848:	429a      	cmp	r2, r3
 800184a:	bf28      	it	cs
 800184c:	461a      	movcs	r2, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800184e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8001852:	440a      	add	r2, r1
 8001854:	b292      	uxth	r2, r2
 8001856:	6342      	str	r2, [r0, #52]	; 0x34
 8001858:	e7a1      	b.n	800179e <chSchGoSleepTimeoutS+0x8e>
  STM32_ST_TIM->DIER = 0U;
 800185a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	e79d      	b.n	800179e <chSchGoSleepTimeoutS+0x8e>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001862:	1c9a      	adds	r2, r3, #2
 8001864:	e7f3      	b.n	800184e <chSchGoSleepTimeoutS+0x13e>
 8001866:	bf00      	nop
 8001868:	20000db4 	.word	0x20000db4
 800186c:	08000a51 	.word	0x08000a51

08001870 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001870:	b161      	cbz	r1, 800188c <chThdEnqueueTimeoutS+0x1c>
 8001872:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8001876:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8001878:	699b      	ldr	r3, [r3, #24]
  tp->queue.prev             = tqp->prev;
 800187a:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800187c:	2004      	movs	r0, #4
 800187e:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 8001882:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8001884:	6053      	str	r3, [r2, #4]
}
 8001886:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001888:	f7ff bf42 	b.w	8001710 <chSchGoSleepTimeoutS>
}
 800188c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000db4 	.word	0x20000db4
	...

080018a0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 80018a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a2:	4604      	mov	r4, r0
 80018a4:	460f      	mov	r7, r1
 80018a6:	4616      	mov	r6, r2
 80018a8:	2320      	movs	r3, #32
 80018aa:	f383 8811 	msr	BASEPRI, r3
 80018ae:	e005      	b.n	80018bc <oqPutTimeout+0x1c>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 80018b0:	4631      	mov	r1, r6
 80018b2:	4620      	mov	r0, r4
 80018b4:	f7ff ffdc 	bl	8001870 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 80018b8:	2800      	cmp	r0, #0
 80018ba:	db17      	blt.n	80018ec <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
 80018bc:	68a5      	ldr	r5, [r4, #8]
 80018be:	2d00      	cmp	r5, #0
 80018c0:	d0f6      	beq.n	80018b0 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80018c2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80018c4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80018c6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80018c8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80018ca:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80018cc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80018ce:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80018d0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80018d4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80018d6:	bf24      	itt	cs
 80018d8:	68e3      	ldrcs	r3, [r4, #12]
 80018da:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 80018dc:	69e3      	ldr	r3, [r4, #28]
 80018de:	b10b      	cbz	r3, 80018e4 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 80018e0:	4620      	mov	r0, r4
 80018e2:	4798      	blx	r3
 80018e4:	2000      	movs	r0, #0
 80018e6:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 80018ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018ec:	f385 8811 	msr	BASEPRI, r5
 80018f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018f2:	bf00      	nop
	...

08001900 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001900:	3030      	adds	r0, #48	; 0x30
 8001902:	f7ff bfcd 	b.w	80018a0 <oqPutTimeout>
 8001906:	bf00      	nop
	...

08001910 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001910:	3030      	adds	r0, #48	; 0x30
 8001912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001916:	f7ff bfc3 	b.w	80018a0 <oqPutTimeout>
 800191a:	bf00      	nop
 800191c:	0000      	movs	r0, r0
	...

08001920 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	2320      	movs	r3, #32
 8001924:	4604      	mov	r4, r0
 8001926:	460e      	mov	r6, r1
 8001928:	f383 8811 	msr	BASEPRI, r3
 800192c:	e005      	b.n	800193a <iqGetTimeout+0x1a>
 800192e:	4631      	mov	r1, r6
 8001930:	4620      	mov	r0, r4
 8001932:	f7ff ff9d 	bl	8001870 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001936:	2800      	cmp	r0, #0
 8001938:	db18      	blt.n	800196c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 800193a:	68a5      	ldr	r5, [r4, #8]
 800193c:	2d00      	cmp	r5, #0
 800193e:	d0f6      	beq.n	800192e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8001940:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8001942:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001944:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8001946:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001948:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800194a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800194c:	60a3      	str	r3, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer;
 800194e:	bf28      	it	cs
 8001950:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8001952:	61a2      	str	r2, [r4, #24]
 8001954:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001956:	bf28      	it	cs
 8001958:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 800195a:	69e3      	ldr	r3, [r4, #28]
 800195c:	b10b      	cbz	r3, 8001962 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 800195e:	4620      	mov	r0, r4
 8001960:	4798      	blx	r3
 8001962:	2300      	movs	r3, #0
 8001964:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8001968:	4628      	mov	r0, r5
}
 800196a:	bd70      	pop	{r4, r5, r6, pc}
 800196c:	f385 8811 	msr	BASEPRI, r5
 8001970:	bd70      	pop	{r4, r5, r6, pc}
 8001972:	bf00      	nop
	...

08001980 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001980:	300c      	adds	r0, #12
 8001982:	f7ff bfcd 	b.w	8001920 <iqGetTimeout>
 8001986:	bf00      	nop
	...

08001990 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001990:	300c      	adds	r0, #12
 8001992:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001996:	f7ff bfc3 	b.w	8001920 <iqGetTimeout>
 800199a:	bf00      	nop
 800199c:	0000      	movs	r0, r0
	...

080019a0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 80019a0:	b508      	push	{r3, lr}
 80019a2:	4601      	mov	r1, r0
 80019a4:	2320      	movs	r3, #32
 80019a6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80019aa:	2008      	movs	r0, #8
 80019ac:	f7ff feb0 	bl	8001710 <chSchGoSleepTimeoutS>
 80019b0:	2300      	movs	r3, #0
 80019b2:	f383 8811 	msr	BASEPRI, r3
}
 80019b6:	bd08      	pop	{r3, pc}
	...

080019c0 <i2c_lld_master_transmit_timeout.constprop.36>:
 *                      timeout the driver must be stopped and restarted
 *                      because the bus is in an uncertain state</b>.
 *
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
 80019c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(STM32F1XX_I2C)
  osalDbgCheck((rxbytes == 0) || ((rxbytes > 1) && (rxbuf != NULL)));
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 80019c4:	2700      	movs	r7, #0

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 80019c6:	0049      	lsls	r1, r1, #1
 80019c8:	8401      	strh	r1, [r0, #32]
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
 80019ca:	4699      	mov	r9, r3
  I2C_TypeDef *dp = i2cp->i2c;
 80019cc:	6b41      	ldr	r1, [r0, #52]	; 0x34
  i2cp->errors = I2C_NO_ERROR;
 80019ce:	6087      	str	r7, [r0, #8]
 80019d0:	f387 8811 	msr	BASEPRI, r7
  return (systime_t)STM32_ST_TIM->CNT;
 80019d4:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 80019d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80019da:	463e      	mov	r6, r7
 80019dc:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80019e0:	e9d0 3c0a 	ldrd	r3, ip, [r0, #40]	; 0x28
 80019e4:	f8ce 3000 	str.w	r3, [lr]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80019e8:	f8dc c004 	ldr.w	ip, [ip, #4]
 80019ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 80019ee:	f8ce 200c 	str.w	r2, [lr, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 80019f2:	f8ce 9004 	str.w	r9, [lr, #4]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80019f6:	f8cc 3000 	str.w	r3, [ip]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 80019fa:	f8cc 700c 	str.w	r7, [ip, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 80019fe:	f8cc 7004 	str.w	r7, [ip, #4]
 8001a02:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8001a06:	4645      	mov	r5, r8
 8001a08:	2420      	movs	r4, #32
 8001a0a:	b292      	uxth	r2, r2
 8001a0c:	e001      	b.n	8001a12 <i2c_lld_master_transmit_timeout.constprop.36+0x52>
 8001a0e:	f386 8811 	msr	BASEPRI, r6
 8001a12:	f384 8811 	msr	BASEPRI, r4
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8001a16:	698b      	ldr	r3, [r1, #24]
 8001a18:	079f      	lsls	r7, r3, #30
 8001a1a:	d402      	bmi.n	8001a22 <i2c_lld_master_transmit_timeout.constprop.36+0x62>
 8001a1c:	680b      	ldr	r3, [r1, #0]
 8001a1e:	059b      	lsls	r3, r3, #22
 8001a20:	d51e      	bpl.n	8001a60 <i2c_lld_master_transmit_timeout.constprop.36+0xa0>
 8001a22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8001a24:	1a9b      	subs	r3, r3, r2
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	2b63      	cmp	r3, #99	; 0x63
 8001a2a:	d9f0      	bls.n	8001a0e <i2c_lld_master_transmit_timeout.constprop.36+0x4e>
      dmaStreamDisable(i2cp->dmatx);
 8001a2c:	230e      	movs	r3, #14
      dmaStreamDisable(i2cp->dmarx);
 8001a2e:	e9d0 210b 	ldrd	r2, r1, [r0, #44]	; 0x2c
      dmaStreamDisable(i2cp->dmatx);
 8001a32:	e9d1 5400 	ldrd	r5, r4, [r1]
 8001a36:	6820      	ldr	r0, [r4, #0]
 8001a38:	f020 000f 	bic.w	r0, r0, #15
 8001a3c:	6020      	str	r0, [r4, #0]
 8001a3e:	7b49      	ldrb	r1, [r1, #13]
      dmaStreamDisable(i2cp->dmarx);
 8001a40:	6850      	ldr	r0, [r2, #4]
      dmaStreamDisable(i2cp->dmatx);
 8001a42:	fa03 f101 	lsl.w	r1, r3, r1
 8001a46:	6069      	str	r1, [r5, #4]
      dmaStreamDisable(i2cp->dmarx);
 8001a48:	6801      	ldr	r1, [r0, #0]
 8001a4a:	6814      	ldr	r4, [r2, #0]
 8001a4c:	f021 010f 	bic.w	r1, r1, #15
 8001a50:	6001      	str	r1, [r0, #0]
      return MSG_TIMEOUT;
 8001a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      dmaStreamDisable(i2cp->dmarx);
 8001a56:	7b52      	ldrb	r2, [r2, #13]
 8001a58:	4093      	lsls	r3, r2
 8001a5a:	6063      	str	r3, [r4, #4]
    dmaStreamDisable(i2cp->dmatx);
    dmaStreamDisable(i2cp->dmarx);
  }

  return msg;
}
 8001a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  *trp = tp;
 8001a60:	4603      	mov	r3, r0
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8001a62:	684a      	ldr	r2, [r1, #4]
  return ch.rlist.current;
 8001a64:	4d15      	ldr	r5, [pc, #84]	; (8001abc <i2c_lld_master_transmit_timeout.constprop.36+0xfc>)
 8001a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6a:	604a      	str	r2, [r1, #4]
  dp->CR1 |= I2C_CR1_START;
 8001a6c:	680a      	ldr	r2, [r1, #0]
 8001a6e:	4604      	mov	r4, r0
 8001a70:	69a8      	ldr	r0, [r5, #24]
 8001a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a76:	600a      	str	r2, [r1, #0]
 8001a78:	f843 0f1c 	str.w	r0, [r3, #28]!
  tp->u.wttrp = trp;
 8001a7c:	6243      	str	r3, [r0, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001a7e:	2003      	movs	r0, #3
 8001a80:	f7ff fe2e 	bl	80016e0 <chSchGoSleepS>
  return currp->u.rdymsg;
 8001a84:	69ab      	ldr	r3, [r5, #24]
 8001a86:	6a58      	ldr	r0, [r3, #36]	; 0x24
  if (msg != MSG_OK) {
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	d0e7      	beq.n	8001a5c <i2c_lld_master_transmit_timeout.constprop.36+0x9c>
    dmaStreamDisable(i2cp->dmarx);
 8001a8c:	e9d4 250b 	ldrd	r2, r5, [r4, #44]	; 0x2c
    dmaStreamDisable(i2cp->dmatx);
 8001a90:	230e      	movs	r3, #14
 8001a92:	686c      	ldr	r4, [r5, #4]
 8001a94:	6821      	ldr	r1, [r4, #0]
 8001a96:	f021 010f 	bic.w	r1, r1, #15
 8001a9a:	6021      	str	r1, [r4, #0]
 8001a9c:	7b69      	ldrb	r1, [r5, #13]
 8001a9e:	682d      	ldr	r5, [r5, #0]
    dmaStreamDisable(i2cp->dmarx);
 8001aa0:	6854      	ldr	r4, [r2, #4]
    dmaStreamDisable(i2cp->dmatx);
 8001aa2:	fa03 f101 	lsl.w	r1, r3, r1
 8001aa6:	6069      	str	r1, [r5, #4]
    dmaStreamDisable(i2cp->dmarx);
 8001aa8:	6821      	ldr	r1, [r4, #0]
 8001aaa:	6815      	ldr	r5, [r2, #0]
 8001aac:	f021 010f 	bic.w	r1, r1, #15
 8001ab0:	6021      	str	r1, [r4, #0]
 8001ab2:	7b52      	ldrb	r2, [r2, #13]
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	606b      	str	r3, [r5, #4]
}
 8001ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001abc:	20000db4 	.word	0x20000db4

08001ac0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8001ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 8001ac2:	4a38      	ldr	r2, [pc, #224]	; (8001ba4 <chMtxLockS+0xe4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8001ac4:	6883      	ldr	r3, [r0, #8]
  thread_t *ctp = currp;
 8001ac6:	6995      	ldr	r5, [r2, #24]
  if (mp->owner != NULL) {
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d040      	beq.n	8001b4e <chMtxLockS+0x8e>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8001acc:	68a9      	ldr	r1, [r5, #8]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	4604      	mov	r4, r0
 8001ad2:	4291      	cmp	r1, r2
 8001ad4:	d907      	bls.n	8001ae6 <chMtxLockS+0x26>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8001ad6:	f893 2020 	ldrb.w	r2, [r3, #32]
        tp->prio = ctp->prio;
 8001ada:	6099      	str	r1, [r3, #8]
        switch (tp->state) {
 8001adc:	2a06      	cmp	r2, #6
 8001ade:	d03b      	beq.n	8001b58 <chMtxLockS+0x98>
 8001ae0:	2a07      	cmp	r2, #7
 8001ae2:	d015      	beq.n	8001b10 <chMtxLockS+0x50>
 8001ae4:	b342      	cbz	r2, 8001b38 <chMtxLockS+0x78>
        }
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
 8001ae6:	4626      	mov	r6, r4
 8001ae8:	4623      	mov	r3, r4
 8001aea:	e003      	b.n	8001af4 <chMtxLockS+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001aec:	6899      	ldr	r1, [r3, #8]
 8001aee:	68aa      	ldr	r2, [r5, #8]
 8001af0:	4291      	cmp	r1, r2
 8001af2:	d32a      	bcc.n	8001b4a <chMtxLockS+0x8a>
    cp = cp->queue.next;
 8001af4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001af6:	429c      	cmp	r4, r3
 8001af8:	d1f8      	bne.n	8001aec <chMtxLockS+0x2c>
  tp->queue.prev             = cp->queue.prev;
 8001afa:	6873      	ldr	r3, [r6, #4]
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8001afc:	2006      	movs	r0, #6
 8001afe:	e9c5 6300 	strd	r6, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8001b02:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 8001b04:	6075      	str	r5, [r6, #4]
      ctp->u.wtmtxp = mp;
 8001b06:	626c      	str	r4, [r5, #36]	; 0x24
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
  }
}
 8001b08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 8001b0c:	f7ff bde8 	b.w	80016e0 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 8001b10:	681f      	ldr	r7, [r3, #0]
 8001b12:	6858      	ldr	r0, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8001b14:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8001b16:	6007      	str	r7, [r0, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001b18:	681f      	ldr	r7, [r3, #0]
 8001b1a:	4632      	mov	r2, r6
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	e002      	b.n	8001b26 <chMtxLockS+0x66>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001b20:	6890      	ldr	r0, [r2, #8]
 8001b22:	4288      	cmp	r0, r1
 8001b24:	d334      	bcc.n	8001b90 <chMtxLockS+0xd0>
    cp = cp->queue.next;
 8001b26:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001b28:	4296      	cmp	r6, r2
 8001b2a:	d1f9      	bne.n	8001b20 <chMtxLockS+0x60>
  tp->queue.prev             = cp->queue.prev;
 8001b2c:	6872      	ldr	r2, [r6, #4]
 8001b2e:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8001b32:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8001b34:	6073      	str	r3, [r6, #4]
 8001b36:	e7d6      	b.n	8001ae6 <chMtxLockS+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
 8001b38:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001b3c:	6011      	str	r1, [r2, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 8001b3e:	4618      	mov	r0, r3
  tp->queue.next->queue.prev = tp->queue.prev;
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	f7fe ffbc 	bl	8000ac0 <chSchReadyI>
 8001b48:	e7cd      	b.n	8001ae6 <chMtxLockS+0x26>
    cp = cp->queue.next;
 8001b4a:	461e      	mov	r6, r3
 8001b4c:	e7d5      	b.n	8001afa <chMtxLockS+0x3a>
    mp->next = ctp->mtxlist;
 8001b4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001b50:	e9c0 5302 	strd	r5, r3, [r0, #8]
    ctp->mtxlist = mp;
 8001b54:	63a8      	str	r0, [r5, #56]	; 0x38
}
 8001b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8001b58:	681f      	ldr	r7, [r3, #0]
 8001b5a:	6858      	ldr	r0, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8001b5c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8001b5e:	6007      	str	r7, [r0, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001b60:	681f      	ldr	r7, [r3, #0]
 8001b62:	46b4      	mov	ip, r6
 8001b64:	4632      	mov	r2, r6
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	e002      	b.n	8001b70 <chMtxLockS+0xb0>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001b6a:	6890      	ldr	r0, [r2, #8]
 8001b6c:	4288      	cmp	r0, r1
 8001b6e:	d316      	bcc.n	8001b9e <chMtxLockS+0xde>
    cp = cp->queue.next;
 8001b70:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001b72:	4296      	cmp	r6, r2
 8001b74:	d1f9      	bne.n	8001b6a <chMtxLockS+0xaa>
  tp->queue.prev             = cp->queue.prev;
 8001b76:	f8dc 2004 	ldr.w	r2, [ip, #4]
      while (tp->prio < ctp->prio) {
 8001b7a:	68a9      	ldr	r1, [r5, #8]
 8001b7c:	e9c3 c200 	strd	ip, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8001b80:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8001b82:	f8cc 3004 	str.w	r3, [ip, #4]
          tp = tp->u.wtmtxp->owner;
 8001b86:	68b3      	ldr	r3, [r6, #8]
      while (tp->prio < ctp->prio) {
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	428a      	cmp	r2, r1
 8001b8c:	d3a3      	bcc.n	8001ad6 <chMtxLockS+0x16>
 8001b8e:	e7aa      	b.n	8001ae6 <chMtxLockS+0x26>
    cp = cp->queue.next;
 8001b90:	4616      	mov	r6, r2
  tp->queue.prev             = cp->queue.prev;
 8001b92:	6872      	ldr	r2, [r6, #4]
 8001b94:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8001b98:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8001b9a:	6073      	str	r3, [r6, #4]
 8001b9c:	e7a3      	b.n	8001ae6 <chMtxLockS+0x26>
    cp = cp->queue.next;
 8001b9e:	4694      	mov	ip, r2
 8001ba0:	e7e9      	b.n	8001b76 <chMtxLockS+0xb6>
 8001ba2:	bf00      	nop
 8001ba4:	20000db4 	.word	0x20000db4
	...

08001bb0 <fillScreen>:
{
 8001bb0:	2900      	cmp	r1, #0
 8001bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb4:	bf0c      	ite	eq
 8001bb6:	2700      	moveq	r7, #0
 8001bb8:	27ff      	movne	r7, #255	; 0xff
                drvp->fb[SSD1306_WIDTH_FIXED * idx] = 0x40;
 8001bba:	2640      	movs	r6, #64	; 0x40
 8001bbc:	f100 0410 	add.w	r4, r0, #16
 8001bc0:	f500 6583 	add.w	r5, r0, #1048	; 0x418
 8001bc4:	f804 6c01 	strb.w	r6, [r4, #-1]
                memset(&drvp->fb[SSD1306_WIDTH_FIXED * idx + 1],
 8001bc8:	4620      	mov	r0, r4
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	4639      	mov	r1, r7
 8001bce:	3481      	adds	r4, #129	; 0x81
 8001bd0:	f7fe fcf0 	bl	80005b4 <memset>
        for (idx = 0; idx < 8; idx++) {
 8001bd4:	42ac      	cmp	r4, r5
 8001bd6:	d1f5      	bne.n	8001bc4 <fillScreen+0x14>
}
 8001bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	0000      	movs	r0, r0
	...

08001be0 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001be0:	b40e      	push	{r1, r2, r3}
 8001be2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	ab0f      	add	r3, sp, #60	; 0x3c
 8001bea:	f853 4b04 	ldr.w	r4, [r3], #4
 8001bee:	4605      	mov	r5, r0
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001bf0:	9302      	str	r3, [sp, #8]
 8001bf2:	469b      	mov	fp, r3
  int n = 0;
 8001bf4:	2700      	movs	r7, #0
 8001bf6:	e005      	b.n	8001c04 <chprintf+0x24>
      streamPut(chp, (uint8_t)c);
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	68db      	ldr	r3, [r3, #12]
      n++;
 8001bfe:	3701      	adds	r7, #1
    c = *fmt++;
 8001c00:	4614      	mov	r4, r2
      streamPut(chp, (uint8_t)c);
 8001c02:	4798      	blx	r3
    c = *fmt++;
 8001c04:	7821      	ldrb	r1, [r4, #0]
 8001c06:	1c62      	adds	r2, r4, #1
    if (c == 0) {
 8001c08:	2900      	cmp	r1, #0
 8001c0a:	d07f      	beq.n	8001d0c <chprintf+0x12c>
    if (c != '%') {
 8001c0c:	2925      	cmp	r1, #37	; 0x25
 8001c0e:	d1f3      	bne.n	8001bf8 <chprintf+0x18>
    if (*fmt == '-') {
 8001c10:	7863      	ldrb	r3, [r4, #1]
 8001c12:	2b2d      	cmp	r3, #45	; 0x2d
 8001c14:	bf03      	ittte	eq
 8001c16:	78a3      	ldrbeq	r3, [r4, #2]
      fmt++;
 8001c18:	1ca2      	addeq	r2, r4, #2
      left_align = true;
 8001c1a:	2101      	moveq	r1, #1
    left_align = false;
 8001c1c:	2100      	movne	r1, #0
    if (*fmt == '+') {
 8001c1e:	2b2b      	cmp	r3, #43	; 0x2b
      do_sign = true;
 8001c20:	bf05      	ittet	eq
 8001c22:	f04f 0c01 	moveq.w	ip, #1
 8001c26:	7853      	ldrbeq	r3, [r2, #1]
    do_sign = false;
 8001c28:	f04f 0c00 	movne.w	ip, #0
      fmt++;
 8001c2c:	4462      	addeq	r2, ip
    if (*fmt == '0') {
 8001c2e:	2b30      	cmp	r3, #48	; 0x30
 8001c30:	bf03      	ittte	eq
 8001c32:	7853      	ldrbeq	r3, [r2, #1]
      filler = '0';
 8001c34:	f04f 0830 	moveq.w	r8, #48	; 0x30
      fmt++;
 8001c38:	3201      	addeq	r2, #1
    filler = ' ';
 8001c3a:	f04f 0820 	movne.w	r8, #32
    if ( *fmt == '*') {
 8001c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8001c40:	d14d      	bne.n	8001cde <chprintf+0xfe>
      width = va_arg(ap, int);
 8001c42:	f8db 6000 	ldr.w	r6, [fp]
      c = *fmt++;
 8001c46:	7853      	ldrb	r3, [r2, #1]
      width = va_arg(ap, int);
 8001c48:	f10b 0004 	add.w	r0, fp, #4
      c = *fmt++;
 8001c4c:	1c94      	adds	r4, r2, #2
    if (c == '.') {
 8001c4e:	2b2e      	cmp	r3, #46	; 0x2e
 8001c50:	f104 0e01 	add.w	lr, r4, #1
 8001c54:	f000 809f 	beq.w	8001d96 <chprintf+0x1b6>
    precision = 0;
 8001c58:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 8001c5a:	f003 09df 	and.w	r9, r3, #223	; 0xdf
 8001c5e:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
 8001c62:	d059      	beq.n	8001d18 <chprintf+0x138>
    switch (c) {
 8001c64:	f1a3 0e44 	sub.w	lr, r3, #68	; 0x44
 8001c68:	f1be 0f34 	cmp.w	lr, #52	; 0x34
 8001c6c:	f200 81b7 	bhi.w	8001fde <chprintf+0x3fe>
 8001c70:	e8df f01e 	tbh	[pc, lr, lsl #1]
 8001c74:	01b50169 	.word	0x01b50169
 8001c78:	01b501b5 	.word	0x01b501b5
 8001c7c:	016901b5 	.word	0x016901b5
 8001c80:	01b501b5 	.word	0x01b501b5
 8001c84:	01b501b5 	.word	0x01b501b5
 8001c88:	015401b5 	.word	0x015401b5
 8001c8c:	01b500b5 	.word	0x01b500b5
 8001c90:	01b501b5 	.word	0x01b501b5
 8001c94:	015801b5 	.word	0x015801b5
 8001c98:	01b501b5 	.word	0x01b501b5
 8001c9c:	01b500b5 	.word	0x01b500b5
 8001ca0:	01b501b5 	.word	0x01b501b5
 8001ca4:	01b501b5 	.word	0x01b501b5
 8001ca8:	01b501b5 	.word	0x01b501b5
 8001cac:	01b501b5 	.word	0x01b501b5
 8001cb0:	015c01b5 	.word	0x015c01b5
 8001cb4:	01b50169 	.word	0x01b50169
 8001cb8:	01b501b5 	.word	0x01b501b5
 8001cbc:	016901b5 	.word	0x016901b5
 8001cc0:	01b501b5 	.word	0x01b501b5
 8001cc4:	01b501b5 	.word	0x01b501b5
 8001cc8:	015401b5 	.word	0x015401b5
 8001ccc:	01b500b5 	.word	0x01b500b5
 8001cd0:	012701b5 	.word	0x012701b5
 8001cd4:	015801b5 	.word	0x015801b5
 8001cd8:	01b501b5 	.word	0x01b501b5
 8001cdc:	00b5      	.short	0x00b5
        c = *fmt++;
 8001cde:	1c54      	adds	r4, r2, #1
        if (c == 0) {
 8001ce0:	b1a3      	cbz	r3, 8001d0c <chprintf+0x12c>
        if (c >= '0' && c <= '9') {
 8001ce2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	2a09      	cmp	r2, #9
      width = 0;
 8001cea:	bf98      	it	ls
 8001cec:	2600      	movls	r6, #0
        if (c >= '0' && c <= '9') {
 8001cee:	d902      	bls.n	8001cf6 <chprintf+0x116>
 8001cf0:	e18e      	b.n	8002010 <chprintf+0x430>
 8001cf2:	2a09      	cmp	r2, #9
 8001cf4:	d85b      	bhi.n	8001dae <chprintf+0x1ce>
        c = *fmt++;
 8001cf6:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 8001cfa:	eb06 0686 	add.w	r6, r6, r6, lsl #2
        if (c >= '0' && c <= '9') {
 8001cfe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
          width = width * 10 + c;
 8001d02:	eb02 0646 	add.w	r6, r2, r6, lsl #1
        if (c >= '0' && c <= '9') {
 8001d06:	b2c2      	uxtb	r2, r0
        if (c == 0) {
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f2      	bne.n	8001cf2 <chprintf+0x112>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8001d0c:	4638      	mov	r0, r7
 8001d0e:	b006      	add	sp, #24
 8001d10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d14:	b003      	add	sp, #12
 8001d16:	4770      	bx	lr
      c = *fmt++;
 8001d18:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f6      	beq.n	8001d0c <chprintf+0x12c>
    switch (c) {
 8001d1e:	f1a3 0444 	sub.w	r4, r3, #68	; 0x44
 8001d22:	2c34      	cmp	r4, #52	; 0x34
 8001d24:	f200 815a 	bhi.w	8001fdc <chprintf+0x3fc>
 8001d28:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001d2c:	01580153 	.word	0x01580153
 8001d30:	01580158 	.word	0x01580158
 8001d34:	01530158 	.word	0x01530158
 8001d38:	01580158 	.word	0x01580158
 8001d3c:	01580158 	.word	0x01580158
 8001d40:	00f70158 	.word	0x00f70158
 8001d44:	01580058 	.word	0x01580058
 8001d48:	01580158 	.word	0x01580158
 8001d4c:	00fb0158 	.word	0x00fb0158
 8001d50:	01580158 	.word	0x01580158
 8001d54:	01580058 	.word	0x01580058
 8001d58:	01580158 	.word	0x01580158
 8001d5c:	01580158 	.word	0x01580158
 8001d60:	01580158 	.word	0x01580158
 8001d64:	01580158 	.word	0x01580158
 8001d68:	00ff0158 	.word	0x00ff0158
 8001d6c:	01580153 	.word	0x01580153
 8001d70:	01580158 	.word	0x01580158
 8001d74:	01530158 	.word	0x01530158
 8001d78:	01580158 	.word	0x01580158
 8001d7c:	01580158 	.word	0x01580158
 8001d80:	00f70158 	.word	0x00f70158
 8001d84:	01580058 	.word	0x01580058
 8001d88:	00ca0158 	.word	0x00ca0158
 8001d8c:	00fb0158 	.word	0x00fb0158
 8001d90:	01580158 	.word	0x01580158
 8001d94:	0058      	.short	0x0058
      c = *fmt++;
 8001d96:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0b7      	beq.n	8001d0c <chprintf+0x12c>
      if (c == '*') {
 8001d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8001d9e:	d108      	bne.n	8001db2 <chprintf+0x1d2>
        precision = va_arg(ap, int);
 8001da0:	6802      	ldr	r2, [r0, #0]
        c = *fmt++;
 8001da2:	7863      	ldrb	r3, [r4, #1]
 8001da4:	f104 0e03 	add.w	lr, r4, #3
        precision = va_arg(ap, int);
 8001da8:	3004      	adds	r0, #4
        c = *fmt++;
 8001daa:	3402      	adds	r4, #2
 8001dac:	e755      	b.n	8001c5a <chprintf+0x7a>
        if (c >= '0' && c <= '9') {
 8001dae:	4658      	mov	r0, fp
 8001db0:	e74d      	b.n	8001c4e <chprintf+0x6e>
    precision = 0;
 8001db2:	2200      	movs	r2, #0
 8001db4:	e006      	b.n	8001dc4 <chprintf+0x1e4>
          c = *fmt++;
 8001db6:	f819 3c01 	ldrb.w	r3, [r9, #-1]
          precision = precision * 10 + c;
 8001dba:	eb04 024a 	add.w	r2, r4, sl, lsl #1
 8001dbe:	46ce      	mov	lr, r9
          if (c == 0) {
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0a3      	beq.n	8001d0c <chprintf+0x12c>
        while (c >= '0' && c <= '9') {
 8001dc4:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8001dc8:	b2e4      	uxtb	r4, r4
 8001dca:	2c09      	cmp	r4, #9
 8001dcc:	f10e 0901 	add.w	r9, lr, #1
          precision = precision * 10 + c;
 8001dd0:	eb02 0a82 	add.w	sl, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 8001dd4:	d9ef      	bls.n	8001db6 <chprintf+0x1d6>
 8001dd6:	4674      	mov	r4, lr
 8001dd8:	46ce      	mov	lr, r9
 8001dda:	e73e      	b.n	8001c5a <chprintf+0x7a>
      c = *fmt++;
 8001ddc:	4674      	mov	r4, lr
    switch (c) {
 8001dde:	f04f 0e10 	mov.w	lr, #16
 8001de2:	4683      	mov	fp, r0
  q = p + MAX_FILLER;
 8001de4:	f10d 0017 	add.w	r0, sp, #23
 8001de8:	f85b 2b04 	ldr.w	r2, [fp], #4
 8001dec:	e000      	b.n	8001df0 <chprintf+0x210>
  } while ((ll /= radix) != 0);
 8001dee:	4650      	mov	r0, sl
    i = (int)(l % radix);
 8001df0:	fbb2 fcfe 	udiv	ip, r2, lr
 8001df4:	fb0e 221c 	mls	r2, lr, ip, r2
    i += '0';
 8001df8:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9') {
 8001dfc:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8001dfe:	bfc8      	it	gt
 8001e00:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    l /= radix;
 8001e04:	4662      	mov	r2, ip
    *--q = i;
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f800 3c01 	strb.w	r3, [r0, #-1]
 8001e0c:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
  } while ((ll /= radix) != 0);
 8001e10:	2a00      	cmp	r2, #0
 8001e12:	d1ec      	bne.n	8001dee <chprintf+0x20e>
 8001e14:	4602      	mov	r2, r0
  i = (int)(p + MAX_FILLER - q);
 8001e16:	f10d 0017 	add.w	r0, sp, #23
 8001e1a:	f10d 090c 	add.w	r9, sp, #12
 8001e1e:	eba0 0e0a 	sub.w	lr, r0, sl
 8001e22:	46cc      	mov	ip, r9
 8001e24:	eb0a 000e 	add.w	r0, sl, lr
 8001e28:	e001      	b.n	8001e2e <chprintf+0x24e>
 8001e2a:	f812 3b01 	ldrb.w	r3, [r2], #1
  while (--i);
 8001e2e:	4282      	cmp	r2, r0
    *p++ = *q++;
 8001e30:	f80c 3b01 	strb.w	r3, [ip], #1
  while (--i);
 8001e34:	d1f9      	bne.n	8001e2a <chprintf+0x24a>
 8001e36:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8001e3a:	eba6 060e 	sub.w	r6, r6, lr
 8001e3e:	9300      	str	r3, [sp, #0]
    if ((width -= i) < 0) {
 8001e40:	2e00      	cmp	r6, #0
 8001e42:	db64      	blt.n	8001f0e <chprintf+0x32e>
    if (left_align == false) {
 8001e44:	2900      	cmp	r1, #0
 8001e46:	f040 80d4 	bne.w	8001ff2 <chprintf+0x412>
      width = -width;
 8001e4a:	4273      	negs	r3, r6
    if (width < 0) {
 8001e4c:	2e00      	cmp	r6, #0
 8001e4e:	f000 80cf 	beq.w	8001ff0 <chprintf+0x410>
      if (*s == '-' && filler == '0') {
 8001e52:	f899 1000 	ldrb.w	r1, [r9]
 8001e56:	682a      	ldr	r2, [r5, #0]
 8001e58:	292d      	cmp	r1, #45	; 0x2d
 8001e5a:	68d2      	ldr	r2, [r2, #12]
 8001e5c:	f000 80a7 	beq.w	8001fae <chprintf+0x3ce>
 8001e60:	469a      	mov	sl, r3
 8001e62:	e001      	b.n	8001e68 <chprintf+0x288>
 8001e64:	682b      	ldr	r3, [r5, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
        streamPut(chp, (uint8_t)filler);
 8001e68:	4641      	mov	r1, r8
 8001e6a:	4628      	mov	r0, r5
 8001e6c:	4790      	blx	r2
      } while (++width != 0);
 8001e6e:	f11a 0a01 	adds.w	sl, sl, #1
 8001e72:	d1f7      	bne.n	8001e64 <chprintf+0x284>
    while (--i >= 0) {
 8001e74:	9a00      	ldr	r2, [sp, #0]
 8001e76:	4653      	mov	r3, sl
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	4437      	add	r7, r6
 8001e7c:	f6ff aec2 	blt.w	8001c04 <chprintf+0x24>
 8001e80:	461e      	mov	r6, r3
      width = -width;
 8001e82:	f8dd a000 	ldr.w	sl, [sp]
      streamPut(chp, (uint8_t)*s++);
 8001e86:	682b      	ldr	r3, [r5, #0]
    while (--i >= 0) {
 8001e88:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f819 1b01 	ldrb.w	r1, [r9], #1
 8001e92:	4628      	mov	r0, r5
 8001e94:	4798      	blx	r3
    while (--i >= 0) {
 8001e96:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8001e9a:	d1f4      	bne.n	8001e86 <chprintf+0x2a6>
 8001e9c:	9b00      	ldr	r3, [sp, #0]
 8001e9e:	3701      	adds	r7, #1
 8001ea0:	443b      	add	r3, r7
 8001ea2:	461f      	mov	r7, r3
    while (width) {
 8001ea4:	2e00      	cmp	r6, #0
 8001ea6:	f43f aead 	beq.w	8001c04 <chprintf+0x24>
 8001eaa:	46b1      	mov	r9, r6
      streamPut(chp, (uint8_t)filler);
 8001eac:	682b      	ldr	r3, [r5, #0]
 8001eae:	4641      	mov	r1, r8
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	4798      	blx	r3
    while (width) {
 8001eb6:	f1b9 0901 	subs.w	r9, r9, #1
 8001eba:	d1f7      	bne.n	8001eac <chprintf+0x2cc>
 8001ebc:	4437      	add	r7, r6
 8001ebe:	e6a1      	b.n	8001c04 <chprintf+0x24>
      c = *fmt++;
 8001ec0:	4674      	mov	r4, lr
      if ((s = va_arg(ap, char *)) == 0) {
 8001ec2:	f8d0 9000 	ldr.w	r9, [r0]
 8001ec6:	f100 0b04 	add.w	fp, r0, #4
 8001eca:	f1b9 0f00 	cmp.w	r9, #0
 8001ece:	f000 80af 	beq.w	8002030 <chprintf+0x450>
 8001ed2:	f899 3000 	ldrb.w	r3, [r9]
 8001ed6:	46ca      	mov	sl, r9
      if (precision == 0) {
 8001ed8:	2a00      	cmp	r2, #0
 8001eda:	f040 808f 	bne.w	8001ffc <chprintf+0x41c>
      for (p = s; *p && (--precision >= 0); p++)
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8090 	beq.w	8002004 <chprintf+0x424>
 8001ee4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001ee8:	464b      	mov	r3, r9
 8001eea:	e001      	b.n	8001ef0 <chprintf+0x310>
 8001eec:	1c50      	adds	r0, r2, #1
 8001eee:	d004      	beq.n	8001efa <chprintf+0x31a>
 8001ef0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001ef4:	3a01      	subs	r2, #1
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d1f8      	bne.n	8001eec <chprintf+0x30c>
 8001efa:	eba3 030a 	sub.w	r3, r3, sl
 8001efe:	1af6      	subs	r6, r6, r3
    if ((width -= i) < 0) {
 8001f00:	2e00      	cmp	r6, #0
 8001f02:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8001f06:	9300      	str	r3, [sp, #0]
      filler = ' ';
 8001f08:	f04f 0820 	mov.w	r8, #32
    if ((width -= i) < 0) {
 8001f0c:	da9a      	bge.n	8001e44 <chprintf+0x264>
    while (--i >= 0) {
 8001f0e:	9b00      	ldr	r3, [sp, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f6ff ae77 	blt.w	8001c04 <chprintf+0x24>
      width = 0;
 8001f16:	2600      	movs	r6, #0
 8001f18:	e7b3      	b.n	8001e82 <chprintf+0x2a2>
      c = *fmt++;
 8001f1a:	4674      	mov	r4, lr
    case 'O':
 8001f1c:	f04f 0e08 	mov.w	lr, #8
 8001f20:	e75f      	b.n	8001de2 <chprintf+0x202>
      c = *fmt++;
 8001f22:	4674      	mov	r4, lr
    case 'U':
 8001f24:	f04f 0e0a 	mov.w	lr, #10
 8001f28:	e75b      	b.n	8001de2 <chprintf+0x202>
      c = *fmt++;
 8001f2a:	4674      	mov	r4, lr
      *p++ = va_arg(ap, int);
 8001f2c:	6803      	ldr	r3, [r0, #0]
 8001f2e:	f10d 0918 	add.w	r9, sp, #24
 8001f32:	f809 3d0c 	strb.w	r3, [r9, #-12]!
 8001f36:	2300      	movs	r3, #0
 8001f38:	3e01      	subs	r6, #1
 8001f3a:	f100 0b04 	add.w	fp, r0, #4
 8001f3e:	9300      	str	r3, [sp, #0]
      filler = ' ';
 8001f40:	f04f 0820 	mov.w	r8, #32
 8001f44:	e77c      	b.n	8001e40 <chprintf+0x260>
 8001f46:	4683      	mov	fp, r0
 8001f48:	f85b 2b04 	ldr.w	r2, [fp], #4
      if (l < 0) {
 8001f4c:	2a00      	cmp	r2, #0
 8001f4e:	db62      	blt.n	8002016 <chprintf+0x436>
        if (do_sign) {
 8001f50:	f1bc 0f00 	cmp.w	ip, #0
 8001f54:	d068      	beq.n	8002028 <chprintf+0x448>
          *p++ = '+';
 8001f56:	232b      	movs	r3, #43	; 0x2b
 8001f58:	f10d 0c0d 	add.w	ip, sp, #13
 8001f5c:	f88d 300c 	strb.w	r3, [sp, #12]
 8001f60:	f10d 090c 	add.w	r9, sp, #12
  q = p + MAX_FILLER;
 8001f64:	f10c 0a0b 	add.w	sl, ip, #11
 8001f68:	4650      	mov	r0, sl
    i = (int)(l % radix);
 8001f6a:	4b35      	ldr	r3, [pc, #212]	; (8002040 <chprintf+0x460>)
 8001f6c:	fba3 e302 	umull	lr, r3, r3, r2
 8001f70:	08db      	lsrs	r3, r3, #3
 8001f72:	469e      	mov	lr, r3
 8001f74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f78:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
  } while ((ll /= radix) != 0);
 8001f7c:	4672      	mov	r2, lr
    i += '0';
 8001f7e:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	d1ef      	bne.n	8001f6a <chprintf+0x38a>
  i = (int)(p + MAX_FILLER - q);
 8001f8a:	ebaa 0200 	sub.w	r2, sl, r0
 8001f8e:	4462      	add	r2, ip
 8001f90:	e001      	b.n	8001f96 <chprintf+0x3b6>
 8001f92:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
 8001f96:	f80c 3b01 	strb.w	r3, [ip], #1
  while (--i);
 8001f9a:	4594      	cmp	ip, r2
 8001f9c:	d1f9      	bne.n	8001f92 <chprintf+0x3b2>
 8001f9e:	ebac 0c09 	sub.w	ip, ip, r9
 8001fa2:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8001fa6:	eba6 060c 	sub.w	r6, r6, ip
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	e748      	b.n	8001e40 <chprintf+0x260>
      if (*s == '-' && filler == '0') {
 8001fae:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8001fb2:	f47f af55 	bne.w	8001e60 <chprintf+0x280>
        streamPut(chp, (uint8_t)*s++);
 8001fb6:	4628      	mov	r0, r5
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	4790      	blx	r2
 8001fbc:	9b00      	ldr	r3, [sp, #0]
 8001fbe:	682a      	ldr	r2, [r5, #0]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	9b01      	ldr	r3, [sp, #4]
 8001fc6:	3701      	adds	r7, #1
 8001fc8:	68d2      	ldr	r2, [r2, #12]
 8001fca:	f109 0901 	add.w	r9, r9, #1
 8001fce:	469a      	mov	sl, r3
 8001fd0:	e74a      	b.n	8001e68 <chprintf+0x288>
 8001fd2:	4683      	mov	fp, r0
      c = *fmt++;
 8001fd4:	4674      	mov	r4, lr
 8001fd6:	f85b 2b04 	ldr.w	r2, [fp], #4
 8001fda:	e7b7      	b.n	8001f4c <chprintf+0x36c>
 8001fdc:	4674      	mov	r4, lr
      *p++ = c;
 8001fde:	f10d 0918 	add.w	r9, sp, #24
 8001fe2:	f809 3d0c 	strb.w	r3, [r9, #-12]!
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	3e01      	subs	r6, #1
 8001fea:	4683      	mov	fp, r0
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	e727      	b.n	8001e40 <chprintf+0x260>
      width = -width;
 8001ff0:	461e      	mov	r6, r3
    while (--i >= 0) {
 8001ff2:	9b00      	ldr	r3, [sp, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f6bf af44 	bge.w	8001e82 <chprintf+0x2a2>
 8001ffa:	e753      	b.n	8001ea4 <chprintf+0x2c4>
      for (p = s; *p && (--precision >= 0); p++)
 8001ffc:	b113      	cbz	r3, 8002004 <chprintf+0x424>
 8001ffe:	3a01      	subs	r2, #1
 8002000:	f57f af72 	bpl.w	8001ee8 <chprintf+0x308>
 8002004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      filler = ' ';
 8002008:	f04f 0820 	mov.w	r8, #32
      for (p = s; *p && (--precision >= 0); p++)
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	e717      	b.n	8001e40 <chprintf+0x260>
        if (c >= '0' && c <= '9') {
 8002010:	4658      	mov	r0, fp
      width = 0;
 8002012:	2600      	movs	r6, #0
 8002014:	e61b      	b.n	8001c4e <chprintf+0x6e>
        *p++ = '-';
 8002016:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002018:	4252      	negs	r2, r2
        *p++ = '-';
 800201a:	f88d 300c 	strb.w	r3, [sp, #12]
 800201e:	f10d 0c0d 	add.w	ip, sp, #13
 8002022:	f10d 090c 	add.w	r9, sp, #12
 8002026:	e79d      	b.n	8001f64 <chprintf+0x384>
    p = tmpbuf;
 8002028:	f10d 090c 	add.w	r9, sp, #12
 800202c:	46cc      	mov	ip, r9
 800202e:	e799      	b.n	8001f64 <chprintf+0x384>
 8002030:	f8df a010 	ldr.w	sl, [pc, #16]	; 8002044 <chprintf+0x464>
      if (precision == 0) {
 8002034:	46d1      	mov	r9, sl
 8002036:	2a00      	cmp	r2, #0
 8002038:	f43f af54 	beq.w	8001ee4 <chprintf+0x304>
 800203c:	e7df      	b.n	8001ffe <chprintf+0x41e>
 800203e:	bf00      	nop
 8002040:	cccccccd 	.word	0xcccccccd
 8002044:	0800455c 	.word	0x0800455c
	...

08002050 <Thread1>:
        (void)arg;

        chRegSetThreadName("blinker");
        while (true)
        {
                palClearPad(GPIOA, 2);
 8002050:	2504      	movs	r5, #4
{
 8002052:	b580      	push	{r7, lr}
                palClearPad(GPIOA, 2);
 8002054:	462f      	mov	r7, r5
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <Thread1+0x34>)
 8002058:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <Thread1+0x38>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4e0b      	ldr	r6, [pc, #44]	; (800208c <Thread1+0x3c>)
 800205e:	4c0c      	ldr	r4, [pc, #48]	; (8002090 <Thread1+0x40>)
 8002060:	619a      	str	r2, [r3, #24]
 8002062:	6167      	str	r7, [r4, #20]
                chThdSleepMilliseconds(100);
 8002064:	20c8      	movs	r0, #200	; 0xc8
 8002066:	f7ff fc9b 	bl	80019a0 <chThdSleep>
                palSetPad(GPIOA, 2);
 800206a:	6125      	str	r5, [r4, #16]
                chThdSleepMilliseconds(100);
 800206c:	20c8      	movs	r0, #200	; 0xc8
 800206e:	f7ff fc97 	bl	80019a0 <chThdSleep>
                chprintf(chp, "ADC --- IN = %d\n\r", (uint16_t)ad0in);
 8002072:	6830      	ldr	r0, [r6, #0]
 8002074:	f7fe fa08 	bl	8000488 <__aeabi_f2uiz>
 8002078:	4906      	ldr	r1, [pc, #24]	; (8002094 <Thread1+0x44>)
 800207a:	b282      	uxth	r2, r0
 800207c:	4806      	ldr	r0, [pc, #24]	; (8002098 <Thread1+0x48>)
 800207e:	f7ff fdaf 	bl	8001be0 <chprintf>
 8002082:	e7ee      	b.n	8002062 <Thread1+0x12>
 8002084:	20000db4 	.word	0x20000db4
 8002088:	08004448 	.word	0x08004448
 800208c:	20000db0 	.word	0x20000db0
 8002090:	40010800 	.word	0x40010800
 8002094:	08004450 	.word	0x08004450
 8002098:	20000894 	.word	0x20000894
 800209c:	00000000 	.word	0x00000000

080020a0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80020a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020a4:	b085      	sub	sp, #20
 80020a6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 80020aa:	f8d0 901c 	ldr.w	r9, [r0, #28]
 80020ae:	f04f 0a20 	mov.w	sl, #32
 80020b2:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 80020b6:	b342      	cbz	r2, 800210a <oqWriteTimeout+0x6a>
 80020b8:	4604      	mov	r4, r0
 80020ba:	460f      	mov	r7, r1
 80020bc:	4616      	mov	r6, r2
 80020be:	f04f 0b00 	mov.w	fp, #0
  if (n > oqGetEmptyI(oqp)) {
 80020c2:	68a2      	ldr	r2, [r4, #8]
 80020c4:	4296      	cmp	r6, r2
 80020c6:	bf98      	it	ls
 80020c8:	4635      	movls	r5, r6
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80020ca:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 80020ce:	bf88      	it	hi
 80020d0:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80020d2:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 80020d6:	45a8      	cmp	r8, r5
 80020d8:	d840      	bhi.n	800215c <oqWriteTimeout+0xbc>
  else if (n > s1) {
 80020da:	d32b      	bcc.n	8002134 <oqWriteTimeout+0x94>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80020dc:	462a      	mov	r2, r5
 80020de:	4639      	mov	r1, r7
 80020e0:	f7fe f9f2 	bl	80004c8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80020e4:	68e2      	ldr	r2, [r4, #12]
 80020e6:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 80020e8:	68a2      	ldr	r2, [r4, #8]
 80020ea:	1b52      	subs	r2, r2, r5
 80020ec:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 80020ee:	b19d      	cbz	r5, 8002118 <oqWriteTimeout+0x78>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80020f0:	f1b9 0f00 	cmp.w	r9, #0
 80020f4:	d001      	beq.n	80020fa <oqWriteTimeout+0x5a>
        nfy(oqp);
 80020f6:	4620      	mov	r0, r4
 80020f8:	47c8      	blx	r9
 80020fa:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80020fe:	1b76      	subs	r6, r6, r5
      bp += done;
 8002100:	442f      	add	r7, r5
 8002102:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8002106:	2e00      	cmp	r6, #0
 8002108:	d1db      	bne.n	80020c2 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 800210a:	9803      	ldr	r0, [sp, #12]
 800210c:	2300      	movs	r3, #0
 800210e:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8002112:	b005      	add	sp, #20
 8002114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002118:	9902      	ldr	r1, [sp, #8]
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff fba8 	bl	8001870 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002120:	2800      	cmp	r0, #0
 8002122:	d0ce      	beq.n	80020c2 <oqWriteTimeout+0x22>
 8002124:	9b03      	ldr	r3, [sp, #12]
 8002126:	1b98      	subs	r0, r3, r6
 8002128:	2300      	movs	r3, #0
 800212a:	f383 8811 	msr	BASEPRI, r3
}
 800212e:	b005      	add	sp, #20
 8002130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8002134:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002138:	4642      	mov	r2, r8
 800213a:	4639      	mov	r1, r7
    s2 = n - s1;
 800213c:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800213e:	f7fe f9c3 	bl	80004c8 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8002142:	eb07 0108 	add.w	r1, r7, r8
 8002146:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800214a:	68e0      	ldr	r0, [r4, #12]
 800214c:	4642      	mov	r2, r8
 800214e:	f7fe f9bb 	bl	80004c8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002152:	4643      	mov	r3, r8
 8002154:	68e2      	ldr	r2, [r4, #12]
 8002156:	18d3      	adds	r3, r2, r3
 8002158:	6163      	str	r3, [r4, #20]
 800215a:	e7c5      	b.n	80020e8 <oqWriteTimeout+0x48>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800215c:	462a      	mov	r2, r5
 800215e:	4639      	mov	r1, r7
 8002160:	f7fe f9b2 	bl	80004c8 <memcpy>
    oqp->q_wrptr += n;
 8002164:	6962      	ldr	r2, [r4, #20]
 8002166:	442a      	add	r2, r5
 8002168:	6162      	str	r2, [r4, #20]
 800216a:	e7bd      	b.n	80020e8 <oqWriteTimeout+0x48>
 800216c:	0000      	movs	r0, r0
	...

08002170 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002170:	3030      	adds	r0, #48	; 0x30
 8002172:	f7ff bf95 	b.w	80020a0 <oqWriteTimeout>
 8002176:	bf00      	nop
	...

08002180 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002180:	3030      	adds	r0, #48	; 0x30
 8002182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002186:	f7ff bf8b 	b.w	80020a0 <oqWriteTimeout>
 800218a:	bf00      	nop
 800218c:	0000      	movs	r0, r0
	...

08002190 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8002190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002194:	b085      	sub	sp, #20
 8002196:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 800219a:	f8d0 901c 	ldr.w	r9, [r0, #28]
 800219e:	f04f 0a20 	mov.w	sl, #32
 80021a2:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 80021a6:	b342      	cbz	r2, 80021fa <iqReadTimeout+0x6a>
 80021a8:	4604      	mov	r4, r0
 80021aa:	460f      	mov	r7, r1
 80021ac:	4616      	mov	r6, r2
 80021ae:	f04f 0b00 	mov.w	fp, #0
  if (n > iqGetFullI(iqp)) {
 80021b2:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80021b4:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 80021b6:	4296      	cmp	r6, r2
 80021b8:	bf98      	it	ls
 80021ba:	4635      	movls	r5, r6
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80021bc:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 80021be:	bf88      	it	hi
 80021c0:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80021c2:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 80021c6:	45a8      	cmp	r8, r5
 80021c8:	d840      	bhi.n	800224c <iqReadTimeout+0xbc>
  else if (n > s1) {
 80021ca:	d32b      	bcc.n	8002224 <iqReadTimeout+0x94>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80021cc:	462a      	mov	r2, r5
 80021ce:	4638      	mov	r0, r7
 80021d0:	f7fe f97a 	bl	80004c8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80021d4:	68e2      	ldr	r2, [r4, #12]
 80021d6:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 80021d8:	68a2      	ldr	r2, [r4, #8]
 80021da:	1b52      	subs	r2, r2, r5
 80021dc:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 80021de:	b19d      	cbz	r5, 8002208 <iqReadTimeout+0x78>
      if (nfy != NULL) {
 80021e0:	f1b9 0f00 	cmp.w	r9, #0
 80021e4:	d001      	beq.n	80021ea <iqReadTimeout+0x5a>
        nfy(iqp);
 80021e6:	4620      	mov	r0, r4
 80021e8:	47c8      	blx	r9
 80021ea:	f38b 8811 	msr	BASEPRI, fp
      n  -= done;
 80021ee:	1b76      	subs	r6, r6, r5
      bp += done;
 80021f0:	442f      	add	r7, r5
 80021f2:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 80021f6:	2e00      	cmp	r6, #0
 80021f8:	d1db      	bne.n	80021b2 <iqReadTimeout+0x22>
  if (n > iqGetFullI(iqp)) {
 80021fa:	9803      	ldr	r0, [sp, #12]
 80021fc:	2300      	movs	r3, #0
 80021fe:	f383 8811 	msr	BASEPRI, r3
}
 8002202:	b005      	add	sp, #20
 8002204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002208:	9902      	ldr	r1, [sp, #8]
 800220a:	4620      	mov	r0, r4
 800220c:	f7ff fb30 	bl	8001870 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002210:	2800      	cmp	r0, #0
 8002212:	d0ce      	beq.n	80021b2 <iqReadTimeout+0x22>
 8002214:	9b03      	ldr	r3, [sp, #12]
 8002216:	1b98      	subs	r0, r3, r6
 8002218:	2300      	movs	r3, #0
 800221a:	f383 8811 	msr	BASEPRI, r3
}
 800221e:	b005      	add	sp, #20
 8002220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8002224:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002228:	4642      	mov	r2, r8
 800222a:	4638      	mov	r0, r7
    s2 = n - s1;
 800222c:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 800222e:	f7fe f94b 	bl	80004c8 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8002232:	eb07 0008 	add.w	r0, r7, r8
 8002236:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800223a:	68e1      	ldr	r1, [r4, #12]
 800223c:	4642      	mov	r2, r8
 800223e:	f7fe f943 	bl	80004c8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002242:	4643      	mov	r3, r8
 8002244:	68e2      	ldr	r2, [r4, #12]
 8002246:	18d3      	adds	r3, r2, r3
 8002248:	61a3      	str	r3, [r4, #24]
 800224a:	e7c5      	b.n	80021d8 <iqReadTimeout+0x48>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800224c:	462a      	mov	r2, r5
 800224e:	4638      	mov	r0, r7
 8002250:	f7fe f93a 	bl	80004c8 <memcpy>
    iqp->q_rdptr += n;
 8002254:	69a2      	ldr	r2, [r4, #24]
 8002256:	442a      	add	r2, r5
 8002258:	61a2      	str	r2, [r4, #24]
 800225a:	e7bd      	b.n	80021d8 <iqReadTimeout+0x48>
 800225c:	0000      	movs	r0, r0
	...

08002260 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002260:	300c      	adds	r0, #12
 8002262:	f7ff bf95 	b.w	8002190 <iqReadTimeout>
 8002266:	bf00      	nop
	...

08002270 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002270:	300c      	adds	r0, #12
 8002272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002276:	f7ff bf8b 	b.w	8002190 <iqReadTimeout>
 800227a:	bf00      	nop
 800227c:	0000      	movs	r0, r0
	...

08002280 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8002280:	2100      	movs	r1, #0
 8002282:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  dma.allocated_mask = 0U;
 8002286:	4813      	ldr	r0, [pc, #76]	; (80022d4 <main+0x54>)
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <main+0x58>)

/*
 * Application entry point.
 */
int main(void)
{
 800228a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  dma.isr_mask       = 0U;
 800228e:	6041      	str	r1, [r0, #4]
 8002290:	691d      	ldr	r5, [r3, #16]
 8002292:	611c      	str	r4, [r3, #16]
 8002294:	691d      	ldr	r5, [r3, #16]
 8002296:	6119      	str	r1, [r3, #16]
 8002298:	691d      	ldr	r5, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 800229a:	68dd      	ldr	r5, [r3, #12]
 800229c:	60dc      	str	r4, [r3, #12]
 800229e:	68dc      	ldr	r4, [r3, #12]
 80022a0:	60d9      	str	r1, [r3, #12]
 80022a2:	68dc      	ldr	r4, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(true);
 80022a4:	69dc      	ldr	r4, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 80022a6:	4d0d      	ldr	r5, [pc, #52]	; (80022dc <main+0x5c>)
  rccEnablePWRInterface(true);
 80022a8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80022ac:	61dc      	str	r4, [r3, #28]
 80022ae:	69dc      	ldr	r4, [r3, #28]
  rccEnableBKPInterface(true);
 80022b0:	69dc      	ldr	r4, [r3, #28]
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80022b2:	460a      	mov	r2, r1
 80022b4:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 80022b8:	61dc      	str	r4, [r3, #28]
 80022ba:	69db      	ldr	r3, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 80022bc:	682c      	ldr	r4, [r5, #0]
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <main+0x60>)
 80022c0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80022c4:	602c      	str	r4, [r5, #0]
 80022c6:	b087      	sub	sp, #28
  dma.allocated_mask = 0U;
 80022c8:	6001      	str	r1, [r0, #0]
 80022ca:	4606      	mov	r6, r0
  dma.isr_mask       = 0U;
 80022cc:	4c05      	ldr	r4, [pc, #20]	; (80022e4 <main+0x64>)
 80022ce:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80022d2:	e00b      	b.n	80022ec <main+0x6c>
 80022d4:	20000f74 	.word	0x20000f74
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
 80022e0:	08004478 	.word	0x08004478
 80022e4:	40020008 	.word	0x40020008
 80022e8:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80022ec:	3310      	adds	r3, #16
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80022ee:	4299      	cmp	r1, r3
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80022f0:	6022      	str	r2, [r4, #0]
    dma.streams[i].func = NULL;
 80022f2:	f846 2f08 	str.w	r2, [r6, #8]!
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80022f6:	d1f7      	bne.n	80022e8 <main+0x68>
  DMA1->IFCR = 0xFFFFFFFFU;
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80022fc:	2160      	movs	r1, #96	; 0x60
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80022fe:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002302:	f44f 7900 	mov.w	r9, #512	; 0x200
 8002306:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800230a:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 800230e:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8002312:	f04f 0a80 	mov.w	sl, #128	; 0x80
  GPIOC->CRH = config->PCData.crh;
 8002316:	f04f 3588 	mov.w	r5, #2290649224	; 0x88888888
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 800231a:	f04f 0c01 	mov.w	ip, #1
 800231e:	4bc2      	ldr	r3, [pc, #776]	; (8002628 <main+0x3a8>)
  ADCD1.adc = ADC1;
 8002320:	4cc2      	ldr	r4, [pc, #776]	; (800262c <main+0x3ac>)
 8002322:	6058      	str	r0, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002324:	4bc2      	ldr	r3, [pc, #776]	; (8002630 <main+0x3b0>)
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 8002326:	4627      	mov	r7, r4
 8002328:	f883 1306 	strb.w	r1, [r3, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800232c:	f8c3 b180 	str.w	fp, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002330:	f8c3 b000 	str.w	fp, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002334:	f883 1307 	strb.w	r1, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002338:	f8c3 a180 	str.w	sl, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800233c:	f8c3 a000 	str.w	sl, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002340:	f883 1308 	strb.w	r1, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002344:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002348:	601e      	str	r6, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800234a:	f883 1309 	strb.w	r1, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800234e:	f8c3 9180 	str.w	r9, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002352:	f8c3 9000 	str.w	r9, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002356:	f883 130a 	strb.w	r1, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800235a:	f8c3 8180 	str.w	r8, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800235e:	f8c3 8000 	str.w	r8, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002362:	f883 1317 	strb.w	r1, [r3, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002366:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800236a:	f8c3 e000 	str.w	lr, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800236e:	f883 1328 	strb.w	r1, [r3, #808]	; 0x328
  rccEnableAPB2(APB2_EN_MASK, true);
 8002372:	49b0      	ldr	r1, [pc, #704]	; (8002634 <main+0x3b4>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002374:	f8c3 6184 	str.w	r6, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002378:	605e      	str	r6, [r3, #4]
 800237a:	698e      	ldr	r6, [r1, #24]
  GPIOA->ODR = config->PAData.odr;
 800237c:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
  rccEnableAPB2(APB2_EN_MASK, true);
 8002380:	f046 067d 	orr.w	r6, r6, #125	; 0x7d
 8002384:	618e      	str	r6, [r1, #24]
  GPIOA->CRH = config->PAData.crh;
 8002386:	4eac      	ldr	r6, [pc, #688]	; (8002638 <main+0x3b8>)
  GPIOA->ODR = config->PAData.odr;
 8002388:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
  rccEnableAPB2(APB2_EN_MASK, true);
 800238c:	f8d1 e018 	ldr.w	lr, [r1, #24]
  GPIOA->ODR = config->PAData.odr;
 8002390:	60d8      	str	r0, [r3, #12]
  GPIOA->CRH = config->PAData.crh;
 8002392:	605e      	str	r6, [r3, #4]
  GPIOA->CRL = config->PAData.crl;
 8002394:	f5a6 4682 	sub.w	r6, r6, #16640	; 0x4100
 8002398:	3e30      	subs	r6, #48	; 0x30
 800239a:	601e      	str	r6, [r3, #0]
  GPIOB->CRH = config->PBData.crh;
 800239c:	f506 4689 	add.w	r6, r6, #17536	; 0x4480
 80023a0:	3630      	adds	r6, #48	; 0x30
  GPIOB->ODR = config->PBData.odr;
 80023a2:	f8c3 040c 	str.w	r0, [r3, #1036]	; 0x40c
  GPIOB->CRH = config->PBData.crh;
 80023a6:	f8c3 6404 	str.w	r6, [r3, #1028]	; 0x404
  GPIOB->CRL = config->PBData.crl;
 80023aa:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
  GPIOC->ODR = config->PCData.odr;
 80023ae:	4ea3      	ldr	r6, [pc, #652]	; (800263c <main+0x3bc>)
 80023b0:	60f0      	str	r0, [r6, #12]
  GPIOC->CRH = config->PCData.crh;
 80023b2:	6075      	str	r5, [r6, #4]
  GPIOC->CRL = config->PCData.crl;
 80023b4:	6035      	str	r5, [r6, #0]
  GPIOD->CRL = config->PDData.crl;
 80023b6:	4ea2      	ldr	r6, [pc, #648]	; (8002640 <main+0x3c0>)
  GPIOD->ODR = config->PDData.odr;
 80023b8:	f8c3 0c0c 	str.w	r0, [r3, #3084]	; 0xc0c
  GPIOD->CRH = config->PDData.crh;
 80023bc:	f8c3 5c04 	str.w	r5, [r3, #3076]	; 0xc04
  GPIOD->CRL = config->PDData.crl;
 80023c0:	f8c3 6c00 	str.w	r6, [r3, #3072]	; 0xc00
  GPIOB->ODR = config->PBData.odr;
 80023c4:	4443      	add	r3, r8
  GPIOE->ODR = config->PEData.odr;
 80023c6:	f8c3 0c0c 	str.w	r0, [r3, #3084]	; 0xc0c
  GPIOE->CRH = config->PEData.crh;
 80023ca:	f8c3 5c04 	str.w	r5, [r3, #3076]	; 0xc04
  GPIOE->CRL = config->PEData.crl;
 80023ce:	f8c3 5c00 	str.w	r5, [r3, #3072]	; 0xc00
 80023d2:	4d9c      	ldr	r5, [pc, #624]	; (8002644 <main+0x3c4>)
 80023d4:	f885 c000 	strb.w	ip, [r5]
  rccEnableADC1(true);
 80023d8:	698b      	ldr	r3, [r1, #24]
  adcp->config   = NULL;
 80023da:	606a      	str	r2, [r5, #4]
 80023dc:	ea43 0309 	orr.w	r3, r3, r9
 80023e0:	618b      	str	r3, [r1, #24]
  adcp->samples  = NULL;
  adcp->depth    = 0;
 80023e2:	e9c5 2202 	strd	r2, r2, [r5, #8]
  adcp->grpp     = NULL;
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 80023e6:	e9c5 2204 	strd	r2, r2, [r5, #16]
 80023ea:	698b      	ldr	r3, [r1, #24]
  mp->owner = NULL;
 80023ec:	622a      	str	r2, [r5, #32]
  ADCD1.dmastp  = NULL;
 80023ee:	62ea      	str	r2, [r5, #44]	; 0x2c
  ADCD1.adc = ADC1;
 80023f0:	62ac      	str	r4, [r5, #40]	; 0x28
  ADC1->CR1 = 0;
 80023f2:	6062      	str	r2, [r4, #4]
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 80023f4:	f242 528a 	movw	r2, #9610	; 0x258a
  ADC1->CR2 = ADC_CR2_ADON;
 80023f8:	f8c4 c008 	str.w	ip, [r4, #8]
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 80023fc:	632a      	str	r2, [r5, #48]	; 0x30
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 80023fe:	2209      	movs	r2, #9
  tqp->next = (thread_t *)tqp;
 8002400:	f105 0318 	add.w	r3, r5, #24
 8002404:	60a2      	str	r2, [r4, #8]
  tqp->prev = (thread_t *)tqp;
 8002406:	e9c5 3306 	strd	r3, r3, [r5, #24]
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	071b      	lsls	r3, r3, #28
 800240e:	d4fc      	bmi.n	800240a <main+0x18a>
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 8002410:	2305      	movs	r3, #5
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 8002412:	f8df c218 	ldr.w	ip, [pc, #536]	; 800262c <main+0x3ac>
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 8002416:	60bb      	str	r3, [r7, #8]
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 8002418:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800241c:	f012 0204 	ands.w	r2, r2, #4
 8002420:	d1fa      	bne.n	8002418 <main+0x198>
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8002422:	4e89      	ldr	r6, [pc, #548]	; (8002648 <main+0x3c8>)
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8002424:	2001      	movs	r0, #1
 8002426:	4634      	mov	r4, r6
  oqp->q_counter = size;
 8002428:	f04f 0e10 	mov.w	lr, #16
  rccDisableADC1();
 800242c:	4981      	ldr	r1, [pc, #516]	; (8002634 <main+0x3b4>)
  ADC1->CR2 = 0;
 800242e:	f8cc 2008 	str.w	r2, [ip, #8]
  rccDisableADC1();
 8002432:	698f      	ldr	r7, [r1, #24]
  iqp->q_notify  = infy;
 8002434:	62b2      	str	r2, [r6, #40]	; 0x28
 8002436:	f427 7700 	bic.w	r7, r7, #512	; 0x200
 800243a:	618f      	str	r7, [r1, #24]
 800243c:	6989      	ldr	r1, [r1, #24]
 800243e:	4983      	ldr	r1, [pc, #524]	; (800264c <main+0x3cc>)
  oqp->q_top     = bp + size;
 8002440:	f106 0774 	add.w	r7, r6, #116	; 0x74
 8002444:	f844 1b04 	str.w	r1, [r4], #4
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8002448:	6074      	str	r4, [r6, #4]
 800244a:	4981      	ldr	r1, [pc, #516]	; (8002650 <main+0x3d0>)
  I2CD1.i2c    = I2C1;
 800244c:	4c81      	ldr	r4, [pc, #516]	; (8002654 <main+0x3d4>)
  i2cp->config = NULL;
 800244e:	604a      	str	r2, [r1, #4]
 8002450:	634c      	str	r4, [r1, #52]	; 0x34
  tqp->next = (thread_t *)tqp;
 8002452:	f101 040c 	add.w	r4, r1, #12
 8002456:	614a      	str	r2, [r1, #20]
  I2CD1.thread = NULL;
 8002458:	61ca      	str	r2, [r1, #28]
  I2CD1.dmatx  = NULL;
 800245a:	e9c1 220b 	strd	r2, r2, [r1, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 800245e:	e9c1 4403 	strd	r4, r4, [r1, #12]
  i2cp->state  = I2C_STOP;
 8002462:	7008      	strb	r0, [r1, #0]
  tqp->next = (thread_t *)tqp;
 8002464:	f106 010c 	add.w	r1, r6, #12
  tqp->prev = (thread_t *)tqp;
 8002468:	e9c6 1103 	strd	r1, r1, [r6, #12]
  iqp->q_buffer  = bp;
 800246c:	f106 0154 	add.w	r1, r6, #84	; 0x54
 8002470:	61b1      	str	r1, [r6, #24]
  iqp->q_wrptr   = bp;
 8002472:	e9c6 1108 	strd	r1, r1, [r6, #32]
  iqp->q_top     = bp + size;
 8002476:	f106 0164 	add.w	r1, r6, #100	; 0x64
 800247a:	61f1      	str	r1, [r6, #28]
  oqp->q_buffer  = bp;
 800247c:	63f1      	str	r1, [r6, #60]	; 0x3c
  oqp->q_wrptr   = bp;
 800247e:	e9c6 1111 	strd	r1, r1, [r6, #68]	; 0x44
  tqp->next = (thread_t *)tqp;
 8002482:	f106 0130 	add.w	r1, r6, #48	; 0x30
  oqp->q_top     = bp + size;
 8002486:	6437      	str	r7, [r6, #64]	; 0x40
  tqp->prev = (thread_t *)tqp;
 8002488:	e9c6 110c 	strd	r1, r1, [r6, #48]	; 0x30
  oqp->q_notify  = onfy;
 800248c:	4f72      	ldr	r7, [pc, #456]	; (8002658 <main+0x3d8>)
  usbp->state        = USB_STOP;
 800248e:	4973      	ldr	r1, [pc, #460]	; (800265c <main+0x3dc>)
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 8002490:	4c73      	ldr	r4, [pc, #460]	; (8002660 <main+0x3e0>)
  iqp->q_counter = 0;
 8002492:	6172      	str	r2, [r6, #20]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8002494:	7230      	strb	r0, [r6, #8]
    usbp->in_params[i]  = NULL;
 8002496:	4613      	mov	r3, r2
  iqp->q_link    = link;
 8002498:	62f6      	str	r6, [r6, #44]	; 0x2c
  oqp->q_counter = size;
 800249a:	f8c6 e038 	str.w	lr, [r6, #56]	; 0x38
  oqp->q_notify  = onfy;
 800249e:	64f7      	str	r7, [r6, #76]	; 0x4c
  usbp->state        = USB_STOP;
 80024a0:	7008      	strb	r0, [r1, #0]
  usbp->config       = NULL;
 80024a2:	604a      	str	r2, [r1, #4]
  oqp->q_link    = link;
 80024a4:	6536      	str	r6, [r6, #80]	; 0x50
 80024a6:	6774      	str	r4, [r6, #116]	; 0x74
 80024a8:	f101 022c 	add.w	r2, r1, #44	; 0x2c
 80024ac:	f101 0048 	add.w	r0, r1, #72	; 0x48
    usbp->in_params[i]  = NULL;
 80024b0:	f842 3b04 	str.w	r3, [r2], #4
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80024b4:	4290      	cmp	r0, r2
    usbp->out_params[i] = NULL;
 80024b6:	6193      	str	r3, [r2, #24]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80024b8:	d1fa      	bne.n	80024b0 <main+0x230>
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80024ba:	f04f 0801 	mov.w	r8, #1
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80024be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024c2:	f648 4b9f 	movw	fp, #35999	; 0x8c9f
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80024c6:	f64f 7aff 	movw	sl, #65535	; 0xffff
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80024ca:	f04f 5e80 	mov.w	lr, #268435456	; 0x10000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80024ce:	f04f 0980 	mov.w	r9, #128	; 0x80
  ch.vtlist.delta = (sysinterval_t)-1;
 80024d2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  ST_ENABLE_CLOCK();
 80024d6:	4c57      	ldr	r4, [pc, #348]	; (8002634 <main+0x3b4>)
  usbp->transmitting = 0;
 80024d8:	608b      	str	r3, [r1, #8]
 80024da:	69e1      	ldr	r1, [r4, #28]
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
 80024dc:	2004      	movs	r0, #4
 80024de:	ea41 0108 	orr.w	r1, r1, r8
 80024e2:	61e1      	str	r1, [r4, #28]
  ST_ENABLE_STOP();
 80024e4:	495f      	ldr	r1, [pc, #380]	; (8002664 <main+0x3e4>)
  ST_ENABLE_CLOCK();
 80024e6:	69e4      	ldr	r4, [r4, #28]
  ST_ENABLE_STOP();
 80024e8:	684c      	ldr	r4, [r1, #4]
  tmp->cumulative = (rttime_t)0;
 80024ea:	4607      	mov	r7, r0
 80024ec:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80024f0:	604c      	str	r4, [r1, #4]
  tqp->next = (thread_t *)tqp;
 80024f2:	4c5d      	ldr	r4, [pc, #372]	; (8002668 <main+0x3e8>)
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80024f4:	f8c2 b028 	str.w	fp, [r2, #40]	; 0x28
 80024f8:	494d      	ldr	r1, [pc, #308]	; (8002630 <main+0x3b0>)
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80024fa:	f8c2 a02c 	str.w	sl, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80024fe:	6193      	str	r3, [r2, #24]
  tqp->prev = (thread_t *)tqp;
 8002500:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCR[0] = 0;
 8002502:	6353      	str	r3, [r2, #52]	; 0x34
  ch.rlist.prio = NOPRIO;
 8002504:	60a3      	str	r3, [r4, #8]
  STM32_ST_TIM->DIER   = 0;
 8002506:	60d3      	str	r3, [r2, #12]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8002508:	6124      	str	r4, [r4, #16]
  STM32_ST_TIM->CR2    = 0;
 800250a:	6053      	str	r3, [r2, #4]
  ch.rlist.older = (thread_t *)&ch.rlist;
 800250c:	6164      	str	r4, [r4, #20]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800250e:	f8c2 8014 	str.w	r8, [r2, #20]
  ch.vtlist.lasttime = (systime_t)0;
 8002512:	8523      	strh	r3, [r4, #40]	; 0x28
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002514:	f8c2 8000 	str.w	r8, [r2]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002518:	4a54      	ldr	r2, [pc, #336]	; (800266c <main+0x3ec>)
 800251a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8002684 <main+0x404>
  H_NEXT(&default_heap.header) = NULL;
 800251e:	6053      	str	r3, [r2, #4]
 8002520:	f881 931c 	strb.w	r9, [r1, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002524:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
  H_PAGES(&default_heap.header) = 0;
 8002528:	6093      	str	r3, [r2, #8]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800252a:	f8c1 e000 	str.w	lr, [r1]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 800252e:	f104 0e1c 	add.w	lr, r4, #28
  ch_memcore.basemem = __heap_base__;
 8002532:	494f      	ldr	r1, [pc, #316]	; (8002670 <main+0x3f0>)
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8002534:	e9c4 ee07 	strd	lr, lr, [r4, #28]
 8002538:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8002688 <main+0x408>
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800253c:	f8c2 8000 	str.w	r8, [r2]
 8002540:	f8c1 e000 	str.w	lr, [r1]
  ch_memcore.topmem  = __heap_end__;
 8002544:	f8df e144 	ldr.w	lr, [pc, #324]	; 800268c <main+0x40c>
  tqp->next = (thread_t *)tqp;
 8002548:	f102 080c 	add.w	r8, r2, #12
 800254c:	f8c1 e004 	str.w	lr, [r1, #4]
 8002550:	4948      	ldr	r1, [pc, #288]	; (8002674 <main+0x3f4>)
 8002552:	f8c2 800c 	str.w	r8, [r2, #12]
  ch.vtlist.delta = (sysinterval_t)-1;
 8002556:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
 800255a:	6024      	str	r4, [r4, #0]
  tqp->prev = (thread_t *)tqp;
 800255c:	f8c2 8010 	str.w	r8, [r2, #16]
 8002560:	6153      	str	r3, [r2, #20]
  ch.tm.offset = (rtcnt_t)0;
 8002562:	6763      	str	r3, [r4, #116]	; 0x74
  tmp->last       = (rtcnt_t)0;
 8002564:	e9cd 3301 	strd	r3, r3, [sp, #4]
  tmp->n          = (ucnt_t)0;
 8002568:	9303      	str	r3, [sp, #12]
 800256a:	608b      	str	r3, [r1, #8]
  mp->next = NULL;
 800256c:	614b      	str	r3, [r1, #20]
 800256e:	62cb      	str	r3, [r1, #44]	; 0x2c
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8002570:	f101 0310 	add.w	r3, r1, #16
 8002574:	610b      	str	r3, [r1, #16]
  mp->object_size = size;
 8002576:	2314      	movs	r3, #20
  tmp->cumulative = (rttime_t)0;
 8002578:	f04f 0800 	mov.w	r8, #0
 800257c:	f04f 0900 	mov.w	r9, #0
 8002580:	618b      	str	r3, [r1, #24]
 8002582:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8002586:	628b      	str	r3, [r1, #40]	; 0x28
 8002588:	231c      	movs	r3, #28
  tmp->best       = (rtcnt_t)-1;
 800258a:	f8cd c000 	str.w	ip, [sp]
 800258e:	f101 0c24 	add.w	ip, r1, #36	; 0x24
 8002592:	f8c1 c024 	str.w	ip, [r1, #36]	; 0x24
 8002596:	f101 0e3c 	add.w	lr, r1, #60	; 0x3c
 800259a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
  mp->provider = provider;
 800259e:	4a36      	ldr	r2, [pc, #216]	; (8002678 <main+0x3f8>)
  tmp->cumulative = (rttime_t)0;
 80025a0:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80025a4:	e9c1 1100 	strd	r1, r1, [r1]
 80025a8:	e9c1 ec0f 	strd	lr, ip, [r1, #60]	; 0x3c
  mp->object_size = size;
 80025ac:	630b      	str	r3, [r1, #48]	; 0x30
 80025ae:	f101 0344 	add.w	r3, r1, #68	; 0x44
 80025b2:	644b      	str	r3, [r1, #68]	; 0x44
  mp->align = align;
 80025b4:	61c8      	str	r0, [r1, #28]
 80025b6:	6348      	str	r0, [r1, #52]	; 0x34
  mp->provider = provider;
 80025b8:	620a      	str	r2, [r1, #32]
 80025ba:	638a      	str	r2, [r1, #56]	; 0x38
    chTMStartMeasurementX(&tm);
 80025bc:	4668      	mov	r0, sp
 80025be:	f7fe fa3f 	bl	8000a40 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 80025c2:	4668      	mov	r0, sp
 80025c4:	f7fe fa14 	bl	80009f0 <chTMStopMeasurementX>
  } while (i > 0U);
 80025c8:	3f01      	subs	r7, #1
 80025ca:	d1f7      	bne.n	80025bc <main+0x33c>
  tp->prio      = prio;
 80025cc:	f04f 0a80 	mov.w	sl, #128	; 0x80
  tp->refs      = (trefs_t)1;
 80025d0:	f04f 0801 	mov.w	r8, #1
  REG_INSERT(tp);
 80025d4:	4b29      	ldr	r3, [pc, #164]	; (800267c <main+0x3fc>)
  ch.tm.offset = tm.best;
 80025d6:	9a00      	ldr	r2, [sp, #0]
 80025d8:	6961      	ldr	r1, [r4, #20]
  tp->name      = name;
 80025da:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8002690 <main+0x410>
 80025de:	6762      	str	r2, [r4, #116]	; 0x74
  tlp->next = (thread_t *)tlp;
 80025e0:	f103 0028 	add.w	r0, r3, #40	; 0x28
  tqp->next = (thread_t *)tqp;
 80025e4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  tp->flags     = CH_FLAG_MODE_STATIC;
 80025e8:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  tp->epending  = (eventmask_t)0;
 80025ec:	e9c4 7719 	strd	r7, r7, [r4, #100]	; 0x64
  REG_INSERT(tp);
 80025f0:	6424      	str	r4, [r4, #64]	; 0x40
  tp->prio      = prio;
 80025f2:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  tp->realprio  = prio;
 80025f6:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  tp->refs      = (trefs_t)1;
 80025fa:	f884 8052 	strb.w	r8, [r4, #82]	; 0x52
  REG_INSERT(tp);
 80025fe:	e9c4 1c11 	strd	r1, ip, [r4, #68]	; 0x44
 8002602:	f04f 0920 	mov.w	r9, #32
 8002606:	610b      	str	r3, [r1, #16]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8002608:	e9c4 3305 	strd	r3, r3, [r4, #20]
  currp->state = CH_STATE_CURRENT;
 800260c:	f884 8050 	strb.w	r8, [r4, #80]	; 0x50
  currp->wabase = NULL;
 8002610:	64e7      	str	r7, [r4, #76]	; 0x4c
 8002612:	e9c4 0216 	strd	r0, r2, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
 8002616:	6622      	str	r2, [r4, #96]	; 0x60
 8002618:	f389 8811 	msr	BASEPRI, r9
  __ASM volatile ("cpsie i" : : : "memory");
 800261c:	b662      	cpsie	i
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002622:	2110      	movs	r1, #16
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <main+0x400>)
 8002626:	e035      	b.n	8002694 <main+0x414>
 8002628:	40020000 	.word	0x40020000
 800262c:	40012400 	.word	0x40012400
 8002630:	e000e100 	.word	0xe000e100
 8002634:	40021000 	.word	0x40021000
 8002638:	888884b8 	.word	0x888884b8
 800263c:	40011000 	.word	0x40011000
 8002640:	88888844 	.word	0x88888844
 8002644:	20000828 	.word	0x20000828
 8002648:	20000894 	.word	0x20000894
 800264c:	08004650 	.word	0x08004650
 8002650:	2000085c 	.word	0x2000085c
 8002654:	40005400 	.word	0x40005400
 8002658:	08000931 	.word	0x08000931
 800265c:	20000d28 	.word	0x20000d28
 8002660:	40013800 	.word	0x40013800
 8002664:	e0042000 	.word	0xe0042000
 8002668:	20000db4 	.word	0x20000db4
 800266c:	20000f58 	.word	0x20000f58
 8002670:	20000f50 	.word	0x20000f50
 8002674:	20000e2c 	.word	0x20000e2c
 8002678:	080009c1 	.word	0x080009c1
 800267c:	20000de4 	.word	0x20000de4
 8002680:	e000ed00 	.word	0xe000ed00
 8002684:	080008f1 	.word	0x080008f1
 8002688:	200014f0 	.word	0x200014f0
 800268c:	20005000 	.word	0x20005000
 8002690:	08004544 	.word	0x08004544
  reg_value  =  (reg_value                                   |
 8002694:	4a74      	ldr	r2, [pc, #464]	; (8002868 <main+0x5e8>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002696:	68d8      	ldr	r0, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002698:	ea00 000c 	and.w	r0, r0, ip
  reg_value  =  (reg_value                                   |
 800269c:	4302      	orrs	r2, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800269e:	f10c 4c60 	add.w	ip, ip, #3758096384	; 0xe0000000
  SCB->AIRCR =  reg_value;
 80026a2:	60da      	str	r2, [r3, #12]
 80026a4:	f6ac 3c0f 	subw	ip, ip, #2831	; 0xb0f
 80026a8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80026ac:	486f      	ldr	r0, [pc, #444]	; (800286c <main+0x5ec>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80026ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80026b2:	f8cc 200c 	str.w	r2, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80026b6:	6802      	ldr	r2, [r0, #0]
 80026b8:	ea42 0208 	orr.w	r2, r2, r8
 80026bc:	6002      	str	r2, [r0, #0]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	77d9      	strb	r1, [r3, #31]
 80026c0:	f883 9022 	strb.w	r9, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80026c4:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("cpsie i" : : : "memory");
 80026c8:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80026ca:	f389 8811 	msr	BASEPRI, r9
  tp->state     = CH_STATE_WTSTART;
 80026ce:	2202      	movs	r2, #2
  tp->wabase = tdp->wbase;
 80026d0:	4b67      	ldr	r3, [pc, #412]	; (8002870 <main+0x5f0>)
  REG_INSERT(tp);
 80026d2:	6961      	ldr	r1, [r4, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80026d4:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80026d8:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
 80026dc:	4865      	ldr	r0, [pc, #404]	; (8002874 <main+0x5f4>)
  tp->state     = CH_STATE_WTSTART;
 80026de:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80026e2:	4a65      	ldr	r2, [pc, #404]	; (8002878 <main+0x5f8>)
 80026e4:	66d8      	str	r0, [r3, #108]	; 0x6c
  tp->name      = name;
 80026e6:	4865      	ldr	r0, [pc, #404]	; (800287c <main+0x5fc>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80026e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  REG_INSERT(tp);
 80026ec:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80026f0:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  tp->name      = name;
 80026f4:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80026f8:	671f      	str	r7, [r3, #112]	; 0x70
  tp->prio      = prio;
 80026fa:	f8c3 8098 	str.w	r8, [r3, #152]	; 0x98
  tp->mtxlist   = NULL;
 80026fe:	e9c3 7832 	strd	r7, r8, [r3, #200]	; 0xc8
  tp->epending  = (eventmask_t)0;
 8002702:	f8c3 70c4 	str.w	r7, [r3, #196]	; 0xc4
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002706:	f883 80b2 	strb.w	r8, [r3, #178]	; 0xb2
  REG_INSERT(tp);
 800270a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
 800270e:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  chSchWakeupS(tp, MSG_OK);
 8002712:	4610      	mov	r0, r2
  REG_INSERT(tp);
 8002714:	610a      	str	r2, [r1, #16]
  tlp->next = (thread_t *)tlp;
 8002716:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 800271a:	6162      	str	r2, [r4, #20]
  tqp->next = (thread_t *)tqp;
 800271c:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8002720:	e9c3 122e 	strd	r1, r2, [r3, #184]	; 0xb8
  tqp->prev = (thread_t *)tqp;
 8002724:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  chSchWakeupS(tp, MSG_OK);
 8002728:	f7fe ff72 	bl	8001610 <chSchWakeupS.constprop.9>
 800272c:	f387 8811 	msr	BASEPRI, r7
        halInit();
        chSysInit();

        // GPIOC - Analog IN0
        palSetPadMode(IOPORT3, 0, PAL_MODE_INPUT_ANALOG);
 8002730:	2205      	movs	r2, #5
 8002732:	4641      	mov	r1, r8
 8002734:	4852      	ldr	r0, [pc, #328]	; (8002880 <main+0x600>)
 8002736:	f7fe faeb 	bl	8000d10 <_pal_lld_setgroupmode>

        // I2C 硬件连接已经在（os/hal/boards/MAPLEMINI_STM32_F103）中配置了
        palSetPadMode(IOPORT2, 6, PAL_MODE_STM32_ALTERNATE_OPENDRAIN); // SCL
 800273a:	2211      	movs	r2, #17
 800273c:	2140      	movs	r1, #64	; 0x40
 800273e:	4851      	ldr	r0, [pc, #324]	; (8002884 <main+0x604>)
 8002740:	f7fe fae6 	bl	8000d10 <_pal_lld_setgroupmode>
        palSetPadMode(IOPORT2, 7, PAL_MODE_STM32_ALTERNATE_OPENDRAIN); // SDA
 8002744:	4651      	mov	r1, sl
 8002746:	2211      	movs	r2, #17
 8002748:	484e      	ldr	r0, [pc, #312]	; (8002884 <main+0x604>)
 800274a:	f7fe fae1 	bl	8000d10 <_pal_lld_setgroupmode>
        chThdSleepMilliseconds(10);
 800274e:	2014      	movs	r0, #20
 8002750:	f7ff f926 	bl	80019a0 <chThdSleep>
 8002754:	f389 8811 	msr	BASEPRI, r9
  if (adcp->state == ADC_STOP) {
 8002758:	782b      	ldrb	r3, [r5, #0]
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 800275a:	606f      	str	r7, [r5, #4]
 800275c:	4543      	cmp	r3, r8
 800275e:	d061      	beq.n	8002824 <main+0x5a4>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
 8002760:	2302      	movs	r3, #2
 8002762:	f04f 0800 	mov.w	r8, #0
 8002766:	702b      	strb	r3, [r5, #0]
 8002768:	f388 8811 	msr	BASEPRI, r8
 800276c:	2720      	movs	r7, #32
 800276e:	f387 8811 	msr	BASEPRI, r7
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
 8002772:	2308      	movs	r3, #8
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 8002774:	f04f 0903 	mov.w	r9, #3
  adcp->samples  = samples;
 8002778:	4a43      	ldr	r2, [pc, #268]	; (8002888 <main+0x608>)
  adcp->depth    = depth;
 800277a:	60eb      	str	r3, [r5, #12]
  adcp->grpp     = grpp;
 800277c:	4b43      	ldr	r3, [pc, #268]	; (800288c <main+0x60c>)
  adcp->samples  = samples;
 800277e:	60aa      	str	r2, [r5, #8]
  adcp->grpp     = grpp;
 8002780:	612b      	str	r3, [r5, #16]
  adcp->state    = ADC_ACTIVE;
 8002782:	f885 9000 	strb.w	r9, [r5]
  adc_lld_start_conversion(adcp);
 8002786:	f7fd ff63 	bl	8000650 <adc_lld_start_conversion.constprop.40>
 800278a:	69a3      	ldr	r3, [r4, #24]
  tp->u.wttrp = trp;
 800278c:	4a40      	ldr	r2, [pc, #256]	; (8002890 <main+0x610>)
    chSchGoSleepS(newstate);
 800278e:	4648      	mov	r0, r9
 8002790:	625a      	str	r2, [r3, #36]	; 0x24
  *trp = tp;
 8002792:	616b      	str	r3, [r5, #20]
 8002794:	f7fe ffa4 	bl	80016e0 <chSchGoSleepS>
 8002798:	f388 8811 	msr	BASEPRI, r8
        adcStart(&ADCD1, NULL);
        /*
        * Linear conversion.
        */
        adcConvert(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
        chThdSleepMilliseconds(100);
 800279c:	20c8      	movs	r0, #200	; 0xc8
 800279e:	f7ff f8ff 	bl	80019a0 <chThdSleep>
 80027a2:	f387 8811 	msr	BASEPRI, r7
  adcp->depth    = depth;
 80027a6:	2210      	movs	r2, #16
  adcp->samples  = samples;
 80027a8:	493a      	ldr	r1, [pc, #232]	; (8002894 <main+0x614>)
  adcp->grpp     = grpp;
 80027aa:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <main+0x618>)
  adcp->state    = ADC_ACTIVE;
 80027ac:	f885 9000 	strb.w	r9, [r5]
  adcp->depth    = depth;
 80027b0:	e9c5 1202 	strd	r1, r2, [r5, #8]
  adcp->grpp     = grpp;
 80027b4:	612b      	str	r3, [r5, #16]
  adc_lld_start_conversion(adcp);
 80027b6:	f7fd ff4b 	bl	8000650 <adc_lld_start_conversion.constprop.40>
 80027ba:	f388 8811 	msr	BASEPRI, r8
 80027be:	f387 8811 	msr	BASEPRI, r7
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80027c2:	7a33      	ldrb	r3, [r6, #8]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d041      	beq.n	800284c <main+0x5cc>
  u->BRR = fck;
 80027c8:	f240 3ca9 	movw	ip, #937	; 0x3a9
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80027cc:	2740      	movs	r7, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80027ce:	2501      	movs	r5, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80027d0:	f242 142c 	movw	r4, #8492	; 0x212c
  u->SR = 0;
 80027d4:	2200      	movs	r2, #0
    sdp->rxmask = 0xFF;
 80027d6:	20ff      	movs	r0, #255	; 0xff

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 80027d8:	2102      	movs	r1, #2
  USART_TypeDef *u = sdp->usart;
 80027da:	6f73      	ldr	r3, [r6, #116]	; 0x74
  u->BRR = fck;
 80027dc:	f8c3 c008 	str.w	ip, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80027e0:	611f      	str	r7, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80027e2:	615d      	str	r5, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80027e4:	60dc      	str	r4, [r3, #12]
  u->SR = 0;
 80027e6:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80027e8:	681c      	ldr	r4, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80027ea:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 80027ec:	f886 0078 	strb.w	r0, [r6, #120]	; 0x78
 80027f0:	7231      	strb	r1, [r6, #8]
 80027f2:	f382 8811 	msr	BASEPRI, r2
        // 启用串口 1， 使用默认配置
        // [PA9  ---> TX] : [PA10 ---> RX]
        sdStart(&SD1, NULL);

        // 使用静态方法（创建Blink线程）
        chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO + 1, Thread1, NULL);
 80027f6:	4b29      	ldr	r3, [pc, #164]	; (800289c <main+0x61c>)
 80027f8:	2281      	movs	r2, #129	; 0x81
 80027fa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80027fe:	4828      	ldr	r0, [pc, #160]	; (80028a0 <main+0x620>)
 8002800:	f7fe ff36 	bl	8001670 <chThdCreateStatic.constprop.4>
        chprintf(chp, "Hello world\n\r");
 8002804:	4927      	ldr	r1, [pc, #156]	; (80028a4 <main+0x624>)
 8002806:	4828      	ldr	r0, [pc, #160]	; (80028a8 <main+0x628>)
 8002808:	f7ff f9ea 	bl	8001be0 <chprintf>
        // 使用静态方法（创建OLED线程）
        chThdCreateStatic(waOledDisplay, sizeof(waOledDisplay), NORMALPRIO, OledDisplay, NULL);
 800280c:	4b27      	ldr	r3, [pc, #156]	; (80028ac <main+0x62c>)
 800280e:	2280      	movs	r2, #128	; 0x80
 8002810:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8002814:	4826      	ldr	r0, [pc, #152]	; (80028b0 <main+0x630>)
 8002816:	f7fe ff2b 	bl	8001670 <chThdCreateStatic.constprop.4>

        while (true) {
                chThdSleepMilliseconds(500);
 800281a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800281e:	f7ff f8bf 	bl	80019a0 <chThdSleep>
 8002822:	e7fa      	b.n	800281a <main+0x59a>
 8002824:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <main+0x634>)
 8002826:	4a24      	ldr	r2, [pc, #144]	; (80028b8 <main+0x638>)
 8002828:	2106      	movs	r1, #6
 800282a:	4638      	mov	r0, r7
 800282c:	f7fe faa0 	bl	8000d70 <dmaStreamAllocI.part.0>
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8002830:	4922      	ldr	r1, [pc, #136]	; (80028bc <main+0x63c>)
 8002832:	6842      	ldr	r2, [r0, #4]
      rccEnableADC1(true);
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <main+0x640>)
      adcp->dmastp = dmaStreamAllocI(STM32_DMA_STREAM_ID(1, 1),
 8002836:	62e8      	str	r0, [r5, #44]	; 0x2c
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8002838:	6091      	str	r1, [r2, #8]
      rccEnableADC1(true);
 800283a:	699a      	ldr	r2, [r3, #24]
    adcp->adc->CR1 = 0;
 800283c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
      rccEnableADC1(true);
 800283e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002842:	619a      	str	r2, [r3, #24]
 8002844:	699b      	ldr	r3, [r3, #24]
    adcp->adc->CR1 = 0;
 8002846:	604f      	str	r7, [r1, #4]
    adcp->adc->CR2 = 0;
 8002848:	608f      	str	r7, [r1, #8]
 800284a:	e789      	b.n	8002760 <main+0x4e0>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800284c:	20c0      	movs	r0, #192	; 0xc0
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
 800284e:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <main+0x640>)
 8002850:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <main+0x644>)
 8002852:	6991      	ldr	r1, [r2, #24]
 8002854:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002858:	6191      	str	r1, [r2, #24]
 800285a:	6992      	ldr	r2, [r2, #24]
 800285c:	f883 0325 	strb.w	r0, [r3, #805]	; 0x325
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002860:	f8c3 7184 	str.w	r7, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002864:	605f      	str	r7, [r3, #4]
 8002866:	e7af      	b.n	80027c8 <main+0x548>
 8002868:	05fa0300 	.word	0x05fa0300
 800286c:	e0001000 	.word	0xe0001000
 8002870:	20000e78 	.word	0x20000e78
 8002874:	08000c61 	.word	0x08000c61
 8002878:	08000251 	.word	0x08000251
 800287c:	080045a4 	.word	0x080045a4
 8002880:	40011000 	.word	0x40011000
 8002884:	40010c00 	.word	0x40010c00
 8002888:	20000fcc 	.word	0x20000fcc
 800288c:	080044d8 	.word	0x080044d8
 8002890:	2000083c 	.word	0x2000083c
 8002894:	20000fdc 	.word	0x20000fdc
 8002898:	08004500 	.word	0x08004500
 800289c:	08002051 	.word	0x08002051
 80028a0:	200013a8 	.word	0x200013a8
 80028a4:	080045ac 	.word	0x080045ac
 80028a8:	20000894 	.word	0x20000894
 80028ac:	08002b71 	.word	0x08002b71
 80028b0:	200010e0 	.word	0x200010e0
 80028b4:	20000828 	.word	0x20000828
 80028b8:	08000b71 	.word	0x08000b71
 80028bc:	4001244c 	.word	0x4001244c
 80028c0:	40021000 	.word	0x40021000
 80028c4:	e000e100 	.word	0xe000e100
	...

080028d0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80028d0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 80028d4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80028d6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80028da:	2300      	movs	r3, #0
 80028dc:	f383 8811 	msr	BASEPRI, r3
}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
	...

080028f0 <chThdExit>:
void chThdExit(msg_t msg) {
 80028f0:	b538      	push	{r3, r4, r5, lr}
 80028f2:	2220      	movs	r2, #32
 80028f4:	4603      	mov	r3, r0
 80028f6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <chThdExit+0x4c>)
 80028fc:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 80028fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8002900:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8002904:	42a8      	cmp	r0, r5
  tp->u.exitcode = msg;
 8002906:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8002908:	d006      	beq.n	8002918 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 800290a:	6803      	ldr	r3, [r0, #0]
 800290c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800290e:	f7fe f8d7 	bl	8000ac0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8002912:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8002914:	42a8      	cmp	r0, r5
 8002916:	d1f8      	bne.n	800290a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 8002918:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800291c:	b943      	cbnz	r3, 8002930 <chThdExit+0x40>
 800291e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8002922:	079b      	lsls	r3, r3, #30
 8002924:	d104      	bne.n	8002930 <chThdExit+0x40>
    REG_REMOVE(tp);
 8002926:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800292a:	611a      	str	r2, [r3, #16]
 800292c:	6922      	ldr	r2, [r4, #16]
 800292e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8002930:	200f      	movs	r0, #15
}
 8002932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8002936:	f7fe bed3 	b.w	80016e0 <chSchGoSleepS>
 800293a:	bf00      	nop
 800293c:	20000db4 	.word	0x20000db4

08002940 <chSchDoReschedule>:
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8002940:	2101      	movs	r1, #1
void chSchDoRescheduleAhead(void) {
 8002942:	b430      	push	{r4, r5}
  tp->state = CH_STATE_READY;
 8002944:	2500      	movs	r5, #0
  thread_t *otp = currp;
 8002946:	4a0d      	ldr	r2, [pc, #52]	; (800297c <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 8002948:	6810      	ldr	r0, [r2, #0]
 800294a:	6994      	ldr	r4, [r2, #24]
  tqp->next             = tp->queue.next;
 800294c:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800294e:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8002950:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8002954:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 8002956:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002958:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 800295a:	f884 5020 	strb.w	r5, [r4, #32]
 800295e:	e000      	b.n	8002962 <chSchDoReschedule+0x22>
 8002960:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	4291      	cmp	r1, r2
 8002966:	d3fb      	bcc.n	8002960 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8002968:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800296a:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 800296c:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8002970:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002972:	605c      	str	r4, [r3, #4]
}
 8002974:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8002976:	f7fd bc63 	b.w	8000240 <_port_switch>
 800297a:	bf00      	nop
 800297c:	20000db4 	.word	0x20000db4

08002980 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8002980:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8002982:	4d1c      	ldr	r5, [pc, #112]	; (80029f4 <chMtxUnlock+0x74>)
 8002984:	2320      	movs	r3, #32
 8002986:	69ae      	ldr	r6, [r5, #24]
 8002988:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 800298c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 800298e:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8002990:	4284      	cmp	r4, r0
    ctp->mtxlist = mp->next;
 8002992:	63b3      	str	r3, [r6, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8002994:	d027      	beq.n	80029e6 <chMtxUnlock+0x66>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8002996:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8002998:	b14b      	cbz	r3, 80029ae <chMtxUnlock+0x2e>
 800299a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800299c:	4293      	cmp	r3, r2
 800299e:	d003      	beq.n	80029a8 <chMtxUnlock+0x28>
 80029a0:	6892      	ldr	r2, [r2, #8]
 80029a2:	4291      	cmp	r1, r2
 80029a4:	bf38      	it	cc
 80029a6:	4611      	movcc	r1, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 80029a8:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f5      	bne.n	800299a <chMtxUnlock+0x1a>
 80029ae:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
 80029b0:	6822      	ldr	r2, [r4, #0]
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 80029b2:	60b1      	str	r1, [r6, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80029b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80029b6:	6002      	str	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80029b8:	6050      	str	r0, [r2, #4]
 80029ba:	e9c3 4102 	strd	r4, r1, [r3, #8]

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80029be:	4620      	mov	r0, r4
      tp->mtxlist = mp;
 80029c0:	63a3      	str	r3, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 80029c2:	f7fe f87d 	bl	8000ac0 <chSchReadyI>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 80029c6:	682a      	ldr	r2, [r5, #0]
 80029c8:	69ab      	ldr	r3, [r5, #24]
  if (chSchIsRescRequiredI()) {
 80029ca:	6892      	ldr	r2, [r2, #8]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d803      	bhi.n	80029da <chMtxUnlock+0x5a>
 80029d2:	2300      	movs	r3, #0
 80029d4:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 80029d8:	bd70      	pop	{r4, r5, r6, pc}
    chSchDoRescheduleAhead();
 80029da:	f7ff ffb1 	bl	8002940 <chSchDoReschedule>
 80029de:	2300      	movs	r3, #0
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60a3      	str	r3, [r4, #8]
 80029ea:	2300      	movs	r3, #0
 80029ec:	f383 8811 	msr	BASEPRI, r3
}
 80029f0:	bd70      	pop	{r4, r5, r6, pc}
 80029f2:	bf00      	nop
 80029f4:	20000db4 	.word	0x20000db4
	...

08002a00 <wrCmd>:
{
 8002a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        uint8_t txbuf[] = { 0x00, cmd };
 8002a04:	2600      	movs	r6, #0
{
 8002a06:	b082      	sub	sp, #8
        i2cAcquireBus(drvp->config->i2cp);
 8002a08:	6883      	ldr	r3, [r0, #8]
        uint8_t txbuf[] = { 0x00, cmd };
 8002a0a:	f88d 1005 	strb.w	r1, [sp, #5]
 8002a0e:	f88d 6004 	strb.w	r6, [sp, #4]
{
 8002a12:	4604      	mov	r4, r0
 */
void i2cAcquireBus(I2CDriver *i2cp) {

  osalDbgCheck(i2cp != NULL);

  osalMutexLock(&i2cp->mutex);
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	2720      	movs	r7, #32
 8002a18:	300c      	adds	r0, #12
 8002a1a:	f387 8811 	msr	BASEPRI, r7
  chMtxLockS(mp);
 8002a1e:	f7ff f84f 	bl	8001ac0 <chMtxLockS>
 8002a22:	f386 8811 	msr	BASEPRI, r6
        i2cStart(drvp->config->i2cp, drvp->config->i2ccfg);
 8002a26:	68a3      	ldr	r3, [r4, #8]
 8002a28:	e9d3 5300 	ldrd	r5, r3, [r3]
 8002a2c:	f387 8811 	msr	BASEPRI, r7
  i2cp->state = I2C_READY;
 8002a30:	f04f 0802 	mov.w	r8, #2
  i2cp->config = config;
 8002a34:	606b      	str	r3, [r5, #4]
  i2c_lld_start(i2cp);
 8002a36:	4628      	mov	r0, r5
 8002a38:	f7fe f9fa 	bl	8000e30 <i2c_lld_start>
  i2cp->state = I2C_READY;
 8002a3c:	f885 8000 	strb.w	r8, [r5]
 8002a40:	f386 8811 	msr	BASEPRI, r6
        ret = i2cMasterTransmitTimeout(drvp->config->i2cp, drvp->config->sad,
 8002a44:	68a3      	ldr	r3, [r4, #8]
 8002a46:	681d      	ldr	r5, [r3, #0]
 8002a48:	7a19      	ldrb	r1, [r3, #8]
 8002a4a:	f387 8811 	msr	BASEPRI, r7
  i2cp->state = I2C_ACTIVE_TX;
 8002a4e:	2303      	movs	r3, #3
  i2cp->errors = I2C_NO_ERROR;
 8002a50:	60ae      	str	r6, [r5, #8]
  i2cp->state = I2C_ACTIVE_TX;
 8002a52:	702b      	strb	r3, [r5, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8002a54:	aa01      	add	r2, sp, #4
 8002a56:	4643      	mov	r3, r8
 8002a58:	4628      	mov	r0, r5
 8002a5a:	f7fe ffb1 	bl	80019c0 <i2c_lld_master_transmit_timeout.constprop.36>
 8002a5e:	4606      	mov	r6, r0
  if (rdymsg == MSG_TIMEOUT) {
 8002a60:	3001      	adds	r0, #1
    i2cp->state = I2C_LOCKED;
 8002a62:	bf0a      	itet	eq
 8002a64:	2305      	moveq	r3, #5
    i2cp->state = I2C_READY;
 8002a66:	f885 8000 	strbne.w	r8, [r5]
    i2cp->state = I2C_LOCKED;
 8002a6a:	702b      	strbeq	r3, [r5, #0]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f383 8811 	msr	BASEPRI, r3
        i2cReleaseBus(drvp->config->i2cp);
 8002a72:	68a3      	ldr	r3, [r4, #8]
 */
void i2cReleaseBus(I2CDriver *i2cp) {

  osalDbgCheck(i2cp != NULL);

  osalMutexUnlock(&i2cp->mutex);
 8002a74:	6818      	ldr	r0, [r3, #0]
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8002a76:	300c      	adds	r0, #12
 8002a78:	f7ff ff82 	bl	8002980 <chMtxUnlock>
}
 8002a7c:	4630      	mov	r0, r6
 8002a7e:	b002      	add	sp, #8
 8002a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002a90 <setDisplay>:

static void setDisplay(void *ip, uint8_t on)
{
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	460d      	mov	r5, r1
 8002a94:	4604      	mov	r4, r0
        wrCmd(ip, 0x8D);
 8002a96:	218d      	movs	r1, #141	; 0x8d
 8002a98:	f7ff ffb2 	bl	8002a00 <wrCmd>
        wrCmd(ip, on ? 0x14 : 0x10);
 8002a9c:	2d00      	cmp	r5, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2114      	movne	r1, #20
 8002aa2:	2110      	moveq	r1, #16
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	f7ff ffab 	bl	8002a00 <wrCmd>
        wrCmd(ip, 0xAE);
 8002aaa:	4620      	mov	r0, r4
}
 8002aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        wrCmd(ip, 0xAE);
 8002ab0:	21ae      	movs	r1, #174	; 0xae
 8002ab2:	f7ff bfa5 	b.w	8002a00 <wrCmd>
 8002ab6:	bf00      	nop
	...

08002ac0 <updateScreen>:
{
 8002ac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	25b0      	movs	r5, #176	; 0xb0
                wrCmd(drvp, 0x00);
 8002ac8:	f04f 0800 	mov.w	r8, #0
 8002acc:	f04f 0920 	mov.w	r9, #32
 8002ad0:	f100 070f 	add.w	r7, r0, #15
 8002ad4:	f200 4b17 	addw	fp, r0, #1047	; 0x417
                wrCmd(drvp, 0xB0 + idx);
 8002ad8:	4629      	mov	r1, r5
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7ff ff90 	bl	8002a00 <wrCmd>
                wrCmd(drvp, 0x00);
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7ff ff8c 	bl	8002a00 <wrCmd>
                wrCmd(drvp, 0x10);
 8002ae8:	2110      	movs	r1, #16
 8002aea:	4620      	mov	r0, r4
 8002aec:	f7ff ff88 	bl	8002a00 <wrCmd>
        i2cAcquireBus(drvp->config->i2cp);
 8002af0:	68a3      	ldr	r3, [r4, #8]
  osalMutexLock(&i2cp->mutex);
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	300c      	adds	r0, #12
 8002af6:	f389 8811 	msr	BASEPRI, r9
 8002afa:	f7fe ffe1 	bl	8001ac0 <chMtxLockS>
 8002afe:	f388 8811 	msr	BASEPRI, r8
        i2cStart(drvp->config->i2cp, drvp->config->i2ccfg);
 8002b02:	68a3      	ldr	r3, [r4, #8]
 8002b04:	e9d3 6300 	ldrd	r6, r3, [r3]
 8002b08:	f389 8811 	msr	BASEPRI, r9
  i2cp->state = I2C_READY;
 8002b0c:	f04f 0a02 	mov.w	sl, #2
  i2cp->config = config;
 8002b10:	6073      	str	r3, [r6, #4]
  i2c_lld_start(i2cp);
 8002b12:	4630      	mov	r0, r6
 8002b14:	f7fe f98c 	bl	8000e30 <i2c_lld_start>
  i2cp->state = I2C_READY;
 8002b18:	f886 a000 	strb.w	sl, [r6]
 8002b1c:	f388 8811 	msr	BASEPRI, r8
        ret = i2cMasterTransmitTimeout(drvp->config->i2cp, drvp->config->sad,
 8002b20:	68a3      	ldr	r3, [r4, #8]
 8002b22:	681e      	ldr	r6, [r3, #0]
 8002b24:	7a19      	ldrb	r1, [r3, #8]
 8002b26:	f389 8811 	msr	BASEPRI, r9
  i2cp->state = I2C_ACTIVE_TX;
 8002b2a:	2303      	movs	r3, #3
  i2cp->errors = I2C_NO_ERROR;
 8002b2c:	f8c6 8008 	str.w	r8, [r6, #8]
  i2cp->state = I2C_ACTIVE_TX;
 8002b30:	7033      	strb	r3, [r6, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8002b32:	463a      	mov	r2, r7
 8002b34:	2381      	movs	r3, #129	; 0x81
 8002b36:	4630      	mov	r0, r6
 8002b38:	f7fe ff42 	bl	80019c0 <i2c_lld_master_transmit_timeout.constprop.36>
  if (rdymsg == MSG_TIMEOUT) {
 8002b3c:	3001      	adds	r0, #1
    i2cp->state = I2C_LOCKED;
 8002b3e:	bf0a      	itet	eq
 8002b40:	2305      	moveq	r3, #5
    i2cp->state = I2C_READY;
 8002b42:	f886 a000 	strbne.w	sl, [r6]
    i2cp->state = I2C_LOCKED;
 8002b46:	7033      	strbeq	r3, [r6, #0]
 8002b48:	f388 8811 	msr	BASEPRI, r8
        i2cReleaseBus(drvp->config->i2cp);
 8002b4c:	68a3      	ldr	r3, [r4, #8]
 8002b4e:	3781      	adds	r7, #129	; 0x81
  osalMutexUnlock(&i2cp->mutex);
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	3501      	adds	r5, #1
 8002b54:	300c      	adds	r0, #12
 8002b56:	f7ff ff13 	bl	8002980 <chMtxUnlock>
        for (idx = 0; idx < 8; idx++) {
 8002b5a:	45bb      	cmp	fp, r7
 8002b5c:	b2ed      	uxtb	r5, r5
 8002b5e:	d1bb      	bne.n	8002ad8 <updateScreen+0x18>
}
 8002b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002b70 <OledDisplay>:
{
 8002b70:	b580      	push	{r7, lr}
void ssd1306ObjectInit(SSD1306Driver *devp)
{
        devp->vmt = &vmt_ssd1306;
        devp->config = NULL;

        devp->state = SSD1306_STOP;
 8002b72:	2701      	movs	r7, #1
 8002b74:	4b3d      	ldr	r3, [pc, #244]	; (8002c6c <OledDisplay+0xfc>)
 8002b76:	b088      	sub	sp, #32
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	4a3d      	ldr	r2, [pc, #244]	; (8002c70 <OledDisplay+0x100>)



void ssd1306Start(SSD1306Driver *devp, const SSD1306Config *config) 
{
        const uint8_t cmds[] = {
 8002b7c:	4c3d      	ldr	r4, [pc, #244]	; (8002c74 <OledDisplay+0x104>)
 8002b7e:	ad01      	add	r5, sp, #4
 8002b80:	619a      	str	r2, [r3, #24]
 8002b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b86:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
        devp->vmt = &vmt_ssd1306;
 8002b8a:	4e3b      	ldr	r6, [pc, #236]	; (8002c78 <OledDisplay+0x108>)
 8002b8c:	4c3b      	ldr	r4, [pc, #236]	; (8002c7c <OledDisplay+0x10c>)
        chDbgCheck((devp != NULL) && (config != NULL));

        chDbgAssert((devp->state == SSD1306_STOP) || (devp->state == SSD1306_READY),
              "ssd1306Start(), invalid state");

        devp->config = config;
 8002b8e:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <OledDisplay+0x110>)
        const uint8_t cmds[] = {
 8002b90:	e885 0007 	stmia.w	r5, {r0, r1, r2}

        // A little delay
        chThdSleepMilliseconds(100);
 8002b94:	20c8      	movs	r0, #200	; 0xc8
        devp->state = SSD1306_STOP;
 8002b96:	7127      	strb	r7, [r4, #4]
        devp->vmt = &vmt_ssd1306;
 8002b98:	6026      	str	r6, [r4, #0]
        devp->config = config;
 8002b9a:	60a3      	str	r3, [r4, #8]

        // OLED initialize
        for (idx = 0; idx < sizeof(cmds) / sizeof(cmds[0]); idx++) {
                wrCmd(devp, cmds[idx]);
 8002b9c:	4627      	mov	r7, r4
        chThdSleepMilliseconds(100);
 8002b9e:	f7fe feff 	bl	80019a0 <chThdSleep>
 8002ba2:	f10d 0503 	add.w	r5, sp, #3
 8002ba6:	f10d 061f 	add.w	r6, sp, #31
                wrCmd(devp, cmds[idx]);
 8002baa:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002bae:	4638      	mov	r0, r7
 8002bb0:	f7ff ff26 	bl	8002a00 <wrCmd>
        for (idx = 0; idx < sizeof(cmds) / sizeof(cmds[0]); idx++) {
 8002bb4:	42b5      	cmp	r5, r6
 8002bb6:	d1f8      	bne.n	8002baa <OledDisplay+0x3a>
                drvp->fb[SSD1306_WIDTH_FIXED * idx] = 0x40;
 8002bb8:	2740      	movs	r7, #64	; 0x40
 8002bba:	4d32      	ldr	r5, [pc, #200]	; (8002c84 <OledDisplay+0x114>)
 8002bbc:	f505 6681 	add.w	r6, r5, #1032	; 0x408
 8002bc0:	f805 7c01 	strb.w	r7, [r5, #-1]
                memset(&drvp->fb[SSD1306_WIDTH_FIXED * idx + 1],
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	2280      	movs	r2, #128	; 0x80
 8002bc8:	21ff      	movs	r1, #255	; 0xff
 8002bca:	3581      	adds	r5, #129	; 0x81
 8002bcc:	f7fd fcf2 	bl	80005b4 <memset>
        for (idx = 0; idx < 8; idx++) {
 8002bd0:	42b5      	cmp	r5, r6
 8002bd2:	d1f5      	bne.n	8002bc0 <OledDisplay+0x50>

        // Clear screen
        fillScreen(devp, SSD1306_COLOR_WHITE);

        // Update screen
        updateScreen(devp);
 8002bd4:	4829      	ldr	r0, [pc, #164]	; (8002c7c <OledDisplay+0x10c>)
 8002bd6:	f7ff ff73 	bl	8002ac0 <updateScreen>

        // Set default value
        devp->x = 0;
 8002bda:	2100      	movs	r1, #0
        devp->y = 0;

        devp->state = SSD1306_READY;
 8002bdc:	2202      	movs	r2, #2
        ssd1306FillScreen(&SSD1306D1, 0x00);    // SSD1306 清屏
 8002bde:	6823      	ldr	r3, [r4, #0]
        devp->x = 0;
 8002be0:	81a1      	strh	r1, [r4, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
        devp->state = SSD1306_READY;
 8002be4:	7122      	strb	r2, [r4, #4]
 8002be6:	4825      	ldr	r0, [pc, #148]	; (8002c7c <OledDisplay+0x10c>)
 8002be8:	4798      	blx	r3
                ssd1306GotoXy(&SSD1306D1, 8, 0);
 8002bea:	4d24      	ldr	r5, [pc, #144]	; (8002c7c <OledDisplay+0x10c>)
                ssd1306Puts(&SSD1306D1, line0, &ssd1306_font_11x18, SSD1306_COLOR_WHITE);
 8002bec:	4e26      	ldr	r6, [pc, #152]	; (8002c88 <OledDisplay+0x118>)
 8002bee:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002c94 <OledDisplay+0x124>
                ssd1306GotoXy(&SSD1306D1, 8, 0);
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2108      	movs	r1, #8
 8002bfc:	4798      	blx	r3
                ssd1306Puts(&SSD1306D1, line0, &ssd1306_font_11x18, SSD1306_COLOR_WHITE);
 8002bfe:	6822      	ldr	r2, [r4, #0]
 8002c00:	4641      	mov	r1, r8
 8002c02:	6997      	ldr	r7, [r2, #24]
 8002c04:	2301      	movs	r3, #1
 8002c06:	4632      	mov	r2, r6
 8002c08:	4628      	mov	r0, r5
 8002c0a:	47b8      	blx	r7
                ssd1306UpdateScreen(&SSD1306D1);
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	4628      	mov	r0, r5
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4798      	blx	r3
                chThdSleepMilliseconds(100);
 8002c14:	20c8      	movs	r0, #200	; 0xc8
 8002c16:	f7fe fec3 	bl	80019a0 <chThdSleep>
                ssd1306GotoXy(&SSD1306D1, 0, 21);
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	2215      	movs	r2, #21
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2100      	movs	r1, #0
 8002c24:	4798      	blx	r3
                ssd1306Puts(&SSD1306D1, line1, &ssd1306_font_11x18, SSD1306_COLOR_WHITE);
 8002c26:	6822      	ldr	r2, [r4, #0]
 8002c28:	4918      	ldr	r1, [pc, #96]	; (8002c8c <OledDisplay+0x11c>)
 8002c2a:	6997      	ldr	r7, [r2, #24]
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	4632      	mov	r2, r6
 8002c30:	4628      	mov	r0, r5
 8002c32:	47b8      	blx	r7
                ssd1306UpdateScreen(&SSD1306D1);
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	4628      	mov	r0, r5
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4798      	blx	r3
                chThdSleepMilliseconds(100);
 8002c3c:	20c8      	movs	r0, #200	; 0xc8
 8002c3e:	f7fe feaf 	bl	80019a0 <chThdSleep>
                ssd1306GotoXy(&SSD1306D1, 0, 42);
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	4628      	mov	r0, r5
 8002c46:	222a      	movs	r2, #42	; 0x2a
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4798      	blx	r3
                ssd1306Puts(&SSD1306D1, line2, &ssd1306_font_11x18, SSD1306_COLOR_BLACK);
 8002c4e:	6822      	ldr	r2, [r4, #0]
 8002c50:	490f      	ldr	r1, [pc, #60]	; (8002c90 <OledDisplay+0x120>)
 8002c52:	6997      	ldr	r7, [r2, #24]
 8002c54:	2300      	movs	r3, #0
 8002c56:	4632      	mov	r2, r6
 8002c58:	4628      	mov	r0, r5
 8002c5a:	47b8      	blx	r7
                ssd1306UpdateScreen(&SSD1306D1);
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	4628      	mov	r0, r5
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4798      	blx	r3
                chThdSleepMilliseconds(100);
 8002c64:	20c8      	movs	r0, #200	; 0xc8
 8002c66:	f7fe fe9b 	bl	80019a0 <chThdSleep>
 8002c6a:	e7c2      	b.n	8002bf2 <OledDisplay+0x82>
 8002c6c:	20000db4 	.word	0x20000db4
 8002c70:	0800443c 	.word	0x0800443c
 8002c74:	080036c4 	.word	0x080036c4
 8002c78:	08004678 	.word	0x08004678
 8002c7c:	20000910 	.word	0x20000910
 8002c80:	08004644 	.word	0x08004644
 8002c84:	20000920 	.word	0x20000920
 8002c88:	0800463c 	.word	0x0800463c
 8002c8c:	2000080c 	.word	0x2000080c
 8002c90:	20000818 	.word	0x20000818
 8002c94:	20000800 	.word	0x20000800
	...

08002ca0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <__early_init+0x70>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002ca2:	461a      	mov	r2, r3
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002ca4:	6819      	ldr	r1, [r3, #0]
 8002ca6:	f041 0101 	orr.w	r1, r1, #1
 8002caa:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002cac:	6813      	ldr	r3, [r2, #0]
 8002cae:	0798      	lsls	r0, r3, #30
 8002cb0:	d5fc      	bpl.n	8002cac <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002cb2:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002cb4:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002cb6:	4916      	ldr	r1, [pc, #88]	; (8002d10 <__early_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002cb8:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8002cbc:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002cbe:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002cc0:	684b      	ldr	r3, [r1, #4]
 8002cc2:	f013 0f0c 	tst.w	r3, #12
 8002cc6:	d1fb      	bne.n	8002cc0 <__early_init+0x20>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8002cc8:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8002cca:	4a11      	ldr	r2, [pc, #68]	; (8002d10 <__early_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8002cd2:	6813      	ldr	r3, [r2, #0]
 8002cd4:	0399      	lsls	r1, r3, #14
 8002cd6:	d5fc      	bpl.n	8002cd2 <__early_init+0x32>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002cd8:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002cda:	490d      	ldr	r1, [pc, #52]	; (8002d10 <__early_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002cdc:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002ce0:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8002ce2:	6813      	ldr	r3, [r2, #0]
 8002ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002cea:	680b      	ldr	r3, [r1, #0]
 8002cec:	019b      	lsls	r3, r3, #6
 8002cee:	d5fc      	bpl.n	8002cea <__early_init+0x4a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8002cf0:	2212      	movs	r2, #18
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <__early_init+0x74>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8002cf4:	4808      	ldr	r0, [pc, #32]	; (8002d18 <__early_init+0x78>)
 8002cf6:	6048      	str	r0, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8002cfa:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002cfc:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <__early_init+0x70>)
  RCC->CFGR |= STM32_SW;
 8002cfe:	f043 0302 	orr.w	r3, r3, #2
 8002d02:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002d04:	6853      	ldr	r3, [r2, #4]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d1fa      	bne.n	8002d04 <__early_init+0x64>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 8002d0e:	4770      	bx	lr
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40022000 	.word	0x40022000
 8002d18:	001d6400 	.word	0x001d6400
 8002d1c:	00000000 	.word	0x00000000

08002d20 <Vector90>:
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8002d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  istr = STM32_USB->ISTR;
 8002d24:	4b9e      	ldr	r3, [pc, #632]	; (8002fa0 <Vector90+0x280>)
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8002d26:	b085      	sub	sp, #20
  istr = STM32_USB->ISTR;
 8002d28:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (istr & ISTR_RESET) {
 8002d2a:	0562      	lsls	r2, r4, #21
 8002d2c:	f100 80ad 	bmi.w	8002e8a <Vector90+0x16a>
  if (istr & ISTR_SUSP) {
 8002d30:	0526      	lsls	r6, r4, #20
 8002d32:	f100 8119 	bmi.w	8002f68 <Vector90+0x248>
  if (istr & ISTR_WKUP) {
 8002d36:	04e5      	lsls	r5, r4, #19
 8002d38:	d508      	bpl.n	8002d4c <Vector90+0x2c>
    uint32_t fnr = STM32_USB->FNR;
 8002d3a:	4b99      	ldr	r3, [pc, #612]	; (8002fa0 <Vector90+0x280>)
 8002d3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 8002d3e:	0410      	lsls	r0, r2, #16
 8002d40:	f140 81a0 	bpl.w	8003084 <Vector90+0x364>
    STM32_USB->ISTR = ~ISTR_WKUP;
 8002d44:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 8002d48:	4b95      	ldr	r3, [pc, #596]	; (8002fa0 <Vector90+0x280>)
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44
  if (istr & ISTR_SOF) {
 8002d4c:	05a1      	lsls	r1, r4, #22
 8002d4e:	d50b      	bpl.n	8002d68 <Vector90+0x48>
    _usb_isr_invoke_sof_cb(usbp);
 8002d50:	f8df a250 	ldr.w	sl, [pc, #592]	; 8002fa4 <Vector90+0x284>
 8002d54:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	b10b      	cbz	r3, 8002d60 <Vector90+0x40>
 8002d5c:	4650      	mov	r0, sl
 8002d5e:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 8002d60:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002d64:	4b8e      	ldr	r3, [pc, #568]	; (8002fa0 <Vector90+0x280>)
 8002d66:	645a      	str	r2, [r3, #68]	; 0x44
  while (istr & ISTR_CTR) {
 8002d68:	0423      	lsls	r3, r4, #16
 8002d6a:	d57a      	bpl.n	8002e62 <Vector90+0x142>
 8002d6c:	f8df a234 	ldr.w	sl, [pc, #564]	; 8002fa4 <Vector90+0x284>
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002d70:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8002fa0 <Vector90+0x280>
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
 8002d74:	f004 040f 	and.w	r4, r4, #15
 8002d78:	00a5      	lsls	r5, r4, #2
 8002d7a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002d7e:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
  uint32_t epr = STM32_USB->EPR[ep];
 8002d82:	f8d5 8000 	ldr.w	r8, [r5]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8002d86:	1ca6      	adds	r6, r4, #2
 8002d88:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
  if (epr & EPR_CTR_TX) {
 8002d8c:	f018 0f80 	tst.w	r8, #128	; 0x80
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8002d90:	685f      	ldr	r7, [r3, #4]
  if (epr & EPR_CTR_TX) {
 8002d92:	d04c      	beq.n	8002e2e <Vector90+0x10e>
    USBInEndpointState *isp = epcp->in_state;
 8002d94:	f8d7 c014 	ldr.w	ip, [r7, #20]
    EPR_CLEAR_CTR_TX(ep);
 8002d98:	682a      	ldr	r2, [r5, #0]
    isp->txcnt += isp->txlast;
 8002d9a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002d9e:	f8dc 100c 	ldr.w	r1, [ip, #12]
    n = isp->txsize - isp->txcnt;
 8002da2:	f8dc 0000 	ldr.w	r0, [ip]
    EPR_CLEAR_CTR_TX(ep);
 8002da6:	f422 4278 	bic.w	r2, r2, #63488	; 0xf800
    isp->txcnt += isp->txlast;
 8002daa:	440b      	add	r3, r1
    EPR_CLEAR_CTR_TX(ep);
 8002dac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002db0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    if (n > 0) {
 8002db4:	1ac0      	subs	r0, r0, r3
    EPR_CLEAR_CTR_TX(ep);
 8002db6:	602a      	str	r2, [r5, #0]
    isp->txcnt += isp->txlast;
 8002db8:	f8cc 3004 	str.w	r3, [ip, #4]
    if (n > 0) {
 8002dbc:	d056      	beq.n	8002e6c <Vector90+0x14c>
      if (n > epcp->in_maxsize)
 8002dbe:	8a3b      	ldrh	r3, [r7, #16]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002dc0:	ea4f 1904 	mov.w	r9, r4, lsl #4
 8002dc4:	4298      	cmp	r0, r3
 8002dc6:	bf28      	it	cs
 8002dc8:	4618      	movcs	r0, r3
      isp->txlast = n;
 8002dca:	f8cc 000c 	str.w	r0, [ip, #12]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002dce:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
      isp->txbuf += isp->txlast;
 8002dd2:	f8dc 3008 	ldr.w	r3, [ip, #8]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002dd6:	f102 4e80 	add.w	lr, r2, #1073741824	; 0x40000000
 8002dda:	f50e 4ec0 	add.w	lr, lr, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002dde:	f85e 2009 	ldr.w	r2, [lr, r9]
      isp->txbuf += isp->txlast;
 8002de2:	4419      	add	r1, r3
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002de4:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002de8:	44ce      	add	lr, r9
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002dea:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
      isp->txbuf += isp->txlast;
 8002dee:	f8cc 1008 	str.w	r1, [ip, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8002df2:	0052      	lsls	r2, r2, #1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8002df4:	f8ce 0004 	str.w	r0, [lr, #4]
  while (i > 0) {
 8002df8:	b168      	cbz	r0, 8002e16 <Vector90+0xf6>
 8002dfa:	3801      	subs	r0, #1
 8002dfc:	0840      	lsrs	r0, r0, #1
 8002dfe:	1d13      	adds	r3, r2, #4
 8002e00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002e04:	4684      	mov	ip, r0
 8002e06:	e000      	b.n	8002e0a <Vector90+0xea>
 8002e08:	3304      	adds	r3, #4
    w |= *buf++ << 8;
 8002e0a:	f831 0b02 	ldrh.w	r0, [r1], #2
  while (i > 0) {
 8002e0e:	459c      	cmp	ip, r3
    *pmap++ = (stm32_usb_pma_t)w;
 8002e10:	6010      	str	r0, [r2, #0]
 8002e12:	461a      	mov	r2, r3
  while (i > 0) {
 8002e14:	d1f8      	bne.n	8002e08 <Vector90+0xe8>
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8002e16:	682b      	ldr	r3, [r5, #0]
 8002e18:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e20:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2c:	602b      	str	r3, [r5, #0]
  if (epr & EPR_CTR_RX) {
 8002e2e:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8002e32:	d012      	beq.n	8002e5a <Vector90+0x13a>
    EPR_CLEAR_CTR_RX(ep);
 8002e34:	682b      	ldr	r3, [r5, #0]
    if (epr & EPR_SETUP) {
 8002e36:	f418 6f00 	tst.w	r8, #2048	; 0x800
    EPR_CLEAR_CTR_RX(ep);
 8002e3a:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8002e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e46:	b2e1      	uxtb	r1, r4
 8002e48:	602b      	str	r3, [r5, #0]
    if (epr & EPR_SETUP) {
 8002e4a:	f000 80af 	beq.w	8002fac <Vector90+0x28c>
      _usb_isr_invoke_setup_cb(usbp, ep);
 8002e4e:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8002e52:	6873      	ldr	r3, [r6, #4]
 8002e54:	4853      	ldr	r0, [pc, #332]	; (8002fa4 <Vector90+0x284>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4798      	blx	r3
    istr = STM32_USB->ISTR;
 8002e5a:	f8db 4044 	ldr.w	r4, [fp, #68]	; 0x44
  while (istr & ISTR_CTR) {
 8002e5e:	0422      	lsls	r2, r4, #16
 8002e60:	d488      	bmi.n	8002d74 <Vector90+0x54>
}
 8002e62:	b005      	add	sp, #20
 8002e64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8002e68:	f7fd bd82 	b.w	8000970 <_port_irq_epilogue>
      _usb_isr_invoke_in_cb(usbp, ep);
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 8002e72:	40a1      	lsls	r1, r4
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	ea23 0301 	bic.w	r3, r3, r1
 8002e7a:	f8aa 3008 	strh.w	r3, [sl, #8]
 8002e7e:	2a00      	cmp	r2, #0
 8002e80:	d0d5      	beq.n	8002e2e <Vector90+0x10e>
 8002e82:	4621      	mov	r1, r4
 8002e84:	4847      	ldr	r0, [pc, #284]	; (8002fa4 <Vector90+0x284>)
 8002e86:	4790      	blx	r2
 8002e88:	e7d1      	b.n	8002e2e <Vector90+0x10e>
  usbp->status        = 0;
 8002e8a:	2200      	movs	r2, #0
    STM32_USB->ISTR = ~ISTR_RESET;
 8002e8c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
  usbp->state         = USB_READY;
 8002e90:	f8df a110 	ldr.w	sl, [pc, #272]	; 8002fa4 <Vector90+0x284>
 8002e94:	6459      	str	r1, [r3, #68]	; 0x44
  if (usbp->config->sof_cb != NULL)
 8002e96:	f8da 5004 	ldr.w	r5, [sl, #4]
  usbp->status        = 0;
 8002e9a:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
  usbp->ep0state = USB_EP0_STP_WAITING;
 8002e9e:	f88a 2064 	strb.w	r2, [sl, #100]	; 0x64
 8002ea2:	68e9      	ldr	r1, [r5, #12]
  usbp->pmnext = 64;
 8002ea4:	2040      	movs	r0, #64	; 0x40
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
 8002ea6:	4291      	cmp	r1, r2
 8002ea8:	bf14      	ite	ne
 8002eaa:	f44f 4c1e 	movne.w	ip, #40448	; 0x9e00
 8002eae:	f44f 4c1c 	moveq.w	ip, #39936	; 0x9c00
  usbp->state         = USB_READY;
 8002eb2:	f04f 0802 	mov.w	r8, #2
  STM32_USB->DADDR  = DADDR_EF;
 8002eb6:	f04f 0e80 	mov.w	lr, #128	; 0x80
    dp->RXCOUNT0 = nblocks;
 8002eba:	f44f 4708 	mov.w	r7, #34816	; 0x8800
  if (STM32_USB->EPR[ep] & EPR_DTOG_RX) {
 8002ebe:	f246 2120 	movw	r1, #25120	; 0x6220
 8002ec2:	f242 2620 	movw	r6, #8736	; 0x2220
    usbp->epc[i] = NULL;
 8002ec6:	e9ca 2204 	strd	r2, r2, [sl, #16]
 8002eca:	e9ca 2206 	strd	r2, r2, [sl, #24]
 8002ece:	e9ca 2208 	strd	r2, r2, [sl, #32]
 8002ed2:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
  usbp->transmitting  = 0;
 8002ed6:	f8ca 2008 	str.w	r2, [sl, #8]
  usbp->state         = USB_READY;
 8002eda:	f88a 8000 	strb.w	r8, [sl]
  STM32_USB->BTABLE = BTABLE_ADDR;
 8002ede:	651a      	str	r2, [r3, #80]	; 0x50
  STM32_USB->ISTR   = 0;
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8002ee2:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
  STM32_USB->CNTR = cntr;
 8002ee6:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
  usbp->pmnext = 64;
 8002eea:	f8ca 0084 	str.w	r0, [sl, #132]	; 0x84
  dp = USB_GET_DESCRIPTOR(ep);
 8002eee:	6d18      	ldr	r0, [r3, #80]	; 0x50
  usbp->epc[0] = &ep0config;
 8002ef0:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8002fa8 <Vector90+0x288>
  dp = USB_GET_DESCRIPTOR(ep);
 8002ef4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002ef8:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
  usbp->epc[0] = &ep0config;
 8002efc:	f8ca c00c 	str.w	ip, [sl, #12]
    dp->TXCOUNT0 = 0;
 8002f00:	6042      	str	r2, [r0, #4]
  next = usbp->pmnext;
 8002f02:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8002f06:	f102 0c40 	add.w	ip, r2, #64	; 0x40
 8002f0a:	f8ca c084 	str.w	ip, [sl, #132]	; 0x84
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8002f0e:	6002      	str	r2, [r0, #0]
    dp->RXCOUNT0 = nblocks;
 8002f10:	60c7      	str	r7, [r0, #12]
  next = usbp->pmnext;
 8002f12:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8002f16:	f102 0740 	add.w	r7, r2, #64	; 0x40
 8002f1a:	f8ca 7084 	str.w	r7, [sl, #132]	; 0x84
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8002f1e:	6082      	str	r2, [r0, #8]
  if (STM32_USB->EPR[ep] & EPR_DTOG_RX) {
 8002f20:	6818      	ldr	r0, [r3, #0]
  if (STM32_USB->EPR[ep] & EPR_DTOG_TX) {
 8002f22:	681a      	ldr	r2, [r3, #0]
  if (STM32_USB->EPR[ep] & EPR_DTOG_RX) {
 8002f24:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8002f28:	bf18      	it	ne
 8002f2a:	460b      	movne	r3, r1
  EPR_SET(ep, epr | ep);
 8002f2c:	f248 2180 	movw	r1, #33408	; 0x8280
  if (STM32_USB->EPR[ep] & EPR_DTOG_RX) {
 8002f30:	bf08      	it	eq
 8002f32:	4633      	moveq	r3, r6
  EPR_TOGGLE(ep, epr);
 8002f34:	f647 0070 	movw	r0, #30832	; 0x7870
  if (STM32_USB->EPR[ep] & EPR_DTOG_TX) {
 8002f38:	0657      	lsls	r7, r2, #25
  EPR_SET(ep, epr | ep);
 8002f3a:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <Vector90+0x280>)
    epr |= EPR_DTOG_TX;
 8002f3c:	bf48      	it	mi
 8002f3e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
  EPR_SET(ep, epr | ep);
 8002f42:	6011      	str	r1, [r2, #0]
  EPR_TOGGLE(ep, epr);
 8002f44:	6811      	ldr	r1, [r2, #0]
 8002f46:	4003      	ands	r3, r0
 8002f48:	404b      	eors	r3, r1
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8002f4a:	682d      	ldr	r5, [r5, #0]
 8002f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	2d00      	cmp	r5, #0
 8002f58:	f43f aeea 	beq.w	8002d30 <Vector90+0x10>
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4811      	ldr	r0, [pc, #68]	; (8002fa4 <Vector90+0x284>)
 8002f60:	47a8      	blx	r5
  if (istr & ISTR_SUSP) {
 8002f62:	0526      	lsls	r6, r4, #20
 8002f64:	f57f aee7 	bpl.w	8002d36 <Vector90+0x16>
    STM32_USB->ISTR = ~ISTR_SUSP;
 8002f68:	f46f 6000 	mvn.w	r0, #2048	; 0x800
  usbp->state       = USB_SUSPENDED;
 8002f6c:	2105      	movs	r1, #5
    STM32_USB->CNTR |= CNTR_FSUSP;
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <Vector90+0x280>)
  usbp->saved_state = usbp->state;
 8002f70:	f8df a030 	ldr.w	sl, [pc, #48]	; 8002fa4 <Vector90+0x284>
 8002f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f76:	f042 0208 	orr.w	r2, r2, #8
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
    STM32_USB->ISTR = ~ISTR_SUSP;
 8002f7c:	6458      	str	r0, [r3, #68]	; 0x44
 8002f7e:	f89a 2000 	ldrb.w	r2, [sl]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002f82:	f8da 3004 	ldr.w	r3, [sl, #4]
  usbp->saved_state = usbp->state;
 8002f86:	f88a 2080 	strb.w	r2, [sl, #128]	; 0x80
  usbp->state       = USB_SUSPENDED;
 8002f8a:	f88a 1000 	strb.w	r1, [sl]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	b113      	cbz	r3, 8002f98 <Vector90+0x278>
 8002f92:	2104      	movs	r1, #4
 8002f94:	4650      	mov	r0, sl
 8002f96:	4798      	blx	r3
  usbp->transmitting  = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8ca 3008 	str.w	r3, [sl, #8]
 8002f9e:	e6ca      	b.n	8002d36 <Vector90+0x16>
 8002fa0:	40005c00 	.word	0x40005c00
 8002fa4:	20000d28 	.word	0x20000d28
 8002fa8:	08004564 	.word	0x08004564
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002fac:	f8db 3050 	ldr.w	r3, [fp, #80]	; 0x50
      USBOutEndpointState *osp = epcp->out_state;
 8002fb0:	f8d7 e018 	ldr.w	lr, [r7, #24]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002fb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fb8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8002fbc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8002fc0:	689a      	ldr	r2, [r3, #8]
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8002fc2:	68d8      	ldr	r0, [r3, #12]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8002fc4:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8002fc8:	f3c0 0909 	ubfx	r9, r0, #0, #10
 8002fcc:	9002      	str	r0, [sp, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8002fce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 8002fd2:	f8de 0008 	ldr.w	r0, [lr, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8002fd6:	005b      	lsls	r3, r3, #1
  while (i >= 2) {
 8002fd8:	f1b9 0f01 	cmp.w	r9, #1
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8002fdc:	461a      	mov	r2, r3
 8002fde:	9300      	str	r3, [sp, #0]
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 8002fe0:	9001      	str	r0, [sp, #4]
  while (i >= 2) {
 8002fe2:	d972      	bls.n	80030ca <Vector90+0x3aa>
 8002fe4:	f1a9 0302 	sub.w	r3, r9, #2
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	f102 0804 	add.w	r8, r2, #4
 8002fee:	9303      	str	r3, [sp, #12]
 8002ff0:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 8002ff4:	1c83      	adds	r3, r0, #2
    uint32_t w = *pmap++;
 8002ff6:	6810      	ldr	r0, [r2, #0]
 8002ff8:	3204      	adds	r2, #4
    *buf++ = (uint8_t)(w >> 8);
 8002ffa:	ea4f 2c10 	mov.w	ip, r0, lsr #8
  while (i >= 2) {
 8002ffe:	4590      	cmp	r8, r2
    *buf++ = (uint8_t)w;
 8003000:	f803 0c02 	strb.w	r0, [r3, #-2]
    *buf++ = (uint8_t)(w >> 8);
 8003004:	f803 cc01 	strb.w	ip, [r3, #-1]
 8003008:	f103 0302 	add.w	r3, r3, #2
  while (i >= 2) {
 800300c:	d1f3      	bne.n	8002ff6 <Vector90+0x2d6>
 800300e:	9b03      	ldr	r3, [sp, #12]
 8003010:	9a00      	ldr	r2, [sp, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003018:	9200      	str	r2, [sp, #0]
 800301a:	9a01      	ldr	r2, [sp, #4]
 800301c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	9b02      	ldr	r3, [sp, #8]
 8003024:	f003 0301 	and.w	r3, r3, #1
  if (i >= 1) {
 8003028:	b11b      	cbz	r3, 8003032 <Vector90+0x312>
    *buf = (uint8_t)*pmap;
 800302a:	9b00      	ldr	r3, [sp, #0]
 800302c:	9a01      	ldr	r2, [sp, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	7013      	strb	r3, [r2, #0]
      osp->rxpkts -= 1;
 8003032:	f8be 300c 	ldrh.w	r3, [lr, #12]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8003036:	f8b7 c012 	ldrh.w	ip, [r7, #18]
      osp->rxpkts -= 1;
 800303a:	1e5f      	subs	r7, r3, #1
      osp->rxsize -= n;
 800303c:	f8de 3000 	ldr.w	r3, [lr]
      osp->rxcnt  += n;
 8003040:	e9de 0201 	ldrd	r0, r2, [lr, #4]
      osp->rxpkts -= 1;
 8003044:	b2bf      	uxth	r7, r7
      osp->rxbuf += n;
 8003046:	444a      	add	r2, r9
      osp->rxcnt  += n;
 8003048:	4448      	add	r0, r9
      osp->rxsize -= n;
 800304a:	eba3 0309 	sub.w	r3, r3, r9
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 800304e:	45cc      	cmp	ip, r9
      osp->rxpkts -= 1;
 8003050:	f8ae 700c 	strh.w	r7, [lr, #12]
      osp->rxcnt  += n;
 8003054:	e9ce 0201 	strd	r0, r2, [lr, #4]
      osp->rxsize -= n;
 8003058:	f8ce 3000 	str.w	r3, [lr]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 800305c:	d926      	bls.n	80030ac <Vector90+0x38c>
        _usb_isr_invoke_out_cb(usbp, ep);
 800305e:	2201      	movs	r2, #1
 8003060:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8003064:	6870      	ldr	r0, [r6, #4]
 8003066:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 800306a:	fa02 f404 	lsl.w	r4, r2, r4
 800306e:	68c5      	ldr	r5, [r0, #12]
 8003070:	ea23 0404 	bic.w	r4, r3, r4
 8003074:	f8aa 400a 	strh.w	r4, [sl, #10]
 8003078:	2d00      	cmp	r5, #0
 800307a:	f43f aeee 	beq.w	8002e5a <Vector90+0x13a>
 800307e:	4815      	ldr	r0, [pc, #84]	; (80030d4 <Vector90+0x3b4>)
 8003080:	47a8      	blx	r5
 8003082:	e6ea      	b.n	8002e5a <Vector90+0x13a>
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8003084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  usbp->state = usbp->saved_state;
 8003086:	f8df a04c 	ldr.w	sl, [pc, #76]	; 80030d4 <Vector90+0x3b4>
 800308a:	f022 0208 	bic.w	r2, r2, #8
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
 8003090:	f89a 2080 	ldrb.w	r2, [sl, #128]	; 0x80
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8003094:	f8da 3004 	ldr.w	r3, [sl, #4]
  usbp->state = usbp->saved_state;
 8003098:	f88a 2000 	strb.w	r2, [sl]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f43f ae50 	beq.w	8002d44 <Vector90+0x24>
 80030a4:	4650      	mov	r0, sl
 80030a6:	2105      	movs	r1, #5
 80030a8:	4798      	blx	r3
 80030aa:	e64b      	b.n	8002d44 <Vector90+0x24>
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 80030ac:	2f00      	cmp	r7, #0
 80030ae:	d0d6      	beq.n	800305e <Vector90+0x33e>
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 80030b0:	682b      	ldr	r3, [r5, #0]
 80030b2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ba:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80030be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c6:	602b      	str	r3, [r5, #0]
 80030c8:	e6c7      	b.n	8002e5a <Vector90+0x13a>
  while (i >= 2) {
 80030ca:	464b      	mov	r3, r9
  if (i >= 1) {
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ac      	bne.n	800302a <Vector90+0x30a>
 80030d0:	e7af      	b.n	8003032 <Vector90+0x312>
 80030d2:	bf00      	nop
 80030d4:	20000d28 	.word	0x20000d28
	...

080030e0 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 80030e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80030e4:	4d68      	ldr	r5, [pc, #416]	; (8003288 <VectorD4+0x1a8>)
 80030e6:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80030e8:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 80030ec:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80030ee:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 80030f0:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80030f2:	d47d      	bmi.n	80031f0 <VectorD4+0x110>
 80030f4:	2320      	movs	r3, #32
 80030f6:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80030fa:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80030fe:	d04d      	beq.n	800319c <VectorD4+0xbc>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8003100:	f04f 0900 	mov.w	r9, #0
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8003104:	4f61      	ldr	r7, [pc, #388]	; (800328c <VectorD4+0x1ac>)
 8003106:	e008      	b.n	800311a <VectorD4+0x3a>
    if (sr & USART_SR_RXNE)
 8003108:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800310a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800310e:	d41d      	bmi.n	800314c <VectorD4+0x6c>
    sr = u->SR;
 8003110:	6834      	ldr	r4, [r6, #0]
 8003112:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003114:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8003118:	d040      	beq.n	800319c <VectorD4+0xbc>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800311a:	0723      	lsls	r3, r4, #28
 800311c:	d0f4      	beq.n	8003108 <VectorD4+0x28>
    sts |= SD_OVERRUN_ERROR;
 800311e:	f014 0f08 	tst.w	r4, #8
 8003122:	bf0c      	ite	eq
 8003124:	2000      	moveq	r0, #0
 8003126:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 8003128:	07e1      	lsls	r1, r4, #31
    sts |= SD_PARITY_ERROR;
 800312a:	bf48      	it	mi
 800312c:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8003130:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8003132:	bf48      	it	mi
 8003134:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8003138:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800313a:	bf48      	it	mi
 800313c:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 8003140:	f7fd fcd6 	bl	8000af0 <chEvtBroadcastFlagsI.constprop.31>
    if (sr & USART_SR_RXNE)
 8003144:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8003146:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800314a:	d5e1      	bpl.n	8003110 <VectorD4+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800314c:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 800314e:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8003152:	2b00      	cmp	r3, #0
 8003154:	d03d      	beq.n	80031d2 <VectorD4+0xf2>
  if (!iqIsFullI(iqp)) {
 8003156:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 800315a:	4293      	cmp	r3, r2
 800315c:	d040      	beq.n	80031e0 <VectorD4+0x100>
    iqp->q_counter++;
 800315e:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8003160:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8003162:	3201      	adds	r2, #1
 8003164:	ea04 0a0a 	and.w	sl, r4, sl
 8003168:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 800316a:	6229      	str	r1, [r5, #32]
 800316c:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 8003170:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 8003174:	429a      	cmp	r2, r3
 8003176:	d301      	bcc.n	800317c <VectorD4+0x9c>
      iqp->q_wrptr = iqp->q_buffer;
 8003178:	69ab      	ldr	r3, [r5, #24]
 800317a:	622b      	str	r3, [r5, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 800317c:	68eb      	ldr	r3, [r5, #12]
 800317e:	42bb      	cmp	r3, r7
 8003180:	d0c6      	beq.n	8003110 <VectorD4+0x30>
  tqp->next             = tp->queue.next;
 8003182:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 8003184:	4618      	mov	r0, r3
 8003186:	60ea      	str	r2, [r5, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003188:	6057      	str	r7, [r2, #4]
  tp->u.rdymsg = msg;
 800318a:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800318e:	f7fd fc97 	bl	8000ac0 <chSchReadyI>
    sr = u->SR;
 8003192:	6834      	ldr	r4, [r6, #0]
 8003194:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003196:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800319a:	d1be      	bne.n	800311a <VectorD4+0x3a>
 800319c:	2300      	movs	r3, #0
 800319e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80031a2:	f018 0f80 	tst.w	r8, #128	; 0x80
 80031a6:	d001      	beq.n	80031ac <VectorD4+0xcc>
 80031a8:	0622      	lsls	r2, r4, #24
 80031aa:	d42f      	bmi.n	800320c <VectorD4+0x12c>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80031ac:	f018 0f40 	tst.w	r8, #64	; 0x40
 80031b0:	d00b      	beq.n	80031ca <VectorD4+0xea>
 80031b2:	0663      	lsls	r3, r4, #25
 80031b4:	d509      	bpl.n	80031ca <VectorD4+0xea>
 80031b6:	2320      	movs	r3, #32
 80031b8:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80031bc:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d048      	beq.n	8003256 <VectorD4+0x176>
 80031c4:	2300      	movs	r3, #0
 80031c6:	f383 8811 	msr	BASEPRI, r3
}
 80031ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80031ce:	f7fd bbcf 	b.w	8000970 <_port_irq_epilogue>
 80031d2:	2004      	movs	r0, #4
 80031d4:	f7fd fc8c 	bl	8000af0 <chEvtBroadcastFlagsI.constprop.31>
  if (!iqIsFullI(iqp)) {
 80031d8:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 80031dc:	4293      	cmp	r3, r2
 80031de:	d1be      	bne.n	800315e <VectorD4+0x7e>
 80031e0:	696a      	ldr	r2, [r5, #20]
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	d0bb      	beq.n	800315e <VectorD4+0x7e>
 80031e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80031ea:	f7fd fc81 	bl	8000af0 <chEvtBroadcastFlagsI.constprop.31>
 80031ee:	e78f      	b.n	8003110 <VectorD4+0x30>
 80031f0:	2320      	movs	r3, #32
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031fa:	f7fd fc79 	bl	8000af0 <chEvtBroadcastFlagsI.constprop.31>
    u->SR = ~USART_SR_LBD;
 80031fe:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8003202:	6033      	str	r3, [r6, #0]
 8003204:	2300      	movs	r3, #0
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	e773      	b.n	80030f4 <VectorD4+0x14>
 800320c:	2320      	movs	r3, #32
 800320e:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8003212:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8003216:	429a      	cmp	r2, r3
 8003218:	d029      	beq.n	800326e <VectorD4+0x18e>
    oqp->q_counter++;
 800321a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 800321c:	6c28      	ldr	r0, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 800321e:	1c59      	adds	r1, r3, #1
    oqp->q_counter++;
 8003220:	3201      	adds	r2, #1
 8003222:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8003224:	64a9      	str	r1, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8003226:	4281      	cmp	r1, r0
    b = *oqp->q_rdptr++;
 8003228:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 800322a:	d301      	bcc.n	8003230 <VectorD4+0x150>
      oqp->q_rdptr = oqp->q_buffer;
 800322c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800322e:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 8003230:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003232:	4a17      	ldr	r2, [pc, #92]	; (8003290 <VectorD4+0x1b0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d009      	beq.n	800324c <VectorD4+0x16c>
  tp->u.rdymsg = msg;
 8003238:	f04f 0c00 	mov.w	ip, #0
  tqp->next             = tp->queue.next;
 800323c:	6819      	ldr	r1, [r3, #0]
  (void) chSchReadyI(tp);
 800323e:	4618      	mov	r0, r3
 8003240:	6329      	str	r1, [r5, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 8003242:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
 8003244:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003248:	f7fd fc3a 	bl	8000ac0 <chSchReadyI>
      u->DR = b;
 800324c:	6077      	str	r7, [r6, #4]
 800324e:	2300      	movs	r3, #0
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	e7aa      	b.n	80031ac <VectorD4+0xcc>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8003256:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0b3      	beq.n	80031c4 <VectorD4+0xe4>
 800325c:	2010      	movs	r0, #16
 800325e:	f7fd fc47 	bl	8000af0 <chEvtBroadcastFlagsI.constprop.31>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8003262:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8003266:	ea08 0303 	and.w	r3, r8, r3
 800326a:	60f3      	str	r3, [r6, #12]
 800326c:	e7aa      	b.n	80031c4 <VectorD4+0xe4>
  if (!oqIsEmptyI(oqp)) {
 800326e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003270:	2a00      	cmp	r2, #0
 8003272:	d0d2      	beq.n	800321a <VectorD4+0x13a>
 8003274:	2008      	movs	r0, #8
 8003276:	f7fd fc3b 	bl	8000af0 <chEvtBroadcastFlagsI.constprop.31>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 800327a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800327e:	ea08 0303 	and.w	r3, r8, r3
 8003282:	60f3      	str	r3, [r6, #12]
 8003284:	e7e3      	b.n	800324e <VectorD4+0x16e>
 8003286:	bf00      	nop
 8003288:	20000894 	.word	0x20000894
 800328c:	200008a0 	.word	0x200008a0
 8003290:	200008c4 	.word	0x200008c4
	...

080032a0 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80032a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 80032a4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 80032a8:	6933      	ldr	r3, [r6, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80032aa:	68f2      	ldr	r2, [r6, #12]
 80032ac:	4013      	ands	r3, r2
 80032ae:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 80032b0:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 80032b2:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 80032b4:	6132      	str	r2, [r6, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 80032b6:	d403      	bmi.n	80032c0 <VectorB0+0x20>
}
 80032b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 80032bc:	f7fd bb58 	b.w	8000970 <_port_irq_epilogue>
 80032c0:	2320      	movs	r3, #32
 80032c2:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80032c6:	4c22      	ldr	r4, [pc, #136]	; (8003350 <VectorB0+0xb0>)
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 80032c8:	f04f 0800 	mov.w	r8, #0
  vtp = ch.vtlist.next;
 80032cc:	46a1      	mov	r9, r4
 80032ce:	f859 3f1c 	ldr.w	r3, [r9, #28]!
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	6a70      	ldr	r0, [r6, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80032d6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80032d8:	b280      	uxth	r0, r0
  return (sysinterval_t)((systime_t)(end - start));
 80032da:	1a47      	subs	r7, r0, r1
 80032dc:	b2bf      	uxth	r7, r7
    if (nowdelta < vtp->delta) {
 80032de:	4297      	cmp	r7, r2
 80032e0:	d31b      	bcc.n	800331a <VectorB0+0x7a>
 80032e2:	2520      	movs	r5, #32
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80032e4:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 80032e6:	4411      	add	r1, r2

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80032e8:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 80032ea:	8521      	strh	r1, [r4, #40]	; 0x28
      nowdelta -= vtp->delta;
 80032ec:	eba7 0702 	sub.w	r7, r7, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80032f0:	f8c0 9004 	str.w	r9, [r0, #4]
      fn = vtp->func;
 80032f4:	68da      	ldr	r2, [r3, #12]
      ch.vtlist.next = vtp->next;
 80032f6:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
 80032f8:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0U;
 80032fc:	bf08      	it	eq
 80032fe:	f8c6 800c 	streq.w	r8, [r6, #12]
 8003302:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8003306:	6918      	ldr	r0, [r3, #16]
 8003308:	4790      	blx	r2
 800330a:	f385 8811 	msr	BASEPRI, r5
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 800330e:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	4297      	cmp	r7, r2
 8003314:	d3de      	bcc.n	80032d4 <VectorB0+0x34>
 8003316:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8003318:	e7e4      	b.n	80032e4 <VectorB0+0x44>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800331a:	69e2      	ldr	r2, [r4, #28]
 800331c:	454a      	cmp	r2, r9
 800331e:	d00f      	beq.n	8003340 <VectorB0+0xa0>
  return systime + (systime_t)interval;
 8003320:	f64f 75ff 	movw	r5, #65535	; 0xffff
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8003324:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 8003326:	8520      	strh	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8003328:	1bcf      	subs	r7, r1, r7
 800332a:	6097      	str	r7, [r2, #8]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	42ab      	cmp	r3, r5
 8003330:	bf28      	it	cs
 8003332:	462b      	movcs	r3, r5
 8003334:	2b02      	cmp	r3, #2
 8003336:	bf2c      	ite	cs
 8003338:	18c0      	addcs	r0, r0, r3
 800333a:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800333c:	b280      	uxth	r0, r0
 800333e:	6370      	str	r0, [r6, #52]	; 0x34
 8003340:	2300      	movs	r3, #0
 8003342:	f383 8811 	msr	BASEPRI, r3
}
 8003346:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800334a:	f7fd bb11 	b.w	8000970 <_port_irq_epilogue>
 800334e:	bf00      	nop
 8003350:	20000db4 	.word	0x20000db4
	...

08003360 <VectorC0>:
  uint16_t sr = I2CD1.i2c->SR1;
 8003360:	4934      	ldr	r1, [pc, #208]	; (8003434 <VectorC0+0xd4>)
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8003362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dmaStreamDisable(i2cp->dmatx);
 8003364:	e9d1 640c 	ldrd	r6, r4, [r1, #48]	; 0x30
  uint16_t sr = I2CD1.i2c->SR1;
 8003368:	6960      	ldr	r0, [r4, #20]
  dmaStreamDisable(i2cp->dmatx);
 800336a:	230e      	movs	r3, #14
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800336c:	f400 425f 	and.w	r2, r0, #57088	; 0xdf00
 8003370:	43d2      	mvns	r2, r2
  dmaStreamDisable(i2cp->dmatx);
 8003372:	6877      	ldr	r7, [r6, #4]
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8003374:	6162      	str	r2, [r4, #20]
  dmaStreamDisable(i2cp->dmatx);
 8003376:	683d      	ldr	r5, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8003378:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 800337a:	f025 050f 	bic.w	r5, r5, #15
 800337e:	603d      	str	r5, [r7, #0]
 8003380:	7b75      	ldrb	r5, [r6, #13]
 8003382:	6837      	ldr	r7, [r6, #0]
 8003384:	fa03 f505 	lsl.w	r5, r3, r5
  dmaStreamDisable(i2cp->dmarx);
 8003388:	6856      	ldr	r6, [r2, #4]
  dmaStreamDisable(i2cp->dmatx);
 800338a:	607d      	str	r5, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 800338c:	6835      	ldr	r5, [r6, #0]
 800338e:	6817      	ldr	r7, [r2, #0]
 8003390:	f025 050f 	bic.w	r5, r5, #15
 8003394:	6035      	str	r5, [r6, #0]
 8003396:	7b55      	ldrb	r5, [r2, #13]
  uint16_t sr = I2CD1.i2c->SR1;
 8003398:	b282      	uxth	r2, r0
  dmaStreamDisable(i2cp->dmarx);
 800339a:	40ab      	lsls	r3, r5
 800339c:	607b      	str	r3, [r7, #4]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 800339e:	f412 7380 	ands.w	r3, r2, #256	; 0x100
 80033a2:	d133      	bne.n	800340c <VectorC0+0xac>
  i2cp->errors = I2C_NO_ERROR;
 80033a4:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 80033a6:	0597      	lsls	r7, r2, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 80033a8:	bf44      	itt	mi
 80033aa:	f043 0302 	orrmi.w	r3, r3, #2
 80033ae:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 80033b0:	0556      	lsls	r6, r2, #21
 80033b2:	d50a      	bpl.n	80033ca <VectorC0+0x6a>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 80033b4:	6865      	ldr	r5, [r4, #4]
    i2cp->errors |= I2C_ACK_FAILURE;
 80033b6:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 80033ba:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 80033be:	6065      	str	r5, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80033c0:	6825      	ldr	r5, [r4, #0]
 80033c2:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80033c6:	6025      	str	r5, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80033c8:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 80033ca:	0515      	lsls	r5, r2, #20
    i2cp->errors |= I2C_OVERRUN;
 80033cc:	bf44      	itt	mi
 80033ce:	f043 0308 	orrmi.w	r3, r3, #8
 80033d2:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 80033d4:	0454      	lsls	r4, r2, #17
    i2cp->errors |= I2C_TIMEOUT;
 80033d6:	bf44      	itt	mi
 80033d8:	f043 0320 	orrmi.w	r3, r3, #32
 80033dc:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 80033de:	04d2      	lsls	r2, r2, #19
 80033e0:	b200      	sxth	r0, r0
 80033e2:	d51b      	bpl.n	800341c <VectorC0+0xbc>
    i2cp->errors |= I2C_PEC_ERROR;
 80033e4:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80033e8:	2800      	cmp	r0, #0
    i2cp->errors |= I2C_PEC_ERROR;
 80033ea:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80033ec:	db1e      	blt.n	800342c <VectorC0+0xcc>
 80033ee:	2320      	movs	r3, #32
 80033f0:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 80033f4:	f06f 0101 	mvn.w	r1, #1
 80033f8:	480f      	ldr	r0, [pc, #60]	; (8003438 <VectorC0+0xd8>)
 80033fa:	f7fd fba9 	bl	8000b50 <chThdResumeI>
 80033fe:	2300      	movs	r3, #0
 8003400:	f383 8811 	msr	BASEPRI, r3
}
 8003404:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8003408:	f7fd bab2 	b.w	8000970 <_port_irq_epilogue>
    i2cp->errors |= I2C_BUS_ERROR;
 800340c:	2601      	movs	r6, #1
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 800340e:	6965      	ldr	r5, [r4, #20]
 8003410:	4633      	mov	r3, r6
 8003412:	f425 7580 	bic.w	r5, r5, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 8003416:	608e      	str	r6, [r1, #8]
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 8003418:	6165      	str	r5, [r4, #20]
 800341a:	e7c4      	b.n	80033a6 <VectorC0+0x46>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800341c:	2800      	cmp	r0, #0
 800341e:	db05      	blt.n	800342c <VectorC0+0xcc>
  if (i2cp->errors != I2C_NO_ERROR)
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e4      	bne.n	80033ee <VectorC0+0x8e>
}
 8003424:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8003428:	f7fd baa2 	b.w	8000970 <_port_irq_epilogue>
    i2cp->errors |= I2C_SMB_ALERT;
 800342c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003430:	608b      	str	r3, [r1, #8]
 8003432:	e7dc      	b.n	80033ee <VectorC0+0x8e>
 8003434:	2000085c 	.word	0x2000085c
 8003438:	20000878 	.word	0x20000878
 800343c:	00000000 	.word	0x00000000

08003440 <VectorBC>:
  I2C_TypeDef *dp = i2cp->i2c;
 8003440:	483f      	ldr	r0, [pc, #252]	; (8003540 <VectorBC+0x100>)
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8003442:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8003444:	6b44      	ldr	r4, [r0, #52]	; 0x34
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003446:	4a3f      	ldr	r2, [pc, #252]	; (8003544 <VectorBC+0x104>)
  uint32_t regSR2 = dp->SR2;
 8003448:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800344a:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800344c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8003450:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003454:	4293      	cmp	r3, r2
 8003456:	d04a      	beq.n	80034ee <VectorBC+0xae>
 8003458:	d916      	bls.n	8003488 <VectorBC+0x48>
 800345a:	4a3b      	ldr	r2, [pc, #236]	; (8003548 <VectorBC+0x108>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d025      	beq.n	80034ac <VectorBC+0x6c>
 8003460:	3202      	adds	r2, #2
 8003462:	4293      	cmp	r3, r2
 8003464:	d032      	beq.n	80034cc <VectorBC+0x8c>
 8003466:	4a39      	ldr	r2, [pc, #228]	; (800354c <VectorBC+0x10c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d02a      	beq.n	80034c2 <VectorBC+0x82>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800346c:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8003470:	bf18      	it	ne
 8003472:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 8003474:	05eb      	lsls	r3, r5, #23
 8003476:	d503      	bpl.n	8003480 <VectorBC+0x40>
    dp->SR1 &= ~I2C_SR1_BERR;
 8003478:	6963      	ldr	r3, [r4, #20]
 800347a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800347e:	6163      	str	r3, [r4, #20]
}
 8003480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8003484:	f7fd ba74 	b.w	8000970 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003488:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800348c:	d002      	beq.n	8003494 <VectorBC+0x54>
 800348e:	3a01      	subs	r2, #1
 8003490:	4293      	cmp	r3, r2
 8003492:	d1eb      	bne.n	800346c <VectorBC+0x2c>
    if ((i2cp->addr >> 8) > 0) {
 8003494:	8c03      	ldrh	r3, [r0, #32]
 8003496:	0a1a      	lsrs	r2, r3, #8
 8003498:	d016      	beq.n	80034c8 <VectorBC+0x88>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80034a2:	f002 0206 	and.w	r2, r2, #6
 80034a6:	4313      	orrs	r3, r2
 80034a8:	6123      	str	r3, [r4, #16]
 80034aa:	e7df      	b.n	800346c <VectorBC+0x2c>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80034ac:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 80034ae:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80034b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 80034b4:	6852      	ldr	r2, [r2, #4]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80034b6:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 80034b8:	6813      	ldr	r3, [r2, #0]
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	e7d4      	b.n	800346c <VectorBC+0x2c>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 80034c2:	8c03      	ldrh	r3, [r0, #32]
 80034c4:	f3c3 0347 	ubfx	r3, r3, #1, #8
 80034c8:	6123      	str	r3, [r4, #16]
 80034ca:	e7cf      	b.n	800346c <VectorBC+0x2c>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80034cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    (void)dp->DR; /* clear BTF.*/
 80034ce:	6922      	ldr	r2, [r4, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	685e      	ldr	r6, [r3, #4]
 80034d4:	b30e      	cbz	r6, 800351a <VectorBC+0xda>
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80034d6:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 80034d8:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80034da:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80034e4:	6023      	str	r3, [r4, #0]
}
 80034e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 80034ea:	f7fd ba41 	b.w	8000970 <_port_irq_epilogue>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80034ee:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80034f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80034f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 80034f6:	685b      	ldr	r3, [r3, #4]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80034f8:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8003502:	6862      	ldr	r2, [r4, #4]
 8003504:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003508:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d8ad      	bhi.n	800346c <VectorBC+0x2c>
      dp->CR1 &= ~I2C_CR1_ACK;
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003516:	6023      	str	r3, [r4, #0]
 8003518:	e7a8      	b.n	800346c <VectorBC+0x2c>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800351a:	6863      	ldr	r3, [r4, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003522:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800352a:	6023      	str	r3, [r4, #0]
 800352c:	f382 8811 	msr	BASEPRI, r2
 8003530:	301c      	adds	r0, #28
 8003532:	4631      	mov	r1, r6
 8003534:	f7fd fb0c 	bl	8000b50 <chThdResumeI>
 8003538:	f386 8811 	msr	BASEPRI, r6
 800353c:	e796      	b.n	800346c <VectorBC+0x2c>
 800353e:	bf00      	nop
 8003540:	2000085c 	.word	0x2000085c
 8003544:	00030002 	.word	0x00030002
 8003548:	00070082 	.word	0x00070082
 800354c:	00030008 	.word	0x00030008

08003550 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8003550:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8003552:	4803      	ldr	r0, [pc, #12]	; (8003560 <Vector84+0x10>)
 8003554:	f7fd fd2c 	bl	8000fb0 <dmaServeInterrupt>
}
 8003558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800355c:	f7fd ba08 	b.w	8000970 <_port_irq_epilogue>
 8003560:	080044c4 	.word	0x080044c4
	...

08003570 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8003570:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8003572:	4803      	ldr	r0, [pc, #12]	; (8003580 <Vector80+0x10>)
 8003574:	f7fd fd1c 	bl	8000fb0 <dmaServeInterrupt>
}
 8003578:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800357c:	f7fd b9f8 	b.w	8000970 <_port_irq_epilogue>
 8003580:	080044b4 	.word	0x080044b4
	...

08003590 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8003590:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8003592:	4803      	ldr	r0, [pc, #12]	; (80035a0 <Vector7C+0x10>)
 8003594:	f7fd fd0c 	bl	8000fb0 <dmaServeInterrupt>
}
 8003598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800359c:	f7fd b9e8 	b.w	8000970 <_port_irq_epilogue>
 80035a0:	080044a4 	.word	0x080044a4
	...

080035b0 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80035b0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 80035b2:	4803      	ldr	r0, [pc, #12]	; (80035c0 <Vector78+0x10>)
 80035b4:	f7fd fcfc 	bl	8000fb0 <dmaServeInterrupt>
}
 80035b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80035bc:	f7fd b9d8 	b.w	8000970 <_port_irq_epilogue>
 80035c0:	08004494 	.word	0x08004494
	...

080035d0 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80035d0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 80035d2:	4803      	ldr	r0, [pc, #12]	; (80035e0 <Vector74+0x10>)
 80035d4:	f7fd fcec 	bl	8000fb0 <dmaServeInterrupt>
}
 80035d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80035dc:	f7fd b9c8 	b.w	8000970 <_port_irq_epilogue>
 80035e0:	08004484 	.word	0x08004484
	...

080035f0 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80035f0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 80035f2:	4803      	ldr	r0, [pc, #12]	; (8003600 <Vector70+0x10>)
 80035f4:	f7fd fcdc 	bl	8000fb0 <dmaServeInterrupt>
}
 80035f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80035fc:	f7fd b9b8 	b.w	8000970 <_port_irq_epilogue>
 8003600:	08004474 	.word	0x08004474
	...

08003610 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8003610:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8003612:	4803      	ldr	r0, [pc, #12]	; (8003620 <Vector6C+0x10>)
 8003614:	f7fd fccc 	bl	8000fb0 <dmaServeInterrupt>
}
 8003618:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800361c:	f7fd b9a8 	b.w	8000970 <_port_irq_epilogue>
 8003620:	08004464 	.word	0x08004464
	...

08003630 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8003630:	b4f0      	push	{r4, r5, r6, r7}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8003632:	2700      	movs	r7, #0
 8003634:	4e13      	ldr	r6, [pc, #76]	; (8003684 <__init_ram_areas+0x54>)
void __init_ram_areas(void) {
 8003636:	4d14      	ldr	r5, [pc, #80]	; (8003688 <__init_ram_areas+0x58>)
 8003638:	4c14      	ldr	r4, [pc, #80]	; (800368c <__init_ram_areas+0x5c>)
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <__init_ram_areas+0x60>)
 800363c:	4915      	ldr	r1, [pc, #84]	; (8003694 <__init_ram_areas+0x64>)
 800363e:	f106 0c70 	add.w	ip, r6, #112	; 0x70
    while (p < rap->clear_area) {
 8003642:	429c      	cmp	r4, r3
 8003644:	d911      	bls.n	800366a <__init_ram_areas+0x3a>
 8003646:	461a      	mov	r2, r3
 8003648:	3904      	subs	r1, #4
      *p = *tp;
 800364a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800364e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 8003652:	4294      	cmp	r4, r2
 8003654:	d8f9      	bhi.n	800364a <__init_ram_areas+0x1a>
 8003656:	43da      	mvns	r2, r3
 8003658:	4414      	add	r4, r2
 800365a:	f024 0403 	bic.w	r4, r4, #3
 800365e:	3404      	adds	r4, #4
 8003660:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 8003662:	429d      	cmp	r5, r3
 8003664:	d903      	bls.n	800366e <__init_ram_areas+0x3e>
      *p = 0;
 8003666:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 800366a:	429d      	cmp	r5, r3
 800366c:	d8fb      	bhi.n	8003666 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800366e:	4566      	cmp	r6, ip
 8003670:	d005      	beq.n	800367e <__init_ram_areas+0x4e>
 8003672:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 8003676:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 800367a:	3610      	adds	r6, #16
 800367c:	e7e1      	b.n	8003642 <__init_ram_areas+0x12>
#endif
}
 800367e:	bcf0      	pop	{r4, r5, r6, r7}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	080045bc 	.word	0x080045bc
 8003688:	200014f0 	.word	0x200014f0
 800368c:	200014f0 	.word	0x200014f0
 8003690:	200014f0 	.word	0x200014f0
 8003694:	080046c0 	.word	0x080046c0
	...

080036a0 <__default_exit>:
void __default_exit(void) {
 80036a0:	e7fe      	b.n	80036a0 <__default_exit>
 80036a2:	bf00      	nop
	...

080036b0 <__late_init>:
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
	...

080036c0 <__core_init>:
}
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
