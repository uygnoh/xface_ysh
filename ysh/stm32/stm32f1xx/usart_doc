//____________________________________________________________________________//
//              => USART波特率设置 72MHz@9600
//____________________________________________________________________________//
// 设置系统时钟为72MHz， 波特率为9600bps
//_____________________________________________________________
|_________________________________________________________|
|                                                         |
|                               SystemClock               |
|       Tx/Rx-baud_rate  = _____________________          |
|                              16 * USARTDIV              |
|                                                         |
|                                                         |
|                                                         |
|       9600 = (72*1000*1000) / (16 * U)                  |
|       U    = 72000000 / (9600 * 16)                     |
|_________________________________________________________|



// USART->BRR 寄存器
//_____________________________________________________________
|________________________________________|
| 15-4               | 3-0               |
| Mantissa[11:0]     | Fraction[3:0]     |
|____________________|___________________|
Mantissa[15:4]          // USARTDIV整数部分
                        // 这12位定义了USART分频器除法因了（USARTDIV）的整数部分
Fraction[3:0]           // USARTDIV小数部分
                        // 这4位定义了USART分频器除法因了（USARTDIV）的小数部分



// USART->BRR 寄存器配置                   
//_____________________________________________________________          
        float Float_U;        //浮点数
        u16 Mantissa,           //整数部分
        u16 Fraction,           //小数部分
        u16 BRR;                //最终存入寄存器的数值
        u32 BoundRate;          //波特率设置
        BoundRate               = 9600;
Float_U         = (float)(72 * 1000 * 1000) / (BoundRate * 16);
Mantissa        = Float_U;                    // 取整数部分
Fraction        = (Float_U - Mantissa) * 16;  // 小数部分
// 整合整数部分和小数部分
BRR             = (Mantissa << 4) + Fraction;
USART1->BRR     = BRR;



/*******************************************************************************
  函数名称: usart_setup()
  输入参数: 无
  输出参数: 无
  函数功能: USART1初始化设置 72MHz@115200 1N8
*******************************************************************************/
void usart_setup(void)
{
        GPIOA_CLOCK_ENABLE();                   // GPIOA时钟打开
        USART1_CLOCK_ENABLE();                  // USART1时钟打开
	GPIOA->CRH  &= (0xFFFFF00F);            // 清除相关的位
	GPIOA->CRH  |= (0x000000B0);            // TX(PA.09)复用推挽输出(50MHz)
	GPIOA->CRH  |= (0x00000400);            // RX(PA.10)浮空输入
	USART1->CR1 |= BIT_13;                  // USART模块使能
	USART1->CR1 &= ~BIT_12;                 // 1个起始位, 8个数据位
	USART1->CR2 &= ~(BIT_13 + BIT_12);      // 1个停止位(bit13=0, bit12=0)
	USART1->CR1 |= BIT_03 + BIT_02;         // 发送使能 | 接收使能 
	USART1->BRR  = 0x0271;                  // 72MHz@115200 			
}

