/*******************************************************************************
                                    Linux内核宏
*******************************************************************************/
// 把它修改为一个空值
// #include <linux/poison.h>
#define LIST_POISON1    (NULL)
#define LIST_POISON2    (NULL)


//计算member在type中的位置
// include/linux/stddef.h
#define offsetof(TYPE, MEMBER)  (size_t)(&((TYPE*)0)->MEMBER)


//根据member的地址取type的起始地址
// include/linux/list.h
其中offsetof()宏是通过把0地址转换为type类型的指针，
然后去获取该结构体中member成员的指针，也就是获取了member在type结构体中的偏移量。
最后用指针ptr减去offset，就得到type结构体的真实地址了。
#define list_entry(ptr, type, member)                           \
        container_of(ptr, type, member)
// include/linux/kernel.h
#define container_of(ptr, type, member) ({                      \
        const typeof(((type *)0)->member)*__mptr = (ptr);       \
        (type *)((char *)__mptr - offsetof(type, member)); })


// 为了加快访问速度，此处修改为没有作用
// #include <linux/prefetch.h>
#define prefetch(x) ((void)x)


// 头节点初始化，它没有数据域
#define LIST_HEAD_INIT(name)    { &(name), &(name) }
#define LIST_HEAD(name) \
        struct list_head name = LIST_HEAD_INIT(name)



/*******************************************************************************
                              修改后标准C语言宏      
*******************************************************************************/
#ifndef offsetof
#define offsetof(TYPE, MEMBER)                          \
        (size_t)(&((TYPE*)0)->MEMBER)
#endif


#ifndef container_of
#define container_of(ptr, type, member)                 \
        ((type *)((char *)ptr - offsetof(type, member)))
#endif


#define LIST_POISON1    (NULL)
#define LIST_POISON2    (NULL)
#define prefetch(x) ((void)x)


#define LIST_HEAD_INIT(name)                            \
        { &(name), &(name) }
#define LIST_HEAD(name)                                 \
        struct list_head name = LIST_HEAD_INIT(name)



/*******************************************************************************
                              初始化链表头节点     
*******************************************************************************/
// 首先我们创建一个链表头 header_task 
struct list_head header = {&header, &header);
LIST_HEAD(header);


struct my_task_list {
        int value;
        struct list_head mylist
};
struct my_task_list first_task = {
        .value = 0,
        .mylist = LIST_HEAD_INIT(first_task.mylist)
};
