struct list_head {
        struct list_head *next;
        struct list_head *prev;
};

#ifndef offsetof
#define offsetof(TYPE, MEMBER)          ((size_t)&((TYPE*)0)->MEMBER)
#endif

#define list_entry(ptr, type, member)   \
        container_of(ptr, type, member)

#ifndef container_of
#define container_of(ptr, type, member) \
        ((type *)((char *)(ptr) - offsetof(type, member)))
#endif

#define LIST_POISON1            (NULL)
#define LIST_POISON2            (NULL)

#define prefetch(x)             ((void)x)


#define LIST_HEAD_INIT(name)    { &(name), &(name) }
#define LIST_HEAD(name) \
        struct list_head name = LIST_HEAD_INIT(name)
LIST_HEAD(list); //相当于 struct list_head list = {&(list), &(list)};
printf("%u\n%u\n%u\n", &list, list.prev, list.next);


//正向遍历节点
#define list_for_each(pos, head)                        \
        for (pos = (head)->next;                        \
                prefetch(pos->next), pos != (head);     \
                         pos = pos->next)

//反向遍历节点
#define list_for_each_prev(pos, head)                   \
        for (pos = (head)->prev;                        \
                prefetch(pos->prev), pos != (head);     \
                        pos = pos->prev)


static void INIT_LIST_HEAD(struct list_head *list)
{
        list->next = list;
        list->prev = list;
}

static void __list_add(struct list_head *new,
                               struct list_head *prev,
                               struct list_head *next)
{
        next->prev = new;
        new->next = next;
        new->prev = prev;
        prev->next = new;
}

static void list_add(struct list_head *new, struct list_head *head)
{
        __list_add(new, head, head->next);
}

static void list_add_tail(struct list_head *new, struct list_head *head)
{
        __list_add(new, head->prev, head);
}


static void __list_del(struct list_head *prev, struct list_head *next)
{
        next->prev = prev;
        prev->next = next;
}

static void list_del(struct list_head *entry)
{
        __list_del(entry->prev, entry->next);
        entry->next = LIST_POISON1;
        entry->prev = LIST_POISON2;
}
