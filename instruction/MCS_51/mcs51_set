/*******************************************************************************
        => MCS-51指令系统
*******************************************************************************/
// MCS-51单片机指令系统共有基本指令111条，分为五大类
// ____________________________________________________________
        1  数据传送类指令( 29 )
        2  算术运算类指令( 24 )
        3  逻辑运算及移位类指令( 24 )
        4  控制转移类指令( 17 )
        5  位操作类指令( 17 )



// MCS-51单片机指令系统以字节数划分
// ____________________________________________________________
        1  单字节指令 49 条
        2  双字节指令 45 条
        3  三字节指令 17 条



// MCS-51单片机指令系统以时间划分
// ____________________________________________________________
        1 单周期指令 64 条
        2 双周期指令 45 条
        3 四周期指令 2 条（乘除指令）



/*******************************************************************************
        => MCS-51 数据交换指令
*******************************************************************************/

        1  // 整字节交换指令
           // 字节单元与累加器A进行8位数据交换
        2  // 半字节交换指令
           // 字节单元与累加器A进行低4位的半字节数据交换
        3  // 累加器高低半字节交换指令



// 堆栈操作指令组
// ____________________________________________________________
        PUSH
        POP



// 算术运算指令
// ____________________________________________________________
        ADD     // 加法指令
        ADDC    // 带进位的加法指令
        SUBC    // 带进位的减法指令
        INC     // 加1指令
        DEC     // 减1指令



// 乘法指令
// (A)=50H (B)=0A0H 即乘积为3200H
// 结果：(B)=32H, (A)=00H
// 标志：CY=0 
// 标志：OV=1（用来指示这个乘积是8位还是16位数据）
// ____________________________________________________________
        MUL     AB



// 除法指令
// 被除数放在（A），除数放在（B），商放在（A），余数（B）
// 标志：当除数为0（B=0）时，OV置1，表明除法没有意义
// ____________________________________________________________
        DIV     AB



// 10进制调整指令
// ____________________________________________________________
        DA



// 移位运算指令
// ____________________________________________________________
        RL      A       // 循环左移
        RR      A       // 循环右移
        RLC     A       // 带进位循环左移
        RRC     A       // 带进位循环右移




/*******************************************************************************
        => MCS-51 转移控制指令
*******************************************************************************/
//  长转移指令，转移范围 ROM-64KB
// ____________________________________________________________
        LJMP    addr16

    
    
// 绝对转移指令，转移范围:PC+2后的当前地址的2K
// ____________________________________________________________

        AJMP    addr11

        // 程序中2070H地址单元有绝对转移指令
        // 2070:   AJMP    16AH
// 取出绝对转移指令后( PC = 2070H + 2 = 2072H ) 
|__________________________________________________________|
| 0 0 1 0 - 0 0 0 0 - 0 1 1 1 - 0 0 1 0 | //PC=2072H       |
|             0 0 1 - 0 1 1 0 - 1 0 1 0 | //绝对地址=16AH   |
| 0 0 1 0 - 0 0 0 1 - 0 1 1 0 - 1 0 1 0 | //PC=216AH       |
|_______________________________________|__________________|



// 短转移指令, rel对应的是8位立即数
// ____________________________________________________________
        SJMP    rel

             

// 数值比较转移指令
// ____________________________________________________________
        CJNE    A, #data, rel
        CJNE    A, dirct, rel
        CJNE    Rn, #data, rel
        CJNE    @Ri, #data, rel




// 减1条件转移指令
// 先对寄存器Rn的内容减1，再判断寄存器Rn的内容是否为“0”
// 如果寄存器Rn的内容不等于“0”，则发生转移
// ____________________________________________________________
        DJNZ    Rn, rel
        DJNZ    drect, rel      // 直接寻址单元减1条件转移指令



// 绝对调用指令
// 子程序调用范围是2KB
// ____________________________________________________________
        ACALL   addr11



// 长调用指令
// 子程序调用范围是64KB
// ____________________________________________________________
        LCALL   addr16



// 子程序返回使用
// ____________________________________________________________
        RET             // 子程序返回使用
        RETI            // 中断服务子程序返回使用




/*******************************************************************************
        => MCS-51 位运算指令
*******************************************************************************/

// 位累加器C，它是位传送的中心。 位处理使用进位标志（CY）作为累加器
// 把ACC称之为字节累加器，而把CY称之为位累加器（C）
// 内部RAM位寻址区的128可寻址位（00H ~ 7FH）
// 专用寄存器中的83位可寻址位（包括输入，输出口）
// ____________________________________________________________
        MOV     C, bit          // CY = bit
        MOV     bit, C          // bit = CY



// 将20H位的内容传送5AH位, 以位累加器CY为中转
// ____________________________________________________________
        MOV     10H, C          // 暂存CY内容到10H位
        MOV     C, 20H          // 20H位送CY
        MOV     5AH, C          // 20H位通过CY送5AH位
        MOV     C, 10H          // 恢复CY内容



// 对位累加器或可寻址位进行，清零，置位，取反
// ____________________________________________________________
        CLR     bit
        SET     bit
        CPL     bit



// 位逻辑运算指令
// ____________________________________________________________
        ANL     C, bit
        ORL     C, bit
        ANL     C, /bit
        ORL     C, /bit



// 位条件转移指令
// ____________________________________________________________
        JC      rel             // C=1, 转移
        JNC     rel             // C=0, 转移
        JB      bit, rel        // bit=1, 转移
        JNB     bit, rel        // bit=0, 转移
        JBC     bit, rel        // bit=1, bit位清0并转移





