/*******************************************************************************
        => 数据类型定义
*******************************************************************************/

        U(u) unsigned           // 无符号
        L(l) long               // 长整型
// ____________________________________________________________
// 后缀大小写都可以，可以单独使用(100U)，也可以组合使用(100UL)后缀就是
// 告诉编译器该常数的属性。  默认为有符号INT型，加了u就是无符号的，加了l
// 就是long型。 做下移位就知道结果了。 以0x80为例，左移次数过多编译器会提
// 示你符号位被改变，即负数被移位成正数。 加个u的话就被编译器识别为无符号
// 数，可以随意移位。 不会影响符号位。
// ____________________________________________________________
        在32位编译器中，int和long都是占4个字节
        // unsigned int  0～4294967295
        // unsigned long 0～4294967295
        // unsigned int和unsigned long并没有区别



// C语言数据类型定义（）
// ____________________________________________________________
short or (short int)
        // 最大的（short）不得大于（int），也可能是更小的
        // C guarantess at least 16bits for short.

int     // The basic integer type for a give system.
        // C语言确保（int）至少为（16bits）
        
long  or(long int)
        // 它至少和最大的（int）一样大，也可能更大
        // C guarantess at least 32bits for long.
        
long long or (long long int)
        // 它至少和最大的（long）一样大
        // The long long type is least 64bits
        
char    // 字符类型
        // C语言规定它必须为（1字节）
        
float   // 单精度浮点类型
        // The basic floating-point type for the system;
        // it can represent at  least  six  significant
        // figures accurately
        
double  // 双精度浮点类型
        // A(possibly)larger unit for holding floating-point
        // numbers.  It may allow more  significant figures
        // (at least 10, typically more) and perhaps larger 
        // exponents than float.

_Bool   // The keyword for this type.
        // It is an unsigned int and need only be large
        // enough to accommodate the range 0 thorugh 1.



/*******************************************************************************
        => STM32 单片机数据类型
*******************************************************************************/
// 按照posix标准，一般整形对应的*_t类型为：
// ____________________________________________________________
        uint8_t         //1字节
        uint16_t        //2字节
        uint32_t        //4字节
        uint64_t        //8字节
        #define __IO    volatile
        typedef unsigned int uint32_t;
        typedef __IO uint32_t uv32;



/*******************************************************************************
        => Cortex_M 符号扩展
*******************************************************************************/
        // LDRB 不需要符号位扩展： 运行结果（R0 = 0x80）
        // Address: 0x08000102          Value: 0x80
        MOV     R0, #0
        MOV     R1, #0x100
        LDRB    R0, [R1, #0x2]


        // 符号位扩展（最高位为：0正， 1负）
        // 如果字节数为（0x80），采用（LDRSB）指令读出时，
        // 则这一数值将被转换成（0xFFFFFF80），再放置到目的寄存器中
        // LDRSB 进行符号位扩展： 运行结果（0xFFFFFF80）
        // Address: 0x08000102          Value: 0x80
        MOV     R0, #0
        MOV     R1, #0x100
        LDRSB   R0, [R1, #0x2]



/*******************************************************************************
        => Cortex_M 数据类型
*******************************************************************************/
//      Load            Store           Type
        LDRB            STRB            8- bit unsigned
        LDRSB           STRB            8- bit signed
        LDRH            STRH            16-bit unsigned
        LDRSH           STRSH           16-bit signed
        LDR             STR             32-bit
        LDM             STM             32-bt Multiple 
        LDRD            STRD            64-bit Double-word 
        POP             PUSH            32-bit Stack operations 



/*******************************************************************************
        => 原码 反码 补码
*******************************************************************************/

        unsigned char UCHAR = 0;
        char CHAR = 0;
        while (1) {
                UCHAR = -3;             // 【1000 0011】原码 = 【1111 1101】补码 = 253
                CHAR  = -3;             // 【1000 0011】原码 = 【1111 1101】补码 = -3
                UCHAR = 127;            // = 127
                CHAR  = 127;            // = 127
                UCHAR = UCHAR + 3;      // = 130        // 无符号数
                CHAR  = CHAR  + 3;      // = -126       // 有符号数
        }


                char a = 127;
                a = a + 3;
                --------------------
                  【0111 1111】127 补码   
                + 【0000 0011】3   补码
                --------------------
                = 【1000 0010】    补码
                       ^
                  【1000 0010】    补码
                - 【0000 0001】
                --------------------
                  【1000 0001】    =>   【1111 1110】原码 = -126


        
        
// 机器数
// ____________________________________________________________
        一个数在计算机中的二进制表示形式， 叫作这个数的机器数
        机器数是带符号的，在计算机用机器数的最高位存放符号，
        正数为（0），负数为（1）
        +3      (0000 0011)
        -3      (1000 0011)
        
        
        
// 机器数的真值
// ____________________________________________________________
        因为第一位是符号位，所以机器数的形式值就不等于真正的数值
        0000 0001       真值=     +0000 0001      等于（+1）
        1000 0001       真值=     -0000 0001      等于（-1）
        
        
        
// 原码
// ____________________________________________________________
        [+1]原码 = 0000 0001
        [-1]原码 = 1000 0001
// 反码
// ____________________________________________________________
        正数的反码 == 原码
        负数的反码 == 在其原码的基础上，符号位不变，其余各位按位取反
        [+1]反码 = 0000 0001
        [-1]反码 = 1111 1110 
// 补码
// ____________________________________________________________
        正数的补码 == 原码
        负数的补码 == 在其原码的基础上，符号位不变，其余各位取反，最后加（1）
        [+1]补码 = 0000 0001
        [-1]补码 = 1111 1111
// 总结
// ____________________________________________________________
        1 正数的原码，反码，补码是一致的
        2 负数的反码是对原码按位取反，只是最高位（符号位不变）
        3 负数的补码是反码加（1）
        4 计算机数字运算均是基于（补码）的



/*******************************************************************************
        => Cortex-M SVC
*******************************************************************************/
// 程序运行流程
// ____________________________________________________________
z = svc_service_add(x, y);       // 呼叫 SVC 0
__asm void SVC_Handler(void);   // 处理 SVC异常程序
B       __cpp(svc_handler_main)  // 跳转到(svc_handler_main)
// 根据获得到的（SVC编号）并执行相关的代码
// 最后把（R0）中的值赋值给（Z）


// SVC 中断服务函数
// ____________________________________________________________
int __svc(0x0)  svc_service_add(int x, int y);          // SVC 0
int __svc(0x1)  svc_service_sub(int x, int y);          // SVC 1
int __svc(0x2)  svc_service_incr(int x);                // SVC 2
// int __svc(0x3)  svc_service_incr(int x);              // SVC 3
// ____________________________________________________________
__asm int svc_service_deincr(int x)
{
        svc 3
        bx lr
}


// 函数声明
// ____________________________________________________________
void svc_handler_main(unsigned int *svc_args);



// SVC处理 - 提取栈帧起始地址的汇编包装代码
// ____________________________________________________________
__asm void SVC_Handler(void)
{
        TST     LR, #4  ;// 检查 EXC_RETRUN 的第2位
        ITE     EQ
        MRSEQ   R0, MSP ;// 若为0，压栈使用MSP
        MRSNE   R0, PSP ;// 若为1，压栈使用PSP
        B       __cpp(svc_handler_main)
        ALIGN   4
}


// 获取SVC异常（特殊号码），并处理相关代码
// ____________________________________________________________
void svc_handler_main(unsigned int *svc_args)
{       https://www.infineon-autoeco.com/BBS/Detail/11817#
        // Stack frame contains:
        // r0, r1, r2, r3, r12, r14, the return address and xPSR
        // - Stacked R0  = svc_args[0]
        // - Stacked R1  = svc_args[1]
        // - Stacked R2  = svc_args[2]
        // - Stacked R3  = svc_args[3]
        // - Stacked R12 = svc_args[4]
        // - Stacked LR  = svc_args[5]
        // - Stacked PC  = svc_args[6]
        // - Stacked xPSR= svc_args[7]
        unsigned int svc_number;
        svc_number = ((char *)svc_args[6])[-2];
        switch(svc_number) {
        case 0:
                svc_args[0] = svc_args[0] + svc_args[1];
                break;
        case 1:
                svc_args[0] = svc_args[0] - svc_args[1];
                break;
        case 2:
                svc_args[0] = svc_args[0] + 1;
                break;
        case 3:
                svc_args[0] = svc_args[0] - 1;
                break;
        default:
                break;
        }
        
        return;
}


// MAIN
// 函数返回值存入（R0）中
// ____________________________________________________________
int main(void)
{
        int x, y, z;
        x = 3;
        y = 5;
        z = svc_service_add(x, y);
        
        x = 9;
        y = 5;
        z = svc_service_sub(x, y);
        
        x = 9;
        z = svc_service_incr(x);
        
        x = 9;
        z = svc_service_deincr(int x);
        while(1);
}




