/*******************************************************************************
        => ARM 指令编码
*******************************************************************************/
// ARM 指令集机器编码基本格式
//_____________________________________________________________
        条件码     指令码     目的寄存器    操作数1寄存器      操作数2
        31-28     27-20       19-16         15-12          11-0 



/*******************************************************************************
        => ARM-Cortex_M 指令编码
*******************************************************************************/
Encoding T1             All versions of the Thumb instruction set.
ADCS    <Rdn>, <Rm>     // Outside IT block
ADC<c>  <Rdn>, <Rm>     // Inside  IT block
// 此编码寄存器只能使用（R0 ~ R7）
|-----------------------------------------|
|   15:10   |   9:6   |   5:3   |   2:0   |
|   010000  |   0101  |   Rm    |   Rdn   |
|-----------------------------------------|



Encoding T2     Armv7-M
ADC{S}<c>.W     <Rd>, <Rn>, <Rm>{, <shift>}
|----------------------------------------+-------------------------------------------------|
|  15:11  |  10:9  |  8:5  |  4  |  3:0  |  15  |  14:12  |  11:8  |  7:6  |  5:4  |  3:0  |
|  11101  |   01   |  1010 |  S  |  Rn   |  0   |  imm3   |  Rd    |  imm2 |  type |  Rm   |
|----------------------------------------+-------------------------------------------------|
type    imm3:imm2       Instruction             See
 00      00000           Move                   MOV(register) 无位元移动
        not 00000        Logical Shift Left     LSL(immediate) 逻辑左移 0 - 31
-----------------------------------------------------------------------------
 01        -             Logical Shift Right    LSR(immediate) 逻辑右移 1 - 31
 -----------------------------------------------------------------------------
 10        -             Arithmetic Shift Right ASR(immediate) 算术右移 1 - 31
 -----------------------------------------------------------------------------
 11     00000          Rotate Right with Extend RRX(immediate) 右旋转   1 位 包含 C
      not 00000         Rotate Ritht            ROR(immediate) 右旋转   1 - 31
              
              
              
Encoding T1     All version of the Thumb instruction set.
B<c>    <label>
|-----------------------------|
|  15:12  |  11:8  |    7:0   |
|  1101   |  cond  |   imm8   |
|-----------------------------|
              
              

/*******************************************************************************
        => 堆栈
*******************************************************************************/
// 弄清堆栈寻址的SP的变化：
// LDMFA，LDMFD，STMFA，STMFD，LDMEA，LDMED，STMEA，STMED
//_____________________________________________________________
        IA： 每次传送后地址加 4
        IB： 每次传送前地址加 4
        DA： 每次传送后地址减 4
        DB： 每次传送前地址减 4
        FD： 满递减堆栈
        ED： 空递减堆栈
        FA： 满递增堆栈
        EA： 空递增堆栈



.equ num, 26
_start:
        ldr r0, =src
        ldr r1, =dst
        mov r2, #num
        ldr sp, =0x300000000
bcopy:
        movs r3, r2, lsr #2     //r3 = (r2 >> 2)
        beq cword               //如果 r3 = 0， 则执行
        stmfd sp!, {r4-r7}      //把{r4-r7}压入栈中保存
ocopy:
        ldmia r0!, {r4-r7}      //先加载，后移动指针
        stmia r1!, {r4-r7}      //先存储，后移动指针
        subs r3, r3, #1
        bne ocopy
        ldmfd sp!, {r4-r7}      //POP

cword:
        ands r2, r2, #3
        beq stop
wcopy:                          //复制最后2个字的数据
        ldr r3, [r0], #4
        str r3, [r1], #4
        subs r2, r2, #1
        bne wcopy
stop:
        mov r0, #0x18
        ldr r1, =0x20026
        swi 0x123456
 
src:
        .long 1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2
dst:
        .long 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
