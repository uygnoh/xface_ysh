//______________________________________________________________________________
//      => RISC-V
//______________________________________________________________________________
        上电 -> 配置全局指针GP -> 配置栈指针SP -> 
        -> 搬运data段数据 -> 清空bss段空间 -> 配置中断 -> 系统初始化 -> main()



        X2      // SP 栈指针
        X3      // GP 全局指针
        X4      // TP 线程指针
        BSS     // BSS段，  全局变量 / 静态变量， 默认初始值为 0
                // 数据存储器的对应区域全部清零
        DATA    // DATA段， 全局变量 / 静态变量， 有初始值
                // 将程序存储器的对应数据搬运至数据存储器的对应区域
        STACK   // STACK区，局部变量
// 为了保证有/无初始值的全局或静态量可以正常访问， 执行C语言前需要将全局指针gp指向链接脚本
// 定义的bss段，data段。 为了保证局部变量可以正常访问， 执行C语言前需要栈指针sp指向链接脚本
// 定义的堆栈区域。



//______________________________________________________________________________
//      => RISC-V
//______________________________________________________________________________
        .section        .init                   // 声明此处段名为（.init）
        .globl          _start                  // 声明_start是全局的
        .type           _start, @function       // 声明_start是函数


_start:
        .option         push                    // 保存编译设置
        .option         norelax                 // 禁用相对地址
                        nop                     // 空操作
                        la gp, __global_pointer$// 设置gp全局指针
                                                // __global_ponter$来源于链接脚本，与data段关联，指向全局变量
                                                
                                                
        .option         pop
                        la sp, _sp              // 设置sp堆栈指针， _sp来源于链接脚本， 指向局部变量
                        
                        
                        // 加载data段， 存储器需要初始化全局变量和静态变量
                        la      a0, _data_lma   // 程序存储器的data段的起始地址， 加载至 a0
                        la      a1, _data       // 数据存储器的data段的起始地址， 加载至 a1
                        la      a2, _edata      // 程序存储器的data段的结束地址， 加载至 a2
                        bgeu    a1, a2, 2f      // if (a1 >= a2) 则跳转到标号（2）
        1:
                        lw      t0, (a0)        // a0指向的地址 写入t0
                        sw      t0, (a1)        // t0的数据写入 a1指向的地址
                        addi    a0, a0, 4       //
                        addi    a1, a1, 4       //
                        bltu    a1, a2, 1b      // if (a1 < a2) 则跳转到标号（1）
        2:
                        // 清空BSS段
                        la      a0, __bss_start // BSS段起始地址
                        la      a1, _end        // BSS段结束地址
                        bgeu    a0, a1, 2f      // f (a1 >= a2) 则跳转到标号（2）
        1:      
                        sw      zero, (a0)
                        addi    a0, a0, 4
                        bltu    a0, a1, 1b      // if (a1 < a2) 则跳转到标号（1）
        2:       
                        call    system_init
                        call    main
