/*******************************************************************************
        => RISCV 汇编器
*******************************************************************************/
        .text                   // 进入代码段
        .align 2                // 后续代码按 2^2 字节对齐
        .globl main             // 声明全局符号“main”
        .section .rodata        // 进入只读数据段
        .balign 4               // 数据段按 4 字节对齐
        .string “Hello, %s!\n”  // 创建空字符结尾的字符串
        .string “world”         // 创建空字符结尾的字符串
        
        
       

/*******************************************************************************
        => RISCV函数调用中编程的约定
*******************************************************************************/
        a0 - a7   <===>    x10 - x17    // 用来向调用的函数传递参数
                                        // a0和a1寄存器常用于传递返回值
        ra        <===>    x1           // 用来保存返回时的返回地址值
        s0 - s11  <===>    x8 -  x9, x18 - x27
                                        // 用来作为保存寄存器
                                        // 保存原进程中的关键数据避免在
                                        // 函数调用过程中被破坏


        jar 指令意为“跳转并链接”
        // 通过jal指令，可以形成指向调用点的地址或链接，从而使函数能返回正确的地址
        // 跳转则会使PC跳转指向被调用函数的地址并且将链接得到的下一条指令的地址作为
        // 返回地址，保存在ra寄存器中。
        
        
        jr  指令
        // 能跳转到寄存器值所对应的地址空间，我们使用这条指令跳转到ra寄存器保存的地
        // 址值以实现函数的返回。 在汇编用法中，有用ret指令来指代 jr ra 操作

        
                        
// 伪指令 等价 指令
//_____________________________________________________________

        // 跳转到“offset”指定位置，返回地址保存在“x1(ra)”
        jal offset      // jal x1, offset


        // 跳转到“rs”中值所指定的位置，返回地址保存在“x1(ra)”
        jalr rs         // jalr x1, 0(rs)


        // 跳转到“offset”指定位置，不保存返回地址
        j offset        // jal x0, offset


        // 跳转到“rs”指定位置，不保存返回地址
        jr rs           // jalr x0, 0(rs)


        // 长跳转调用函数(需要2条指令)
        call offset     // auipc x1, offset[31:12] + offset[11]
                        // jalr  x1, offset[11:0](x1)


        // 长跳转尾调用函数(需要2条指令)
        tail offset     // auipc x6, offset[31:12] + offset[11]
                        // jalr  x0, offset[11:0](x6)

                 
        // 从callee(被叫方)返回
        ret             // jalr x0, 0(x1)



// RISC-V 函数调用
//_____________________________________________________________
        1. 发生函数调用时，在执行函数功能前，先将这次调用中需要用到的参数保存，方便取用
        2. 将控制权移交给这次调用的功能函数
        3. 根据情况为函数申请一定的本地存储空间，以满足函数执行过程中需要的存储需求
        4. 执行该函数的功能
        5. 在函数执行完成后，将得到的结果数据保存好，便于主进程来获取，同时还原函数执行
           过程中使用到的寄存器值，释放函数执行过程中使用到的寄存器值，释放分配给函数的
           本地存储空间
        6. 将控制权转移给原进程
        
        
        
// 实现被调用函数的编程约定
//_____________________________________________________________
        def function()
        {
                //函数起始部分(Prologue)
                1 减少“sp”的值，根据本函数中使用“saved”寄存器的情况
                  以及“local”变量的多少开辟栈空间
                2 将“saved”寄存器的值保存到栈中
                3 如果函数中还会调用其它的函数，则将“ra”寄存器的值保存到栈中
                5 函数执行体。
                //___________________//
                //函数退出部分(Epilogue)
                1 从栈中恢复“saved”寄存器
                2 如果需要的话，从栈中恢复“ra”寄存器
                3 增加“sp”的值，恢复到进入本函数之前的状态
                4 调用“ret”返回
        }


// RISIC-V 栈的使用
//_____________________________________________________________
        栈是一种后入先出（LIFO）的队列结构
        通过压入和弹出操作将数据放入或移出栈
        // 栈也是存储系统的一部分，因此需要一个指向它的寄存来
        // 保存它的基地址，sp寄存器（x2）就RISC-V中的栈指针寄存器



LEAF:   addi    sp, sp, -8      // 调整栈指针
        sw      s1, 4(sp)       // 保存s1寄存器的内容到栈中
        sw      s0, 0(sp)       // 保存s0寄存器的内容到栈中
        
        add     s0, a0, a1
        add     s1, a2, a3
        sub     a0, s0, s1
        
        lw      s0, 0(sp)       // 恢复s0寄存器中的内容
        lw      s1, 4(sp)       // 恢复s1寄存器中的内容
        addi    sp, sp, 8       // 调整栈指针
        jr      ra              

// 函数的递归调用
//_____________________________________________________________
        int sum_square(int x, int y)
        {
                return (mult(x, x) + y);
        }
        // 需要在调用mult函数前，将存放在ra寄存中的sum_square函数的返回地址值保存起来
        
        
// 函数调用规范
//_____________________________________________________________ 
        1 在函数调用关系中，我们通常将发发起调用的函数称为调用函数（caller）
          将被调用函数称为被调用函数（callee）
        2 
        
        
        
/*******************************************************************************
        => C函数中嵌入RISC-V汇编
*******************************************************************************/
        asm [volatile](
                "汇编指令"
                :输出操作数列表(可选)
                :输入操作数列表(可选)
                :可能影响的寄存器或者存储器(可选)
        );
        0       // volatile加入这个关键字，告诉编译器不对它进行优化。
        1       // 汇编指令用双引号括起来，多条指令之间有“;”或者“\n”分隔
        2       // “输出操作数列表”和“输入操作数列表”用于将需要操作的“C变量”
                和汇编指令的操作数对应起来，多个操作数之间有“,”分隔。
        3       // “可能影响的寄存器或者存储器”用于告诉编译器当前嵌入的汇编
                语句可能修改的寄存器或者内存，方便编译器执行优化。
    
    
    
int foo(int a, int b)
{
    int c;
    asm volatile (                      // 加入“volatile”，不进行优化
        "add %[sum], %[add1], %add2]"   // 此处不指定具体的寄存器，让编译自动分配寄存器
        :[sum]"=r"(c)                   // 输出操作数(sum=c)
        :[add1]"r"(a), [add2]"r"(b)     // 输入操作数(add1=a, add2=b)
    );                                  // "r"表示和寄存对应 
    return c;
}


// 简化写法->
//_____________________________________________________________
int foo(int a, int b)
{
        int c;
        asm volatile (
                "add %0, %1, %2"
                :"=r"(c)
                :"r"(a), "r"(b)
        );
        return c;
}
