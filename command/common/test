###########################################################
###  [  ], [[  ]]
###########################################################
% && || 运算符
% 判断/root如果文件存在且为目录则为真， 则打印“yes”， 否则打印“no”
[ -d /root ] && echo "yes" || echo "no"


[ 文件1 -nt 文件2 ]     文件1 在修改时间上新于文件2
[ 文件1 -ot 文件2 ]     文件1 比文件2 更旧
[ 文件1 -ef 文件2 ]     文件1 和文件2 拥有相同的设备编号与 inode 编号



###########################################################
##  数值测试
###########################################################
-eq 	    等于则为真; equal的缩写
-ne 	    不等于则为真; not equal的缩写
-gt 	    大于则为真;   greater than的缩写
-ge 	    大于等于则为真;  greater&equal的缩写
-lt 	    小于则为真;       lower than的缩写
-le 	    小于等于则为真;    lower&equal的缩写



###########################################################
###  字符串测试
###########################################################
= 	        等于则为真
!= 	        不相等则为真
-z 字符串 	字符串的长度为零则为真
-n 字符串 	字符串的长度不为零则为真



###########################################################
###  文件测试
###########################################################
-e 文件名 	如果文件存在则为真
-r 文件名 	如果文件存在且可读则为真
-w 文件名 	如果文件存在且可写则为真
-x 文件名 	如果文件存在且可执行则为真
-s 文件名 	如果文件存在且至少有一个字符则为真
-d 文件名 	如果文件存在且为目录则为真
-f 文件名 	如果文件存在且为普通文件则为真
-c 文件名 	如果文件存在且为字符型特殊文件则为真
-b 文件名 	如果文件存在且为块特殊文件则为真
```



###########################################################
##  多重条件判断
###########################################################
[ 判断1 -a 判断2 ]      逻辑与
[ 判断1 -o 判断2 ]      逻辑或
[ !判断 ]              逻辑非



###########################################################
###  环境变量	
###########################################################
变量	                    说明
$0                      脚本名称
$n 	                    传给脚本/函数的第n个参数
$$ 	                    脚本的PID
$! 	                    上一个被执行的命令的PID(后台运行的进程)
$? 	                    上一个命令的退出状态(管道命令使用${PIPESTATUS})
$# 	                    传递给脚本/函数的参数个数
$@ 	                    传递给脚本/函数的所有参数(识别每个参数)
$* 	                    传递给脚本/函数的所有参数(把所有参数当成一个字符串)
___________________________________________________________
% 提示,使用$*很少是正确的选择。
$@能够处理空格参数，而且参数间的空格也能正确的处理。
使用$@时应该用双引号括起来，像”$@”这样

>>>
三个小于号(here-strings)。Here-字串和Here-document类似，
here-strings语法：command [args] <<<["]$word["]；
$word会展开并作为command的stdin。



###########################################################
###  单词边界匹配
###########################################################
\<...\>
词界符(word boundary)。
这个是用在正则表达式中的一个特殊分隔符，用来标记单词的分界。
比如：the会匹配there，another，them等等，
如果仅仅要匹配the，就可以使用这个词界符，\<the\>就只能匹配the了。




