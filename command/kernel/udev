###########################################################
###  udev
###########################################################
% udev是linux kernel的设备管理器
% 在最新的内核版本中kernel_3.10中udev已经代替了以前devfs、hotplug等功能，
% 意味着它要处理添加/删除硬件时，所有的用户空间行为。

% udev由三个部分组成：
libudev函数库:     /usr/include/libudev.h
udevd守护进程:      现在已经集成到systemd中，可以使用systemctl命令查看。
udevadm管理命令:   /usr/bin/udevadm



###########################################################
###  udevadm 命令
###########################################################
% udevadm info --query=all --name=sda 查询sda的所有信息
% ysh@localhost:~$ udevadm info --query=path --name=sda
info        查询sysfs或者udev的数据库
trigger     从内核请求events
settle      查看udev事件队列，如果所有的events已处理则退出
control     修改udev后台的内部状态信息
monitor     监控内核的uevents
hwdb        处理硬件数据库索引
test



###########################################################
###  udev 规则如何组织
###########################################################
% udev 规则是定义在一个以 .rules 为扩展名的文件中。
% 那些文件主要放在两个位置：
/usr/lib/udev/rules.d，这个目录用于存放系统安装的规则；
/etc/udev/rules.d/     这个目录是保留给自定义规则的。
% 定义那些规则的文件的命名惯例是使用一个数字作为前缀（比如，50-udev-default.rules），
% 并且以它们在目录中的词汇顺序进行处理的。在 /etc/udev/rules.d 中安装的文件，
% 会覆盖安装在系统默认路径中的同名文件。



###########################################################
###  udev 规则语法
###########################################################
% 如果你理解了 udev 规则的行为逻辑，它的语法并不复杂。
% 一个规则由两个主要的节构成：
match  部分，它使用一系列用逗号分隔的键定义了规则应用的条件，
action 部分，是当条件满足时，我们执行一些动作。

% udev测试案例
讲解可能的选项的最好方法莫过于配置一个真实的案例，
因此，我们去定义一个规则作为演示，当鼠标被连接时禁用触摸板。
显然，在该规则定义中提供的属性将反映我的硬件。
%
我们将在 /etc/udev/rules.d/99-togglemouse.rules 文件中用我们喜欢的文本编辑器来写我们的规则。
一条规则定义允许跨多个行，但是，如果是这种情况，必须在一个换行字符之前使用一个反斜线（\）表示行的延续，
就和 shell 脚本一样。这是我们的规则：
    ACTION=="add" \
    , ATTRS{idProduct}=="c52f" \
    , ATTRS{idVendor}=="046d" \
    , ENV{DISPLAY}=":0" \
    , ENV{XAUTHORITY}="/run/user/1000/gdm/Xauthority" \
    , RUN+="/usr/bin/xinput --disable 16"

% 我们来分析一下这个规则 
操作符
% 首先，对已经使用以及将要使用的操作符解释如下： == 和 != 操作符
== 是相等操作符，而 != 是不等于操作符。
通过使用它们，我们可以确认规则上应用的键是否匹配各自的值。


% 分配操作符 = 和 :=
=  赋值操作符，是用于为一个键赋值。当我们想要赋值，并且想确保它不会被其它规则所覆盖，
:= 操作符来代替，使用这个操作符分配的值，它就不能被改变。

+= 和 -= 操作符
+= 和 -= 操作符各自用于从一个指定的键定义的值列表中增加或者移除一个值。


% 我们使用的键
现在，来分析一下在这个规则中我们使用的键。
首先，我们有一个 ACTION 键：通过使用它，当在一个设备上发生了特定的事件，
我们将指定我们要应用的规则的具体内容。有效的值有 add、remove  以及 change。 
然后，我们使用 ATTRS 关键字去指定一个属性去匹配。
我们可以使用 udevadm info 命令去列出一个设备属性，提供它的名字或者 sysfs 路径即可：

% 在上面我们定义的规则中，我们使用了一个父级设备属性：idProduct 和 idVendor。 






