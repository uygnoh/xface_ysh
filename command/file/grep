###########################################################
###  grep
###########################################################
-v              显示所有不包含模式的行
-n              显示时每行前面显示行号
-i              字母比较时忽略字母的大小写
-o              仅显示匹配到的字符串本身
-q              静默模式（不输出任何信息）
--color=auto    搜出关键字并用顔色显示出来

grep "^$\|^#" /etc/passwd       % 列出 以空行或以“#”开头的行（引号中间没有空格）
grep -n --color "root" /etc/passwd
grep -n --color "^root" /etc/passwd
grep -n --coler "bash$" /etc/passwd
grep -v "#" /usr/local/conf.default | grep -v "^$"
egrep --color "([0-9]{1,3}\.){3}[0-9]{1,3}$" ip.conf



###########################################################
###  grep/egrep/fgrep
###########################################################
### egrep 使用扩展正则表达式ERE描述模式,在指定模式方面比grep更灵活
### fgrep 快速搜索指定字符串,按字符串搜索而不是按模式搜索。
### 查PCRE语法:man pcresyntax
-F, --fixed-strings		Fixed strings (instead of regular expressions)
-G, --basic-regexp		Basic regular expression (BRE)
-E, --extended-regexp 	Extended regular expression (ERE)
-P, --perl-regexp		Perl-compatible regular expression (PCRE)




###########################################################
# 正则表达式 (RE)
###########################################################


###  特殊字符(元字符)
```note
% 正则表达式的特殊字符(元字符), 6个元字符, 其它字符与其自身匹配
  .    *    [    \    ^    $

% 正则表达式的转义
% 用反斜线可以取消特殊字符的特殊含义。
  如:正则表达end\.只与字符串end.匹配

% 单字符正则表达式
% 长的正则表达式由单字符正则表达式构成的, 非特殊字符与其自身匹配
如:正则表达式a与字符串a匹配, b与b,/与/
```



### 转义字符(\)
```note
\. \* \$ \^ \[ \\  ;%正则表达式\*与字符串*匹配,与字符串\*不匹配
% 转义字符后除以上六种之外的不该出现其他字符,例如:不该出现\u,这样
% 的组合被视为undefined(未定义的),后出的软件有可能会有特殊的解释
% 圆点(·),匹配任意单字符
```


### 定义集合(1)
```note
% 单字符正则表达式:定义集合(1)
在一对方括号之间的字符为集合的内容,
如:单字符正则表达式[abcd]与a或b,c,d匹配
圆点,星号,反斜线在方括号内时,代表它们自己
如:[\*.]可匹配3个单字符
```


#### 定义集合(2)
```note
% 单字符正则表达式:定义集合(2)
用减号-定义一个区间
如[a-d] [A-Z] [a-zA-Z0-9]
[][] 集合含左右中括号两个字符
%减号在最后,则失去表示区间的意义,[ad-]只与3个字符匹配

% 用^表示补集
% ^在开头,则表示与集合内字符之外的任意字符匹配
如:[^a-z]匹配任一非小写字母
   [^][]匹配任一非中括号字符
%^不在开头,则失去其表示补集的意义
如:[a-z^]能匹配27个单字符
```



### 表达式的组合(1)
```note
% 单字符正则表达式的组合(1)
串结, 如abc, [A-Z].[0-9]·

% 星号(*)
单字符正则表达式后跟*,匹配此单字符正则表达式的0次或任意多次出现
例:正则表达式12*4
与字符串1234不匹配,与1224,12224,14匹配
% 例: 正则表达式[A-Z][0-9]*
此例中*作用的单字符正则表式为[0-9],代表
    [A-Z]
    [A-Z][0-9]
    [A-Z][0-9][0-9]
    [A-Z][0-9][0-9][0-9],等等
与A,A1,C45,D768匹配,与b64512,T56t不匹配
```



### 表达式的组合(2)
```note
% 单字符正则表达式的组合(2)
例:正则表达式[Cc]hapter *[1-4]
在*号前有一个空格,允许数字1-4之前有多个或者0个空格。可匹配Chapter2, chapter 3等等。

例:正则表达式a\[i] *= *b\[j] *\* *c\[k]
匹配字符串a[i]=b[j]*c[k],容许等号和星号两侧有空格

例:在vi中使用
:1,$s/[0-9]*/xx/g
```



### 锚点:$与^
```note
$ 在尾部时有特殊意义,否则与其自身匹配
例:123$ 匹配文件中行尾的123,不在行尾的123字符不匹配
例:$123与字符串$123匹配
例:.$ 匹配行尾的任意字符

%_________________________________________________
^ 在首部时有特殊意义,否则与其自身匹配

例:^printf匹配行首的printf字符串,不在行首的printf串不匹配

例:Hel^lo与字符串Hel^lo匹配

例:在vi中使用 :10,50s/^//g
删除10-50行的每行行首的4个空格
```



# 正则表达式扩展
```note
% ERE:扩展的正则表达式(ERE)
% PCRE: Perl-compatible regular expression
% 对基本正则表达式( BRE )进行了改进:

% 表示分组:圆括号()
% 表示逻辑运算:表示逻辑“或” 的符号 |
  (xy)* 可匹配空字符串,xy,xyxy,xyxyxy
  (pink|green) 与pink或green匹配
  
% 重复次数定义:与星号地位类似的+和?,限定重复次数 \{m,n\}
*号表示它左边的单字符正则表达式的0次或多次重复
+号表示1次或多次: [0-9]+ 匹配长度至少为1数字串
?表示0次或一次: a?,匹配零个或一个a

% 限定重复次数 \{m,n\},例如:[1-9][0-9]\{6,8\} 7-9位数字,首位非0

% 命名的预定义集合
[[:xdigit:]]十六进制数字
\d数字
\D非数字
比^和$更灵活的锚点定义
例如:寻找一个数字串,但是要求这个数字串不许出现在“合计”两个字之后
```



# grep

% grep在文件中查找字符串, grep(Global regular expression print)
% 语法: grep 模式 文件名列表
举例
grep O_RDWR *.h
ps -ef | grep liang
ls -l / | grep '^d' | wc –l
grep '[0-9]*' shudu.c
grep '[0-9][0-9]*' shudu.c


% egrep 使用扩展正则表达式ERE描述模式,在指定模式方面比grep更灵活, 
% fgrep 快速搜索指定字符串,按字符串搜索而不是按模式搜索。
% grep选项, 查PCRE语法:man pcresyntax
-F, --fixed-strings  Fixed strings (instead of regular expressions)
-G, --basic-regexp   Basic regular expression (BRE)
-E, --extended-r     egexp Extended regular expression (ERE)
-P, --perl-regexp    Perl-compatible regular expression (PCRE)

% grep/fgrep/egrep选项
-n 显示时每行前面显示行号
-v 显示所有不包含模式的行
-i 字母比较时忽略字母的大小写
例:grep -n main *.c
查找含有正则表达式main的行,并打印行号
当文件数超过一个时,除了输出行号,还输出文件名

例: grep -v '[Dd]isable' dev.stat>dev.active
取消文件中所有含有指定模式的行,生成新文件

例:grep -i richard telnos
在文件中检索字符串richard,不顾字母的大小写


