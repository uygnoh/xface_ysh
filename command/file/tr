###########################################################
###  tr
###########################################################
tr -c -d -s ["string1_to_translate_from"]["string2_to_translate_to"] < input-file
tr [-cdst][--help][--version][第一字符集][第二字符集] 
-c 用字符串1中字符集的补集替换此字符集，要求字符集为ASCII。
-d 删除字符串1中所有输入字符。
-s 删除所有重复出现字符序列，只保留第一个；即将重复出现字符串压缩为一个字符串
%  input-file是转换文件名。虽然可以使用其他格式输入，但这种格式最常用



###########################################################
###  字符替换1
###########################################################
% 实例: 将文件file中出现的"abc"替换为"xyz"
% 【注意】这里，凡是在file中出现的"a"字母，都替换成"x"字母，
% "b"字母替换为"y"字母，"c"字母替换为"z"字母。
%  而不是将字符串"abc"替换为字符串"xyz"。 
# cat file | tr "abc" "xyz" > new_file
      
% 使用tr命令“统一”字母大小写
# cat file | tr [a-z] [A-Z] > new_file          （小写 --> 大写）
# cat file | tr [A-Z] [a-z] > new_file          （大写 --> 小写）

% 把文件中的数字0-9替换为a-j
# cat file | tr [0-9] [a-j] > new_file

% 用空格符\040替换制表符\011
# cat file | tr -s "\011" "\040" >new_file
 
%、把路径变量中的冒号":"，替换成换行符"\n"
# echo $PATH | tr -s ":" "\n"

% 替换passwd文件中所有冒号，代之以tab键，可以增加可读性
tr -s "[:]" "[\011]" < /etc/passwd 或 tr -s "[:]" "[\t]" < /etc/passwd

% 使路径具有可读性
% 如果用 echo $PATH 或者 echo $LD_LIBRARY_PATH 等类似的命令来显示路径信息的话，
% 我们看到的将会是一大堆用冒号连接在一起的路径， tr命令可以把这些冒号转换为回车，
% 这样，这些路径就具有很好的可读性了
echo $PATH | tr ":" "\n" 



###########################################################
###  字符替换 2
###########################################################
% 这便将每个 "{"（左大括号）转换成 "("（左小括号），
% 并将每个   "}"（右大括号）转换成 ")"（右小括号）,所有其他的字符都保持不变
% 若要将大括号转换为小括号，请输入：
tr '{}' '()' <textfile >newfile

% 这便将每个 {（左大括号）转换成 [（左方括号），
% 并将每个   }（右大括号）转换成 ]（右方括号）。
% 左方括号必须与一个 "\"（反斜扛）转义字符一起输入。
% 若要将大括号转换成方括号，请输入：
tr '{}' '\[]' <textfile >newfile

% 若要将小写字符转换成大写，请输入：
tr 'a-z' 'A-Z' < textfile > newfile

% 这便将每一序列的字符（小、大写字母除外）都转换成单个换行符。
% *（星号）可以使 tr 命令重复换行符足够多次以使第二个字符串与第一个字符串一样长。
% 若要创建一个文件中的单词列表，请输入：
tr -cs '[:lower:][:upper:]' '[\n*]' < textfile > newfile

若要从某个文件中删除所有空字符，请输入：
% tr -d '\0' < textfile > newfile

% 若要用单独的换行替换每一序列的一个或多个换行，请输入：
tr -s '\n' < textfile > newfile
或
tr -s '\012' < textfile > newfile

% 若要以“？”（问号）替换每个非显示字符（有效控制字符除外），请输入：
tr -c '[:print:][:cntrl:]' '[?*]' < textfile > newfile

% 这便对不同语言环境中创建的文件进行扫描，以查找当前语言环境下不能显示的字符。
% 要以单个“#”字符替换 <space> 字符类中的每个字符序列，请输入：
tr -s '[:space:]' '[#*]'



###########################################################
###  字符删除
###########################################################
% 删除文件file中出现的"Snail"字符
% 【注意】这里，凡是在file文件中出现的'S','n','a','i','l'字符
% 都会被删除！而不是紧紧删除出现的"Snail”字符串。
# cat file | tr -d "Snail" > new_file

% 删除文件file中出现的换行'\n'、制表'\t'字符
% 不可见字符都得用转义字符来表示的，这个都是统一的。
# cat file | tr -d "\n\t" > new_file

% 删除“连续着的”重复字母，只保留第一个
# cat file | tr -s [a-zA-Z] > new_file



###########################################################
###  特殊字符删除
###########################################################
% 删除空行
# cat file | tr -s "\n" > new_file
 
% 删除Windows文件“造成”的'^M'字符
% 【注意】这里-s后面是两个参数"\r"和"\n"，用后者替换前者
# cat file | tr -d "\r" > new_file
或者
# cat file | tr -s "\r" "\n" > new_file



###########################################################
###  vim使用
###########################################################
% 可以在vi内使用所有这些命令
% 只要记住, 在tr命令前要加上您希望处理的行范围和感叹号"!"
# :1,$!tr -d '\t'

% UNIX, Mac, DOS文本文件相互转换
Mac  -> UNIX：
    % tr "\r" "\n"<macfile  >unixfile   
UNIX -> Mac： 
    % tr "\n" "\r"<unixfile >macfile 
DOS -> UNIX： tr -d "\r"<dosfile >unixfile
UNIX -> DOS：在这种情况下，需要用awk，
因为tr不能插入两个字符来替换一个字符要使用的 awk 命令为 
% awk '{ print $0"\r" }'<unixfile > dosfile



###########################################################
###  tr 描述
###########################################################
tr 命令从标准输入删除或替换字符，并将结果写入标准输出。
根据由 String1 和 String2 变量指定的字符串以及指定的标志，
tr 命令可执行三种操作。
1 转换字符 
如果 String1 和 String2 两者都已指定，
但 -d 标志没有指定，
那么 tr 命令就会从标准输入中将 String1 中所包含的每一个字符都替换成 String2 中相同位置上的字符。

2 使用 -d 标志删除字符
如果 -d 标志已经指定，那么 tr 命令就会从标准输入中删除 String1 中包含的每一个字符。

3 用 -s 标志除去序列 
如果 -s 标志已经指定，
那么 tr 命令就会除去包含在 String1 或 String2 中的任何字符串系列中的除第一个字符以外的所有字符。
对于包含在 String1 中的每一个字符，tr 命令会从标准输出中除去除第一个出现的字符以外的所有字符。
对于包含在 String2 中的每一个字符，tr 命令除去标准输出的字符序列中除第一个出现的字符以外的所有字符。



###########################################################
###  字符范围
###########################################################
% 指定字符串1或字符串2的内容时，只能使用单字符或字符串范围或列表。
[a-z]           a-z内的字符组成的字符串。
[A-Z]           A-Z内的字符组成的字符串。
[0-9]           数字串。
\octal          一个三位的八进制数，对应有效的ASCII字符。
[O*n]           表示字符O重复出现指定次数n。因此[O*2]匹配OO的字符串。

% tr中特定控制字符的不同表达方式, 速记符含义八进制方式
\a Ctrl-G       铃声\007
\b Ctrl-H       退格符\010
\f Ctrl-L       走行换页\014
\n Ctrl-J       新行\012
\r Ctrl-M       回车\015
\t Ctrl-I       tab键\011
\v Ctrl-X       \030
% ==========================
[:alnum:]       所有字母字符与数字
[:alpha:]       所有字母字符
[:blank:]       所有水平空格
[:cntrl:]       所有控制字符
[:digit:]       所有数字
[:graph:]       所有可打印的字符(不包含空格符)
[:lower:]       所有小写字母
[:print:]       所有可打印的字符(包含空格符)
[:punct:]       所有标点字符
[:space:]       所有水平与垂直空格符
[:upper:]       所有大写字母
[:xdigit:]      所有 16 进位制的数字
[=CHAR=]        % 所有符合指定的字符(等号里的 CHAR，代表你可自订的字符)
大小写转换，也可以通过[:lower][:upper]参数来实现。例如使用如下命令：
% cat testfile |tr [:lower:] [:upper:] 





