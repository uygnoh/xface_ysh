###########################################################
### % APT <===> Advanced Package Tool
###########################################################
% Debian 作为 Ubuntu、Linux Mint 和 elementary OS 等 Linux 操作系统的母板，
其具有强健的「包管理」系统，它的每个组件和应用程序都内置在系统中安装的软件包中。
Debian 使用一套名为 Advanced Packaging Tool（APT）的工具来管理这种包系统，
不过请不要把它与 apt 命令混淆，它们之间是其实不是同一个东西。

在基于 Debian 的 Linux 发行版中，有各种工具可以与 APT 进行交互，
以方便用户安装、删除和管理的软件包。apt-get 便是其中一款广受欢迎的命令行工具，
另外一款较为流行的是 Aptitude 这一命令行与 GUI 兼顾的小工具。

如果你已阅读过我们的 apt-get 命令指南，可能已经遇到过许多类似的命令，
如apt-cache、apt-config 等。如你所见，这些命令都比较低级又包含众多功能，
普通的 Linux 用户也许永远都不会使用到。换种说法来说，就是最常用的 Linux
包管理命令都被分散在了 apt-get、apt-cache 和 apt-config 这三条命令当中。

% apt 命令的引入就是为了解决命令过于分散的问题，
它包括了 apt-get 命令出现以来使用最广泛的功能选项，
以及 apt-cache 和 apt-config 命令中很少用到的功能。

在使用 apt 命令时，用户不必再由 apt-get 转到 apt-cache 或 apt-config，
而且 apt 更加结构化，并为用户提供了管理软件包所需的必要选项。

%简单来说就是：apt = apt-get、apt-cache 和 apt-config 中最常用命令选项的集合。

% apt与apt-get之间的区别
通过 apt 命令，用户可以在同一地方集中得到所有必要的工具，
apt 的主要目的是提供一种以「让终端用户满意」的方式来处理 Linux 软件包的有效方式。
apt 具有更精减但足够的命令选项，而且参数选项的组织方式更为有效。
除此之外，它默认启用的几个特性对最终用户也非常有帮助。
例如，可以在使用 apt 命令安装或删除程序时看到进度条。



###########################################################
### % apt apt-get
###########################################################
% /etc/apt/sources.list                   软件源设置	


%apt 命令                  取代的命令             命令的功能
apt install             apt-get install         安装软件包
apt remove              apt-get remove          移除软件包
apt purge               apt-get purge           移除软件包及配置文件
apt update              apt-get update          刷新存储库索引
apt upgrade             apt-get upgrade         升级所有可升级的软件包
apt autoremove          apt-get autoremove      自动删除不需要的包
apt full-upgrade        apt-get dist-upgrade    在升级软件包时自动处理依赖关系
apt search              apt-cache search        搜索应用程序
apt show                apt-cache show          显示安装细节

apt-get --reinstall install foo                 重新安装软件包
apt-get --purge remove foo                      卸载软件，同时清除该软件配置文件	
apt-get autoclean                               删除不需要的包	
apt-get clean                                   删除所有已下载的包	
apt-get build-dep foo                           自动安装编译一软件所需要的包




###########################################################
### % dpkg <===> package manager for Debian
###########################################################
dpkg --root=<directory> -i xx.deb       安装DEB包（指定根目录）
dpkg -i xx.deb                          安装DEB包	
dpkg -I xx.deb                          显示DEB包信息	
dpkg -c xx.deb                          显示DEB包文件列表		
dpkg -l                                 显示所有已安装软件	
dpkg -s foo                             显示已安装包信息	
dpkg -L foo                             显示已安装包文件列表	
dpkg -r foo                             卸载包	
dpkg -P foo                             卸载软件包并删除其配置文件	
dpkg-reconfigure foo                    重新配置已安装程序
dpkg -i <package>                       安装一个在本地文件系统上存在的 debian软件包
dpkg -r <package>                       移出一个已经安装的软件包
dpkg -P <package>                       移出一个已安装的软件包及配置文件
dpkg -L <package>                       列出安装软件包的清单
dpkg -s <package>                       显示软件包的安装状态



###########################################################
### % apg-get update 刷新软件源
###########################################################
使用 apt-get update 命令会去扫描每一人软件源服务器，并为该服务器所具有的
软件包资源建立索引文件，存放在本地的 /var/lib/apt/lists/ 目录中。



###########################################################
### % 修复软件包依赖关系
###########################################################
作为命令的组合，apt-get check用于检查软件包依赖关系，而apt-get -f install用于修复依赖关系
apt-get check
apt-get -f install



###########################################################
### % 卸载
###########################################################
apt-get --reinstall install <package>   重新安装软件包
apt-get remove <package>                不完全卸载
apt-get --purge remove <package>        完全卸载



###########################################################
### % 清理软件包缓冲区
###########################################################
/var/cache/apt/archives/                清理软件包缓冲区     
apt-get clean                           清理软件包缓冲区所有软件包
apt-get autoclean                       清理软件包缓冲区多余的软件包，保留最新版。



###########################################################
### % 查询软件包描述信息
###########################################################
apt-cache show <package>                获取指定软件包详细信息
apt-cache pilicy <package>              获取指定软件包安装状态
apt-cache depends <package>             查询软件包依赖那些软件包
apt-cache rdepends <package>            查询软件包被那些软件包依赖



###########################################################
### % 软件源
###########################################################
根据软件包的开发组织对该软件包的支持程度，以及遵从的开源程度，划分为如下4类：
1 核心(Main),官方维护的开源软件，是由Ubuntu官方完全支持的软件，包括大多数
  流行的，稳定的开源软件，是Ubuntu默认安装的基本软件包。
2 公共(Universe),社区维护的开源软件包，是由Ubuntu社区的计算机爱好者维护的软件，
  这些软件包没有安全升级的保障，用户在使用，需要考虑这些软件包存在的不稳定性。
3 受限(Restriected),官方维护的非开源软件，是专供特殊用途。而且没用自由软件版权，
  不能直接修改软件，但是依然被Ubuntu团队支持的软件。
4 多元化(Multiverse),非Ubuntu官方维护的非开源软件，用户在使用这些软件包时，
  需要特别注意版权问题。


###########################################################
### % APT工作原理
###########################################################
  ubuntu采用集中式的软件仓库机制，将各式各样的软件包分门加别类在存放在软件仓库中，
  进行有效的组织和管理。
  然后，将软件仓库置于许许多多的镜像服务器中，并保持一致。
  因此，对于用户，这些镜像服务器就是它们的软件源(reposity)

  在ubuntu系统中，使用软件源配置文件 /etc/apt/sources.list 
  列出最合适访问的镜像站点地址。

  软件源配置文件只是告知ubuntu系统可以访问的镜像站点地址。
  但是那些镜像站点有什么软件资源并不清楚。
  若是每安装一个软件包，就在服务器上寻找一遍，效率是很低的。
  因而，就有必要为这样软件源列出清单(建立索引文件)，
  以便本地主机查询，这就是APT 软件包管理原理。







