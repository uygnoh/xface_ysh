###########################################################
### % FVWM常用命令
###########################################################
# 1 % Read file. 插入另外一个文件file的内容。
# 如果你会C语言，你就知道这个语句相当于 #include . 
# 当你的配置文件在某一方面有很长内容时，比如我的配置文件里有大量stroke，
# 你就可以把这些都写到另一个文件里，这样使主配置文件容易修改。


# 2 % Exec app. 启动一个shell，并且在里面执行"app"命令。
# 这时用菜单和按钮来启动程序时经常用到的命令。
# 如果你要启动一个X程序最好同时使用 exec, 比如
# % Exec exec rxvt
# 这样shell会执行"exec rxvt", 用rxvt替代自己的正文段，
# 这样才不会出现很多shell在那里等待X程序返回。


# 3 % Module FvwmXxx. 启动一个叫做 FvwmXxx 的模块。
# 一个模块是一个程序，它直接通过管道与Fvwm通信，所以必须从Fvwm fork() 出来，
# 而不能从一个 xterm 独立启动。模块可以无限制的扩展Fvwm的功能，只要 Xlib 允许。


# 4 % ImagePath path. 指定一个路径，
# 在配置文件里要用到的图标等文件就会到这个路径里去寻找。


# 5 % Move, Raise, Lower, Resize, ... 这些都是常用的操纵窗口的命令。


# 6 % Close, Delete, Destroy, Iconify, Maximize, WindowShade. 
# 关闭窗口，图标化窗口，最大化窗口，shade 化窗口. 你会发现Xwindow关闭窗口的
# 方式有很多种，其中 Close 是最文明的一种，这会发给窗口一个消息让它收拾干净然后退出。
# Destroy 是立即杀死这个窗口，跟 xkill 的功能一样。Delete介于两者之间，先礼后兵，
# 如果窗口不知道怎么收拾干净，那么就强行杀死它。


# 7 % OpaqueMoveSize x. 如果一个窗口移动时显示内容，那么它必需占屏幕面积的 x%.


# 8 % MoveToDesk, MoveToPage. 可以把任何窗口移动到指定的桌面和页面。


# 9 % SnapAttraction. 设定在什么距离以内，满足什么条件的窗口就被吸附在一起


# 10 % WarpToWindow x[p] y[p]. 让鼠标移动到窗口范围以内。x,y是在窗口内的坐标，
# 用百分比表示。后面如果有后缀"p", 就用像素来表示。


# 11 % IgnoreModifiers. 你可以忽略某些键盘控制键。这将影响到你的鼠标和键盘热键定义。
# 详细情况见鼠标和键盘一节。


# 12 % DesktopName desk name. 定义第desk号桌面的名字叫 name.


# 13 % Scroll. 移动你在桌面上的viewport,这样你可以把桌面当成一个整体来浏览，看到很大的范围


# 14 % Nop. 不操作，在有些时候需要用它来占位，下面我们会遇到这样的例子。


# 15 % PipeRead. 从一个外部命令得到输入。这可以用来根据你的系统构造许多非常高级的控制方式。
# 其中一种叫做“菜单式文件管理器”。我们在菜单一节会遇到这个用法。


# 16 % SetEnv. 设置FVWM的环境变量



###########################################################
### % 条件命令
###########################################################
# % All, Any, Cond, Current, Direction, Next, None, Pick, WindowId, ... 
# 这些命令是条件选择窗口的办法，它们让你可以用非常多样的方法，来确定你的操作需要对哪
# 一个或者哪些窗口进行。比如：
# % All (Iconic) MoveToPage -1 -1
# 把所有图标化的窗口都移动到桌面右下角的那一页。
# % Key F5 A A Direction North Maximize True 0 growdown
# 以后按 F5 就可以让当前聚焦窗口上面(North)那个窗口往下长大，直到被当前窗口挡住去路。
# 你有时候想在VIM里抄 Acrobat Reader 里的内容，安排窗口大小的时候就可以用这招。



###########################################################
### % 窗口
###########################################################
### 00 % FVWM 窗口上下文
# Move, Close, WarpToWindow ...这些命令如何知道作用于那个窗口呢？
# 如果你因为点击了窗口上的按钮，边框，……而激发了这些命令，那么这些命令就
# 会作用于这个窗口。或者你也可以用条件选择命令确定一个或者一批窗口进行操作，
# 见条件命令。否则，这些命令不知道应该作用于哪个窗口，
# 比如你在 FvwmConsole 里键入 "Close", Close 命令就没有窗口上下文，
# 它缺省会出现一个“+”状的选择器让你选择一个窗口。如果你不希望命令在没有窗
# 口上下文的时候自动让你选择一个窗口，那么你可以在命令前面加上 "Silent".



### 01 % FVWM 窗口样式
# Style 语句用于设定窗口的样式。你可以随心所欲的让不同的窗口有不同的样式。语法为:
# 0 % Style stylename options
# 其中stylename是你的窗口的名字，窗口的class名字，或者窗口的resource名字。
# 如果你不知道这些 X window 的术语，那现在就姑且当作窗口的名字好了，以后多看
# 看 Xlib 的说明书你就会明白这些东西。窗口的名字有可能不同于程序的名字，你不知
# 道它叫什么名字可以用 xwininfo 程序或者 FvwmIdent 模块来查询。再次说明，
# FvwmIdent 是模块，不能从 xterm 的命令行运行。


# 1 % stylename 里可以有 "*" 作为通配符。比如你可以说
# Style *term TitleAtLeft
# 让所有以 "term" 结尾的那些窗口的标题拦都在左边。
# 比如 "xterm", "cxterm", "qterm", ... 都会采用这种样式。 


# 2 % options 是你想让满足条件的窗口以什么样的方式存在。
# options 的种类非常之多。比如：BorderWidth, HandleWidth, 
# FocusFollowsMouse, TileCascadePlacement, ... 它们有的需要参数，
# 比如 BorderWidth 7, 指定边框宽度为7个像素。有些不需要参数，
# 比如 FocusFollowsMouse/ SloppyFocus/ NeverFocus/ ClickToFocus 
# 指明了几种互相排斥的键盘聚焦方式。 先举几个例子，这些都是 system.fvwm2rc 里的内容：
# % Style *           FocusFollowsMouse
# % Style *           TileCascadePlacement
# % Style "Fvwm*"       NoTitle,  Sticky, WindowListSkip
# % Style "Fvwm*"       BorderWidth 2, CirculateSkipIcon, CirculateSkip
# % Style "FvwmPager"   StaysOnTop
# % Style "FvwmBanner"  StaysOnTop
# % Style "FvwmButtons" Icon toolbox.xpm, ClickToFocus
# 11 % 开头的两行说明所有窗口，都是鼠标移进去的时候得到键盘聚焦，
# 鼠标移出来就失去聚焦(FocusFollowsMouse)，窗口出现的时候，
# 先试图找一个可以放下它而不挡住其它窗口的地方，如果不行再采用
# 层叠放置的方式(TileCascadePlacement)。
# 22 % 下面是说明所有名字以 "Fvwm" 开头的窗口(在这里一般都是 FVWM 内部的模块)，
# 它们都没有标题栏(NoTitle)，而且是sticky，也就是说即使桌面切换，它们也一直显示
# 在屏幕上，边框宽度为 2， CirculateSkip 说明当FVWM要求轮询窗口进行批量操作时，
# 这些窗口不被计算在内。第3,4行说明 FvwmPager, FvwmBanner 这两个模块一直显示在
# 最上面。最后一行说明 FvwmButtons 模块使用 toolbox.xpm 的图标，需要鼠标点击
# 才能得到键盘聚焦(ClickToFocus)。总的说来，options指出了控制窗口的基本样式和
# 政策，而不包括窗口各个部件具体的样式，它包括以下几个方面内容：
# -1 % 窗口聚焦方式。是跟随鼠标(FocusFollowsMouse)，还是需要点击才聚焦(ClickToFocus)...
# -2 % 窗口标题栏。是否给窗口加上标题拦？如果加上，是放在左边，上边，还是下边？注意这里也不是设定
# 具体标题样式的地方，参看 TitleStyle.
# -3 % 窗口应该显示哪些按钮。FVWM可以为每个窗口设定最多10个按钮，但是你通常用不到10个，这样你
# 可以设定对于某一个程序那些按钮应该出现。注意这里也不是设定按钮样式的地方，参看 ButtonStyle.
# -4 % 窗口边框样式。边框宽度，handle(就是边框角上那个用来resize的东东)的宽度，边框被鼠标按住
# 的时候是否陷下去？...
# -5 % 窗口图标。用那个图标作为窗口iconify时候的图标？
# -6 % 窗口最大化，移动，改变大小操作时的样式。是显示窗口内容还是只显示一个“橡皮框”？
# 还是让尺寸小于某个值的窗口才在拖动时显示内容？...
# -7 % 窗口放置策略。窗口出现的时候，是层叠放置，最小遮挡放置，还是……？
# -8 % 是否允许程序自己放置自己？这是一个政策问题，有些窗口程序启动时会自己选择一个位置出现，
# 但是你可能会发现你不喜欢它那样做，你可以设定NoPPosition, 不允许那个程序自作聪明。
# -9 % 对瞬时窗口(transient window)的策略。transient window 是指类似弹出菜单，
# 对话框之类的窗口。当它们出现的时候，你是否想给它们也加上标准的边框？
# -10 % 高级特性。还有很多很多选项比如是否允许窗口 backing store，
# 这些如果你还不理解现在暂时不用管它。
# 以上每项都包含许许多多可以设定的东西。具体还是请参考 fvwm 的manpage。



###########################################################
### % 键盘和鼠标
###########################################################
# FVWM几乎可以以无穷的方式组合，来进行鼠标和键盘的操作。
# 你还可以加入窗口上下文来进行更方便的动作。键盘操作的定义：
# 0 % Key Keyname Context Modifiers Function
# 它表示：在名叫 Keyname 的键在 Context 上下文按下时，
# 如果控制键 Modifiers 组合按下，那么执行 Function. 
# 键盘操作后面的部分跟鼠标一样的含义，我们下面只用鼠标操作来一起说明这些命令的用途。


# 1 % 鼠标操作的定义：
# % Mouse Button Context Modifiers Function
# 它表示：在鼠标编号为 Button 的键在 Context 上下文按下时，
# 如果键盘控制键 Modifiers 组合按下，那么执行 Function.
# 鼠标键编号的方法是：1 左键，2 中键，3 右键。
# 如果你的鼠标有轮子，那么一般 4 表示往上滚动， 5 表示往下滚动。


# 2 % Context是鼠标按下的位置，它可以是：
# % R(Root Window) 根窗口n (n 是0...9 之间的一个数)。
# 第 n 号窗口按钮。按钮是这样编号的：1 3 5 7 9     0 8 6 4 2 
# 左边是奇数右边是偶数, 外面的大中间的小。
# % T(Title)标题栏
# % S(Sidebar)也就是边框. 也可以用 '[', ']', '-' , '_' 分别表示左，右，上，下的边框。
# % F(Frame)就是用来resize的那四个角落. 也可以用 '<', '^', '>' and 'v' 
# 分别表示左上，右上，右下，左下的角落。
# % W(Working Area) 应用程序窗口工作区域
# % I(Icon window) 图标化的窗口。


# 3 % 这些上下文可以组合。比如 "FST" 表示在frame, sidebar, 或者 title.


# 4 % Modifiers 是鼠标操作时同时的键盘控制键。M 表示 "Meta"，
# 在PC上就是Alt，S: shift, C: ctrl. 还有 A: any, N: none. 
# 也可以组合，比如"MS" 表示同时按下Alt-Shift.


# 5 % Mouse 3 W       SC      CloseOrNot
# 这个定义是说，在窗口上点击鼠标右键，并且先按下 Shift-Ctrl，
# 那么调用 CloseOrNot 这个FVWM函数。这个函数会作用与当前鼠标所在的上下文，也就是一个窗口



###########################################################
### % 函数
###########################################################
# 0 % 函数的定义和使用
# % DestroyFunc CloseOrNot
# % AddToFunc CloseOrNot
# % + C Silent Close
# % + M Nop
# 你可以把一系列的操作有条件的加入到一个叫做“函数”的结构里，以后这个函数就
# 可以像命令一样被使用了。   AddToFunc 把动作附加到函数, 如果函数不存在
# 就先创建这个函数。除了第一行，后面的行都以一个"+"号开头，这说明以下是上
# 一个命令(AddToFunc)的继续。DestroyFunc 是为了消除以前有可能定义过的
# 函数体。这个函数 CloseOrNot 表示:
# % 如果是一个鼠标点击(C), 那么关闭这个窗口(Close), 但是如果现在不是
# 在窗口上下文，也就是说，函数调用的时候没有一个确定的目标，那么不进行操作，
# 而不是出现一个"＋"字瞄准器让用户选择窗口。 这就是 "Silent" 的含义。
# % 如果鼠标点下去之后移动了，也就是“拖动”(M)，那么不进行操作。



# 1 % 启动函数和退出函数
# 在 FVWM 启动和重新启动时都会调用 StartFunction, 
# 而且在首次启动时会调用 InitFunction, 在重新启动时会调用 RestartFunction， 
# InitFunction 和 RestartFunction 都是在 StartFunction 之后调用。
# 每次重起和完全退出时都要执行 ExitFunction.
# 如果你有什么程序需要在FVWM启动时启动，那么就把它加到合适的函数里面去。
# % 比如，我的配置文件有这些内容：
# DestroyFunc StartFunction
# AddToFunc StartFunction         
# + I Module FvwmButtons MainPanel
# + I Module FvwmAuto 500 Raise Nop
# + I Module FvwmAnimate
# + I Module FvwmTaskBar
# + I Exec exec xdaliclock 
# + I Exec exec xloadimage -onroot -fullscreen ~/pic/cat_20.jpg
# + I Exec exec xsim

# DestroyFunc InitFunction
# AddToFunc InitFunction    
# + I Exec exec xscreensaver -no-splash

# DestroyFunc RestartFunction
# AddToFunc RestartFunction
# + I Nop 

# DestroyFunc ExitFunction
# AddToFunc ExitFunction
# + I All (xdaliclock) Close
# + I All (xscreensaver) Close
# + I All (xsim) Close
# % "I" 表示 Imediately, 立即执行。
# 可见在第一次启动时启动的是 xscreensaver 屏幕保护程序
# -no-splash 是 xscreensaver 的参数。
# 在每次重新启动和第一次启动时都要运行 FvwmButtons, FvwmAuto, FvwmAnimate, 
# FvwmTaskBar 几个模块和 xdaliclock，一种 morph 数字的时钟，
# 然后用 xloadimage 放一张漂亮的图片作为桌面背景，最后启动 xsim 中文输入法。
# 退出和重起时，我特意关闭了那几个启动时打开的程序，因为如果不关闭他们，
# 像 xwin32, Exceed 这样的 Windows X server 不会 Reset.



# 2 % 函数的基本骨架 
# % DestroyFunc FuncName
# % AddToFunc FuncName
# % + I (立刻执行)
# % + C (点击时执行)
# % + D (双击时执行)
# % + H (按住时执行)
# % + M (移动时执行)
# 如你所见，你要做的第一件事就是用 DestroyFunc 来清除已经生效的有关函数。
# 然后 把要函数做的事放到 AddToFunc 列表中去，以上这些事可分配给不同的鼠标事件。
# 现在， 当你在 FVWM 中调用函数时，你可以给它发送各种各样的参数，如：
# 可以像这样 'FuncName "$0" "$1" "$2" "$3" "$4" '来调用上面的函数，
# $0-$4是传递给函数的参数，用于决定 函数执行的结果



# 3 % 基本函数 
#####
# Basic Functions
###########
# % DestroyFunc FvwmDeleteOrDestroy 1
# % AddToFunc FvwmDeleteOrDestroy
# % + H Nop
# % + M Nop
# % + C Delete
# % + D Destroy

# % DestroyFunc FvwmIconifyOrShade  2
# % AddToFunc FvwmIconifyOrShade
# % + C Iconify
# % + D WindowShade

# % DestroyFunc FvwmMaximize        3
# % AddToFunc FvwmMaximize
# % + H Nop
# % + M Nop
# % + C Maximize $0 $1

# % DestroyFunc FvwmMoveOrIconify   4
# % AddToFunc FvwmMoveOrIconify
# % + M Move
# % + D Iconify

# % DestroyFunc FvwmWindowShade     5
# % AddToFunc FvwmWindowShade
# % + D WindowShade $0 
# 1 % 第一个函数 FvwmDeleteOrDestroy，如果鼠标处于按下或移动状态时，它不会做任何事。
#     单击时，删除活动窗口，而双击会销毁活动窗口。
# 2 % 第二个函数 FvwmIconifyOrShade，在 单击时图标化窗口而双击时卷起窗口。
# 3 % 第三个函数 FvwmMaximize，函数能接受两个参数以判断如果最 大化窗口。
#     例如你可以 'FvwmMaximize 100 100'，这会让窗口在水平和垂直方向上100% 
#     的充满屏幕；而 'FvwmMaximize 100 0' 会在水平方向上最大化窗口，垂直方向不变
# 4 % 第四个函数 FvwmMoveOrIconify 函数能够移动当前窗口，双击时图标化窗口。当鼠标移动时
# 5 % 第五个函数 FvwmWindowShade，   卷起（FvwmWindowShade True） 或放下
#     （FvwmWindowShade False）当前窗口。如果不带任何参数的话，FvwmWindowShade 
#     会卷起正常窗口，而放下已卷起的窗口。



# 4 % 函数来驱动我的所有程序 
#####
# Program Launching Functions
###########
# % DestroyFunc FvwmXTerm       1
# % AddToFunc FvwmXTerm
# % + I Exec exec xterm

# % DestroyFunc FvwmATerm       2
# % AddToFunc FvwmATerm
# % + I Exec exec aterm

# % DestroyFunc FvwmGVim        3
# % AddToFunc FvwmGVim
# % + I Exec exec gvim

# % DestroyFunc FvwmGimp        4
# % AddToFunc FvwmGimp
# % + I Exec exec gimp-2.0

# % DestroyFunc FvwmFireFox     5
# % AddToFunc FvwmFireFox
# % + I Exec exec firefox

# % DestroyFunc FvwmIrssi       6
# % AddToFunc FvwmIrssi
# % + I Exec exec aterm -e irssi

# % DestroyFunc FvwmXmms        7
# % AddToFunc FvwmXmms
# % + I Exec exec xmms

# % DestroyFunc FvwmViewManPage 8
# % AddToFunc FvwmViewManPage
# % + I Exec exec xterm -fg White -bg DarkBlue -g 80x40 -fn 7x14 -fb 7x14bold \
# % -n "Manual Page - $0" -T "Manual Page - $0" -e man "$0" 

# 第一个函数不言自明，最后一个函数以 man 页作为参数并显示该页，例如你可以这样 
# 'FvwmViewManPage fvwm'来调用该函数，它会弹出 fvwm 的手册页。你应该注意
# 看上面最 后几行的语法。在倒数第二行与最后一行间有个 '\'，这使上下两行连接在一
# 起，这样 FVWM 会把最后两行认为是一个整行。



# 5 % 稍微复杂点的函数 
#####
# Screenshot Functions (uses ImageMagick)
###########
# % DestroyFunc FvwmWindowScreenshot
# % AddToFunc FvwmWindowScreenshot
# % + I ThisWindow (!Shaded !Iconic Iconifiable) \
# % Exec import -window $[w.id] -quality 100 -silent \
# % "$[fvwm_home]/screenshot/screenshot-`date +%F[%R]`.$[w.id].jpg"

# % DestroyFunc FvwmDesktopScreenshot
# % AddToFunc FvwmDesktopScreenshot
# % + I Exec sleep $0; import -window root -quality 100 -silent \
# % "$[fvwm_home]/screenshot/screenshot-`date +%F[%R]`.jpg"



# 6 % 抓图函数 
# XRoach Invasion
###########
# % DestroyFunc XRoachInvasion
# % AddToFunc XRoachInvasion
# % + I Exec exec xroach -roaches 5 -rc Cyan -speed 17
# % + I Exec exec xroach -roaches 3 -rc Red -speed 15
# % + I Exec exec xroach -roaches 7 -rc Green -speed 10
# % + I Exec exec xroach -roaches 3 -rc Blue -speed 20
# % + I Exec exec xroach -roaches 1 -rc Black -speed 30
# % + I Exec exec xroach -roaches 1 -rc White -speed 40

# % DestroyFunc XRoachExterminate
# % AddToFunc XRoachExterminate
# % + I Exec killall xroach

# 0 % 第一组函数能用imagemagick 包中的 import 工具抓图，可以是整个桌面，
# 也可以是 单独一个窗口。要抓单独一个窗口，你需要这样来调用函数 
#         'Pick (CirculateHit) FvwmWindowScreenshot'
# 让会显示一个十字指针让你选择你想抓图的窗口。第二个函数会在 '$0' 秒延时后抓取整个桌面，这在
# 抓图开始前给你一定时间去打开菜单，棒极了！例如 'FvwmDesktopScreenshot 5' 会在5秒以后
# 开始抓图。 
# 1 % 第二组函数仅是个古老的 X 玩具，它会搞出很多不同色彩的蜚蠊（有点像德国小蠊的小 虫）
# 快速爬动，但会躲在窗口后面。你既能让这些小虫入侵，也能消灭它们。要成功运行这 些函数的话，
# 你需要安装有 'xroach'。




###########################################################
### % 菜单
###########################################################
# -1 %  FVWM的的色彩模板设定
# 绝大多数菜单需要两个色彩模板，一个用于主菜单，
# 另一个用于当前激活项目。一个简单的双色彩模板的设置如下：
#####
# Menu Colorsets
###########
Colorset 7 fg Black, bg #e6e7d7, sh Black, hi #202070
Colorset 8 fg DarkRed, bg #e6e7d7, sh Black, hi #202070 


# 0 % FVWM的菜单是可以随意自己定义的
# 它在任何时候出现在你想让它出现的任何地方。一个菜单首先有一个定义，
# 然后有一个激发这个菜单的条件，菜单的样式也可以随意定制。如果使用 
# PipeRead 命令和一些 shell 命令组合，你就可以用菜单的方式遍历
# 你的文件目录树，成为一个“菜单式file manager”。
# % 菜单是由AddToMenu命令定义的，比如这样一个菜单
# DestroyMenu RootMenu
# AddToMenu RootMenu	"Root Menu"	Title
# +			"&xterm%mini.display.xpm%"	Exec exec xterm
# +			"&Rxvt%mini.monitor.xpm%"	Exec exec rxvt 
# +			"&Big Rxvt"	Exec exec rxvt -geometry  78x43
# +			""		Nop
# +                       "&Programs"      Popup ProgramsMenu
# +			""		Nop
# +                       "Re&fresh Screen"   Refresh
# +                       "Re&capture Screen" Recapture
# +			""		Nop
# +                       "&Lock"         Exec exec xscreensaver-command -lock
# +			"&Exit Fvwm%mini.exit.xpm%"	Popup Quit-Verify
# % 除了第一行，后面的行都以一个+号开头，这说明以下是上一个命令的继续。
# % 这样我们定义了一个菜单，它的名字叫 "RootMenu", 它有一个标题叫"Root Menu", 
# % 里面有一些程序。当我们选中 "XTerm" 时，会使用FVWM 的 Exec 命令启动一个shell，
# % 这个shell马上会执行"exec xterm", 也就是启动一个 xterm。空字串"" 表示在菜单里
# % 画一条分隔线。Popup 可以弹出子菜单，子菜单也是用同样的方法定义的。"&"后面的那个
# % 字母会变成键盘的热键而被加上下划线，"%"括起来的是图标文件的名字，你需要设置 ImagePath 
# % 指向图标文件所在的目录。你还可以在菜单里加入侧面图标，等等等等。


# 1 % 菜单的消灭
# 随后的AddToMenu命令会把内容附加到菜单的末尾。
# 所以如果你想重新定义一个菜单，就需要先把它销毁掉。用
# % DestroyMenu RootMenu
# 就可以把刚才那个 "RootMenu" 菜单消灭掉。


# 2 % 菜单的激活
# 光是定义了一个菜单你是不能马上使用它的。这个菜单在什么情况下出现？
# 这个问题是需要你自己来决定，这也是显示FVWM的完全可定制性的地方。
# 比如，我们可以这样定义一个激活菜单的方式：
# % Mouse 1 R       A       Menu RootMenu Nop
# 这句话的意思是：“当鼠标(Mouse)左键(1)在根窗口(R)上点击，
# 同时有任何控制键(A)按下，这个时候显示叫做 RootMenu 的菜单。”

# 但是有时候我们不容易在屏幕上找到一个可以看到根窗口的地方来点击鼠标。我们可以再加一个定义：
# % Mouse 3 A       MC      Menu RootMenu Nop
# 这样，当右键(3) 在任何地方(A)点击, 同时有Alt(M)和Ctrl(C)按下，
# 那么弹出名叫 "RootMenu" 的菜单。
# 上面的 "Nop" 表示的是鼠标在菜单上进行双击时的操作。我定义为不操作。
# 另外 Menu 还可以随意定义菜单出现的位置，详细请看 fvwm manpage。


# 3 % 菜单的样式
# 菜单的样式是由 MenuStyle 定义的：
# % MenuStyle * MWM
# % MenuStyle * PopupDelayed, PopupDelay 160, Animation, TitleWarp
# % MenuStyle * Foreground gold, Background gray40
# % MenuStyle * ActiveFore White
# % MenuStyle * Font  -*-simsun-medium-r-*-*-14-*-*-*-*-*-*-*
# % MenuStyle * MenuFace VGradient 64 darkgray MidnightBlue
# 这样我规定：所有的菜单，他们使用 mwm 的行为方式，弹出子菜单延时 160 ms，
# 子菜单弹出时如果靠近屏幕边沿放不下，那么菜单整体移动使得子菜单刚好能弹出，
# 前景色gold，背景色 gray40, 活动的项目(就是鼠标正在它上方的时候)前景色变为白色，
# 菜单使用字体 -*-simsun-medium-r-*-*-14-*-*-*-*-*-*-*, 背景是垂直的梯度颜色，
# 一共64阶，从 darkgray 变化到 MidnightBlue.


# 4 % 动态菜单定义
# 前面我们说过了，可以用 PipeRead 来构造一个动态菜单。现在举一个简单的例子：
# % AddToMenu HomeDirMenu
# % 	PipeRead 'for i in $HOME/prog/*.c; \
# % 	do echo "+ $i Exec xterm -e vi $i"; done'
# 当你激发这个菜单 HomeDirMenu, 就会出现你主目录/prog下的所有C程序文件的列表，
# 当你点击其中一个就会启动vi来编辑这个C程序。是不是很方便呢？你想一想，可以用怎样
# 无穷无尽的方式来构造一个菜单呢？



###########################################################
### % 按钮
###########################################################
# 窗口的标题栏上都有一些按钮。那不是窗口程序自己的，而是WM给它们加上的。
# FVWM 可以给窗口加上最多10个按钮，它们不光可以实现基本的最大化，最小化，
# 关闭，等功能。FVWM的灵活性允许你赋予按钮几乎任意的功能！
# 0 % 按钮是这样编号的：左边是奇数右边是偶数, 外面的大中间的小。
#       1   3   5   7   9       0   8   6   4   2


# 1 % 按钮功能定义
#下面看看按钮的功能是怎么定义的，在鼠标和键盘一节我们已经知道怎么定义鼠标了，
#按钮的功能只不过是把鼠标与按钮号码组合在一起。
#比如我的窗口上一般有三个按钮, 都在右上角，注意它们的编号
#       6   4   2
# % 他们的功能是这样定义的：
# Mouse 1 4       A       Iconify
# Mouse 1 6       A       Close
# Mouse 3 2       A       Maximize-Func2
# % 其中 Maximize-Func2 是用了 system.fvwm2rc 里一个函数：
# DestroyFunc Maximize-Func2	
# AddToFunc Maximize-Func2	"M" Maximize	 100 0
# +                         "C" Maximize	 80 0
# +				            "D" Maximize	 100 100
# 如果鼠标右键在“最大化”按钮上点击(C)那么高度增长为屏幕的 80%, 宽度不变。
# 如果按下鼠标右键后有拖动(M), 那么高度增长为屏幕高度(100%), 宽度不变。
# 如果双击(D), 就是一般的最大化。
# 为什么是右键？因为我为左键在这个按钮上定义了更高级的 stroke 来改变窗口大小。我们稍后介绍。


# 2 % 按钮样式
# 按钮的样式是用ButtonStyle定义的。比如我的那三个按钮实际上是如下几句话定义的。
# % ButtonStyle All -- UseTitleStyle
# % ButtonStyle All ActiveDown VGradient 8 palevioletred black
# % ButtonStyle 6 16 20x20@1 30x20@1 50x40@1 70x20@1 80x20@1 80x30@0 \
# % 	60x50@0 80x80@0 70x80@0 50x60@0 30x80@0 20x80@0 \
# % 	20x70@0 40x50@1 20x30@0 20x20@1
# 右边两个按钮的图案是系统缺省的，那个"X"形按钮是下面第三句话画出来的。 
# 这种绘图语句非常简单。ButtonStyle 之后的数字是按钮编号，后面一个数子
# 表示一共有多少笔画。后面的XxY@C都是笔画的内容，XxY是坐标, 坐标都是用
# 百分比表示的。@C 表示颜色, C是一个数字，0 表示阴影色，1 是高亮色，
# 2 是背景色，3 是前景色，4 是移动光标而不画线。
# 你可以画你自己的按钮，也可以去拿别人设计好的来用。FVWM 的主页上有很多人提供这种按钮。
# % 第二个语句 "ActiveDown VGradient 8 palevioletred black" 设定了所有按钮按下去
# 还没有松开鼠标时候的样式，是一个颜色梯度。


# 3 % 其它样式
# 我们已经知道 Style 可以决定窗口的样式，MenuStyle 可以决定菜单的样式，
# ButtonStyle 按钮的样式。其实还有 CursorStyle, TitleStyle, BorderStyle. 
# 他们决定了光标，标题栏，边框的样式。他们都有多样的语法，详细的就看 magpage 吧。这里就不照抄了。



###########################################################
### % FVWM 模块
###########################################################
# 模块是FVWM可以扩展的奥秘。模块是通过管道跟FVWM通信的程序，
# 它们必须由FVWM启动(fork). 也就是说，你可以从 FvwmConsole 
# 来启动这些模块，也可以用菜单，鼠标，热键……来启动。但是就是不
# 能从 xterm 或者 rxvt 敲入命令来启动它们。

# -1% 你有没有发现。当你的鼠标移动到窗口后，如果它被别的窗口挡住了，
# % 它并不会跑到上面来。如果你想让它自动上来，你可以使用 FvwmAuto 
# % 模块来实现一个简单的“自动提升”功能。我的 StartFunction 里有如下内容：
# AddToFunc StartFunction   	
# + I Module FvwmAuto 500 Raise Nop
# % 其实你还可以用 FvwmAuto 实现非常复杂的自动提升功能。


# 0 % 你想让你的窗口图标化(Iconify) 和取消图标化(Deinconify) 
# % 的时候都有漂亮的动画吗？用以下设定来配置你的 FvwmAnimate 模块，
# % 然后启动它，就可以有眼花缭乱的效果了 :)
# *FvwmAnimate: Delay 25
# *FvwmAnimate: Effect Random
# *FvwmAnimate: Width 3
# % 这些行是对 FvwmAnimate 的配置，模块的配置命令都是 "*" 号开始的。


# 1 % 你想要一个 Windows 那样的任务栏吗？启动 FvwmTaskBar 模块就行了。


# 2 % 想要一个 Pager? FvwmPager 可以提供你用不完的功能。参看FvwmPager.


# 3 % Drag & Drop? 启动 FvwmDragWell, 就可以让支持 XDND 的程序工作。

# 4 % 你想这样一种功能：每次当名叫 XXX 的程序出现时，就把它大小变为 400x300, 
#     移动到屏幕右边，然后启动一个 rxvt 跟它作伴？用 FvwmEvent 可以轻松达到你的目的。


# 5 % 你想做一个简单的图形界面程序？用 FvwmScript 可以快速的达到你的目的。


# 6 % 写配置文件太冗长了？用 FvwmM4 可以让你用 M4 宏处理语言来预处理配置文件。


# 7 % 你想有更加超级的操纵方式？FvwmPerl 可以让你使用 Perl 脚本的方式来操纵 FVWM.


# 8 % 模块的功能可能很复杂，它们都有自己分别的 manpage. 下面几节我们介绍一些常用的模块。



###########################################################
### % FVWM FvwmPager
###########################################################
# % 既然 fvwm 有很多工作区。能不能有一个东西可以方便的看到那些工作区上有哪些程序，
# % 而且可以方便的切换工作区呢？FvwmPager就是为这个目的设计的。 我的Pager是这个样子：
# *FvwmPager: Rows 4
# *FvwmPager: Columns 1
# *FvwmPagerBack #908090
# *FvwmPagerFore #484048
# *FvwmPager:Font  -*-simsun-medium-r-*-*-14-*-*-*-*-*-*-*
# *FvwmPagerHilight #cab3ca
# *FvwmPagerLabel 0 Main
# *FvwmPagerLabel 1 Internet
# *FvwmPagerLabel 2 Program
# *FvwmPagerLabel 3 Amusement
# *FvwmPager:SmallFont  -*-simsun-medium-r-*-*-12-*-*-*-*-*-*-*
# *FvwmPagerBalloons            All
# *FvwmPagerBalloonBack         Yellow
# *FvwmPagerBalloonFore         Black
# *FvwmPager:BalloonFont         -*-simsun-medium-r-*-*-14-*-*-*-*-*-*-*
# *FvwmPagerBalloonYOffset      +2
# *FvwmPagerBalloonBorderWidth  1
# *FvwmPagerBalloonBorderColor  Black
# % 这些行是对 FvwmPager 的配置，模块的配置命令都是 "*" 号开始的。 在 FVWM 里启动它:
# Module FvwmPager 0 3



###########################################################
### % FVWM FvwmButtons
###########################################################
# % FVWM面的Pager不错吧？不过它总是在屏幕上占那么一块位置，有没有办法让它可以在
# % 需要的时候才伸出来呢？你可以用 FvwmButtons 把FvwmPager包装起来实现这个功能。
# % 这里是我的一个简单的配置：
# *FvwmButtonsBack bisque3
# *MainPanel: Geometry 80x18+40+4
# *MainPanel: Back SeaGreen
# *MainPanel: (Panel(down, indicator, delay 0, steps 1) \
# 		PagerPanel "Module FvwmButtons PagerPanel")
# *MainPanel: Font  -*-simsun-medium-r-*-*-16-*-*-*-*-*-*-*
# *PagerPanel: Geometry 80x352
# *PagerPanel: (Swallow FvwmPager "Module FvwmPager 0 3")
# *PagerPanel: Font  -*-simsun-medium-r-*-*-16-*-*-*-*-*-*-*
# % 这个FvwmButtons设置了一个 button 叫做 "MainPanel". 你可以用：
# Module FvwmButtons MainPanel
# % 挂在屏幕左上偏右一点的地方，既没有挡住左边的按钮，又不会挡住窗口的下拉菜单。
# % 点一下就会展开，展开以后就是这个样子：再点就会缩回去。
# % FvwmButtons 可以提供的功能远远不止这些。FvwmButtons 是一个非常强大的模块。
# % 你有兴趣可以看看它的 manpage.



###########################################################
### % FVWM 手写操作 (Stroke)
###########################################################
# 你用过 EDA 软件吗？ 用过的话，你就可以知道鼠标动作(stroke)是多么的方便！ 
# 你是否想在你的窗口管理器里也使用鼠标动作？
# % 让 FVWM 支持 Stroke
# 如果你的FVWM窗口管理器编译进了 libstroke, 你就可以使用鼠标动作操纵程序。
# libstroke 是一个免费使用的 stroke 库，你可以在http://www.etla.net/libstroke/ 
# 得到 libstroke. 下载那个为 FVWM 准备的版本，编译后安装，然后再编译 FVWM，它一般就
# 会找到 libstoke，从而加入 stroke 的功能。
# 比如我在屏幕上按住 ctrl, 用右键
# % 画一个 "r" 字就可以启动 rxvt
# % 画一个 "V" 就可以启动 vim
# % 画出 "D" 右边的弧线就可以启动 IBM 智能辞典
# % 画一个 "e" 启动 emacs ...
# % 鼠标左右一晃，就可以启动 xkill，再往某个窗口一点，就可以强制杀死不听话的窗口
# % 在窗口里右键往下一划，就可以最小化窗口
# % 在窗口边框上用右键……
# % 向上拖就可以使窗口往上一直长到被别的窗口挡住的地方
# % 向左拖就可以使窗口往左一直长到被别的窗口挡住的地方
# % 右……下……斜上…… 从边框开始画一个"L"形就可以回复窗口原来大小
# 当然这些控制方式都是你自己决定的, 这一切只需要在 .fvwm2rc 里加入一些Stroke语句. 
# 因为太多了，写在主配置文件影响编辑, 这些语句被我写到了另一个文件里，然后在主文件用 Read 
# 语句读入。你可以在这里下载我的fvwm.stroke文件作为参考。
# 你还可以定义非常高级的操作，你甚至可以这样：按住 ctrl, 用鼠标中键画出一条射线箭头指向的
# 那个窗口, 不论它在那个桌面，就会被吸过来，并且随鼠标移动，你点击左键就可以放置它。



### % ##########################################################################
### % fvwm2用户配置文件(~/.fvwm/.fvwm2rc)
### % fvwm2默认配置文件(/usr/share/fvwm)
### % ##########################################################################


##### % 设置系统环境变量
# Set Environment variables 
########### 
SetEnv fvwm_home $[HOME]/.fvwm
SetEnv fvwm_img $[fvwm_home]/images
SetEnv fvwm_icon $[fvwm_home]/icons
SetEnv fvwm_scrpt $[fvwm_home]/scripts
SetEnv fvwm_wallpapers $[fvwm_img]/wallpaper
#####
# Set the image path
###########
ImagePath $[fvwm_icon]:$[fvwm_icon];.png:+
# % $[fvwm_icon];.png表示查找$[fvwm_icon]路径中的png格式的图片，而不是默认的图片格式。
# % +表示前面添加过的ImagePath路径
# % magePath path. 指定一个路径，在配置文件里要用到的图标等文件就会到这个路径里去寻找。比如：
# % ImagePath +:/usr/share/icons:/usr/share/pixmaps:$HOME/.fvwm/icons
# % 加号是表示以前定义过的那个ImagePath。  FVWM 可以使用 .xbm, .xpm 和 .png 格式的图标



################################################################################
# % Virtual Desktops
################################################################################
# % 建立虚拟桌面。FVWM 允许你想要多少虚拟桌面就有多少，
# % 同时允许每个桌面拥有多个 Pages（页）。假定你想要3个虚拟桌面，
# % 然后建立3个虚拟桌面，分别命名为 Main，Work，Games（标号为0,1,2）。
# % 每个又拥有3x3格9个 pages，你能用如下方法建立
DesktopSize 3x3
DesktopName 0 Main
DesktopName 1 Work
DesktopName 2 Games


# % (EdgeScroll, EdgeResistance, EdgeThickness) 3个命令是对鼠标光标的控制
# 0 % EdgeScroll 定义了当你的鼠标移动到屏幕边缘的时候，屏幕滚动的百分率。
# 0 % “100 100”代表，如果把鼠标移动到屏幕边缘，整个屏幕都会滚动至下一个屏幕。
# 1 % EdgeResistance (scrolling, moving)
scrolling 是告诉FVWM当滑鼠游标碰触到萤幕边界多少milliseconds之後，才会移动目前的工作桌面
moving    则是设定当视窗超出画面多少像点之後，才要切换目前的工作桌面到别的桌面上。
设定滚动发生前需要多少'阻力'（时间延迟），而 EdgeThickness 则会设定
# 2 % 设定鼠标靠近屏幕边缘的距离小于某个值
EdgeScroll 100 100
EdgeResistance 150  150
EdgeThickness 1           
# % 可以把这几个参数都设置为 0，窗口就不会随光标移动了
EdgeScroll 0 0
EdgeResistance 0 0
EdgeThickness 0             



################################################################################
# % Mouse and Focus Behavior
################################################################################
# % 下一步是设定默认的鼠标和聚焦动作。如下
# % ClickTime 是在按下和松开鼠标间以毫秒计算的时间，FVWM 把这个动作看作是一次 'click'。
# % 如果超过时间，FVWM 会认为这是一个 'hold'行为。MoveThreshold 指要让 FVWM 认为这是
# % 一次 'move' 动作，鼠标所必须移动的像素。注意，所有这些东西设定你的窗口管理器的外观感受，
# % 而且在编写函数时很重要！
ClickTime 350
DoubleClickTime 500
MoveThreshold 3


# % 鼠标经过时获得焦点，鼠标单击焦点窗体时窗体升至最前面。
Style * SloppyFocus, MouseFocusClickRaises


# % EwmhBaseStruts 设定不可用的屏幕区域，用法是'EwmhBaseStruts 左 右 上 下'。
EwmhBaseStruts 62 162 0 48

# % FVWM 忽略某些特定的修改按键，在这里它会忽略 'Num Lock' 按键
IgnoreModifiers L25



################################################################################
# % Basic Bindings (按键绑定)
################################################################################
# % 有两种类型的绑定，绑定至鼠标，或绑定到键盘
# % 注意屏幕是如 何被分割成以下几部分的
# % R - 根窗口，I - 图标，F - 窗口边角，S - 窗口边缘，
# % T - 标题栏，W - 程序窗口，还有0-9 这些是按钮。
# % 注意：A代表任意地方，即不管鼠标在哪里
# 绑定到键盘，用'Key X Context Modifier Action'
# 绑定到鼠标，用'Mouse X Context Modifier Action' 
# Context 是指如上所示的当前鼠标位置
# Modifier 是如下任意组合：(A)ny, (C)ontrol, (S)hift, (M)eta, (N)othing, 
# 或1-5, 代表X Modifiers mod1-mod5 (man xmodmap)
Key F1 A M Menu MenuFvwmRoot
Key Tab A M WindowList Root c c NoDeskSort, SelectOnRelease Meta_L
Key Super_L A A FvwmATerm
Mouse 1 R A Menu FvwmRootMenu
Mouse 3 R A Menu FvwmWindowOpsMenu
Mouse 1 1 A FvwmDeleteOrDestroy
Mouse 1 3 A FvwmIconifyOrShade
Mouse 1 5 A FvwmMaximize 100 100
Mouse 2 5 A FvwmMaximize 0 100
Mouse 3 5 A FvwmMaximize 100 0
Mouse 1 W M FvwmMoveOrIconify
Mouse 1 I A FvwmMoveOrIconify
Mouse 4 T A FvwmWindowShade True
Mouse 5 T A FvwmWindowShade False
%  从上到下的绑定分别做以下这些事：
1  任何地方按下 alt-f1 时显示根菜单
2  按下 alt-tab 时显示 WindowList                                                                    
3  按下左边的 win 键时启动 aterm
4  当鼠标左键在根窗口上点击时，打开根菜单
5  当鼠标右键在根窗口上点击时，打开窗口选项菜单
6  当按钮 1 被单击或双击时删除或销毁窗口
7  当按钮 3 被单击或双击时图标化或卷起窗口
8  当鼠标按键一（左键）点击按钮 5 时，最大化窗口至充满整个屏幕
9  当鼠标按键二（中键）点击按钮 5 时，垂直最大化窗口
10 当鼠标按键三（右键）点击按钮 5 时，水平最大化窗口（译者注：鼠标按键可人为定义，因此可能不同的机器上不一样，如果你不是左撇子的话就没必要自定义默认的鼠标按键。像我有时用左手就要自定义了！;-）
11 alt+按着左键并移动鼠标可拖动窗口，而 alt+双击会图标化窗口
12 将 FvwmMoveOrIconify 函数绑定至 'Icons'，以便能进行移动和图标化
13 向上滚动两次滚轮卷起活动窗口（这个函数要求双击，因此要滚两下）
14 向下滚动两次滚轮放下活动窗口




################################################################################
# % 字体设置
################################################################################
为什么 FVWM 的窗口标题不能显示汉字？
FVWM当然能显示汉字了，它是一个国际化的程序。原因在于你没有设置好汉字字体。
你可以在配置文件里加入汉字字体的设定：
Style * Font  -*-simsun-medium-r-*-*-14-*-*-*-*-*-*-*

simsun 是我机器上一种同时可以支持汉字和英语编码的字体，如果你的字体只有汉字编码，
那么你的英文全部都会“乱码”，这时你需要在后面再加一个英文字体。比如：
Style * Font  "-cjacker-magicsong-medium-r-*-*-14-*-*-*-*-*-gb2312.1980-0,*-r-*"
类似的，pager，windowlist 都有自己的字体设定，你需要把它们都设置为你喜欢的中文字体。






# % FVWM 能不能像 Windows 那样用 Alt-Tab 切换窗口？
可以的，把这行加入 .fvwm2rc:
Key Tab A M WindowList Root c c NoDeskSort
这个绑定不知道什么时候好像成了 FVWM 缺省的。如果要取消它，那么加入：
Key Tab A M -








