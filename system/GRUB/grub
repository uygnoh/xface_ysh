###########################################################
###  GRUB2 启动器 
###########################################################
% 生成grub.cfg, 一般来说, update-grub会更新grub并生成grub.cfg
sudo update-grub
% 当然也可以
sudo grub-mkconfig -o /boot/grub/grub.cfg


% sudo gedit /etc/default/grub
1.修改等待时间
修改文件中的：GRUB_TIMEOUT=10 （默认是为10秒的）
修改为：GRUB_TIMEOUT=X (X表示你要设置的秒数，设置为负数为一直等待操作) 修改后保存。终端输入：

2.修改默认启动系统
sudo gedit /etc/default/grub
修改文件中的GRUB_DEFAULT=0
GRUB_DEFAULT=0 (0默认启动第1项，如果你的win是第5项，把这个0改为4) 保存文件后终端输入:

3.选择启动的环境，“quiet splash”为图像界面，“text”为文本界面
        GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"

4.GRUB_TERMINAL=console
#设置是否使用图形介面。前面有#注释（使用图形界面），前面没有#注释（仅使用控制台终端，不使用图形介面) )

# Uncomment to disable generation of recovery mode menu entrys
#GRUB_DISABLE_LINUX_RECOVERY="true"
#定是否创建修复模式菜单项，前面有#注释（建立修复模式）.前面没有#注释（不建立修复模式

# Uncomment to get a beep at grub start
#GRUB_INIT_TUNE="480 440 1" #当GRUB菜单出现时发出鸣音提醒，用户无法看到屏幕特别有用,默认关闭



###########################################################
### BIOS UEFI SecureBoot MBR GPT
###########################################################
% 打开电源 
+ 不停按系统热键<F2>
+ 进入BIOS进行设定

% Legacy BIOS
+ Basic Input Output System             <基本输入输出系统>
+ Legacy Support    [Disable]           <legacy是传统BIOS>

% EFI BIOS
+ EFI <Extensible Firmware Interface>         <可扩展固件接口>
+ EFI BIOS是用模块化，C语言风格的参数堆栈传递方式，动态链接的形式构建的系统
+ EFI在概念上非常类似于一个低阶的操作系统，并且具有操控所有硬件资源的能力

% UEFI
+ UEFI<Unified Extensible Firmware Interface> <统一的可扩展固件接口> 
+ 是一种详细描述全新类型接口的标准。这种接口用于操作系统自动从预启动的操作环境，
+ 加载到一种操作系统上，从而使开机程序化繁为简，节省时间

% UEFI Boot Order
+ 进入UEFIbios系统后， 选择需要引导的设备， 把它设置为第1个位置

% 开启U盘启动->“USB Boot”
+ 进Boot/Startup这项目中的“USB Boot”要更改为 “Enabled”,(一般的主板默认开启)

% Secure Boot
+ Secure Boot       [Disabled]
+ Secure Boot只是UEFI的一个部分。两者的关系是局部与整体的关系
+ Secure Boot的目的，是防止恶意软件侵入
```
+ 微软强行部署Secure Boot
它的做法就是采用密钥。UEFI规定，主板出厂的时候，可以内置一些可靠的公钥。
然后，任何想要在这块主板上加载的 操作系统或者硬件驱动程序，都必须通过这些公钥的认证。
也就是说，这些软件必须用对应的私钥签署过，否则主板拒绝加载。
由于恶意软件不可能通过认证，因此 就没有办法感染Boot。
这个设想是好的。但是，UEFI没规定哪些公钥是可靠的，也没规定谁负责颁发这些公钥，
都留给硬件厂商自己决定。现在，微软就是要求，主板厂商内置Windows 8的公钥。
```


% MBR GPT esp分区 FAT分区
+ MBR分区列表支持最大2TB硬盘
```
MBR（Master Boot Record）：即硬盘的主引导记录分区列表，
在主引导扇区，位于硬盘的cylinder 0， head 0， sector 1 （Sector是从1开始的）
```
+ GPT分区列表支持最大128PB(1PB=1024TB)
```
GUID磁盘分区表（GUID Partition Table，缩写：GPT）其含义为“全局唯一标识磁盘分区表”
它是可扩展固件接口（EFI）标准（被Intel用于替代个人计算机的BIOS）的一部分，
被用于替代BIOS系统中的一64bits来存储逻辑块地址和大小信息的主开机纪录（MBR）分区表
```

+ esp分区, EFI系统分区，即 EFI system partition，简写为 ESP。
```
ESP虽然 是一个 FAT16 或 FAT32 格式的物理分区，但是其分区标识是 EF (十六进制) 而非常规的 0E 或 0C。
因此，该分区在 Windows 操作系统下一般是不可见的。分区内存放引导管理程序、驱动程序、系统维护工具等。
支持 EFI 模式的电脑需要从 ESP 启动系统，EFI 固件可从 ESP 加载 EFI 启动程序和应用程序。

ESP是一个独立于操作系统之外的分区，操作系统被引导之后，就不再依赖它。
这使得 ESP 非常适合用来存储那些系统级的维护性的工具和数据，
比如：引导管理程序、驱动程序、系统维护工具、系统备份等，
甚至可以在 ESP 里安装一个特殊的操作系统（SlaTaz Linux? PuppyLinux? Win PE?）
```

+ FAT分区与通用性
```
EFI 规范规定 ESP 使用 FAT 格式。尽管这种老旧的格式有很多局限性，但也不算一无是处。
尤其开发者来说，系统中有个 FAT32 分区是很好的，因为经常使用多个系统，包括 Windows、Linux、FreeBSD，
而这些系统都能安全地访问 FAT 分区，因此，可以把各个系统的启动相关的文件包括启动管理程序等放到 ESP 里，
而且，这也方便在一个系统中去修改另一个系统的启动文件，至少可以把 ESP 当作各个系统的公共交换空间.
```





###########################################################
###  grub2配置文件
###########################################################
% /boot/grub/grub.cfg的主要配置文件都在 /etc/grub.d 目录。
% 说明：grub.cfg默认为只读，需要个性化配置文件的，建议不要直接修改grub.cfg，
该目录中的每个文件都包含了最终会整合到 grub.cfg 文件中的 GRUB 代码。
这些配置文件的命名模式以排序方式设计，这使得最终的 grub.cfg 文件可以按正确的顺序整合而成。
每个文件都有注释表明该部分的开始和结束，这些注释也是最终的 grub.cfg 文件的一部分，
从而可以看出每个部分是由哪个文件生成。分隔注释看起来像这样：
### BEGIN /etc/grub.d/10_linux ###
### END /etc/grub.d/10_linux ###
不要修改这些文件，除非你是一个 GRUB 专家并明白更改会发生什么。
% 无论如何，修改 grub.cfg 文件时你也总应该保留一个原始文件的备份。 
% 40_custom 和 41_custom 这两个特别的文件用于生成用户对 GRUB 配置的修改。
% 你仍然要注意对这些文件的更改的后果，并保存一份原始 grub.cfg 文件的备份。
你也可以把你自己的文件添加到 /etc/grub.d 目录。
这样做的一个可能的原因是为非 Linux 操作系统添加菜单行。
要注意遵循命名规则，确保配置文件中额外的菜单选项刚好在 10_linux 条目之前或之后。



###########################################################
###  grub2默认配置文件
###########################################################
% 老版本 GRUB 的配置非常简单而明了，我只需要修改 /boot/grub/grub.conf 就可以了。
% 对于新版本的 GRUB2，我虽然还可以通过更改 /boot/grub2/grub.cfg 来修改，
% 但和老版本的 GRUB 相比，新版本相对更加复杂。
% 另外，安装一个新内核时 grub.cfg 可能会被重写，因此任何修改都可能消失。
% 一旦你明白了如何做，更改 GRUB2 配置就会变得非常简单。
% 我为之前的文章研究 GRUB2 的时候才明白这个。
% 秘密就在 /etc/default 目录里面，一个自然而然称为 grub 的文件，它可以通过简单的终端命令操作。
% /etc/default目录，包括了一些类似Google Chrome,useradd和grub程序的配置文件。
/etc/default/gurb



###########################################################
###  /etc/default/gurb 配置文件宏
###########################################################
% GRUB_TIMEOUT 
这个键的值决定了显示 GRUB 选择菜单的时间长度。
GRUB 提供了同时保存多个安装内核并在启动时使用 GRUB 菜单在其中选择的功能。
这个键的默认值是 5 秒，但我通常修改为 10 秒使得有更多时间查看选项并作出选择。

% GRUB_DISTRIBUTOR 
这个键定义了一个从 /etc/system-release 文件中提取发行版本的 sed[3] 表达式。
这个信息用于生成出现在 GRUB 菜单中的每个内核发布版的文本名称，例如 “Fedora” 等。
由于不同发行版之间 system-release 文件结构的差异，在你的系统中这个 sed 表达式可能有些不同。

% GRUB_DEFAULT 
决定默认引导哪个内核。如果是 saved，这代表最新内核。
这里的其它选项如果是数字则代表了 grub.cfg 中列表的索引。
使用索引号 3，就会总是加载列表中的第四个内核，即使安装了一个新内核之后也是。
因此使用索引数字的话，在安装一个新内核后会加载不同的内核。
要确保引导特定内核版本的唯一方法是设置 GRUB_DEFAULT 的值为想要内核的名称，
例如 4.8.13-300.fc25.x86_64。

% GRUB_SAVEDEFAULT 
通常，grub 默认文件中不会指定这个选项。
当选择不同内核进行引导时，正常操作下该内核只会启动一次。默认内核不会改变。
当其设置为 true 并和 GRUB_DEFAULT=saved 一起使用时，这个选项会保存一个不同内核作为默认值。
当选择不同内核进行引导时会发生这种情况。

% GRUB_DISABLE_SUBMENU 
一些人可能会希望为 GRUB 菜单创建一个内核的层级菜单结构。
这个键和 grub.cfg 中一些额外内核配置允许创建这样的层级结构。
例如，主菜单中可能有 production 和 test 子菜单，每个子菜单中包括了一些合适的内核。
设置它为 false 可以启用子菜单。

% GRUB_TERMINAL_OUTPUT 
一些环境下可能需要或者必要将输出重定向到一个不同的显示控制台或者终端。
默认情况下是把输出发送到默认终端，通常 console 等价于 Intel 系列个人电脑的标准输出。
另一个有用的选择是在使用串行终端或者 Integrated Lights Out (ILO) 
终端连接的数据中心或者实验室环境中指定 serial。

% GRUB_TERMINAL_INPUT 和 GRUB_TERMINAL_OUTPUT 类似，
可能需要或者必要重定向输入为串行终端或者 ILO 设备、而不是标准键盘输入。

% GRUB_CMDLINE_LINUX 
这个键包括了在启动时会传递给内核的命令行参数。
注意这些参数会被添加到 grub.cfg 所有已安装内核的内核行。
这意味着所有已安装的内核在启动时都会有相同的参数。
我通常删除 rhgb 和 quiet 参数以便我可以看到引导和启动时内核和 systemd 输出的所有内核信息消息。

% GRUB_DISABLE_RECOVERY 
当这个键的值被设置为 false，
GRUB 菜单中就会为每个已安装的内核创建一个恢复条目。
当设置为 true 时就不会创建任何恢复条目。
但不管这个设置怎样，最后的内核条目总是一个 rescue 选项。
不过在 rescue 选项中我遇到了一个问题，下面我会详细介绍。



###########################################################
###  生成grub2配置文件
###########################################################
% 完成所需的配置之后，就需要生成 /boot/grub2/grub.cfg 文件。
% 这通过下面的命令完成。
% 这个命令按照顺序使用位于/etc/grub.d 的配置文件构建 grub.cfg 文件，
% 然后使用 grub 默认文件的内容修改输出以便获得最终所需的配置。
% grub2-mkconfig命令会尝试定位所有已安装的内核并在 grub.cfg 文件的[10_Linux]部分新建条目
% 它还创建一个[rescue]条目提供一个用于从 Linux 不能启动的严重问题中恢复的方法。
% 强烈建议你不要手动编辑 grub.cfg 文件，
% 因为任何对该文件的直接修改都会在下一次安装新内核或者手动运行 grub2-mkconfig 时被重写。
grub2-mkconfig > /boot/grub2/grub.cfg



###########################################################
###  grub2 问题
###########################################################
我遇到一个如果没有意识到就可能导致严重后果的 GRUB2 问题。
这个救援内核没有启动，反而启动了另外一个内核。
我发现那是列表中索引为 1 的内核，也就是列表中的第二个内核。
额外的测试发现不管使用原始的还是我生成的 grub.cfg 配置文件都会发生这个问题。
我在虚拟机和真实硬件上都尝试过而且都发生了这个问题。
我只测试了 Fedora 25，因此其它 Fedora 发行版本可能没有这个问题。
% 注意，从救援内核生成的 “recovery” 内核条目不能引导到维护模式。
% 我推荐将 grub 默认文件中 GRUB_DISABLE_RECOVERY 的值更改为 “false”，
然后生成你自己的 grub.cfg。这会在 GRUB 菜单中为每个已安装的内核生成可用的恢复条目。
这些恢复配置能像期望那样工作，从而从那些需要输入密码登录的内核条目中引导到运行级别 1，
也就是进入（不需要密码的）单用户维护模式。你也可以按 Ctrl-D 继续正常的引导进入默认运行级别。



###########################################################
###  grub2终端部分命令介绍
###########################################################
在出现选择菜单时，按C进入终端命令行模式，
按E进入当前菜单项编辑模式（和grub一样），
编辑中按Ctrl + C退出，按Ctrl + X 以编辑内容启动。

% 1. help
查看命令用法，显示所有可用命令
help search
search 命令用法

% 2. ls
列出当前的所有设备。如 (hd0) (hd0,1) (hd0,5) (hd1) (hd1,1) (hd1,2) .......
ls -l
详细列出当前的所有设备。对于分区，会显示其label及uuid。
ls /
列出当前设为root的分区下的文件
ls (hd1,1)/
列出(hd1,1)分区下文件

% 3. search
search -f /ntldr
列出根目录里包含ntldr文件的分区，返回为分区号
search -l LINUX
搜索label是LINUX的分区。
search --set -f /ntldr
搜索根目录包含ntldr文件的分区并设为root，注意如果多外分区含有ntldr文件，set 失去作用。

% 4. loopback
loopback命令可用于建立回放设备，如
loopback lo0 (hd1,1)/abc.iso
可以使用lo0设备来访问abc.iso里的内容，比如说，可以从abc.iso里的软盘映像中启动
loopback lo0 (hd1,1)/aa.iso
linux (lo0)/memdisk
initrd (lo0)/abc.img
要删除某一回放设备，可以使用-d参数：
loopback -d lo0

% 5. set
使用set可以设置变量的值
set root=
set timeout=
需要调用变量的值时，使用${AA}，如set root=(hd1,1)
则${root}=(hd1,1)

% 6. pager
分页显示。
set pager=1
满页时暂停，按space继续
set pager=0
取消分页

% 7. linux
linux取代grub中的kernel



###########################################################
###  grub2总结
###########################################################
GRUB 是引导 Linux 计算机到可用状态过程的一系列事件中，发生在 BIOS 之后的第一步。
理解如何配置 GRUB 对于恢复或者处理多种类型的问题非常重要。
这么多年来我多次不得不引导到恢复或者救援模式以便解决多种类型的问题。
其中的一些问题确实是类似 /etc/fstab 或其它配置文件中不恰当条目导致的引导问题，
也有一些是由于应用程序或者系统软件和最新的内核不兼容的问题。
硬件兼容性问题也可能妨碍特定的内核启动。


% grub2对硬盘编码的定义
```note
    (hd0,1)         #默认语法, 由grub2自动判断分区格式
    (hd0,msdos1)    #此硬盘的分区为传统的MBR模式
    (hd0,gpt1)      #此硬盘的分区为GPT模式
    
硬盘以”hd“表示，后面会接一组数字; 以搜索顺序作为硬盘的编号(这个概念很重要!)
第1个搜索到的硬盘编号为”0“号，第2个搜索到的硬盘编号为”1“号，以此类推
每颗硬盘的第1个分区编号为”1“， 依序类推
```


% grub2的配置文件
```note
#grub2自动写入命令1->update-grub
#grub2自动写入命令2->grub-mkconfig -o /boot/grub/grub.cfg
#使用grub2自动写入命令它会依次读取/etc/default/grub文件, /etc/grub.d目录下的文件
#最后grub2自动写入命令会把这些文件全部整合到->/boot/grub/grub.cfg文件中
#grub2的默认配置文件为/boot/grub/grub.cfg,它由grub2自动写入命令生成，不要修改它！
/boot/grub/grub.cfg 


#该文件定义的是grub2的全局宏，修改内置的宏可以快速生成grub2的配置文件
#在/et/default/grub中，使用”key=value“的格式
#key全部为大写字母，value如果包含有空格或特殊字符，则需要使用引号包围
ysh@localhost:~$ vim /etc/default/grub


#/etc/grub.d/该目录包含以下脚本文件
#00_header,     05_debian_theme,        10_linux,       20_linux_xen
#30_os-prober,  30_uefi-firmware,       40_custom,      41_custom
ysh@localhost:~$ cd /etc/grub.d
```






