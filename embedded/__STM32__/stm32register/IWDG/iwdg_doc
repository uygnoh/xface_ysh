/*******************************************************************************
        => STM32F10x__IWDG__独立看门狗
*******************************************************************************/
//独立看门狗编寄存器描述
//_________________________________________________________
1 在键值寄存器（IWDG_KR）中写入（0xCCCC）, 开始启动独立看门狗
2 此时计数器开始从其复位值（0xFFF）递减
3 当计数器值计数到尾值（0x000）时会产生一个复位信号（IWDG_RESET）
4 无论何时，只要在键值寄存器（IWDG_KR）中写入（0xAAAA）通常说喂狗，自动重装载寄存器
  （IWDG_RLR）的值就会自动重新加载到计数器，从而避免看门狗复位
5 如果程序异常，就无法正常喂狗，从而系统复位


//独立看门狗编程步骤
//_________________________________________________________
1) IWDG_WriteAccessCmd();       //取消寄存器的写保护
2) IWDG_SetPrescaler();         //设置独立看门狗的预分频系数，确定时钟
3) IWDG_SetReload();            //设置独立看门狗的重装载数值，确定溢出时间
4) IWDG_Enable();               //使能独立看门狗
5) IWDG_ReloadCounter();        //在应用程序中喂狗


 //独立看门狗的溢出时间计算__CM3__
|_________________________________________________________|
|                                                         |
|       Tout = ((4 * 2^Prescaler) * RLR) / 40KHz          |
|                                                         |
|_________________________________________________________|



/*******************************************************************************
        => STM32F10x__IWDG__主程序
*******************************************************************************/
//pre, 预分频系数
//rlr, 自动重装载值
void iwdg_setup(uint8_t pre, uint16_t rlr)
{
        IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);   //取消寄存器的写保护
        IWDG_SetPrescaler(pre); //设置独立看门狗的预分频系数，确定时钟
        IWDG_SetReload(rlr);    //设置独立看门狗的重装载数值，确定溢出时间
        IWDG_ReloadCounter();   //在应用程序中喂狗
        IWDG_Enable();          //使能独立看门狗
}


//如果按键在1秒内被按下，那么LED_01就会常亮
//否则那第LED_01就会不停地闪烁
int main(void)
{
        LED_01 = OFF;
        delay_ms(100);
        LED_01 = ON;
        delay_ms(100);
        iwdg_setup(4, 625);                     //独立看门狗的溢出时间为（1s）
        while (1) {
                if (KEY_01) {                   //如果KEY_01被按下
                        IWDG_ReloadCounter();   //在应用程序中喂狗
                }
        }
}



