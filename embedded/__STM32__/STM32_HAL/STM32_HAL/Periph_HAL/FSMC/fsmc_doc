/*******************************************************************************
        => FSMC_SRAM
*******************************************************************************/
ADDRESS         //地址信号
OE#             //读使能信号
WE#             //写使能信号
CS1#            //片选信号1
CS2#            //片选信号2
LBS, UBS        //掩码信号
DOUT            //数据输出信号
当STM32访问（0x60000000-0x63FFFFFF）地址空间时，（FSMC_NE 1 = 0）引脚自动设置为低电平
当STM32访问（0x64000000-0x67FFFFFF）地址空间时，（FSMC_NE 2 = 0）引脚自动设置为低电平
当STM32访问（0x68000000-0x6BFFFFFF）地址空间时，（FSMC_NE 3 = 0）引脚自动设置为低电平
当STM32访问（0x6C000000-0x6FFFFFFF）地址空间时，（FSMC_NE 4 = 0）引脚自动设置为低电平
FSMC_BCR  1/2/3/4       //控制寄存器，配置存储器的类型，数据线宽度，信号有效极性
FSMC_BTR  1/2/3/4       //时序寄存器，配置SRAM访问时的各时序间延迟，如数据时间，地址保持时间
FSMC_BWTR 1/2/3/4       //写时序寄存器





/*******************************************************************************
        => STM32F429_SDRAM__
*******************************************************************************/
SDRAM有 4 个Bank，因此 SDRAM 的容量为：
（4096 * 256 * 16）                                       //每个Bank的大小
4 * 1024 * 1014 * 16 = 4 * 1M * 16bit = 64MBit（8MByte）  //4个Bank的大小
4096    //每个Bank的行数
256     //每个Bank的列数
16      //每个单元格的大小（16bit）


//SDRAM的引脚
//_________________________________________________________
CLK, CKE, CS#, RAS#, CAS#, WE#, A10     //命令引脚
A0, A1, A2, A3 ..., A11, BS0, BS1       //共14根地址线，A10被命令引脚利用了
D0, D1, D2, D3 ..., D15                 //共16根数据引脚
LDQM, UDQM                              //选择高低字节引脚


CS#                                     //片选信号
RAS#                                    //行地址选择
CAS#                                    //列地址选择
LDQM = 1; UDQM = 0;                     //低（8）个数据引脚有效
LDQM = 0; UDQM = 1;                     //高（8）个数据引脚有效
LDQM = 1; UDQM = 1;                     //（16）个数据引脚都有效



/*******************************************************************************
        => STM32F429__SDRAM__
*******************************************************************************/
___A___//命令译码器
        对（FMC）发送给SDRAM的命令进行解释，然后SDRAM会按命令动作
___B___//时钟发生器
        接收（FMC）发送给SDRAM的CLK同步时钟，并以CLK为时钟源，产生SDRAM内部工作所需的时钟
___C___//模式寄存器
        向SDRAM模式寄存器设置（模式值）后，可以让SDRAM工作在指定模式下
        SDRAM通过（CLK，CKE，CS#, ...）命令引脚，收到设置模式命令
        通过（A0~A11， BA0， BA1）地址线，将模式值写入SDRAM模式寄存器中
___C___//行列地址（锁存 缓存）
        FMC通过地址线将行列地址发送给SDRAM后，并不会立即交给（行列地址译码器）进行译码
        而是先锁存和缓存。
        1. 行地址锁存（A0 ~ A11， BA0, BA1）
        //当（RAS = 0）为低电平时表示传输的是行地址，命令译码器会发送（行地址有效信号）
        //给行地址锁存器， 此时它会将行地址（A0~A11）地址锁存起来。 一旦锁存起来后将不会
        //受到列地址信号的影响。 而（BA0，BA1）则会交给BANK控制逻辑，用于选择那一个BANK。
        2. 行地址缓存
        //临时存放行地址用，行地址译码器会从（行地址缓存）中得到行地下，进行译码后就能找到
        //Bank中的某一行
        3. 列地地址锁存（A0 ~ A11）
        //当（CAS = 0）为低电平时表示传输的是列地址，命令译码器会发送（列地址有效信号）
        //给列地址锁存器，此时它会将列地址（A0~A11）地址锁存起来。 一旦锁存起来后将不会
        //受到后续传输的行地址信号的影响。
        4. 列地址缓存
        //与行地址缓存作用一样
        5. 突发计数器（它的作用是，列地址 +1）
        //这个与突发访问有关（为了提高连续一行的效率）
___E___//写数据
        DQ0~DQ15 上的传输的数据会被缓存到（数据输入缓存），然后再写入SDRAM某个单元中保存。
        我们只需要通过（*((uint32_t *)0xC3443323) = 1000）即可实现操作。 FMC会自动将
        （1000 通过 DQ0~DQ15）传输给SRAM中。
___F___//读数据
        先将SDRAM中某个单元的数据缓存到（数据输出缓存），然后再通过DQ0~DQ15传输给（SFMC）。
        我们只需要通过（int a = *((uint32_t *)0xC3443323)）即可实现操作。 FMC会自动
        利用DQ0~DQ15从SDRAM读出数据。
        
        
        
/*******************************************************************************
        => STM32F429__SDRAM__
*******************************************************************************/
为了让SDRAM保持数据， 每个bit久必须（64ms）就得刷新 1 次。 SDRAM动态刷新时是一行一行刷新的。
发送（自动刷新命令）的间隔 = （64ms / 4096 = 0.015625ms = 15625ns）, FMC需要每隔15625ns
就向SDRAM发送一次自动刷新命令。


//自动刷新是由（FMC）来发送自动刷新命令的
        （FMC）会让__CKE__一直处于高电平，表示告诉SDRAM，CPU没有休眠， CLK有效
//自刷新不需要（FMC）来发送自动刷新命令， 而是由（SDRAM）自己来产生刷新
        （FMC）会让__CKE__一直处于低电平，表示告诉SDRAM，CPU休眠了， 无法提供CLK
        给它，让SDRAM进行自刷新。
//当（CKE）从低电平变为高电平时，表示CLK有效了，此时会退出自刷新，恢复自动刷新。



/*******************************************************************************
        => STM32F429__SDRAM__命令
*******************************************************************************/
