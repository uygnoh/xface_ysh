/*******************************************************************************
                         SCB_AIRCR 中断优先级分组配置
*******************************************************************************/ 
| //Application Interrupt and Reset Control Register
|_________________________________________________________|
|    Address         0xE000ED0C                           |
|    Reset state     0x00000000                           |
|_________________________________________________________|
|  31:16
|       //(访问钥匙密)任何对该寄存器的写操作,都必须同时写入“0x05FA”
|  10:8 
|       //(优先级分组)指定中断源的抢占优先级,响应优先级

//设置Cortex-M3为( 3位抢占优先级, 1位响应优先级 )
_________________________________________________
//清除高16位和(10,9,8位) 
SCB->AIRCR &= uint32_t(0x0000F8FF);
//写入访问钥匙，并设置优先级分组(3位抢占优先级, 1位响应优先级)
SCB->AIRCR |= uint32_t(0x05FA0000 | 0x00000400);



/*******************************************************************************
                    SysTick_Cortex-M3内部滴答定时器优先级设置
*******************************************************************************/ 
SCB->SHP[11]=0xF0;      //设置SYSTICK的优先级为15，注意SYSTICK
                        //属于系统异常，所以他的优先级在SCB里设置。



/*******************************************************************************
                          NVIC_外部中断号优先级配置
*******************************************************************************/ 
NVIC->IP[28] = uint8_t(0xF0);   //TIM2, 中断优先级设置
NVIC->IP[50] = uint8_t(0xF0);   //TIM5, 中断优先级设置



/*******************************************************************************
                              NVIC_外部中断使能
*******************************************************************************/ 
NVIC->ISER[0] = uint32_t(0x10000000); //TIM2, 中断使能
NVIC->ISER[1] = uint32_t(0x00020000); //TIM5, 中断使能
