

//返回（0）表示正常， 返回（1）表示不正常
//判断串行EERPOM是否正常
uint8_t eeprom_check_ok(void)
{
        if (i2c_check_device(EEPROM_DEV_ADDR) == 0) {
	        return (EEPROM_OK);
        } else {
	        //失败后，切记发送I2C总线停止信号
	        i2c_Stop();		
	        return (EEPROM_FAILED);
        }
}

//IIC__总线延时__（最快400KHz）
//工作条件：CPU = 72MHz,  MDK编译环境， 1 级优化
static void __delay(void)
{
        //循环次数为 10 时， SCL频率 = 205KHz
        //循环次数为  7 时， SCL频率 = 347KHz， SCL高电平时间 1.5us，  SCL低电平时间 2.87us
        //循环次数为  5 时， SCL频率 = 421KHz， SCL高电平时间 1.25us， SCL低电平时间 2.375us
        uint8_t i;
        for (i = 0; i < 10; i++);
}

//GPIO配置
static void i2c_gpio_conf(void)
{
        GPIO_InitTypeDef GPIO_InitStructure;
        RCC_APB2PeriphClockCmd(I2C_SCL_PORT, ENABLE);
        RCC_APB2PeriphClockCmd(I2C_SDA_PORT, ENABLE);

        GPIO_InitStructure.GPIO_Pin   = I2C_SCL_PIN | I2C_SDA_PIN;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_OD;        //开漏输出
        GPIO_Init(I2C_SCL_PORT, &GPIO_InitStructure);
        GPIO_Init(I2C_SDA_PORT, &GPIO_InitStructure);

        //给一个停止信号, 复位I2C总线上的所有设备到待机模式
        i2c_Stop();
}

//addr：设备的I2C总线地址
//返回值（0）表示正确， 返回（1）表示未探测到
//功能说明: 检测I2C总线设备，CPU向发送设备地址，然后读取设备应答来判断该设备是否存在
uint8_t i2c_check_device(uint8_t addr)
{
        uint8_t ack;
        i2c_gpio_conf();                //配置GPIO
        i2c_Start();                    //发送启动信号
        //发送设备地址 + 读写控制bit（0 = w， 1 = r)  bit7 先传
        i2c_write_byte(addr | I2C_WRITE);
        ack = i2c_wait_ack();           //检测设备的ACK应答
        i2c_Stop();			//发送停止信号
        return ack;
}

/*******************************************************************************
        => 软件模拟（I2C）__宏定义层__
*******************************************************************************/
#define I2C_ACK                 (0)
#define I2C_NACK                (1)
/*________________________________________________________* 
| AT24C02 2kb = 2048bit = 2048/8 Bytes = 256 Bytes        |
| 32 pages of 8 bytes each                                |
|                                                         |
|   Device Address                                        |
|   1  0  1  0  A2  A1  A0  R/W                           |
|   1  0  1  0  0   0   0   0 = 0XA0                      |
|   1  0  1  0  0   0   0   1 = 0XA1                      |
|_________________________________________________________|
|   AT24C01/02每页有8个字节                                 *
|   AT24C04/08A/16A每页有16个字节                           *
|_________________________________________________________*/
#define EEPROM_OK               (0)     //返回正确
#define EEPROM_FAILED           (1)     //返回错误
#define EEPROM_I2C_WRITE        (0)     //写控制bit
#define EEPROM_I2C_READD        (1)     //读控制bit
#define EEPROM_DEVICE_ADDR      (0xA0)  //24xx02的设备地址
#define EEPROM_PAGE_SIZE        (8)     //24xx02的页面大小
#define EEPROM_SIZE             (256)   //24xx02总容量

#define I2C_SCL_PIN             (GPIO_Pin_0)
#define I2C_SCL_PORT            (GPIOF)
#define I2C_SDA_PIN             (GPIO_Pin_1)
#define I2C_SCL_PORT            (GPIOF)
#define I2C_SCL_LOW()           (GPIO_ResetBits(I2C_PORT, I2C_SCL_PIN))
#define I2C_SCL_HIGH()          (GPIO_SetBits(I2C_PORT, I2C_SCL_PIN))
#define I2C_SDA_LOW()           (GPIO_ResetBits(I2C_PORT, I2C_SDA_PIN))
#define I2C_SDA_HIGH()          (GPIO_SetBits(I2C_PORT, I2C_SDA_PIN))
#define I2C_READ_SDA()          (GPIO_ReadInputDataBit(I2C_PORT, I2C_SDA_PIN))//读SDA口线状态
#define I2C_DELAY()             do {                                    \
                                        __delay();                      \
                                } while (0)

/*******************************************************************************
        => 软件模拟（I2C）__底层时序__（高位在前，低位在后）
*******************************************************************************/
//当SCL高电平时，SDA出现一个下跳沿表示I2C总线启动信号
//_______________________________________________________//
void i2c_start(void)
{
        I2C_SDA_HIGH();         //SDA线拉高
        I2C_SCL_HIGH();         //SCL线拉高
        I2C_DELAY();            //稍作延时
        I2C_SDA_LOW();          //SDA线拉低
        I2C_DELAY();            //稍作延时
        I2C_SCL_LOW();          //SCL线拉低
        I2C_DELAY();            //稍作延时
}
//当SCL高电平时，SDA出现一个上跳沿表示I2C总线停止信号
//_______________________________________________________//
void i2c_stop(void)
{
        I2C_SDA_LOW();          //SDA线拉低
        I2C_SCL_HIGH();         //SCL线拉高
        I2C_DELAY();            //稍作延时
        I2C_SDA_HIGH();         //SDA线拉高
}
//CPU从（I2C总线）上读取一个字节的数据， 先读取高位___BIT7___
//_______________________________________________________//
uint8_t i2c_read_byte(void)
{
        uint8_t i;
        uint8_t val = 0;
        for (i = 0; i < 8; i++) {
                val <<= 1;
                I2C_SCL_HIGH();
                I2C_DELAY();
                if (I2C_READ_SDA()) {
                        val++;
                }
                I2C_SCL_LOW();
                I2C_DELAY();
        }
        return (val);
}
//CPU向（I2C总线）上写入一个字节数据， 先写入高位___BIT7___
//_______________________________________________________//
void i2c_write_byte(uint8_t dat)
{
        uint8_t i;
        for (i = 0; i < 8; i++) {
                if (dat & 0x80) {
                        I2C_SDA_HIGH();
                } else {
                        I2C_SDA_LOW();
                }
                I2C_DELAY();
                I2C_SCL_HIGH();
                I2C_DELAY();
                I2C_SCL_LOW();
                if (i == 7) {
                        I2C_SDA_HIGH(); //释放总线
                }
                dat <<= 1;
                I2C_DELAY();
        }
}
//CPU产生1个___ACK信号__（应答）
//_______________________________________________________//
void i2c_ack(void)
{
        I2C_SDA_LOW();          //CPU驱动SDA=0
        I2C_DELAY();            //稍作延时
        I2C_SCL_HIGH();         //CPU产生一个一升沿
        I2C_DELAY();            //稍作延时
        I2C_SCL_LOW();          //拉低SCL总线
        I2C_DELAY();            //稍作延时
        I2C_SDA_HIGH();         //CPU释放SDA总线
}
//CPU产生1个___NACK信号__（非应答）
//_______________________________________________________//
void i2c_not_ack(void)
{
        I2C_SDA_HIGH();         //CPU驱动SDA=1
        I2C_DELAY();            //稍作延时
        I2C_SCL_HIGH();         //CPU产生一个一升沿
        I2C_DELAY();            //稍作延时
        I2C_SCL_LOW();          //拉低SCL总线
        I2C_DELAY();            //稍作延时
}
//（0）I2C_ACK_____返回正确的应答信号
//（1）I2C_NACK____表示器件无应答信号
//CPU产生一个时钟， 并读取器件的（ACK）应答信号
//_______________________________________________________//
uint8_t i2c_wait_ack(void)
{
        uint8_t retval;
        I2C_SDA_HIGH();         //CPU释放总线
        I2C_DELAY();            //稍作延时
        I2C_SCL_HIGH();         //CPU驱动SCL=1，此时器件会返回ACK应答信号
        I2C_DELAY();            //稍作延时
        if (I2C_READ_SDA()) {
                retval = I2C_NACK;
        } else {
                retval = I2C_ACK;
        }
        I2C_SCL_LOW();
        I2C_DELAY();
        return (retval);
}
