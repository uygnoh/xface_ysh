/*******************************************************************************
        => STM32F10x__RTC__实时时钟
        => RTC是个独立的定时器
*******************************************************************************/
RTC_PRL         //RTC重装载寄存器
RTC_DIV         //RTC预分频器
TR_CLK          //一般产生（1秒）的脉冲
RTC_CNT         //向上计数器（32位）


//BKP备份寄存器
//备份寄存器是（42个16位）的寄存器，可以用来存储（84）个字节数据
//执行以下操作将使能对后备份寄存器和RTC的访问（它可以由电池维持供电）
//_________________________________________________________
1 设置寄存器（RCC_APB1ENR）的（PWREN， BKPEN）位，使能电源和后备时钟
2 设置寄存器（PWR_CR）的（DBP）位，使能对RTC和后备寄存器的访问


//RTC寄存器
//_________________________________________________________
RTC_CRH,  RTC_CRL               //RTC控制寄存器
RTC_PRLH, RTC_PRLL              //RTC预分频重装载寄存器
RTC_DIVH, RTC_DIVL              //RTC预分频寄存器
RTC_CNTH, RTC_CNTL              //RTC计数器寄存器
RTC_ALRH, RTC_ALRL              //RTC闹钟寄存器
1 修改（CRH，CRL）寄存器，必须先判断（RSF位），确定已经同步
2 修改（CRH，CRL）寄存器，必须先配置（CNF=1）进入配置模式，设置（CNF=0）为退出配置模式
3 同时在对RTC相关寄存器写操作之前，必须判断上一次写操作已经结束，也就是判断（RTOFF=1）


//RTC函数
//_________________________________________________________
void RCC_RTCCLKConfig(uint32_t CLKSource);      //时钟源选择
void RCC_RTCCLKCmd(FunctionalState NewState);   //时钟使能
void RTC_SetPrescaler(uint32_t PrescalerValue); //设置预分频值
void RTC_SetCounter(uint32_t CounterValue);     //设置计数器值
void RTC_SetAlarm(uint32_t AlarmValue);         //设置闹钟的值

void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState);

void RTC_EnterConfigMode(void); //允许RTC配置（CRL【CNF】）
void RTC_ExitConfigMode(void);  //退出RTC配置（CRL【CNF】）
void RTC_WaitForLastTask(void); //等待上次操作完成（CRL【RTOFF】）
void RTC_WaitForSynchro(void);  //等待时钟同步（CRL【RSF】）

FlagStatus RTC_GetFalgStatus(uint16_t RTC_FLAG);
void RTC_ClearFlag(uint16_t RTC_FLAG);
ITStauts RTC_GetITStatus(uint16_t RTC_IT);
void RTC_ClearITPendingBit(uint16_t RTC_IT);

PWR_BackupAccessCmd();          //后备区域访问使能
RCC_APB1PeriphClockCmd();       //使能PWR和BKP时钟
RCC_LSEConfig();                //打开LSE, RTC选择LSE作为时钟源
uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR);//读BKP寄存器
void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data);


//RTC配置流程
//_________________________________________________________
1 使能PWR和BKP时钟（RCC_APB1PeriphClockCmd()）
2 使能后备寄存器访问（PWR_BackupAccessCmd()）
3 配置RTC时钟源，使能RTC
  RCC_RTCCLKConfig()
  RCC_RCCLKCmd()
  如果使用LSE, RCC_LSEConfig(RCC_LSE_ON)
4 设置RTC预分频系数（RCT_SetPrescaler()）
5 设置时间（RTC_SetCounter()）
6 如果需要开启相关中断（RTC_ITConfig()）
7 编写中断服务函数（RTC_IRQHandler()）
8 部分操作要等待写操作完成和同步
  RTC_WaitForLastTask();
  RTC_WaitForSynchro();

