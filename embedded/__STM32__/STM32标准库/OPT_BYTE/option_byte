/*******************************************************************************
        => STM32F10x__选项字节__
*******************************************************************************/
//_____________________________________________________________
// 选项字节结构体（只需要写低8位就可以，高8位会自动生成）
//_____________________________________________________________
typedef struct {
        __IO uint16_t RDP;      //RDP 及 nRDP
        __IO uint16_t USER;     //USER 及 nUSER，下面类似
        __IO uint16_t Data0;
        __IO uint16_t Data1;
        __IO uint16_t WRP0;
        __IO uint16_t WRP1;
        __IO uint16_t WRP2;
        __IO uint16_t WRP3;
} OB_TypeDef;
//强制转换为选项字节结构体指针
#define OB      ((OB_TypeDef *) OB_BASE)
//选项字节基地址
#define OB_BASE ((uint32_t)0x1FFFF800)



//_____________________________________________________________
//选项字节是一段特殊的（FLASH）空间
//而表示（n）的同类项是该项的反码，即nUSER的值等于（~USER）
//_____________________________________________________________
.______________________________________________________________.
|       Address:        31:24   23:16   15:8    7:0            |
|       0x1FFF F800     nUSER   USER    nRDP    RDP            |
|       0x1FFF F804     nData1  Data1   nData   Data0          |
|       0x1FFF F808     nWRP1   WRP1    nWRP0   WRP0           |
|       0x1FFF F80C     nWRP3   WRP3    nWRP2   WRP2           |
|______________________________________________________________|



//_____________________________________________________________
// 地址（0x1FFF F800）
//_____________________________________________________________
[7:0]__RDP              //读保护选项字节
        (RDP  = 0xA5)   //内部__FLASH__处于无读保护状态
        (RDP != 0xA5)   //内部__FLASH__处于读保护状态
[23:16]__USER           //用户选项字节
   | bit18 |            nRST_STDBY待机模式复位事件
   |  0    |            //当进入待机模式产生复位事件
   |  1    |            //进入待机模式不产生复位事件
   | bit17 |            nRST_STOP停机复位事件
   |  0    |            //当进入停机模式产生复位事件
   |  1    |            //进入停机模式不产生复位事件
   | bit16 |            WDG_SW看门狗事件
   |  0    |            //硬件看门狗事件
   |  1    |            //软件看门狗事件



/*******************************************************************************
        => STM32F10x__修改选项字节__
*******************************************************************************/
//_____________________________________________________________
// 修改选项字节流程
//_____________________________________________________________
第一步：解除（FLASH_CR）寄存器的访问限制
        1.向FPEC键值寄存器（FLASH_KEYR）中写入（KEY1=0x45670123）
        2.向FPEC键值寄存器（FLASH_KEYR）中写入（KEY2=0xCDEF89AB）
第二步：解除对选项字节的访问限制
        //向（FLASH_OPTKEYR）中写入（KEY1=0x45670123）
        //向（FLASH_OPTKEYR）中写入（KEY2=0xCDEF89AB）
第三步：配置（FLASH_CR）寄存器中的（OPTPG）位，准备修改选项字节
        //直接使用指针操作修改选项字节内容
        //对于读保护的解除，由于它会擦除FLASH中的内容，所以需检测状态寄存器标志位
        //若设置读保护及解除，需要给芯片重新上电复位，以使新配置的选项字节生效
        //对于设置写保护及其解除，需要给芯片进行系统复位，以使新配置的选项字节生效
        
        
        
/*******************************************************************************
        => STM32F10x__修改选项字节程序__写保护
*******************************************************************************/
printf("写保护状态： 0x%x\r\n", FLASH_GetWriteProtectionOptionByte());

void write_protect(void)
{
        FLASH_Unlock();                                         //解锁Flash
        FLASH_EraseOptionBytes();                               //擦除选项字节
        FLASH_EnableWriteProtection(FLASH_WRProt_AllPages);     //全部Flash写保护
        
}

void write_protect_disable(void)
{
        FLASH_Unlock();                                         //解锁Flash
        FLASH_EraseOptionBytes();                               //擦除选项字节
        FLASH_EnableWriteProtection(0x00000000);                //解除Flash写保护
        NVIC_SystemReset();                                     //系统复位
}



/*******************************************************************************
        => STM32F10x__修改选项字节程序__读保护
*******************************************************************************/
printf("读保护状态：把前面（4K）空间都作成写保护操作了！");
printf("读保护状态：可以使用（SRAM调式功能来取消读保护）！");
printf("读保护状态： 0x%x\r\n", FLASH_GetReadOutProtectionStatus());

void read_protect(void)
{
        FLASH_Unlock();                                         //解锁Flash
        //FLASH_EraseOptionBytes();                             //擦除选项字节
        FLASH_ReadOutProtection(ENABLE);                        //打开读保护
        //需要上电复位才能正常运行程序
}
//_____________________________________________________________
//解除读保护，程序会丢失
//_____________________________________________________________
void read_protect_disable(void)
{
        FLASH_Unlock();                                         //解锁Flash
        //FLASH_EraseOptionBytes();                             //擦除选项字节
        FLASH_ReadOutProtection(DISABLE);                       //解除读保护
        //需要上电复位才能正常运行程序
}

