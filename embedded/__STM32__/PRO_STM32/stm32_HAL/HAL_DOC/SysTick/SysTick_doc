############################################################
### % SysTick优先级设置(core_cm3.h)
############################################################
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
    //  判断 tick 的值是否大于 2^24，如果大于，则不符合规则
    if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);

    // 初始化reload寄存器的值    
    //之所以要减1 个人认为是因为计数是从零开始的
    SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;  

    // 配置中断优先级，配置为15，默认为最低的优先级
    //（1<<4为16，—1为15）
    NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1); 

    // 初始化counter的值为0    
    SysTick->VAL   = 0; 

    // 配置 systick 的时钟为 72M
    // 使能中断
    // 使能systick
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
                     SysTick_CTRL_TICKINT_Msk   | 
                     SysTick_CTRL_ENABLE_Msk;                    
    return(0);     
}
% Systick模块初始化配置函数（Systick_config）中设定模块中断优先级的函数为：
NVIC_SetPriority((SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
1 % 参数SysTick_IRQn为systick基址，这个没什么好说的
2 % 关键在参数 (1<<__NVIC_PRIO_BITS) - 1);
这个参数即占先优先级值，其中—NVIC_PRIO_BITS是stm32.h中的宏定义，库函数默认为4，
表示用4位表示占先优先级，因为m3内核只有4位用来表示占先优先级和响应优先级，那么响应
优先级就剩下0位了，也就是没有响应优先级之分，
按照上式计算若NVIC_PRIO_BITS为4则占先优先级为15，即最低优先级值
依次可类推，即 (1<<__NVIC_PRIO_BITS) - 1);表示的是可用的最低优先级（1<<4为16，—1为15），
将后面那个红色的1改为其他值即可改变此模块占先优先级



############################################################
### 
############################################################
/**
  * @brief This function provides minimum delay (in milliseconds) based
  *        on variable incremented.
  * @note In the default implementation , SysTick timer is the source of time base.
  *       It is used to generate interrupts at regular time intervals where uwTick
  *       is incremented.
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
  }

  while ((HAL_GetTick() - tickstart) < wait)
  {
  }
}





