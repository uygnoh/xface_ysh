/*
 *      更新日期: 2022/03/10
 *      更新日期: 
 *      更新日期: 
 *      更新日期: 
 */
/******************************************************************************/
/*                                                                            */
/*                              M16                                           */
/*                                                                            */
/******************************************************************************/
#ifndef __M32_H__
#define __M32_H__
#include "stm32f10x.h"
#define M16_00                  ((uint16_t)0x0001)
#define M16_01                  ((uint16_t)0x0002)
#define M16_02                  ((uint16_t)0x0004)
#define M16_03                  ((uint16_t)0x0008)
#define M16_04                  ((uint16_t)0x0010)
#define M16_05                  ((uint16_t)0x0020)
#define M16_06                  ((uint16_t)0x0040)
#define M16_07                  ((uint16_t)0x0080)
#define M16_08                  ((uint16_t)0x0100)
#define M16_09                  ((uint16_t)0x0200)
#define M16_10                  ((uint16_t)0x0400)
#define M16_11                  ((uint16_t)0x0800)
#define M16_12                  ((uint16_t)0x1000)
#define M16_13                  ((uint16_t)0x2000)
#define M16_14                  ((uint16_t)0x4000)
#define M16_15                  ((uint16_t)0x8000)
/******************************************************************************/
/*                                                                            */
/*                              BIT32                                         */
/*                                                                            */
/******************************************************************************/
#define BIT_00                  ((uint32_t)0x00000001)
#define BIT_01                  ((uint32_t)0x00000002)
#define BIT_02                  ((uint32_t)0x00000004)
#define BIT_03                  ((uint32_t)0x00000008)
#define BIT_04                  ((uint32_t)0x00000010)
#define BIT_05                  ((uint32_t)0x00000020)
#define BIT_06                  ((uint32_t)0x00000040)
#define BIT_07                  ((uint32_t)0x00000080)
#define BIT_08                  ((uint32_t)0x00000100)
#define BIT_09                  ((uint32_t)0x00000200)
#define BIT_10                  ((uint32_t)0x00000400)
#define BIT_11                  ((uint32_t)0x00000800)
#define BIT_12                  ((uint32_t)0x00001000)
#define BIT_13                  ((uint32_t)0x00002000)
#define BIT_14                  ((uint32_t)0x00004000)
#define BIT_15                  ((uint32_t)0x00008000)
#define BIT_16                  ((uint32_t)0x00010000)
#define BIT_17                  ((uint32_t)0x00020000)
#define BIT_18                  ((uint32_t)0x00040000)
#define BIT_19                  ((uint32_t)0x00080000)
#define BIT_20                  ((uint32_t)0x00100000)
#define BIT_21                  ((uint32_t)0x00200000)
#define BIT_22                  ((uint32_t)0x00400000)
#define BIT_23                  ((uint32_t)0x00800000)
#define BIT_24                  ((uint32_t)0x01000000)
#define BIT_25                  ((uint32_t)0x02000000)
#define BIT_26                  ((uint32_t)0x04000000)
#define BIT_27                  ((uint32_t)0x08000000)
#define BIT_28                  ((uint32_t)0x10000000)
#define BIT_29                  ((uint32_t)0x20000000)
#define BIT_30                  ((uint32_t)0x40000000)
#define BIT_31                  ((uint32_t)0x80000000)
/******************************************************************************/
/*                                                                            */
/*                              BitBand                                       */
/*                                                                            */
/******************************************************************************/
#define GPIOA_IDR_A             (GPIOA_BASE + 0x08)
#define GPIOA_ODR_A             (GPIOA_BASE + 0x0C)
#define GPIOB_IDR_B             (GPIOB_BASE + 0x08)
#define GPIOB_ODR_B             (GPIOB_BASE + 0x0C)
#define GPIOC_IDR_C             (GPIOC_BASE + 0x08)
#define GPIOC_ODR_C             (GPIOC_BASE + 0x0C)
#define GPIOD_IDR_D             (GPIOD_BASE + 0x08)
#define GPIOD_ODR_D             (GPIOD_BASE + 0x0C)
#define GPIOE_IDR_E             (GPIOE_BASE + 0x08)
#define GPIOE_ODR_E             (GPIOE_BASE + 0x0C)
#define GPIOF_IDR_F             (GPIOF_BASE + 0x08)
#define GPIOF_ODR_F             (GPIOF_BASE + 0x0C)
#define GPIOG_IDR_G             (GPIOG_BASE + 0x08)
#define GPIOG_ODR_G             (GPIOG_BASE + 0x0C)

#define BIT_BAND(addr, bit_num)  *((volatile unsigned long *)   \
  ((addr & 0xF0000000) + 0x2000000 + ((addr & 0xFFFFF) << 5) + (bit_num << 2)))

#define PA_IN(number)           BIT_BAND(GPIOA_IDR_A, number)
#define PA_OUT(number)          BIT_BAND(GPIOA_ODR_A, number)
#define PB_IN(number)           BIT_BAND(GPIOB_IDR_B, number)
#define PB_OUT(number)          BIT_BAND(GPIOB_ODR_B, number)
#define PC_IN(number)           BIT_BAND(GPIOC_IDR_C, number)
#define PC_OUT(number)          BIT_BAND(GPIOC_ODR_C, number)
#define PD_IN(number)           BIT_BAND(GPIOD_IDR_D, number)
#define PD_OUT(number)          BIT_BAND(GPIOD_ODR_D, number)
#define PE_IN(number)           BIT_BAND(GPIOE_IDR_E, number)
#define PE_OUT(number)          BIT_BAND(GPIOE_ODR_E, number)
#define PF_IN(number)           BIT_BAND(GPIOF_IDR_F, number)
#define PF_OUT(number)          BIT_BAND(GPIOF_ODR_F, number)
#define PG_IN(number)           BIT_BAND(GPIOG_IDR_G, number)
#define PG_OUT(number)          BIT_BAND(GPIOG_ODR_G, number)



/*******************************************************************************
        => STM32F10x_GPIO引脚配置
*******************************************************************************/
/* ____________________________________________________________________________
                GPIOx_CRL =>低位寄存器配置GPIO的（0~7） 引脚
                GPIOx_CRH =>高位寄存器配置GPIO的（8~15）引脚

                0 0 0 0     (  0  )模拟输入
                0 1 0 0     (  4  )浮空输入(复位后的状态) 
                1 0 0 0     (  8  )下拉输入(如果 PxODR = 0)
                1 0 0 0     (  8  )上拉输入(如果 PxODR = 1)
                1 1 0 0     (  C  )保留

                0 0 0 1     (  1  )推挽输出(10MHz)
                0 0 1 0     (  2  )推挽输出(02MHz)
                0 0 1 1     (  3  )推挽输出(50MHz)
                
                0 1 0 1     (  5  )开漏输出(10MHz)
                0 1 1 0     (  6  )开漏输出(02MHz)
                0 1 1 1     (  7  )开漏输出(02MHz)
                
                1 0 0 1     (  9  )复用推挽输出(10MHz)
                1 0 1 0     (  A  )复用推挽输出(02MHz)
                1 0 1 1     (  B  )复用推挽输出(50MHz)
                
                1 1 0 1     (  D  )复用开漏输出(10MHz)
                1 1 1 0     (  E  )复用开漏输出(02MHz)
                1 1 1 1     (  F  )复用开漏输出(50MHz)
____________________________________________________________________________ */



/*******************************************************************************
        => STM32F10x_RCC_AHBENR
*******************************************************************************/
#define DMA1_CLOCK_ENABLE()     do {RCC->AHBENR |= BIT_00; } while (0)  // 0_DMA1
#define DMA2_CLOCK_ENABLE()     do {RCC->AHBENR |= BIT_01; } while (0)  // 1_DMA2
#define SRAM_CLOCK_ENABLE()     do {RCC->AHBENR |= BIT_02; } while (0)  // 2_SRAM
#define FLITF_CLOCK_ENABLE()    do {RCC->AHBENR |= BIT_04; } while (0)  // 4_FLITF
#define CRC_CLOCK_ENABLE()      do {RCC->AHBENR |= BIT_06; } while (0)  // 6_CRC
#define SDIO_CLOCK_ENABLE()     do {RCC->AHBENR |= BIT_010;} while (0)  //10_SDIO



/*******************************************************************************
        => STM32F10x_RCC_APB2ENR
*******************************************************************************/
#define AFIO_CLOCK_ENABLE()     do {RCC->APB2ENR |= BIT_00;} while (0)  // 0_AFIO
#define GPIOA_CLOCK_ENABLE()    do {RCC->APB2ENR |= BIT_02;} while (0)  // 2_GPIOA
#define GPIOB_CLOCK_ENABLE()    do {RCC->APB2ENR |= BIT_03;} while (0)  // 3_GPIOB
#define GPIOC_CLOCK_ENABLE()    do {RCC->APB2ENR |= BIT_04;} while (0)  // 4_GPIOC
#define GPIOD_CLOCK_ENABLE()    do {RCC->APB2ENR |= BIT_05;} while (0)  // 5_GPIOD
#define GPIOE_CLOCK_ENABLE()    do {RCC->APB2ENR |= BIT_06;} while (0)  // 6_GPIOE
#define GPIOF_CLOCK_ENABLE()    do {RCC->APB2ENR |= BIT_07;} while (0)  // 7_GPIOF
#define GPIOG_CLOCK_ENABLE()    do {RCC->APB2ENR |= BIT_08;} while (0)  // 8_GPIOG
#define ADC1_CLOCK_ENABLE()     do {RCC->APB2ENR |= BIT_09;} while (0)  // 9_ADC1
#define ADC2_CLOCK_ENABLE()     do {RCC->APB2ENR |= BIT_10;} while (0)  //10_ADC2
#define TIM1_CLOCK_ENABLE()     do {RCC->APB2ENR |= BIT_11;} while (0)  //11_TIM1
#define SPI1_CLOCK_ENABLE()     do {RCC->APB2ENR |= BIT_12;} while (0)  //12_SPI1
#define TIM8_CLOCK_ENABLE()     do {RCC->APB2ENR |= BIT_13;} while (0)  //13_TIM8
#define USART1_CLOCK_ENABLE()   do {RCC->APB2ENR |= BIT_14;} while (0)  //14_USART1
#define ADC3_CLOCK_ENABLE()     do {RCC->APB2ENR |= BIT_15;} while (0)  //15_ADC3
#define TIM9_CLOCK_ENABLE()     do {RCC->APB2ENR |= BIT_19;} while (0)  //19_TIM9
#define TIM10_CLOCK_ENABLE()    do {RCC->APB2ENR |= BIT_19;} while (0)  //20_TIM10
#define TIM11_CLOCK_ENABLE()    do {RCC->APB2ENR |= BIT_19;} while (0)  //21_TIM11



/*******************************************************************************
        => STM32F10x_RCC_APB1ENR
*******************************************************************************/
#define TIM2_CLOCK_ENABLE()     do {RCC->APB1ENR |= BIT_00;} while (0)  // 0_TIM2
#define TIM3_CLOCK_ENABLE()     do {RCC->APB1ENR |= BIT_01;} while (0)  // 1_TIM3
#define TIM4_CLOCK_ENABLE()     do {RCC->APB1ENR |= BIT_02;} while (0)  // 2_TIM4
#define TIM5_CLOCK_ENABLE()     do {RCC->APB1ENR |= BIT_03;} while (0)  // 3_TIM5
#define TIM6_CLOCK_ENABLE()     do {RCC->APB1ENR |= BIT_04;} while (0)  // 4_TIM6
#define TIM7_CLOCK_ENABLE()     do {RCC->APB1ENR |= BIT_05;} while (0)  // 5_TIM7
#define TIM12_CLOCK_ENABLE()    do {RCC->APB1ENR |= BIT_06;} while (0)  // 6_TIM12
#define TIM13_CLOCK_ENABLE()    do {RCC->APB1ENR |= BIT_07;} while (0)  // 7_TIM13
#define TIM14_CLOCK_ENABLE()    do {RCC->APB1ENR |= BIT_08;} while (0)  // 8_TIM14
#define WWDG_CLOCK_ENABLE()     do {RCC->APB1ENR |= BIT_11;} while (0)  //11_WWDG
#define SPI2_CLOCK_ENABLE()     do {RCC->APB1ENR |= BIT_14;} while (0)  //14_SPI2
#define SPI3_CLOCK_ENABLE()     do {RCC->APB1ENR |= BIT_15;} while (0)  //15_SPI3
#define USART2_CLOCK_ENABLE()   do {RCC->APB1ENR |= BIT_17;} while (0)  //17_USART2
#define USART3_CLOCK_ENABLE()   do {RCC->APB1ENR |= BIT_18;} while (0)  //18_USART3
#define USART4_CLOCK_ENABLE()   do {RCC->APB1ENR |= BIT_19;} while (0)  //19_USART4
#define USART5_CLOCK_ENABLE()   do {RCC->APB1ENR |= BIT_20;} while (0)  //20_USART5
#define I2C1_CLOCK_ENABLE()     do {RCC->APB1ENR |= BIT_21;} while (0)  //21_I2C1
#define I2C2_CLOCK_ENABLE()     do {RCC->APB1ENR |= BIT_22;} while (0)  //22_I2C2
#define USB_CLOCK_ENABLE()      do {RCC->APB1ENR |= BIT_23;} while (0)  //23_USB
#define CAN_CLOCK_ENABLE()      do {RCC->APB1ENR |= BIT_25;} while (0)  //25_CAN
#define BKP_CLOCK_ENABLE()      do {RCC->APB1ENR |= BIT_27;} while (0)  //27_BKP
#define PWR_CLOCK_ENABLE()      do {RCC->APB1ENR |= BIT_28;} while (0)  //28_PWR
#define DAC_CLOCK_ENABLE()      do {RCC->APB1ENR |= BIT_29;} while (0)  //29_DAC



#include "stm32f10x.h"
/*******************************************************************************
  函数名称: void delay_us(uint32_t nus)
  输入参数: 无
  输出参数: 无
  函数功能: 延时1us
          设置系统时钟为72MHz, SysTick定时器时钟频率为“72MHz / 8 = 9MHz”
          SysTick是一个“24”位的递减计数器， SysTick->LOAD为自动重装载计数器
*******************************************************************************/
void delay_us(uint32_t nus)
{
        uint32_t status;
        SysTick->LOAD = 9 * nus;        //设置自动重装载寄存器的数值
        SysTick->VAL  = 0x00;           //清空计数器，使用“/8”时钟源
        SysTick->CTRL = 0x01;           //打开SysTick定时器
        do {                            //获取SysTick定时器的状态
                status = SysTick->CTRL;
        } while ((status & 0x01) && (!(status & (1<<16))));
        SysTick->CTRL = 0x00;           //关闭SysTick定时器
        SysTick->VAL  = 0x00;           //清空计数器
}
/*******************************************************************************
  函数名称: void delay_ms(uint32_t nms)
  输入参数: 无
  输出参数: 无
  函数功能: 延时1ms
          设置系统时钟为72MHz, SysTick定时器时钟频率为“72MHz / 8 = 9MHz”
          SysTick是一个“24”位的递减计数器， SysTick->LOAD为自动重装载计数器
*******************************************************************************/
void delay_ms(uint32_t nms)
{
        uint32_t status;
        SysTick->LOAD = 9000 * nms;
        SysTick->VAL  = 0x00;
        SysTick->CTRL = 0x01;
        do {
                status = SysTick->CTRL;
        } while ((status & 0x01) && (!(status & (1<<16))));
        SysTick->CTRL = 0x00;
        SysTick->VAL  = 0X00;
}
#endif
