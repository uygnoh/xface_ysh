###############################################################
### % gcc编译stm32f103出现错误!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
###############################################################
init.c:(.text.__libc_init_array+0x20): undefined reference to `_init'
% 解决方法：
方法一：去掉makefile中的编译选项：-nostartfiles
方法二：方法一不凑效的情况下，添加编译选型：--specs=nano.specs
% 要使用newlib-nano，用户应提供额外的gcc链接时间选项：–specs=nano.specs
Nano.specs还处理两个额外的gcc库：libstdc ++ _ s.a和libsupc ++ _ s.a，它们针对代码大小进行了优化。



###########################################################
### % OpenOCD-GDB 调式程序
###########################################################
% 第1个终端输入
openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg

% 第2个终端输入
arm-none-eabi-gdb blink.elf
	(gdb)	target remote localhost:3333
	(gdb)	monitor reset
	(gdb)	monitor halt
	(gdb)	load

===========================================================
=== OpenOCD配置
===========================================================
1 % sudo apt-get install openocd

2 % OpenOCD支持ST-Link的三个版本，分别是ST-LINK, ST-LINK/V2, ST-LINK/V2-1
  % 配置文件要引用对应的ST-LINK配置，可以通过 lsusb 命令查看所使用的ST-LINK的ID确定版本
版本             配置文件                         ID
ST-LINK         interface/stlink-v1.cfg         0483:3744
ST-LINK/V2      interface/stlink-v2.cfg         0483:3748
ST-LINK/V2-1    interface/stlink-v2-1.cfg       0483:374b

3 复制OpenOCD文件(60-openocd.rules)到/etc/udev/rules.d/
#cd openocd/share/openocd/contrib/
# 60-openocd.rules
# Copy this file to /etc/udev/rules.d/

4 OpenOCD连接stm32目标板 
  % openocd -f board/st_nucleo_f4.cfg
  % openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg
	
	
	
###############################################################
### % ST_Link
###############################################################
% sudo apt-get install openocd
git clone https://github.com/texane/stlink.git
apt-get install cmake libusb-1.0
cd stlink/
make
cp st-flash /usr/bin
cp ~/stlink/etc/udev/rules.d/49-stlinkv2-1.rules /etc/udev/rules.d
	
___________________________________________________________             
% 添加规则，其中OWNER 修改为你的用户名
sudo cp 49-stlinkv2.rules  /etc/udev/rules.d/
SUBSYSTEM=="usb", ATTR{idVendor}=="0483", ATTR{idProduct}=="3748",  \
MODE:="0666", SYMLINK+="stlinkv2_%n" ,OWNER="ysh"

% 让系统识别新的规则
sudo udevadm control --reload-rules
sudo udevadm trigger



###############################################################
% arm-none-eabi-gdb的调试指令
###############################################################
l               list指令的缩写，意为列出当前执行的源代码。
                同时输入指令后重复按回车等效于再次输入上次的指令 
c               continue的缩写，在嵌入式GDB中我们不能使用RUN指令来运行代码，
                相应的我们需要continue指令来运行。
s               step缩写，会进入子函数的单步运行
n               next缩写，即会跳过子函数的单步运行
u               until缩写使用时后方加行号如： u 16 即运行到第16行
p               print缩写，使用时后面加变量名称如：p tmp ，用来显示变量数值
display         使用时后面加变量名称如：display tmp ，用于跟踪变量数值，
                在每次执行停下时会自动显示变量数值。
finish          完成并跳出当前的子函数
———————————————————————————————————————————————————————————————————————————————
b               break缩写，用于在程序中打断点，使用方式有很多种
b 16            在当前低16行代码出加断点。
b i=1           当i等于1时停止,类似于这种条件式断点的方式也是GDB独有的一种强大功能
b main          在main函数的入口打断点。
i b             info break 缩写，显示当前设置的断点信息。
	            如下面这个查到了在main函数处有两个断点，序号分别为1 和 2.
d break         delet break 缩写，删除所有断点
d break 1       删除序号为1的断点
bt              查看堆栈
q/Ctrl+d        使用q即quit指令或快捷键Ctrl+d来正常退出GDB

———————————————————————————————————————————————————————————————————————————————
在GDB的指令窗口我们输入
(gdb)-		对就是一个 减号，然后回车我们来见证奇迹的时刻


___________________________________________________________
% 打开tui模式(Text User Interface)

  使用"gdbtui -q" 或 "gdb -tui -q"开始一个调试
$ gdbtui -q test_struct
(gdb) ....

___________________________________________________________
$ gcc -gdb3 simple_gdb.c -o simple_gdb
$ gdb simple_gdb 
(gdb) start
"ctrl+x ctrl+a" or "ctrl+x A"

___________________________________________________________
% TUI模式下有4个窗口

command                         命令窗口. 可以键入调试命令
source                          源代码窗口. 显示当前行,断点等信息
assembly                        汇编代码窗口
register                        寄存器窗口
除command 窗口外,其他三个窗口不可同时显示.其可用 layout 命令来进行选择
自己需要的窗口. 可参见 `help layout`   
  


###############################################################
### % gcc编译参数详解一 (-ffunction-sections -fdata-sections)
###############################################################
% 背景
有时我们的程序会定义一些暂时使用不上的功能和函数，虽然我们不使用这些功能和函数，
但它们往往会浪费我们的ROM和RAM的空间。这在使用静态库时，体现的更为严重。有时，
我们只使用了静态库仅有的几个功能，但是系统默认会自动把整个静态库全部链接到可执
行程序中，造成可执行程序的大小大大增加。
% 参数详解
为了解决前面分析的问题，我们引入了标题中的几个参数。GCC链接操作是以section作为最小的处理单元，
只要一个section中的某个符号被引用，该section就会被加入到可执行程序中去。因此，GCC在编译时可
以使用 -ffunction-sections和 -fdata-sections 将每个函数或符号创建为一个sections，其中
每个sections名与function或data名保持一致。而在链接阶段， -Wl,–gc-sections 指示链接器去掉
不用的section（其中-wl, 表示后面的参数 -gc-sections 传递给链接器），这样就能减少最终的可执行程序的大小了。
% 我们常常使用下面的配置启用这个功能：
CFLAGS += -ffunction-sections -fdata-sections
LDFLAGS += -Wl,--gc-sections



###############################################################
### % gcc和ld 中的参数 --whole-archive 和 --no-whole-archive
###############################################################
首先 --whole-archive 和 --no-whole-archive 是ld专有的命令行参数，gcc 并不认识，
要通gcc传递到 ld，需要在他们前面加 -Wl，字串。
% --whole-archive 
可以把 在其后面出现的静态库包含的函数和变量输出到动态库，--no-whole-archive 则关掉这个特性。
% 比如你要把 liba.a  libb.a libc.a 输出到 libabc.dll(或libabc.so)时应该这么写：
libabc.dll:liba.c libb.a libc.a
       gcc  -shared -o $@ -L. -Wl,--whole-archive -la -lb -lc -Wl,--no-whole-archive
在--whole-archive作用下的库里不能有函数同名。



###############################################################
### % gcc和ld 中的参数 -Wl,--start-group -Wl,--end-group
###############################################################
这里有１个链接顺序的问题，在command line上面的库会依赖之后的库如果碰到循环链接，
-lliba -llibb -lliba,这样就需要使用 --start-group和--end-group 反复在.a中进行搜索，
直到所以未定义的字符都被找到为止，而不是默认只搜索一次．



###############################################################
### % gcc和ld 中的参数 -nostartfiles -nodefaultlibs -nostdlib
###############################################################
% -nostartfiles 
连接的时候不使用标准系统的启动文件。标准系统库通常被使用，
除非选项“-nostdlib”和“-nodefaultlibs”被使用。 

% -nodefaultlibs
连接的使用不使用标准系统库。只有你指定的库才能够传递给连接器。
与系统库有关的特定的连接选项（例如-static-libgcc 和 -shared-libgcc ）将会被忽略。
标准的启动文件通常会被使用，除非-nostartfiles选项被使用。 

% -nostdlib
链接的时候不使用标准的系统启动文件和系统库。 没有启动文件和只用你指定的库可以被传递给连接器。


% -O0 、-O1 、-O2 、-O3
编译器的优化选项的 4 个级别，-O0 表示没有优化, -O1 为默认值，-O3 优化级别最高




###############################################################
### % arm-none-eabi-gdb的调试指令
###############################################################
l               list指令的缩写，意为列出当前执行的源代码。
                同时输入指令后重复按回车等效于再次输入上次的指令 
c               continue的缩写，在嵌入式GDB中我们不能使用RUN指令来运行代码，
                相应的我们需要continue指令来运行。
s               step缩写，会进入子函数的单步运行
n               next缩写，即会跳过子函数的单步运行
u               until缩写使用时后方加行号如： u 16 即运行到第16行
p               print缩写，使用时后面加变量名称如：p tmp ，用来显示变量数值
display         使用时后面加变量名称如：display tmp ，用于跟踪变量数值，
                在每次执行停下时会自动显示变量数值。
finish          完成并跳出当前的子函数
———————————————————————————————————————————————————————————————————————————————
b               break缩写，用于在程序中打断点，使用方式有很多种
b 16            在当前低16行代码出加断点。
b i=1           当i等于1时停止,类似于这种条件式断点的方式也是GDB独有的一种强大功能
b main          在main函数的入口打断点。
i b             info break 缩写，显示当前设置的断点信息。
	            如下面这个查到了在main函数处有两个断点，序号分别为1 和 2.
d break         delet break 缩写，删除所有断点
d break 1       删除序号为1的断点
bt              查看堆栈
q/Ctrl+d        使用q即quit指令或快捷键Ctrl+d来正常退出GDB

———————————————————————————————————————————————————————————————————————————————
在GDB的指令窗口我们输入
(gdb)-		对就是一个 减号，然后回车我们来见证奇迹的时刻


___________________________________________________________
% 打开tui模式(Text User Interface)

  使用"gdbtui -q" 或 "gdb -tui -q"开始一个调试
$ gdbtui -q test_struct
(gdb) ....

___________________________________________________________
$ gcc -gdb3 simple_gdb.c -o simple_gdb
$ gdb simple_gdb 
(gdb) start
"ctrl+x ctrl+a" or "ctrl+x A"

___________________________________________________________
% TUI模式下有4个窗口

command                         命令窗口. 可以键入调试命令
source                          源代码窗口. 显示当前行,断点等信息
assembly                        汇编代码窗口
register                        寄存器窗口
除command 窗口外,其他三个窗口不可同时显示.其可用 layout 命令来进行选择
自己需要的窗口. 可参见 `help layout`   
__________________________________________________________ 
% GDB指令

list			    #查看程序源代码
break function		#在某函数的入口设定断点
break 行号		    #在指定行添加断点
break 行号 if 条件 	#当条件为真时，指定行号处断点生效
info break		    #查看断点
delete			    #删除断点
run			        #开始运行程序
next			    #单步运行程序，不进入子函数
step			    #单步运行程序，进入子函数
continue		    #继续运行程序
print 变量名		    #查看指定变量的值
finish			    #运行程序，直到当前函数结束
display             #
quit			    #Exit GDB



###############################################################
### Cortex-M3 STM32_F103
###############################################################
1 % stm32烧写程序 
sudo st-flash write main.bin 0x8000000


% 此配置参数针对 STM32F10X标准固件函数库  V3.5.0
2 STM32F10X_HD
USE_STDPERIPH_DRIVER
### stm32f10x_conf.h >>此文件的定义位于 >>stm32f10x.h 文件中
### 此文件定义所有库函数的头文件定义部分

3 启动文件后缀名改为大写 >>[.S]

4 修改 core_cm3.c文件，针对STM32F10x_StdPeriph_Lib_V3.5.0库函数
% 打开工程文件STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\CoreSupport/core_cm3.c
% 在此文件的最后几行的位置，找到
	 __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
	 __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );	  
% 以下两行，并更改如下 ___________________________________________________________________
	 __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
	 __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );




