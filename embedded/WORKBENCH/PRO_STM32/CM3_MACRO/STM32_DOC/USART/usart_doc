/**************************************************************
               AFIO_MAPR_复用重映射和调试I/O配置寄存器
26:24   SWJ_CFG[2:0]：串行线JTAG配置 (Serial wire JTAG configuration)
        ！这些位只可由软件写(读这些位，将返回未定义的数据值)
000     完全SWJ(JTAG-DP + SW-DP)：复位状态； 
001     完全SWJ(JTAG-DP + SW-DP)但没有NJTRST；
010     关闭JTAG-DP，启用SW-DP；
100     关闭JTAG-DP，关闭SW-DP；
**************************************************************/
void afio_swd_setup(void)
{
	/* 使能AFIO时钟， 禁用JTAG, 开启SWD */
	m_afio_clock_enable();
	AFIO->MAPR   &= (uint32_t)(0xF0FFFFFF);
	AFIO->MAPR   |= (uint32_t)(0x02000000);
}


void usart_setup(void)
{
	/* 2位抢占优先级, 2位响应优先级 */
	nvic_set_priority_group();
	/* 设置USART1的先占优先级为4，从优先级为4 */
	/* STM32F10x的中断优先级高4位有效 */
	uint8_t pri_mask = 0xF0;
	uint8_t priority = 0xF0;
	nvic_set_irq_priority(USART1_IRQ_N, (uint8_t)(pri_mask & priority));

	/* 使能外设时钟 */
	m_gpioa_clock_enable();
	m_usart1_clock_enable();
	
	/* usart1—gpio基本配置(uint32_t)类型数据 */
	/* Tx(PA.09)_复用推挽输出(50MHz)   Rx(PA.10)_浮空输入 */
	GPIOA->CRH &= (uint32_t)(0xFFFFF00F);
	GPIOA->CRH |= (uint32_t)(0x000000B0);
	GPIOA->CRH |= (uint32_t)(0x00000400);
	
	/* usart1基本配置(uint16_t)类型数据 */
	USART1->CR1 |= m16_set_bit_13;      /* USART模块使能 */
	USART1->CR1 &= ~m16_set_bit_12;     /* 1个起始位, 8个数据位 */
	USART1->CR2 &= (uint16_t)(0xCFFF); /* 1个停止位(bit13, bit12) */
	USART1->CR1 |= m16_set_bit_03;      /* 发送使能 */
	USART1->CR1 |= m16_set_bit_02;      /* 接收使能 */
	USART1->BRR = 0x0271;               /* 72MHz@115200 */			
}

/* 发送30个字符 'A' 到 USART的DR寄存器 */
int i, data,;
data = 'A';

for (i = 0; i < 30; i++) 
{
	USART1->DR = data;
	data++;
	//等待数据发送完成
	while ((USART1->SR & (1<<6) == 0);
}

	
	
	
############################################################
### % (USART_SR)状态寄存器
############################################################
[7]TXE		% 发送数据寄存器空(Transmit data register empty)
		% 当TDR寄存器中的数据被硬件转移到移位寄存器的时候,该位被硬件置位。
		% 如果USART_CR1寄存器中的TXEIE为1,则产生中断。
		% 对USART_DR的写操作,将该位清零。
0:数据还没有被转移到移位寄存器;
1:数据已经被转移到移位寄存器。
注意:单缓冲器传输中使用该位。
____________________________________________________________
[6]TC		% 发送完成(Transmission complete)
		% 当包含有数据的一帧发送完成后,并且TXE=1时,由硬件将该位置’1’。
		% 如果USART_CR1中的TCIE为’1’,则产生中断。
		% 由软件序列清除该位(先读USART_SR,然后写入USART_DR)。
		% TC位也可以通过写入’0’来清除,只有在多缓存通讯中才推荐这种清除程序。
0:发送还未完成;
1:发送完成。
____________________________________________________________
[5]RXNE		% 读数据寄存器非空(Read data register not empty)
		% 当RDR移位寄存器中的数据被转移到USART_DR寄存器中,该位被硬件置位。
		% 如果USART_CR1寄存器中的RXNEIE为1,则产生中断。
		% 对USART_DR的读操作可以将该位清零。
		% RXNE位也可以通过写入0来清除,只有在多缓存通讯中才推荐这种清除程序。
0:数据没有收到;
1:收到数据,可以读出。



############################################################
### % (USART_CR1)控制寄存器1
############################################################
[7]TXEIE	% 发送缓冲区空中断使能(TXE interrupt enable)
		% 该位由软件设置或清除。
0:禁止产生中断;
1:当USART_SR中的TXE为’1’时,产生USART中断。
____________________________________________________________
[6]TCIE		% 发送完成中断使能(Transmission complete interrupt enable)
		% 该位由软件设置或清除。
0:禁止产生中断;
1:当USART_SR中的TC为’1’时,产生USART中断。
____________________________________________________________
[5]RXNEIE	% 接收缓冲区非空中断使能(RXNE interrupt enable)
		% 该位由软件设置或清除。
0:禁止产生中断;
1:当USART_SR中的ORE或者RXNE为’1’时,产生USART中断。
____________________________________________________________
[3]TE		% 发送使能(Transmitter enable)
		% 该位使能发送器。该位由软件设置或清除。
0:禁止发送;
1:使能发送。
____________________________________________________________
[2]RE		% 接收使能 (Receiver enable)
		% 该位由软件设置或清除。
0:禁止接收;
1:使能接收,并开始搜寻RX引脚上的起始位。
