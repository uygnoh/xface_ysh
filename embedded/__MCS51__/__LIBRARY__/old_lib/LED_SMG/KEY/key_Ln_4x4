#include<reg52.h>
#define uint unsigned int
#define uchar unsigned char
#define key_port P2
#define smg_port P0
void key_display();
void key_scan44();
uchar key_temp, key_number;
uchar code table[]={ //共阴数码管编码表
0x3f,0x06,0x5b,0x4f,
0x66,0x6d,0x7d,0x07,
0x7f,0x6f,0x77,0x7c, 
0x39,0x5e,0x79,0x71};
int main(void)
{
    while (1) {
        key_scan44();//键盘扫描子程序
        key_display();//键盘显示子程序
    }
    return 0;
}
_________________________
第1行     __IO__0
第2行     __IO__1
第3行     __IO__2
第4行     __IO__3
第1列     __IO__4
第2列     __IO__5
第3列     __IO__6
第4列     __IO__7
_________________________

// % 矩阵键盘行扫描方式
void key_scan44()
{
	key_port = 0xfe;            // % key_port端口松检测, 检测第一行
	key_temp = key_port & 0xf0; // % 有键按下，则key_port端口高四位会发生变化
	while (key_temp != 0xf0) {  // % 有键按下，则执行下面语句
		key_temp = key_port;    // % 读回P2端口数据，在没有键按下，可以退出while
		switch (key_temp) 
		{
		case 0xee:              // % 检测第一行，第1列 
			key_value = 0;
			break;
		case 0xde:              // % 检测第一行，第2列
			key_value = 1;
			break;
		case 0xbe:              // % 检测第一行，第3列
			key_value = 2;
			break;
		case 0x7e:              // % 检测第一行，第4列
			key_value = 3;
			break;    
        }
        while(key_temp != 0xf0) //松手检测，有键按下，则执行下面语句
        {  
            key_temp = key_port;
            key_temp = key_temp & 0xf0;     
 
        }
    }
             
 
    key_port = 0xfd;        // % key_port端口松检测, 检测第二行
    key_temp = key_port & 0xf0;
    while(key_temp != 0xf0)
    {   
        key_temp = key_port;
        switch(key_temp)
        {
        case 0xed:          // % 检测第二行，第1列 
            key_value = 4;
            break;      
        case 0xdd:          // % 检测第二行，第2列               
            key_value = 5;
            break;
        case 0xbd:          // % 检测第二行，第3列 
            key_value = 6;
            break;
        case 0x7d:          // % 检测第二行，第4列 
            key_value = 7;
            break;
                 
        }
     
        while(key_temp != 0xf0)
        {
            key_temp = key_port;
            key_temp = key_temp&0xf0;     
 
        }
    }
     
    key_port = 0xfb;        // % key_port端口松检测, 检测第三行
    key_temp = key_port&0xf0;
    while(key_temp != 0xf0)
    {   
        key_temp = key_port;
        switch(key_temp)
        {
        case 0xeb:          // % 检测第三行，第1列 
            key_value = 8;
            break;
        case 0xdb:          // % 检测第三行，第2列
            key_value = 9;
            break;
        case 0xbb:          // % 检测第三行，第3列
            key_value = 10;
            break;
        case 0x7b:          // % 检测第三行，第4列
            key_value = 11;
            break;      
        }
 
        while(key_temp != 0xf0)
        {
            key_temp = key_port;
            key_temp = key_temp & 0xf0;     
        }
    }
    
    
    key_port = 0xf7;       // % key_port端口松检测, 检测第四行
    key_temp = key_port & 0xf0;
    while(key_temp != 0xf0)
    {   
        key_temp = key_port;
        switch(key_temp)
        {
        case 0xe7:          // % 检测第四行，第1列
            key_value = 12;
            break;
        case 0xd7:          // % 检测第四行，第2列
            key_value = 13;
            break;
        case 0xb7:          // % 检测第四行，第3列
            key_value = 14;
            break;
        case 0x77:          // % 检测第四行，第4列
            key_value = 15;
            break;     
        }
     
        while(key_temp != 0xf0)
        {
            key_temp = key_port;
            key_temp = key_temp & 0xf0; 
        }
    }
}
void key_display()
{
    smg_port=table[key_value];
}





