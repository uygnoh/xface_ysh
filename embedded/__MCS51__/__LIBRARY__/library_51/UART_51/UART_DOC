############################################################
### % % uart查询方式发送一帧数据
############################################################
// % UART初始化
// % 4800bps (11.0592MHz)
// % 1位起始位， 1位停止位， 8位数据位， 共10位数据
void uart_init(void)
{
    PCON &= 0x7F;   // % 波特率不倍速
    SCON  = 0x50;   // % 8位数据，可变波特率
    TMOD &= 0x0F;   // % 清除定时器“1”模式位
    TMOD |= 0x20;   // % 设定定时器1为8位自动重装方式
    TL1   = 0xFA;   // % 设定定时初值
    TH1   = 0xFA;   // % 设定定时器重装值
    ET1   = 0;      // % 禁止定时器1中断
    ES    = 0;      // % 关闭串行口中断
    TR1   = 1;      // % 启动定时器1
}


// % 发送一帧数据
void send_byte(uint8_t dat)
{
    SBUF = dat;
    while(!TI)
        TI = 0;
}


// % 发送一串数据
void send_string(uint8_t *pstr)
{
    while (*pstr != '\0')
    {
        send_byte(*pstr++);
    }
}


int main(void)
{
    while (1)
    {
        //send_byte('8');
        //send_byte('\r');
        //send_byte('\n');
        //delay_ms(1000);
        send_string("Hello world!");
    }
}



############################################################
### % uart中断方式发送一帧数据
############################################################
// % uart初始化
// % 9600bps (11.0592MHz)
// % 1位起始位， 1位停止位， 8位数据位， 共10位数据
void uart_init(void)
{
    PCON &= 0x7F;   // % 波特率不倍速
    SCON  = 0x50;   // % 8位数据，可变波特率
    TMOD &= 0x0F;   // % 清除定时器“1”模式位
    TMOD |= 0x20;   // % 设定定时器1为8位自动重装方式
    TL1   = 0xFD;   // % 设定定时初值
    TH1   = 0xFD;   // % 设定定时器重装值
    ET1   = 0;      // % 禁止定时器1中断
    ES    = 1;      // % 打开串行口中断
    TR1   = 1;      // % 启动定时器1
    EA    = 1;      // % 打开总中断
}

// % 串口中断服务程序
void UART_ISR(void) interrupt 4
{
    if (TI)
    {
        TI = 0;
    }
}


int main(void)
{
    uart_init();
    while (1)
    {
        SBUF = 0x88;
        delay_ms(2000);
    }
}



############################################################
### % printf重定向(基于Keil IDE)
############################################################
// % C51 Development Tools
#include <stdio.h>

char putchar(char c)
{
    send_byte(c);
    return(c);
}

printf("Hello world!\r\n");



############################################################
### % 串行口从上位机接收一帧数据的编程实现方法
############################################################

uint8_t rx_dat;
uint8_t tx_dat;
uint8_t rx_flag = 0;

 
// % 4800bps (11.0592MHz)
// % 1位起始位， 1位停止位， 8位数据位， 共10位数据
void uart_init(void)
{
    PCON &= 0x7F;   // % 波特率不倍速
    SCON  = 0x50;   // % 8位数据，可变波特率
    TMOD &= 0x0F;   // % 清除定时器“1”模式位
    TMOD |= 0x20;   // % 设定定时器1为8位自动重装方式
    TL1   = 0xFA;   // % 设定定时初值
    TH1   = 0xFA;   // % 设定定时器重装值
    ET1   = 0;      // % 禁止定时器1中断
    ES    = 1;      // % 串行口中断打开
    EA    = 1;      // % 打开中断总开关
    TR1   = 1;      // % 启动定时器1
}


// % 发送一帧数据
void send_byte(uint8_t dat)
{
    SBUF = dat;
    while(!TI)
        TI = 0;
}
// % 发送一串数据
void send_string(uint8_t *pstr)
{
    while (*pstr != '\0')
    {
        send_byte(*pstr++);
    }
}




// % ——----------------------------中断方式
// % UART从上位机接收到一帧数据后
// % 然后再对该接收到的数据加“1”处理
// % 最后UART再用串口发送出去

// % 串行口中断服务程序
void UART_IST(void) interrupt 4
{
    if (RI)
    {
        RI     = 0;
        rx_dat = SBUF;
        % 使用中断方式话，使用下面这两条语句
        rx_dat = rx_dat + 1;
        SBUF   = rx_dat;
    }
    if (TI)
    {
        TI     = 0;
    }
}
// % 使用中断方式
int main(void)
{
    while (1)
    {   
    }
}




// % ——----------------------------查询方式
// % UART从上位机接收到一帧数据后
// % 然后再对该接收到的数据加“1”处理
// % 最后UART再用串口发送出去

// % 串行口中断服务程序
void UART_IST(void) interrupt 4
{
    if (RI)
    {
        RI     = 0;
        rx_dat = SBUF;
        // % 使用查询方式的话，使用rx_flag = 1;
        rx_flag = 1;
    }
    if (TI)
    {
        TI     = 0;
    }
}
// % 使用查询方式
int main(void)
{
    while (1)
    {   // % 使用查询方式，把接收到的数据加一， 并发送出去
        if (rx_flag == 1)
        {
            rx_flag = 0;
            rx_dat = rx_dat + 1;
            send_byte(rx_dat);
        }
    }
}



// % ——----------------------------查询方式
// % 上位机发送 0x01, 打开LED
// % 上位机发送 0x00, 关闭LED

// % 串行口中断服务程序
void UART_IST(void) interrupt 4
{
    if (RI)
    {
        RI     = 0;
        rx_dat = SBUF;
        // % 使用查询方式的话，使用rx_flag = 1;
        rx_flag = 1;
    }
    if (TI)
    {
        TI     = 0;
    }
}
int main(void)
{
    while (1)
    {   // % 使用查询方式
        if (rx_flag == 1)
        {
            rx_flag = 0;
            switch (rx_dat)
            {
                case 0x00: LED = 1; // % LED灭
                case 0x01: LED = 0; // % LED亮
                default: break;
            }
        }
    }
}




############################################################
### % 单片机串行口从上位机接收一串数据的编程实现
### % 只能接收回定长度的数据( 只接收8个字节数据 )
############################################################
// % 接收缓冲区，接收到的数据放到此数组中
uint8_t rx_buf[10];
// % 接收到8字节数据，rx_flag=1
uint8_t rx_flag;


// % 4800bps (11.0592MHz)
// % 1位起始位， 1位停止位， 8位数据位， 共10位数据
void uart_init(void)
{
    PCON &= 0x7F;   // % 波特率不倍速
    SCON  = 0x50;   // % 8位数据，可变波特率
    TMOD &= 0x0F;   // % 清除定时器“1”模式位
    TMOD |= 0x20;   // % 设定定时器1为8位自动重装方式
    TL1   = 0xFA;   // % 设定定时初值
    TH1   = 0xFA;   // % 设定定时器重装值
    ET1   = 0;      // % 禁止定时器1中断
    ES    = 1;      // % 串行口中断打开
    EA    = 1;      // % 打开中断总开关
    TR1   = 1;      // % 启动定时器1
}


// % 发送一帧数据
void send_byte(uint8_t dat)
{
    SBUF = dat;
    while(!TI)
        TI = 0;
}


// % 发送一串数据
void send_string(uint8_t *pstr)
{
    while (*pstr != '\0')
    {
        send_byte(*pstr++);
    }
}

// % 串行口中断服务程序
void UART_IST(void) interrupt 4
{
    static uint8_t rx_cnt = 0;
    if (RI)
    {
        RI = 0;
        rx_bur[rx_cnt] = SBUF;
        rx_cnt++;
        if (rx_cnt == 8)
        {
            rx_flag = 1;
            rx_cnt  = 0;
        }
    }
}


int main(void)
{
    printf("Wait for Serial communication Test Start ...");
    printf("Please Send a String of Data:");
    while (1)
    {
        rx_flag = 0;
        send_string(rx_buf);
    }
}



############################################################
### % 单片机串行口从上位机接收一串数据的编程实现
### % 可以接收不定长度的数据
### % 增加一个数据的结束符“0x0D”来实现一串数据的结束
############################################################
#define MAX_RX_VAL  10

// % 接收缓冲区，接收到的数据放到此数组中
uint8_t rx_buf[MAX_RX_VAL];

// % 接收到8字节数据，rx_flag=1
uint8_t rx_flag;

// % 接收到字节数据实际的长度
uint8_t rx_len;

// % 4800bps (11.0592MHz)
// % 1位起始位， 1位停止位， 8位数据位， 共10位数据
void uart_init(void)
{
    PCON &= 0x7F;   // % 波特率不倍速
    SCON  = 0x50;   // % 8位数据，可变波特率
    TMOD &= 0x0F;   // % 清除定时器“1”模式位
    TMOD |= 0x20;   // % 设定定时器1为8位自动重装方式
    TL1   = 0xFA;   // % 设定定时初值
    TH1   = 0xFA;   // % 设定定时器重装值
    ET1   = 0;      // % 禁止定时器1中断
    ES    = 1;      // % 串行口中断打开
    EA    = 1;      // % 打开中断总开关
    TR1   = 1;      // % 启动定时器1
}


// % 发送一帧数据
void send_byte(uint8_t dat)
{
    SBUF = dat;
    while(!TI)
        TI = 0;
}


// % 发送一串数据
void send_string(uint8_t *pstr)
{
    while (*pstr != '\0')
    {
        send_byte(*pstr++);
    }
}

// % 串行口中断服务程序
void UART_IST(void) interrupt 4
{
    static uint8_t rx_cnt = 0;
    uint8_t temp;
    
    // % 处理接收到的数据
    if (RI)
    {
        RI = 0;
        temp = SBUF;
        // % 如果接收的不是回车符“0x0D”, 则继续接收数据
        if (temp != 0x0D)
        {
            rx_buf[rx_cnt] = temp;
            rx_cnt++;
            if (rx_cnt > MAX_RX_VAL)
            {
                rx_cnt = MAX_RX_VAL;
            }
        }
        // % 如果接收的是回车符“0x0D”, 则说明接收数据已完成
        else 
        {
            // % 接收数据已完成， 能知主程序处理，把标志位置“1”
            rx_flag = 1;
            // % 把接收到数据的长度给“rx_len”
            rx_len = rx_cnt;
            // % 清除rx_cnt， 方便下一次数据的接收
            rx_cnt = 0;
        }
    }

}


int main(void)
{
    uint8_t i;
    printf("Wait for Serial communication Test Start ...\r\n");
    printf("Please Send a String of Data:\r\n");
    while (1)
    {
        if (rx_flag == 1)
        {
            rx_flag = 0;
            for (i = 0; i < rx_len; i++)
            {
                send_byte(rx_buf[i]);
            }
        }
    }
}




############################################################
### % 单片机串行口定时中断实现超时接收一串数据的编程实现
############################################################
% 上位机向下位机发送一串位数据，也没有固定长度，也没有结束标志符
1 根据接收时间来判断一帧数据的长度
2 如果接收时间大于一定的时间还没有新的数据来
3 那么就表示这一帧数据接收完成

// % 定义接收数据缓冲区最在值
#define MAX_RX_NUM  10

// % 定义接收最大时间为3个毫秒
#define MAX_RX_TIME 3

// % 启动软件定时器
uint8_t start_soft_timer = 0;
// % 每接收到一帧数据后，就开始计时
uint8_t rx_soft_timer_cnt;

// % 定义一包数据接收完成标志
uint8_t rx_flag;

// % 定义一个接收缓冲区
uint8_t rx_buf[MAX_RX_NUM];

// % 定义接收缓冲区个数
uint8_t rx_buf_num = 0;


// % 9600bps (11.0592MHz)
// % 1位起始位， 1位停止位， 8位数据位， 共10位数据
// % 使用定时器1，做为串行口的波特率发生器
void uart_init(void)
{
    PCON &= 0x7F;   // % 波特率不倍速
    SCON  = 0x50;   // % 8位数据，可变波特率
    TMOD &= 0x0F;   // % 清除定时器“1”模式位
    TMOD |= 0x20;   // % 设定定时器1为8位自动重装方式
    TL1   = 0xFD;   // % 设定定时初值
    TH1   = 0xFD;   // % 设定定时器重装值
    ET1   = 0;      // % 禁止定时器1中断
    ES    = 1;      // % 串行口中断打开
    TR1   = 1;      // % 启动定时器1
}
// % 串行口中断服务程序
void UART_ISR(void) interrupt 4
{
    if (RI)
    {
        RI = 0; 
        // 1 % 每接收一帧数据时，打开软件计数器，去计数
        start_soft_timer = 1;
        // % 如果rx_buf_num的值小于数据缓冲区的最大值
        // % 把接收到的数据放入rx_buf[]数据缓冲区中
        if (rx_buf_num < MAX_RX_NUM)
        {   // 2 % 接收到数据存储到数据缓冲区，注意缓冲区的大小范围
            rx_buf[rx_buf_num] = SBUF;
            rx_buf_num++;
        }
        // % 否则，超过了缓冲区中最大的值，就不在接收了
        else
        {
            rx_buf_num = MAX_RX_NUM;
        }
        
        // 3 % 每接收一帧数据，记得把软件定时计数清零，相当于喂狗
        //   % 虽然我们在这边把它清零了，但是在定时中断里面会不断的累加
        rx_soft_timer_cnt = 0;
    }
    if (TI)
    {
        TI = 0;
    }
}


// % 定时器0，16位的定时方式
// % 1ms @11.05926MHz
void timer0_init(void)
{
    TMOD &= 0xF0;   // % 设置定时器模式
    TMOD |= 0x01;   // % 设置定时器模式
    TL0   = 0x66;   // % 设置定时初值
    TH0   = 0xFC;   // % 设置定时初值
    TF0   = 0;      // % 清除TF0标志
    ET0   = 1;      // % 打开定时器0中断
    TR0   = 1;      // % 定时器0开始计时
}
// % 定时器0中断服务程序
void TIMER0_ISR(void) interrupt 1
{
    TR0   = 0;      // % 关闭定时器0
    // % 如果打开了软件定时器
    if (start_soft_timer == 1)
    {   // 1 % 累加定时时间计数器
        rx_soft_timer_cnt++;
        // 2 % 判断定时时间是否超过了设定的的最大阈值，
        //   % 如果超过了，则说明等待一段时间后没有新的数据到来
        //   % 我们判断一包数据接收完成
        if (rx_soft_timer_cnt > MAX_RX_TIME)
        {
            // % 软件定时器清零
            rx_soft_timer_cnt = 0;
            // % 数据缓冲区计数个清零
            rx_buf_num = 0;
            // % 接收标志置“1”，表示这一包数据接收完成
            rx_flag = 1;
        }
    }
    TL0   = 0x66;   // % 设置定时初值
    TH0   = 0xFC;   // % 设置定时初值
    TR0   = 1;      // % 打开定时器1
}


// % 发送一帧数据
void send_byte(uint8_t dat)
{
    SBUF = dat;
    while(!TI)
        TI = 0;
}
// % 发送一串数据
void send_string(uint8_t *pstr)
{
    while (*pstr != '\0')
        send_byte(*pstr++);
}

// % 清除数据缓冲区中的所有数据
void clr_rx_buf(uint8_t *pbuf)
{
    uint8_t i;
    for (i = 0; i < MAX_RX_NUM; i++)
        rx_buf[i] = 0;
}


int main(void)
{
    timer0_init();
    uart_init();
    EA = 1;         // % 打开中断总开关
    printf("Wait for Serial communication Test Start ...\r\n");
    printf("Please Send a String of Data:\r\n");
    while (1)
    {   // % 如果接收到一包数了
        if (rx_flag)
        {
            rx_flag = 0;
            start_soft_timer = 0;   // % 关闭软件定时器
            send_string(rx_buf);    // % 处理数据
            clr_rx_buf(rx_buf);     // % 清除缓冲区
        }
    }
}


############################################################
### % 判读数据帧头来接收一串数据的串口通信程序编写
############################################################
% [55 AA 55]为帧头 [01 02]命令，  [02 01]命令
55 AA 55 01 02  // % LED亮
55 AA 55 02 01  // % LED灭
// % 只接收带有[55 AA 55]为帧头的数据




// % 定义接收数据缓冲区最在值
#define MAX_RX_NUM  10

// % 定义接收最大时间为3个毫秒
#define MAX_RX_TIME 3

// % 启动软件定时器
uint8_t start_soft_timer = 0;
// % 每接收到一帧数据后，就开始计时
uint8_t rx_soft_timer_cnt;

// % 定义一包数据接收完成标志
uint8_t rx_flag;

// % 定义一个接收缓冲区
uint8_t rx_buf[MAX_RX_NUM];

// % 定义接收缓冲区个数
uint8_t rx_buf_num = 0;


// % 9600bps (11.0592MHz)
// % 1位起始位， 1位停止位， 8位数据位， 共10位数据
// % 使用定时器1，做为串行口的波特率发生器
void uart_init(void)
{
    PCON &= 0x7F;   // % 波特率不倍速
    SCON  = 0x50;   // % 8位数据，可变波特率
    TMOD &= 0x0F;   // % 清除定时器“1”模式位
    TMOD |= 0x20;   // % 设定定时器1为8位自动重装方式
    TL1   = 0xFD;   // % 设定定时初值
    TH1   = 0xFD;   // % 设定定时器重装值
    ET1   = 0;      // % 禁止定时器1中断
    ES    = 1;      // % 串行口中断打开
    TR1   = 1;      // % 启动定时器1
}
// % 串行口中断服务程序
void UART_ISR(void) interrupt 4
{
    if (RI)
    {
        RI = 0; 
        // 1 % 每接收一帧数据时，打开软件计数器，去计数
        start_soft_timer = 1;
        // % 如果rx_buf_num的值小于数据缓冲区的最大值
        // % 把接收到的数据放入rx_buf[]数据缓冲区中
        if (rx_buf_num < MAX_RX_NUM)
        {   // 2 % 接收到数据存储到数据缓冲区，注意缓冲区的大小范围
            rx_buf[rx_buf_num] = SBUF;
            rx_buf_num++;
        }
        // % 否则，超过了缓冲区中最大的值，就不在接收了
        else
        {
            rx_buf_num = MAX_RX_NUM;
        }
        
        // 3 % 每接收一帧数据，记得把软件定时计数清零，相当于喂狗
        //   % 虽然我们在这边把它清零了，但是在定时中断里面会不断的累加
        rx_soft_timer_cnt = 0;
    }
    if (TI)
    {
        TI = 0;
    }
}


// % 定时器0，16位的定时方式
// % 1ms @11.05926MHz
void timer0_init(void)
{
    TMOD &= 0xF0;   // % 设置定时器模式
    TMOD |= 0x01;   // % 设置定时器模式
    TL0   = 0x66;   // % 设置定时初值
    TH0   = 0xFC;   // % 设置定时初值
    TF0   = 0;      // % 清除TF0标志
    ET0   = 1;      // % 打开定时器0中断
    TR0   = 1;      // % 定时器0开始计时
}
// % 定时器0中断服务程序
void TIMER0_ISR(void) interrupt 1
{
    TR0   = 0;      // % 关闭定时器0
    // % 如果打开了软件定时器
    if (start_soft_timer == 1)
    {   // 1 % 累加定时时间计数器
        rx_soft_timer_cnt++;
        // 2 % 判断定时时间是否超过了设定的的最大阈值，
        //   % 如果超过了，则说明等待一段时间后没有新的数据到来
        //   % 我们判断一包数据接收完成
        if (rx_soft_timer_cnt > MAX_RX_TIME)
        {
            // % 软件定时器清零
            rx_soft_timer_cnt = 0;
            // % 接收标志置“1”，表示这一包数据接收完成
            rx_flag = 1;
        }
    }
    TL0   = 0x66;   // % 设置定时初值
    TH0   = 0xFC;   // % 设置定时初值
    TR0   = 1;      // % 打开定时器1
}


// % 发送一帧数据
void send_byte(uint8_t dat)
{
    SBUF = dat;
    while(!TI)
        TI = 0;
}
// % 发送一串数据
void send_string(uint8_t *pstr)
{
    while (*pstr != '\0')
        send_byte(*pstr++);
}

// % 清除数据缓冲区中的所有数据
void clr_rx_buf(uint8_t *pbuf)
{
    uint8_t i;
    for (i = 0; i < MAX_RX_NUM; i++)
        rx_buf[i] = 0;
}


// % 处理接收到数据的帧头和后面两字节数据
void uart_service(uint8_t *pbuf)
{
    uint8_t rx_move_index;
    if (rx_flag)
    {
        rx_flag = 0;
        start_soft_timer = 0;   // % 关闭软件定时器
        send_string(pbuf);      // % 处理数据
        // % 判断接收到的数据是不是[55 AA 55 01 02] || [55 AA 55 02 01]
        while (rx_buf_num >= 5) && (rx_move_index <= rx_buf_num))
        {
            if ((rx_buf[rx_move_index+0] == 0x55)  && \
                (rx_buf[rx_move_index+1] == 0xAA)  && \
                (rx_buf[rx_move_index+2] == 0x55)) && \
            {
                if ((rx_buf[rx_move_index+3] == 0x01)  && \
                    (rx_buf[rx_move_index+4] == 0x02)) && \
                {
                    LED = ON;
                }
                if ((rx_buf[rx_move_index+3] == 0x02)  && \
                    (rx_buf[rx_move_index+4] == 0x01)) && \
                {
                    LED = OFF;
                }
                // % 如果查找成功，退出while循环
                break;
            }
            rx_move_index++;
        }
        
        // % 清除数据缓冲区
        clr_rx_buf(pbuf);     
        // % 数据缓冲区计数个数
        rx_buf_num = 0;
    }
}

int main(void)
{
    timer0_init();
    uart_init();
    EA = 1;         // % 打开中断总开关
    printf("Wait for Serial communication Test Start ...\r\n");
    printf("Please Send a String of Data:\r\n");
    while (1)
    {
        uart_service(rx_buf);
    }
}



############################################################
### % 串口中断中即时解析数据帧头的通信程序
############################################################
% 在中断中即时解析数据(7Bytes)
[0xAA 0x55]     1 (帧头占一个字节) 
[0x01]          2 (数据类型占一个字节) 
[0x22 0x33]     3 (2字节数据)
[0x0D]          4 (帧尾)





// % 定义接收数据缓冲区最在值
#define MAX_RX_NUM  10

// % 定义接收最大时间为3个毫秒
#define MAX_RX_TIME 3

// % 启动软件定时器
uint8_t start_soft_timer = 0;
// % 每接收到一帧数据后，就开始计时
uint8_t rx_soft_timer_cnt;

// % 定义一包数据接收完成标志
uint8_t rx_flag;

// % 定义一个接收缓冲区
uint8_t rx_buf[MAX_RX_NUM];

// % 定义接收缓冲区个数
uint8_t rx_buf_num = 0;

// % 定义一个状态机步骤变量
uint8_t machine_step = 0;

uint8_t led_data;
uint8_t beep_data;
uint8_t led_cnt;


// % 9600bp @11.0592MHz
// % 1位起始位， 1位停止位， 8位数据位， 共10位数据
// % 使用定时器1，做为串行口的波特率发生器
void uart_init(void)
{
    PCON &= 0x7F;   // % 波特率不倍速
    SCON  = 0x50;   // % 8位数据，可变波特率
    TMOD &= 0x0F;   // % 清除定时器“1”模式位
    TMOD |= 0x20;   // % 设定定时器1为8位自动重装方式
    TL1   = 0xFD;   // % 设定定时初值
    TH1   = 0xFD;   // % 设定定时器重装值
    ET1   = 0;      // % 禁止定时器1中断
    ES    = 1;      // % 串行口中断打开
    TR1   = 1;      // % 启动定时器1
}
// % 串行口中断服务程序
// % 使用状态机方式 ->machine_step
void UART_ISR(void) interrupt 4
{
    // % 接收到数据中断处理
    if (RI)
    {
        RI = 0;
        switch (machine_step)
        {
            case 0: 
                rx_buf[0] = SBUF; 
                if (rx_buf[0] == 0xAA)  // % 判断是不是帧头的第一个字符
                {
                    machine_step = 1;
                }
                else
                {
                    machine_step = 0;
                }
                break;
            case 1: 
                rx_buf[1] = SBUF; 
                if (rx_buf[1] == 0x55)  // % 判断是不是帧头的第二个字符
                {
                    machine_step = 2;
                    rx_buf_num = 2;
                }
                else
                {
                    machine_step = 0;
                }
                break;
            case 2: 
                rx_buf[rx_buf_num] = SBUF; // % 接收1个字节的功能码和2个字节的数据
                rx_buf_num++;
                if (rx_buf_num > 4)
                {
                    machine_step = 3;
                }
                else
                {
                    machine_step = 2;
                }
                break;
            case 3: 
                rx_buf[rx_buf_num] = SBUF; 
                if (rx_buf[rx_buf_num] == 0x0D) // % 判断是不是接收到了帧尾
                {
                    switch (rx_buf[2])
                    {
                        case 0x00:              // % 如果rx_buf[2]=0x00
                            led_data = rx_buf[3];
                            led_data = led_data << 8;
                            led_data = led_data + rx_buf[4];
                            // % deep_data=LED点亮时间
                            led_cnt = 0;
                            break;
                       case 0x01:               // % 如果rx_buf[2]=0x01
                            deep_data = rx_buf[3];
                            deep_data = deep_data << 8;
                            deep_data = deep_data + rx_buf[4];
                            // % deep_data=蜂鸣器响的时间
                            beep_cnt = deep_data;
                            break;
                        default: 
                            break;
                    }
                    // % 清除状态机数据
                    machine_step = 0;
                    // % 清除数据缓冲区个数
                    rx_buf_num = 0;
                    // % 接收完成一包数据，标志位置“1”
                    // % 在主程序中判断这个标志位
                    rx_flag = 1;
                }
                break;

            default:
                break;   
        }
    }
    // % 发送数据中断处理
    if (TI)
    {
        TI = 0;
    }
 
}


// % 定时器0，16位的定时方式
// % 1毫秒@11.05926MHz
void timer0_init(void)
{
    TMOD &= 0xF0;   // % 设置定时器模式
    TMOD |= 0x01;   // % 设置定时器模式
    TL0   = 0x66;   // % 设置定时初值
    TH0   = 0xFC;   // % 设置定时初值
    TF0   = 0;      // % 清除TF0标志
    ET0   = 1;      // % 打开定时器0中断
    TR0   = 1;      // % 定时器0开始计时
}
// % 定时器0中断服务程序
void TIMER0_ISR(void) interrupt 1
{
    TR0   = 0;      // % 关闭定时器0
    if (led_cnt < led_data)
    {
        led_cnt++;
        LED = ON;
    }
    else
    {
        LED = OFF;
    }
    if (beep_cnt != 0)
    {
        beep_cnt--;
        BEEP = ~BEEP;
    }
    TL0   = 0x66;   // % 设置定时初值
    TH0   = 0xFC;   // % 设置定时初值
    TR0   = 1;      // % 打开定时器1
}


// % 发送一帧数据
void send_byte(uint8_t dat)
{
    SBUF = dat;
    while(!TI)
        TI = 0;
}
// % 发送一串数据
void send_string(uint8_t *pstr)
{
    while (*pstr != '\0')
        send_byte(*pstr++);
}


// % 清除数据缓冲区中的所有数据
void clr_rx_buf(uint8_t *pbuf)
{
    uint8_t i;
    for (i = 0; i < MAX_RX_NUM; i++)
        rx_buf[i] = 0;
}





int main(void)
{
    timer0_init();
    uart_init();
    EA = 1;         // % 打开中断总开关
    printf("Wait for Serial communication Test Start ...\r\n");
    printf("Please Send a String of Data:\r\n");
    while (1)
    {
        if (rx_flag == 1)
        {
            rx_flag = 0;
            send_sting(rx_buf);
        }
    }
}



############################################################
### % 串口超时接收 + CRC16校验
### % https://blog.csdn.net/weixin_41542513/
############################################################
ip33.com        % CRC（循环冗余校验）在线计算
[01 01 20 20]   % 需要校验的数据 ->Hex

% 参数模型 NAME:
CRC-16/MODBUS   x16+x15+x2+x1

% 高位在左低位在右，使用时请注意高低位顺序！！！
0x00   0x48



____________________________________________
[0x01]          1 % 地址信息(第一帧数据)
[0x01]          2 % 数据类型(第二帧数据->控制LED灯)
[0x00 0x10]     3 % 数据()
[0x25 0x45]     4 % CRC(L字节低位 + H字节高位)
____________________________________________
% 我们这里发送为： 0x01 0x01 0x20 0x20 0x48 0x00

#defind LOCAL_ADDRESS 0x01

// % 定义接收数据缓冲区最在值
#define MAX_RX_NUM  10

// % 定义接收最大时间为3个毫秒
#define MAX_RX_TIME 3

// % 启动软件定时器
uint8_t start_soft_timer = 0;
// % 每接收到一帧数据后，就开始计时
uint8_t rx_soft_timer_cnt;

// % 定义一包数据接收完成标志
uint8_t rx_flag;

// % 定义一个接收缓冲区
uint8_t rx_buf[MAX_RX_NUM];

// % 定义接收缓冲区个数
uint8_t rx_buf_num = 0;


// % 9600bps (11.0592MHz)
// % 1位起始位， 1位停止位， 8位数据位， 共10位数据
// % 使用定时器1，做为串行口的波特率发生器
void uart_init(void)
{
    PCON &= 0x7F;   // % 波特率不倍速
    SCON  = 0x50;   // % 8位数据，可变波特率
    TMOD &= 0x0F;   // % 清除定时器“1”模式位
    TMOD |= 0x20;   // % 设定定时器1为8位自动重装方式
    TL1   = 0xFD;   // % 设定定时初值
    TH1   = 0xFD;   // % 设定定时器重装值
    ET1   = 0;      // % 禁止定时器1中断
    ES    = 1;      // % 串行口中断打开
    TR1   = 1;      // % 启动定时器1
}
// % 串行口中断服务程序
void UART_ISR(void) interrupt 4
{
    if (RI)
    {
        RI = 0; 
        // 1 % 每接收一帧数据时，打开软件计数器，去计数
        start_soft_timer = 1;
        // % 如果rx_buf_num的值小于数据缓冲区的最大值
        // % 把接收到的数据放入rx_buf[]数据缓冲区中
        if (rx_buf_num < MAX_RX_NUM)
        {   // 2 % 接收到数据存储到数据缓冲区，注意缓冲区的大小范围
            rx_buf[rx_buf_num] = SBUF;
            rx_buf_num++;
        }
        // % 否则，超过了缓冲区中最大的值，就不在接收了
        else
        {
            rx_buf_num = MAX_RX_NUM;
        }
        
        // 3 % 每接收一帧数据，记得把软件定时计数清零，相当于喂狗
        //   % 虽然我们在这边把它清零了，但是在定时中断里面会不断的累加
        rx_soft_timer_cnt = 0;
    }
    if (TI)
    {
        TI = 0;
    }
}


// % 定时器0，16位的定时方式
// % 1ms @11.05926MHz
void timer0_init(void)
{
    TMOD &= 0xF0;   // % 设置定时器模式
    TMOD |= 0x01;   // % 设置定时器模式
    TL0   = 0x66;   // % 设置定时初值
    TH0   = 0xFC;   // % 设置定时初值
    TF0   = 0;      // % 清除TF0标志
    ET0   = 1;      // % 打开定时器0中断
    TR0   = 1;      // % 定时器0开始计时
}
// % 定时器0中断服务程序
void TIMER0_ISR(void) interrupt 1
{
    TR0   = 0;      // % 关闭定时器0
    // % 如果打开了软件定时器
    if (start_soft_timer == 1)
    {   // 1 % 累加定时时间计数器
        rx_soft_timer_cnt++;
        // 2 % 判断定时时间是否超过了设定的的最大阈值，
        //   % 如果超过了，则说明等待一段时间后没有新的数据到来
        //   % 我们判断一包数据接收完成
        if (rx_soft_timer_cnt > MAX_RX_TIME)
        {
            // % 软件定时器清零
            rx_soft_timer_cnt = 0;

            // % 接收标志置“1”，表示这一包数据接收完成
            rx_flag = 1;
        }
    }
    
    if (led_cnt < led_data)
    {
        led_cnt++;
        LED = ON;
    }
    else
    {
        LED = OFF;
    }
    if (beep_cnt != 0)
    {
        beep_cnt--;
        BEEP = ~BEEP;
    }
    TL0   = 0x66;   // % 设置定时初值
    TH0   = 0xFC;   // % 设置定时初值
    TR0   = 1;      // % 打开定时器1
}


// % 发送一帧数据
void send_byte(uint8_t dat)
{
    SBUF = dat;
    while(!TI)
        TI = 0;
}
// % 发送一串数据
void send_string(uint8_t *pstr)
{
    while (*pstr != '\0')
        send_byte(*pstr++);
}

// % 清除数据缓冲区中的所有数据
void clr_rx_buf(uint8_t *pbuf)
{
    uint8_t i;
    for (i = 0; i < MAX_RX_NUM; i++)
        rx_buf[i] = 0;
}


int main(void)
{
    uint8_t i;
    uint16_t crc;
    uint8_t crch, crcl;
    timer0_init();
    uart_init();
    EA = 1;         // % 打开中断总开关

    while (1)
    {   // % 如果接收到一包数了
        if (rx_flag)
        {
            rx_flag = 0;
            start_soft_timer = 0;   // % 关闭软件定时器
            
            // % 判断是不是本机地址
            if (rx_buf[0] == LOCAL_ADDRESS)
            {
                return;
            }
            // % CRC16校验，校验正确，我们才处理，否则直接返回
            // % 并给出错误码
            crc = crc16(rx_buf, rx_buf_num-2);
            crch = crc >> 8;
            crcl = crc & 0xFF;
            if ((rx_buf[rx_buf_num - 2] != crch) || \
                 rx_buf[rx_buf_num - 1] != crcl))
            {   // % 加入错误码，并返回给上位机
                rx_buf[1] = rx_buf[1] | 0x80;
                crc = crc16(rx_buf, rx_buf_num-2);
                rx_buf[4] = crc & 0xFF;
                rx_buf[5] = crc >> 8;
                for (i = 0; i < rx_buf_num; i++)
                {
                    send_byte(rx_buf[i]);
                }
                return;
            }
            switch (rx_buf[1])
            {
                case 0x01:
                    led_data = rx_buf[2];
                    led_data = led_data << 8;
                    led_data = led_data + rx_buf[3];
                    led_cnt  = 0;
                    break;
                case 0x02:
                    beep_data = rx_buf[2];
                    beep_data = beep_data << 8;
                    beep_data = beep_data + rx_buf[3];
                    beep_cnt  = beep_data;
                    break;
                default: 
                    break;
            }
            for (i = 0; i < rx_buf_num; i++)
            {
                send_byte(rx_buf[i]);
            }
            clr_rx_buf(rx_buf);     // % 清除缓冲区           
            rx_buf_num = 0;         // % 数据缓冲区计数个清零
        }
    }
}












