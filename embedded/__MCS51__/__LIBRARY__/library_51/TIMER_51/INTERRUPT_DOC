############################################################
### % MCS8051 <===> 外部中断_0
############################################################
// 1 % KEY_1 接到 P3.2_INT_0(外部中断“0”引脚上)
// 2 % 当KEY_1键被按下，IE0(外部中断请求标志)“硬件自动设置”
// 3 % 此时它就会自动跳转到外部中断“0”的服务函数中执行相应的操作
//     CPU采样到INTx端有效的中断请求后，IEx位由硬件自动置“1”
//     在中断响应期间(在转向中断服务程序时),由硬件自动清零


sbit LED_1   P1^0


// 外部中断“0”初始化
// % 低电平触发方式: 需要手动清除中断标志位
// % 下降沿触发方式: 硬件自动将中断标志位清零
void EX0_INIT(void)
{
    // 1 % 设置外部“中断0”触发方式, 设置下降沿触发(TCON寄存器)
    IT0 = 1;
    // 2 % 设置部“中断0”的优先级(IP寄存器)
    PX0 = 1;
    // 3 % 打开外部“中断0” (IE寄存器)
    EX0 = 1;
    // 4 % 打开中断允许总控制位(IE寄存器)
    EA  = 1;
}


// 外部中断“0”中断服务程序
// 1 % 中断服函数是不能被调用的
// 2 % 中断服函数一定是一个没有参数的函数
// 3 % 中断服函数一定是一个没有返回值的函数
// 4 % 中断服函数函数名后跟一个关键字 interrupt
// 5 % interrupt后跟一个“N”(中断编号)，取值为“0~4”
// 6 % 中断服函数入口地址计算: (8*N + 0003H)
// 7 % “N”后面跟 using M(M的取值范围“0~3”)切换工作寄存器组
// N    中断向量       中断源名称       
// 0    % 0003H       外部中断0       
// 1    % 000BH       定时器T0中断     
// 2    % 0013H       外部中断1       
// 3    % 001BH       定时器T1中断     
// 4    % 0023H       串行口中断  
void EX0_ISR(void) interrupt 0
{
    LED_1 = ~LED_1;
}


int main(void)
{   
    EX0_INIT();
    while (1)
    {
    }
    return 0;
}



############################################################
### % 独立按键外部中断方式控制数码管显示参数调整
############################################################
// 1 % KEY_1 接到 P3.2_INT_0(外部中断“0”引脚上)
// 1 % KEY_2 接到 P3.3_INT_1(外部中断“1”引脚上)

uint16_t prameter = 0;

// % 外部中断“0”初始化
void EX0_INIT(void)
{
    IT0 = 1;    // % 下降沿触发
    EX0 = 1;    // % 开启外部中断“0”
}
// % 外部中断“1”初始化
void EX1_INIT(void)
{
    IT1 = 1;    // % 下降沿触发
    EX1 = 1;    // % 开启外部中断“1”
}

// % 外部中断“0”中断服务程序
void EX0_ISR(void) interrupt 0
{
    delay_ms(10)    // % 延时消抖
    if (!KEY_1)
    {
        parameter++;
        if (parameter > 9999)
            parameter = 9999;
    }
}

// % 外部中断“1”中断服务程序
void EX0_ISR(void) interrupt 2
{
    delay_ms(10)    // % 延时消抖
    if (!KEY_2)
    {
        parameter--;
        if (parameter > 9999)
            parameter = 9999;
    }
}

void display_service(void)
{
    led_buf[0] = parameter/1000;    // % 千位
    led_buf[1] = parameter/100%10;  // % 百位
    led_buf[2] = parameter/10%10;   // % 十位
    led_buf[3] = parameter%10;      // % 个位
}

void main(void)
{
    EX0_INIT();
    EX1_INIT();
    // % 打开中断总开关
    EA = 1;
    
    display_service();
}



############################################################
### % 独立按键外部中断方式控制流水灯
############################################################
1 % (KEY_IN_0|KEY_IN_1|KEY_IN_2|KEY_IN_3)连接一个4与门电路
2 % 与门的另一个输入端连接单片机的外部中断“0”(INT0)
_____________________________________
P2^0    KEY_IN_0
P2^1    KEY_IN_1
P2^2    KEY_IN_2
P2^3    KEY_IN_3
_____________________________________
// % 默认流水灯是停止的
uint8_t run = 0;
// % 默认流水灯的方向
uint8_t dir = 0;

uint8_t led_buf[] = {0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f};

// % 外部中断“0”初始化
void EX0_INIT(void)
{
    IT0 = 1;    // % 下降沿触发
    EX0 = 1;    // % 开启外部中断“0”
    EA  = 1;    // % 开启总控位
}


// % 外部中断“0”中断服务程序
void EX0_ISR(void) interrupt 0
{
    switch (P2 & 0x0F)
    {
        case 0x0E: run = 1; break; // % 启动流水灯
        case 0x0D: run = 0; break; // % 停止流水灯
        case 0x0B: dir = 1; break; // % 正向
        case 0x07: dir = 0; break; // % 反向
        default: break;
    }
}



void main(void)
{
    uint8_t temp = 0xFE;
    EX0_INIT();
    while (1)
    {
        if (run)
        {
            P1 = temp;
            if (dir)
                temp = _crol_(temp, 1);
            else
                temp = _crol_(temp, 1);
        }
        delay_ms(1000);
    }
}










############################################################
### % 外部中断的应用之矩阵按键外部中断方式按键识别
############################################################
### 4*4矩阵按键使用外部中断触方式
1 % (KEY_IN_0|KEY_IN_1|KEY_IN_2|KEY_IN_3)连接一个4与门电路
2 % 与门的另一个输入端连接单片机的外部中断“0”(INT0)
3 % 如果有键被按下，就进入中断服务程序，再把 key_flag标志位置“1”
4 % 在while(1)大循环中，判断 key_flag标志位
5 % 如果key_flag标志位为“1”，就进入key_scan();使用的是线反转法
_____________________________________
P2^0    KEY_IN_0
P2^1    KEY_IN_1
P2^2    KEY_IN_2
P2^3    KEY_IN_3
P2^4    KEY_OUT_4
P2^5    KEY_OUT_5
P2^6    KEY_OUT_6
P2^7    KEY_OUT_7
_____________________________________

uint8_t key_value = 0;
uint8_t key_flag;

// % 外部中断“0”初始化
void EX0_INIT(void)
{
    IT0 = 1;    // % 下降沿触发
    EX0 = 1;    // % 开启外部中断“0”
}

// % 外部中断“0”中断服务程序
void EX0_ISR(void) interrupt 0
{
    key_flag = 1;
}

// % 把返回的键值放入数据显示缓冲区
void display_service(void)
{
    led_buf[0] = key_value;
}

void main(void)
{
    EX0_INIT();
    EX1_INIT();
    // % 打开中断总开关
    EA = 1;
    
    // % 高4位做输出，低4位做输入
    // % 用于产生中断信号
    P2 = 0x0f; 
    while (1)
    {
        // % 判断是否有键接下
        // % 如果有键被按下，( 则产生中断，key_flag=1 ) 
        if (key_flag == 1)
        {
            key_flag = 0;
            // % 调用矩阵按键线反转法，返回按键值
            key_vlaue = key_scan();
            // % 把返回的键值放入数据显示缓冲区
            display_service();
            // % 在数码管上显示按键值
            smg_display();
        }
    }
    
    
}



