/*******************************************************************************
        => 8051单片机2种连接外设方式
*******************************************************************************/
//_____________________________________________________________
// IO方式： 采用片内（RAM指令）访问外设
//_____________________________________________________________
MOV     P0, A



//_____________________________________________________________
// 总线方式： 采用片外（RAM指令）访问外设
//（数据总线， 地址总线， 控制总线）
//_____________________________________________________________
MOVX    @DPTR, A



/*******************************************************************************
        => 8051（三总线）
*******************************************************************************/
（P2高8位地址总线 + P0低8位地址总线）
（P0还分时复用数据总线）
（P3为控制总线）
//_____________________________________________________________
// 总线方式： 采用片外（RAM指令）访问外设
//（数据总线， 地址总线， 控制总线）
//_____________________________________________________________
#include <reg51.h>
#include <absacc.h>
sbit    EOC     = P3^5;         //ADC0809转换结束标志
#define ADC_IN0 XBYTE[0x7FF8]   //绝对地址的访问（定义ADC0809通道0的地址）
                                //此时的（ADC_IN0）相当于一个外部端口
                                //它和内部（P0端口是一样的形式）
                                //使用这种（数据总线，地址总线，控制总线）方式访问
                                //ADC_IN0相当于一个内存访问
unsigned char adc0809_convert(void)
{
        unsigned char adc_result = 0;
        ADC_IN0 = 0x00;         //借助对端口地址执行写操作时序，来满足ADC的操作时序
        while (EOC == 0);       //查询EOC是否为高电平，高电平代表转换结束
        adc_result = ADC_IN0;   //对端口地址执行读操作，满足ADC输出使能的时序
        return adc_result;
}




