/*******************************************************************************
        => MSP430F5529-SPI
*******************************************************************************/
        CLK             //时钟信号
        SOMI            //主入从出
        SIMO            //从入主出
        STE             //从机接收/发送引脚（片选信号）
        UCMST=0         //工作在从模式
        UCMST=1         //工作在主模式
        UCCKPH          //时钟相位
        UCCKPL          //时钟极性



/*******************************************************************************
        => MSP430F5529
*******************************************************************************/
        UCAxCTL1        //控制寄存器1
        UCAxCTL0        //控制寄存器0
        UCAxBR0         //波特率寄存器0
        UCAxBR1         //波特率寄存器1
        UCAxMCTL        //调制器控制寄存器（在SPI模式下不需要）
        UCAxSTAT        //状态寄存器
        UCAxRXBUF       //接收缓冲寄存器
        UCAxTXBUF       //发发缓冲寄存器
        UCAxIE          //中断使能寄存器
        UCAxIFG         //中断标志寄存器
        UCAxIV          //中断向量寄存器


________________________________________________________________________________    
        编程实现两块MSP430F5529单片机之间的三线制SPI通信。 
        其中一块单片机作为主机，另一块单片机作为从机。主机从
        “0x01”开始发送递增字节，从机接收到的字节再原封不动
        地发送给主机，主机判断接收到的字节与之前发送的字节是
        否一致。 若一致表示接收正确，使P1.0输出高电平，若接
        收错误，则使P1.0输出低电平。
________________________________________________________________________________
//_____________________________________________________________
//      主机程序
//_____________________________________________________________
unsigned char master_data, check_data;
unsigned char temp;
int main(void)
{
        volatile unsigned int i;
        WDTCTL  = WDTPW + WDTHOLD;      //Stop watchdog timer
        
        P1OUT   |= BIT2;                //Set P1.2 for slave reset
                                        //控制从机信号
                                        
                                        //Set p1.0 for LED
        P1DIR   |= BIT2 + BIT0;         //Set P1.0, P1.2 to output direction
        P3SEL   |= BIT3 + BIT4;         //P3.3, P3.4 配置为SPI通信功能
        P2SEL   |= BIT7;                //P2.7       配置为SPI通信时钟信号
        
        UCA0CTL1 |= UCSWRST;            //** Put state machine in reset **
                                        //配置SPI为（主模式），3线SPI，时钟极性为（高），高位在前
        UCA0CTL0 |= UCMST + UCSYNC + UCCKPL + UCMSB; 
        UCA0CTL1 |= UCSSEL_2;           //SMCLK
        UCA0BR0   = 0x02;               // /2 分频
        UCA0BR1   = 0x00;
        UCA0MCTL  = 0x00;               //No modulation
        UCA0CTL1 &= ~UCSWRST;           //** Initialize USCI state machine **
        UCA0IE   |= UCRXIE;             //Enable USCI_A0 RX interrupt
        
                                        //P1.2控制从机（片选信号）
        P1OUT    &= ~0x04;              //Now with SPI signals initialized     
        P1OUT    |= 0x04;               //reset slave
        
        for (i = 50; i > 0; i--);       //Wait for slave to initialize
        
        master_data = 0x01;             //要发送的数据
        check_data  = 0x00;             //校验数据
        
        while (!(UCA0IFG & UCTXIFG));           //USCI_A0 TX buffer ready?
        UCA0TXBUF = master_data;                //Transmit first character
        __bis_SR_register(LPM0_bits + GIE);     //CPU off, enable interrupt
}
//主机接收中断服务程序
//_____________________________________________________________
#pragma vector=USCI_A0_VECTOR
__interrupt void USCI_A0_ISR(void)
{
        volatile unsigned int i;
        switch (__even_in_range(UCA0IV, 4) {
        case 0: 
                break;                          //Vector 0 - no interrupt
        case 2:                                 //Vector 2 - RXIFG
                while (!(UCA0IFG & UCTXIFG));   //UCTXIFG = 1，则表示发送缓冲寄存器为空，
                                                //可以向其写入新的字符
                if (UCA0RXBUF == check_data)    //如果接收到正确的数据，则LED发光
                        P1OUT |= 0x01;          //If correct, light LED
                else
                        P1OUT &= ~0x01;         //If incorrect, clear LED
                
                master_data++;
                check_data++;
                UCA0TXBUF = master_data;        // Send next value
                
                for (i = 20; i > 0; i--);       // Add time between transmissions 
                                                // to make sure slave can process
                                                // information
                break;
        case 4:                                 //Vector 4 - TXIFG
                break;             
        default: 
                break;
        }
        
}


//_____________________________________________________________
//      从机程序
//_____________________________________________________________
int main(void)
{
        WDTCTL      = WDTPW + WDTHOLD;  //Stop watchdog timer
        
        while (!(P2IN & 0x80));         //等待spi时钟信号到来 P2.7
        
        P3SEL   |= BIT3 + BIT4;         //P3.3, P3.4 option select
        P2SEL   |= BIT7;                //P2.7 option select, 设置为时钟线
        
        UCA0CTL1   |= UCSWRST;          //** Put state machine in reset **
                                        //复位SPI通信模块
                                        
                                        //3-pin, 8-bit SPI slave SPI从机模式
                                        //Clock polarity high, MSB先出
        UCA0CTL0   |= UCSYNC + UCCKPL + UCMSB;
        
        UCA0CTL1   &= ~UCSWRST;         //**Initialize USCI state machine **
        UCA0IE     |= UCRXIE;           //Enable USCI_A0 RX interrupt
        
        __bis_SR_register(LPM4_bits + GIE);//进入低功耗模式4，使能全局中断
}
// 从机接收中断服务程序
//_____________________________________________________________
#pragma vector=USCI_A0_VECTOR
__interrupt void USCI_A0_ISR(void)
{
        switch (__even_in_range(UCA0IV, 4) {
        case 0: 
                break;                          //Vector 0 - no interrupt
        case 2:                                 //Vector 2 - RXIFG
                while (!(UCA0IFG & UCTXIFG));   //USCI_A0 TX buffer ready?
                UCA0TXBUF = UCA0RXBUF;          //将主机发送的数据再返回给主机
                break;
        }
        case 4:                                 //Vector 4 - TXIFG
                break;                        
        default: 
                break;
}
