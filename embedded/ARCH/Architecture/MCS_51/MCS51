/*******************************************************************************
                              MCS51 存储系统
*******************************************************************************/
//内部数据存储区“低128”个单元(内部RAM, 可以被用户使用)
1 00H~1FH       //为通用寄存器区R0~R7(分为4组, 由PSW寄存器控制)
2 20H~2FH       //为位寻址区(128个位)
3 30H~7FH       //为用户RAM区(数据缓冲区, 堆栈区, 共有80个单元)
//内部数据存储区“高128”个单元(专用寄存器(SFR)区, 不能被用户使用)
1 A             //累加器(8bit)
2 B             //寄存器(8bit)
3 PC            //程序计数器(16bit)(64K)
4 PSW           //程序状态字(8bit)(RS1, RS2配置工作寄存组)
5 DPTR          //数据指针(16bit)(高位字节DPH + 低位字节DPL)
4 SP            //堆栈指针(8bit)(系统复位时SP=07H)(SP应该设置为30H之后)(SP向上生长)


//内部程序存储器ROM
1 0000H~0002H   //系统启动单元，单片机复位后(PC=0000H)
2 0003H~000AH   //外部中断0地址区
3 000BH~0012H   //定时/计数器0中断地址区
4 0013H~001AH   //外部中断1地址区
5 001BH~0022H   //定时/计数器1中断地址区
6 0023H~002AH   //串行中断地址区



/*******************************************************************************
                              MCS51 时钟与复位
*******************************************************************************/
1 振荡周期, p
//为单片机提供时钟信号的振荡源的周期，也称节拍，用P表示
//如果为内部时钟方式，振荡周期即为石英晶体的振荡周期

2 时钟周期, S
//将2个振荡周期结合一起，形成时钟周期(P1+P2)
//也就是说时钟周期是振荡周期的2倍

3 机器周期, 6S
//通常将完成一个基本操作所需要的时间称为机器周期
//MCS-51中1个机器周期含有6个时钟周期

4 指令周期, 6S~24S
//是指CPU执行一条指令所需要的时间
//一个指令周期通常含有1~4个机器周期


5 若MCS-51单片机外接晶振为12MHz, 则
振荡周期 = 1/(12MHz) = 1/12us = 0.0833us
时钟周期 = 振荡周期*2 = 1/6us = 0.167us
机器周期 = 时钟周期*6 = 振荡周期*12 = (1us)
指令周期 = 1~4us


6 MCS-51单片机复位
0 //冷启动 ->当系统初始加电的时候, 上电复位
1 //热启动 ->当程序运行死机的时候, 按钮复位
2 //单片机复位条件



/*******************************************************************************
                              MCS51 指令系统
*******************************************************************************/
// MCS-8051汇编语言格式:   
[标号:] 操作码助记符 [目的操作数,] [源操作数] [;注释]


1 MCS-8051描述符
Rn          //当前选中的寄存器组的8个寄存器R0~R1(n=0~7)
Ri          //当前选中的寄存器组中的可以作为间接寻址寄存器使用的2个工作寄存器(R0,R1)
direct      //8位的内部数据存储器单元中的地址，(内部RAM地址或专用寄存器地址)
#data       //包含在指令中的8位立即数
#data16     //包含在指令中的16位立即数
addr16      //16位的目的地址
addr11      //11位的目的地址
rel         //8位有符号的偏移字节，简称偏移量(-128~127)
//16进制操作数以字符A~F中的某个开头时，则需要在它前面加一个“0”，
//以便在汇编时把它和字符A~F区别开来例如： #0FH  


2 MCS-8051伪指令
ORG     //程序起始地址伪指令
END     //程序结束地址伪指令
EQU     //X1 EQU 2000H
DB      //DB A5H(Define Byte)
DW      //DW "AA"(Define Word)


3  转移操作指令()
DJNZ RN, REL 
//是一条件转移指令，先将工作寄存器Rn中的数减“1”，
//判断结果是否为“0”，不为“0”程序就跳转到行标为
//REL的地方执行，否则，为“0”就不转移，继续执行下一条指令


4  数据传送指令(8)
MOV, MOVX, MOVC, XCH, XCHD, SWAP, PUSH, POP


5 算术运算指令(24)
//算术运算指令结果影响PSW的有关位
CY      //进位标志位(在加减法中存放进位和借位，在移位操作中也可能用到)
AC      //半进位标志位(表示低4位对高4位有进位或借位时的标志位)
F0      //用户标志位，由用户进行定义和使用
OV      //溢出标志位
        //(加法运算中，OV=1，表示运算结果超过A的表示范围)
        //(乘法运算中，OV=1，表示乘积存放在A和B中)
        //(除法运算中，OV=1，表示除数为0，无法进行计算)
P       //奇偶标志位，表示累加器A中“1”的个数，若1的个数为偶数，则P=0       
//如果“位3”有进位，则半进位标志位AC置“1”，否则清零
//如果“位7”有进位，则进位标志位  CY置“1”，否则清零
//如果两个数相加溢出，则OV置“1”，否则清零



/*******************************************************************************
                              MCS51 寻址方式
*******************************************************************************/
 寄存器寻址       |    直接寻址        |    立即数寻址
MOV A, R0       |   MOV A, 3AH      |    MOV A, #3AH


// 位寻址(RAM位寻址区20H~2FH)(位寻址区范围00H~7FH)
MOV C, 3AH


// 寄存器间接寻址
MOV R0, 3AH     // 把3AH单元的内容送累加器R0中
MOV A, @R0      // (以R0寄存器内容3AH)为地址，把该地址单元的内容送累加器A中


//变址寻址(是为了访问程序存储器中的数据表格)
//80C51的变址寻址以DPTR或PC作为基址寄存器，以累加器A作为变址寄存器，
//并以两者内容相加形成的16位地址作为操作数地址，以达到访问数据表格的目的。
MOVC A, @A+DPTR // 把DPTR和A的内容相加得到一个程序存储器地址，
                // 再把该地址单元的内容送累加器A
                // 因此，符号@应理解为是针对“A+DPTR”的，而不是针对A的。
MOVC A, @A+PC
JMP @A+DPTR     // 无条件转移指令


// 相对寻址
目的地址 = 转移指令地址 + 转移指令字节数 + rel



/*******************************************************************************
                              MCS51 中断系统
*******************************************************************************/
-3 电源控制寄存器(PCON)
___________________________________________________________
D7      /       /       /       8BH     8AH     89H     88H
SMOD                    TR0     IE1     IT1     IE0     IT0
___________________________________________________________
//SMOD 波特率倍增位，复位时，SMOD=0
//在串口方式1，2，3时，即SMOD=1时，波特率提高一倍。


-2 串行口中断控制寄存器(SCON)
___________________________________________________________
9FH     9EH     9DH     9CH     9BH     9AH     99H     98H
SM0     SM1     SM2     REN     TB8     RB8     TI      RI
___________________________________________________________
TI 串行中发送中断标志
//当CPU将一个数据写入发送缓冲器时，就启动发送
//当最后一个数据位发送完后，TI由硬件自动置位，并向CPU发中断申请。
//进行中断服务程序时，TI要由软件清“0”
//软件查询时，TI可以作为状态位使用。
RI 串行口接收中断标志位
//当CPU接收数据时，当接收到最后一个数据位后，RI由硬件自动置位，
//并向CPU发中断申请。进行中断服务程序时，RI要由软件清“0”。
//软件查询时，RI可作为状态位使用。


SM0,SM1 串行口工作方式选择位
//SM1 SM0  工作方式   功能说明            波特率
   0   0    方式0    8位同步移位寄存器      Fosc/12
   0   1    方式1    10位异步收发器        由定时器1控制(可变)
   1   0    方式2    11位异步收发器        Fosc/32或Fosc/64
   1   1    方式3    11位异步收发器        由定时器1控制(可变)
//SM2 多机通信的控制位(用的少)
//REN 允许接收位
//REN=0禁止接收；REN=1允许接收



-1 中断优先级控制寄存器(IP)
___________________________________________________________
OBFH    OBEH    OBDH    OBCH    OBBH    OBAH    OB9H    OB8H
/       /       /       PS      PT1     PX1     PT0     PX0
___________________________________________________________
//对应位置“1”，优先级为高； 置“0”，优先级为低
PX0     //外部中断0优先级设置位   
PX1     //外部中断1优先级设置位   
PT0     //定时中断0优先级设置位   
PT1     //定时中断1优先级设置位   
PS      //串行中断0优先级设置位   


0 中断控制寄存器(IE)(可以进行位寻址)
___________________________________________________________
0AFH    0AEH    0ADH    0ACH    0ABH    0AAH    0A9H    0A8H
EA      /       /       ES      ET1     EX1     ET0     EX0
___________________________________________________________
EA      //中断允许总控制位
EX0     //外部中断0控制位 
EX1     //外部中断1控制位
ET0     //定时器0中断控制位
ET1     //定时器1中断控制位
ES      //串行口中断控制位


1 中断源地址
0003H   //(外部中断0地址)
000BH   //(定时器T0中断地址)    
0013H   //(外部中断1地址)
001BH   //(定时器T1中断地址)   
0023H   //(串行口中断地址)


2  外部中断，有2个
//外部中断“0”，中断请求信号由引脚INT0(P3.2)引入   
//外部中断“1”，中断请求信号由引脚INT1(P3.3)引入 


3 外部中断有两种触发方式
低电平触发方式 
//低电平有效，只要CPU在每机器周期内从引入端INTx采样到低电平，就进入外中断
负跳脉冲触发方式 
//负跳信号有效，即CPU在连续两个机器周期对引入端INTx采样，如果前周期为高电
//平，后一周期为低电平，则为有效的负跳脉冲触发方式的外部中断请求



/*******************************************************************************
                                 中断系统例程
*******************************************************************************/
___________________________________________________________
//通过8051单片机P1口控制8个LED做左移和右移发光
//当中断来时(按下/INT0), 使8个LED闪烁5次
___________________________________________________________
    ORG     0000H
    AJMP    MAIN
    ORG     0003H       ;//外部中断0的中断入口地址
    AJMP    EXT0        ;//跳转到中断服务程序
    
;//主程序开始    
    ORG     0030H       ;//给出MAIN标号的地址
MAIN:
    SETB    EA          ;//打开中断总开关
    SETB    EX0         ;//打开外部中断0中断开关
    MOV     SP, #70H    ;//重新设置堆栈指针


LOOP:
    MOV     A, #0FFH    ;//左移初值
    MOV     R2, #08H    ;//设置左移8次
    CLR     C           ;//CY位清零(利用循环移位)   
LP1:
    RLC     A           ;//带进位标识位的左移
    MOV     P1, A       ;//输出至P1口
    ACALL   DELAY       ;//延时0.2秒
    DJNZ    R2, LP1     ;//左移继续，移动8次
    MOV     R2, #07H    ;//左移结束，设置右移7次
LP2:
    RRC     A           ;//带进位标识位的右移
    MOV     P1, A       ;//输出至P1口
    ACALL   DELAY       ;//延时0.2秒
    DJNZ    R2, LP2     ;//右移继续，移动8次
    AJMP    LOOP        ;//重复循环，左移和右移


;//中断服务程序
EXT0:
    PUSH    ACC         ;//保护现场
    PUSH    PSW         ; %
    SETB    RS0         ;//选择工作寄存器组1
    CLR     RS1         ; %
    MOV     A, #00H     ;//设置LED全亮
    MOV     R2, #0AH    ;//闪烁5次，亮灭10次
LP3:
    MOV     P1, A       ;//输出至P1口
    ACALL   DELAY       ;//延时0.2秒
    CPL     A           ;//取反，灯灭/亮
    DJNZ    R2, LP3     ;//
    POP     PSW         ;//恢复现场
    POP     ACC         ;//
    RETI                ;//中断返回
    
    
;//延时0.2秒子程序 
DELAY:  
    MOV     R5, #20
D1:     
    MOV     R6, #20
D2:     
    MOV     R7, #20
D3:     
    DJNZ    R7, D3
    DJNZ    R6, D2
    DJNZ    R5, D1
    RET                 ;//延时子程序返回
    END                 ;//程序结束


___________________________________________________________    
//编写程序，当接收到外部中断1的中断请求后，用P1口控制8个共阳极发光二极管
//发光，实现暗点以大约1MHz频率由上到下循环移动30秒
//注意：共阳极的暗点，引脚输出为高电平
___________________________________________________________
    ORG     0000H
    AJMP    MIAN
    ORG     0013H
    AJMP    EXT1        ;//外部中断1的中断入口地址
    
    ORG     0030H
MAIN:
    SETB    EA          ;//打开中断总开关
    SETB    EX1         ;//打开外部中断1中断开关
    MOV     SP, #70H    ;//重新设置堆栈
;//主程序
;//。。。

EXT1:
    MOV     R1, #30     ;//30秒计数初始值
    MOV     P1, #0FFH   ;//对P1初始化为全亮
    MOV     A, #01H     ;//暗点引脚为高电平
LOOP:
    ACALL   DELAY1S     ;//延时1秒
    RL      A           ;//循环左移
    MOV     P1, A       ;//
    DJNZ    R1, LOOP    ;//30秒计数
    RETI                ;//中断返回
    END



/*******************************************************************************
                              MCS51 定时器
*******************************************************************************/  
1 TCON(定时器控制寄存器)(可以进行位寻址)
___________________________________________________________
bit7    bit6    bit5    bit4    bit3    bit2    bit1    bit0
8FH     8EH     8DH     8CH     8BH     8AH     89H     88H
TF1     TR1     TF0     TR0     IE1     IT1     IE0     IT0
___________________________________________________________
定时器Tx中断请求溢出标志位
TF1(TCON.7)     //定时器T1中断请求溢出标志位
TF0(TCON.5)     //定时器T0中断请求溢出标志位
//当计数定时器产生溢出时，相应溢出标志位由(硬件置“1”)，表示定时/计数已完成
//它是提供查询的状态位。采用查询方式时，(由软件清零)
//中断方式时，(由硬件清零)


2 定时器Tx运行控制位
TR1(TCON.6)     //定时器T1运行控制位
TR0(TCON.4)     //定时器T0运行控制位
// TR1=0(关闭TR1); TR1=1(启动TR1); (由软件置位或清零)


3 外部中断请求标志
//IE0, IE1 (外部中断请求标志)“硬件自动设置”
//CPU采样到INTx端有效的中断请求后，IEx位由硬件自动置“1”
//在中断响应期间(在转向中断服务程序时),由硬件自动清零


4 外部中断触发方式控制位
//IT0, IT1 (外部中断触发方式控制位)“由用户软件设置”
//ITx=“0”   低电平触发方式(至少1个机器周期的低电平)
//ITx=“1”   负跳脉冲触发方式


5 TMOD(定时器方式选择控制寄存器)(不能进行位寻址)
 ______________________________________________________________
/      定时计数器1               \     定时计数器0                 \
|_______________________________|_______________________________|
|__bit7    bit6    bit5    bit4 |  bit3    bit2    bit1    bit0 |
|__B7H     B6H     B5H     B4H  |  B3H     B2H     B1H     B0H  |
|__GATE    C/T     M1      M0   |  GATE    C/T     M1      M0   |
|_______________________________|_______________________________| 
// GATE 门控位
“0”    //不用外部门，只将TR0/TR1来启动定时器
“1”    //使用外部门，外部请求信号INT0/INT1(高电平)和TR0/TR1(置“1”)共同来启动定时器  
// C/T   定时器/计数器方式选择位
“0”    //定时器
“1”    //计数器 
// M1, M0工作方式选择位
M1 M0   工作方式    功能说明
“0 0”   工作方式0   13位定时器/计数器(TL0低5位, TH0高8位)
“0 1”   工作方式1   16位定时器/计数器
“1 0”   工作方式2   自动填充8位定时器/计数器
“1 1”   工作方式3   定时器0和定时器1的功能是不一样的
    
    
3 定时计数工作在方式0下是13位(计数范围1~8192)
//定时工作方式时，定时时间的计算公式为：
    定时时间 = (8192-计数初值)*晶振周期*12 = (8192-计数初值)*机器周期
// 若晶振频率为6MHz，1个机器周期为： 1/(6*10^6) x 12 =2us
//则最小定时时间为：   2^13 - (2^13-1) x2us = 2us
//则最大定时时间为：   (2^13-0) x2us = 16384us =16.384ms
    
    
4 定时器工作方式3(M1M0=11)
//只用于定时器0，T0被分为两个独立的8位计数器
//定时/计数0在工作方式3时，由于TF1被占用，定时/计数1中能工作在工作方式0,1,2中   
    
    

/*******************************************************************************
                                  定时器例程
*******************************************************************************/ 
设单片机晶振频率Fosc=6MHz，使用定时器1以方式0，产生周期为200us的等宽正方波脉冲，
并由P1.0输出。要求以查询方式完成。
0 //计算计数初值
//欲产生200us的等宽正方波脉冲，只需在P1.0端口以100us为周期交替输出高低电平即可实现
//为此定时时间应为100us。使用6MHz晶振，则一个机器周期为2us
//方式0为13位计数结构，计数最大值为8192.
设待求的计数初值为x，则：(8192-x)x2us = 100us
求解得：x=8142
//低5位(OEH), 高8位(FEH)

1 //TMOD寄存器初始化
设置定时器/计数器1的工作方式为0，则M1M0=00
为实现定时功能，C/T=0
为实现定时器/计数器1的运行控制，则CATE=0

2 //TCON寄存器初始化
TR1=1；启动定时器1
___________________________________________________________
    
    MOV     TMOD, #00H  ;//设置TMOD寄存初始值
    MOV     TH1,  #0FEH ;//设置定时器的计数初值为8142
    MOV     TL1,  #OEH  ;//设置定时器的计数初值为8142
    SETB    TR1         ;//启动定时器1
LOOP1:
    JBC     TF1, LOOP2  ;//查询定时器1的溢出标志位；若为“1”，则清零并跳转
    SJMP    LOOP1
LOOP2:
    MOV     TH1, #0FEH  ;//重新设置计数初值
    MOV     TL1, #OEH   ;//重新设置计数初值
    CLR     TF1         ;//将溢出标志位TF1清“0”
    CPL     P1.0        ;//P1.0口输出取反
    SJMP    LOOP1
    


___________________________________________________________
//使用定时器1以方式0，产生周期为500us的等宽正方波脉冲
//并由P1.0输出。编程用中断方式实现
___________________________________________________________
    ORG     0000H
    LJMP    MAIN
    ORG     001BH       ;//定时器T1中断
    LJMP    TOINT1
    
    ORG     0030H
MAIN:
    MOV     TMOD, #00H  ;//定时器1为定时功能
    MOV     TH1, #0FCH  ;//设置定时器的计数初值
    MOV     TL1, #03H   ;//设置定时器的计数初值
    SETB    EA          ;//打开中断总开关
    SETB    ET1         ;//打开定时器1中断开关
    SETB    TR1         ;//打开定时器1
    SJMP    $

;//定时器1中断服务程序
TOINT1:
    MOV     TH1, #0FCH  ;//重新设置计数初值
    MOV     TL1, #03H   ;//重新设置计数初值
    CPL     P1.0        ;//P1.0口输出取反
    RETI                ;//中断返回(中断标志位由硬件自动清零)



___________________________________________________________
//使用定时器0以方式2，产生周期为200us的等宽正方波脉冲
//并由P1.0输出。编程用中断方式实现
___________________________________________________________
    ORG 0000H
    LJMP MAIN
    ORG 000BH
    LJMP TOINT0         ;//定时器T0中断入口
    
    ORG 0030H
MAIN:
    MOV TMOD, #00000010B;//T0定时功能，工作方式2
    MOV TH0, #0CEH      ;//计数初值，50x2us=100us, 256-50=201
    MOV TL0, #OCEH      ;//工作方式2，两个初值一样
    SETB EA             ;//打开中断总开关
    SETB ET0            ;//打开定时器0中断
    SETB TR0            ;//启动定时器0
    SJMP $

;//定时器工作方式2，中断服务了程序
TOINT0:
    CPL P1.0
    RETI



/*******************************************************************************
                              MCS51 串行通信
*******************************************************************************/
-3//发送寄存器/接收寄存器SBUF
//两个物理上独立的接收，发送缓冲器
//它们占用同一个地址99H,可同是发送，接收数据
//发送缓冲器只能写入，不能读出
//接收缓冲器只能读出，不能写入

-2//对于发送缓冲器SBUF(TX),因为发送时CPU是主动的，
//不会发生重叠错误，因此不需要使用双缓冲器结构来保持最大传送速率
//对SBUF执行“写”命令时 (MOV SBUF, A), SBUF指发送缓冲器

-1 对于接收缓冲器SBUF(RX),它是双缓冲结构
//在前一个字节被从SBUF读出之前，第二个字节开始被接收
//对SBUF执行“读”命令时 (MOV A, SBUF), SBUF指接收缓冲器


0 串行口工作方式
方式 0
//以8位数据为一帧，不设起始位和停止位，
//先发送或接收最低位
方式 1
//以10位数据为一帧，各设有一位起始位“0”和停止位“1”
//中间为8位数据，先发送或接收最低位
方式 2，3
//以11位数据为一帧，各设有一位起始位“0”和停止位“1”
//中间为8位数据，先发送或接收最低位
//第10位为附加位，可以作为奇偶校验位，由软件清“0”或置“1”


1 串行口波特率
//方式0与方式2的波特率是固定的，为振荡频率Fosc的12，32，64分频。
//方式1与方式3的波特率是可变的，由定时器T1的溢出率决定的。
方式0的波特率: 波特率 = fosc/12
方式2的波特率: 波特率 = 2^SMOD x fosc/12
方式1的波特率: 波特率 = (2^SMOD /32) x (T1溢出率)
方式3的波特率: 波特率 = (2^SMOD /32) x (T1溢出率)


2 串行口波特率设置
//设定时器1的工作方式为第2种
//溢出周期 = 定时时间 = (256-x) * 晶振周期 * 12 = (256-x) * (12/fosc)
波特率 = (2^SMOD/32) * (T1溢出率)
      = (2^SMOD/32) * {fosc/[12*(256-x)]}
    x = 256 - [fosc*(2^SMOD)]/(384*波特率)
//注意：当定时器T1作为波特率发生器使用时，应选择自动加载初值的定时器方式2


3 例：80C51单片机晶振频率Fosc=11.05926MHz,
//定时器1以方式2作为波特率发生器，波特率为2400波特。求初值
x = 256 - [11.0592MHz*(2^SMOD)]/(384*2400)
  = 244(F4H)



