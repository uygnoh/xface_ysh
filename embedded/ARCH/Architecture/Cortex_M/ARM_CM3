############################################################
### % Cortex-M3 特殊功能寄存器
############################################################
0 % xPSR 状态字寄存器
APSR        % 应用程序
IPSR        % 中断号
EPSR        % 执行


1 % PRIMASK 
这是个只有 1 个位的寄存器。当它置 1 时,就关掉所有可屏蔽的异常,
只剩下 NMI和硬 fault 可以响应。它的缺省值是 0,表示没有关中断。


2 % FAULTMASK
这是个只有 1 个位的寄存器。当它置 1 时,只有 NMI 才能响应,所有
其它的异常,包括中断和 fault,通通闭嘴。它的缺省值也是 0,表示没有关异常。


3 % BASEPRI
这个寄存器最多有 9 位(由表达优先级的位数决定)。它定义了被屏蔽优先级的
阈值。当它被设成某个值后,所有优先级号大于等于此值的中断都被关(优先级号
越大,优先级越低)。但若被设成 0,则不关闭任何中断,0 也是缺省值


4 % CONTROL控制寄存器(仅当在特权级下操作时才允许写该位)
CONTROL[1] 
0           % 选择主堆栈指针MSP(复位后缺省值)
1           % 选择进程堆栈指针PSP
在线程或基础级(没有在响应异常——译注),可以使用 PSP。
在 handler 模式下,只允许使用 MSP,所以此时不得往该位写 1。

CONTROL[0]
0           % 特权级的线程模式
1           % 用户级的线程模式
Handler 模式永远都是特权级的。


5 % (MRS, MSR)特殊功能寄存器访问的专用指令
要访问 PRIMASK, FAULTMASK 以及 BASEPRI,同样要使用 MRS/MSR 指令,如:
MRS     R0,     BASEPRI     ;读取 BASEPRI 到 R0 中
MSR     R0,     PRIMASK     ;写入 R0 到 BASEPRI 中
% 其实,为了快速地开关中断,CM3 还专门设置了一条 CPS 指令,有 4 种用法
CPSID I                     ;PRIMASK=1, ;关中断
CPSIE I                     ;PRIMASK=0, ;开中断
CPSID F                     ;FAULTMASK=1;关异常
CPSIE F                     ;FAULTMASK=0;开异常



############################################################
### % Cortex-M3操作模式
############################################################
当处理器处在线程状态下时,既可以使用特权级,也可以使用用户级;
另一方面, handler模式总是特权级的。在复位后,处理器进入线程模式+特权级。




###########################################################
### % STM32异常
###########################################################
% 异常编号  异常类型    优先级     描述
_________________________________________________
0          Reserved            (0x00000000)
1          Reset      -3       复位(0x00000004)
2          NMI        -2       不可屏幕中断(0x00000008)
3          HardFault  -1       所有的错误都可能引发，前提是相应的错误处理末便能
4          MemManage  0        储存器管理错误
5          BusFault   1        总线错误
6          UsageFault 2        程序错误
7          %Reserved
8          %Reserved
9          %Reserved
10         %Reserved
11         SVCall              请求管调用
12         Debug Monitor       调式监控
13         %Reserved   
14         PendSV              可挡挂起的服务调用
15         SysTick             系统节拍定时器



############################################################
### % STM32中断
############################################################
在 NVIC 的中断控制及状态寄存器中,有一个 VECTACTIVE 位段;另外,还有一
个特殊功能寄存器 IPSR。在它们二者的里面,都记录了当前正服务异常的编号。



###########################################################
### % STM32向量表重定位
###########################################################
% 一般来说，起始地址(0x00000000)处应该是启动存储器它可以为FLASH存
  储器或ROM设备，而运行时不能对其修改不过，有些应用可能需要在运行时
  修改或定义向量表为了进行这种处理， Cortex-m3/m4处理器实现了一种
  向量表重定位的特性向量表重定位特性提供了一个名为向量表偏移寄存器
  (VTOR)的可编程寄存器
% 复制向量表到SRAM开头处(0x20000000)的代码实例
_________________________________________________
#define HW32_REG(ADDRESS)   (*((volatile unsingned long *)(ADDRESS)))
#define VTOR_NEW_ADDR       0x20000000
int i;
for (i = 0; i < 48; i++)    //在设置VTOR前首先将向量表复制到SRAM
{
    /* % 将向量表的入口从FLASH复制到SRAM */
    HW32_REG((VTOR_NEW_ADDR + (i<<2))) = HW32_REG((i<<2));
}
__DMB();                    // % 数据存储器屏障，确保到存储器的写操作结束
SCB->VTOR = VTOR_NEW_ADDR;  // % 将VTOR设置为新的向量表位置
__DSB();                    // % 数据同步屏障，确保接下来的所有指令都使用新配置
_________________________________________________



