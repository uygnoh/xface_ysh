###########################################################
### % Queue队列,具有一定约束的线性表
###########################################################
% 队列是一种先进先出的数据结构
数据插入：   入队列AddQ
数据删除：   出队列DeleteQ



###########################################################
### % Quene队列的抽象数据类型描述
###########################################################
类型名称：  队列Queue
数据对象集：一个有0个或多个元素的有穷线性表
操作集：   长度MaxSize的队列Q，队列元素item->ElementType

1 Queue CreateQueue(int MaxSize)      %生成长度为MaxSize的空队列
2 int IsFullQ(Queue Q, int MaxSize)   %判断队列Q是否已满
3 void AddQ(Queue Q, ElementType item)%将数据元素item插入队列Q中
4 int IsEmptyQ(Queue Q)               %判断队列是否为空
5 ElementType DeleteQ(Queue Q)        %将队头元素从队列中删除并返回



###########################################################
### % Queue队列的顺序存储实现
###########################################################
% 队列的顺序存储结构通常由一个一维数组和一个记录
% 队列头元素位置的变量front以及一个记录队列尾元
% 素变量rear组成。

#deifne MaxSize <存储数据元素的最大个数>
struct QNode {
    ElementType Data[MaxSize];
    int rear;
    int front;
};
typeder struct QNode *Queue;


% 入队列,入到队列尾部
void AddQ(Queue PtrQ, ElementType item)
{
    if ((PtrQ->rear+1) % MaxSize == PtrQ->fornt)
    {
        printf("队列已满");
        return;
    }
    PtrQ->rear = (PtrQ->rear+1) % MaxSize;
    PtrQ->Data[PtrQ->rear] = item;
}
% 出队列，从队列的头部出来
ElementType DeleteQ(Queue PtrQ)
{
    if (PtrQ->front == PtrQ->rear)
    {
        printf("队列为空");
        return ERROR;
    }
    else
    {
        PtrQ->font = (PtrQ->front+1) % MaxSize;
        return PtrQ->Data[PtrQ->front];
    }
}



###########################################################
### % Queue队列的链式存储实现
###########################################################
struct Node {           % 链表的结点结构
    ElementType Data;
    struct Node *Next;
};
struct QNode {          % 链式队列结构
    struct Node *rear;  % 指向尾结点
    struct Node *front; % 指向头结点
};
typedef struct QNode *Queue;
Queue PtrQ;

% 不带头结点的链式队列出队操作
ElementType DeleteQ(Queue PtrQ)
{
    struct Node *FrontCell;
    ElementType FrontElenm;
    
    if (PtrQ->front == NULL)
    {
        printf("队列空");
        return ERROR;
    }
    
    FrontCell = PtrQ->front;                % 找到队列头个元素
    if (PtrQ->front = PtrQ->rear)           % 若队列只有一个元素
        PtrQ->front = PtrQ->rear = NULL;    % 删除后队列置为空
    else
        PtrQ->front = PtrQ->front->Next;
    
    FrontElem = FrontCell->Data;
    free(FrontCell);                        % 释放被删除的结点
    return FrontElem;
}









