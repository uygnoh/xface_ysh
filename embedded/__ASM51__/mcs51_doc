/*******************************************************************************
        => MCS-51时序
*******************************************************************************/
//一个机器周期是振荡频率的12分频，含有6个状态时时间S， 依次表示为S1~S6
//由于一个状态时间S双包括2个节拍P，因此一个机器周期共有12个节拍。分别记作：
| S1P1, S1P2, S2P1, S2P2, S3P1, S3P2, S4P1, S4P2, S5P1, S5P2, S6P1, S6P2 |
|________________________________________________________|_______________|
|               1个振荡周期  = 1个节拍
|               1个状态时间  = 2个节拍(p1 p2)
|               1个机器周期  = 6个状态时间
|               1个机器周期  = 12个振荡周期
|               1个机器周期  = 12个节拍
|_________________________________________________________
|                                                         |
                   //时序之间的关系                         |
|_________________________________________________________|
           Tosc 振荡周期: Oscillation period = 1/fosc
              S 状态时间: Status time        = 2Tosc
            ALE 地址锁存: Address Latch             
                有效信号: Effective signal   = 6Tosc
                机器周期: Machine cycle      = 12Tosc



/*******************************************************************************
        => MCS-51__机器码__
*******************************************************************************/
CPU只能执行机器码（由8位二进制组成，分为1字节， 2字节， 3字节）
        RET                     //(22H        )机器码
        MOV     A, #0FH         //(74H 0FH    )机器码
        MOV     74H, #08H       //(75H 74H 0BH)机器码



/*******************************************************************************
        => MCS-51__复位__
*******************************************************************************/
复位为微控制器提供了初始化手段，当（RST引脚保持24个振荡周期）以上的高电平，将引起复位。
//_________________________________________________________
// 复位后的部分（SFR）寄存器的状态
//_________________________________________________________
        PC  = 0000H
        PWS = 00H
        SP  = 07H



/*******************************************************************************
        => MCS-51存储系统
*******************************************************************************/
//_____________________________________________________________
        00H~1FH //通用寄存器区（R0~R7） GRP0,代表第0组(分为4组)
//_____________________________________________________________
   任意时刻CPU只能使用其中一组寄存器，它是由PSW寄存器(RS1,RS0)设置

   MOV  A, R0      <===>      MOV  A, 00H 

_________________________________________________________________
| GRP0  |  07  |  06  |  05  |  04  |  03  |  02  |  01  |  00  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
| GRP1  |  0F  |  0E  |  0D  |  0C  |  0B  |  0A  |  09  |  08  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
| GRP2  |  17  |  16  |  15  |  14  |  13  |  12  |  11  |  10  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
| GRP3  |  1F  |  1E  |  1D  |  1C  |  1B  |  1A  |  19  | 18   |
|_______|______|______|______|______|______|______|______|______|


//_____________________________________________________________
        20H~2FH  //位地址区（共16个单元）, 位地址: 00H~7FH
//_____________________________________________________________
|___________________|
|  CLR     00H      | //清除位地址00H单元
|___________________|
_________________________________________________________________
|   0   |  27  |  26  |  25  |  24  |  23  |  22  |  21  |  20  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   1   |  2F  |  2E  |  2D  |  2C  |  2B  |  2A  |  29  |  28  |
|_______|______|______|______|______|______|______|______|______|


//_____________________________________________________________
        30H~7FH //为用户RAM区(数据缓冲区, 堆栈区, 共有80个单元)
//_____________________________________________________________
|___________________|
|  MOV  A, 30H      | //30H单元内容送入A中
|___________________|
_________________________________________________________________
|   0   |  37  |  36  |  35  |  34  |  33  |  32  |  31  |  30  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   1   |  3F  |  3E  |  3D  |  3C  |  3B  |  3A  |  39  |  38  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   2   |  47  |  46  |  45  |  44  |  43  |  42  |  41  |  40  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   3   |  4F  |  4E  |  4D  |  4C  |  4B  |  4A  |  49  |  48  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   4   |  57  |  56  |  55  |  54  |  53  |  52  |  51  |  50  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   5   |  5F  |  5E  |  5D  |  5C  |  5B  |  5A  |  59  |  58  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   6   |  67  |  66  |  65  |  64  |  63  |  62  |  61  |  60  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   7   |  6F  |  6E  |  6D  |  6C  |  6B  |  6A  |  69  |  68  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   8   |  77  |  76  |  75  |  74  |  73  |  72  |  71  |  70  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   9   |  7F  |  7E  |  7D  |  7C  |  7B  |  7A  |  79  |  78  |
|_______|______|______|______|______|______|______|______|______|


//_____________________________________________________________
        内部程序存储器__FLASH_ROM__
//_____________________________________________________________
        1 0000H~0002H   //系统启动单元，单片机复位后(PC=0000H)
        2 0003H~000AH   //外部中断0地址区
        3 000BH~0012H   //定时/计数器0中断地址区
        4 0013H~001AH   //外部中断1地址区
        5 001BH~0022H   //定时/计数器1中断地址区
        6 0023H~002AH   //串行中断地址区
        EA = 1          //使用内部程序存储区ROM
        EA = 0          //使用外部程序存储区ROM




/*******************************************************************************
        => MCS-51寻址方式
*******************************************************************************/
//_____________________________________________________________
(寻址)指的是单片机的存储空间中寻找指令规定的操作数据的地址，并将操作数据取出来
//_____________________________________________________________
        Rn              //当前寄存器组的8个通用寄存器R0~R7       
        Ri              //用作间接寻址的寄存器，i = 0, 1  
        direct          //8位直接地址 
        rel             //8位有符号立即数 
        #data           //8位立即数 
        #data16         //16位立即数 
        addr16          //16位目的地址 
        addr11          //11位目的地址      
        rel             //相对转移指令中的偏移量,为8位有符号补码数     
        DPTR            //数据指针                             
        bit             //内部RAM（包括专用寄存器）中的直接寻址位  
        A               //累加器                              
        B               //寄存器B   
        C               //进位标志位，它是布尔处理机的累加器，也称之为累加位 
        @               //间址寄存器的前缀标志                         
        /               //加在位地址的前面，表示对该位状态取反  
 

//_____________________________________________________________
// 寄存器寻址方式
//_____________________________________________________________
可以进行寄存器寻址访问的有（R0~R7, A, DPTR）
__________________________________
| MOV  A,  Rn                    |
|________________________________|


//_____________________________________________________________
// 立即寻址方式
//_____________________________________________________________
__________________________________
| MOV  A,  #data8                |
|________________________________|
__________________________________
| MOV  DPTR,  #data16            |
|________________________________|


//_____________________________________________________________
// 直接寻址方式（指令中操作数直接以单元地址的形式给出 ）
// 它是访问SFR（特殊寄存器）的主要方法！！！
//_____________________________________________________________
__________________________________
| MOV  A,  direct                |
|________________________________|
//访问低（128）字节RAM时：
        MOV     A, 40H
//访问（SFR）特殊功能寄存器时
        MOV     A, 90H
        MOV     A, P1


//_____________________________________________________________
// 寄存器间接寻址方式
//_____________________________________________________________
寄存器中存放的是操作数的地址，即操作数是通过寄存器间接得到的内部RAM低128单元，
间址寄存器： i = 0, 1
//52系列微控制器（访问高128字节RAM）时，只能使用（R0, R1）作为间址寄存器
//访问低（128）字节RAM时：
        MOV     R0, #40H
        MOV     A, @R0
//访问高（128）字节RAM时：
        MOV     R0, #90H
        MOV     A, @R0


//_____________________________________________________________
// 基址寄存器 + 变址寄存器间接寻址
//_____________________________________________________________
用于访问程序存储器的一个单元，该单元的地址是（基址寄存器DPTR或PC）的内容
与变址寄存器（A）的内容之和。 __查表指令__（访问程序存储区）
        MOV     DPTR, #0400H
        MOV     A, #05H
        MOVC    A, @A+DPTR


//_____________________________________________________________
// 位寻址方式
//_____________________________________________________________
查寻片内RAM单元中的 20H~2FH，位地址（00H~7FH） 和允许进行位操作的专用寄存
器中的位地址，从该地址中取出位数据进行操作。
//通用RAM区可位寻址空间
        MOV     C, 3AH
//SFR（特殊功能寄存器）中可位寻址空间
        MOV     C, 0D5H
        MOV     C, PSW.5
        MOV     C, F0


//_____________________________________________________________
// 相对寻址方式（是为了解决程序转移而专门设置的）
//_____________________________________________________________
转移目的地址 = 转移指令地址 + 转移指令字节数 + rel
__________________________________
| JZ   rel                       |
|________________________________|



/*******************************************************************************
        => MCS-51
*******************************************************************************/
//_____________________________________________________________
        (SP) = 60H; (A) = 30H; (B) = 70H;
//_____________________________________________________________
        PUSH    A       //SP = (SP + 1);        SP(61H) = A;
        PUSH    B       //SP = (SP + 1);        SP(62H) = B;
        POP     B       //B  = SP(62H);         SP = (SP - 1);
        POP     A       //A  = SP(61H);         SP = (SP - 1);


//_____________________________________________________________
        A与外部数据存储器数据交互
//_____________________________________________________________
        MOV     DPTR, #1000H
        MOV     A, #55H
        MOVX    @DPTR, A









