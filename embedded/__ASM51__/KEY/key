/*******************************************************************************
        => 独立按键（单片机上机，默认所有IO端口为“高电平”）
*******************************************************************************/
KEY_ADD         BIT     P2.0
KEY_SUB         BIT     P2.1

MAIN:
        MOV     R2, #00H
        MOV     DPTR, #TABLE
LOOP:
        MOV     A, R2
        MOVC    A, @A+DPTR
        MOV     P0, A


       
;//____________________________________________________________
;// KEY_00__加键
;//____________________________________________________________
KEY_00:
        JB      KEY_ADD, KEY_01 ;//如果KEY_ADD为“1”，则跳转到KEY_01
                                ;//如果KEY_ADD这个键没有被按下，则转移到KEY_01
        MOV     A, #2           ;//带参数的（延时函数）
        CALL    DELAY_VAL       ;//调用延时，消除抖动
        JNB     KEY_ADD, $      ;//如果KEY_ADD为“0”， 则程序就停在这里（松手检测）
        MOV     A, #2           ;//带参数的（延时函数）
        CALL    DELAY_VAL       ;//调用延时，消除抖动
        JNB     KEY_ADD, LOOP_00;//如果KEY_ADD为“0”， 则程序跳转到__LOOP_00
LOOP_00:
        INC     R2              ;//R2++
        CJNZ    R2, #16, LOOP   ;//如果R2不等于16，则跳转到LOOP执行
        JMP     MAIN            ;//否则跳转到MAIN中，清零R2



;//____________________________________________________________
;// KEY_00__减键
;//____________________________________________________________
KEY_01:
        JB      KEY_ADD, KEY_00 ;//如果KEY_SUB为“1”，则跳转到KEY_00
                                ;//如果KEY_ADD这个键没有被按下，则转移到KEY_01
        MOV     A, #2           ;//带参数的（延时函数）
        CALL    DELAY_VAL       ;//调用延时，消除抖动
        JNB     KEY_SUB         ;//如果KEY_ADD为“0”， 则程序就停在这里（松手检测）
        MOV     A, #2           ;//带参数的（延时函数）
        CALL    DELAY_VAL       ;//调用延时，消除抖动
        JNB     KEY_SUB, LOOP_01;//如果KEY_ADD为“0”， 则程序跳转到__LOOP_01
LOOP_01:
        DEC     R2
        CJNZ    #-1, LOOP
        MOV     R2, #15
        JMP     LOOP_00


;//____________________________________________________________
;// 带参数的延时函数
;//____________________________________________________________
DELAY_VAL:
        MOV     R7, A
LOOP_80:
        MOV     R6, #200
LOOP_90:
        MOV     R5, #248
        DJNZ    R5 $
        DJNZ    R6, LOOP_90
        DJNZ    R7, LOOP_80
        RET
        
        
/*******************************************************************************
        => 距阵按键
*******************************************************************************/
MAIN:
        MOV     R1, #00H
        MOV     DPTR, #TABLE
KEY_SCAN:
        MOV     P3, #00001111B
        JMP     K04


;//____________________________________________________________
;// 4x4 距阵按键扫描
;//____________________________________________________________
K04:    
        JB      P3.0, K05
        K440:    
                MOV     P3, #11101111B
                JB      P3.0, K450
                MOV     R1, #0
                JMP     KEY_DISPLAY
        K450:
                MOV     P3, #11011111B
                JB      P3.0, K460
                MOV     R1, #1
                JMP     KEY_DISPLAY
        K460:    
                MOV     P3, #10111111B
                JB      P3.0, K470
                MOV     R1, #2
                JMP     KEY_DISPLAY
        K470:    
                MOV     P3, #01111111B
                JB      P3.0, KEY_END
                MOV     R1, #3
                JMP     KEY_DISPLAY
;//____________________________________________________________
K05:    
        JB      P3.1, K06
        K541:    
                MOV     P3, #11101111B
                JB      P3.1, K551
                MOV     R1, #4
                JMP     KEY_DISPLAY
        K551:
                MOV     P3, #11011111B
                JB      P3.1, K561
                MOV     R1, #5
                JMP     KEY_DISPLAY
        K561:    
                MOV     P3, #10111111B
                JB      P3.1, K71
                MOV     R1, #6
                JMP     KEY_DISPLAY
        K571:    
                MOV     P3, #01111111B
                JB      P3.1, KEY_END
                MOV     R1, #7
                JMP     KEY_DISPLAY
;//____________________________________________________________                


//JB    BIT     Lable；如果BIT为“1”，则跳转到“Lable”处
//KEY_END放置在中间，是为了使（JB跳转指令可以跳转到这里）          
KEY_END:
        ret


;//____________________________________________________________
K06:    
        JB      P3.2, K06
        K642:    
                MOV     P3, #11101111B
                JB      P3.2, K652
                MOV     R1, #8
                JMP     KEY_DISPLAY
        K652:
                MOV     P3, #11011111B
                JB      P3.2, K662
                MOV     R1, #9
                JMP     KEY_DISPLAY
        K662:    
                MOV     P3, #10111111B
                JB      P3.2, K672
                MOV     R1, #10
                JMP     KEY_DISPLAY
        K672:    
                MOV     P3, #01111111B
                JB      P3.2, KEY_END
                MOV     R1, #11
                JMP     KEY_DISPLAY
;//____________________________________________________________
K07:    
        JB      P3.3, K06
        K743:    
                MOV     P3, #11101111B
                JB      P3.3, K753
                MOV     R1, #12
                JMP     KEY_DISPLAY
        K753:
                MOV     P3, #11011111B
                JB      P3.3, K763
                MOV     R1, #13
                JMP     KEY_DISPLAY
        K763:    
                MOV     P3, #10111111B
                JB      P3.3, K773
                MOV     R1, #14
                JMP     KEY_DISPLAY
        K773:    
                MOV     P3, #01111111B
                JB      P3.3, KEY_END
                MOV     R1, #15
                JMP     KEY_DISPLAY
                


;//____________________________________________________________
;//共阳极数码管编码表（0~F）
;//____________________________________________________________
KEY_DISPLAY:   
        MOV     A, R1
        MOVC    A, @A+DPTR
        MOV     P0, A
        LJMP    KEY_SCAN


;//____________________________________________________________
;//共阳极数码管编码表（0~F）
;//____________________________________________________________
TABLE:
        DB   0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8
        DB   0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8e
        END
        
        
        
/*******************************************************************************
        => 距阵按键（线反转法）
*******************************************************************************/
