/*******************************************************************************
        => 独立按键
*******************************************************************************/
KEY_ADD         BIT     P2.0
KEY_SUB         BIT     P2.1

MAIN:
        MOV     R2, #00H
        MOV     DPTR, #TABLE
LOOP:
        MOV     A, R2
        MOVC    A, @A+DPTR
        MOV     P0, A
        
;//____________________________________________________________
;// KEY_00__加键
;//____________________________________________________________
KEY_00:
        JB      KEY_ADD, KEY_01 ;//如果KEY_ADD为“1”，则跳转到KEY_01
                                ;//如果KEY_ADD这个键没有被按下，则转移到KEY_01
        MOV     A, #2           ;//带参数的（延时函数）
        CALL    DELAY_VAL       ;//调用延时，消除抖动
        JNB     KEY_ADD, $      ;//如果KEY_ADD为“0”， 则程序就停在这里（松手检测）
        MOV     A, #2           ;//带参数的（延时函数）
        CALL    DELAY_VAL       ;//调用延时，消除抖动
        JNB     KEY_ADD, LOOP_00;////如果KEY_ADD为“0”， 则程序跳转到__LOOP_00
LOOP_00:
        INC     R2
        CJNZ    R2, #16, LOOP
        JMP     MAIN

;//____________________________________________________________
;// KEY_00__减键
;//____________________________________________________________
KEY_01:
        JB      KEY_ADD, KEY_00 ;//如果KEY_SUB为“1”，则跳转到KEY_00
                                ;//如果KEY_ADD这个键没有被按下，则转移到KEY_01
        MOV     A, #2           ;//带参数的（延时函数）
        CALL    DELAY_VAL       ;//调用延时，消除抖动
        JNB     KEY_SUB         ;//如果KEY_ADD为“0”， 则程序就停在这里（松手检测）
        MOV     A, #2           ;//带参数的（延时函数）
        CALL    DELAY_VAL       ;//调用延时，消除抖动
        JNB     KEY_SUB, LOOP_01;//如果KEY_ADD为“0”， 则程序跳转到__LOOP_01
LOOP_01:
        DEC     R2
        CJNZ    #-1, LOOP
        MOV     R2, #15
        JMP     LOOP_00


;//____________________________________________________________
;// 带参数的延时函数
;//____________________________________________________________
DELAY_VAL:
        MOV     R7, A
LOOP_80:
        MOV     R6, #200
LOOP_90:
        MOV     R5, #248
        DJNZ    R5 $
        DJNZ    R6, LOOP_90
        DJNZ    R7, LOOP_80
        RET
