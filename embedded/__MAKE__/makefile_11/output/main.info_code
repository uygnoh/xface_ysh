
output/main.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000444 	.word	0x20000444
 8000128:	00000000 	.word	0x00000000
 800012c:	0800062c 	.word	0x0800062c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000448 	.word	0x20000448
 8000148:	0800062c 	.word	0x0800062c

0800014c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800014c:	4770      	bx	lr
 800014e:	bf00      	nop

08000150 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000150:	e7fe      	b.n	8000150 <HardFault_Handler>
 8000152:	bf00      	nop

08000154 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000154:	e7fe      	b.n	8000154 <MemManage_Handler>
 8000156:	bf00      	nop

08000158 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000158:	e7fe      	b.n	8000158 <BusFault_Handler>
 800015a:	bf00      	nop

0800015c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800015c:	e7fe      	b.n	800015c <UsageFault_Handler>
 800015e:	bf00      	nop

08000160 <SVC_Handler>:
 8000160:	4770      	bx	lr
 8000162:	bf00      	nop

08000164 <DebugMon_Handler>:
 8000164:	4770      	bx	lr
 8000166:	bf00      	nop

08000168 <PendSV_Handler>:
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop

0800016c <SysTick_Handler>:
 800016c:	4770      	bx	lr
 800016e:	bf00      	nop

08000170 <led_blink>:
#include "stm32f10x.h"

void led_blink(void)
{
 8000170:	b538      	push	{r3, r4, r5, lr}
        uint8_t i;
        GPIOA_CLOCK_ENABLE();                   //打开GPIOA时钟
        GPIOA->CRL  &= (uint32_t)(0xFFFFF0FF);  //清除相关的位
 8000172:	4b12      	ldr	r3, [pc, #72]	; (80001bc <led_blink+0x4c>)
	GPIOA->CRL  |= (uint32_t)(0xFFFFF3FF);  //PA2__推挽输出
 8000174:	2406      	movs	r4, #6
        for (i = 0; i < 6; i++) {               //循环 6 次
                GPIOA->ODR |= BIT_02;
 8000176:	461d      	mov	r5, r3
        GPIOA_CLOCK_ENABLE();                   //打开GPIOA时钟
 8000178:	4911      	ldr	r1, [pc, #68]	; (80001c0 <led_blink+0x50>)
 800017a:	698a      	ldr	r2, [r1, #24]
 800017c:	f042 0204 	orr.w	r2, r2, #4
 8000180:	618a      	str	r2, [r1, #24]
        GPIOA->CRL  &= (uint32_t)(0xFFFFF0FF);  //清除相关的位
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000188:	601a      	str	r2, [r3, #0]
	GPIOA->CRL  |= (uint32_t)(0xFFFFF3FF);  //PA2__推挽输出
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	f462 6240 	orn	r2, r2, #3072	; 0xc00
 8000190:	601a      	str	r2, [r3, #0]
                GPIOA->ODR |= BIT_02;
 8000192:	68eb      	ldr	r3, [r5, #12]
                __delay_ms(500);
 8000194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
                GPIOA->ODR |= BIT_02;
 8000198:	f043 0304 	orr.w	r3, r3, #4
 800019c:	60eb      	str	r3, [r5, #12]
                __delay_ms(500);
 800019e:	f000 f8d5 	bl	800034c <__delay_ms>
                GPIOA->ODR &= ~BIT_02;
 80001a2:	68eb      	ldr	r3, [r5, #12]
                __delay_ms(500);
 80001a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
                GPIOA->ODR &= ~BIT_02;
 80001a8:	f023 0304 	bic.w	r3, r3, #4
 80001ac:	60eb      	str	r3, [r5, #12]
                __delay_ms(500);
 80001ae:	f000 f8cd 	bl	800034c <__delay_ms>
 80001b2:	1e63      	subs	r3, r4, #1
        for (i = 0; i < 6; i++) {               //循环 6 次
 80001b4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80001b8:	d1eb      	bne.n	8000192 <led_blink+0x22>
        }
}
 80001ba:	bd38      	pop	{r3, r4, r5, pc}
 80001bc:	40010800 	.word	0x40010800
 80001c0:	40021000 	.word	0x40021000

080001c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001c4:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80001c6:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 80001c8:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 80001cc:	4b3a      	ldr	r3, [pc, #232]	; (80002b8 <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80001ce:	493b      	ldr	r1, [pc, #236]	; (80002bc <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 80001d0:	6818      	ldr	r0, [r3, #0]
{
 80001d2:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 80001d4:	f040 0001 	orr.w	r0, r0, #1
 80001d8:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80001da:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80001dc:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80001de:	4001      	ands	r1, r0
 80001e0:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001e2:	6819      	ldr	r1, [r3, #0]
 80001e4:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80001e8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80001ec:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001ee:	6819      	ldr	r1, [r3, #0]
 80001f0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80001f4:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80001f6:	6859      	ldr	r1, [r3, #4]
 80001f8:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 80001fc:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 80001fe:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000200:	9400      	str	r4, [sp, #0]
 8000202:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000204:	6819      	ldr	r1, [r3, #0]
 8000206:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800020a:	6019      	str	r1, [r3, #0]
 800020c:	e003      	b.n	8000216 <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800020e:	9b00      	ldr	r3, [sp, #0]
 8000210:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000214:	d009      	beq.n	800022a <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800021c:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 800021e:	9b00      	ldr	r3, [sp, #0]
 8000220:	3301      	adds	r3, #1
 8000222:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000224:	9b01      	ldr	r3, [sp, #4]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d0f1      	beq.n	800020e <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800022a:	4b23      	ldr	r3, [pc, #140]	; (80002b8 <SystemInit+0xf4>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000232:	bf18      	it	ne
 8000234:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000236:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000238:	9b01      	ldr	r3, [sp, #4]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d006      	beq.n	800024c <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800023e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000242:	4b1f      	ldr	r3, [pc, #124]	; (80002c0 <SystemInit+0xfc>)
 8000244:	609a      	str	r2, [r3, #8]
}
 8000246:	b002      	add	sp, #8
 8000248:	bc30      	pop	{r4, r5}
 800024a:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800024c:	491d      	ldr	r1, [pc, #116]	; (80002c4 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800024e:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000250:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000252:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000254:	f040 0010 	orr.w	r0, r0, #16
 8000258:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800025a:	6808      	ldr	r0, [r1, #0]
 800025c:	f020 0003 	bic.w	r0, r0, #3
 8000260:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000262:	6808      	ldr	r0, [r1, #0]
 8000264:	f040 0002 	orr.w	r0, r0, #2
 8000268:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800026a:	6859      	ldr	r1, [r3, #4]
 800026c:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800026e:	6859      	ldr	r1, [r3, #4]
 8000270:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000272:	6859      	ldr	r1, [r3, #4]
 8000274:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000278:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800027a:	6859      	ldr	r1, [r3, #4]
 800027c:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8000280:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000282:	6859      	ldr	r1, [r3, #4]
 8000284:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8000288:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 800028a:	6819      	ldr	r1, [r3, #0]
 800028c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000290:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000292:	6813      	ldr	r3, [r2, #0]
 8000294:	019b      	lsls	r3, r3, #6
 8000296:	d5fc      	bpl.n	8000292 <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000298:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800029a:	4907      	ldr	r1, [pc, #28]	; (80002b8 <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800029c:	f023 0303 	bic.w	r3, r3, #3
 80002a0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80002a2:	6853      	ldr	r3, [r2, #4]
 80002a4:	f043 0302 	orr.w	r3, r3, #2
 80002a8:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80002aa:	684b      	ldr	r3, [r1, #4]
 80002ac:	f003 030c 	and.w	r3, r3, #12
 80002b0:	2b08      	cmp	r3, #8
 80002b2:	d1fa      	bne.n	80002aa <SystemInit+0xe6>
 80002b4:	e7c3      	b.n	800023e <SystemInit+0x7a>
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000
 80002bc:	f8ff0000 	.word	0xf8ff0000
 80002c0:	e000ed00 	.word	0xe000ed00
 80002c4:	40022000 	.word	0x40022000

080002c8 <SystemCoreClockUpdate>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002c8:	4a11      	ldr	r2, [pc, #68]	; (8000310 <SystemCoreClockUpdate+0x48>)
 80002ca:	6853      	ldr	r3, [r2, #4]
 80002cc:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 80002d0:	2b08      	cmp	r3, #8
 80002d2:	d10e      	bne.n	80002f2 <SystemCoreClockUpdate+0x2a>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002d4:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002d6:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 80002d8:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 80002dc:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 80002de:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 80002e2:	d510      	bpl.n	8000306 <SystemCoreClockUpdate+0x3e>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80002e4:	6852      	ldr	r2, [r2, #4]
 80002e6:	0392      	lsls	r2, r2, #14
 80002e8:	d40d      	bmi.n	8000306 <SystemCoreClockUpdate+0x3e>
          SystemCoreClock = HSE_VALUE * pllmull;
 80002ea:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <SystemCoreClockUpdate+0x4c>)
 80002ec:	fb02 f303 	mul.w	r3, r2, r3
 80002f0:	e000      	b.n	80002f4 <SystemCoreClockUpdate+0x2c>
  switch (tmp)
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <SystemCoreClockUpdate+0x4c>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f4:	4a06      	ldr	r2, [pc, #24]	; (8000310 <SystemCoreClockUpdate+0x48>)
 80002f6:	4908      	ldr	r1, [pc, #32]	; (8000318 <SystemCoreClockUpdate+0x50>)
 80002f8:	6852      	ldr	r2, [r2, #4]
 80002fa:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80002fe:	5c8a      	ldrb	r2, [r1, r2]
  SystemCoreClock >>= tmp;  
 8000300:	40d3      	lsrs	r3, r2
 8000302:	610b      	str	r3, [r1, #16]
}
 8000304:	4770      	bx	lr
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000306:	4a05      	ldr	r2, [pc, #20]	; (800031c <SystemCoreClockUpdate+0x54>)
 8000308:	fb02 f303 	mul.w	r3, r2, r3
 800030c:	e7f2      	b.n	80002f4 <SystemCoreClockUpdate+0x2c>
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000
 8000314:	007a1200 	.word	0x007a1200
 8000318:	20000000 	.word	0x20000000
 800031c:	003d0900 	.word	0x003d0900

08000320 <__delay_us>:
          SysTick是一个“24”位的递减计数器， SysTick->LOAD为自动重装载计数器
*******************************************************************************/
void __delay_us(uint32_t nus)
{
        uint32_t status;
        SysTick->LOAD = 9 * nus;        //设置自动重装载寄存器的数值
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <__delay_us+0x28>)
{
 8000322:	b410      	push	{r4}
        SysTick->VAL  = 0x00;           //清空计数器，使用“/8”时钟源
        SysTick->CTRL = 0x01;           //打开SysTick定时器
 8000324:	2101      	movs	r1, #1
        SysTick->VAL  = 0x00;           //清空计数器，使用“/8”时钟源
 8000326:	2400      	movs	r4, #0
        do {                            //获取SysTick定时器的状态
                status = SysTick->CTRL;
 8000328:	461a      	mov	r2, r3
        SysTick->LOAD = 9 * nus;        //设置自动重装载寄存器的数值
 800032a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800032e:	6058      	str	r0, [r3, #4]
        SysTick->VAL  = 0x00;           //清空计数器，使用“/8”时钟源
 8000330:	609c      	str	r4, [r3, #8]
        SysTick->CTRL = 0x01;           //打开SysTick定时器
 8000332:	6019      	str	r1, [r3, #0]
                status = SysTick->CTRL;
 8000334:	6813      	ldr	r3, [r2, #0]
        } while ((status & 0x01) && (!(status & (1<<16))));
 8000336:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 800033a:	2b01      	cmp	r3, #1
 800033c:	d0fa      	beq.n	8000334 <__delay_us+0x14>
        SysTick->CTRL = 0x00;           //关闭SysTick定时器
 800033e:	2300      	movs	r3, #0
        SysTick->VAL  = 0x00;           //清空计数器
}
 8000340:	bc10      	pop	{r4}
        SysTick->CTRL = 0x00;           //关闭SysTick定时器
 8000342:	6013      	str	r3, [r2, #0]
        SysTick->VAL  = 0x00;           //清空计数器
 8000344:	6093      	str	r3, [r2, #8]
}
 8000346:	4770      	bx	lr
 8000348:	e000e010 	.word	0xe000e010

0800034c <__delay_ms>:
          SysTick是一个“24”位的递减计数器， SysTick->LOAD为自动重装载计数器
*******************************************************************************/
void __delay_ms(uint32_t nms)
{
        uint32_t status;
        SysTick->LOAD = 9000 * nms;
 800034c:	f242 3128 	movw	r1, #9000	; 0x2328
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <__delay_ms+0x2c>)
{
 8000352:	b430      	push	{r4, r5}
        SysTick->VAL  = 0x00;
 8000354:	2500      	movs	r5, #0
        SysTick->CTRL = 0x01;
 8000356:	2401      	movs	r4, #1
        do {
                status = SysTick->CTRL;
 8000358:	461a      	mov	r2, r3
        SysTick->LOAD = 9000 * nms;
 800035a:	fb01 f000 	mul.w	r0, r1, r0
 800035e:	6058      	str	r0, [r3, #4]
        SysTick->VAL  = 0x00;
 8000360:	609d      	str	r5, [r3, #8]
        SysTick->CTRL = 0x01;
 8000362:	601c      	str	r4, [r3, #0]
                status = SysTick->CTRL;
 8000364:	6813      	ldr	r3, [r2, #0]
        } while ((status & 0x01) && (!(status & (1<<16))));
 8000366:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 800036a:	2b01      	cmp	r3, #1
 800036c:	d0fa      	beq.n	8000364 <__delay_ms+0x18>
        SysTick->CTRL = 0x00;
        SysTick->VAL  = 0X00;
}
 800036e:	bc30      	pop	{r4, r5}
        SysTick->CTRL = 0x00;
 8000370:	2300      	movs	r3, #0
 8000372:	6013      	str	r3, [r2, #0]
        SysTick->VAL  = 0X00;
 8000374:	6093      	str	r3, [r2, #8]
}
 8000376:	4770      	bx	lr
 8000378:	e000e010 	.word	0xe000e010

0800037c <usart1_setup>:
  输出参数: 无
  函数功能: USART1初始化设置(   72MHz@115200 1N8  )
*******************************************************************************/
void usart1_setup(void)
{   
        GPIOA_CLOCK_ENABLE();                   //打开GPIOA时钟
 800037c:	4918      	ldr	r1, [pc, #96]	; (80003e0 <usart1_setup+0x64>)
{   
 800037e:	b410      	push	{r4}
        GPIOA_CLOCK_ENABLE();                   //打开GPIOA时钟
 8000380:	698b      	ldr	r3, [r1, #24]
        USART1_CLOCK_ENABLE();                  //打开USART1时钟
	GPIOA->CRH  &= (uint32_t)(0xFFFFF00F);  //清除相关的位
 8000382:	4a18      	ldr	r2, [pc, #96]	; (80003e4 <usart1_setup+0x68>)
        GPIOA_CLOCK_ENABLE();                   //打开GPIOA时钟
 8000384:	f043 0304 	orr.w	r3, r3, #4
 8000388:	618b      	str	r3, [r1, #24]
        USART1_CLOCK_ENABLE();                  //打开USART1时钟
 800038a:	698c      	ldr	r4, [r1, #24]
	GPIOA->CRH  |= (uint32_t)(0x00000400);  //RX(PA.10)浮空输入
	USART1->CR1 |= BIT_13;                  //USART模块使能
	USART1->CR1 &= ~BIT_12;                 //1个起始位, 8个数据位
	USART1->CR2 &= ~(BIT_13 + BIT_12);      //1个停止位(bit13=0, bit12=0)
	USART1->CR1 |= BIT_03 + BIT_02;         //发送使能 | 接收使能 
	USART1->BRR  = 0x0271;                  //72MHz@115200 			
 800038c:	f240 2071 	movw	r0, #625	; 0x271
        USART1_CLOCK_ENABLE();                  //打开USART1时钟
 8000390:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000394:	618c      	str	r4, [r1, #24]
	GPIOA->CRH  &= (uint32_t)(0xFFFFF00F);  //清除相关的位
 8000396:	6851      	ldr	r1, [r2, #4]
	USART1->CR1 |= BIT_13;                  //USART模块使能
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <usart1_setup+0x6c>)
	GPIOA->CRH  &= (uint32_t)(0xFFFFF00F);  //清除相关的位
 800039a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800039e:	6051      	str	r1, [r2, #4]
	GPIOA->CRH  |= (uint32_t)(0x000000B0);  //TX(PA.09)复用推挽输出(50MHz)
 80003a0:	6851      	ldr	r1, [r2, #4]
}
 80003a2:	bc10      	pop	{r4}
	GPIOA->CRH  |= (uint32_t)(0x000000B0);  //TX(PA.09)复用推挽输出(50MHz)
 80003a4:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 80003a8:	6051      	str	r1, [r2, #4]
	GPIOA->CRH  |= (uint32_t)(0x00000400);  //RX(PA.10)浮空输入
 80003aa:	6851      	ldr	r1, [r2, #4]
 80003ac:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80003b0:	6051      	str	r1, [r2, #4]
	USART1->CR1 |= BIT_13;                  //USART模块使能
 80003b2:	899a      	ldrh	r2, [r3, #12]
 80003b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80003b8:	819a      	strh	r2, [r3, #12]
	USART1->CR1 &= ~BIT_12;                 //1个起始位, 8个数据位
 80003ba:	899a      	ldrh	r2, [r3, #12]
 80003bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80003c0:	0412      	lsls	r2, r2, #16
 80003c2:	0c12      	lsrs	r2, r2, #16
 80003c4:	819a      	strh	r2, [r3, #12]
	USART1->CR2 &= ~(BIT_13 + BIT_12);      //1个停止位(bit13=0, bit12=0)
 80003c6:	8a1a      	ldrh	r2, [r3, #16]
 80003c8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80003cc:	0412      	lsls	r2, r2, #16
 80003ce:	0c12      	lsrs	r2, r2, #16
 80003d0:	821a      	strh	r2, [r3, #16]
	USART1->CR1 |= BIT_03 + BIT_02;         //发送使能 | 接收使能 
 80003d2:	899a      	ldrh	r2, [r3, #12]
 80003d4:	f042 020c 	orr.w	r2, r2, #12
 80003d8:	819a      	strh	r2, [r3, #12]
	USART1->BRR  = 0x0271;                  //72MHz@115200 			
 80003da:	8118      	strh	r0, [r3, #8]
}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010800 	.word	0x40010800
 80003e8:	40013800 	.word	0x40013800

080003ec <usart_send_string>:
  输入参数: 无
  输出参数: 无
  函数功能: 串口向上位机发送一串字符
*******************************************************************************/
void usart_send_string(void)
{
 80003ec:	b470      	push	{r4, r5, r6}
 80003ee:	b085      	sub	sp, #20
        uint8_t i = 0;
        uint16_t timeout = 50000;
        const uint8_t tx_buf[] = "hello, world!\n";
 80003f0:	466e      	mov	r6, sp
 80003f2:	2568      	movs	r5, #104	; 0x68
        uint8_t i = 0;
 80003f4:	2400      	movs	r4, #0
        const uint8_t tx_buf[] = "hello, world!\n";
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <usart_send_string+0x54>)
 80003f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003fa:	c607      	stmia	r6!, {r0, r1, r2}
 80003fc:	0c1a      	lsrs	r2, r3, #16
 80003fe:	f826 3b02 	strh.w	r3, [r6], #2
        while (tx_buf[i] != '\0') {                     //如果字符不是（尾0）
                USART1->SR &= ~BIT_06;                  //清除发送完成标志位
 8000402:	4910      	ldr	r1, [pc, #64]	; (8000444 <usart_send_string+0x58>)
        const uint8_t tx_buf[] = "hello, world!\n";
 8000404:	7032      	strb	r2, [r6, #0]
                USART1->SR &= ~BIT_06;                  //清除发送完成标志位
 8000406:	880b      	ldrh	r3, [r1, #0]
                USART1->DR  = tx_buf[i++];              //写入要发送的内容
 8000408:	3401      	adds	r4, #1
                USART1->SR &= ~BIT_06;                  //清除发送完成标志位
 800040a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800040e:	041b      	lsls	r3, r3, #16
 8000410:	0c1b      	lsrs	r3, r3, #16
                USART1->DR  = tx_buf[i++];              //写入要发送的内容
 8000412:	b2ad      	uxth	r5, r5
                USART1->SR &= ~BIT_06;                  //清除发送完成标志位
 8000414:	800b      	strh	r3, [r1, #0]
                USART1->DR  = tx_buf[i++];              //写入要发送的内容
 8000416:	b2e4      	uxtb	r4, r4
                while ((USART1->SR & 0x40) == 0) {      //等待一个字符发送完成
 8000418:	f24c 3351 	movw	r3, #50001	; 0xc351
                USART1->DR  = tx_buf[i++];              //写入要发送的内容
 800041c:	808d      	strh	r5, [r1, #4]
                while ((USART1->SR & 0x40) == 0) {      //等待一个字符发送完成
 800041e:	e000      	b.n	8000422 <usart_send_string+0x36>
                        if (timeout-- == 0) {
 8000420:	b15b      	cbz	r3, 800043a <usart_send_string+0x4e>
                while ((USART1->SR & 0x40) == 0) {      //等待一个字符发送完成
 8000422:	880a      	ldrh	r2, [r1, #0]
 8000424:	3b01      	subs	r3, #1
 8000426:	f012 0f40 	tst.w	r2, #64	; 0x40
 800042a:	b29b      	uxth	r3, r3
 800042c:	d0f8      	beq.n	8000420 <usart_send_string+0x34>
 800042e:	ab04      	add	r3, sp, #16
 8000430:	4423      	add	r3, r4
 8000432:	f813 5c10 	ldrb.w	r5, [r3, #-16]
        while (tx_buf[i] != '\0') {                     //如果字符不是（尾0）
 8000436:	2d00      	cmp	r5, #0
 8000438:	d1e5      	bne.n	8000406 <usart_send_string+0x1a>
                                return;
                        }
                }
                timeout = 50000;
        }
}
 800043a:	b005      	add	sp, #20
 800043c:	bc70      	pop	{r4, r5, r6}
 800043e:	4770      	bx	lr
 8000440:	08000648 	.word	0x08000648
 8000444:	40013800 	.word	0x40013800

08000448 <__libc_init_array>:
 8000448:	b570      	push	{r4, r5, r6, lr}
 800044a:	4e0d      	ldr	r6, [pc, #52]	; (8000480 <__libc_init_array+0x38>)
 800044c:	4d0d      	ldr	r5, [pc, #52]	; (8000484 <__libc_init_array+0x3c>)
 800044e:	1b76      	subs	r6, r6, r5
 8000450:	10b6      	asrs	r6, r6, #2
 8000452:	d006      	beq.n	8000462 <__libc_init_array+0x1a>
 8000454:	2400      	movs	r4, #0
 8000456:	3401      	adds	r4, #1
 8000458:	f855 3b04 	ldr.w	r3, [r5], #4
 800045c:	4798      	blx	r3
 800045e:	42a6      	cmp	r6, r4
 8000460:	d1f9      	bne.n	8000456 <__libc_init_array+0xe>
 8000462:	4e09      	ldr	r6, [pc, #36]	; (8000488 <__libc_init_array+0x40>)
 8000464:	4d09      	ldr	r5, [pc, #36]	; (800048c <__libc_init_array+0x44>)
 8000466:	f000 f8e1 	bl	800062c <_init>
 800046a:	1b76      	subs	r6, r6, r5
 800046c:	10b6      	asrs	r6, r6, #2
 800046e:	d006      	beq.n	800047e <__libc_init_array+0x36>
 8000470:	2400      	movs	r4, #0
 8000472:	3401      	adds	r4, #1
 8000474:	f855 3b04 	ldr.w	r3, [r5], #4
 8000478:	4798      	blx	r3
 800047a:	42a6      	cmp	r6, r4
 800047c:	d1f9      	bne.n	8000472 <__libc_init_array+0x2a>
 800047e:	bd70      	pop	{r4, r5, r6, pc}
 8000480:	08000658 	.word	0x08000658
 8000484:	08000658 	.word	0x08000658
 8000488:	08000660 	.word	0x08000660
 800048c:	08000658 	.word	0x08000658

08000490 <register_fini>:
 8000490:	4b02      	ldr	r3, [pc, #8]	; (800049c <register_fini+0xc>)
 8000492:	b113      	cbz	r3, 800049a <register_fini+0xa>
 8000494:	4802      	ldr	r0, [pc, #8]	; (80004a0 <register_fini+0x10>)
 8000496:	f000 b805 	b.w	80004a4 <atexit>
 800049a:	4770      	bx	lr
 800049c:	00000000 	.word	0x00000000
 80004a0:	080004b1 	.word	0x080004b1

080004a4 <atexit>:
 80004a4:	2300      	movs	r3, #0
 80004a6:	4601      	mov	r1, r0
 80004a8:	461a      	mov	r2, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 b81e 	b.w	80004ec <__register_exitproc>

080004b0 <__libc_fini_array>:
 80004b0:	b538      	push	{r3, r4, r5, lr}
 80004b2:	4c0a      	ldr	r4, [pc, #40]	; (80004dc <__libc_fini_array+0x2c>)
 80004b4:	4d0a      	ldr	r5, [pc, #40]	; (80004e0 <__libc_fini_array+0x30>)
 80004b6:	1b64      	subs	r4, r4, r5
 80004b8:	10a4      	asrs	r4, r4, #2
 80004ba:	d00a      	beq.n	80004d2 <__libc_fini_array+0x22>
 80004bc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80004c0:	3b01      	subs	r3, #1
 80004c2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80004c6:	3c01      	subs	r4, #1
 80004c8:	f855 3904 	ldr.w	r3, [r5], #-4
 80004cc:	4798      	blx	r3
 80004ce:	2c00      	cmp	r4, #0
 80004d0:	d1f9      	bne.n	80004c6 <__libc_fini_array+0x16>
 80004d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80004d6:	f000 b8af 	b.w	8000638 <_fini>
 80004da:	bf00      	nop
 80004dc:	08000664 	.word	0x08000664
 80004e0:	08000660 	.word	0x08000660

080004e4 <__retarget_lock_acquire_recursive>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <__retarget_lock_release_recursive>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <__register_exitproc>:
 80004ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004f0:	4d2b      	ldr	r5, [pc, #172]	; (80005a0 <__register_exitproc+0xb4>)
 80004f2:	4606      	mov	r6, r0
 80004f4:	6828      	ldr	r0, [r5, #0]
 80004f6:	4698      	mov	r8, r3
 80004f8:	460f      	mov	r7, r1
 80004fa:	4691      	mov	r9, r2
 80004fc:	f7ff fff2 	bl	80004e4 <__retarget_lock_acquire_recursive>
 8000500:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <__register_exitproc+0xb8>)
 8000502:	681c      	ldr	r4, [r3, #0]
 8000504:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8000508:	2b00      	cmp	r3, #0
 800050a:	d03d      	beq.n	8000588 <__register_exitproc+0x9c>
 800050c:	685a      	ldr	r2, [r3, #4]
 800050e:	2a1f      	cmp	r2, #31
 8000510:	dc0d      	bgt.n	800052e <__register_exitproc+0x42>
 8000512:	f102 0c01 	add.w	ip, r2, #1
 8000516:	bb16      	cbnz	r6, 800055e <__register_exitproc+0x72>
 8000518:	3202      	adds	r2, #2
 800051a:	f8c3 c004 	str.w	ip, [r3, #4]
 800051e:	6828      	ldr	r0, [r5, #0]
 8000520:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8000524:	f7ff ffe0 	bl	80004e8 <__retarget_lock_release_recursive>
 8000528:	2000      	movs	r0, #0
 800052a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <__register_exitproc+0xbc>)
 8000530:	b37b      	cbz	r3, 8000592 <__register_exitproc+0xa6>
 8000532:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000536:	f3af 8000 	nop.w
 800053a:	4603      	mov	r3, r0
 800053c:	b348      	cbz	r0, 8000592 <__register_exitproc+0xa6>
 800053e:	2000      	movs	r0, #0
 8000540:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 8000544:	f04f 0c01 	mov.w	ip, #1
 8000548:	e9c3 1000 	strd	r1, r0, [r3]
 800054c:	4602      	mov	r2, r0
 800054e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8000552:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8000556:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0dc      	beq.n	8000518 <__register_exitproc+0x2c>
 800055e:	2101      	movs	r1, #1
 8000560:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8000564:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
 8000568:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 800056c:	4091      	lsls	r1, r2
 800056e:	4308      	orrs	r0, r1
 8000570:	2e02      	cmp	r6, #2
 8000572:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8000576:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 800057a:	d1cd      	bne.n	8000518 <__register_exitproc+0x2c>
 800057c:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
 8000580:	4301      	orrs	r1, r0
 8000582:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 8000586:	e7c7      	b.n	8000518 <__register_exitproc+0x2c>
 8000588:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 800058c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8000590:	e7bc      	b.n	800050c <__register_exitproc+0x20>
 8000592:	6828      	ldr	r0, [r5, #0]
 8000594:	f7ff ffa8 	bl	80004e8 <__retarget_lock_release_recursive>
 8000598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800059c:	e7c5      	b.n	800052a <__register_exitproc+0x3e>
 800059e:	bf00      	nop
 80005a0:	20000440 	.word	0x20000440
 80005a4:	08000644 	.word	0x08000644
 80005a8:	00000000 	.word	0x00000000

080005ac <Reset_Handler>:
 80005ac:	2100      	movs	r1, #0
 80005ae:	e003      	b.n	80005b8 <LoopCopyDataInit>

080005b0 <CopyDataInit>:
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <LoopFillZerobss+0x14>)
 80005b2:	585b      	ldr	r3, [r3, r1]
 80005b4:	5043      	str	r3, [r0, r1]
 80005b6:	3104      	adds	r1, #4

080005b8 <LoopCopyDataInit>:
 80005b8:	480a      	ldr	r0, [pc, #40]	; (80005e4 <LoopFillZerobss+0x18>)
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <LoopFillZerobss+0x1c>)
 80005bc:	1842      	adds	r2, r0, r1
 80005be:	429a      	cmp	r2, r3
 80005c0:	d3f6      	bcc.n	80005b0 <CopyDataInit>
 80005c2:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <LoopFillZerobss+0x20>)
 80005c4:	e002      	b.n	80005cc <LoopFillZerobss>

080005c6 <FillZerobss>:
 80005c6:	2300      	movs	r3, #0
 80005c8:	f842 3b04 	str.w	r3, [r2], #4

080005cc <LoopFillZerobss>:
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <LoopFillZerobss+0x24>)
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d3f9      	bcc.n	80005c6 <FillZerobss>
 80005d2:	f7ff fdf7 	bl	80001c4 <SystemInit>
 80005d6:	f7ff ff37 	bl	8000448 <__libc_init_array>
 80005da:	f000 f80d 	bl	80005f8 <main>
 80005de:	4770      	bx	lr
 80005e0:	08000664 	.word	0x08000664
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000444 	.word	0x20000444
 80005ec:	20000444 	.word	0x20000444
 80005f0:	20000484 	.word	0x20000484

080005f4 <ADC1_2_IRQHandler>:
 80005f4:	e7fe      	b.n	80005f4 <ADC1_2_IRQHandler>
	...

080005f8 <main>:

int main(void)
{
 80005f8:	b508      	push	{r3, lr}
        uint8_t i;
        led_blink();
 80005fa:	f7ff fdb9 	bl	8000170 <led_blink>
        usart1_setup();
 80005fe:	f7ff febd 	bl	800037c <usart1_setup>
        for (i = 0; i < 6; i++) {
                usart_send_string();
 8000602:	f7ff fef3 	bl	80003ec <usart_send_string>
 8000606:	f7ff fef1 	bl	80003ec <usart_send_string>
 800060a:	f7ff feef 	bl	80003ec <usart_send_string>
 800060e:	f7ff feed 	bl	80003ec <usart_send_string>
 8000612:	f7ff feeb 	bl	80003ec <usart_send_string>
 8000616:	f7ff fee9 	bl	80003ec <usart_send_string>
        }
        GPIOA->ODR |= BIT_02;
 800061a:	4a03      	ldr	r2, [pc, #12]	; (8000628 <main+0x30>)
        return 0;
}
 800061c:	2000      	movs	r0, #0
        GPIOA->ODR |= BIT_02;
 800061e:	68d3      	ldr	r3, [r2, #12]
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	60d3      	str	r3, [r2, #12]
}
 8000626:	bd08      	pop	{r3, pc}
 8000628:	40010800 	.word	0x40010800

0800062c <_init>:
 800062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062e:	bf00      	nop
 8000630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000632:	bc08      	pop	{r3}
 8000634:	469e      	mov	lr, r3
 8000636:	4770      	bx	lr

08000638 <_fini>:
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	bf00      	nop
 800063c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	469e      	mov	lr, r3
 8000642:	4770      	bx	lr
