############################################################
### % 定时/计数器查询方式实现LED灯闪烁
############################################################
void timer0_init(void)
{
    // 1 % 设定定时/计数的工作方式(TMOD)
    // 如果不是用于外部脉宽的测量，把“GATE位”清零“0”
    // (M1,M0)工作方式“1”，(C/T)用于16位定时器，GATE=“0”
    TMOD = 0x01;
    // 2 % 初值的计算(50ms)
    TH0 = (65536 - 50000)/256;
    TL0 = (65536 - 50000)%256;
    // 3 % 启动定时器
    TR0 = 1;
}

int main(void)
{
    timer0_init();
    while (1)
    {
        if (TF0 == 1)
        {   // % 清除标志位
            TF0 = 0;
            // % 重新赋初值
            TH0 = (65536 - 50000)/256;
            TL0 = (65536 - 50000)%256;
            LED = ~LED;
        }
    }
}



############################################################
### % 计数器计数功能实现
############################################################
// % 定时器0做为数码管的动态刷新
// % 定时器1做为外部脉冲的输入信号

// % 定义数码管要显示的数据
uint8_t data_num = 0;


// % 对要显示的数据进行数位分离，放入显示缓冲区
void display_service()
{
    led_buf[0] = data_num/1000;     // % 千位
    led_buf[1] = data_num/100%10;   // % 百位
    led_buf[2] = data_num/10%10;    // % 十位
    led_buf[3] = data_num%10;       // % 个位
}


// % 定时器0的初始化 (1毫秒, @12MHz)
void timer0_init(void)
{
    TMOD &= 0xF0;   // % 设置定时器模式
    TMOD |= 0x01;   // % 设置定时器模式
    TL0   = 0x18;   // % 设置定时器初值
    TH0   = 0xFC;   // % 设置定时器初值
    TF0   = 0;      // % 清除TF0标志
    ET0   = 1;      // % 打开定时器0的中断
    TR0   = 1;      // % 启动定时器0
}
// % 定时器0的中断服务程序
void TIME0_ISR(void) interrupt 1
{
    TR0 = 0;        // % 关闭定时器0
    smg_display();  // % 定时时间到，调用数码管动态刷新程序
    TL0 = 0x18;     // % 重新设置定时器0的初值
    TH0 = 0xFC;     // % 重新设置定时器0的初值
    TRO = 1;        // % 打开定时器0
}

// % 计数器1初始化
void counter1_init(void)
{
    TMOD &= 0x0F;   // % 设置为计数模式
    TMOD |= 0x50;   // % 设置为计数模式
    TL1   = 0x00;   // % 设置计数初值
    TH1   = 0x00;   // % 设置计数初值
    TF1   = 0;      // % 清除TF1标志位
    ET1   = 1;      // % 打开计数器1中断
    TR1   = 1;      // % 启动计数器1
}

int main(void)
{
    timer0_init();
    counter1_init();
    EA = 1;         // % 打开总中断
    while (1)
    {
        data_num = TH1*256 + TL1;
        display_service();
    }
    return 0;
}



############################################################
### % 简单频率测量(测频法)
############################################################
// % 计数器1，用于计数外部信号脉冲波
// % 定时器0，用于定时1秒，到了1秒后，读取计数器1中的值




// % 定义数码管要显示的数据
uint8_t data_num = 0;

// % 定义定时器0的中断次次数
uint8_t timer0_int;


// % 对要显示的数据进行数位分离，放入显示缓冲区
void display_service()
{
    led_buf[0] = data_num/1000;     // % 千位
    led_buf[1] = data_num/100%10;   // % 百位
    led_buf[2] = data_num/10%10;    // % 十位
    led_buf[3] = data_num%10;       // % 个位
}

// % 定时器0的初始化 (1毫秒, @12MHz)
void timer0_init(void)
{
    TMOD &= 0xF0;                   // % 设置定时器模式
    TMOD |= 0x01;                   // % 设置定时器模式
    TL0   = 0x18;                   // % 设置定时器初值
    TH0   = 0xFC;                   // % 设置定时器初值
    TF0   = 0;                      // % 清除TF0标志
    ET0   = 1;                      // % 打开定时器0的中断
    TR0   = 1;                      // % 启动定时器0
}
// % 定时器0的中断服务程序
void TIMER0_ISR(void) interrupt 1
{
    TR0 = 0;                        // % 关闭定时器0
    timer0_int++;                   // % 定时器0，中断加“1”
    
    if (timer0_cnt >= 1000)         // % 1秒时间到
    {
        TR1 = 0;                    // % 关闭计数器1
        timer0_int = 0;             // % 定时器0，定时中断次数清零
        data_num = TH1*256 + TL1;   // % 获取计数器1中的数据
        TL1 = 0x00;                 // % 重新设置计数器1的初值
        TH1 = 0x00;                 // % 重新设置计数器1的初值
        TR1 = 1;                    // % 打开计数器1
    }
    
    smg_display();                  // % 定时时间到，调用数码管动态刷新程序
    TL0 = 0x18;                     // % 重新设置定时器0的初值
    TH0 = 0xFC;                     // % 重新设置定时器0的初值
    TRO = 1;                        // % 打开定时器0
}


// % 计数器1初始化
void counter1_init(void)
{
    TMOD &= 0x0F;                   // % 设置为计数模式
    TMOD |= 0x50;                   // % 设置为计数模式
    TL1   = 0x00;                   // % 设置计数初值
    TH1   = 0x00;                   // % 设置计数初值
    TF1   = 0;                      // % 清除TF1标志位
    ET1   = 1;                      // % 打开计数器1中断
    TR1   = 1;                      // % 启动计数器1
}


int main(void)
{
    timer0_init();
    counter1_init();
    EA = 1;                         // % 打开总中断
    while (1)
    {
        display_service();
    }
    return 0;
}



############################################################
### % 定时/计数器实现PWM（脉冲宽度调制）
############################################################
sbit PWM = P1^0;
sbit pwm_key = P1^1;
uint8_t pwm_duty = 50;  // % PWM的占空比(0~100)
uint8_t pwm_cnt;



// % 设置定时器0，为工作方式1
// % 100微秒@12MHz
void timer0_init(void)  
{
    TMOD &= 0xF0;       // % 设置定时器模式
    TMOD |= 0x01;       // % 设置定时器模式
    TL0   = 0x9C;       // % 设定定时器初值
    TH0   = 0xFF;       // % 设定定时器初值
    TF0   = 0;          // % 清除TF0标志位
    ET0   = 1;          // % 打开定时器0中断
    TR0   = 1;          // % 启动定时器0
}


// % 定时器0中断服务程序
void TIME0_ISR(void) interrupt 1
{
    TRO   = 0;          // % 关闭定时器1
    pwm_cnt++;
    if (pwm_cnt >= 100)
        pwm_cnt = 0;
    if (pwm_cnt < pwm_duty)
        PWM = 1;
    else
        PWM = 0;
        
    TL0   = 0x9C;       // % 设定定时器初值
    TH0   = 0xFF;       // % 设定定时器初值
    TR0   = 1;          // % 打开定时器1   
}


// % 外部中断0初始化
void ex0_init(void)
{
    IT0 = 1;            // % 下降沿触发方式
    EX0 = 1;            // % 打开外部中断0
}
// % 外部中断0中断服务程序
void EX0_ISR(void) interrupt 0
{   // % 定义一个按键，设定它为静态局部变量
    static uint8_t pwm_key;
    pwm_key++;
    switch (pwm_key)
    {
        case 1: pwm_duty = 25;  break; // % PWM占空比为: %25
        case 2: pwm_duty = 50;  break; // % PWM占空比为: %50
        case 3: pwm_duty = 75;  break; // % PWM占空比为: %75
        case 4: pwm_duty = 80;  break; // % PWM占空比为: %80
        case 5: pwm_duty = 100; break; // % PWM占空比为: %100
        case 6: pwm_duty = 0; pwm_key = 0;  break; // % PWM占空比为: %0
        default: break;
    }
}


int main(void)
{
    timer0_init();
    ex0_init();
    EA    = 1;          // % 打开总中断开关
    while (1)
    {
        
    }
}



