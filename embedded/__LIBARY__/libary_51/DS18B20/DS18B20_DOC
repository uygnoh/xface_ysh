############################################################
### % 单总线器件ROM码64-bit
############################################################
### % 64位唯一的ROM码
%___________________________________
MSB                              LSB
(8位CRC校验码 + 48位串行数据 + 8位家庭码)
% 主机根据ROM码的前56位来计算CRC值，然后与ROM中高8位的CRC
% 值比较，判断接收的ROM是否正确，CRC码的多项式函数为：CRC=x8+x5+x4+1



############################################################
### % DS18B20数字温度计寄存器
############################################################
SCRATCHPAD(POWER-UP STATE)_9                    EEPROM_3
___________________________________________________________
Byte_0  % Temperature LSB(50h)
Byte_1  % Temperature MSB(05h)
Byte_2  % TH Register or User Byte 1*   <===>   TH Register or User Byte 1
Byte_3  % TL Register or User Byte 2*   <===>   TL Register or User Byte 2
Byte_4  % Configuration Register*       <===>   Configuration Register
Byte_5  % Reserved(FFh)
Byte_6  % Reserved
Byte_7  % Reserved(10h)
Byte_8  % CRC*


% 温度寄存器(“S”表示测量温度的正负值)
___________________________________________________________
%         BIT7  BIT6  BIT5  BIT4  BIT3  BIT2  BIT1  BIT0
LSB BYTE  2^3   2^2   2^1   2^0   2^-1  2^-2  2^-3 2^-4
MSB BYTE  S     S     S     S     S     2^6   2^5   2^4
___________________________________________________________


% TH和TL寄存器(“S”表示设定告警温度的正负值)
___________________________________________________________
BIT7  BIT6  BIT5  BIT4  BIT3  BIT2  BIT1  BIT0
S     2^6   2^5   2^4   2^3   2^2   2^1   2^0
___________________________________________________________


% 配置寄存器(R1,R0用于标识测量温度的精度)(默认12位精度: 0.0625)
___________________________________________________________
BIT7  BIT6  BIT5  BIT4  BIT3  BIT2  BIT1  BIT0
0     R1    R0    1     1     1     1     1
___________________________________________________________



############################################################
### % DS18B20数字温度计->数据格式
############################################################
%__________________________________________________________
% DS18B20温度转换(S为“0”温度为“+”， S为“1”温度为“-”)
% 它存储数据的格式以“补码”形式存放的
% 它的温度为“+”时， 它的“原码”“反码”“补码”都是一样的
% 它的温度为“-”时， 需要转换
___________________________________________________________
%         BIT7  BIT6  BIT5  BIT4  BIT3  BIT2  BIT1  BIT0
LSB BYTE  2^3   2^2   2^1   2^0   2^-1  2^-2  2^-3 2^-4
MSB BYTE  S     S     S     S     S     2^6   2^5   2^4
___________________________________________________________


### % 原码， 反码， 补码
___________________________________________________________
计算机里都是以“补码”的形式存储数据！
___________________________________________________________
最高位为符号位， “0”代表正数据， “1”代表负数，
非符号位为该数字绝对值的二进制。
“+5”原码  (0000 0101)   “-5”原码  (1000 0101)
___________________________________________________________
“+5”反码  (0000 0101)   “-5”反码  (1111 1010)
___________________________________________________________
“+5”补码  (0000 0101)   “-5”补码  (1111 1011)



############################################################
### % DS18B20 <===> ROM指令和功能指令
############################################################
### % ROM指令
%______________________________________
1   搜索ROM指令 [F0H]
    % 当系统初始化时，总线控制器通过此指令多次
    % 循环搜索ROM编码，以确认所有从机器件
2   读取ROM指令 [33H]
    % 当总线上只有一只DS18B20时才会使用此指令
    % 允许总线控制器直接读取从机序列码
3   匹配ROM指令 [55H]
    % 使总线控制器在多点总线上定位一只特定的DS18B20
4   忽略ROM指令 [CCH]
    % 可以不提供64位ROM编码就使用功能指令
5   报警ROM指令 [ECH]
    % 当总线上存在满足报警条件的从机时，该从机响应此指令
    
    
### % 功能指令
%______________________________________
scratchpad功能指令，操作它需要下面的2个步骤
1   % Initialize
2   % ROM Command
3   % Function Command
%______________________________________
1   温度转换指令  [44H]
2   写暂存器指令  [4EH]
    % 开始位置在暂存器(TH寄存器，TL寄存器，配置寄存器)
    % 初始地址为TH寄存器，以最低有效位传送
3   读暂存器指令  [BEH]
    % 读取将从地址0开始，直到（CRC）读完
4   拷贝暂存器指令 [48H]
    % 将TH,TL，配置寄存器的数据复制到EEPROM中得以保存
5   召回EEPROM指令[B8H]
    % 将TH,TL，配置寄存器的数据从EEPROM中复制到暂存器中
6   读电源模式指令 [B4H]



// % ROM指令
#define SEARCH_ROM          0xf0    /* % 搜索ROM指令 */
#define READ_ROM            0x33    /* % 读取ROM指令 */
#define MATH_ROM            0x55    /* % 匹配ROM指令 */
#define SKIP_ROM            0xcc    /* % 跳过ROM指令 */
#define ALARM_SEARCH        0xec    /* % 报警搜索指令 */

// % 暂存器指令
#define CONVERT_T           0x44    /* % 温度转换指令 */
#define WRITE_REGISTER      0x4e    /* % 写暂存器指令 */
#define READ_REGISTER       0xbe    /* % 读暂存器指令 */
#define COPY_REGISTER       0x48    /* % 拷贝暂存器指令 */
#define RECALL_E2           0xb8    /* % 召回EEPROM指令 */
#define READ_POWER_SUPPLY   0xb4    /* %读取电源模式指令 */




############################################################
### % DS18B20 <===> 读取SCRATCHPAD—RAM中的数据
############################################################
### % DS18B20它在上电的时候，还没有开始工作，读到的是它的默认值(+85度)
___________________________________________________________
% (0xbe)为scratchpad功能指令，操作它需要下面的2个步骤
1   % Initialize
2   % ROM Command
3   % DS18B20 Function
4   % 读取DS18B20上的第一个字节 
5   % 读取DS18B20上的第二个字节
ds18b20_init();                 /* % 初始化ds18b20 */
ds18b20_write_cmd(0xcc);        /* % SKIP ROM */
/* % ds18b20开始测量温度，它需要一段时间 */
ds18b20_write_cmd(0x44);        /* % convert Temperature */
delay_ms(750);                  /* % 延时 */
ds18b20_init();                 /* % 初始化ds18b20 */
ds18b20_write_dat(0xcc);        /* % SKIP ROM */
ds18b20_write_dat(0xbe);        /* % read scratchpad */
low_value = ds18b20_read_dat(); /* % read byte_0 */
hig_value = ds18b20_read_dat(); /* % read byte_1 */



############################################################
### % DS18B20 <===> 底层驱动
############################################################
// % DS18B20初始化
// 1 单片机发出至少480us的低电平脉冲信号
// 2 单片机释放总线变为高电平，持续时间为 15~60us
// 3 若有低电平出现则说明总线上有器件做出应答，将总线电平拉低60~240us,
//   告知主机器件民经做好准备
bit ds18b20_init(void)
{
    bit flag;
    DQ = 0;         /* % A点：拉低总线 */
    delay_us(500);  /* % 延时500us，(480us~960us) */
    DQ = 1;         /* % B点：释放总线 */
    delay_us(68);   /* % BM点：延时68us，等待DQ回应 */
    flag = DQ;      /* % 读DQ上的数据保存到flag */
    delay_us(500);  /* % ME点：延时500us，(480us~960us)，也可以这么写 */
                    /* % while(!DQ); 等待ds18b20释放总线 */
    return flag;   /* % 返回ds18b20的状态，“0”初始化成功，否则失败 */
}


// % 向DS18B20中写入数据
// 1 单片机直接将引脚拉低
// 2 写“1”的时候，单片机先将这个引脚拉低，拉低的时间大于“1us”，然后马上释放总线
// 3 写“0”的时候，DS18B20 会在 15us到60us之间来读取这个“0”
// 4 读写都是从最低位开始
void ds18b20_write_dat(uint8_t dat)
{
    uint8_t tmp;
    for (tmp = 0x01; tmp !=0; tmp<<=1)
    {
        DQ = 0;         /* % 单片机拉低总线 */
        delay_us(2);    /* % 延时2us */
        if ((tmp & dat) == 0)
            DQ = 0;
        else
            DQ = 1;
        delay_us(60);   /* % 延时60us，等待DS18B20来采集数据 */
        DQ = 1;         /* % 释放总线 */
    }
}


// % 读出DS18B20中的数据
// 1 单片机直接将引脚拉低
// 2 至少保持“1us”的时间，然后释放引脚
// 3 从拉低这个引脚到读取这个引脚状态，不能超过“15us”
// 4 读写都是从最低位开始
int8_t ds18b20_read_dat(void)
{
    uint8_t dat, tmp;
    for (tmp = 0x01; tmp != 0; tmp<<=1)
    {
        DQ = 0;         /* % 单片机拉低总线 */
        delay_us(2);    /* % 延时2us */
        DQ = 1;         /* % 释放总线 */
        delay_us(2);    /* % 延时2us, 等待DS18B20拉低或拉高 */
        if (DQ)         /* % 读取DQ总线上的位数据 */
            dat |= tmp;
        else
            dat &= ~tmp;
        delay_us(60);   /* % 延时60us */
    }
    return dat;
}



############################################################
### % DS18B20 <===> 温度显示基于LCD1602
### % 单总线中只有一只DS18B20
############################################################
% 单总线器件驱动程序编写流程
第一步: 初始化(对总线上的器件进行初始化)
第二步: ROM命令(指令寻找和匹配，指定待操作器件)
第三步: 功能命令(进行具体操作或传输数据)

uint8_t flag;

void start_ds18b20(void)
{
    bit ack
    
    ack = ds18b20_init();               // % ds18b20初始化
    if (ack == 0)
    {   
        ds18b20_write_dat(SKIP_ROM);    // % 跳过ROM指令(ROM指令)
        ds18b20_write_dat(CONVERT_T);   // % 启动温度转换(功能指令)
    }
}


bit read_ds18b20(uint16_t *pstr)
{
    uint8_t msb, lsb;
    bit ack
    // 1 % ds18b20初始化
    ack = ds18b20_init();
    if (ack == 0)
    {   // 2 % 跳过ROM指令(ROM指令)
        ds18b20_write_dat(SKIP_ROM);
        // 3 % 读取温度暂存器(功能指令)
        ds18b20_write_dat(READ_REGISTER);
        // 4 % 读出转换结果(连续读取2个字节)
        lsb = ds18b20_read_dat();
        msb = ds18b20_read_dat();
        *pstr = ((uint16_t)msb << 8) + lsb;
    }
    return ~ack;
}

// % 10ms@12MHz
void timer0_init(void)
{
    TMOD &= 0xF0;   // % 设置定时器模式
    TMOD |= 0x01;   // % 设置定时器模式
    TL0   = 0xF0;   // % 设置定时初值
    TH0   = 0xD8;   // % 设置定时初值
    TF0   = 0;      // % 清除TF0标志
    ET0   = 1;      // % 打开定时器0中断
    EA    = 1;      // % 打开总中断
    TR0   = 1;      // % 定时器0开始计时
}
void TIMER0_ISR(void) interrupt 1
{
    static uint8_t timer0_cnt = 0;
    TR0   = 0;
    TL0   = 0xF0;   // % 设置定时初值
    TH0   = 0xD8;   // % 设置定时初值
    timer0_cnt++;
    if (timer0_cnt >= 100)
    {
        timer0_cnt = 0;
        flag = 1;
    }
    TR0   = 1;
}



int main(void)
{
    uint16_t temp;       // % 保存接收到的温度数据
    uint16_t int_temp;   // % 正数的温度
    uint16_t dec_temp;   // % 小数的温度
    uint8_t  str[12];    // % 保存数据转换成的字符串 ASCII
    uint8_t  len;        // % 数组索引
    
    timer0_init();
    lcd1602_init();
    start_ds18b20();
    delay_ms(10);
    
    while (1)
    {
        // % 定时器0，1秒到时，进行温度转换
        if (flag)
        {
            flag = 0;
            ack = read_ds18b20(&temp);
            if (ack)
            {
                int_temp  = temp >> 4;            // % 保留整数部分
                dec_temp  = temp & 0x0f;          // % 保留小数部分
                
                // % 符号位，百位， 十位， 个位 加上小数位的个位和十位共有6位
                len = int_convert_string(int_temp, str);
                str[len++] = '.';                 // % 显示小数点
                dec_temp   = (dec_temp*100)/16;   // % 保留小数点后两位(*0.0625)
                str[len++] = dec_temp/10 + '0';   // % 小数十位
                str[len++] = dec_temp%10 + '0';   // % 小数个位
                
                // % 如果字符小于6个，填充它
                while (len < 6)
                {
                    str[len++] = ' ';
                }
                str[len] = '\0';
                lcd1602_show_string(0, 0, str);
            }
            start_ds18b20();
        }

    }
}


############################################################
### main.c
############################################################

bit ack;
int temp;           // % 保存温度值                     
float tmp;          // % 定义一个临时变量为浮点数
timer0_init();      // % 初始化定时器0 (10ms@12MHz)
EA = 1;             // % 开启总中断
start_ds18b20();    // % 启动ds18b20
lcd1602_init();     // % 初始化lcd1602

if (flag)
{
    flag = 0;                   // % 每秒更新一次温度
    ack = read_ds18b20(&temp);  // % 读取当前温度
    if (ack)
    {
        if (temp < 0)           // % 如果温度为负数
        {
            lcd1602_cmd(0x80);  // % 写地址
            lcd1602_dat('-');   // % 显示负
            temp = ~temp;       // % (temp为补码存放）取反加“1”求原码
            temp = temp + 1;
            tmp  = temp;
            // % 小数点后保留2位
            temp = tmp * 0.0625 * 100;   
        }
        else
        {
            lcd1602_cmd(0x80);  // % 写地址
            lcd1602_dat(' ');   // % 显示空
            tmp  = temp;        // % 正数
            // % 把浮点数扩大100位，小数点后保留2位
            temp = tmp * 0.0625 * 100;
        }
        // % 如果温度大于100度
        if (temp >= 10000)
        {
            lcd1602_write_cmd(0x82);                    // % 写地址
            lcd1602_write_dat('0' + temp/10000);        // % 百位
            lcd1602_write_dat('0' + temp%10000/1000);   // % 十位
            lcd1602_write_dat('0' + temp%1000/100);     // % 个位
            lcd1602_write_dat('.');                     // % 显示“.”
            lcd1602_write_dat('0' + temp%100/10);       // % 小数十位
            lcd1602_write_dat('0' + temp%10);           // % 小数个位
        }
        // % 如果温度小于100度
        else
        {   // % 如果温度大于等于10度
            if (temp >= 1000)
            {
                lcd1602_write_cmd(0x82);                    // % 写地址
                lcd1602_write_dat('0' + temp%10000/1000);   // % 十位
                lcd1602_write_dat('0' + temp%1000/100);     // % 个位
                lcd1602_write_dat('.');                     // % 显示“.”
                lcd1602_write_dat('0' + temp%100/10);       // % 小数十位
                lcd1602_write_dat('0' + temp%10);           // % 小数个位
                lcd1602_write_dat(' ');          // % 数据对齐，清除原有的显示
            }
            else
            {
                lcd1602_write_cmd(0x82);                    // % 写地址
                lcd1602_write_dat('0' + temp%1000/100);     // % 个位
                lcd1602_write_dat('.');                     // % 显示“.”
                lcd1602_write_dat('0' + temp%100/10);       // % 小数十位
                lcd1602_write_dat('0' + temp%10);           // % 小数个位
                lcd1602_write_dat(' ');          // % 数据对齐，清除原有的显示
                lcd1602_write_dat(' ');          // % 数据对齐，清除原有的显示
            }
        } 
    }
    start_ds18b20();                        // % 重新启动ds18b20
}



############################################################
### % 单个DS18B20的温度读取显示编程(基于4位共阴数码管显示)
############################################################
// % 10ms@12MHz
void timer0_init(void)
{
    TMOD &= 0xF0;   // % 设置定时器模式
    TMOD |= 0x01;   // % 设置定时器模式
    TL0   = 0xF0;   // % 设置定时初值
    TH0   = 0xD8;   // % 设置定时初值
    TF0   = 0;      // % 清除TF0标志
    ET0   = 1;      // % 打开定时器0中断
    EA    = 1;      // % 打开总中断
    TR0   = 1;      // % 定时器0开始计时
}
void TIMER0_ISR(void) interrupt 1
{
    static uint8_t timer0_cnt = 0;
    TR0   = 0;
    TL0   = 0xF0;   // % 设置定时初值
    TH0   = 0xD8;   // % 设置定时初值
    
    smg_display();  // % 4位共阴极数码动态刷新
    
    timer0_cnt++;
    if (timer0_cnt >= 100)
    {
        timer0_cnt = 0;
        flag = 1;
    }
    TR0   = 1;
}



bit ack;
int temp;           // % 保存温度值                     
float tmp;          // % 定义一个临时变量为浮点数
timer0_init();      // % 初始化定时器0 (10ms@12MHz)
EA = 1;             // % 开启总中断
start_ds18b20();    // % 启动ds18b20


if (flag)
{
    flag = 0;                   // % 每秒更新一次温度
    ack = read_ds18b20(&temp);  // % 读取当前温度
    if (ack)
    {
        if (temp < 0)           // % 如果温度为负数
        {
            led_buf[0] = 22;    // % 显示负
            temp = ~temp;       // % (temp为补码存放）取反加“1”求原码
            temp = temp + 1;
            tmp  = temp;
            // % 小数点后保留1位, 方大10倍
            temp = tmp * 0.0625 * 10;   
        }
        else
        {
            tmp  = temp;        // % 正数
            // % 把浮点数扩大10倍，小数点后保留1位
            temp = tmp * 0.0625 * 10;
            
            // % 如果温度大于100度
            if (temp >= 1000)
                led_buf[0] = temp/1000; // % 显示温度百位
            else
                led_buf[0] = 23;        // % 关闭数码管
        }

        // % 如果温度大于等于10度
        if (temp >= 100)
            led_buf[1] = temp/100%10; // % 显示温度十位
        else
            led_buf[1] = 23;          // % 关闭数码管                 
        led_buf[2] = temp/10%10;      // % 显示温度个位
        led_buf[1] = temp%10;         // % 显示温度小数位 
   
    }
    start_ds18b20();                  // % 重新启动ds18b20，进行下一次转换
}



############################################################
### % 4位共阴数码管显示 DS18B20
############################################################
// % 10ms@12MHz
void timer0_init(void)
{
    TMOD &= 0xF0;   // % 设置定时器模式
    TMOD |= 0x01;   // % 设置定时器模式
    TL0   = 0xF0;   // % 设置定时初值
    TH0   = 0xD8;   // % 设置定时初值
    TF0   = 0;      // % 清除TF0标志
    ET0   = 1;      // % 打开定时器0中断
    EA    = 1;      // % 打开总中断
    TR0   = 1;      // % 定时器0开始计时
}
void TIMER0_ISR(void) interrupt 1
{
    static uint8_t timer0_cnt = 0;
    TR0   = 0;
    TL0   = 0xF0;   // % 设置定时初值
    TH0   = 0xD8;   // % 设置定时初值
    
    smg_display();  // % 4位共阴极数码动态刷新
    
    timer0_cnt++;
    if (timer0_cnt >= 100)
    {
        timer0_cnt = 0;
        flag = 1;
    }
    TR0   = 1;
}



int main(void)
{
    uint16_t temp;       // % 保存接收到的温度数据
    uint16_t int_temp;   // % 正数的温度
    uint16_t dec_temp;   // % 小数的温度

    
    timer0_init();
    start_ds18b20();
    delay_ms(10);
    
    while (1)
    {
        // % 定时器0，1秒到时，进行温度转换
        if (flag)
        {
            flag = 0;
            ack = read_ds18b20(&temp);
            if (ack)
            {
                int_temp  = temp >> 4;            // % 保留整数部分
                dec_temp  = temp & 0x0f;          // % 保留小数部分
                // % 保留小数点后两位(*0.0625)，小数位放大10倍
                dec_temp   = (dec_temp*10)/16;   
                
                if (int_temp < 0)
                {
                    int_temp = -int_temp;           // % 取int_temp绝对值
                    led_buf[0] = 22;                // % 显示“-”
////////////////////////  在仿真中，步进0.5会多进一度     ///////////////////////
                    if (dec_temp%10 != 0)
                    {
                        int_temp = int_temp-1;
                    }
                }
                else
                {
                    if (int_temp > 100)
                        led_buf[0] = int_temp/100;  // % 显示百位
                    else
                        led_buf[0] = 23;            // % 关闭这一位数码管
                }
                
                if (int_temp >= 10)
                    led_buf[1] = int_temp/10%10;    // % 显示十位    
                else
                    led_buf[0] = 23;                // % 关闭这一位数码管
                led_buf[2] = int_temp%10;           // % 显示个位  
                led_buf[3] = dec_temp;              // % 显示小数位  
            }
            start_ds18b20();
        }

    }
}



############################################################
### % 读取DS1820的64位ROM码显示在液晶LCD1602并发送到串口
############################################################
uint8_t rom_code[8];

void read_rom_code(uint8_t *pcode)
{
    bit ack
    uint8_t i;
    ack = ds18b20_init();
    if (ack == 0);
    {   // % 读取ROM指令
        ds18b20_write_dat(READ_ROM);
        for (i = 0; i < 8; i++)
        {   // % 读取64位ROM码
            rom_code[i] = ds18b20_read_dat();
        }
    }
}


// % 在LCD1602上显示ROM码，低位在前，高位在后
void lcd_show_rom_code(uint8_t *rom_code)
{
    uint8_t i;
    uint8_t tmp;
    // % 低位在前，高位在后
    for (i = 0; i < 8; i++)
    {
        // % 高位
        tmp = rom_code[i] >> 4;
        if (tmp < 10)
            lcd1602_write_dat(tmp + '0');
        else
            lcd1602_write_dat(tmp + '7'); // ABCDEF
        // % 低位    
        tmp = rom_code[i] & 0x0F;
        if (tmp < 10)
            lcd1602_write_dat(tmp + '0');
        else
            lcd1602_write_dat(tmp + '7'); // ABCDEF
    }
}



int main(void)
{
    read_rom_code(rom_code);
    lcd_show_rom_code(rom_code);
    for (i = 0; i < 8; i++)
    {
        send_byte(rom_code[i]);
    }
}






