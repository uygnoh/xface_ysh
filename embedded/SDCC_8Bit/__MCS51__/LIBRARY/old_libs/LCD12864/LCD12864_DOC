############################################################
### % LCD12864液晶显示模块
############################################################
1   GND                 % 电源地
2   VCC                 % 电源正
3   VEE                 % 液晶对比度偏压信号
4   RS                  % 命令数据选择信号
5   RW                  % 读写选择信号
6   EN                  % 使能引脚
% (7_DB0数据总线低位 - 14_DB7数据总线高位)  
15  PSB                 % 串并模式选择(0串行, 1并行)
16  NC                  % 空脚
17  RST                 % 复位引脚
18  VO                  % 电压输出
19  A                   % 背光正极
20  K                   % 背光负极
___________________________________________________________
sbit RS  = P1^0;        /* % 并行的指令/数据选择信号; “CS”串行的片选信号 */
sbit RW  = P1^1;        /* % 并行的读/写选择信号; “SDI”串行的数据信号 */
sbit EN  = P1^2;        /* % 并行的使能信号; “CLK”串行的同步时钟 */
sbit PSB = P1^3;        /* % 并/串 选择端口; H并， L串 */
#define LCD_PORT    P2  /* % 并行的双向数据端口“”DB0~DB7 */  
___________________________________________________________



############################################################
### % ST7920控制器
############################################################
0 % 内部包括有国标一级，二级简体中文字库
1 % 该模块具有4位/8位并行
2 % 2线或3线串行接口
3 % 显示分辨率为(128*64)
4 % 内置8192个16*16点汉字，和128个16*8点ASCII字符集
5 % CGROM(Character Generator ROM)  字符产生单元
6 % CGRAM(Character Generator RAM)  用户自定义字符产生单元
7 % DDRAM(Display Data RAM)         显示数据存放单元
8 % GDRAM(Graphic RAM)              绘图单元


% LCD12864显示位置
___________________________________________________________
                    X坐标
第一行     80  81  82  83  84  85  86  87
第二行     90  91  92  93  94  95  96  97
第三行     88  89  8A  8B  8C  8D  8E  8F
第四行     98  99  9A  9B  9C  9D  9E  9F
___________________________________________________________


% LCD12864字符编码(ascii) 0x00~0x7F
___________________________________________________________
0x00    0x01    0x02    0x03    ...     0x0F
0x10                            ...     0x1F
0x20                            ...     0x2F
0x30                            ...     0x3F
0x40                            ...     0x4F
0x50                            ...     0x5F
0x60                            ...     0x6F    
0x70                            ...     0x7F
___________________________________________________________



% ST7920中文字符编码表
___________________________________________________________
B0E0 ->班
lcd12864_write_dat(0xB0);
lcd12864_write_dat(0xE0);



### % ST7920控制芯片具有2种指令集
___________________________________________________________
0 基本指令集，当“RE”位为0时
% 清除显示， 地址归位， 进入点设定， 显示状态开关， 游标或显示移位控制
% 功能设定， 设定CGRAM地址， 设定DDRAM地址， 读取忙标志和地址，写数据到RAM
___________________________________________________________
1 扩充指令集，当“RE”位为1时
% 待命模式， 卷动地址或IRAM地址选择， 反白选择， 扩充功能设定
% 设置绘图RAM地址


lcd12864_write_cmd(0x30);    /* 启用基本指令集 */
lcd12864_write_cmd(0x34);    /* 启用扩充指令集 */



############################################################
### % 128列*64行 <===> 256列*32行 (绘制点)
############################################################
% 把4*4转换为8*2
_________________________________________________________
(1, 1)      (1, 2)      (1, 3)      (1, 4)
(2, 1)      (2, 2)      (2, 3)      (2, 4)
(3, 1)      (3, 2)      (3, 3)      (3, 4)
(4, 1)      (4, 2)      (4, 3)      (4, 4)
_________________________________________________________
        Left                +       Right
(1, 1) (1, 2) (1, 3) (1, 4) + (3, 1) (3, 2) (3, 3) (3, 4)
(2, 1) (2, 2) (2, 3) (2, 4) + (4, 1) (4, 2) (4, 3) (4, 4)
_________________________________________________________

lcd12864_brush_screen_dark();   /* % 刷屏，让每一个LED灭 */
lcd12864_write_cmd(0x34);       /* % 切换到扩充功能指令集 */

% 在左上角的位置显示一个点
_________________________________________________________
lcd12864_write_cmd(0x80);       /* % 确定横坐标(X), 32行--(为第一行) */
lcd12864_write_cmd(0x80);       /* % 确定纵坐标(Y), 256列—(把16列看成1组，共有16组)(为第1组) */
_________________________________________________________
1 0 0 0 0 0 0 0     0 0 0 0 0 0 0 0 
_________________________________________________________
lcd12864_write_dat(0x80);       /* % 发送字节 1 */
lcd12864_write_dat(0x00);       /* % 发送字节 2 */
_________________________________________________________


% 在左下角的位置显示一个点
_________________________________________________________
lcd12864_write_cmd(0x80+31);    /* % 确定横坐标(X), (为最后一行) */
lcd12864_write_cmd(0x80+8);     /* % 确定纵坐标(Y), (为第9组) */
lcd12864_write_dat(0x80);       /* % 发送字节 1 */
lcd12864_write_dat(0x00);       /* % 发送字节 2 */
_________________________________________________________


% 在右下角的位置显示一个点
_________________________________________________________
lcd12864_write_cmd(0x80+31);    /* % 确定横坐标(X), (为最后一行) */
lcd12864_write_cmd(0x80+15);     /* % 确定纵坐标(Y), (为第16组) */
lcd12864_write_dat(0x00);       /* % 发送字节 1 */
lcd12864_write_dat(0x01);       /* % 发送字节 2 */
_________________________________________________________

lcd12864_write_cmd(0x34);       /* % 扩充功能指令设定，绘图显示打开 */
lcd12864_write_cmd(0x30);       /* %切换到基本指令集 */







############################################################
### % LCD12864有字库，并行数据接口方式
############################################################
lcd12864_init();            /* % 初始化lcd12864 */
lcd12864_write_cmd(0x80);   /* % 确定显示位置 */
lcd12864_write_dat(0x41);   /* % 确定显示内容 */


/* % lcd12864初始化 */
void lcd12864_init(void)
{
    PSB = 1;                    /* % 使用并行控制模式 */
    lcd12864_write_cmd(0x30);   /* % 基本指令集 */
    lcd12864_write_cmd(0x01);   /* % 清除屏幕 */
    lcd12864_write_cmd(0x06);   /* % 显示光标移动设置 */
    lcd12864_write_cmd(0x0c);   /* % 显示开及光标设置 */
}

/* % lcd12864判断忙 */
void lcd12864_busy_check(void)
{
    uint8_t tmp;
    LCD_PORT = 0xFF;
    
    do {
        RS = 0;             /* % RS为“0”, 表示“读命令” */
        RW = 1;             /* % RW为“1”, 表示“读”*/
        EN = 0;             /* % EN为“0”, 关闭使能 */
        EN = 1;             /* % 拉高“EN”，产生一个上升沿 */
        delay_us(2);        /* % 稍作延时，等待lcd12864上的数据稳定 */
        tmp = LCD_PORT;     /* % 读取lcd12864上的数据 */
        delay_us(2);        /* % 稍作延时 */
        EN = 0;             /* % 拉低EN */
        delay_us(2);        /* % 稍作延时 */
    } while (tmp & 0x80);   /* % 判断LCD_PORT端口上的数据最高位，为“1”表示忙 */
}

/* % lcd12864写命令 */
void lcd12864_write_cmd(uint8_t cmd)
{
    lcd12864_busy_check();  /* % 检查lcd12864是否忙 */
    RS = 0;                 /* % RS为“0”, 表示“写命令” */
    RW = 0;                 /* % RW为“0”, 表示“写”*/
    EN = 0;                 /* % EN为“0”, 关闭使能 */
    LCD_PORT = cmd;         /* % “单片机”先把数据准备好 */
    delay_us(2);            /* % 稍作延时 */
    EN = 1;                 /* % 拉高“EN”，产生一个上升沿 */
    delay_us(2);            /* % 稍作延时，等待数据写入到lcd12864 */
    EN = 0;                 /* % 拉低“EN” */
    delay_us(2);            /* % 稍作延时 */
}

/* % lcd12864写数据 */
void lcd12864_write_dat(uint8_t dat)
{
    lcd12864_busy_check();  /* % 检查lcd12864是否忙 */
    RS = 1;                 /* % RS为“0”, 表示“写数据” */
    RW = 0;                 /* % RW为“0”, 表示“写”*/
    EN = 0;                 /* % EN为“0”, 关闭使能 */
    LCD_PORT = cmd;         /* % “单片机”先把数据准备好 */
    delay_us(2);            /* % 稍作延时 */
    EN = 1;                 /* % 拉高“EN”，产生一个上升沿 */
    delay_us(2);            /* % 稍作延时, 等待数据写入到lcd12864 */
    EN = 0;                 /* % 拉低“EN” */
    delay_us(2);            /* % 稍作延时 */
}




