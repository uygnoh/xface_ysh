/*******************************************************************************
        => LCD1602
*******************************************************************************/
//其中“10K为可调电阻”，用于调整显示器的对比度
//其中“0.01K为限流电阻”，防止过流烧坏显示屏背光灯(10欧姆，1/2W)
   .______RP______.
   |              |
.__|__.       .___|___.
| VL  |------>| 10K   |------>0V
|_____|       |_______|
._____.
| BLK |---------------------->0V
|_____|
._____.       ._______.
| BLA |------>| 0.01K |------>5V
|_____|       |_______|


//LCD1602引脚定义(8051_12MHz)
//_________________________________________________________
VCC     //电源正 VDD
GND     //电源地 VSS
VL      //液晶显示偏压信号，调节对比度
BL+     //背光源正极 [BLA]
BL-     //背光源负极 [BLk]
RS      //数据/命令选择端(H/L)
RW      //读 / 写 选择端(H/L)
EN      //使能信号
D1,D2,D3,D4,D5,D6,D7,D8//数据端口 [8个引脚接P0端口]


//LCD1602 地址, 最高位固定为“1”(0x80)
//_________________________________________________________
注意： LCD1602共可以显示 2行，
    第一行起始地址为：0x80,
    第二行起始地址为：0x80+0x40.
0x00    0x01    0x02    0x03    ...     0x0F //0x10 ... 0x27
0x40    0x41    0x42    0x43    ...     0x4F //0x50 ... 0x67



/*******************************************************************************
        => DDRAM__显存__(共80Bytes)
        => lcd1602第一行显存地址： 0x00~0x27（40）
        => lcd1602第二行显存地址： 0x40~0x67（40）
*******************************************************************************/



/*******************************************************************************
        => CGROM__存放字模数据__(只读)， 也叫作字符产生器
        ___________________________________________________
        => CGRAM__用户自定义字模__(读写)， 用户可以自定义“8个字符”
*******************************************************************************/



/*******************************************************************************
        => lcd1602指令
*******************************************************************************/
|__________________________________________________________________________|
| RS | RW | D7 |   D6   |   D5  |   D4  |   D3  |   D2    |   D1  |   D0   |
|____|____|____|________|_______|_______|_______|_________|_______|________|
| 0  | 0  | 0  |   0    |   0   |   0   |   0   |   0     |   0   |   1    |//清屏
|____|____|____|________|_______|_______|_______|_________|_______|________|
| 0  | 0  | 0  |   0    |   0   |   0   |   0   |   0     |   1   |   *    |//光标返回
|____|____|____|________|_______|_______|_______|_________|_______|________|
| 0  | 0  | 0  |   0    |   0   |   0   |   0   |   1     |  I/D  |   S    |//置输入模式
|____|____|____|________|_______|_______|_______|_________|_______|________|
| 0  | 0  | 0  |   0    |   0   |   0   |   1   |   D     |   C   |   B    |//光标开关
|____|____|____|________|_______|_______|_______|_________|_______|________|
| 0  | 0  | 0  |   0    |   0   |   1   |  S/C  |  R/L    |   *   |   *    |//光标或字符移位
|____|____|____|________|_______|_______|_______|_________|_______|________|
| 0  | 0  | 0  |   0    |   1   |   DL  |   N   |   F     |   *   |   *    |//功能设置
|____|____|____|________|_______|_______|_______|_________|_______|________|
| 0  | 0  | 0  |   1    | //字符发生存储器地址
|____|____|____|________|_______|_______|_______|_________|_______|________|
| 0  | 0  | 1  | //显示数据存储器地址
|____|____|____|________|_______|_______|_______|_________|_______|________|
| 0  | 1  | BF | //计数器地址
|____|____|____|________|_______|_______|_______|_________|_______|________|
| 1  | 0  | 0  | //要写的数据内容
|____|____|____|________|_______|_______|_______|_________|_______|________|
| 1  | 1  | 0  | //读出的数据内容
|____|____|____|________|_______|_______|_______|_________|_______|________|


//显示模式设置指令
____________________________________________________________
//DL=1;(8位数据接口)    DL=0;(4位数据接口)
//N =1;(2行显示)        N=0;(1行显示)
//F =1;(5*10点阵字符)   F=0;(5*8点阵字符)
#define MODE_PIN8       0x38        //8位数据接口，2行，5*8点阵
#define MODE_PIN4       0x28        //4位数据接口，2行，5*8点阵


//光标
____________________________________________________________
#define SCREEN_CLR      0x01        //清屏
#define CURSOR_RST      0x02        //光标复位


//显示开关控制指令
____________________________________________________________
#define DIS_CUR_BLK_ON  0x0F        //显示开，光标开，光标闪烁
#define DIS_CUR_ON      0x0E        //显示开，光标开，光标不闪烁
#define DIS_ON          0x0C        //显示开，光标关，光标不闪烁
#define DIS_OFF         0x08        //显示关，光标关，光标不闪烁


//显示模式控制
____________________________________________________________
#define CURSOR_LEFT     0x04        //光标左移，显示不移动
#define CURSOR_RIGHT    0x06        //光标右移，显示不移动
#define DIS_MODE_LEFT   0x07        //操作后，AC自增，画面平移
#define DIS_MODE_RIGHT  0x05        //操作后，AC自减，画面平移


//光标，显示移动指令
____________________________________________________________
#define CUR_MOVE_LEFT   0x10        //光标左移
#define CUR_MOVE_RIGHT  0x14        //光标右移
#define DIS_MOVE_LEFT   0x18        //显示左移
#define DIS_MOVE_RIGHT  0x1C        //显示右移


/*******************************************************************************
        => lcd1602程序
*******************************************************************************/
int main(void)
{
        lcd1602_init();
        lcd1602_write_cmd(0x80);        //给出地址指针，第一行的第1个字符位
        lcd1602_write_dat('y');         //写入数据
        lcd1602_write_cmd(0x80+5);      //给出地址指针,第一行第6个字符位
        lcd1602_write_dat('0');         //显示0
        lcd1602_write_dat(0x30);        //显示0
        lcd1602_write_cmd(0x80+0x40);   //给出地址指针，第二行的第1个字符
        lcd1602_write_dat(0x38);        //显示数字 8
        lcd1602_show_string(0, 0, "hello,");
        lcd1602_show_string(4, 1, "world!");
}

//LCD1602 初始化
//_________________________________________________________
void lcd1602_init(void)
{
        delay_ms(15);                   //延时15ms
        lcd1602_write_cmd(MODE_PIN8);   //8位数据接口，2行，5*8点阵
        delay_ms(5);                    //延时5ms
        lcd1602_write_cmd(DIS_ON);      //显示开，光标关，光标不闪烁
        delay_ms(5);                    //延时5ms
        lcd1602_write_cmd(CURSOR_RIGHT);//光标右移
        delay_ms(5);                    //延时5ms
        lcd1602_write_cmd(SCREEN_CLR);  //显示清屏
        delay_ms(5);                    //延时5ms
}



/*******************************************************************************
        => LCD1602液晶显示整数变量和小数变量的编程实现
*******************************************************************************/
int main(void)
{
        long dat = 12345678;    //int32_t
        uint8_t str[CHAR_LEN];  //"4294967295\0"
        IntergerToStr(dat, str);//整形转换为字符串
}


//给一个长整形数据，把它转换成字符串
#define DATA_TYPE   long
#define CHAR_LEN    11
//_________________________________________________________
uint8_t IntergerToStr(DATA_TYPE dat, uint8_t *str)
{
        uint8_t i = 0;                  //字符串索引
        uint8_t len = 0;                //字符串长度
        uint8_t buf[CHAR_len];          //字符串临时缓冲区
        // 如果是负数，取绝对值
        //_________________________________________________
        if (dat < 0) {
                dat = -dat;                 
                *str++ = '-';
                len++;
        }
        //反着取字符串
        //_________________________________________________
        do {
                buf[i++] = dat%10 + '0';    
                dat /= 10;
        } while (dat > 0);

        len += i;
        //在把字符串反过来
        //_________________________________________________
        while (i-- > 0) {             
                *str++ = buf[i];
        }
        *str = '\0';    //字符串结束加入一个“\0”                   
        return len;     //返回字符串长度
}



/*******************************************************************************
        => 显示小数点方法
*******************************************************************************/
//小数点位置固定，显示小数点方法
//_________________________________________________________
float num = 1.255
temp = num * 1000;
lcd1602_write_dat(temp/1000 + '0');
lcd1602_write_dat('.');
lcd1602_write_dat(temp/100%10 + '0');
lcd1602_write_dat(temp/10%10 + '0');
lcd1602_write_dat(temp%10 + '0');


//小数点位置不固定，显示小数点方法
//_________________________________________________________
str_buf[12]={};
float num2 = 1.255
temp = num * 1000;
//把num2中的数据转换成字符放到str_buf中
sprintf(str_buf, "%0.4f", num2);
lcd1602_show_string(8, 1, str_buf);



/*******************************************************************************
        => LCD1602采用“4位并行口”显示
        => 它只用到了“DB7 DB6 DB5 DB4”这高4位
        HD44780//https://www.usr.cn/Download/5.html
        => 本例程中使用的是“高4位__IO__”
*******************************************************************************/
uint8_t lcd1602_busy(void)
{
        uint8_t i;
        uint8_t busy;
        PDC |= 0xF0;    //高4位置“1”，低4位保持不变
        PRS  = 0;
        PRW  = 1;
        delay_ms(1);
        do {
                PEN  = 1;
                busy = PDC & 0xF0;      //读取高4位
                delay_ms(1);
                PEN  = 0;
                PEN  = 1;
                busy|= (PDC & 0xF0) >> 4;//读取低4位 + 高4位
                delay_ms(1);
                PEN  = 0;
                i++;
                if (i > 50) {
                        return(0x01);
                }
        } while (busy & 0x80);
        return(0x00);
}


  函数名称: lcd1602_write_cmd()
  输入参数: cmd（要写入的命令字）
  输出参数: 无
  函数功能: 向lcd1602中写入命令字
//_________________________________________________________
void lcd1602_write_cmd(uint8_t cmd)
{   
        if (!lcd1602_busy()) {
                PRS = 0;        //PRS为低电平表示要写入的是命令(command)
                PRW = 0;        //PRW为低电平表示是写信号
                PEN = 0;        //PEN为使能信号，开始为低电平
                PDC = cmd;      //先送入命令(command)高4位
                delay_ms(5);    //稍作延时，等待数据稳定
                PEN = 1;        //然后在把使能信号拉高，数据开始写入LCD1602中
                delay_ms(5);    //稍作延时，等待数据写入完成
                PEN = 0;        //之后再把使能信号拉低
                delay_ms(5);    //稍作延时
                
                PDC = cmd << 4;//先送入命令(command)低4位
                delay_ms(5);    //稍作延时，等待数据稳定
                PEN = 1;        //然后在把使能信号拉高，数据开始写入LCD1602中
                delay_ms(5);    //稍作延时，等待数据写入完成
                PEN = 0;        //之后再把使能信号拉低
                delay_ms(5);    //稍作延时
        }
}

  函数名称: lcd1602_write_dat()
  输入参数: dat（要写入的数据字）
  输出参数: 无
  函数功能: 向lcd1602中写入数据字
//_________________________________________________________
void lcd1602_write_dat(uint8_t dat)
{   
        if (!lcd1602_busy()) {
                PRS = 1;        //PRS为低高电平表示要写入的是数据
                PRW = 0;        //PRW为低电平表示是写信号
                PEN = 0;        //PEN为使能信号，开始为低电平
                PDC = dat;      //先送入(data数据)
                delay_ms(5);    //稍作延时，等待数据稳定
                PEN = 1;        //然后在把使能信号拉高，数据开始写入LCD1602中
                delay_ms(5);    //稍作延时，等待数据写入完成
                PEN = 0;        //之后再把使能信号拉低
                delay_ms(5);    //稍作延时
                
                PDC = dat << 4; //先送入(data数据)
                delay_ms(5);    //稍作延时，等待数据稳定
                PEN = 1;        //然后在把使能信号拉高，数据开始写入LCD1602中
                delay_ms(5);    //稍作延时，等待数据写入完成
                PEN = 0;        //之后再把使能信号拉低
                delay_ms(5);    //稍作延时
        }
}


void lcd1602_init(void)
{
        lcd1602_write_cmd(0x33);//显示模式设置之前设置命令
        delay_ms(5);
        lcd1602_write_cmd(0x32);//显示模式设置之前设置命令
        delay_ms(5);
        lcd1602_write_cmd(0x28);//显示模式（4位，2行/5*8点阵）
        delay_ms(5);
        lcd1602_write_cmd(0x0C);//显示开
        delay_ms(5);
        lcd1602_write_cmd(0x06);//光标右移
        delay_ms(5);
        lcd1602_write_cmd(0x01);//清屏
        delay_ms(5);
}



/*******************************************************************************
        => LCD1602自定义字符编码实现（CGRAM是用户自定义字符区）
        => 用户可以自定义“8”个字符
*******************************************************************************/
1 构造自定义字符(lcd1602(5*8)点阵)，高3位补“0”，构造成“8*8”点阵
//_________________________________________________________
uint8_t code cgrom[8] = {0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00};
void lcd1602_write_cgram(void)
{
        lcd1602_write_cmd(0x40);   //将数组中的内容写入CGRAM中
        for (i = 0; i < 8; i++) {
                lcd1602_write_dat(cgrom[i]);
        }
        //显示构造好的字符， 确定CGROM的地址，显构造好的字符
        lcd1602_write_cmd(0x80 | 0x05);
        //写入构造的字符编码
        lcd1602_write_dat(0x00);
        
        
        lcd1602_write_cmd(0x48);   //将数组中的内容写入CGRAM中
        for (i = 0; i < 8; i++) {
                lcd1602_write_dat(cgrom[i]);
        }
        //显示构造好的字符， 确定CGROM的地址，显构造好的字符
        lcd1602_write_cmd(0x80 | 0x00);
        //写入构造的字符编码
        lcd1602_write_dat(0x01);
}

