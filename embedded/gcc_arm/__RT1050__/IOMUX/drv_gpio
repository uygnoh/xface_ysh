//______________________________________________________________________________
//      => IOMUXC_SNVS_SW_MUX_CTL_PAD_WAKEUP
//      => IOMUXC_SNVS_SW_PAD_CTL_PAD_WAKEUP
//______________________________________________________________________________

#define IOMUXC_SNVS_WAKEUP_GPIO5_IO00 (
                        0x400A8000U,    // SW MUX Control Register
                        0x5U,           // MUX Mode Select Field
                        0,              // DAISY Register
                        0,              // DAISY Register 数据
                        0x400A8018U )   // SW_PAD_CTL Register
//------------------------------------------------------------------------------
//      IOMUXC_SW_MUX_CTL_PAD_XXXX      // 复用功能寄存器
//      4       SION
//      2:0     MUX_MODE
//------------------------------------------------------------------------------
//      IOMUXC_SW_PAD_CTL_PAD_XXXX      // 电气属性寄存器
//      16      HYS     // 滞回器配置: 开启 
//                      // 仅输入时有效，施密特触发器，使能后可以过滤输入噪声
//      15:14   PUS     // 上拉/下拉选择: 22K欧姆上拉(3)
//      13      PUE     // 拉/保持器选择: 上下拉(1)
//      12      PKE     // 拉/保持器配置: 使能(1)
//      11      ODE     // 开漏配置: 关闭(0)
//      7:6     SPEED   // 速度配置: medium(100MHz)
//      5:3     DSE     // 驱动强度: 关闭
//      0       SRE     // 转换速率: 转换速率慢
//------------------------------------------------------------------------------
//      IOMUXC_XXXX_SELECT_INPUT        // 管脚输入功能选择寄存器
//        
// IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15
        ALT4 — Select mux mode: ALT4 mux port: CSI_DATA02 of instance: csi
        
        
// IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11
        ALT4 — Select mux mode: ALT4 mux port: CSI_DATA02 of instance: csi
        
        
// IOMUXC_CSI_DATA02_SELECT_INPUT
        DAISY[0]        // Selecting Pads Involved in Daisy Chain
           0            GPIO_AD_B1_15_ALT4
           1            GPIO_AD_B0_11_ALT4
        其中 xxxxx 为 IO 口的某一复用功能, 这个复用功能一般有多个 IO 口可以选择,
        例如: CSI_DATA02(摄像头接口的数据线 2), 有 2 个 IO 口可以复用为这个功能, 即
        GPIO_AD_B1_15(GPIO1_IO31)和 GPIO_AD_B0_11(GPIO1_IO11)。 那么摄像头接口选择到
        底选哪个 IO 作为 CSI_DATA02 呢?
//------------------------------------------------------------------------------
void button_init(void)
{
        gpio_pin_config_t pin_config;
        
        // 开启SVNS时钟--低功耗管理模块时钟，配置WAKEUP必须使能它
        CLOCK_EnableClock(kCLOCK_IomuxcSnvs);
        
        // 101  ALT5 — Select mux mode: ALT5 mux port: GPIO5_IO00 of instance: gpio5
        #define IOMUXC_SNVS_WAKEUP_GPIO5_IO00 0x400A8000U, 0x5U, 0, 0, 0x400A8018U
        IOMUXC_SetPinMux(IOMUXC_SNVS_WAKEUP_GPIO5_IO00, 0U);
        // 配置PAD属性
        IOMUXC_SetPinConfig(IOMUXC_SNVS_WAKEUP_GPIO5_IO00,
                IOMUXC_SW_PAD_CTL_PAD_SRE(0)    | // 压摆率低速
                IOMUXC_SW_PAD_CTL_PAD_DSE(0)    | // 驱动电阻关闭
                IOMUXC_SW_PAD_CTL_PAD_SPEED(1)  | // 速率100MHz
                IOMUXC_SW_PAD_CTL_PAD_ODE(0)    | // 开漏输出关闭
                IOMUXC_SW_PAD_CTL_PAD_PKE(1)    | // 上下拉使能
                IOMUXC_SW_PAD_CTL_PAD_PUE(1)    | // 选择上下拉
                IOMUXC_SW_PAD_CTL_PAD_PUS(3)    | // 上拉电阻（22K）
                IOMUXC_SW_PAD_CTL_PAD_HYS(1)      // 硬件消抖
        );
        pin_config.direction = kGPIO_DigitalInput;
        pin_config.outputLogic = 1;
        pin_config.interruptMode = kGPIO_NoIntmode;
        GPIO_PinInit(GPIO5, 0, &pin_config);
}    



// 配置GPIO工作模式
// ____________________________________________________________
static inline void IOMUXC_SetPinMux(uint32_t muxRegister,  // 引脚的复用功能寄存器
                                    uint32_t muxMode,        // 引脚的工作模式
                                    uint32_t inputRegister,  // 选择的输入寄存器
                                    uint32_t inputDaisy,     // 输入资料
                                    uint32_t configRegister, // 配置寄存器
                                    uint32_t inputOnfield)   // SION
{
        *((volatile uint32_t *)muxRegister) =
                IOMUXC_SW_MUX_CTL_PAD_MUX_MODE(muxMode) | IOMUXC_SW_MUX_CTL_PAD_SION(inputOnfield);

        if (inputRegister != 0UL) {
                *((volatile uint32_t *)inputRegister) = inputDaisy;
        }
}
// 配置GPIO电气属性
// ____________________________________________________________
static inline void IOMUXC_SetPinConfig(uint32_t muxRegister,
                                       uint32_t muxMode,
                                       uint32_t inputRegister,
                                       uint32_t inputDaisy,
                                       uint32_t configRegister,
                                       uint32_t configValue)
{
        if (configRegister != 0UL) {
                *((volatile uint32_t *)configRegister) = configValue;
        }
}

                                        
                                        
                                        
//______________________________________________________________________________
//      => GPIO driver
//______________________________________________________________________________
        fsl.gpio.c
        fsl.gpio.h
        fsl.iomuxc.h
//_____________________________________________________________
                                                // 模式配置地址， ALT模式， 0， 0， 电气属性地址
#define IOMUXC_GPIO_EMC_00_SEMC_DA00            0x401F8014U, 0x0U, 0,           0,      0x401F8204U
#define IOMUXC_GPIO_EMC_00_FLEXPWM4_PWM0_A      0x401F8014U, 0x1U, 0x401F8494U, 0x0U,   0x401F8204U
#define IOMUXC_GPIO_EMC_00_LPSPI2_SCK           0x401F8014U, 0x2U, 0x401F8500U, 0x1U,   0x401F8204U
#define IOMUXC_GPIO_EMC_00_XBAR1_IN02           0x401F8014U, 0x3U, 0x401F860CU, 0x0U,   0x401F8204U
#define IOMUXC_GPIO_EMC_00_FLEXIO1_D00          0x401F8014U, 0x4U, 0,           0,      0x401F8204U
#define IOMUXC_GPIO_EMC_00_GPIO4_IO00           0x401F8014U, 0x5U, 0,           0,      0x401F8204U



//______________________________________________________________________________
//      => MIMXRT1052.h
//      => IOMUXC_SW_PAD_CTL_PAD_GPIO_XXXX 电气属性配置
//______________________________________________________________________________

// 压摆率设置            
//_____________________________________________________________
#define IOMUXC_SW_PAD_CTL_PAD_SRE_MASK           (0x1U)
#define IOMUXC_SW_PAD_CTL_PAD_SRE_SHIFT          (0U)
/*! SRE - Slew Rate Field
 *  0b0..Slow Slew Rate
 *  0b1..Fast Slew Rate
 */
#define IOMUXC_SW_PAD_CTL_PAD_SRE(x)                                            \
        ( ((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_SRE_SHIFT)) &    \
        IOMUXC_SW_PAD_CTL_PAD_SRE_MASK )
                                                        
// 驱动强度
//_____________________________________________________________
#define IOMUXC_SW_PAD_CTL_PAD_DSE_MASK           (0x38U)
#define IOMUXC_SW_PAD_CTL_PAD_DSE_SHIFT          (3U)
/*! DSE - Drive Strength Field
 *  0b000..HI-Z
 *  0b001..Dual/Single voltage: 262/260 Ohm @ 1.8V, 247/157 Ohm @ 3.3V
 *  0b010..Dual/Single voltage: 134/130 Ohm @ 1.8V, 126/78  Ohm @ 3.3V
 *  0b011..Dual/Single voltage: 88/88   Ohm @ 1.8V, 84/53   Ohm @ 3.3V
 *  0b100..Dual/Single voltage: 62/65   Ohm @ 1.8V, 57/39   Ohm @ 3.3V
 *  0b101..Dual/Single voltage: 51/52   Ohm @ 1.8V, 47/32   Ohm @ 3.3V
 *  0b110..Dual/Single voltage: 43/43   Ohm @ 1.8V, 40/26   Ohm @ 3.3V
 *  0b111..Dual/Single voltage: 37/37   Ohm @ 1.8V, 34/23   Ohm @ 3.3V
 */
#define IOMUXC_SW_PAD_CTL_PAD_DSE(x)                                            \
        ( ((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_DSE_SHIFT)) &    \
        IOMUXC_SW_PAD_CTL_PAD_DSE_MASK )

// 速度                                  
//_____________________________________________________________                            
#define IOMUXC_SW_PAD_CTL_PAD_SPEED_MASK         (0xC0U)
#define IOMUXC_SW_PAD_CTL_PAD_SPEED_SHIFT        (6U)
/*! SPEED - Speed Field
 *  0b00..50MHz
 *  0b01..100MHz - 150MHz
 *  0b10..100MHz - 150MHz
 *  0b11..150MHz - 200MHz
 */
#define IOMUXC_SW_PAD_CTL_PAD_SPEED(x)                                          \
        ( ((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_SPEED_SHIFT)) &  \
        IOMUXC_SW_PAD_CTL_PAD_SPEED_MASK )


// 开漏使能                              
//_____________________________________________________________                                                
#define IOMUXC_SW_PAD_CTL_PAD_ODE_MASK           (0x800U)
#define IOMUXC_SW_PAD_CTL_PAD_ODE_SHIFT          (11U)
/*! ODE - Open Drain Enable Field
 *  0b0..Open Drain Disabled (Output is CMOS)
 *  0b1..Open Drain Enabled (Output is Open Drain)
 */
#define IOMUXC_SW_PAD_CTL_PAD_ODE(x)                                            \
        ( ((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_ODE_SHIFT)) &    \
        IOMUXC_SW_PAD_CTL_PAD_ODE_MASK )


// 上下拉，保持，使能
//_____________________________________________________________
#define IOMUXC_SW_PAD_CTL_PAD_PKE_MASK           (0x1000U)
#define IOMUXC_SW_PAD_CTL_PAD_PKE_SHIFT          (12U)
/*! PKE - Pull / Keep Enable Field
 *  0b0..Pull/Keeper Disabled
 *  0b1..Pull/Keeper Enabled
 */
#define IOMUXC_SW_PAD_CTL_PAD_PKE(x)                                            \
        ( ((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_PKE_SHIFT)) &    \
        IOMUXC_SW_PAD_CTL_PAD_PKE_MASK )


// 保持 或 上下拉
//_____________________________________________________________
#define IOMUXC_SW_PAD_CTL_PAD_PUE_MASK           (0x2000U)
#define IOMUXC_SW_PAD_CTL_PAD_PUE_SHIFT          (13U)
/*! PUE - Pull / Keep Select Field Control signal to enable 
                 internal pull-up/down resistors or pad keeper functionality.
 *  0b0..Keep the previous output value when the output driver is disabled.
 *  0b1..Pull-up or pull-down (determined by PUS field).
 */
#define IOMUXC_SW_PAD_CTL_PAD_PUE(x)                                            \
        ( ((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_PUE_SHIFT)) &    \
        IOMUXC_SW_PAD_CTL_PAD_PUE_MASK )


// 上下拉电阻选择
//_____________________________________________________________
#define IOMUXC_SW_PAD_CTL_PAD_PUS_MASK           (0xC000U)
#define IOMUXC_SW_PAD_CTL_PAD_PUS_SHIFT          (14U)
/*! PUS - Pull Up / Down Config. Field Controls signals to select 
                    pull-up or pull-down internal resistance strength.
 *  0b00..100K Ohm Pull Down
 *  0b01..47K  Ohm Pull Up
 *  0b10..100K Ohm Pull Up
 *  0b11..22K  Ohm Pull Up
 */
#define IOMUXC_SW_PAD_CTL_PAD_PUS(x)                                            \
        ( ((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_PUS_SHIFT)) &    \
        IOMUXC_SW_PAD_CTL_PAD_PUS_MASK )


// 迟滞器使能
//_____________________________________________________________
#define IOMUXC_SW_PAD_CTL_PAD_HYS_MASK           (0x10000U)
#define IOMUXC_SW_PAD_CTL_PAD_HYS_SHIFT          (16U)
/*! HYS - Hyst. Enable Field
 *  0b0..Hysteresis Disabled (CMOS input)
 *  0b1..Hysteresis Enabled (Schmitt Trigger input)
 */
#define IOMUXC_SW_PAD_CTL_PAD_HYS(x)                                            \
        ( ((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_HYS_SHIFT)) &    \
        IOMUXC_SW_PAD_CTL_PAD_HYS_MASK)


                        
//______________________________________________________________________________
//      => GPIO driver 例程
//______________________________________________________________________________
void led_init(void)
{
        // 配置复用功能为（GPIO01-09）
        IOMUXC_SetPinMux(IOMUXC_GPIO_AD_B0_09_GPIO01_IO09, 0U);
        // 配置PAD属性：压摆率低速 驱动电阻260 速率100MHz
        IOMUXC_SetPinConfig(IOMUXC_GPIO_AD_B0_09_GPIO1_IO09，
                                IOMUXC_SW_PAD_CTL_PAD_SRE(0)    |
                                IOMUXC_SW_PAD_CTL_PAD_DSE(1)    |
                                IOMUXC_SW_PAD_CTL_PAD_SPEED(2)  |
                                IOMUXC_SW_PAD_CTL_PAD_ODE(0)    |
                                // 如下寄存器在（输入模式）可以不配置
                                IOMUXC_SW_PAD_CTL_PAD_PKE(1)    |
                                IOMUXC_SW_PAD_CTL_PAD_PUE(1)    |
                                IOMUXC_SW_PAD_CTL_PAD_PUS(1)    |
                                IOMUXC_SW_PAD_CTL_PAD_HYS(0)
        );
        // 配置GPIO模式： 输出 默认电平为低 无中断模式
        gpio_pin_config_t led_gpio_pin_config;
        led_gpio_pin_config.direction = kGPIO_DigitalOutput;
        led_gpio_pin_config.outputLogic = 0;
        led_gpio_pin_config.interruptMode = KGPIO_NoIntmode;
        GPIO_PinInit(GPIO1, 9, &led_gpio_pin_config);
}
void led_on(void)
{
        GPIO_PinWrite(GPIO1, 9, 0);
}
void led_offvoid)
{
        GPIO_PinWrite(GPIO1, 9, 1);
}

                   
