//______________________________________________________________________________
//      => 时钟源，CCM，LPCG
//______________________________________________________________________________
        ①时钟源
        // 时钟源的作用非常简单，就是选择时钟输入（外部晶振和内部RC）产生各种时钟源。

        ②CCM（Clock Control Module）
        // CCM控制着RT1050内部根时钟的生成，选择不同的时钟源（PLLs, PFDs, OSC24M）
        // 后再进行相关分频产生各种根时钟。

        ③LPCG(Low Power Clock Gating)
        // 这个部分就是相当于一个时钟开关，控制着各种时钟的关闭和开始。
        
        
        
//______________________________________________________________________________
//      => Clock Control Module 时钟控制模块
//______________________________________________________________________________
        CCM_ANALOG: CCM的模拟部分
        // 它的主要作用为将低频率的时钟输入信号（通常就是外部晶振输入的信号）
        // 经过PLL电路倍频至较高频率然后输出下一个模块CCM_CLK_SWITCHER
        
        CCM_CLK_SWITCHER
        // 该模块接收PLLs的信号，在结合PLLs的旁支电路输出开关时钟信号（pll3_sw_clk)
        // 至下一个模块CCM_CLK_ROOT_GEN。 其中两个PLL配备了4个PFD(Phase Fractional 
        // Dividers)，两者结合可生成多种频率的时钟信号。
        
        CCM_CLK_ROOT_GEN
        // 接收PLL和PFD信号, 然后经过处理（选择和分频）输出根时钟源至LPCG模块。
        
        CCM_HND_SK
        // 该模块负责时钟变换时时钟之间的同步。
        
        CCM_LPM
        // 低功耗模式管理，提供信号至CCM_CLK_LOGIC。
        
        CCM_CLK_LOGIC
        // 接收CCM_LPM和CCM_IP的信号生成时钟管理信号至LPCG模块，可以理解为时钟
        // 的开关信号，控制相关时钟开启和关闭来达到降低功耗的目的。



//______________________________________________________________________________
//      => LPCG (Low Power Clock Gating unit)
//______________________________________________________________________________
// LPCG将根时钟分成各个时钟分支提供给每个模块，其中每个分支都是可控，
// 其控制信号可以来自以下四个来源：
        ①来自CCM的时钟使能信号
        ②来自模块的时钟使能信号
        ③来自复位控制器（SRC）的时钟使能信号
        ④来自FUSE的配置使能。



//______________________________________________________________________________
//      => PLL 锁相环(Phase Locked Loop)
//______________________________________________________________________________
// RT1050内部有7个PLL，分别是PLL1 ~ PLL7, 
// 其中PLL2和PLL3还配备PFD, 它们有着不同的应用，所以它们还分别被称为：
        PLL1 also referenced as ARM PLL         // ARM   -PLL
        PLL2 also referenced as System PLL      // SYSTEM-PLL
        PLL3 also referenced as USB1 PLL        // USB1  -PLL
        PLL4 also referenced as Audio PLL       // AUDIO -PLL
        PLL5 also referenced as Video PLL       // VIDEO -PLL
        PLL6 also referenced as Enether         // ENETER-PLL
        PLL7 also referenced as USB2 PLL        // USB2  -PLL
// 其中PLL还具有启用和禁用功能，PLL禁用和启用通过模拟模块完成。在使用模拟寄存器禁用PLL之前，
// 软件应首先将从特定PLL生成的所有时钟移至另一个源。这个替代源可以是另一个PLL，或者由另一个
// PLL驱动的PFD。又或者，软件可以直接绕过PLL并使用PLL的参考时钟（通常为24 MHz）作为输出时
// 钟，其中绕过PLL是通过设置该PLL的控制寄存器中的模拟BYPASS位来完成的。



//______________________________________________________________________________
//      => PFD (Phase Fractional Dividers)
//______________________________________________________________________________
// 每个PFD输出都会产生相关PLL VCO频率的分数倍数。
// 在输出频率等于Fvco * 18 / N的情况下，N可以在12-35的范围内。
// PFD允许时钟频率改变，而不会强制重新锁定根PLL。



//______________________________________________________________________________
//      => 低功耗模式
//______________________________________________________________________________
// RT1050拥有三种低功耗模式。
        ①RUN Mode
        // 这就是CPU正常运行的模式。
        ②WAIT Mode
        // 在这种模式下，CPU时钟被门控。所有其他时钟都可以正常工作，
        // 并且可以在所有ARM内核处于WFI且L2缓存和SCU处于空闲状态时
        // 通过对其CGR位进行编程来进行门控。
        ③STOP Mode
        // 在这种模式下，所有系统时钟包括CPU、系统总线和所有PLL一起停止。



//______________________________________________________________________________
//      => SysTick配置库函数(core_cm7.h)
//______________________________________________________________________________
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
        // 不可能的重装载值，超出范围
        if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) {
                return (1UL);
        }

        // 设置重装载寄存器
        SysTick->LOAD  = (uint32_t)(ticks - 1UL);

        // 设置中断优先级
        NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL);

        // 设置当前数值寄存器
        SysTick->VAL   = 0UL;

        // 设置系统定时器的时钟源为AHBCLK
        // 使能系统定时器中断
        // 使能定时器
        SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
        return (0UL);
}

/**
* @brief  启动系统滴答定时器 SysTick
* @param  无
* @retval 无
*/
void SysTick_Init(void)
{
        // SystemFrequency / 1000      1ms 中断一次
        // SystemFrequency / 100000    10us中断一次
        // SystemFrequency / 1000000   1us 中断一次

        if (SysTick_Config(SystemCoreClock / 1000)) {
                /* 错误处理 */
                while (1);
        }
}



//______________________________________________________________________________
//      => ARM-PLL( PLL1 )
//      => Analog ARM PLL control Register
//______________________________________________________________________________

CCM_ANALOG_PLL_ARMn
        31      LOCK            // 1 - PLL is currently locked.
                                // 0 - PLL is not currently locked.
        16      BYPASS          // Bypass the PLL
        15:14   BYPASS_CLK_SRC  // 0x0 REF_CLK_24M — Select the 24MHz oscillator as source.
                                // 0x1 CLK1 — Select the CLK1_N / CLK1_P as source.
        13      ENABLE          // Enable the clock output
        12      POWERDOWN       // Powers down the PLL
        6:0     DIV_SELECT      // This field controls the PLL loop divider. 
                Valid range for divider value: 54-108. Fout = Fin * div_select/2.0.

const clock_arm_pll_config_t armPllConfig_BOARD_BootClockRUN = {
        .loopDivider = 88,      // PLL loop divider, Fout = Fin * 44
        .src = 0,               // Bypass clock source, 0 - OSC 24M, 1 - CLK1_P and CLK1_N
};

// 当该 PLL从 24 MHz参考时钟合成低抖动时钟时
// 该 PLL的时钟输出频率范围为 650 MHz至 1.3 GHz
// 输出频率由 7位寄存器字段 CCM_ANALOG_PLL_ARM [DIV_SELECT]选择
        计算公式：
        PLL output frequency = Fref * DIV_SEL / 2
        PLL1 = 24(MHZ)  *  CCM_ANALOG_PLL_ARM[DIV_SELECT] / 2

