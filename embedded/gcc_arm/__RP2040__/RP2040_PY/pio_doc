/*******************************************************************************
        => PIO 可编程输入输出接口
*******************************************************************************/
        // 它可以基于RP2040的设备上创建新的或额外的硬件接口， 
        // 其本质接近FPGA，也就是现场可编程逻辑门陈列，通过简
        // 单的状态机来模拟硬件接口，当然是满足对应的时钟频率。 
        // 例如：你需要使用 单总线协议，VGA，DVI但是RP2040没
        // 有这现成的外设协议，以上场景我们都可以使用PIO自定义
        // 创建我们需要的接口，来满足我们的需求。 不同于软件模拟，
        // PIO并不会占用内核时间，因为每个PIO都有4个独立的“状态机”，
        // 可以实现超高速且可编程的输入输出。 “状态机”可以理解为一个极
        // 简的内核，只能用于处理特定的指令实现特定的功能。
        
        
        
                PC      // 用于指向正在执行的指令地址
                X       //
                Y       //
                ISR     //
                OSR     //
                FIFO    // 数据的推入或拉出
                DMA     // 持续吞吐量高达1字节每系统时钟，若系统时钟为100MHz，每秒最高吞吐量为“100M字”
                IRQ     // PIO总共有8个中断表示位，可以同步状态机或其它用途
                DIV     // 一个16位整数，8位小数的小数时钟分频器





/*******************************************************************************
        => PIO-GPIO 映射
*******************************************************************************/
// 每个“状态机”都可以进行灵活的GPIO映射，映射方式有4种，分别为
                  1 输入映射
                  2 输出映射
                  3 设置映射
                  4 侧置映射



        // 首先我们要知道映射寄存器都是32位的，
        // 如果让其一位对应着一个GPIO引脚，我们应该用32个GPIO引脚对应
        // 即RP2040只有30个GPIO，我们应当假设其存在“32个GPIO”，也就是
        // GPIO30，GPIO31，我们也可以戏称为“消失的引脚”，这个认知很重要的，我们将反复面对它。




1 输入映射
        // 我们可以指定输入GPIO的初始引脚，这个初始引脚在PIO的输入映射中会被视为“引脚0”，
        // 并将其它引脚按照顺序进行（循环）计数，这里就会遇到“消失的引脚”，如果设定GPIO29
        // 为初始引脚也就是引脚0，然后依次递增，然后经过GPIO30和GPIO31，引脚3也就是对应
        // 着“GPIO0”
2 输出映射
        // 输出映射和输入映射接近，但需要设置输出引脚的数量，最高为“32”
3 设置映射
        // 设置和侧置映射与输出映射工作方式相同，但是最多映射5个IO，设置和侧置映射是允许重叠的
4 侧置映射
        // 设置和侧置映射与输出映射工作方式相同，但是最多映射5个IO，设置和侧置映射是允许重叠的



/*******************************************************************************
        => PIO 指令应用
*******************************************************************************/
// 正常情况下，每一条指令执行所需要的时间为1个时钟周期
// 这条指令会将pins设置为“1”，之后延迟“2”个时钟周期，【2】这里面的数据代表延时时间
// 这就是PIO汇编的延时特性，最大延时时间为“31个时钟周期”
        set pins, 1     [2]
        set pins, 0 
  


// 使用侧置，这个程序会模拟SPI发送数据的过程
// 其会不断的将OSR寄存器中的数值（依次）通过pins对应的引脚输出，
// 与此同时侧置引脚会不断的时行电平翻转，实现了“2个时钟周期”输出
// 一位数据， 并输出时钟信号
        .program spi_tx_fast
// 声明使用侧置位数, 这里我们使用“1”位侧置位数，它会占用Side-set/Delay字段的高一位
// 也就是意味着我们的Delay只能占用4位，也就是其数值范围为“0~15”
        .side_set 1
        loop:
                out pins, 1     side 0
                jmp loop        side 1
        


// 程序包装
        .program squarewave
        set pindirs, 1          ; //Set pin to output
        again:
                set pins, 1 [1] ; //Drive pin high ang then delay for one cycle
                set pins, 0     ; //Drive pin low
                jmp again       ; //Set PC to label 'again'


        
// 将一个引脚设置为输出并循环输出占空比为50%，且周期为4个时钟周期的方波
// 当程序运行到.wrap时，程序将会返回到.wrap_target并运行，与前一个程序
// 的区别，就不需要使用jmp指令进行跳转，可以节省一个指令
                set pindirs, 1  ; //Set pin to output
        .wrap_target
                set pins, 1 [1] ; //Drive pin high and then delay for one cycle
                set pins, 0 [1] ; //Drive pin low and then delay for one cycle
        .wrap



/*******************************************************************************
        => PIO 指令
*******************************************************************************/

 //JMP 将达到某些条件的情况下将程序跳转到指定地址
|_____________________________|
|  jmp (condition) target     |
|_____________________________|
//target 目标
        允许数值0~31      //因此PIO只有32条指令空间
//condition 条件
        (!X OR !Y)      //X,Y寄存器为“0”
        (X-- OR Y--)    //X,Y寄存器减“1”大于“0”
        (X != Y)        //X不等于Y
        (PIN)           //输入引脚为高电平
        (!(OSRE))       //输入移位寄存器“OSR”为“0”



 //WAIT 在条件达成前等待
|_____________________________|
|  WAIT                       |
|_____________________________|
WAIT指令有三个参数，分别为Polarity极性， Source源， Index指针
//Polarity      极性是指等待目标出现“0”或“1”
//Source        源指对应等待的目标类型，可以是绝对GPIO，引脚映射后PIN和中断标志IRQ
//Index         指针对应等待的目标编码，



 //IN 将数据存入ISR中
|_____________________________|
|  IN                         |
|_____________________________|
IN      Source,         Bitcount
        |||             |||
        |||             |||
        PINS            读取数据的位数
        X
        Y
        NULL
        ISR
        OSR



 //OUT 将OSR输出到目标   
|_____________________________|
|  OUT                        |
|_____________________________|
OUT     destination,    Bitcount
        |||             |||
        |||             |||
        PINS            对应输出位数
        X
        Y
        NULL
        PINDIRS
        PC
        ISR
        OSR     



 //PUSH 将ISR中内容推送到RX—FIFO中，并清空ISR
|_____________________________|
|  PUSH                       |
|_____________________________|
PUSH (if FULL) (Block/noBlock)
        //它有两个参数，为满和阻塞
        //若为满为“1”，则ISR达到阈值，才进行推送
        //若阻塞为“1”且达到阈值，就会进行将数据推送到ISR中
        否则会等待RXFIFO达到阈值
        //若阻塞为“0”则RXFIFO达不到阈值，则不会进行推送



 //将从TXFIFO数据读出到OSR寄存器中
|_____________________________|
|  PULL                       |
|_____________________________|
PULL (if Empty) (Block/noBlock)
        //若为空为“1”，则TXFIFO达到阈值，OSR才会接收TXFIFO的数据


      
|_____________________________|
|  MOV                        |
|_____________________________|
MOV   destination,    source, (Operation)
//destnation 目标
      PINS      //引脚，映射后的引脚                     
      X         //暂存寄存器   
      Y         //暂存寄存器
      EXEC      //解码寄存器,其作用为从外部读取一条指令并执行
      PC        //PC寄存器
      ISR       //中断标志
//source 源
      PINS      //引脚，映射后的引脚                     
      X         //暂存寄存器   
      Y         //暂存寄存器
      NULL      //空，用于清零
      STATUS    //表示不同的状态，如fifo满或者空
      ISR       //中断标志
      OSR       //移位寄存器
//Operation 扣件
      00        //不改变
      01        //位取反
      10        //位翻转，高低位互换



 //设置或清空中断标识
|_____________________________|
|  IRQ                        |
|_____________________________|
IRQ     (option) irq_num (_rel)
//option 选项
        set     //(默认)，设置
        nowait  //(默认)，不等待清除
        wait    //等待清除后，运行
        clear   //清除
//irq_num 中断标志位
        0~7
        (sm_id + irq_num) % 4 = irq_flag
        若“状态机2”设置中断标识为“0x11”，最后中断值为“0x03”
        (0x02+0x11) % 4 = 0x03
//REL   



|_____________________________|
|  SET                        |
|_____________________________|
SET destination, data
//destination 目标地址
        PINS    //SET映射引脚
        PINDIRS //引脚方向，将第一个映射为GPIO1为输出，“0”为输入
        X       //暂存寄存器，暂存数据
        Y       //暂存寄存器，暂存数据
//data 数据
        数据为写入的数据，这里只能为绝对值（0~31）







/*******************************************************************************
        => Micropython-pio
*******************************************************************************/
//MicroPython引入了一个新的@rp2.Asm_pio装饰器和rp.PIO类


//PIO程序的定义和状态机配置
1 程序定义，包括使用了多少个引脚，使用到的引脚都可以使用装饰器完成
2 程序设置，设置状态机的频率，将引脚映射绑定到某一个引脚并指定一个状态机来运行特定的程序


//@asm_pio装饰器
//装饰器的本质是一个函数， 站其它函数不需要任何代码上的改动的前提下，添加额外的功能
@asm_pio(
        out_init=None,          //输出引脚初始化(rp.PIO.OUT_HIGH rp.PIO.OUT_LOW)
        set_init=None,          //设置引脚初始化(rp.PIO.OUT_HIGH rp.PIO.OUT_LOW)
        sideset_init=None,      //侧置引脚初始化(rp.PIO.OUT_HIGH rp.PIO.OUT_LOW)
        
        in_shiftdir=0,          //数据输入方向(PIO.SHIFT_RIGHT)
                                则OSR的低位先时行输出，若向左移动则高位先时行输出
        out_shiftdir=0,         //数据输出方向(PIO.SHIFT_LEFT)
                                则OSR的高位先进行输出，若向右移动则低位先时行输出
                                
        autopush=False,         //自动推送
        autopull=False,         //自动拉取
        push_thresh=32,         //推送阈值
        pull_thresh=32,         //拉取阈值
        
        fifo_join=0             //
)


//MicroPyton使用PIO是以状态机为单位的，所以我们的函数都是围绕着状态机的
rp2.StateMachine(sm_id, program, freq=-1, *, in_base=None, out_base=None,
        set_base=None, jmp_pin=None, sideset_base=None, in_shiftdir=None,
                out_shifdir=None, push_thresh=None, pull_thresh=None)
sm_id           //使用状态机ID， 0~3为“PIO0”， 4~7为“PIO1”
program         //状态机运行程序
freq            //状态机运行频率，默认为系统时钟频率
in_base         //用于in()指令的第一个引脚
out_base        //用于out()指令的第一个引脚
set_base        //用于set()指令的第一个引脚
jmp_pin         //用于jmp(pin, ...)指令的第一个引脚
sideset_base    //用于侧置的第一个引脚
in_shiftdir     //ISR将移动的方向
out_shiftdir    //OSR将移动的方向
push_thresh     //推送阈值
pull_thresh     //拉取阈值


//active获取或设置状态机当前是否正在运行
//当value不为空，为设置状态机，反之则为获取当前状态机
StateMachine.active([value])

//重新启动状态机，并跳转到程序的起始地址
StateMachine.restart()

//函数EXEC为执行单个PIO指令
StateMachine.exec(instr)

//从状态机RX_FIFO中提取一个字
//如果FIFO为空，它会阻塞直到数据到达（即状态机推送一个字）
//shift为在返回之前右移位数
StateMachine.get(buf=None, shift=0)

//put函数将一个字推送到状态机的TX_FIFO中
//如果TX_FIFO已满，它将阻塞直到有空间（即状态机拉一个字）
//shift在推送之前左移位数
StateMachine.put(value, shift=0)

//RX_FIFO和TX_FIFO函数其作用为读取对应fifo中的字数
StateMachine.rx_fifo()
StateMachine.tx_fifo()



/*******************************************************************************
        => Micropython-pio 例程
*******************************************************************************/
//WS2812B是一款单总线驱动的控制电路与发光电路与一体的智能外控LED光源
//可采用单线输出方式，串接LED使之输出动作同步, 数据协议采用单极性归零码
//因为内部集成控制电路，显示更趋细腻平滑, 数据发送速度可达800Kbps

import time
form machine import Pin
improt rp2

max_lum = 100
r=0
g=0
b=0

//通过adm_pio装饰器初始化PIO
//初始化了侧置引脚, 因为这里只有一个初始化信息，说明侧置引脚的数量为“1”
//数据输出移动方向为由右向左移动
//开启了自动拉取，当OSR达到阈值，自动将TX—FIFO中的数据拉取到OSR中
//拉取阈值为24位，也就是发送数据的长度
@rp2.asm_pio(sideset_init=rp2.PIO.OUT_LOW, out_shifdir=rp2.PIO.SHIFT_LEFT,
        autopull=True, pull_thresh=24)
def ws2812()
        T1 = 2
        T2 = 5
        T3 = 3
        wrap_target()   //程序包装开始
        label("bitloop")
        //将OSR的数据读取“1位”到X寄存器中，并将侧引脚设置为“0”，延时2个时钟周期
        out(x, 1)               .side(0)        [T3 - 1]
        //如果X中的数值为“0”则跳转到标签“do_zero”，反之则顺序执行一下条指令
        //同时将侧置设置为“1”，延时1个时钟周期
        jmp(not_x, "do_zero")   .side(1)        [T1 - 1]
        //如果顺序运行则会跳转标签“bitloop”并同时将侧置设置为“1”，延时4个时钟周期
        //用于表示数据“1”
        jmp("bitloop")          .side(1)        [T2 - 1]
        label("do_zero")
        nop()                   .side(0)        [T2 - 1]
        wrap()          //程序包装结束
        
        
//状态机初始化
sm = rp2.StateMachine(0, ws2812, freq=8_000_000, sideset_base=Pin(4))
//打开状态机
sm.active(1)       

//在循环中，我们不断的改变RGB数值，并通过sm.put()函数将数值传输给TXFIFO
//TXFIFO会自动被状态机拉取到OSR寄存器中，并执行WS2812驱动程序实现不同颜色的呼吸灯
while (Ture)
        for i in range(0, max_lum):
                r=i
                b=max_lum-i
                rgb = (g<<24) | (r<<16) | (b<<8)
                sm.put(rgb)
                time.sleep_ms(10)
        time.sleep_ms(300)
        
        for i in range(0, max_lum):
                g=i
                b=max_lum-i
                rgb = (g<<24) | (r<<16) | (b<<8)
                sm.put(rgb)
                time.sleep_ms(10)
        time.sleep_ms(300)
        
        for i in range(0, max_lum):
                b=i
                b=max_lum-i
                rgb = (g<<24) | (r<<16) | (b<<8)
                sm.put(rgb)
                time.sleep_ms(10)
        time.sleep_ms(300)
