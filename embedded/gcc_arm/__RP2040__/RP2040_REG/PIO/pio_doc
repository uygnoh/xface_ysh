/*******************************************************************************
        => PIO 可编程输入输出接口
*******************************************************************************/
        // 它可以基于RP2040的设备上创建新的或额外的硬件接口， 
        // 其本质接近FPGA，也就是现场可编程逻辑门陈列，通过简
        // 单的状态机来模拟硬件接口，当然是满足对应的时钟频率。 
        // 例如：你需要使用 单总线协议，VGA，DVI但是RP2040没
        // 有这现成的外设协议，以上场景我们都可以使用PIO自定义
        // 创建我们需要的接口，来满足我们的需求。 不同于软件模拟，
        // PIO并不会占用内核时间，因为每个PIO都有4个独立的“状态机”，
        // 可以实现超高速且可编程的输入输出。 “状态机”可以理解为一个极
        // 简的内核，只能用于处理特定的指令实现特定的功能。
        
        
        
        PC      // 用于指向正在执行的指令地址
        X       //
        Y       //
        ISR     //
        OSR     //
        FIFO    // 数据的推入或拉出
        DMA     // 持续吞吐量高达1字每系统时钟，若系统时钟为100MHz，每秒最高吞吐量为“100M字”
        IRQ     // PIO总共有8个中断表示位，可以同步状态机或其它用途
        DIV     // 一个16位整数，8位小数的小数时钟分频器





/*******************************************************************************
        => PIO-GPIO 映射
*******************************************************************************/
// 每个“状态机”都可以进行灵活的GPIO映射，映射方式有4种，分别为
                  1 输入映射
                  2 输出映射
                  3 设置映射
                  4 侧置映射



        // 首先我们要知道映射寄存器都是32位的，
        // 如果让其一位对应着一个GPIO引脚，我们应该用32个GPIO引脚对应
        // 即RP2040只有30个GPIO，我们应当假设其存在“32个GPIO”，也就是
        // GPIO30，GPIO31，我们也可以戏称为“消失的引脚”，这个认知很重要的，我们将反复面对它。




1 输入映射
        // 我们可以指定输入GPIO的初始引脚，这个初始引脚在PIO的输入映射中会被视为“引脚0”，
        // 并将其它引脚按照顺序进行（循环）计数，这里就会遇到“消失的引脚”，如果设定GPIO29
        // 为初始引脚也就是引脚0，然后依次递增，然后经过GPIO30和GPIO31，引脚3也就是对应
        // 着“GPIO0”
2 输出映射
        // 输出映射和输入映射接近，但需要设置输出引脚的数量，最高为“32”
3 设置映射
        // 设置和侧置映射与输出映射工作方式相同，但是最多映射5个IO，设置和侧置映射是允许重叠的
4 侧置映射
        // 设置和侧置映射与输出映射工作方式相同，但是最多映射5个IO，设置和侧置映射是允许重叠的



/*******************************************************************************
        => PIO 指令应用
*******************************************************************************/
// 正常情况下，每一条指令执行所需要的时间为1个时钟周期
// 这条指令会将pins设置为“1”，之后延迟“2”个时钟周期，【2】这里面的数据代表延时时间
// 这就是PIO汇编的延时特性，最大延时时间为“31个时钟周期”
        set pins, 1     [2]
        set pins, 0 
  


// 使用侧置，这个程序会模拟SPI发送数据的过程
// 其会不断的将OSR寄存器中的数值（依次）通过pins对应的引脚输出，
// 与此同时侧置引脚会不断的时行电平翻转，实现了“2个时钟周期”输出
// 一位数据， 并输出时钟信号
// ____________________________________________________________
        .program        spi_tx_fast
        .side_set       1               ; // 声明使用侧置位数, 
                                        ; // 这里我们使用“1”位侧置位数，
                                        ; // 它会占用Side-set/Delay字段的高一位
                                        ; // 也就是意味着我们的Delay只能占用4位，也就是其数值范围为“0~15”
        loop:
                out pins, 1     side 0
                jmp loop        side 1
        


// 程序包装
// ____________________________________________________________
        .program squarewave
        set pindirs, 1          ; //Set pin to output
        again:
                set pins, 1 [1] ; //Drive pin high ang then delay for one cycle
                set pins, 0     ; //Drive pin low
                jmp again       ; //Set PC to label 'again'


        
// 将一个引脚设置为输出并循环输出占空比为50%，且周期为4个时钟周期的方波
// 当程序运行到.wrap时，程序将会返回到.wrap_target并运行，与前一个程序
// 的区别，就不需要使用jmp指令进行跳转，可以节省一个指令
// ____________________________________________________________
                set pindirs, 1  ; //Set pin to output
        .wrap_target
                set pins, 1 [1] ; //Drive pin high and then delay for one cycle
                set pins, 0 [1] ; //Drive pin low and then delay for one cycle
        .wrap



/*******************************************************************************
        => PIO 指令
*******************************************************************************/

// JMP 将达到某些条件的情况下将程序跳转到指定地址
// ____________________________________________________________
        jmp     (condition)     target 

        // target 目标
                允许数值: 0~31           // 因此PIO只有32条指令空间
        // condition 条件
                (!X OR !Y)              // X =  0  |  Y = 0
                (X-- OR Y--)            // X >  0  |  Y > 0
                (X != Y)                // X != Y
                (PIN)                   // 输入引脚为高电平
                (!(OSRE))               // 输出移位寄存器“OSR”为“0”



// WAIT 在条件达成前等待
// ____________________________________________________________
        WAIT

// WAIT指令有三个参数，分别为Polarity极性， Source源， Index指针
        Polarity      极性是指等待目标出现“0”或“1”
        Source        源指对应等待的目标类型，可以是绝对GPIO，引脚映射后PIN和中断标志IRQ
        Index         指针对应等待的目标编码



// IN 将数据存入ISR中
// ____________________________________________________________
        IN
// IN 指令有两个参数（Source源和Bicont位数）
        Source          // PINS, X, Y, NULL, ISR, OSR
        Bitcount        // 读取数据的位数




// OUT 将OSR输出到目标   
// ____________________________________________________________
        OUT
// OUT 指令有两个参数（Source源和Bicont位数）
        Source          // PINS, X, Y, NULL, PINDIRS, PC, ISR, OSR
        Bitcount        // 对应输出位数
 



// PUSH 将ISR中内容推送到RX—FIFO中，并清空ISR
// ____________________________________________________________
        PUSH (if FULL) (Block/noBlock)
        // 它有2个参数， 为满和阻塞
        // 若为满为“1”， 则ISR达到阈值，才进行推送
        // 若阻塞为“1”， 且RX-FIFO达到阈值，则会将
           数据推送到ISR寄存器中， 否则会等待RX-FIFO达到阈值
        // 若阻塞为“0”， 则RX-FIFO达不到阈值，则不会进行推送



// PULL 将从TX-FIFO的数据读出到OSR寄存器中
// ____________________________________________________________
        PULL (if Empty) (Block/noBlock)
        // 若为空为“1”， 则TX-FIFO达到阈值，OSR才会接收TX-FIFO的数据


// MOV 将数据从源移动到目标寄存器
// ____________________________________________________________
        MOV   destination,    source, (Operation)
        // destnation 目标
        PINS      // 引脚，映射后的引脚                     
        X         // 暂存寄存器   
        Y         // 暂存寄存器
        EXEC      // 解码寄存器, 其作用为从外部读取一条指令并执行
        PC        // PC寄存器
        ISR       // 中断标志
        // source 源
        PINS      // 引脚，映射后的引脚                     
        X         // 暂存寄存器   
        Y         // 暂存寄存器
        NULL      // 空，用于清零
        STATUS    // 表示不同的状态，如fifo满或者空
        ISR       // 中断标志
        OSR       // 移位寄存器
        // Operation 条件
        00        // 不改变
        01        // 位取反
        10        // 位翻转，高低位互换



// IRQ 设置或清空中断标识
// ____________________________________________________________
        IRQ     (option) irq_num (_rel)
        //option 选项
        set     // (默认)，设置
        nowait  // (默认)，不等待清除
        wait    // 等待清除后，运行
        clear   // 清除
        //irq_num 中断标志位
        0 ~ 7
        (sm_id + irq_num) % 4 = irq_flag
        若“状态机2”设置中断标识为“0x11”， 最后中断值为“0x03”
        (0x02 + 0x11) % 4 = 0x03




// SET
// ____________________________________________________________
        SET destination, data
        //destination 目标地址
        PINS    // SET映射引脚
        PINDIRS // 引脚方向，将第一个映射为GPIO1为输出，“0”为输入
        X       // 暂存寄存器，暂存数据
        Y       // 暂存寄存器，暂存数据
        //data 数据
        数据为写入的数据，这里只能为绝对值（0~31）



