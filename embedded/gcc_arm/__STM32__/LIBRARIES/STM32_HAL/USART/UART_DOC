/*******************************************************************************
        => USART__结构体__
*******************************************************************************/
typedef struct {
        USART_TypeDef                  *Instance;   // UART寄存器基地址
        UART_InitTypeDef                Init;       // UART通信参数
        uint8_t                        *pTxBuffPtr; // 指向UART发送缓冲区
        uint16_t                        TxXferSize; // UART发送数据大小
        uint16_t                        TxXferCount;// UART发送计数器
        uint8_t                        *pRxBuffPtr; // 指向UART接收缓冲区
        uint16_t                        RxXferSize; // UART接收数据大小
        uint16_t                        RxXferCount;// UART接收计数器
        DMA_HandleTypeDef              *hdmatx;      // UART发送参数设置（DMA模式）
        DMA_HandleTypeDef              *hdmarx;      // UART接收参数设置（DMA模式）
        HAL_LockTypeDef                 Lock;        // 锁定对象
        __IO HAL_UART_StateTypeDef      State;       // UART通信状态
        __IO uint32_t                  ErrorCode;   // UART错误代码
} UART_HandleTypeDef;








/*******************************************************************************
        =>  USART__主程序__
*******************************************************************************/
UART_HandleTypeDef                      huart1;


// 串口1-参数配置
// ____________________________________________________________
void MX_USART1_UART_Init(void)
{
        huart1.Instance                 = USART1;               // 串口号
        huart1.Init.BaudRate            = 115200;               // 波特率
        huart1.Init.WordLength          = UART_WORDLENGTH_8B;   // 8位数据
        huart1.Init.StopBits            = UART_STOPBITS_1;      // 1位停止位
        huart1.Init.Parity              = UART_PARITY_NONE;     // 无校验位
        huart1.Init.Mode                = UART_MODE_TX_RX;      // 发送和接收
        huart1.Init.HwFlowCtl           = UART_HWCONTROL_NONE;  // 无硬件流控
        huart1.Init.OverSampling        = UART_OVERSAMPLING_16; // 过采样率
        if (HAL_UART_DeInit(&huart1) != HAL_OK) {               // 增加程序的稳定性
                Error_Handler();
        }
        if (HAL_UART_Init(&huart1) != HAL_OK) {
                Error_Handler();
        }
}


// 串口1-低层初始化
// ____________________________________________________________
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
        GPIO_InitTypeDef GPIO_InitStruct = {0};
        
        if(uartHandle->Instance==USART1) {
                __HAL_RCC_USART1_CLK_ENABLE();
                __HAL_RCC_GPIOA_CLK_ENABLE();
                /**USART1 GPIO Configuration
                PA9     ------> USART1_TX
                PA10    ------> USART1_RX
                */
                GPIO_InitStruct.Pin = GPIO_PIN_9;
                GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
                GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
                HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

                GPIO_InitStruct.Pin = GPIO_PIN_10;
                GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
                GPIO_InitStruct.Pull = GPIO_NOPULL;
                HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

                // USART中断配置
                HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
                HAL_NVIC_EnableIRQ(USART1_IRQn);
        }
}



/*******************************************************************************
        =>  USART__中断处理流程
*******************************************************************************/
        void USART1_IRQHandler(void)
        {
                HAL_UART_IRQHandler(&huart1);
        }

1) uint8_t rDataBuffer[1];
   while (HAL_UART_Receive_IT(&huart1, rDataBuffer, 1) != HAL_OK);
2) 其中"huart1"是UART1的数据结构，STM32CubeMX配置时会帮我们完成，是全局变量
   "rDataBuffer"是用户自定义用于转存RX接收数据的寄存器；后面的数字"1"表示接收
   数据为 1Byte (目的是接收到1Byte数据就拿出来，实现通过结束符判断数据接收完成，
   而不是指定的字节长度)
3) 当数据发送到RX时，触发中断
   第一步： "HAL_UART_IRQHandler"           // 进入中断处理程序
   第二步： "UART_Receive_IT"               // 在完成接收后。 UART_Receive_IT就会关闭中断
   第三步： "HAL_UART_RxCpltCallback"       // 进入到用户重写的回调函数



/*******************************************************************************
        =>  USART-HAL库__主程序__
*******************************************************************************/

// "-1"表示去掉“\0”，这个字符串结束符
// TX_BUFFER_SIZE == ((sizeof(tx_buffer) / sizeof(*(tx_buffer))) - 1))
#define LED_01()                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2)
#define COUNTOF(__BUFFER__)     (sizeof(__BUFFER__) / sizeof(*(__BUFFER__)))
#define TX_BUFFER_SIZE          (COUNTOF(tx_buffer) - 1)
#define RX_BUFFER_SIZE          TX_BUFFER_SIZE



__IO ITStatus    uart_ready = RESET;
uint8_t         tx_buffer[] = " ****UART_TwoBoards_ComIT**** ";
uint8_t         rx_buffer[RX_BUFFER_SIZE];




int main(void) 
{
        if (HAL_UART_Transmit_IT(&huart1, (uint8_t *)tx_buffer, TX_BUFFER_SIZE) != HAL_OK) {
                Error_Handler();
        }
        while (uart_ready != SET) {
                LED_01();
                HAL_Delay(100);
        }
        //Reset transmission flag
        uart_ready = RESET;


        if (HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_buffer, RX_BUFFER_SIZE) != HAL_OK) {
                Error_Handler();
        }
        while (uart_ready != SET) {
                LED_01();
                HAL_Delay(100);
                break;
        }
        //Reset transmission flag
        uart_ready = RESET;

        while (1) {
                LED_01();
                HAL_Delay(1000);
        }
}



// UART__发送完成（中断）回调函数
// ____________________________________________________________
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
        uart_ready = SET;       // 设置传输完成标志位（SET传输完成）
}



// UART__接收完成（中断）回调函数
// ____________________________________________________________
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
        uart_ready = SET;       // 设置传输完成标志位（SET传输完成）
}



// UART__出错（中断）回调函数
// ____________________________________________________________
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart1)
{
        Error_Handler();
}



// 出错进入此函数
// ____________________________________________________________
static void Error_Handler(void)
{
        __disable_irq();
        while (1) {
                LED_01 = ON;
        }
}


// 比较两个数组中的内容是否一致
//（0）两个数组中的内容相同
//（非0）两个数组中的内容不同
// ____________________________________________________________
static uint16_t buf_cmp(uint8_t *pbuf1, uint8_t *pbuf2, uint16_t buf_len)
{
        while (buf_len--) {
                if ((*pBuffer1) != *pBuffer2) {
                        return buf_len;
                }
                pbuf1++;
                pbuf2++;
        }

        return 0;
}
