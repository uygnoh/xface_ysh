/*******************************************************************************
	=> SDIO__结构体
*******************************************************************************/
// 初始化
typedef struct {
        uint32_t SDIO_ClockEdge;                // 时钟沿(SDIO->CLKCR[NEGEDGE])
        uint32_t SDIO_ClockBypass;              // 旁路时钟(SDIO->CLKCR[BYPASS])
        uint32_t SDIO_ClockPowerSave;           // 节能模式(SDIO->CLKCR[PWRSAV])
        uint32_t SDIO_BusWide;                  // 数据线宽度(SDIO->CLKCR[WIDBUS])
        uint32_t SDIO_HardwareFlowControl;      // 硬件流控(SDIO->CLKCR[HWFC_EN])
        uint8_t  SDIO_ClockDiv;                 // 时钟分频(SDIO->CLKCR[CLKDIV+2])
} SDIO_InitTypeDef;
// 命令初始化
typedef struct {
        uint32_t SDIO_Argument;                 // 命令参数
        uint32_t SDIO_CmdIndex;                 // 命令号
        uint32_t SDIO_Response;                 // 响应类型
        uint32_t SDIO_Wait;                     // 等待使能
        uint32_t SDIO_CPSM;                     // 命令路径状态机
} SDIO_CmdInitTypeDef;
// 数据初始化
typedef struct {
        uint32_t SDIO_DataTimOut;               // 数据传输超时
        uint32_t SDIO_DataLength;               // 数据长度
        uint32_t SDIO_DataBlockSize;            // 数据块大小
        uint32_t SDIO_TransferDir;              // 数据传输方向
        uint32_t SDIO_TransferMode;             // 数据传输模式
        uint32_t SDIO_DPSM;                     // 数据路径状态机
} SDIO_DataInitTypeDef;



/*******************************************************************************
        => STM32F407__SDIO__PIN__
*******************************************************************************/
        +_______________________________________+
        | Pin# | Name    | Description          |
        |______|_________|______________________|
        | 1    | CD/DAT3 | Card Detect/         |
        |      |         | Data Line [Bit 3]    |
        |______|_________|______________________|______PC11
        | 2    | CMD     | Command/Response     |
        |______|_________|______________________|______PD2
        | 3    | VSS1    | Supply voltage groud |
        |______|_________|______________________|
        | 4    | VDD     | Supply voltage       |
        |______|_________|______________________|
        | 5    | CLK     | Clock                |
        |______|_________|______________________|______PC12
        | 6    | VSS2    | Supply voltage groud |
        |______|_________|______________________|
        | 7    | DAT0    | Data Line [Bit 0]    |
        |______|_________|______________________|______PC8
        | 8    | DAT1    | Data Line [Bit 1]    |
        |______|_________|______________________|______PC9
        | 9    | DAT2    | Data Line [Bit 2]    |
        |______|_________|______________________|______PC10



        // SDCard 引脚（共9根）
        // ____________________________________________________________
        // DAT0, DAT1, DAT2, DAT3, CLK, CMD, VDD, GND
        // 在识别SD卡阶段（只使用DAT0）这一根数据线， 在识别了SD卡后， 可以继续
        // 使用 1 根数据线来传输， 但是为了提高传输速度， 可设置为 4 根数据线传输
        
        
        // SDCard CLK 时钟线
        // ____________________________________________________________
        // 当SD卡处于（识别模式）时， 使用FOP时钟频率， FOP最高为 400KHz
        // 当SD卡处于（数据传输）时， 使用FPP时钟频率， FPP最高为 50MHz
        
        
        // SDCard CMD（命令引脚）， 传输命令和响应
        // ____________________________________________________________
        // 命令： 主机发送给SD卡
        // 响应： SD卡收到命令后， 对命令的回复
        
        
        // SDCard 电源
        // ____________________________________________________________
        // 主机与SD卡通信， 当SD卡处于（卡识别模式）时， 主机（SDIO）外设需要
        // 将主机SDIO接口支持的电压范围发送给SD卡， 询问是否能够工作在这个电压
        // 范围内， 其实就是询问电压是否匹配
        
        
        // 存储单元， nandflash存储
        // ____________________________________________________________
        // nandflash存储单元是按照（块）来组织的， 一般情况下每块为（512Byte）
        
        
        
/*******************************************************************************
	=> SDCard__内部寄存器
*******************************************************************************/
        // SDCard 为（NAND-FLASH）
        // ____________________________________________________________
        OCR[ 31:0]      // Operation conditions register
                        // 工作条件寄存器， 记录SD卡工作电压
                        // SD卡容量， Busy位
        CID[127:0]      // Card identification number
                        // 制造商编号， 制造日期， 产品序列号， 版本修订号 ...
        RCA[ 15:0]      // Relative card address
                        // 相对地址寄存器
        DSR[ 15:0]      // Driver Stage Register
                        // SD卡驱动寄存器， 主机通过配置这个寄存器中传输速率
                        // 所挂的卡数， 提高SD卡的总线速度
        CSD[127:0]      // Card Specific Data
                        // 这个寄存器放了SD卡的限制， 读写操作SD卡时不能超过这些限制
        SCR[ 63:0]      // SD configuration Register
                        // SD卡配置寄存器， 存放了SD卡的一些很有特性的信息
        SSR[511:0]      // SD Status Register
                        、、 SSR用于记录SD卡的专有信息
        CSR[ 31:0]      // Card Status Register
                        、、 CSR主要记录SD卡对于命令的执行结果
                        // SD卡工作模式
                        1. 无效模式
                           无效状态（Inactive State）
                        2. 卡识别模式（Card identification mode）
                           空闲状态（Idle State）
                           准备状态（Ready State）
                           识别状态（Identification State）
                        3. 数据传输模式（Data transfer mode）
                           待机状态（Stand-by State）
                           传输状态（Transfer State）
                           发送数据状态（Sending-data State）
                           接收数据状态（Receive-data State）
                           编程状态（Programming State）
                           断开连接状态（Disconnect State）




/*******************************************************************************
        => STM32__SDIO
*******************************************************************************/
// SD卡常规数据包（4线传输如下）
// 它先发低字节， 再发高字节（每个字节则是先发高位， 再发低位）
// ____________________________________________________________
        起始位     第1个字节数据    第2个字节数据   第N个字节数据    校验    停止位
DATA3     0       b(7)   b(3)     b(7)   b(3)   ...........     CRC      1
DATA2     0       b(6)   b(2)     b(6)   b(2)   ...........     CRC      1
DATA1     0       b(5)   b(1)     b(5)   b(1)   ...........     CRC      1
DATA0     0       b(4)   b(0)     b(4)   b(0)   ...........     CRC      1



// SD卡宽位数据包格式
// SSR寄存器共人（512bit）， 在主机发送（ACMD13）命令实现
// ____________________________________________________________
        起始位     第1个字节数据        第2个字节数据                    第N个字节数据    校验    停止位
DATA3     0       b(511)   b(507)     b(503)   b(499)   ...........  b(7)   b(3)    CRC      1
DATA2     0       b(510)   b(506)     b(502)   b(498)   ...........  b(6)   b(2)    CRC      1
DATA1     0       b(509)   b(505)     b(501)   b(497)   ...........  b(5)   b(1)    CRC      1
DATA0     0       b(508)   b(504)     b(500)   b(496)   ...........  b(4)   b(0)    CRC      1



/*******************************************************************************
        => STM32__SDIO__命令
*******************************************************************************/
// SDIO命令都是由主机发送的
// SDIO命令格式固定为(48bit)，都是通过（CMD线）连续传输的，数据线不参与
// ____________________________________________________________
    起始位   传输标志  （命令+地址信息/参数）   CRC7校验    终止位
位数  1        1        CONTENT（6+32）        7          1
// ____________________________________________________________
1. 起始位和终止位
        // 命令的主体包含在起始位与终止位之间， 
        // 它们都包含一个数据位（起始位为0， 终止位为1）
2. 传输标志
        // 用于区分传输方向
        // 该位为（1）表示命令， 方向为主机传输到SD卡
        // 该位为（0）表示响应， 方向为SD卡传输下主机
3. 命令主体内容
        // 包括命令， 地址信息、参数， CRC校验
4. 命令号码
        // 它固定占用（6bit），所以总共有64个命令（CMD0 - CMD63）
        // 每个命令都有特定的用途， 部分命令不适用于SD卡操作， 只是
        // 专门用于MMC卡或SD I/O卡
5. 地址/参数
        // 每个命令有（32bit）地址信息/参数用于命令附加内容， 例如：
        // 广播命令没有地址信息， 这（32bit）用于指定参数， 而寻址命令
        // 这（32bit）用于指定目标SD卡的地址
6. CRC7校验
        // 长度为（7bit）的校验码，用于校验传输内容的正确性



// SD卡命令有 4 种
// ____________________________________________________________
        1) 无响应广播命令（bc），发送到所有卡，不返回任务响应
        2) 带响应广播命令（bcr），发送到所有卡，同时接收来自所有卡的响应
        3) 寻址命令（ac），发送到选定卡，DATA线无数据传输
        4) 寻址数据传输命令（adtc），发送到选定卡，DATA线有数据传输


__1__   // 常规命令（GEN_CMD）
__2__   // 特定命令（ACMD）
           如果要使用（特定命令ACMD），例如ACMD6， 需要在发送该命令之前先发送（CMD55）命令
           告知SD卡接下来的命令为（特定应用命令ACMD），（CMD55）命令只对紧接的第一个命令有效
           SD卡如果检测到（CMD55）之后的第一条命令为（ACMD）命令，则执行其特定应用功能，如果
           检测发现不是（ACMD）命令，则执行标准命令
__3__   // SDIO总共有（7）类响应类型（代号：R1~R7）
           其中SD卡没有（R4，R5）类型响应
           与命令一样（响应也是通过CMD线传输）
           短响应（48  bit）长度
           长响应（136 bit）长度，只有（R2类型）是长响应
__4__   // 卡识别模式
        // 卡传输模式
        
        






/*******************************************************************************
        => STM32F4__SD_CARD
*******************************************************************************/
// SD 卡容量
// ____________________________________________________________
        SDSC (Standard Capacity SD)     // 标准容量SD卡
                < 2  GB
        SDHC (High Capacity SD    )     // 高容量SD卡
                < 32 GB
        SDXC (SD EXtended Capacity)     // 超大容量SD卡
                < 2  TB








