/*******************************************************************************
        => fatfs        http://elm-chan.org/fsw/ff/00index_e.html
*******************************************************************************/
// 当需要记录（"STM32_SPI_FLASH"）这个字符串时， 可以把这些文字转换成（ASCII码），
// 存储在数组中， 然后调用（spi_write_buffer()函数），把数组内容写入SPI-Flash芯片
// 指定的地址上， 在需要的时候从该地址再把数据读取出来， 再对读出的数据以（ASCII码）
// 的格式进行解读。
        1. 难以记录有效数据的位置
        2. 难以确定存储介质的剩余空间
        3. 不明确以何种格式来解读
        
        
// FATFS 主体
// ____________________________________________________________
        ff.c            // 不需要修改
        ff.h            // 不需要修改
        integer.h       // 不需要修改
        diskio.h        // 不需要修改
        diskio.c        // 修改（底层驱动）
        ffconf.h        // 修改（配置文件）
        
        

/*******************************************************************************
        => FATFS（W25Q64） -> 8MByte
        => http://elm-chan.org/fsw/ff/00index_e.html
*******************************************************************************/

        // FATFS 文件系统空间分配
        // (前2MByte存储空间，留给非文件系统) + (后6MByte留给FATFS文件系统)
        // ____________________________________________________________
        1. 2MByte      / 4096 :
           2*1024*1024 / 4096 = 512  （扇区）
        2. 6MByte      / 4096 :
           6*1024*1024 / 4096 = 1536 （扇区）
        1536 * 4096 / 1024 / 1024 = 6(MByte)

        
        
        // W25Q64 = 8MByte
        // ____________________________________________________________
        1. 扇区大小为（4096）
        2. 8MByte      / 4096 :
           8*1024*1024 / 4096 = 2048 （扇区）
        3. 2048 * 4096 / 1024 / 1024 = 8(MByte)



//______________________________________________________________________________
//      => FATFS_配置
//______________________________________________________________________________
#define FF_VOLUMES		2       // 系统中有多少个存储设备
#define _MIN_SS                 512     // 扇区（最小）大小
#define _MAX_SS                 4096    // 扇区（最大）大小
#define _USE_MKFS               1       // 文件系统格式化
#define _FS_MINIMIZE            0       // 开启（f_lseek()）

// 支持长文件名和中文
#define _CODE_PAGE              936     // 中文字符集
#define _USE_LFN                1       // 存储在全局变量中
#define _USE_MAX_LFN            255     //




/*******************************************************************************
        => 例程
*******************************************************************************/
FATFS fs_obj;                                   //定义一个全局变量，存储在堆中
FIL *fp;                                        //文件句柄
const char write_data[]     = "hello, world!";  //要写入的数据
const char read_data[4096]  = "";               //读出数据存储位置
UINT write_num_byte;                            //写入了多少个字节
UINT read_num_byte;                             //读到了多少个字节
int main(void)
{
        FRESULT res;

        // 挂载SPI_FLASH文件系统
        // ____________________________________________________
        // 参数1： 文件系统结构体
        // 参数2： “1:”代表SPI_FLASH存储设备
        // 参数3： “1”代表立即挂载
        res = f_mount(&fs_obj, "1:", 1);
        printf("res = %d\n", res);
        
        
        // SPI_FLASH存储器格式化
        // ____________________________________________________
        if (res == FR_NO_FILESYSTEM) {
                f_mkfs("1:", 0, 0);             // 创建文件系统
                res = f_mount(NULL, "1:", 1);   // 取消挂载文件系统
                res = f_mount(&fs_obj, "1:", 1);// 挂载文件系统
        }
        
        res = f_open(&fp, "1:test.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
        if (res == FR_OK) {
                res = f_write(&fp, write_data, sizeof(write_data), &write_num_byte);
                if (res == FR_OK) {
                        // 把光标重新定位到开头
                        f_lseek(&fp, 0);
                        res = f_read(&fp, read_data, f_size(&fp), &read_num_byte);
                        if (res == FR_OK)
                                printf("文件内容: %s", read_data);
                }
        }
        f_close(&fp);
}
