//______________________________________________________________________________
//      => ARM_COREX_M
//______________________________________________________________________________
Year      Processor      Architecture
2005      Cortex-M3       armv7-M
2007      Cortex-M1       armv6-M
2009      Cortex-M0       armv6-M
2009      Cortex-M4       armv7-M
2012      Cortex-M0+      armv6-M
2014      Cortex-M7       armv7-M

2016      Cortex-M23      armv8-M
2016      Cortex-M33      armv8-M
2019      Cortex-M55      armv8-M



// IPSR
// ____________________________________________________________
        8:0     // if (8:0 == 0) { Thread  mode }
        8:0     // if (8:0 != 0) { Handler mode }



// ____________________________________________________________
R15(=PC) Program Counter// 执行指令的位置
R14(=LR) Link Register  // 处理程序返回
R13(=SP) Stack Pointer  // 指向堆叠顶端
R0 - R3                 // 使用函数的参数传递，R0存储返回值
// 在Thumb状态下， RetunAddress最后一位必须为（1），这是一个历史包袱



//______________________________________________________________________________
//      => MLS
//      => MLA
        Armv7-M (Encoding T1)
        MLS<c>  <Rd>, <Rn>, <Rm>, <Ra>
//______________________________________________________________________________

        uint32_t tmp;
        R0 = 0; R1 = 1; R2 = 2; R3 = 3; // 初始化寄存器
        tmp = Arm_Cortex_M(0, 1, 2, 3);
                                        // R0 保存返回结果值
        R0 = 6; R1 = 1; R2 = 2; R3 = 3; // 计算结果
        int Arm_Cortex_M(int R0, char R1, short R2, long R3) {
                R0 -= R0 * R1; // mls r0, r0, r1, r0    FB00|0011
                R0 += R2 * R3; // mla r0, r3, r2, r0;   FB03|0002
                return R0;    // bx r14;               4700
        }
        


        r0 -= r0 * r1;
        MLS     R0, R0, R1, R0;         // FB00 | 0011
|----------------------------|-----------------------------|
|  15:11   10:7   6:4   3:0  |  15:12  11:8   7:4    3:0   |
|  11111   0110   000   Rn   |   Ra     Rd    0001    Rm   |
|----------------------------|-----------------------------|
                     Rn          Ra    Rd        Rm
      1111 1011 0000 0000    |   0000 0000 0001 0001
                     FB00    |   0011
                     

        r0 += r2 * r3;
        MLS     R0, R3, R2, R0
|----------------------------|-----------------------------|
|  15:11   10:7   6:4   3:0  |  15:12  11:8   7:4    3:0   |
|  11111   0110   000   Rn   |   Ra     Rd    0001    Rm   |
|----------------------------|-----------------------------|
                        3        0      0             2
                     0xFB03  |  0x0002
                     
                     
        return (r0);
        BX      R14  
|-----------------------------------------|
| 15:10  |  9:8  |   7  |   6:3  |   2:0  |
| 010001 |  11   |   0  |   Rm   |   000  |
|-----------------------------------------|
                          14= 1110b
                    0x4770 
