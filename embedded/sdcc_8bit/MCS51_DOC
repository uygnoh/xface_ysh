/*******************************************************************************
        => MCS-51时序
*******************************************************************************/
// 一个机器周期是振荡频率的12分频，含有6个状态时时间S， 依次表示
// 为S1~S6, 由于一个状态时间S双包括2个节拍P， 因此一个机器周期
// 共有12个节拍。 分别记作：
状态时间（1）   状态时间（2）   状态时间（3）   状态时间（4）  状态时间（5）  状态时间（6）
____________|______________|_____________|_____________|_____________|__________
(S1P1, S1P2), (S2P1, S2P2), (S3P1, S3P2), (S4P1, S4P2), (S5P1, S5P2), (S6P1, S6P2)

 
// MCS-51 节拍
//_____________________________________________________________
                1个振荡周期  = 1个节拍 
                1个状态时间  = 2个节拍(p1 p2) 
                1个机器周期  = 6个状态时间 
                1个机器周期  = 12个振荡周期 
                1个机器周期  = 12个节拍 
//_____________________________________________________________


                 
// MCS-51 时序之间的关系
//_____________________________________________________________
                振荡周期: Oscillation period = 1  个节拍
                状态时间: Status time        = 2  个节拍
                有效信号: Effective signal   = 6  个节拍 
                机器周期: Machine cycle      = 12 个节拍 
                地址锁存: Address Latch (ALE)
//_____________________________________________________________



/*******************************************************************************
        => MCS-51存储系统
*******************************************************************************/
//_____________________________________________________________
// 00H~1FH 通用寄存器区（R0~R7）分为4组，它是由PSW寄存器位(RS1,RS0)
// 设置。 任意时刻CPU只能使用其中一组寄存器， （00, 01, 10, 11）
//      MOV  A, R0      等价      MOV  A, 00H
//_____________________________________________________________
_________________________________________________________________
|   0   |  07  |  06  |  05  |  04  |  03  |  02  |  01  |  00  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   1   |  0F  |  0E  |  0D  |  0C  |  0B  |  0A  |  09  |  08  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   2   |  17  |  16  |  15  |  14  |  13  |  12  |  11  |  10  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   3   |  1F  |  1E  |  1D  |  1C  |  1B  |  1A  |  19  | 18   |
|_______|______|______|______|______|______|______|______|______|



//_____________________________________________________________
// 20H~2FH 位地址区（共16个单元）, 位地址: 00H~7FH
//      CLR     00H     //清除位地址(00H)单元
//_____________________________________________________________
_________________________________________________________________
|   0   |  27  |  26  |  25  |  24  |  23  |  22  |  21  |  20  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   1   |  2F  |  2E  |  2D  |  2C  |  2B  |  2A  |  29  |  28  |
|_______|______|______|______|______|______|______|______|______|



//_____________________________________________________________
// 30H~7FH 为用户RAM区(数据缓冲区, 堆栈区, 共有80个单元)
//      MOV     A, 30H  //将30H地址单元中的内容送入A中
//_____________________________________________________________
_________________________________________________________________
|   0   |  37  |  36  |  35  |  34  |  33  |  32  |  31  |  30  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   1   |  3F  |  3E  |  3D  |  3C  |  3B  |  3A  |  39  |  38  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   2   |  47  |  46  |  45  |  44  |  43  |  42  |  41  |  40  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   3   |  4F  |  4E  |  4D  |  4C  |  4B  |  4A  |  49  |  48  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   4   |  57  |  56  |  55  |  54  |  53  |  52  |  51  |  50  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   5   |  5F  |  5E  |  5D  |  5C  |  5B  |  5A  |  59  |  58  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   6   |  67  |  66  |  65  |  64  |  63  |  62  |  61  |  60  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   7   |  6F  |  6E  |  6D  |  6C  |  6B  |  6A  |  69  |  68  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   8   |  77  |  76  |  75  |  74  |  73  |  72  |  71  |  70  |
|_______|______|______|______|______|______|______|______|______|
_________________________________________________________________
|   9   |  7F  |  7E  |  7D  |  7C  |  7B  |  7A  |  79  |  78  |
|_______|______|______|______|______|______|______|______|______|



//_____________________________________________________________
// 内部程序存储器ROM
//_____________________________________________________________
        1 0000H~0002H   // 系统启动单元，单片机复位后(PC=0000H) 
        2 0003H~000AH   // 外部中断0地址区 
        3 000BH~0012H   // 定时/计数器0中断地址区 
        4 0013H~001AH   // 外部中断1地址区 
        5 001BH~0022H   // 定时/计数器1中断地址区 
        6 0023H~002AH   // 串行中断地址区 

        EA = 1          // 使用内部程序存储区ROM  
        EA = 0          // 使用外部程序存储区ROM 



/*******************************************************************************
        => MCS-51 寻址方式
        (寻址)指的是->单片机的存储空间中寻找指令规定的操作数据的地址，并将操作数据取出来
*******************************************************************************/
        Rn              // 当前寄存器组的8个通用寄存器R0~R7
        Ri              // 用作间接寻址的寄存器，i = 0, 1 
        direct          // 8位直接地址
        rel             // 8位有符号立即数
        #data           // 8位立即数
        #data16         // 16位立即数
        addr16          // 16位目的地址
        addr11          // 11位目的地址
        rel             // 相对转移指令中的偏移量,为8位有符号补码数
        DPTR            // 数据指针
        bit             // 内部RAM（包括专用寄存器）中的直接寻址位
        A               // 累加器
        B               // 寄存器B
        C               // 进位标志位，它是布尔处理机的累加器，也称之为累加位 
        @               // 间址寄存器的前缀标志  
        /               // 加在位地址的前面，表示对该位状态取反 




//_____________________________________________________________
        MOV     A, Rn           // 寄存器寻址方式
        MOV     A, direct       // 直接寻址方式
                                // 指令中操作数直接以单元地址的形式给出

        MOV     A, @Ri          // 寄存器间接寻址方式
                                // 寄存器中存放的是操作数的地址，
                                // 即操作数是通过寄存器间接得到的
                                // 内部RAM低128单元，间址寄存器： i = 0, 1
                                
        MOV     A, #data8       // 立即寻址方式
        MOV     DPTR, #data16   // 立即寻址方式

        MOV     A,  @A+DPTR     // 变址寻址方式 -> 访问程序存储区ROM
        MOVC    A,  @A+PC         
                                // 是以DPTR或PC作基址寄存器，以累加器A作变址寄存器，
                                // 并以两者内容相加形成的16位地址作为操作数地址，以
                                // 达到访问程序存储区中数据表格的目的。


        MOV   C,  3AH           // 位寻址方式
                                // 查寻片内RAM单元中的 20H~2FH，
                                // 位地址（00H~7FH） 和允许进行位操作
                                // 的专用寄存器中的位地址，从该地址中取出位数据进行操作。
        SETB  D5H               // 
        SETB  F0                //




        JZ   rel                // 相对寻址方式
                                // 是为了解决程序转移而专门设置的。
        转移目的地址 = 转移指令地址 + 转移指令字节数 + rel
//_____________________________________________________________



/*******************************************************************************
        => MCS-51指令系统
*******************************************************************************/
// MCS-51单片机指令系统共有基本指令111条，分为五大类
//_____________________________________________________________
        1 数据传送类指令( 29 )
        2 算术运算类指令( 24 )
        3 逻辑运算及移位类指令( 24 )
        4 控制转移类指令( 17 )
        5 位操作类指令( 17 )


// MCS-51单片机指令系统以字节数划分
//_____________________________________________________________
        1 单字节指令 49 条
        2 双字节指令 45 条
        3 三字节指令 17 条


// MCS-51单片机指令系统以时间划分
//_____________________________________________________________
        1 单周期指令 64 条
        2 双周期指令 45 条
        3 四周期指令 2  条（乘除指令）





// 数据交换指令
//_____________________________________________________________
        1 //整字节交换指令
          //字节单元与累加器A进行8位数据交换
        2 //半字节交换指令
          //字节单元与累加器A进行低4位的半字节数据交换
        3 //累加器高低半字节交换指令



// 堆栈操作指令组
//_____________________________________________________________
        PUSH
        POP


// 算术运算指令 //
//_____________________________________________________________
        ADD     // 加法指令
        ADDC    // 带进位的加法指令
        SUBC    // 带进位的减法指令
        INC     // 加1指令
        DEC     // 减1指令
        DA      // 10进制调整指令

// 乘法指令
// (A)=50H (B)=0A0H 即乘积为3200H
// 结果：(B)=32H, (A)=00H
// 标志：CY=0 
// 标志：OV=1（用来指示这个乘积是8位还是16位数据）
        MUL     AB



// 除法指令
// 被除数放在（A），除数放在（B），商放在（A），余数（B）
// 标志：当除数为0（B=0）时，OV置1，表明除法没有意义
        DIV     AB





// 移位运算指令
//_____________________________________________________________
        RL      A       // 循环左移
        RR      A       // 循环右移
        RLC     A       // 带进位循环左移
        RRC     A       // 带进位循环右移




// 转移控制指令
//_____________________________________________________________
        LJMP    addr16  // 长转移指令，转移范围 ROM-64KB
        SJMP    rel     // 短转移指令, rel对应的是8位立即数

    
    
// 绝对转移指令，转移范围:PC+2后的当前地址的2K
//_____________________________________________________________
__________________________________
| AJMP    addr11                 |
|________________________________|________________________   
|//程序中2070H地址单元有绝对转移指令                           \
|       2070:   AJMP    16AH                              |
|//取出绝对转移指令后( PC = 2070H + 2 = 2072H )               \
|__________________________________________________________|
| 0 0 1 0 - 0 0 0 0 - 0 1 1 1 - 0 0 1 0 | //PC=2072H       |
|             0 0 1 - 0 1 1 0 - 1 0 1 0 | //绝对地址=16AH   |
| 0 0 1 0 - 0 0 0 1 - 0 1 1 0 - 1 0 1 0 | //PC=216AH       |
|_______________________________________|__________________|



// 数值比较转移指令
//_____________________________________________________________
        CJNE  A, #data, rel
        CJNE  Rn, #data, rel
        CJNE  @Ri, #data, rel


        DJNZ  Rn, rel           // 减1条件转移指令
                                // 先对寄存器Rn的内容减1，再判断寄存器Rn的内容
                                // 是否为“0”, 如果寄存器Rn的内容不等于“0”，则发生转移
        DJNZ  direct, rel       //直接寻址单元减1条件转移指令



// 子程序调用与返回指令
//_____________________________________________________________
        ACALL addr11            // 绝对调用指令
                                // 子程序调用范围是2KB
        LCALL addr16            // 长调用指令
                                // 子程序调用范围是64KB
        RET                     // 子程序返回使用
        RETI                    // 中断服务子程序返回使用



// 位运算指令
//_____________________________________________________________
        // 位处理器的硬件资源
        1 位累加器C，它是位传送的中心。 位处理使用进位标志（CY）
          作为累加器把ACC称之为字节累加器，而把CY称之为位累加器（C）
        2 内部RAM位寻址区的128可寻址位（00H~7FH）
        3 专用寄存器中的83位可寻址位（包括输入，输出口）
        
        MOV     C, bit          // CY  = bit
        MOV     bit, C          // bit = CY


        // 将20H位的内容传送5AH位, 以位累加器CY为中转
        MOV   10H, C            // 暂存CY内容到10H位
        MOV   C, 20H            // 20H位送CY
        MOV   5AH, C            // 20H位通过CY送5AH位
        MOV   C, 10H            // 恢复CY内容


        // 对位累加器或可寻址位进行，清零，置位，取反
        CLR   bit
        SET   bit
        CPL   bit


        // 位逻辑运算指令
        ANL   C, bit
        ORL   C, bit
        ANL   C, /bit
        ORL   C, /bit



        // 位条件转移指令
        JC    rel               // C=1, 转移
        JNC   rel               // C=0, 转移
        JB    bit, rel          // bit=1, 转移
        JNB   bit, rel          // bit=0, 转移
        JBC   bit, rel          // bit=1, bit位清0并转移





