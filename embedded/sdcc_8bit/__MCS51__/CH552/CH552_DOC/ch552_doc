/*******************************************************************************
        => CH552 单片机开发环境
*******************************************************************************/
sudo apt-get install sdcc
sudo apt-get install codeblocks


// codeblock创建工程
//_________________________________________________________
File ->New ->Project ->mcs51 project



/*******************************************************************************
        => CH552__安装isp写入工具__librech551
*******************************************************************************/
//增加usb权限
//为了普通用户也能使用usb写入,可以新建个rules文件修改usb权限
//_________________________________________________________
sudo vi /etc/udev/rules.d/99-wchisp.rules
//文件内容如下:
ATTRS{idVendor}=="4348", ATTRS{idProduct}=="55e0", MODE="0666"
//使规则生效:
sudo udevadm control --reload-rules
sudo udevadm trigger



/*******************************************************************************
        => CH552__GPIO__
*******************************************************************************/
//Pn端口方向控制和上拉使能寄存器
//_________________________________________________________
Pn_DIR_PU       //在推挽输出模式下（Pn.x）引脚为方向控制
                  （0-输入，1-输出）
                //在开漏输出模式下（Pn.x）引脚为上拉电阻使能控制
                  （0-禁止上拉电阻，1-使能上拉电阻）
|_____________________________.
|  Pn_MOD_OC   |   Pn_DIR_PU  |
|    0         |     0        | //高阻输入模式，引脚上没有上拉电阻
|    0         |     1        | //推挽输出模式（具有对称驱动能力，可以输出或吸收较大电流）
|    1         |     0        | //开漏输出模式（引脚上没有上拉电阻）
|    1         |     1        | //准双向模式（标准8051），开漏输出模式，支持输入
|______________|______________|   引脚上有上拉电阻（高电平输出比较弱，低电平输出正常）



/*******************************************************************************
        => CH552__MAIN__
*******************************************************************************/
#include "8051.h"
#include "ch552.h"
/*____________________________.
|  Pn_MOD_OC   |   Pn_DIR_PU  |
|    0         |     0        | 高阻输入模式（引脚上没有上拉电阻）
|    0         |     1        | 推挽输出模式（具有对称驱动能力，可以输出或吸收较大电流）
|    1         |     0        | 开漏输出模式（引脚上没有上拉电阻）
|    1         |     1        | 准双向口模式（标准8051）
|______________|______________*/



/*******************************************************************************
        => CH552__GPIO__
*******************************************************************************/
int main(void)
{       
        P1_MOD_OC = 0b01111111;
        P1_DIR_PU = 0b01111111;
        while (1) {
                P1_7 = 0; P1_6 = 0;
                delay_ms(100);
                P1_7 = 1; P1_6 = 1;
                delay_ms(100);
        }
        return 0;
}



/*******************************************************************************
        => CH552__PWM__
*******************************************************************************/
PWM_CK_SE       (0x9E)          //PWM 时钟分频设置寄存器
PWM_CTRL        (0x9D)          //PWM 控制寄存器
PWM_DATA1       (0x9C)          //PWM1数据寄存器
PWM_DATA2       (0x9B)          //PWM2数据寄存器


                              6 * 1000 * 1000 Hz
PWM周期（默认时钟为6MHz）  = ___________________________
                                 预分频  * 256


int main(void)
{
        //设置P3.1和P3.4为推挽输出（PWM模式）
        P1_MOD_OC &= ~BIT_05;
        P1_DIR_PU  =  BIT_05;
        P3_MOD_OC &= ~BIT_04;
        P3_DIR_PU  =  BIT_04;
        //PWM控制寄存器
        PWM_CTRL  = 0b00011100;
        //设置预分频 
        PWM_CK_SE = 24;
        
        while (1) {
                PWM_DATA1 = 10;
                PWM_DATA2 = 250;
                delay_ms(100);
                
                PWM_DATA1 = 100;
                PWM_DATA2 = 100;
                delay_ms(100);
        }
}



/*******************************************************************************
        => CH552__ADC__
*******************************************************************************/
ADC_CTRL        (0x80)          //ADC控制寄存器
ADC_CFG         (0x9A)          //ADC配置寄存器
ADC_DATA        (0x9F)          //ADC数据寄存器


// ADC_CFG
//_____________________________________________________________
ADC_CHAN1       ADC_CHAN0       //ADC输入通道
   0               0            AIN0 （P1.1）
   0               1            AIN1 （P1.4）
   1               0            AIN2 （P1.5）
   1               1            AIN3 （P3.2）



int main(void)
{
        //P1.1 高阻输入
        P1_MOD_OC = ~BIT_01;
        P1_DIR_PU = ~BIT_01;
        
        unsigned char adc_data;
        while (1) {
                ADC_CFG = 0x80;         //开启ADC电源
                ADC_CHAN1 = 0;          //选择P1.1输入通道
                ADC_CHAN0 = 0;
                ADC_START = 1;          //启动ADC转换
                while (ADC_START);      //等待转换完成
                adc_data = ADC_DATA;    //返回转换完成的数值
        }
}



/*******************************************************************************
        => CH552__电压比较器__
*******************************************************************************/
ADC_CTRL        (0x80)          //ADC控制寄存器

BIT_07          CMP0            、、只读
//_____________________________________________________________
                                电压比较器输出结果位
                 0              同相输入端电压  <  反相输入端电压
                 1              同相输入端电压  >  反相输入端电压
                 
BIT_03          CMP_CHAN        、、电压比较器反相输入端选择
//_____________________________________________________________
                 0              AIN1
                 1              AIN3
                 
// ADC同相端4选1
//_____________________________________________________________
BIT_01          BIT_00
ADC_CHAN1       ADC_CHAN0
   0               0            AIN0 （P1.1）
   0               1            AIN1 （P1.4）
   1               0            AIN2 （P1.5）
   1               1            AIN3 （P3.2）


__sbit P3_0 compare;

int main(void)
{
        // GPIO配置
        //_____________________________________________________
        P1_MOD_OC &= ~BIT_01;            //P1.1 高阻输入
        P1_DIR_PU &= ~BIT_01;
        P3_MOD_OC &= ~BIT_02;            //P3.2 高阻输入
        P3_DIR_PU &= ~BIT_02;
        P3_MOD_OC &= ~BIT_00;            //P3.0 推挽输出
        P3_DIR_PU |=  BIT_00;
        
        // 电压比较器配置
        //_____________________________________________________
        ADC_CFG   = 0x04;               //开启电压比较器电源
        ADC_CTRL  = 0x00;
        ADC_CTRL &= ~BIT_03;            //电压比较器反相端选择 AIN0 （P1.1）
        ADC_CTRL |= BIT_01 + BIT_00;    //电压比较器同相端选择 AIN3 （P3.2）
        
        
        if (CMP0) {                     //判断电压比较器输出的数值
                compare = 1;
        } else {
                compare = 0;
        }      
}




/*******************************************************************************
        => ch552_gpio
*******************************************************************************/
Pn_MOD_OC   Pn_DIR_PU
    0           0       // 高阻输入模式，引脚上没有上拉电阻
    0           1       // 推挽输出模式，具有对称的驱动能力，可以输出或者吸收较大电流
    1           0       // 开漏输出模式，支持高阻输入，引脚上没有上拉电阻
    1           1       // 准双向口模式，标准8051，开漏输出，支持输入，引脚上有上拉电阻
    
    
    
/*******************************************************************************
        => ch552__SFR__
*******************************************************************************/
//定义CH552特有的寄存器地址
__sfr   __at    (0x92)          P1_MOD_OC;
__sfr   __at    (0x93)          P1_DIR_PU;
__sfr   __at    (0x96)          P3_MOD_OC;
__sfr   __at    (0x97)          P3_DIR_PU;
__sfr   __at    (0xc6)          PIN_FUNC;



/*******************************************************************************
        => ch552__main__
*******************************************************************************/
#include <mcs51/ch552.h>

int main(void)
{
        //P1_7设置为（00）（高阻输入模式）__没有输出能力
        //P1_6设置为（01）（推挽输出模式）__输出能力强
        //P1_5设置为（10）（开漏输出模式）__只能输出低电平
        //P1_4设置为（11）（准双向口模式） =>8051模式
        P1_MOD_OC = 0b00111111;
        P1_DIR_PU = 0b01011111;
        while (1) {
                P1_7 = 0; P1_6 = 0; P1_5 = 0; P1_4 = 0;
                delay_ms(1000);
                P1_7 = 1; P1_6 = 1; P1_5 = 1; P1_4 = 1;
                delay_ms(1000);
        }
        return(0);
}





