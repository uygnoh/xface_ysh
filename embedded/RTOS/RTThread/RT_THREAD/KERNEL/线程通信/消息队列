// IPC (Internal Process Communication)  内部进程通信


//______________________________________________________________________________
//      => 消息队列控制块
//______________________________________________________________________________
struct rt_messagequeue {
        struct rt_ipc_object    parent;         // Inherit form ipc_object
        void                    *msg_pool;      // start address of message queue
        rt_uint16_t              msg_size       // （消息长度）每个消息框的大小
        rt_uint16_t              max_msgs;      // 消息队列容量（消息框的个数）
        rt_uint16_t              entry;         // 消息队列中消息框的个数（指示）
        void                    *msg_queue_head;// list head（指向消息队列中第一条消息）
        void                    *msg_queue_tail;// list tail（指向消息队列中最后第一条消息）
        void                    *msg_queue_free;// pointer indicated the free node of queue
                                                // 指向消息队列中未使用的消息框
};
typedef struct rt_messagequeue  *rt_mq_t;

struct rt_messagequeue          static_mq;      // 静态消息队列
rt_mq_t                         dynamic_mq      // 动态消息队列



// 静态创建
rt_err_t        rt_mq_init(     rt_mq_t mq,              // 消息队列控制块指针
                                const char *name,       // 消息队列名称
                                void *msgpool,          // 分配内存空间
                                rt_size_t msg_size,     // 每条消息的长度
                                rt_size_t pool_size,    // 内存池大小
                                rt_uint8_t flag);       // FIFO | PRIO
rt_err_t        rt_mq_detch(    rt_mq_t mq   );


// 动态创建
rt_mq_t         rt_mq_create(   const char *name,       // 消息队列名称
                                rt_size_t msg_size,     // 每条消息的长度
                                rt_size_t max_msgs,     // 消息框容量
                                rt_uint8_t flag);       // FIFO | PRIO
rt_err_t        rt_mq_delete(   rt_mq_t mq   );


// 发送消息队列
rt_err_t        rt_mq_send(rt_mq_t mq, void *buffer, rt_size_t size)    // 普通消息
rt_err_t        rt_mq_urgent(rt_mq_t mq, void *buffer, rt_size_t size)  // 紧急消息


// 接收消息队列
rt_err_t        rt_mq_recv(     rt_mq_t mq, 
                                void *buffer, 
                                rt_size_t size, 
                                rt_int32_t timeout);




//______________________________________________________________________________
//      => 
//______________________________________________________________________________
static struct rt_messagequeue           mq;     // 消息队列控制块
static rt_uint8_t msg_pool[2048];               // 内存池



// 接收消息比发送消息慢
// ____________________________________________________________
ALIGN(RT_ALIGN_SIZE)
static char thread1_stack[1024];
static struct rt_thread thread1;
static void thread1_entry(void *parameter)
{
        char buf = 0;
        rt_uint8_t cnt = 0;
        
        while (1) {
                // 从消息队列中接收消息
                if (rt_mq_recv(&mq, &buf, sizeof(buf), RT_WAITING_FOREVER) == RT_EOK) {
                        rt_kprintf("thread1: recv msg form msg queue, the conten: - %c\n", buf);
                        if (cnt == 19) {
                                break;
                        }
                }
                cnt++;
                rt_thread_mdelay(50);
        }
        rt_kprintf("thread1: detch mq \n");
        rt_mq_detach(&mq);
}



// ____________________________________________________________
ALIGN(RT_ALIGN_SIZE)
static char thread2_stack[1024];
static struct rt_thread thread2;
static void thread2_entry(void *parameter)
{
        int result;
        char buf = 'A';
        rt_uint8_t cnt = 0;
        
        while (1) {
                if (cnt == 8) {
                        // 发送紧急消息到消息队列中
                        result = rt_mq_urgent(&mq, &buf, 1);
                        if (result != RT_EOK) {
                                rt_kprintf("rt_mq_urgent ERROR\n");
                        }
                } else if (cnt >= 20) {
                        rt_kprintf("message queue stop send, thread2 quit\n");
                        break;
                } else {
                        // 发送消息到消息队列中
                        result = rt_mq_send(&mq, &buf, 1);
                        if (result != RT_EOK) {
                                rt_kprintf("rt_mq_send ERROR\n");
                        }
                }
                buf++;
                cnt++;
                rt_thread_mdelay(5);
        }
}




int msqq_sample(void)
{
        rt_err_t result;
        // 初始化消息队列
        result = rt_mq_init(    &mq,
                                "mqt",
                                &msg_pool[0],           // 内存池指向 msg_pool
                                1,                      // 每个消息的大小是 1
                                                        // 则系统会自动分配为（4）Byte
                                sizeof(msg_pool),      // 内存池大小
                                RT_IPC_FLAG_FIFO);      // 先进先出方法分配消息
        if (result != RT_EOK) {
                rt_kprintf("init message queue failed.\n");
                return -1;
        }
        
    `   rt_thread_init( &thread1, 
                        "thread2",
                        thread1_entry,
                        RT_NULL,
                        &thread1_stack[0],
                        sizeof(thred1_stack),
                        25, 
                        5);
        rt_thread_startup(&thread1);
        
        rt_thread_init( &thread2, 
                        "thread2",
                        thread2_entry,
                        RT_NULL,
                        &thread2_stack[0],
                        sizeof(thred2_stack),
                        25, 
                        5);
        rt_thread_startup(&thread2);
        return 0;
}
