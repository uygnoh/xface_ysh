// http://wiki.csie.ncku.edu.tw/embedded/chibios



/*******************************************************************************
        => chibios 系统状态
*******************************************************************************/

// Init
// ____________________________________________________________
        1 ChibiOS/RT进行OS初始化之前的状态， 進行所謂的物理重置(physical 
          reset) 时进入到这个状态
        2 呼叫chSysInit()这个函数进行初始化
        3 在这个状态里所有可以发出（Maskable Interrupt的sources）全部失效
        4 初始化完成后进入到 Normal 状态
// Normal
// ____________________________________________________________
        1 初始化完後到達的狀態
        2 在這裡可以執行Thread, 接收並處理任何中斷及呼叫任何system API
// Suspended
// ____________________________________________________________
        1 在这个状态里， 无法接收正常中断(IRQ)， 但是可以接收快速中断(FIQ)
        2 调用chSysDisable()进入 Disable 状态， 以及调用chSysEnable()
          这个函数进入 Normal 状态之外， 其他所有 system-API 都不能呼叫
// Disabled
// ____________________________________________________________
        1 所有可遮罩式中斷資源全部失效，系統僅能處理不可遮罩式中斷(NMI)
        2 除了可以呼叫chSysEnable()到達Normal狀態，以及chSysSuspend()
          到達 Suspended 狀態之外，其他所有 system-API 都不能呼叫
// Sleep
// ____________________________________________________________
        1 當系統中沒有其他的Thread要跑時，此時系統會執行一個 idle thread，到達這個狀態
        2 此時系統將處於 low power mode，並等待一個中斷跳出這個狀態
        3 接收到一個IRQ時，將會跑到 SRI 狀態去處理中斷，處理完後會回到 Normal
// S-Locked
// ____________________________________________________________
        1 在 Normal 的狀態中呼叫 chSysLock() 之後會進入此狀態
        2 此時系統會進入 Kernel locked 的狀態
        3 此時處理器會跑在 thread-privileged mode
        4 在這個狀態裡，無法接收正常中斷(IRQ)，但是可以接收快速中斷(FIQ)
        5 在這個狀態裡可以使用 S-class 和 I-class 的 API
        6 呼叫 chSysUnlock() 會回到 Normal 狀態
// I-Locked
// ____________________________________________________________
        1 在 SRI 的狀態中呼叫 chSysLockFromIsr() 之後會進入這個狀態
        2 此時系統會進入 Kernel locked 的狀態
        3 此時處理器會跑在 exception-privileged mode
        4 在這個狀態裡，無法接收正常中斷(IRQ)，但是可以接收快速中斷(FIQ)
        5 在這個狀態裡可以使用 I-class 的 API
        6 呼叫 chSysUnlockFromIsr() 會回到 SRI 狀態
// Serving Regular Interuupt(SRI)
// ____________________________________________________________
        1 處理一個正常中斷 ( IRQ ) 時，會進入這個狀態
        2 此時只有更高等級的中斷能夠進行搶佔
        3 此時處理器會跑在 exception-privileged mode
        4 此時無法呼叫大部分的 system-API，
          除非先呼叫 chSysLockFromIsr() 進入 I-Locked state，
          之後才能夠進行其他 API 的呼叫
// Serving Fast Interrupt(SFI)
// ____________________________________________________________
        1 處理一個快速中斷 ( FIQ ) 時會進入這個狀態
        2 無法呼叫所有 system API
        3 除了 Init , Halted , SNMI , Disabled 之外的任一狀態，
          只要接收到 FIQ 就會跳到這個狀態，處理完後會回到上一狀態
// Serving Non-Maskable Interrupt(SNNI)
// ____________________________________________________________
        1 處裡一個不可遮罩式的中斷時 (NMI) 會進入這個狀態
        2 無法呼叫所有 system API
        3 除了 Halted 的任一狀態裡只要接收到 NMI，
          或是在 Halted 中收到非同步的 NMI 時就會跳到這個狀態，
          處理完後會回到上一狀態
// Halted
// ____________________________________________________________
        1 呼叫 chSysHalt() 時會進入這個狀態
        2 所有中斷都不能使用
        
        
        
/*******************************************************************************
        => chibios 线程状态
*******************************************************************************/

        Start           // 初始的狀態
        Suspended       // Thread剛被create出來時的狀態,尚未決定要被放
                        // 進ReadyList等待執行或是直接執行
        Running         // 正在執行中的狀態
        Stop            // 終止的狀態,到達這個狀態表示Thread被執行完了
        Sleeping        // Thread暫時不進行工作。此時Thread會被暫時移出
                        // ReadyList。等待Mutex解鎖,等待其他Thread執行
                        // 完,或是等待接收訊息時都會進入這個狀態。
        Ready           // 被放進ReadyList, 等待被執行的狀態



/*******************************************************************************
        => Chibi OS/RT 中断类型
*******************************************************************************/

// 正常中斷 ( Regular Interrupts ):
//_____________________________________________________________
        1 可遮罩式的中斷
        2 在 GCC Ports / ARM Cortex-Mx / ARMv7-M 的移植版本中，
          優先度等級較低的中斷將被視為正常中斷
        3 無法搶佔部分的 kernel code
        4 在此類的 interrupt handler 裡面可以呼叫 operating system APIs。
// 快速中斷 ( Fast Interrupts ):
//_____________________________________________________________
        1 可遮罩式的中斷
        2 在 GCC Ports / ARM Cortex-Mx / ARMv7-M 的移植版本中，
          優先度等級較高的中斷將被視為快速中斷
        3 可以搶佔 kernel code ，也因此有較短的延遲 ( lantency ) 。
        4 在此類的 interrupt handler 裡面無法呼叫任何一個 operating system API 
// 不可遮罩式中斷 ( Non Maskable Interrupts, NMI):
//_____________________________________________________________
        1 不受OS控制的中斷，擁有最短的延遲 ( lowest latency )



// Chibi OS/RT 中對 STM32F4XX 系列所支援的中斷
//_____________________________________________________________
        1 共定義了99種中斷
        2 hal_lld.h 中定義了可用的 ISR name 和 對應的 vector name
        3 而在 /os/ports/GCC/ARMCMx/STM32F4xx/vectors.c 中則定義了 
          Interrupt Vector Table 及宣告了處理 Interrupt 的函式
        4 另外在 /os/hal/platforms/STM32F4xx/stm32f4xx.h 
          中有一段 code 定義了 Interrupt number




/*******************************************************************************
        => ChibiOS 数据结构
*******************************************************************************/

        p_prio          // Thread priority
        p_ctx           // Processor context, 紀錄 Thread 目前的執行狀態
        p_state         // 紀錄 Thread 目前所處於的狀態 (正在執行, 等待被執行, 
                        // 等待某一個 Mutex 被解鎖….等)
        p_preempt       // 記錄這個 Thread 還有多少個 tick 可以用來執行
        p_waiting       // 一個單向的 Thread linked list。 當有其他 Thread 
                        // 欲等待此 Thread 執行完時, 這些 Thread 就會被塞進
                        // 這個 waiting list 裡面
        p_msgqueue      // 一個雙向的 Thread linked list。 用來存放欲傳給此 
                        // Thread 訊息的 Thread (詳見後面 IPC 的部分)。
        p_mtxlist       //Mutex 結構，用來存放此 Thread 目前佔有的 Mutex




