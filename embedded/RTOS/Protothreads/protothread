/*******************************************************************************
        => protothread 状态机
*******************************************************************************/
函数                             说明
_____________________________________________________________________________
PT_INIT(pt)                     // 初始化任务变量，只在初始化函数中执行一次
PT_BEGIN(pt)                    // 启动任务处理，放在函数开始处
PT_END(pt)                      // 结束任务，放在函数的最后
PT_WAIT_UNTIL(pt,condition)     // 条件成立，执行下面的；否则退出，下次直接跳到此处执行
PT_WAIT_WHILE(pt, condition)    // 类似PT_WAIT_UNTIL，只是条件取反了
PT_WAIT_THREAD(pt, thread)      // 等待一个子任务执行完成
PT_SPAWN(pt, child, thread)     // 新建一个子任务，并等待其执行完退出
PT_RESTART(pt)                  // 重新启动某个任务执行
PT_EXIT(pt)                     // 任务后面的部分不执行，直接退出重新执行
PT_YIELD(pt)                    // 锁死任务
PT_YIELD_UNTIL(pt, condition)   // 锁死任务等待条件成立重新执行
_____________________________________________________________________________



/*******************************************************************************
        => protothread
*******************************************************************************/
//线程结构体
struct pt {
        unsigned short lc;      // 当前线程执行到的位置(行号)
};
PT_THREAD(f1(struct pt *pt))
// 展开宏后的代码
// char f1(struct pt *pt)
{
        // 这里可以写每次任务切换进来都执行的代码    
        //  注意，只有静态变量才能正确的保存，非静态变量在切换协程时会丢失
        // 同样，静态变量的限制使得一个函数不能多协程同时执行，局部变量会冲突。
        static int a;
 
        PT_BEGIN(pt);  // 准备协程环境
        // 展开宏后的代码：
        //      char PT_YIELD_FLAG = 1;
        //      switch(pt.lc) { 
        //      case 0;
        // 等待至条件达成
        // 可以看到，是通过记录当前执行位置后直接退出函数来实现的让出cpu。
        // 恢复执行时通过 switch 的 case 跳转回上次执行的位置来实现的恢复执行。
        PT_WAIT_UNTIL(pt, 条件);
        // 展开后的代码：
        /*
                do {
                        (pt)->lc =  __LINE__;
                        case __LINE__:;
                        if (!(condition)) {
                                return PT_WAITING;  
                        }
                } while (0)
        */
        PT_END(pt); // 结束协程环境
        // 展开后的代码：
        /*
                };
                PT_YIELD_FLAG = 0;
                pt.lc=0;
                return PT_ENDED;
       */
}
void main()
{
        struct pt p1;   // 线程1
        struct pt p2;   // 线程2
        //初始化线程
        PT_INIT(&p1);   // 其实就是 p1.lc = 0
        PT_INIT(&p2); 
        while (1) {
                /// 启动两个线程
                f1(&p1); 
                f1(&p2);        
        }
}



/*******************************************************************************
        => protothread
*******************************************************************************/
// http://dunkels.com/adam/pt/index.html

#include "pt.h"
 
struct pt pt;
struct timer timer;
 
PT_THREAD(example(struct pt *pt))
{
        PT_BEGIN(pt);
 
        while(1) {
                if(initiate_io()) {
                        timer_start(&timer);
                        PT_WAIT_UNTIL(pt, io_completed() || timer_expired(&timer));
                        read_data();
                }
        }
        
        PT_END(pt);
}
