/*******************************************************************************
        => OS_InitEventList()
*******************************************************************************/
// ECB_事件链表初始化
static void OS_InitEventList(void)
{
#if (OS_EVENT_EN) && (OS_MAX_EVENTS > 0u)
    #if (OS_MAX_EVENTS > 1u)
    //______________________________________
        INT16U           ix;
        INT16U           ix_next;
        OS_EVENT        *pevent1;
        OS_EVENT        *pevent2;
        
        //Clear the event table
        OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl));
        //Init. list of free EVENT control blocks
        //把顺序存储的数组构造成一个单向链表
        for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {
                ix_next                = ix + 1;
                pevnet1                = &OSEventTbl[ix];
                pevent2                = &OSEventTbl[ix_next];
                pevent1->OSEventType   = OS_EVENT_TYPE_UNUSED;
                pevent1->OSEventPtr    = pevent2;
                
                #if OS_ENENT_NAME_EN > 0u
                pevent1->OSEventName   = (INT8U *)(void *)"?"; //Unknown name
                #endif
        }
        //最后一个事件链表初始化
        pevent1                 = &OSEvenTbl[ix];
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
        pevent1->OSEventPtr     = (OS_EVENT *)0;
        
        #if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?"; //Unknown name
        #endif
        
        OSEVentFreeList         = &OSEventTbl[0];
        
        
    //如果OS_MAX_EVENTS=1，也就是系统只有一个事件
    //______________________________________
    #else
        OSEventFreeList              = &OSEventTbl[0];
        OSEventFreeList->OSEventType = OS_EVENT_TYPE_UNUSED;
        //当作为事件链表初始化的时候，这个指针当作链表的下一个指针
        OSEventFreeList->OSEventPtr  = (OS_EVENT *)0;
        
        #if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?"; //Unknown name
        #endif
    #endif
    
#endif
}



/*******************************************************************************
        => OS_EventWaitListInit()
*******************************************************************************/
// 初始化事件就绪组和就绪表(没有任何任务在执行状态)
#if (OS_EVENT_EN)
void OS_EventWaitListInit(OS_EVETN *pevent)
{
        INT8U i;
        pevent->OSEventGrp = 0u;
        for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
                pevent->OSEVentTbl[i] = 0u;
        }
}
#endif



/*******************************************************************************
        => OS_EvenTasktWait()
*******************************************************************************/
// 如果创建了事件，任务就会等待事件，如果要任务和事件建立关系的话，就使用这个函数来实现。
// 这个函数一定是在当前正在执行的任务中被调用。

#if (OS_EVENT)
void OS_EventTaskWait(OS_EVENT *pevent)
{
        INT8U   y;
        
        //在任务的那个方向作登记
        //Store ptr to ECB in TCB
        OSTCBCur->OSTCBEventPtr               = pevent;
        
        //在事件的那个方向作登记
        //Put task in waiting list
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
        pevent->OSEVentGrp                   |= OSTCBCur->OSTCBBitY;
        
        //当前任务正在申请资源或事件，那么就让当前任务从运行态转换为非就绪态。
        //Task no longer ready
        y            = OSTCBCur->OSTCBY;  
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitx;
        //Clear event grp bit if this was only task pending
        if (OSRdyTbl[y] == 0u) {  
                OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
        }
}
#endif



/*******************************************************************************
        => OS_EventTaskRemove()
*******************************************************************************/
// 这里只在事件这个方向作移除

#if (OS_EVENT_EN)
void OS_EventTaskRemove(OS_TCB *ptcb, OS_EVENT *pevent)
{
        INT8U   y;
        
        //移出事件只是在事件这里作了注销
        y                      = ptcb->OSTCBY;
        //把这个任务从它的事件等待列表中移除
        pevent->OSEventTbl[Y] &= (OS_PRIO)~ptcb->OSTCBBitX;
        if (pevent->OSEventTbl[Y] == 0u) {
                pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY);
        }
}
#endif



/*******************************************************************************
                              OS_EventTaskRdy()
arguments: 
        pevent  is a pointer to the event control block coresponding to the event
        
        pmsg    is a pointer to a message, This pointer is used by message
                oriented services such as MAILBOXEs and QUEUEs. The pointer
                is not used when called by other service function
                
        msk     is a mask that is used to clear the status byte of the TCB.
                For example:
                OSSemPost() will pass OS_STAT_SEM, 
                OSMBoxPost() will pass OS_STAT_MBOX etc.
                
    pend_stat   is used to indicate the readied task's pending status:
                OS_STAT_PEND_OK         Task ready due to a post (or delete)
                                        not a timeout or an abort.
                OS_STAT_PEND_ABORT      Task ready due to an abort
                                        abort(强行终止)
*******************************************************************************/
// 让申请的这个事件的任务处于就绪态
#if (OS_EVENT_EN)
INT8U OS_EventTaskRdy(
        OS_EVENT    *pevent,
        void        *pmsg,      //在消息邮箱，消息队列指向消息的指针
        INT8U        msk,       //事件状态掩码，它是用来清除TCB状态字节
        INT8U        pend_stat) //申请的事件状态
{
        OS_TCB      *ptcb;
        INT8U        y;
        INT8U        x;
        INT8U        prio;
        
        #if OS_LOWEST_PRIO <= 63
                                        //Find HPT waiting for message
                                        //查优先级判定表（事件就绪组和事件就绪表）
                                        //（y对应的是优先级高3位）
                                        //（x对应的是优先级低3位）
        y    = OSUnMapTbl[pevent->OSEventGrp];
        x    = OSUnMapTbl[pevent->OSEvnetTbl[y]];
                                        //Find priority of task getting the msg
        prio = (INT8U)((y << 3u) + x);  
        #endif
        
        ptcb            = OSTCBPrioTbl[prio];   //Point to this task's OS_TCB
        ptcb->OSTCBDly  = 0u;       //不需要延时（清除延时字段）
        
        #if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u) || (OS_MBOX_EN > 0U)
        ptcb->OSTCBMsg      = pmsg; //Send message directly to waiting task
        #else
        pmsg                = pmsg; //Prevent compiler warning if not used
        #endif
        
        ptcb->OSTCBStat    &= (INT8U)~msk; //Clear bit associated with event type
        ptcb->OSTCBStatPend = pend_stat;   //Set pend status of post or abort
        
        //如果这个任务不是挂起态，那么就让它变成就绪态
        if ((ptcb->OSTCBStat &  OS_STAT_SUSPEND) == OS_STAT_RDY) {
                OSRdyGrp     |= ptcb->OSTCBBitY;
                OSRdyTbl[y]  |= ptcb->OSTCBBitX;
        }
        
        //Remove this task form event wait list
        //这里只在事件控制块那个方向作了解除，单向解除
        OS_EventTaskRemove(ptcb, pevent);
        
        #if (OS_EVENT_MULTI_EN > 0u)
        //Remove this task from events' wait lists
        if (ptcb->OSTCBEventMultiPtr |= (OS_EVENT **)0) {
                OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
                //Return this task from events' wait lists
                ptcb->OSTCBEventPtr = (OS_EVENT *)pevent;
        }
        #endif
        
}
#endif
