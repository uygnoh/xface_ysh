//______________________________________________________________________________
//      => RT-1050
//______________________________________________________________________________
// RT-1050 上电执行第一条指令
// （GPR16寄存器）IOMUXC_GPR_GPR16 (400A_C040)
// VTOR-Vector table offset register
//_____________________________________________________________
        31:7    CM7_INIT_VTOR = 0x00200000
0x00200000 - 0x00217FFF         // ROMCP，ROM地址
                                // VTOR指向ROM的起始地址


                  
// OCRAM
//_____________________________________________________________
0x00200000 中存放的是 0x20201000
0x20200000 - 0x2020FFFF         // OCRAM，RAM地址
                                // 0x20201000 栈指针指向了此地



// ROM 中的第一条和第二条指令
//_____________________________________________________________
                                // 0x20201000 栈指针指向了此地
                                // 0x00201415 系统的第一条指令 
0x00200000:     0x20201000      0x00201415
0x00201414:     cpsid   i       // 系统的第一条指令 



//______________________________________________________________________________
//      => RT-1050
//______________________________________________________________________________
// 从ROM指令中出来的第一条指令（ResetISR）
void ResetISR(void)
{
        // Diaable interrupts
        __asm volatile ("cpsid i");
        
        // MSP = _vStackTop = 0x20020000
        __asm volatile ("MSR MSP, %0" : : "r" (&_vStackTop) : );
}



//______________________________________________________________________________
//      => ThreadX
//______________________________________________________________________________
tx_kernel_enter = _tx_initialize_ker_enter      // ThreadX总入口
        _tx_initialize_low_level                // 初始化开发板
        _tx_initialize_high_level               // 初始化ThreadX本身
        _tx_application_define                  // 用户功能实现
        _tx_thread_schedule                     // 调度ThreadX
        
        
        
        
//______________________________________________________________________________
//      => 数据结构 - TX_THREAD
//______________________________________________________________________________
        G       Global variable
        T       TX_THREAD
        S       Stack
typedef struct TX_GHREAD_STRUCT {
        ULONG   tx_thread_id;                   // 
        ULONG   tx_thread_run_count;            // 运行计数
        VOID    *tx_thread_stack_ptr;           // 上下文切换时，保存自己栈指针
        VOID    *tx_thread_stack_start;         //
        VOID    *tx_thread_stack_end;           //
        ULONG   tx_thread_stack_size;           //
        ULONG   tx_thread_time_slice;           // 相同优先级看时间片
                                                // 时间片用完，让出CPU
        ULONG   tx_thread_new_time_slice;       // 当它的时间片用完时，下一次运行时，
                                                // 再获取时间片
                                                
                                                
        struct TX_THREAD_STRUCT                // 挂载双向链表的指针
                        *tx_thread_ready_next,
                        *tx_thread_ready_previous;
                        
        struct TX_THREAD_STRUCT
                        *tx_thread_suspended_next,
                        *tx_thread_suspended_previous;
                        
        struct TX_THREAD_STRUCT
                        *tx_thread_created_next,
                        *tx_thread_created_previous;
                        
        
        
        // ThreadX初次运行看tx_thread_priority
        // ThreadX再次抢占看tx_thread_preempt_threshold
        // TX_MAX_PRIORITIES    32      // 定义了最大支持的优先级
        CHAR    *tx_thread_name;                /* Pointer to thread's name     */
        UINT    tx_thread_priority;             /* Priority of thread (0-1023)  */
        UINT    tx_thread_state;                /* Thread's execution state     */
        UINT    tx_thread_delayed_suspend;      /* Delayed suspend flag         */
        UINT    tx_thread_suspending;           /* Thread suspending flag       */
        UINT    tx_thread_preempt_threshold;    /* Preemption threshold         */
        
        
        TX_TIMER_INTERNAL   tx_thread_timer;    // 
        
        
        // tx_thread_user_priority, tx_thread_user_preempt_threshold
        // 用户优先级， 它实际不起作用，最终还是写入到tx_thread_priority
        // 和tx_thread_preempt_threshold中
        UINT    tx_thread_user_priority;
        UINT    tx_thread_user_preempt_threshold;
        // tx_thread_inherit_priority
        // ThreadX也实现了优先级继承，但是只针对（Mutex）互斥
        UINT    tx_thread_inherit_priority;
} TX_THREAD;
// ThreadX/threadx-6.1.10_rel/ports/cortex_m7/gnu/src/tx_thread_schedule.S
// (r1+4) == tx_thread_run_count
__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
    ADD     r7, r7, #1                              // Increment the thread run count
    STR     r7, [r1, #4]                            // Store the new run count



//______________________________________________________________________________
//      => 数据结构 - Global variable
//______________________________________________________________________________
// common/src/tx_thread_initialize.c

VOID *          _tx_thread_system_stack_ptr;// 没有用到，忽略

TX_THREAD *     _tx_thread_current_ptr; // 当前正在运行的Thread-ptr
TX_THREAD *     _tx_thread_execute_ptr; // 希望运行的Thread-ptr
TX_THREAD *     _tx_thread_created_ptr; /* Define the head pointer of the created thread list.  */

                                        // 大于0，或小于0，都是不允许抢占
volatile UINT   _tx_thread_preempt_disable;



//______________________________________________________________________________
//      => PendSV_Handler
//______________________________________________________________________________
        Preserve current thread context // 保存当前任务的上下文
        Restore  execute thread context // 恢复即将要运行任务的上下文
        Start                           // 开始执行这个Thread



//______________________________________________________________________________
//      => NXP-RT1050 GIT
//______________________________________________________________________________
// 创建一个git仓库，可以查看文件改动情况
//_____________________________________________________________
        cd      evkbimxrt1050_thread_demo/
        git     init && git add . && git commit -s -m "init."
        git     status
        
        
        
//      NXP-IDE
// 
//_____________________________________________________________
        evkbimxrt1050_threadx_demo
        evkbimxrt1050_threadx_lib
                liblinks.xml => Smartupdate => Smartupdate
                                // Select projects to update
                                evkbimxrt1050_threadx_demo      [*]
                                evkbimxrt1050_threadx_lib       [ ]
