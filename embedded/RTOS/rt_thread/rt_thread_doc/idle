//______________________________________________________________________________
//      => 空闲线程
//______________________________________________________________________________
        // 空闲线程是一个比较特殊的系统线程，它具备最低优先级
        // 当系统中无其它就绪线程可运行时，调度器将调度到空闲线程
        
        // 空闲线程还负责一些系统资源回收以及将一些处于关闭状态
        // 的线程从线程调度器中移除动作
        
        // 空闲线程在形式上是一个无限循环结构，且永远不被挂起
        
        // 在RT-THREAD实时操作系统中空闲线程向用户提供了钩子函数，
        // 空闲线程钩子函数可以让系统在空闲的时候执行一些非紧急的
        // 任务，例如：系统运行指示灯闪烁，CPU使用率统计...




//______________________________________________________________________________
//      => 空闲线程钩子函数
//______________________________________________________________________________
// 设置钩子函数
        rt_err_t        rt_thread_idle_sethook(void (*hook)(void));
// 删除钩子函数
        rt_err_t        rt_thread_idle_delhook(void (*hook)(void));
        

// 指向线程控制块指针    
static rt_thread_t tid = RT_NULL;

// 空闲线程钩子函数执行次数
volatile static int hook_times = 0;


// 空闲线程钩子函数
static void idle_hook()
{
        if (0 == (hook_times % 10000)) {
                rt_kprintf("enter idle hook %d times.\n", hook_times);
        }
        
        rt_enter_critical();
        hook_times++;
        rt_exit_critical();
}


// 创建线程
static void thread_entry(void *parameter)
{
        int i = 5;
        
        while (i--) {
                rt_kprintf("enter thread1.\n");
                rt_enter_critical();
                hook_times = 0;
                rt_exit_critical();
                
                // 休眠500ms
                rt_kprintf("thread1 delay 50 OS Tick.\n", hook_times);
                rt_thread_mdelay(500);
        }
        
        rt_kprintf("delete idle hook.\n");
        rt_thread_idle_delhook(idle_hook);
        rt_kprintf("thread1 finish.\n");
}



int idle_hook_sample(void)
{
        rt_thread_idle_sethook(idle_hook);
        
        tid = rt_thread_create(
                        "thread1",
                        thread_entry, 
                        RT_NULL,
                        THREAD_STACK_SIZE,
                        THREAD_PRIORITY,
                        THREAD_TIMESLICE);
        if (tid != RT_NULL) {
                rt_thread_startup(tid);
        }
        
        return 0;
}



//______________________________________________________________________________
//      => 系统调度钩子函数
//______________________________________________________________________________
        // 系统的上下文切换是系统运行过程中最普遍的事件
        // 有时用户可能会想知道在某一个时刻发生了什么样的线程切换，
        // RT-THREAD向用户提供了一个系统调度钩子函数，这个钩子函数
        // 在系统进行切换时运行，通过这个钩子函数，我们可以了解到系统
        // 调度时的一些信息
        rt_scheduler_sethook(void (*hook)(struct rt_thread *from, struct rt_thread *to);
        
        

// from->name   // 打印调度线程名称
// to  ->name   // 打印调度到那个线程名称
static void hook_of_scheduler(struct rt_thread * from, struct rt_thread *to)
{
        rt_kprintf("from: %s --->   to: %s \n", from->name, to->name);
}
int scheduler_hook(void)
{
        // 设置系统调度钩子函数
        rt_scheduler_sethook(hook_of_scheduler);
        
        tid1 = rt_thread_create(
                        "thread1",
                        thread_entry,
                        (void *)1,
                        THREAD_STACK_SIZE,
                        THREAD_PRIORITY,
                        THREAD_TIMESLICE);
        if (tid1 != RT_NULL) {
                rt_thread_startup(tid1);
        }


        tid2 = rt_thread_create(
                        "thread2",
                        thread_entry,
                        (void *)2,
                        THREAD_STACK_SIZE,
                        THREAD_PRIORITY,
                        THREAD_TIMESLICE - 5);
        if (tid1 != RT_NULL) {
                rt_thread_startup(tid1);
        }
        
        return 0;
}

// 导出到 msh 命令列表中
MSH_CMD_EXPORT(scheduler_hook, scheduler_hook sample);
