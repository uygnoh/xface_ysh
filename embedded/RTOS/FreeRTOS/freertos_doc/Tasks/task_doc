/*******************************************************************************
        => FreeRTOS-任务状态
*******************************************************************************/
1. 运行态（running）
___________________________________________________________
//当一个任务正在运行时，那么这个任务处于运行态。 处于运行态的任务是当前正
//在使用CPU的任务。 如果使用的是单核处理器的话那么不管在任何时刻永远都只
//有一个任务处于运行态。


2. 就绪态（ready）
___________________________________________________________
//处于就绪态的任务是那些已经准备就绪（这些任务没有阻塞或挂起），可以运行
//的任务，但是处于就绪态的任务还没有运行，因为有一个同优先级或者更高优先
//级的任务在在运行！


3. 阻塞态（blocked）
___________________________________________________________
//如果一个任务当前正在等某个外部事件的话就说它处于阻塞态，比如说某个任务
//调用了“vTaslDelay()”的话就会进入阻塞态，直到延时周期完成。 任务在等待
//队列，信号量，事件组，通知，或互斥信号量的时候也会进入阻塞态。 任务进入
//阻塞态会有一个超时时间，当超过这个超时时间任务应付退出阻塞态，即使所等待
//的事件还没有来临！


4. 挂起态（suspend）
___________________________________________________________
//像阻塞态一样，任务进入挂起态以后也不能被调度器调用进入运行态， 
//但是进入挂起态的任务没有超时时间。 任务进入和退出挂起态通过调用函数
//vTaskSupend 和 xTaskResume()


5. 管理任务
//1 找到最高优先级的（运行态，就绪态）的任务，运行它
//2 如果大家平级，轮流执行， 排队， 链表前面的先运行， 运行（1）个tick后，乖乖地去链表尾部排队



___________________________________________________________
/*******************************************************************************
        => FreeRTOS-动态内存创建
*******************************************************************************/
//xTaskCreate()
        1 申请任务堆栈内存
        2 申请任务控制块内存
        3 把“任务堆栈内存的首地址”存储到“任务控制块中”
        4 调用prvInitialiseNewTask(),初始化新的任务
        5 调用prvAddNewTaskToReadyList(),添加新的任务到就绪列表中

//prvInitialiseNewTask()
        1 初始化堆栈为“0xA5”，作堆栈溢出检查（可选功能）
        2 获取栈顶地址，保存到栈顶指针中
        3 保存任务名称到“pxNewTCB->pcTaskName[x]”
        4 保存任务优先级到“pxNewTCB->uxPriority”
        5 初始化状态列表项和事件列表项
        6 初始化各种任务控制块成员变量
        7 调用pxPortInitialiseStack()， 初始化堆栈， 
          返回值保存到“pxNewTCB->pxTopOfStack”
        8 保存/记录任务句柄，其实就是任务控制块

//prvAddNewTaskReadyList(TCB_t *pxNewTCB)
        1 uxCurrentNumberOfTasks++; 记录系统中有多少个任务
        2 如果创建的是“第1个任务”，初始化相关列表prvInitialiseTaskLists();
        3 调用prvAddTaskToReadyList(); 将任务添加到就绪列表中
        4 如果新创建的任务优先级比当前任务优先级高，那么调用
          taskYIELK_IF_USING_PREMPTION();进行任务切换
        
//prvAddTaskToReadyList();
        1 将uxTopReadyPriority()相应的bit位置“1”，表示相应优先级有就绪任务
        2 将新创建的任务添加到对应的就绪列表中，末尾插入。       
        3 例如：“优先级5”，pxReadyTasksLists[5]



/*******************************************************************************
        => FreeRTOS-任务删除， 挂起， 恢复
*******************************************************************************/
//任务删除 vTaskDelete()
———————————————————————————————————————————————————————————
1 根据任务句柄获取任务控制块，如果任务句柄为“NULL”表示删除任务自身
2 将要删除的任务从就绪列表中移除，并且如果相应的优先级下只有这一个任务，那么复位相应的优先级位。
3 如果任务等待某些事件的话，那么就将此任务从相应的事件中移出。
3.5     如果删除的是任务自身，那么将任务添加到列表xTasksWaitingTermination中
        如果删除的是任务自身，任务堆栈和任务控制的释放是在空闲任务中完成的。
4 --uxCurentNumberOfTasks;表示当前系统任务减1，如果删除的不是自身
5 释放任务控制块和任务堆栈内存
6 如果删除的是任务自身，需要主动发起任务切换



//任务挂起
———————————————————————————————————————————————————————————
1 根据任务句柄获取任务控制块，如果任务句柄为NULL，表示删除任务自身
2 将要挂起的任务从相应的状态列表和事件列表中移出
3 将要挂起的任务添加到挂起任务列表中
4 如果挂起的是任务自身，而且任务调度器运行正常，那么发起一次任务调度。


//任务恢复
———————————————————————————————————————————————————————————
1 判断要恢复的任务为挂起任务？
2 将要恢复的任务从挂起列表中移出
3 调用prvAddTaskToReadyList(pxTCB);将任务添加到就绪列表中
4 如果刚刚恢复的任务比正在运行的任务的优先级高，那么进行一次任务切换




