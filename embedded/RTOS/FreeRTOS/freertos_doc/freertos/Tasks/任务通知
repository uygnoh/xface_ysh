/*******************************************************************************
                                FreeRTOS-任务通知
*******************************************************************************/
xTaskNotify()           //发送通知， 带有通知值并且不保留接收任务原通知值，用在任务中
xTaskNotifyFormISR()    //发送通知， 函数xTaskNotify()的中断版本
xTaskNotifyGive()       //发送通知， 不带通知值并且不保留接收任务的通知值，此函数会将
                        接收任务的通知值加“1”，用于任务中
vTaskNotifyGiveFromISR()//发送通知， 函数 xTaskNotifyGive()的中断版本
xTaskNotifyAndQuery()   //发送通知， 带有通知值并且保留接收任务的原通知值，用在任务中
xTaskNotifyAndQueryFromISR() //发送通知， 函数xTaskNotifyAndQuery()的中断版本，
                        用在中断服务函数中
                        
________________________________________________________________________________                   
                        
ulTaskNotifyTake()      //获取任务通知，可以设置在退出此函数的时候将任务通知值清零或者减1。 
                        当任务通知用作二值信号量或者计数信号量的时候使用此函数来获取信号量
xTaskNotifyWait()       //等待任务通知， 比ulTaskNotifyTake()更为强大，全功能版本任务
                        通知获取函数



/*******************************************************************************
                                FreeRTOS-任务通知发送
*******************************************************************************/
//任务级通用任务通知发送函数 xTaskGenericNotify()
___________________________________________________________
1 先判断参数pulPreviousNotificationValue是否有效，这个参数是一个指针，用来保存接收
  通知的任务的原有任务通知值。 如果此参数有效保存原有任务通知值
2 修改接收任务的任务通知状态为taskNOTIFICATION_RECIVED, 表示接收到了任务通知
3 根据参数eAction指定的动作来完成相应的操作
4 如果接收任务由于任务通知无效而进入阻塞态的话，那么就解除接收任务的阻塞态，并且添加到就绪列表中
5 判断 4 中解除阻塞态的任务其优先级是否高于当前任务，如果是的话进行任务切换
BaseType_t xTaskGenericNotify(
        TaskHandle_t xTaskToNotify, //指定给那一个任务发送任务通知
        uint32_t ulValue,          //任务通知值
        eNotifyAction eAciton,     //动作是什么
        uint32_t *pulPreviousNotificationValue, )//接收任务的原任务通知
{
        TCB_t *pxTCB;
        BaseType_t xReturn = pdPASS;
        uint8_t ucOriginalNotifyState;
        pxTCB = (TCB_t *)xTaskToNotify;
        taskENTER_CRITICAL();
        
        //先判断pulPreviousNotificationValue是否有效， 这个参数是一个指针。 
        //用来保存接收通知的任务的原有任务通知值。 如果这个参数有效保存原有任务通知值。
        if (pulPreviousNotificationValue != NULL) {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
        }
        ucOriginalNotifyState = pxTCB->ucNotifyState;
        //修改任务通知状态为taskNOTIFICATION_RECEIVED
        pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
        
        //根据参数eAction指定的动作来完成相应的操作
        switch (eAction) {
        case eSetBits:
                pxTCB->ulNotifiedValue |= ulValue;
                break;
        case eIncrement:
                (pxTCB->ulNotifiedValue)++;
                break;
        case eSetValueWithOverwrite:
                pxTCB->ulNotifiedValue = ulValue;
                break;
        case eSetValueWithoutOverwrite:
                if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED)
                        pcTCB->ulNotifiedValue = ulValue;
                else
                        xReturn = pdFAIL;
                break;
        case eNoAction:
                break;
        }
        
        //（x1）如果接收任务由于任务通知无效而进入阻塞态的话，那么就解除接收任务的阻塞态，并且添加到就绪列表中
        if (ucOriginalNotifyState = taskWAITING_NOTIFICATION) {
                (void)uxListRemove(&(pxTCB->xStateListItem));
                prvAddTaskToreadyList(pxTCB);
                //判断（x1）中解除阻塞的任务其优先级是否高于当前优先级，如果是的话进行任务切换
                if (pxTCB->uxPriority > pxCurrentTCB->uxPriority)
                        taskYIELD_IF_USING_PREEMPTION();
                
        }
        task_EXIT_CRITICAL();
}

//中断级通用任务通知 xTaskGenericNotifyFromISR()
___________________________________________________________
1 先判断参数pulPreviousNotificationValue是否有效，这个参数是一个指针，用来保存接收
  通知的任务的原有任务通知值。 如果此参数有效保存原有任务通知值
2 修改接收任务的任务通知状态为taskNOTIFICATION_RECEIVED， 表示接收到了任务通知
3 根据参数eAction指定的动作来完成相应的操作
4 如果接收任务由于任务通知无效而进入阻塞态的话，那么就解除任务的阻塞态，并且添加到就绪列表中。
  与任务级的区别在于，会判断任务调度器是否被挂起， 如果任务调度器没有挂起的话和任务级处理相同。
  如果任务调度器挂起的话就添加到xPendingReadyList中去。 在xTaskResumeAll()恢复任务调度器时候处理。
5 判断一个 4 中解除阻塞态的任务其优先级是否高于当前任务，如果是的话标记需要进行任务切换， 
  即给pxHigerPriorityTaskWoken = pdTURE.
BaseType_t xTaskGenericNotifyFromISR(
        TaskHandle_t xTaskToNotify,
        uint32_t ulValue,
        eNotifyAction eAction, 
        uint32_t *pulPreviousNotificationValue,
        BaseType_t *pxHigherPriorityTaskWoken)  //作来保存是否进行任务切换
{
        TCB_t *pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
        UBaseType_t uxSavedInterruptStatus;
        
        pxTCB = (TCB_t *)xTaskToNotify;
        
        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
        if (pulPreviousNotifictionValue != NULL)
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
        ucOriginalNotifysTate = pxTCB->ucNotifyState;
        pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
        
        switch (eAction) {
        case eSetBits:
                pxTCB->ulNotifiedValue |= ulValue;
                break;
        case eIncrement:
                (pxTCB->ulNotifiedValue)++;
                break;
        case eSetValueWithOverwrite:
                pxTCB->ulNotifiedValue = ulValue;
                break;
        case eSetValueWithoutOverwrite:
                if (ucOriginalNotfifyState != taskNOTIFICATION_RECEIVED)
                        pxTCB->ulNotifiedValue = ulValue;
                else
                        xReturn = pdFAIL;
                break;
        case eNotAction:
                break;
        }
        
        if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
                if (uxSchedulerSuspended == (UBaseType_t )pdFALSE) {
                        (void)uxListRemove(&(pxTCB->xStateListItem));
                        prvAddTaskToReadyList(pxTCB);
                } else {
                        vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
                }
                
                if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
                        if (pxHigherPriorityTaskWoken != NULL)
                                *pxHigherPriorityTaskWoken = pdTRUE;
                        else
                                xYieldPending = pdTRUE;
                }
                
        }
}



/*******************************************************************************
                                FreeRTOS-任务通知获取
*******************************************************************************/
1 首先判断任务通知是否有效， 即pxCurrentTCB->ulNotifiedValue是否 == 0
2 在 （1） 中判断得到任务通知值无效的话设置任务通知值为taskWAITING_NOTIFICATION,表示等待任务通知
  如果设置了阻塞时间的话，任务进入阻塞态， 并且通过函数prvAddCurrentTaskToDelayList
  将任务挂载到延时列表中。
3 如果任务通知有效，根据参数xClearCountOnExit来决定任务通知是清零还是减1
  如果为pdFALSE的话就“减1”， 否则清零
4 修改任务通知状态为taskNOT_WAITING_NOTIFICATION, 表示不等待任务通知。
5 如果任务通知有效， 返回任务通知 
________________________________________________________________________________
uint32_t ultaskNotifyTake(
        BaseType_t xClearCountOnExit, 
        TickType_t xTicksToWait,)       //阻塞时间
{
        uint32_t ulReturn;
        taskENTER_CRITICAL();
        //如果任务通知值无效， 即pxCurrentTCB->ulNotifiedValue == “0”
        //如果无效进入阻塞态
        if (pxCurrentTCB->ulNotifiedVale == 0UL) {
                if (xTicksToWait > (TickType_t)0) {
                        prvAddCurentTaskToDelayedList(xTicksToWait, pdTRUE);
                        portYIELD_WITHIN_API();
                        
                }
        }
        taskEXIT_CRITICAL();
        
        //如果任务通知值有效， 即pxCurrentTCB->ulNotifiedValue 大于 “0”
        taskENTER_CRITICAL();
        ulReturn = pxCurrentTCB->ulNotifiedValue;
        if (ulReturn != 0UL) {
                if (xClearCountOnExit != pdFALSE)
                        pxCurrentTCB->ulNotifiedValue = 0UL
                else
                        pxCurrentTCB->ulNotifeedValue = ulReturn - 1;
        }
        
        pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
        taskEXIT_CRITICAL();
        return ulReturn;
}




________________________________________________________________________________
1 如果任务通知状态不为taskNOTIFICATION_RECEIVED的话， 那么就根据参数ulBitsToClearOnEntry
  来清除指定的Bit。 修改任务通知状态为taskWAITING_NOTIFICATION, 表示等待任务通知。
2 如果设置了阻塞时间的话， 那么就处理阻塞相关问题
3 如果任务通知有效， 那么保存任务通知到参数pulNotificationValue中
4 再次确认任务通知状态是否为taskWAITING_NOTIfIFICATION，如果是的话 xReturn=pdFALSE
5 如果经过（4） 确认得到任务通知状态不为taskWAITING_NOTIFICATION, 
  那么根据参数ulBitsToClearOnExit清除任务通知指定的Bit
6 修改任务通知状态为taskNOT_WAITING_NOTIFICATION; 返回pdTRUE
________________________________________________________________________________
BaseType_t xTaskNotifyWait(
        uint32_t ulBitsToClearOnEntry,
        uint32_t ulBitsToClearOnExit,
        uint32_t *pulNotificationValue,
        TickType_t xTicksToWait,
{
        BaseType_t xReturn;
        taskENTER_CRITICAL();
        if (pxCurrentTCB->uxNotifyState != taskNOTIFICATION_RECEIVED) {
                pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
                pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
                if (xTicksToWait > (TickType_t)0) {
                        prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
                        protYIELD_WITHIN_API();
                }
        }
        taskEXIT_CRITICAL();
        
        taskENTER_CRITICAL();
        if (pulNotificationValue != NULL) {
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
        }
        if (pxCurrentTCB->ucNotifyState == taskWAITING_NoTIFICATION) {
                xReturn = pdFALSE;
        } else {
                pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
                xReturn = pdTRUE;
        }
        pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
        taskEXIt_CRITICAL();
        return xReturn; 
}      



