/*******************************************************************************
        => PendSV异常
*******************************************************************************/
// 调用PendSV_Handler异常
__asm void xPortPendSVHandler(void)
{
        //声明外部变量pxCurrentTCB，pxCurrentTCB是一个在task.c中定义的全局指针，
        //用于指向当前正在运行或者即将要运行的任务的任务控制块。
        extern pxCurrentTCB;
        //声明外部函数vTaskSwitchContext
        extern xTaskSwitchContext;
        
        //当前栈需按照8字节对齐，如果都是32位的操作则4个字节对齐即可。
        //在Cortex-M中浮 点运算是8字节的
        PRESERVE8
        
        //将PSP的值存储到r0。当进入PendSVC Handler时，
        //上一个任务运行的环境即：xPSR， PC（任务入口地址），
        //R14，R12，R3，R2，R1，R0（任务的形参）这些CPU寄存器的值会自动存储到任务的栈中，
        //剩下的r4~r11需要手动保存，   同时PSP会自动更新（在更新之前PSP指向任务栈的栈顶）
        mrs r0, psp
        isb

        // 加载pxCurentTCB的地址到r3
        ldr r3, =pxCurrentTCB
        // 加载pxCurentTCB到r2
        ldr r2, [r3]

        // 将CPU寄存器R4~R11的值存储到R0指向的地址
        stmdb r0!, {r4-r11}
        //将r0的值存储到r2指向的内容，r2等于pxCurrentTCB。
        //具体为将r0的值存储到上一个任务的栈顶指针pxTopOfStack，
        str r0, [r2]
        
                      //到此，上下文切换中的上文保存就完成了//
                     ////////////////////////////////////

        //将R3和R14压入堆栈，因为即将调用函数vTaskSwitchContext,
        //调用函数时，返回地址自动保存到R14中。所以一旦调用发生，R14的值会被覆盖，
        //因些需要入栈保护；R3保存的是当前激活的任务TCB指针(pxCurrentTCB)地址，
        //函数调用后会用到，因些要入栈保护。
        stmdb sp!, {r3, r14}

        // 进入临界段
        mov r0, #configMAX_SYSCALL_INTERRUPT_PRIORITY
        msr basepri, r0
        dsb
        isb
        // 调用vTaskSwitchCintext,寻找新的任务运行，
        // 通过使用变量pxCurrentTCB指向新的任务来实现任务切换
        bl vTaskSwitchContex
        //退出临界段
        mov r0, #0
        msr basepri, r0
        //恢复r3和r14
        ldmia sp!, {r3, r14}

        //当前激活的任务TCB第一项保存了任务堆栈的栈顶，现在栈顶值存入R0
        ldr r1, {r3}
        ldr r0, {r1}
        ldmia r0!, {r4-r11}
        msr psp, r0
        isb

        //异常发生时，R14中保存异常返回标志，包括返回后进入线程模式还是处理器模式，
        //使用的是PSP堆栈指针还是MSP堆栈指针，当调用 bx r14指令后，硬件会知道要从异常返回
        //然后出栈，这个时候堆栈指针PSP已经指向了新任务堆栈的正确位置，
        //当新任务的运行地址被出栈到PC寄存器后，新的任务也会被执行。
        bx r14
}



/*******************************************************************************
        => vTaskSwitchContext()
*******************************************************************************/
void vTaskSwitchContext(void)
{
        //判断任务调度器是否被挂起？
        //如果被挂起，不能进行任务的切换
        if (uxSchedulerSupended != (UBaseType_t)pdFALSE) {
                xYieldPending = pdTRUE;
        //如果任务调度器没有被挂起， 查找下一个最高优先级的任务
        } else {
                xYieldPending = pdFALSE;
         //获取下一个要运行的任务， 硬件方法或通用方法
        //Select a new task to run using either the generic C or port optimised asm code
                taskSELECT_HIGHEST_PRIORITY_TASK();
        }
}



/*******************************************************************************
        => 查找最高优先级任务方法
*******************************************************************************/
// 硬件方法
//_____________________________________________________________
硬件方法就是使用处理器自带的硬件指令来实现的，比如Cortex-M处理器就自带
有计算前导“0”个数指令：CLZ， 函数如下
#define taskSELECT_HIGHEST_PRIORITY_TASK() {                            \
        UBaseType_t uxTopPriority;                                      \
        portGET_HIGHEST_PRIORITY(uxTopPriority, uxTopReadyPriority);    \
        listGET_OWNER_OF_NEXT_ENTRY(pxCurrentTCB,                       \
                &(pxReadyTasksList[uxTopPriority]));                    \
}
1 通过函数“portGET_HIGHEST_PRIORITY()”获取处于就绪态的最高优先级，它本质是一个宏
#define protGET_HIGHEST_PRIORITY(uxTopPriorities) uxTopPriority =       \
        (31UL - (uint32_t)__clz((uxReadyPriorities)))
使用硬件方法“uxTopReadyPriority”就不代表处于就绪态最高优先级了， 而是使用每个 bit 代表
一个优先级， bit0代表优先级“0”， bit31代表优先级“31”， 当某个优先级有就绪任务的话就将其
对应的bit置“1”。 从这里可以看出使用硬件方法最多只能有32个优先能。 __clz(uxReadyPriorities)
就是计算“uxReadyPrioritiesr的前导零个数”， 前导零个数就是指从高高位开始（bit31）到第“1”个
为“1的bit”， 其间“0”的个数。
|—————————————————————————————————————————————————————————|
|    1000 0000 0000 0000        //前导零个数为“0”           |
|    0000 1000 1111 0001        //前导零个数为“4”           |
|—————————————————————————————————————————————————————————|
得到uxTopReadyPriority的前导零个数以后， 再用“31 - 前导零个数”，
得到的就是处于最高优先级的任务了。 比如“优先级为30”为此时处于就绪态
最高优先级的任务，30的前导零个数为“1”，那么得到的最高优先级任务就是（31-1=30）


// 通用方法
//_____________________________________________________________
#define taskSELECT_HIGHEST_PRIORITY_TASK() {                            \
        UBaseType_t uxTopPriority = uxTopReadyPriority;                 \
//Find the highest priority queue that contains ready tasks
//获取系统中最高优先级的任务， 如果获取的优先级是空的， 说明当前没有任务在运行        
        while (listLIST_IS_EMPTY(&(pxReadyTaskList[uxTopPriority])))    \
                --uxTopPriority;                                        \
        listGET_OWNER_OF_NEXT_ENTRY(pxCurrentTCB,                       \
                &(pxReadyTasksLists[uxTopPriority]));                   \
        uxTopReadyPriority = uxTopPriority;                             \
}
pxReadyTasksLists[]为就绪任务列表数组，一个优先级一个列表，同优先级的任务挂到相应的
列表中。 uxTopReadyPriority代表处于最高优先级值，每次创建任务的时候都会判断新任务的优先级
是否大于“uxTopReadyPriority”, 如果大于的话就将这个新任务的优先级赋值给变量“uxTopReadyPriority”




/*******************************************************************************
        => taskYIELD() 触发PendSV，产生上下文切换   
*******************************************************************************/
// 任务切换就是在就绪列表中寻找优先级最高的就绪任务，然后去执行该任务。
// portYIEDL的实现很简单，实际就是将PendSV的悬起位置“1”，
当没有其它中断运行的时候响应PendSV中断，去执行我们写好的PendSV中断服务函数
在里面实现任务的切换。
// 中断控制状态寄存器： 0xe00ed04
// Bit28 PENDSVSET: PendSV悬起位
#define protNVIC_INT_CTRL_REG (*((volatile uint32_t *)0xE000ED04))
#define portNVIC_PENDSVSET_BIT (1UL << 28UL)
#define portSY_FULL_READ_WRITE (15)
#define protYIELD()                                     \
{                                                       \
        // 触发PendSV，产生上下文切换                       \
        protNVIC_INT_CTRL_REG = protNVIC_PENDSVSET_BIT; \
        __dsb(protSY_FULL_READ_WRITE);                  \
        __isb(protSY_FULL_READ_WRITE);                  \
}





/*******************************************************************************
        => 启动任务调度器
*******************************************************************************/
#define portNVIC_SYSPRI2_REG  (*((volatile uint32_t *)0xe000ed20))
#define portNVIC_PENDSV_PRI   (((uint32_t) configKERNEL_INTERRUPT_PRIORITY ) << 16UL)
#define portNVIC_SYSTICK_PRI  (((uint32_t) configKERNEL_INTERRUPT_PRIORITY ) << 24UL)

BaseType_t xPortStartScheduler(void)
{
        //配置PendSV和SysTick的中断优先级为最低
        portNVIC_SYSPRI12_REG |= portNVIC_PENDSV_PRI;
        portNVIC_SYSPRI12_REG |= portNVIC_SYSTICK_PRI;

        // 启动第一个任务，不在返回
        prvStartFirstTask();

        // 不应该运行到这里
        return 0;
}


// 启动任务调度
void vTaskStartScheduler(void)
{
        //手动指定第一个运行的任务
        pxCurentTCB = &Task1TCB;

        //启动调度器
        if (xPortStartScheduler() != pdFALSE) {
        //调度器启动成功，同不会返回， 即不会运行到这里。
        }	
}



/*******************************************************************************
        => 启动第一个任务
*******************************************************************************/
__asm void prvStartFirstTask(void)
{
        PRESERVVE8

        // 在Cortex-M中，0xE000ED08是SCB_VTOR这个寄存器的地址
        // 里面存放的是向量表的起始地址，即MSP的地址
        ldr r0, =0xE000ED08//将0xE000ED08这个立即数加载到寄存器R0。
        ldr r0, [r0]//将0xE000ED08这个地址指向的内容加载到寄存器R0，
                    //此时R0等于SCB_VTOR寄存器的值,等于0x00000000，即memory的起始地址
        ldr r0, [r0]//将0x00000000这个地址指向的内容加载到R0，此时R0等于0x200008DB

        //将R0的值存储到MSP，此时MSP等于0x200008DB
        msr msp, r0

        // 使能全局中断
        cpsie i
        cpsie f
        dsb
        isb

        // 调用SVC去启动第一个任务
        svc 0
        nop
        nop
}



/*******************************************************************************
        => 调用SVC_Handler异常
*******************************************************************************/
__asm void vProtSVCHandler(void)
{
        extern pxCurrentTCB;
        PRESERVE8

        ldr r3, =pxCurrentTCB; //加载 pxCurrentTCB的地址到r3
        ldr r1, [r3]  //加载 pxCurrentTCB到r1
        ldr r0, [r1] //加载 加载 pxCurrentTCB指向的值到r0，目前r0的值等于第一个任务堆栈的栈顶
        ldmia r0!, {r4-r11}//以r0为基址，将栈里面的内容加载到r4-r11寄存器，同时r0会递增
        msr psp, r0//将r0的值，即任务的栈指针更新到psp
        isb
        mov r0, #0 //设置r0的值为“0”
        msr basepri, r0 //设置basepri寄存器的值为“0”，即所有的中断都没有屏蔽
        //当从SVC中断服务退出前，通过向r14寄存器最后4位按位或上 0x0D，
        //使得硬件在退出时使用进程堆栈指针psp完成出栈操作并返回后进入线程模式，返回Thumb状态。
        orr r14, #0xd

        //异常返回，这个时候栈中的剩下内容将会自动加载到CPU寄存器
        //xPSR, PC（任务入口地址）, r14, r12, r3, r2, r1, r0
        //同时PSP的值也将更新，即指向任务栈的栈顶
        bx r14
}
