/*******************************************************************************
        => USB
*******************************************************************************/
USB1.0          LS(Low-Speed)           1.5Mb/s         半双工             1996
USB1.1          FS(Full-Speed)           12Mb/s         半双工             1998
USB2.0          HS(High-Speed)          480Mb/s         半双工             2000
USB3.0          SuperSpeed                5Gb/s         全双工             2008
USB3.1 Gen 1    SuperSpeed                5Gb/s         全双工             2013
USB3.1 Gen 2    SuperSpeed               10Gb/s         全双工             2013



/*******************************************************************************
        => USB 字段（域）
*******************************************************************************/
数据包ID（PID）              // (8位: 4个类型位和4个错误检测位)
可选的设备地址                // 7位，最多可支持127个设备
可选的端点地址                // 4位，最多支持16个端点
可选的加载数据                // 0 到 1023 字节
可选的CRC                    // 5或16位


// 同步字段
//_____________________________________________________________
在USB系统中，主机和设备不共享一个时钟，这使使得接收方没有办法准确知道
发送方什么时候发送数据，尽管能检测到SOP，但是远远不够，所以需要同步字
段来进行同步，所以任何一个包都要以同步字段开始，同步字段（0x01）,经过
编码以后就是（01010100）


// PID 字段
// PID由一个低（4）位是类型字段， 高（4）位补码字段
//_____________________________________________________________
        PID     含义      说明
        0001    OUT      令牌OUT，  主机发送数据到USB设备
        1001    IN       令牌IN，   主机接收从USB设备发出的数据
        0101    SOF      令牌SOF，  此时作为一个帧或者小帧的开始信息
        1101    SETUP    令牌SETUP，主机向USB设备发送配置信息
        0010    ACK      握手ACK，  数据正确接收
        1010    NAK      握手NAK，  数据未正确接收
        1110    STALL    握手STALL，使用的端点被挂起
        0110    NYET     握手NYET， 接收方没有响应
        0011    DATA0    数据DATA0，数据包偶数包
        1011    DATA1    数据DATA1，数据包奇数包
        0111    DATA2    数据DATA2，此时作为一个高速同步事务的专用数据包
        1111    MDATA    //此时作为一个SPLIT事务的专用数据包      


// 地址字段（设备地址和端点地址）
//_____________________________________________________________
        设备地址    Addr0, Addr1, Addr2, Addr3, Addr4, Addr5, Addr6
        端点地址    Endp0, Endp1, Endp2, Endp3


// 帧号域
//_____________________________________________________________
        帧号为（11）位
        主机每发送一个帧，帧号都会自动加（1）
        当帧号达到（0x7FF）时，将归零重新开始计数


// 数据域
//_____________________________________________________________
        在 USB-1.0 版本中，只有DATA0和DATA1
        在 USB-2.0 版本中，增加了DATA2和MDATA


// CRC域
//_____________________________________________________________
        CRC5
        CRC16



/*******************************************************************************
        => USB 封包（由多个字段构成）
*******************************************************************************/
// 包结构，以同步字段开始，后跟PID字段，以EOP结束
//_____________________________________________________________
        SYNC  PID  地址  帧号  数据  CRC  EOP
 
 
// 根据（PID）将包分为 4 大类
//_____________________________________________________________
        令牌包，数据包，握手包，专用包


// 令牌包 (IN OUT SETUP)
//_____________________________________________________________
        Sync       IN      ADDR  ENDP  CRC5  EOP
        00000001   0x96     0     0    0x08  266.660 ns

        Sync       OUT     ADDR  ENDP  CRC5  EOP
        00000001   0x87     25    0    0x1E  266.660 ns

        Sync       SETUP   ADDR  ENDP  CRC5  EOP
        00000001   0xB4     0     0    0x08  266.660 ns


// 令牌包 SOF
//_____________________________________________________________
        Sync       SOF     Frame#    CRC5    EOP
        00000001   0xA5     1613     0x10    250.00 ns


// 数据包
//_____________________________________________________________
        Sync       DATA1    Data       CRC16     EOP
        00000001   0xD2     18bytes     0x10     266.660 ns


// 握手包
//_____________________________________________________________
        Sync       ACK     EOP
        00000001   0x4B    266.660 ns
        
    
        
/*******************************************************************************
        => USB 事务（由多个包构成）
*******************************************************************************/
        SETUP 事务
        OUT   事务
        IN    事务
        SOF   事务
        
        
// IN 事务（它是针对主机的） 主机接收数据
// IN 事物 = 令牌包 + 握手包 + 数据包
//_____________________________________________________________
IN，读取和上行是专用术语，表示从设备到主机的数据传输方式。 通过发送一个
IN令牌包，主机将启动这些数据传输。 目标设备将发送一个或多个数据包，主机
则发送一个握手数据包来作出响应。


// OUT 事务（它是针对主机的） 发送数据
//_____________________________________________________________
OUT，写入和下行是专用术语，指的是从主机到设备的数据传输方式。 在这种数据
传输类型中，主机发送相应的令牌数据包（包括 OUT或SETUP），然后发送一个
或多个数据包。 接收设备将发送相应的握手包，以结束数据传输。


// IN事务和OUT事务（只有发送成功，行进行DATA切换）
//_____________________________________________________________
// 如果主机发送IN事务时，设备没有响应，设备应该发（NAK）
// 此时主机的数据包里面，DATA0下一发的时候还是DATA0， DATA1下一发的时候还是DATA1
// 如果主机发送IN事务时，设备有响应， 设备应该发（ACK）
// 如果主机收到了ACK，那么DATA0下一发的时候还是DATA1， DATA1下一发的时候还是DATA0



// SETUP 事务
//_____________________________________________________________
SETUP事务定义了一种USB规定的数据格式，适用USB控制传输的建立阶段。
USB设备永远不能对SETUP事务经STALL和NAK来响应。 必须回：ACK





/*******************************************************************************
        => USB 传输（由多个事务成）
*******************************************************************************/
        Control Transfers       //控制传输
        Bulk Transfers          //大容量数据传输
        Synchrounous Transfers  //同步传输
        Interrupt Transfers     //中断传输
        
        
        
/*******************************************************************************
        => USB 描述符
*******************************************************************************/
        设备地址， 端点地址， 管道（FIFO）， 接口（功能）

        DEVICE                          1       //设备描述符
        CONFIGURATION                   2       //配置描述符
        STRING                          3       //字符串描述符
        INTERFACE                       4       //接口描述符
        ENDPOINT                        5       //端点描述符
        DEVICE_QUALIFIER                6       //设备限定描述符
        OTHER_SPEED_CONGIGURATION       7       //其它速度配置描述符
        INTERFACE_POEWR                 8       //接口速度描述符



        bLength                 //描述符大小（以字节为单位）
        bDescriptor Type        //描述符类型
        bFirstInterface         //描述符功能相关的第一个接口
        bInterfaceCount         //与功能相关邻近接口数量
        bFunctionClass          //类别代码
        bFunctionSubClass       //子类别代码
        bFunctionProtocol       //协议代码
        iFunction               //功能字符串描述索引



/*******************************************************************************
        => USB 枚举过程
*******************************************************************************/
        1 供电
        2 复位
        3 获取 Device Descriptor 前8个字节信息
        4 复位（可选）
        5 分配地址（后面使用新的设备地址来获取设备描述符）
        6 获取 Device Descriptor
        7 获取 Configuration Descripotr
        8 获取 String Descriptor
        9 配置

