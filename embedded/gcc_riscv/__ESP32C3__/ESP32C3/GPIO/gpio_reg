/*******************************************************************************
        => GPIO
*******************************************************************************/
// IO_MUX       
//      IO_MUX中每个 GPIO pad 有一组寄存器
//      每个 pad 可以配置成 GPIO 功能（连接 GPIO 交换矩阵）或者直连功能（旁路 GPIO 交换
//      矩阵， 快速信号如: 以太网、SDIO、SPI、JTAG、UART 等会旁路 GPIO 交换矩阵以实现更好的
//      高频数字特性。 所以高速信号会直接通过 IO_MUX 输入和输出。）
//      
//
// GPIO matrix  
//      GPIO交换矩阵是外设输入和输出信号和 pad 之间的全交换矩阵。
//      芯片输入方向：162 个外设输入信号都可以选择任意一个 GPIO pad 的输入信号。
//      芯片输出方向：每个 GPIO pad 的输出信号可来自 176 个外设输出信号中的任意一个。
//
//
// RTC IO_MUX 
//      RTC IO_MUX用于控制 GPIO pad 的低功耗和模拟功能, 只有部分 GPIO pad 具有这些功能





/*******************************************************************************
        => GPIO
*******************************************************************************/
// ESP32-C3
// ____________________________________________________________

        GPIO_OUT_REG            (0x0004)        // GPIO0 - GPIO21 输出寄存器
        GPIO_OUT_W1TS_REG       (0x0008)        // GPIO0 - GPIO21 输出置位寄存器
        GPIO_OUT_W1TC_REG       (0x000C)        // GPIO0 - GPIO21 输出清除寄存器


        GPIO_ENABLE_REG         (0x0020)        // GPIO0 - GPIO21 输出使能寄存器
        GPIO_ENABLE_W1TS_REG    (0x0024)        // GPIO0 - GPIO21 输出使能置位寄存器
        GPIO_ENABLE_W1TC_REG    (0x0028)        // GPIO0 - GPIO21 输出使能清除寄存器


        GPIO_STATUS_REG         (0x0044)        // 中断状态寄存器
        GPIO_STATUS_W1TS_REG    (0x0048)        // 中断状态置位寄存器
        GPIO_STATUS_W1TC_REG    (0x004C)        // 中断状态清除寄存器



        GPIO_STRAP_REG (0x0038)                 // Strapping 管脚寄存器
                                                // 只读（RO）
        // ____________________________________________________________ 
        bit 0                                   // 对应 GPIO2
        bit 2                                   // 对应 GPIO8
        bit 3                                   // 对应 GPIO9


        GPIO_IN_REG (0x003C)                    // GPIO 输入寄存器
                                                // 只读（RO）
        // ____________________________________________________________ 
        // GPIO0 ~ GPIO21 输入值
        0                                       // 表示低电平
        1                                       // 表示高电平


        GPIO_PCPU_INT_REG (0x005C)              // GPIO PRO_CPU 中断状态寄存器
                                                // 只读（RO）
        // ____________________________________________________________ 
        // bit0 ~ bit21 对应 GPIO0 ~ GPIO21
        // 如果 GPIO_PINn_REG 中 bit13 有效, 即使能 CPU 中断, 
        // 则此寄存器所示的中断状态应与 GPIO_STATUS_REG 中相应位的中断状态一致


        GPIO_PCPU_NMI_INT_REG (0x0060)          // GPIO PRO_CPU 非屏蔽中断状态寄存器
                                                // 只读（RO）
        // ____________________________________________________________ 
        // bit0 ~ bit21 对应 GPIO0 ~ GPIO21
        // 如果 GPIO_PINn_REG 中 bit14 有效, 即使能 CPU 非屏蔽中断,
        // 则该寄存器所示的中断状态应与 GPIO_STATUS_REG 中相应位的中断状态一致


        GPIO_STATUS_NEXT_REG (0x014C)           // GPIO 中断源寄存器
                                                // 只读（RO）
        // ____________________________________________________________ 
        // GPIO0 ~ GPIO21 中断源信号
        // 可以设置为上升沿中断 、 下降沿中断 、 电平敏感中断或任一沿中断



/*******************************************************************************
        => GPIO - PAD
*******************************************************************************/
// GPIO_PINn_REG (n: 0­ - 21)
// ____________________________________________________________
        GPIO_PINn_SYNC2_BYPASS  [1:0]   // 使能 GPIO 输入信号第二拍为上升沿或下降沿同步
                0                       // 关闭同步
                1                       // 下降沿同步
                2                       // 上升沿同步
                3                       // 上升沿同步
        GPIO_PINn_PAD_DRIVER    [2]     // 管脚驱动选择
                0                       // 正常输出
                1                       // 开漏输出
        GPIO_PINn_SYNC1_BYPASS  [4:3]   // 使能 GPIO 输入信号第一拍为上升沿或下降沿同步
                0                       // 关闭同步
                1                       // 下降沿同步
                2                       // 上升沿同步
                3                       // 上升沿同步
        GPIO_PINn_INT_TYPE      [9:7]   // 中断类型选择
                0                       // 禁用 GPIO 中断
                1                       // 上升沿触发
                2                       // 下降沿触发
                3                       // 任意边沿触发
                4                       // 低电平触发
                5                       // 高电平触发IO MUX 寄存器
        GPIO_PINn_WAKEUP_ENABLE [10]    // 使能GPIO唤醒
                                        // 仅能将CPU从Light-sleep模式唤醒
        GPIO_PINn_INT_ENA       [17:13] // 中断使能位
                bit 13                  // 使能CPU中断
                bit 14                  // 使能CPU非屏蔽中断
                
                
                
// GPIO_FUNCn_IN_SEL_CFG_REG (n: 0­ - 127) 
// ____________________________________________________________
        GPIO_FUNCn_IN_SEL       [4:0]   // 外设输入信号 n 的选择控制位
                                        // 此位选择 1 个 GPIO 交换矩阵输入管脚与信号连接
                = 0x1E                  // 与恒高电平输入信号连接
                = 0x1F                  // 与恒低电平输入信号连接
        GPIO_FUNCn_IN_INV_SEL   [5]     // 反转输入值
                1                       // 反转
                0                       // 不反转
        GPIO_SIGn_IN_SEL        [6]     // 旁路 GPIO 交换矩阵
                1                       // 通过 GPIO 交换矩阵;
                0                       // 直接通过 IO MUX 连接信号与外设
                
                


// GPIO_FUNCn_OUT_SEL_CFG_REG (n: 0­ - 21) 
// ____________________________________________________________   
        GPIO_FUNCn_OUT_SEL      [7:0]   //  GPIO 管脚输出 n 的选择控制位
                                        // 如果该字段设置为 Y (0<=Y<128),则
                                        // 外设输出信号 Y 将连接至 GPIO n 输出。
                                        // 如果该字段设置为 128,则寄存器 GPIO_OUT_REG 和
                                        // GPIO_ENABLE_REG 中的 BITn 将用作输出值和输出使能
        GPIO_FUNCn_OUT_INV_SEL  [8]     0:不反转输出值;         1:反转输出值
        GPIO_FUNCn_OEN_SEL      [9]     0:采用外设的输出使能信号; 1:强制使用 GPIO_ENABLE_REG 的 bitn用作输出使能信号。(R/W)
        GPIO_FUNCn_OEN_INV_SEL  [10]    0:不反转输出使能信号;     1:反转输出使能信号
        
        
        
        
// GPIO_CLOCK_GATE_REG (0x062C)
// ____________________________________________________________   
        GPIO_CLK_EN             [0]     // 时钟门控使能。 此位置 1,则时钟自由运转
        
        
        
        
/*******************************************************************************
        => GPIO - IOMUX
*******************************************************************************/


        // IO_MUX_GPIOn_REG(n: 0 - 21)
        // ____________________________________________________
        IO_MUX_GPIOn_MCU_OE     [0]     // 睡眠模式下，管脚的输出使能位
        IO_MUX_GPIOn_SLP_SEL    [1]     // 管脚睡眠模式选择
        IO_MUX_GPIOn_MCU_WPD    [2]     // 睡眠模式下，管脚的下拉电阻使能位
        IO_MUX_GPIOn_MCU_WPU    [3]     // 睡眠模式下，管脚的上拉电阻使能位
        IO_MUX_GPIOn_MCU_IE     [4]     // 睡眠模式下，管脚的输入使能位
        ........................................................................
        IO_MUX_GPIOn_FUN_WPD    [7]     // 1: 使能内部下拉电阻  0: 关闭内部下拉电阻
        IO_MUX_GPIOn_FUN_WPU    [8]     // 1: 使能内部上拉电阻  0: 关闭内部上拉电阻
        IO_MUX_GPIOn_FUN_IE     [9]     // 1: 输入使能         0: 关闭输入
        IO_MUX_GPIOn_FUN_DRV    [10:11] // 选择管脚驱动强度
                0                       // 5  mA
                1                       // 10 mA
                2                       // 20 mA
                3                       // 40 mA
        IO_MUX_GPIOn_MCU_SEL    [14:12] // 管脚复用功能选择
                0                       // 选择 Function 0
                1                       // 选择 Function 1
                2                       // 选择 Function 2
                3                       // 选择 Function 3
                4                       // 选择 Function 4
                5                       // 选择 Function 5
                6                       // 选择 Function 6
                7                       // 选择 Function 7
                
        IO_MUX_GPIOn_FILTER_EN  [15]    // 1: 滤波使能      0: 关闭滤波
        
        
        
