/*******************************************************************************
        => ESP32-C3 中断
*******************************************************************************/
        // ESP32-C3 采用非 RISC-V 标准规范中断机制
        // CPU 共有 31 个中断号 (1 ~ 31), 每个中断:
        •  优先级可设置为 1 ~ 15(数字越大优先级越高);
        •  可配置为电平触发或者边沿触发;
        •  可通过设置中断阈值屏蔽低优先级的中断



        // 分配外部中断源至 CPU 外部中断
        •  Source_X: 代表某个外部中断源, 其中 X 为中断源编号,详见表 8-1。
        •  INTERRUPT_CORE0_SOURCE_X_MAP_REG:CPU 外部中断源 (Source_X) 的中断配置寄存器。
        •  NUM_P:表示 CPU 中断编号, 范围: 1 ~ 31
        •  Interrupt_P:表示中断号为 Num_P 的 CPU 中断
        
        
        
/*******************************************************************************
        => ESP32-C3 中断寄存器
*******************************************************************************/
INTERRUPT_CORE0_SOURCE_x_MAP
        // 将中断源 SOURCE_x 映射至 CPU 外部中断



INTERRUPT_CORE0_INTR_STATUS_0_REG
        // 用于存储外部中断源的状态, 每一位均代表一个外部中断
        // 源的状态, 对应中断编号源:       0 ~ 31
        // 如果对应的位为 1, 则表示该中断源触发了中断（只读）



INTERRUPT_CORE0_INTR_STATUS_1_REG
        // 用于存储外部中断源的状态, 每一位均代表一个外部中断
        // 源的状态, 对应中断编号源:       32 ~ 61
        // 如果对应的位为 1, 则表示该中断源触发了中断（只读）
        

        
INTERRUPT_CORE0_CLOCK_GATE_REG
        // 置 1 强制使能中断寄存器的时钟门控 （读写）
        
        
        
INTERRUPT_CORE0_CPU_INT_ENABLE_REG
        // 在相应位写 1,即可使能对应的 CPU 中断（读写）
        
        
        
INTERRUPT_CORE0_CPU_INT_TYPE 
        // 配置 CPU 中断类型（读写）
        // 0: 电平触发
        // 1: 边沿触发
        


INTERRUPT_CORE0_CPU_INT_CLEAR 
        // 在相应位写 1, 即可清除对应的 CPU 中断（读写）
        
        
        
INTERRUPT_CORE0_CPU_INT_EIP_STATUS 
        // 用于存储 CPU 中断的阻塞状态
        
        
        
INTERRUPT_CORE0_CPU_PRI_n_MAP 
        // 用于设置 CPU 中断 n 的优先级, 可配置为 1 ~ 15
        // 数字越大,优先级越高（读写）
        
        
        
INTERRUPT_CORE0_CPU_INT_THRESH 
        // 用于设置  CPU 中断阈值。 仅当中断的优先级等于或高
        // 于该阈值, CPU 才会响应该中断（读写）

