/*******************************************************************************
        => esp32-c3（向队列中发送数据）
*******************************************************************************/

// 向队列中发送数据
//_____________________________________________________________
void tx_task(void *pvParam)
{
        QueueHandle_t q_handle;
        q_handle = (QueueHandle_t)pvParam;
        BaseType status;
        int i = 0;
        while (1) {
                status = xQueueSend(q_handle, &i, 0);
                if (status != pdPASS) {
                        printf("send fail!\n");
                } else {
                        printf("send done!\n");
                }
                i++;
                if (i == 8) {
                        i = 0;
                }
                vTaskDelay(1000 / protTICK_PERIOD_MS);
        }
}

// 从队列中接收数据
//_____________________________________________________________
void rx_task(void *pvParam)
{
        QueueHandle_t q_handle;
        q_handle = (QueueHandle_t)pvParam;
        BaseType_t status;
        int j = 0;
        while (1) {
                //如果接收数据缓冲器中的内容不为空，那么开始接收数据
                if (uxQueueMessagesWaiting(q_handle) != 0) {
                        status = xQueueReceive(q_handle, &j, 0);
                        if (status != pdPASS) {
                                printf("Receive fail!\n");
                        } else {
                                printf("Receive j = %d!\n");
                        }
                } else {
                        printf("NO data!\n");
                }

                vTaskDelay(1000 / portTICK_PERIOD_MS);
        }
}

//_____________________________________________________________
void app_main(void)
{
        QueueHandle_t q_handle;
        q_handle = xQueueCreate(5, sizeof(int));
        if (q_handle != NULL) {
                printf("Create queue successfully!\n");
                xTaskCreate(tx_task, "TX_TASK", 1024*5, (void *)q_handle, 1, NULL);
                xTaskCreate(rx_task, "RX_TASK", 1024*5, (void *)q_handle, 1, NULL);
        } else {
                printf("Can't create queue!\n");
        }
}



/*******************************************************************************
        => esp32-c3（向队列中发送数据）__结构体传递
*******************************************************************************/
typedef struct A_STRUCT {
        char id;
        char data;
} q_struct;


//_____________________________________________________________
void tx_task(void *pvParam)
{
        QueueHandle_t q_handle;
        q_handle = (QueueHandle_t)pvParam;
        BaseType_t status;
        q_struct usb = {1, 55};
        
        while (1) {
                status = xQueueSend(q_handle, &usb, 0);
                if (status != pdPASS) {
                        printf("send fail!\n");
                } else {
                        printf("send done!\n");
                }
                usb.id++;
                if (usb.id == 8) {
                        usb.id = 0;
                }
                vTaskDelay(1000 / portTICK_PERIOD_MS);
        }
}

//_____________________________________________________________
void rx(void *pvParam)
{
        QueueHandle_t q_handle;
        q_handle = (QueueHandle_t)pvParm;
        
        BaseType_t status;
        q_struct usb = {0, 0};
        
        while (1) {
                if (uxQueueMessageWaiting(q_handle) != 0) {
                        status = xQueueReceive(q_handle, &usb, 0);
                        if (status != pdPASS) {
                                printf("rec fail!\n");
                        } else {
                                printf("rec id = %d, data = %d\n", usb.id, usb.data);
                        }
                } else {
                        printf("no data!\n");
                }
                vTaskDelay(1000 / portTICK_PERIOD_MS);
        }
}

//_____________________________________________________________
void app_main(void)
{
        QueueHandle_t q_handle;
        q_handle = xQueueCreate(5, sizeof(q_struct));
        
        if (q_handle != NULL) {
                printf("Create queue successfully!\n");
                xTaskCreate(tx_task, "TX_TASK", 1024*5, (void *)q_hanle, 1, NULL);
                xTaskCreate(rx_task, "RX_TASK", 1024*5, (void *)q_hanle, 1, NULL);
        } else {
                printf("Can't create queue!\n");
        }
        
}



/*******************************************************************************
        => esp32-c3（向队列中发送数据）__指针传递
*******************************************************************************/
typedef struct A_STRUCT {
        char id;
        char data;
} q_struct;

//_____________________________________________________________
void tx_task(void *pvParam)
{
        QueueHandle_t q_handle;
        q_handle = (QueueHandle_t)pvParam;
        BaseType_t status;
        
        char *ptr_tx;
        int i = 0;
        
        while (1) {
                ptr_tx = (char *)malloc(50);            //分配内存
                snprintf(ptr_tx, 50, "Today is a Good day %d\r\n!", i);
                i++;
                status = xQueueSend(q_handle, &ptr_tx, 0);
                if (status != pdPASS) {
                        printf("send fail!\n");
                } else {
                        printf("send done!\n");
                }

                vTaskDelay(1000 / portTICK_PERIOD_MS);
        }
}

//_____________________________________________________________
void rx(void *pvParam)
{
        QueueHandle_t q_handle;
        q_handle = (QueueHandle_t)pvParm;
        BaseType_t status;
        char *ptr_rx;
        
        while (1) {
                if (uxQueueMessageWaiting(q_handle) != 0) {
                        status = xQueueReceive(q_handle, &ptr_rx, 0);
                        if (status != pdPASS) {
                                printf("rec fail!\n");
                        } else {
                                printf("rec id = %s", ptr_rx);
                        }
                        free(ptr_rx);           //释放这个变量所指向的内存空间
                } else {
                        printf("no data!\n");
                }
                vTaskDelay(1000 / portTICK_PERIOD_MS);
        }
}

//_____________________________________________________________
void app_main(void)
{
        QueueHandle_t q_handle;
        q_handle = xQueueCreate(5, sizeof(char *));
        
        if (q_handle != NULL) {
                printf("Create queue successfully!\n");
                xTaskCreate(tx_task, "TX_TASK", 1024*5, (void *)q_hanle, 1, NULL);
                xTaskCreate(rx_task, "RX_TASK", 1024*5, (void *)q_hanle, 1, NULL);
        } else {
                printf("Can't create queue!\n");
        }
        
}




/*******************************************************************************
        => esp32-c3（向队列中发送数据）
        => 队列多进，单出
*******************************************************************************/

//_____________________________________________________________
void send_task_00(void *pvParam)
{
        QueueHandle_t q_handle;
        q_handle = (QueueHandle_t)pvParam;
        BaseType_t status;
        int i = 0x00;
        while (1) {
                status = xQueueSend(q_handle, &i, 0);
                if (status != pdPASS) {
                        printf("send fail!\n");
                } else {
                        printf("send done!\n");
                }
                vTaskDelay(1000 / portTICK_PERIOD_MS);
        }
}

//_____________________________________________________________
void send_task_11(void *pvParam)
{
        QueueHandle_t q_handle;
        q_handle = (QueueHandle_t)pvParam;
        BaseType_t status;
        int i = 0x11;
        while (1) {
                status = xQueueSend(q_handle, &i, 0);
                if (status != pdPASS) {
                        printf("send fail!\n");
                } else {
                        printf("send done!\n");
                }
                vTaskDelay(1000 / portTICK_PERIOD_MS);
        }
}

//_____________________________________________________________
void rx_task(void *pvParam)
{
        QueueHandle_t q_handle;
        q_handle = (QueueHandle_t)pvParam;
        BaseType_t status;
        int i;
        while (1) {
                // 使用portMAX_DELAY，会让接收任务一直阻塞在这里，直到接收到数据
                // 接收任务的优先级别要 > 发送任务的优先级
                status = xQueueReceive(q_handle, &i, portMAX_DELAY);
                if (status != pdPASS) {
                        printf("rec fail!\n");
                } else {
                        printf("rec: %d!\n", i);
                }
        }
}

//_____________________________________________________________
void app_main(void)
{
        QueueHandle_t q_handle;
        q_handle = xQueueCreate(5, sizeof(int));
        if (q_handle != NULL) {
                printf("Create queue successfully!\n");
                xTaskCreate(send_task_00, "SEND_TASK_00", 1024*5, (void *)q_handle, 1, NULL);
                xTaskCreate(send_task_11, "SEND_TASK_00", 1024*5, (void *)q_handle, 1, NULL);
                xTaskCreate(rx_task_11,   "RX_TASK_00",   1024*5, (void *)q_handle, 2, NULL);
        } else {
                printf("Can't create queue!\n");
        }
}



/*******************************************************************************
        => esp32-c3 队列集合
        => TASK_00 => Queue_00  // 任务00的内容写入队列1中
        => TASK_00 => Queue_11  // 任务11的内容写入队列2中
*******************************************************************************/

//_____________________________________________________________
void send_task_00(void *pvParam)
{
        QueueHandle_t q_handle;
        q_handle = (QueueHandle_t)pvParam;
        BaseType_t status;
        int i = 0x00;
        while (1) {
                status = xQueueSend(q_handle, &i, 0);
                if (status != pdPASS) {
                        printf("send fail!\n");
                } else {
                        printf("send done!\n");
                }
                vTaskDelay(1000 / portTICK_PERIOD_MS);
        }
}

//_____________________________________________________________
void send_task_11(void *pvParam)
{
        QueueHandle_t q_handle;
        q_handle = (QueueHandle_t)pvParam;
        BaseType_t status;
        int i = 0x11;
        while (1) {
                status = xQueueSend(q_handle, &i, 0);
                if (status != pdPASS) {
                        printf("send fail!\n");
                } else {
                        printf("send done!\n");
                }
                vTaskDelay(1000 / portTICK_PERIOD_MS);
        }
}

//_____________________________________________________________
void rx_task(void *pvParam)
{
        QueueSetHandle_t q_set_handle;
        q_set_handle = (QueueSetHandle_t)pvParam;
        QueueMemberHandle_t q_data;             // 表示有数据的Queue
        BaseType_t status;                      // 返回状态
        int i;
        while (1) {
                // 使用portMAX_DELAY，会让接收任务一直阻塞在这里，直到接收到数据
                q_data = xQueueSelectFromSet(q_set_handle, portMAX_DELAY);
                // 从有数据的队列取出数据
                status = xQueueReceive(q_data, &i, portMAX_DELAY);
                if (status != pdPASS) {
                        printf("rec fail!\n");
                } else {
                        printf("rec: %d!\n", i);
                }
        }
}

//_____________________________________________________________
void app_main(void)
{
        QueueHandle_t q_handle_00;
        QueueHandle_t q_handle_01;
        q_handle_00 = xQueueCreate(5, sizeof(int));     //队列00长度为5
        q_handle_01 = xQueueCreate(5, sizeof(int));     //队列01长度为5
        QueueSetHandle_t q_set_handle;                  //队列集合
        q_set_handle = xQueueCreateSet(10);             //长度为5+5
        xQueueAddToSet(q_handle_00, q_set_handle);      //添加q_handle_00到队列集合
        xQueueAddToSet(q_handle_01, q_set_handle);      //添加q_handle_01到队列集合
        if ((q_handle_00 != NULL) && (q_handle_01 != NULL) && (q_set_handle != NULL)) {
                printf("Create queue successfully!\n");
                xTaskCreate(send_task_00, "SEND_TASK_00", 1024*5, (void *)q_handle_00, 1, NULL);
                xTaskCreate(send_task_11, "SEND_TASK_00", 1024*5, (void *)q_handle_01, 1, NULL);
                xTaskCreate(rx_task_11,    "RX_TASK_00", 1024*5, (void *)q_set_handle, 2, NULL);
        } else {
                printf("Can't create queue!\n");
        }
}



/*******************************************************************************
        => esp32-c3 队列邮箱
*******************************************************************************/

//_____________________________________________________________
void write_task(void *pvParam)
{
        //队列邮箱的写入数据为（1）
        QueueHandle_t mailbox;
        mailbox = (QueueHandle_t)pvParam;
        BaseType_t status;
        int i = 0;
        while (1) {
                status = xQueueOverWrite(mailbox, &i);
                if (status != pdPASS) {
                        printf("fail!\n");
                } else {
                        printf("done!\n");
                }
                i++;
                vTaskDelay(6000 / portTICK_PERIOD_MS);
        }
}

//_____________________________________________________________
void read_task_00(void *pvParam)
{
        QueueHandle_t mailbox;
        mailbox = (QueueHandle_t)pvParam;
        BaseType_t status;
        int i;
        while (1) {
                //等待时间为（0）
                status = xQueuePeek(mailbox, &i, 0);
                if (status != pdPASS) {
                        printf("read fail\n");
                } else {
                        printf("TASK_00 read i = %d\n");
                }
                vTaskDelay(1000 / portTICK_PERIOD_MS);
        }
}

//_____________________________________________________________
void read_task_01(void *pvParam)
{
        QueueHandle_t mailbox;
        mailbox = (QueueHandle_t)pvParam;
        BaseType_t status;
        int i;
        while (1) {
                //等待时间为（portMAX_DELAY）
                status = xQueuePeek(mailbox, &i, portMAX_DELAY);
                if (status != pdPASS) {
                        printf("read fail\n");
                } else {
                        printf("TASK_01 read i = %d\n");
                }
                vTaskDelay(1000 / portTICK_PERIOD_MS);
        }
}

//_____________________________________________________________
void app_main(void)
{
        QueueHandle_t m_handle;
        //创建队列邮箱，它只有一个数据，数据的宽度为（int）
        m_handle = xQueueCreate(1, sizeof(int));
        if (m_handle != NULL) {
                printf("create Mailbox successfully!\n");
                xTaskCreate(write_task, "WRITE_TASK", 1024, (void *)m_handle, 1, NULL);
                xTaskCreate(read_task_00, "READ_TASK_00", 1024, (void *)m_handle, 2, NULL);
                xTaskCreate(read_task_01, "READ_TASK_01", 1024, (void *)m_handle, 2, NULL);
        } else {
                printf("Error\n");
        }
}

