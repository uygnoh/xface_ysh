/*******************************************************************************
        => 
*******************************************************************************/
        // https://www.bilibili.com/read/cv7782482/
        
        
// 中断编程步骤  
// ECLIC（Enhanced Core Local Interrupt Controller，ECLIC）
// 全称是，改进型内核中断控制器， 是基于RISC-V标准的CLIC优化而来
// ____________________________________________________________
        1       // 打开全局中断
        2       // 设置优先级组
        3       // 打开对应设备的中断
        4       // 设置该设备中断的level和priority
        5       // 打开该设备具体某个功能的中断
        6       // 编写中断服务程序
        



/*******************************************************************************
        => 中断内核寄存器
*******************************************************************************/

// mstatus.MIE                  // 全局中断使能位
// ____________________________________________________________
        1                       // 全局中断打开
        0                       // 全局中断关闭
                                // set_csr是一个宏定义，具体内容为一串汇编
        set_csr(mstatus, 0x08)  // 打开全局中断





/*******************************************************************************
        => 中断寄存器
*******************************************************************************/
// ECLIC 是存储器映射单元， 它的基地址是（0xd2000000）
// ____________________________________________________________
        0x0000          cliccfg                 // 可读可写（8位）
        0x0004          clicinfo                // 只读（32位）
        0x000B          mth                     // 可读可写（8位）
        0x1000 + 4*i    clicinitp[i]            // 可读可写（8位）
        0x1001 + 4*i    clicintie[i]            // 可读可写（8位）
        0x1002 + 4*i    clicintattr[i]          // 可读可写（8位）
        0x1003 + 4*i    clicintctl[i]           // 可读可写（8位）
        // 上述的 i 表示中断的ID号码， 带有 [i] 后缀的寄存器表示这是针对
        // 每个中断源都会有一份独立的寄存器



// 设置优先级组
// ____________________________________________________________
   ECLIC中断控制器的每个中断源都可以设置不同的级别(Level)和优先级(Priority)
   Level越大级别越高， 高Level可以打断低Level的中断进而形成嵌套，在多个中断同
   时等待需要进行仲裁时要参考Level值。Priority是越大优先级越高，优先级不参与中
   断嵌套的判断，而是多个中断同时pending时，通过Priority来仲裁决定哪个中断发送到内核
// Bumblebee内核硬件实现使用了4位宽来配置Level和Priority，
// 可以通过读取 clicinfo 寄存器的CLICINTCTLBITS得到 
   CLICINTCTLBITS[24:21]        // 只读
                                // 用于指定 clicintctl[i] 寄存器中的有效位的比特数
   NUM_INTERRUPT [12:0]         // 只读
                                // 硬件支持的中断源数目

//      cliccfg
// ____________________________________________________________
  nlbits[4:1]           // 用于指定 clicintctl[i]寄存器中 Level 域的比特数
        |_______________________________|
        | Level         | Priortity     |
        |               |               |
        |  nlbits = 2   |               |
        |-------|-------|-------|-------|-------------------------------|
        |       |       |       |       |   1   |   1   |   1   |   1   |
        |-------|-------|-------|-------|-------|-------|-------|-------|
        |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
        |-------|-------|-------|-------|-------|-------|-------|-------|
        |                               |
        |                               |
        | <------ CLICINTCTLBITS ------>|    



//      mth             // 阈值寄存器
// ____________________________________________________________
        MTH[7:0]        // 中断目标的阈值级别寄存器
                


//      clicintip[i]    // 等待标志寄存器
// ____________________________________________________________
        IP[0]           // 中断源的等待标志位
                



//      clicintie[i]    // 使能寄存器
// ____________________________________________________________
        IE[0]           // 中断源的使能位



//      clicintattr[i]  // 中断源的属性寄存器
// ____________________________________________________________
        TRIG[2:0]
                        // 指定该中断源的电平或边沿属性
        SHV[0]
                        // 指定该中断源使用向量处理模式还是非向量处理模式



//      clicintctl[i]   // 中断源的控制寄存器
// ____________________________________________________________
// clicintctl[i] 寄存器是中断源的控制寄存器，软件可以通过改写该寄存器
// 配置中断源的级别（Level）和优先级（Priority）， Level和Priority
// 域根据 cliccfg.nlbits 的值动态进行分配 ECLIC 中断源的级别和优先级
// ____________________________________________________________
每个中断源的 clicintctl[i] 寄存器理论上有 8 位宽
其中硬件真正实现的位有效位数由 clicinfo寄存器的CLICINTCTLBITS 域来指定
譬如, 假设 clicinfo.CLICINTCTLBITS = 6,则表示 clicintctl[i]寄存器只
有高 6 位是真正的有效位, 最低 2 位的值为常数 1.

注意:CLICINTCTLBITS 域的值是只读的固定常数,软件无法对其进行编程改写
理论上的合理范围是[ 2 <= CLICINTCTLBITS <= 8 ]具体的实际值由处理器
内核的硬件实现决定。

在 clicintctl[i]寄存器的有效位中, 包含两个动态的域, 分别用于指定该中断源的级别
(Level)和优先级(Priority)。Level 域的宽度由 cliccfg 寄存器的 nlbits 域来指定
譬如, 假设 cliccfg.nlbits 域的值为 4, 则表示 clicintctl[i]寄存器 有效位的高 4 
位是 Level域, 其他的低位有效位为 Priority 域
注意: cliccfg.nlbits 域的值是可读可写域, 软件可以对其进行编程改写



// 中断源的级别(Level)相关的要点如下:
// ____________________________________________________
// Level 的数字值采取左对齐的方式进行解读,
// 有效位宽(由 cliccfg.nlbits 指定)之外
// 的低位全部采用补常数 1 的方式填充
注意:如果 cliccfg.nlbits > clicinfo.CLICINTCTLBITS
则意味着 nlbits 指示的位数超出了 clicintctl[i]寄存器的
有效位,则超出的位全部采用补常数 1 的方式填充。
注意:如果 cliccfg.nlbits = 0,Level 的数字值会被认为是
固定的 255.
// Level 的数字值越大, 则表示其级别越高
        
        
        
/*******************************************************************************
        => gdvf32 计时器中断和软件配置
*******************************************************************************/
外部中断    // 外部设备产生的中断
内部中断    // （计时器中断Timer-Interrupt + 软件中断Software-Interrupt）


        0xD100_0000     mtime_lo        // 计时器的低32位
        0xD100_0004     mtime_hi        // 计时器的高32位
        0xD100_0008     mtimecmp_lo     // 计时器比较值的低32位
        0xD100_000C     mtimecmp_hi     // 计时器比较值的高32位
        0xD100_0FF8     mstop           // 控制计时器暂停
        0xD100_0FFC     msip            // 生成软件中断



// 计时器中断
//_____________________________________________________________
        mtime     >= mtimecmp           // 则产生计时器中断
        mtimecpme >  mtime              // 则清除计时器中断



// 软件中断
// msip寄存器的最低位，软件写“1”产生软件中断，写“0”清除该中断
//_____________________________________________________________
        msip    |=  (0x01);             // 设置软件中断
        msip    &= ~(0x01);             // 清除软件中断



// 中断注册函数
//_____________________________________________________________
int32_t ECLIC_Register_IRQ(
        IRQn_Type IRQn,                 // 中断号码
        uint8_t shv,                    // 向量中断或是非向量中断
        ECLIC_TRIGGER_Type trig_mode,   // 触发模式
        uint8_t lvl,                   // 中断级别
        priority,                       // 中断优先级
        handler)                        // 中断处理程序




/*******************************************************************************
        => gdvf32 计时器中断和软件中断例程
*******************************************************************************/
        // RV32-gdvf32 内核中断例程
        // RV32-gdvf32 计时器中断运行10次， 软件中断运行10次，程序停止



#include <stdio.h>
#include "nuclei_sdk_soc.h"

#define mtimer_irq_handler              eclic_mtip_handler
#define software_irq_handler            eclic_msip_handler

static uint32_t int0_cnt = 0;           // 计时器中断计数
static uint32_t int1_cnt = 0;           // 软件中断计数
static uint32_t msip_trigger_flag = 1;  // 软件中断触发标志位


// 延时1秒
//_____________________________________________________
void wait_seconds(size_t n)
{
        uint64_t start_mtime, delta_mtime;
        uint64_t tmp = SysTimer_GetLoadValue();
        do {
                start_mtime = SysTimer_GetLoadValue() - start_mtime;
        } while (start_mtime == tmp);
        
        do {
                delta_time = SysTimer_GetLoadValue() - start_mtime;
        } while (delta_time < (n * SOC_TIMER_FREQ);
}


// RISCV32 内核计时器设置
//_____________________________________________________
void setup_timer(void)
{
        uint64_t now  = SysTimer_GetLoadValue();
        uint64_t then = now + 0.5 * SOC_TIMER_FREQ;
        SysTimer_SetCompareValue(then);
}


// RISCV32 内核计时器中断
//_____________________________________________________
void mtimer_irq_handler(void)
{
        int0_cnt++;
        wait_seconds(1);
        printf("MTimer IRQ handler %d\n", int0_cnt);
        // 获取当前计时器的值
        uint64_t now = SysTimer_GetLoadValue();
        // 0.5秒进一次中断
        SysTimer_SetCompareValue(now + 0.5 * SOC_TIMER_FREQ);
}

// RISCV32 内核软件中断
//_____________________________________________________
void software_irq_handler(void)
{
        SysTimer_ClearSWIRQ();
        int1_cnt++;
        printf("MTimer Soft IRQ handler %d\n", int1_cnt);
        msip_trigger_flag = 1;
}

int main(void)
{
        // 第一个例程（计时器中断）
        //_____________________________________________________
        uint32_t returnCode;
        returnCode = ECLIC_Register_IRQ(
                SysTimer_IRQn,                  // 计时器中断号码
                ECLIC_NON_VECTOR_INTERRUPT,     // 非向量中断
                ECLIC_LEVEL_TRIGGER,            // 触发方式
                1,                              // 中断级别
                0,                              // 中断优先级
                mtimer_irq_handler);            // 注册计时器中断
                    
        __enable_irq();                         //打开全局中断
        
        setup_timer();                          // 内核计时器设置
        while (int0_cnt < 10);                  // 计时器中断进入（10）， 则关闭它
        ECLIC_DisableIRQ(SysTimer_IRQn);        // 关闭计时器中断

        
        // 第二个例程（软件中断）
        //_____________________________________________________
        returnCode = ECLIC_Register_IRQ(
                SysTimerSW_IRQn,                // 软件中断号码
                ECLIC_NON_VECTOR_INTERRUPT,     // 非向量中断
                ECLIC_LEVEL_TRIGGER,            // 触发方式
                2,                              // 中断级别
                0,                              // 中断优先级
                software_irq_handler);          // 注册软件中断
                
        do {
                if (msip_trigger_flag == 1) {
                        msip_trigger_flag = 0;  // 清除软件中断标志
                        SysTimer_SetSWIRQ();    // 设置软件中断
                        wait_seconds(1);
                }
        } while (int_cnt < 10);
}



/*******************************************************************************
        => 外部中断
*******************************************************************************/
#include "gd32vf103.h"
#include "systick.h"

#define LED_PIN                 GPIO_PIN_7
#define LED_GPIO_PORT           GPIOA
#define LED_GPIO_CLK            RCU_GPIOA

#define KEY_PIN                 GPIO_PIN_0
#define KEY_GPIO_PORT           GPIOA
#define KEY_GPIO_CLK            RCU_GPIOA
#define KEY_EXTI                EXTI0_IRQn
#define KEY_PORT_SOURCE         GPIO_PORT_SOURCE_GPIOA
#define KEY_PIN_SOURCE          GPIO_PIN_SOURCE_0
#define KEY_LINE                EXTI_0

int main(void)
{
	//LED
	rcu_periph_clock_enable(LED_GPIO_CLK);	//enable the peripherals clock
	gpio_init(LED_GPIO_PORT, GPIO_MODE_OUT_PP,
			GPIO_OSPEED_50MHZ, LED_PIN);	//GPIO output with push-pull
	GPIO_BC(LED_GPIO_PORT) = LED_PIN;	//bit clear

	//KEY
	eclic_global_interrupt_enable();	//enable the global interrupt
	eclic_priority_group_set(ECLIC_PRIGROUP_LEVEL3_PRIO1);	//set the priority group
	rcu_periph_clock_enable(KEY_GPIO_CLK);	//enable the peripherals clock
	rcu_periph_clock_enable(RCU_AF);	//enable alternate function clock
	gpio_init(KEY_GPIO_PORT, GPIO_MODE_IN_FLOATING,
			GPIO_OSPEED_50MHZ, KEY_PIN);	//configure button pin as input
	eclic_irq_enable(KEY_EXTI, 1, 1);	//enable the EXTI0 interrupt @priority(1, 1)
	gpio_exti_source_select(KEY_PORT_SOURCE,
			KEY_PIN_SOURCE);	//select GPIO pin exti sources
	exti_init(KEY_LINE, EXTI_INTERRUPT, EXTI_TRIG_FALLING);	//configure key EXTI line
	exti_interrupt_flag_clear(KEY_LINE);	//clear EXTI lines pending flag

    while(1){
    	//GPIO_BOP(LED_GPIO_PORT) = LED_PIN; //1
    	//delay_1ms(1000);
    	//GPIO_BC(LED_GPIO_PORT) = LED_PIN; //0
        //delay_1ms(1000);
    }
}

void Toggle_LED(void) {
	gpio_bit_write(LED_GPIO_PORT, LED_PIN,
			(bit_status)(1-gpio_input_bit_get(LED_GPIO_PORT, LED_PIN)));
}

void EXTI0_IRQHandler(void)
{
    if(RESET != exti_interrupt_flag_get(KEY_LINE)){
        exti_interrupt_flag_clear(KEY_LINE);
        Toggle_LED();
    }
}



/*******************************************************************************
        => gdvf32 向量中断
*******************************************************************************/
retcode = ECLIC_Register_IRQ(   EXTI0_IRQn, ECLIC_NON_VECTOR_INTERRUPT, //非向量中断
                                ECLIC_LEVEL_TRIGGER, 3, 0, NULL );
retcode = ECLIC_Register_IRQ(   TIMER2_IRQn, ECLIC_VECTOR_INTERRUPT,    //向量中断
                                ECLIC_LEVEL_TRIGGER, 2, 0, NULL );
retcode = ECLIC_Register_IRQ(   TIMER1_IRQn, ECLIC_VECTOR_INTERRUPT,    //向量中断
                                ECLIC_LEVEL_TRIGGER, 1, 0, NULL );

#define SAVE_IRQ_CSR_CONTEXT()                          \
        rv_csr_t __mcause = __RV_CSR_READ(CSR_MCAUSE);  \
        rv_csr_t __mepc   = __RV_CSR_READ(CSR_MEPC);    \
        rv_csr_t __msubm  = __RV_CSR_READ(CSR_MSUBM);   \
        __enable_irq();
#define RESTORE_IRQ_CONTEXT()                           \
        __disable_irq();                                \
        __RV_CSR_WRITE(CSR_MSUBM, __msubm);             \
        __RV_CSR_WRITE(CSR_MEPC,  __mepc);              \
        __RV_CSR_WRITE(CSR_MCAUSE,__mcause);
        
//第一种向量中断
//_____________________________________________________________     
__INTERRUPT void TIMER1_IRQHandler(void)
{
        //Save CSR context
        SAVE_IRQ_CSR_CONTEXT();
        
        //中断处理程序
        
        //Restore CSR context
        RESTORE_IRQ_CSR_CONTEXT();
}


//第二种向量中断
//_____________________________________________________________    
__INTERRUPT void TIMER2_IRQHandler(void)
{
        //进入中断时间较快
}



/*******************************************************************************
        => gdvf32 for FreeRTOS
*******************************************************************************/
__attribute__(( weak )) void vPortSetupTimerInterrupt(void)
{
        TickType_t ticks = SYSTICK_TICK_CONST;
        
        // 配置System_Timer作为OS计时器中断，
        // 并且使能计时器中断（非向量中断）
        SysTick_Config(ticks);
        ECLIC_DisableIRQ(SysTimer_IRQ);
        ECLIC_SetLevelIRQ(SysTimer_IRQn, configKERNEL_INTERRUPT_PRIORITY);
        ECLIC_SetShvIRQ(SysTimer_IRQn, ECLIC_NON_VECTOR_INTERRUPT);
        ECLIC_EnableIRQ(Systimer_IRQn);
        
        // 使能软件中断（向量中断）
        ECLIC_SetShvIRQ(SysTimerSW_IRQn, ECLIC_VECTOR_INTERRUPT);
        ECLIC_SetLevelIRQ(SysTimerSW_IRQn, configKERNEL_INTERRUPT_PRIORITY);
        ECLIC_EnableIRQ(SysTimerSW_IRQn);
        
}


//计时器中断处理函数
void xPortSysTickHandler(void)
{
        portDISABLE_INTERRUPTS();
        //重置System_Timer
        SysTick_Reload(SYSTICK_TICK_CONST);
        if (xTaskIncrementTick() != pdFALSE) {
                //发起软件中断
                portYIELD();
        }
}


