/*******************************************************************************
        => RISC-V
*******************************************************************************/
// RISC-V 工作模式
// ____________________________________________________________
        00      User       mode         // U-用户模式
        01      Supervisor mode         // S-监管者模式
        10      Hypervisor mode         // H-超级管理员模式
        11      Machine    mode         // M-机器模式
        
        
        
// Trap
// ____________________________________________________________
        注意：在RISC-V架构中，进入异常、NMI或者中断也被统称为Trap



// CSR => Control and Status Rgister
// ____________________________________________________________
        CSR寄存器RISC-V的架构中定义了一些控制和状态寄存器
        用于配置或记录一些处理器核的运行状态。CSR寄存器是处
        理器核内部的寄存器，使用其专有的 12 位地址编码空间



/*******************************************************************************
        =>  Bumblebee 内核
*******************************************************************************/
       
        
// Bumblebee 内核支持两个特权模式(Privilege Modes)
// ____________________________________________________________
        1 机器模式(Machine Mode)是必须的模式,该 Privilege Mode 的编码是 0x3
        2 用户模式(User Mode)可配置的模式,   该 Privilege Mode 的编码是 0x0
        
        
        
// 机器模式(Machine Mode)
// ____________________________________________________________
        1 处理器内核被复位后,默认处于 Machine Mode。
        2 在 Machine Mode 下,程序能够访问所有的 CSR 寄存器。



// 用户模式(User Mode)
// ____________________________________________________________
// Bumblebee 内核有关 User Mode 的关键要点如下:
        1 在 User Mode 下只能够访问 User Mode 限定的 CSR 寄存器
        
        
        
// 机器子模式(Machine Sub-Mode)
// ____________________________________________________________
// msubm.TYP
// ____________________________________________________________
        Bumblebee 内核的 Machine Mode 
        可能处于四种不同的状态下,将之称之为机器子模式(Machine Sub-Mode):
  1     // 正常机器模式(该 Machine Sub-Mode 的编码是 0x0)
           处理器内核被复位之后,处于此子模式之下。处理器复位后
  2     // 中断处理模式(该 Machine Sub-Mode 的编码是 0x1)
           响应中断后处理器内核处于此状态
           如果不产生异常、NMI、中断,则一直正常运行于此模式之下
  3     // 异常处理模式(该 Machine Sub-Mode 的编码是 0x2)
           响应异常后处理器内核处于此状态
  4     // NMI 处理模式(该 Machine Sub-Mode 的编码是 0x3)
           响应 NMI 后处理器内核处于此状态

        Bumblebee 内核的四种机器子模式(Machine Sub-Mode) 
        反映在 CSR 寄存器 msubm 的TYP 域中,因此软件可以通过
        读取此 CSR 寄存器查看当前处于的 Machine Sub-Mode。
        
        
        
        
/*******************************************************************************
        =>  Bumblebee 内核模式切换
*******************************************************************************/
// 机器模式切换 到 用户模式
// ____________________________________________________________
// Switch Machine sub-mode to User mode




/*******************************************************************************
        =>  Bumblebee 内核异常机制
*******************************************************************************/
// RISC-V 架构中规定异常是不可以被屏蔽的
// 也就是说一旦发生了异常, 处理器一定会停止当前操作转而进入异常处理模式

// Machine Cause Register (mcause)
// ____________________________________________________________
        |-------------------------------------------------- 0 
        |     MXLEN - 1     |      MXLEN - 2                 |
        |-------------------|--------------------------------|
        |     Interrupt     |      Exception Code(WLRL)      |
        |-------------------|--------------------------------|
        Interrupt = 0           // 异常 （risc-v）
        Interrupt = 1           // 中断 （risc-v）



// 进入异常处理模式
// ____________________________________________________________
   1    停止执行当前程序流, 转而从 CSR 寄存器 mtvec 定义的 PC 地址开始执行
        // Bumblebee 内核遇到异常后跳入的 PC 地址由 CSR 寄存器 mtvec 指定
        // mtvec 寄存器是一个可读可写的 CSR 寄存器,因此软件可以编程更改其中的值
   2    更新相关 CSR 寄存器,分别是以下几个寄存器
                mcause(Machine Cause Register)
                mepc(Machine Exception Program Counter)
                mtval(Machine Trap Value Register )
                mstatus(Machine Status Register)
   3    切换 Privileg-Mode 至机器模式
        // 异常需要在机器模式(Machine Mode)下处理,在进入异常时,处理器内核的 
        // Privilege Mode 被更新为机器模式
   4    切换 Machine Sub-Mode 至异常处理模式
        // Bumblebee 内核的 Machine Sub-Mode 实时反映在 CSR 寄存器 msubm.TYP 域中。
        // 在进入异常时,处理器内核的 Machine Sub-Mode 被更新为异常处理模式,因此:
        CSR 寄存器 msubm.PTYP 域的值被更新为异常发生前的 Machine Sub-Mode(msubm.TYP 域的值)
        msubm.PTYP 域的作用是在异常结束之后, 能够使用 msubm.PTYP 的值恢复出异常发生之前的 Machine Sub-Mode 值。
        CSR 寄存器 msubm.TYP 域的值则被更新为“异常处理模式”,以实时反映当前的模式已经是“异常处理模式”



// 更新 CSR 寄存器 mcause
// mcause(Machine Cause Register)
// ____________________________________________________________
// 异常编号   异常和中断类型
     0       Instruction address misaligned（指令地址非对齐）
     1       Instruction access fault（指令访问错误）
     2       Illegal Instruction（非法指令）
     3       Breakpoint（断点）
     4       Load address misaligned（读存储器地址非对齐）
     5       Load access fault（读存储器访问错误）
     6       Store/AMO address misaligned（写存储器和AMO地址非对齐）
     7       Store/AMO access fault（写存储器和 AMO 访问错误）
     8       Environment call from U-mode（用户模式环境调用）
     11      Environment call from M-mode（机器模式环境调用）
// 更新 CSR 寄存器 mepc
// mepc(Machine Exception ProgramCounter)
// ____________________________________________________________
// Bumblebee 内核退出异常时的返回地址由 CSR 寄存器 mepc 保存。 在进入
// 异常时, 硬件将自动更新 mepc 寄存器的值,该寄存器将作为退出异常的返回
// 地址,在异常结束之后,能够使用它保存的 PC 值回到之前被异常停止执行的程序点
   注意:
        出现异常时,异常返回地址 mepc 的值被更新为当前发生异常的指令 PC。
        虽然 mepc 寄存器会在异常发生时自动被硬件更新,但是 mepc 寄存器本
        身也是一个可读可写的寄存器,因此软件也可以直接写该寄存器以修改其值。
// 更新 CSR 寄存器 mtval
// mtval(Machine Trap Value Register )
// ____________________________________________________________
// Bumblebee 内核在进入异常时,硬件将自动更新 CSR 寄存器 mtval 寄存器
// , 以反映引起当前异常的存储器访问地址或者指令编码:
   如果是由存储器访问造成的异常,譬如遭遇硬件断点 、 取指令 、 存储器读写
   造成的异常, 则将存储器访问的地址更新到 mtval 寄存器中。
   如果是由非法指令造成的异常,则将该指令的指令编码更新到 mtval 寄存器中。
// 更新 CSR 寄存器 mstatus
// mstatus(Machine Status Register)
// ____________________________________________________________
   mstatus.MPIE 域的值被更新为异常发生前 mstatus.MIE 域的值
   mstatus.MPIE 域的作用是在异常结束之后,能够使用 mstatus.MPIE 的值
   恢复出异常发生之前的 mstatus.MIE 值。
   
   mstatus.MIE 域的值则被更新成为 0(意味着进入异常服务程序后中断被全
   局关闭,所有的中断都将被屏蔽不响应)。

   mstatus.MPP 域的值被更新为异常发生前的 Privilege Mode
   mstatus.MPP 域的作用是在异常结束之后,能够使用 mstatus.MPP 的值
   恢复出异常发生之前的 Privilege Mode



/*******************************************************************************
        => Bumblebee 中断系统使用
*******************************************************************************/
        Bumblebee在机器模式下处理异常和中断，可选用RISC-V默认的PLIC中断控制器
        或者Bumblebee改进的中为控制器来处理中断，对过CSR寄存器（mtvec[5:0]）
        MODE = b000000          // 使用PLIC
        MODE = b000011          // 使用ECLIC
        // Set the interrupt processing mode to ECLIC mode
        li      t0, 0x3f
        csrc    CSR_MTVEC, t0
        csrs    CSR_MTVEC, 0x3
        
        

        
   

        
        
        
/*******************************************************************************
        => gdv32f103 启动流程
*******************************************************************************/
// risc-crt0.s
// ____________________________________________________________ 
_start:
        ......
        la      a0, trap_entry          // 将异常处理入口地址装入寄存器
        csrw    mtvec, a0               // 将a0寄存器的值写入到mtvec寄存器
        csrw    mcause, x0              // 将0写入到mcause寄存器

        ja      t1, _init               // t1 = _init， 将标签地址装入t1寄存器
        jalr    t1                      // pc = t1, 将t1中的值赋给程序计数器PC

// _init
// ____________________________________________________________ 
void _init() {
        SystemInit();                   // 初始化系统时钟
        eclic_init(ECLIC_NUM_INTERRUPTS);// 初始化ECLIC
        eclic_mode_enable();            // 启动ECLIC
}
        
// SystemInit
// ____________________________________________________________ 
void SystemInit(void) {
        RCU_CTL |= RCU_CTL_IRC8MEN;     // 选择内部时钟源RC8M
        ......
        RCU_INT  = 0x00FF0000U;         // 关闭时钟中断
        system_clock_config();          // 设置时钟
}    
        
        
        
// entry.s  非向量中断响应
// ____________________________________________________________ 




// GD32VF1xx_Startup.s  向量中断  
// ____________________________________________________________ 
        
        
        

