/*******************************************************************************
                                  信号量的创建
*******************************************************************************/
//cnt 表示创建信号量的最大个数
OS_EVENT *OSSemCreate(INT16U cnt)
{
        OS_EVENT *pevent;
        #if OS_CRITICAL_METHOD == 3u
        OS_CPU_SR cpu_sr = 0;
        #endif
        
        #ifdef OS_SAFETY_CRITICAL_IEC61508
        if (OSSafetyCriticalStartFlag == OS_TRUE) {
                OS_SAFETY_CRITICAL_EXCEPTION();
        }
        #endif
        
        if (OSIntNesting > 0u) {
                return ((OS_EVENT *)0);
        }
        
        OS_ENTER_CRITICAL();
        pevent = OSEventFreeList;
        if (OSEventFreeList != (OS_EVENT *)0) {
                //把事件空闲链表的表头，指向下一个节点
                OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
        }
        OS_EXIT_CRITICAL();
        
        if (pevent != (OS_EVENT *)0) {
                pevent->OSEventType     = OS_EVENT_TYPE_SEM;
                pevent->OSEventCnt      = cnt;
                //从事件空闲链表摘1个，事件列表控制块
                pevent->OSEvnetPtr      = (void *)0;
        
                #if OS_EVENT_NAME_EN > 0u
                pevent->OSEventName     = (INT8U *)(void *)"?";
                #endif 
                
                OS_EventWaitListInit(pevent);
        }
        return (pevent);
}



/*******************************************************************************
                                 信号量申请
*******************************************************************************/
void OSSemPend(
        OS_EVENT        *pevent,        
        INT32U           timeout,       //超时参数
        INT8U           *perr)          //错误参数
{
        #if OS_CRITICAL_METHOD == 3u
        OS_CPU_SR cpu_sr = 0u
        #endif
        
        #ifdef OS_SAFETY_CRITICAL
        if (perr == (INT8U *)0) {
                OS_SAFETY_CRITICAL_EXCEPTION();
        }
        #endif
        
        #if OS_ARG_CHK_EN > 0u
        //无效的事件
        if (pevent == (OS_EVENT *)0) {
                *perr = OS_ERR_PEVENT_NULL;
                return;
        }
        #endif
        
        //无效的事件类型
        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {
                *perr = OS_ERR_EVENT_TYPE;
                return;
        }
        
        //不能从中断申请信号量
        if (OSIntNesting > 0u) {
                *perr = OS_ERR_PEND_ISR;
                return;
        }
        //调度器加锁的情况下，不能申请信号量
        if (OSLockNesting > 0u) {
                *perr = OS_ERR_PEND_LOCKED;
                return;
        }
        
        OS_ENTER_CRITICAL();
        if (pevent->OSEventCnt > 0u) {
                pevent->OSEventCnt--;
                OS_EXIT_CRITICAL();
                *perr = OS_ERR_NONE;
                return;
        }
        //没有可用的信号量资源
        OSTCBCur->OSTCBStat     |= OS_STAT_SEM;
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
        OSTCBCur->OSTCBDly       = timeout;
        OS_EventTaskWait(pevent);
        OS_EXIT_CRITICAL();
        
        OS_Sched();
        
        OS_ENTER_CRITICAL();
        switch (OSTCBCur->OSTCBStatPend) {
        case OS_STAT_PEND_OK:                   //等到了
                *perr = OS_ERR_NONE;
                break;
        case OST_STAT_PEND_ABORT:               //被强制终止了
                *perr = OS_ERR_PEND_ABORT;
                break;
        case OS_STAT_PEND_TO:                   //超时了
        default:                                
                OS_EventTaskRemove(OSTCBCur, pevent);
                *perr = OS_ERR_TIMEOUT;
                break;
        }
        OSTCBCur->OSTCBStat     = OS_STAT_RDY;  //Set task statuc to ready
        OSTCBCur->OSTCBStatPend = OS_STAT_PEND_OK;//clear pend status
        OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;//clear event pointers
        
        #if (OS_EVETNT_MULTI_EN > 0u)
        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
        #endif
        OS_EXIT_CRITICAL();
}



/*******************************************************************************
                                  信号量归还
*******************************************************************************/
INT8U OSSemPost(OS_EVENT *pevent)
{
        #if OS_CRITICAL_METHOD == 3u
        OS_CPU_SR cpu_sr = 0;
        #endif
        
        #if OS_ARG_CHK_EN > 0
        if (pevent == (OS_EVENT *)0) {
                return (OS_ERR_PEVENT_NULL);
        }
        #endif
        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {
                return (OS_ERR_EVENT_TYPE);
        }
        
        
        OS_ENTER_CRITICAL();
        //事件控制块的指针所指向的事件就绪组 != 0, 
        //说明当前还有任务在申请你要还的那个信号量
        //See if any task waiting for semaphore
        if (pevent->OSEventGrp != 0) {
                //系统中可能有多个任务在申请这个信号量，找最高优先级的任务，让它就绪
                (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
                OS_EXIT_CRITICAL();
                OS_Sched();
                return (OS_ERR_NONE);
        }
        if (pevent->OSEventCnt < 65535u) {
                pevent->OSEventCnt++;
                OS_EXIT_CRITICAL();
                return (OS_ERR_NONE);
        }
        OS_EXIT_CRITICAL();
        return (OS_ERR_SEM_OVF);
}



/*******************************************************************************
                                   信号量删除
opt: Possible values for 'opt' argument of OSSemDel(), OSMboxDel(), OSQdel(), OSMutexDel()
        OS_DEL_NO_PEND :只有在没有任务等待这个信号量的时候，才进行删除操作
        OS_DEL_ALWAYS  :不管有没有任务在申请这个信号量，直接删除
 
*******************************************************************************/
OS_EVENT *OSSemDel(
        OS_EVENT        *pevent,
        INT8U            opt,
        INT8U           *perr)
{
        //
        #if OS_CRITICAL_METHOD == 3u
        OS_CPU_SR cpu_sr = 0u
        #endif
        //安全检查
        #ifdef OS_SAFETY_CRITICAL
        if (perr == (INT8U *)0) {
                OS_SAFETY_CRITICAL_EXCEPTION();
        }
        #endif
        //参数检查
        #if OS_ARG_CHK_EN > 0u
        if (pevent == (OS_EVENT *)0) {
                *perr = OS_ERR_PEVENT_NULL;
                return (pevent);
        }
        #endif
        //事件类型是否为信号量
        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {
                *perr = OS_ERR_PEVENT_TYPE;
                return (pevent);
        }
        //在中断程序中不允许删除
        if (OSIntNesting > 0u) {
                *perr = OS_ERR_DEL_ISR;
                return (pevent);
        }
        
        OS_ENTER_CRITICAL();
        //判断当前有没有任务在申请这个信号量
        //如果有的话中 tasks_waiting = OS_TRUE;
        if (pevent->OSEventGrp != 0) {
                tasks_waiting = OS_TRUE;
        } else {
                tasks_waiting = OS_FALSE;
        }
        
        switch (opt) {
        case OS_DEL_NO_PEND:
                //如果没有任务在申请信号量的情况下，才删除操作
                if (tasks_waiting == OS_FALSE) {
                
                #if OS_EVENT_NAME_EN > 0u
                        pevent->OSEventType     = (INT8U *)(void *)"?";
                #endif
                        //归还事件控制块
                        pevent->OSEventType     = OS_EVENT_TYPE_UNUSED;
                        pevent->OSEventPtr      = OSEventFreeList;
                        pevent->OSEventCnt      = 0u;
                        OSEventFreeList         = pevent;
                        OS_EXIT_CRITICAL();
                        *perr                   = OS_ERR_NONE;
                        pevent_return           = (OS_EVENT *)0;
                //否则，表明有任务在等待这个信号量，就不删除这个信号量
                } else {
                        OS_EXIt_CRITICAL();
                        *perr                   = OS_ERR_TASK_WAITING;
                        pevnet_return           = pevent;
                }
                break;
        //不管有没有任务在等待信号量，都删除
        case OS_DEL_ALWAYS:                      //Always delete the semaphore
                while (pevent->OSEventGrp != 0) {//Ready ALL tasks waiting for semaphore
                        //解除任务与事件的关系，单向解除事件那方面的关系，任务方面没有解除
                        //让所有申请这个信号量的任务，让它处于就绪态
                        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
                }
                #if OS_EVENT_NAME_EN > 0u
                pevent->OSEventType     = (INT8U *)(void *)"?";
                #endif
                //归还事件控制块
                pevnet->OSEventType     = OS_EVENT_TYPE_UNUSED;
                pevent->OSEventPtr      = OSEventFreeList;
                pevent->OSEventCnt      = 0u;
                OSEventFreeList         = pevent;
                OS_EXIT_CRITICAL();
                if (tasks_waiting == OS_TRUE) {
                        OS_Sched();
                }
                *perr                   = OS_ERR_NONE;
                pevent_return           = (OS_EVENT *)0;
                break;
        default:
                OS_EXIT_CRITICAL();
                *perr                   = OS_ERR_INVALID_OPT;
                pevent_return           = pevent;
                break;      
        }

        return (pevent_return);
}



/*******************************************************************************
                         OSSemAccept() 
### // 检查这个信号量对应的那个资源是否可用 //
### // 或者这个信号量对应的那个事件是否发生 //
*******************************************************************************/
OSSemAccept()   //可能申请信号量，可以申请消息邮箱
如果申请的这个信号量可用，那么直接用就好了，如果申请的这个信号量不可用，那么往下走，
也就是说这个函数所申请的信号量是可有可无的。这个函数不影响程序向下执行。它不会发生任务的切换。
return: 
        >  0 申请到了
        == 0 没有申请到


#if OS_SEM_ACCEPT_EN > 0u
INT16U OSSemAccept(OS_EVNET *pevent)
{
        INT16U  cnt;
        #if OS_CRITICAL()
        OS_CPU_SR cp_sr = 0;
        #endif
        
        #if OS_ARG_CHK_EN > 0
        if (pevnet == (OS_EVENT *)0) {
                return (0u);
        }
        #endif
        
        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {
                return (0u);
        }
        OS_ENTER_CRITICAL();
        cnt = pevnet->OSEventCnt;
        if (cnt > 0u) {                 //如果这个信号量大于0
                pevnet->OSEventCnt--;   //那我取一个就好了
        }
        OS_EXIT_CRITICAL();
        return (cnt);
}
#endif



/*******************************************************************************
                               OSSemPendAbort()
*******************************************************************************/
//这个函数强制终止这个信号量
INT8U OSSemPendAbort(
        OS_EVENT        *pevent,
        INT8U            opt,
        INT8U           *perr)
{
        INT8U   nbr_tasks;              //任务个数
        #if OS_CRITICAL_METHOD == 3u
        OS_CPU_SR cpu_sr = 0;
        #endif
        
        #ifdef OS_SAFETY_CRITICAL
        if (perr == (INT8U *)0) {
                OS_SAFETY_CRITICAL_EXCEPTION();
        }
        #endif
        
        #if OS_ARG_CHK_EN > 0u
        if (perr == (INT8U *)0) {
                *perr = OS_ERR_PEVENT_NULL;
                return (0u);
        }
        #endif
        if (pevnet->OSEventType != OS_EVENT_TYPE_SEM) {
                *perr = OS_ERR_EVENT_TYPE;
                return (0u);
        }
       OS_ENTER_CRITICAL();
       
       //如果不等于“0”，说明系统中有任务在申请这个信号量
       if (pevnet->OSEvntGrp != 0) {
                nbr_tasks = 0u;
                switch (opt) {
                //广播模式, 告诉所有申请这个信号量的任务都就绪
                case OS_PEND_OPT_BROADCAST:     
                        while (pevent->OSEventGrp != 0u) {
                                //它只在事件那里和信号量解除
                                (void)OS_EventTaskRdy(
                                        pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                                nbr_tasks++;
                        }
                        break;
                //单播模式， 只就绪申请这个信号量的最高优先级任务
                case OS_PEND_OPT_NONE:          
                default:
                        //它只在事件那里和信号量解除， 只执行一次
                        (void)OS_EvnetTaskRdy(pevnet, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                        nbr_tasks++;
                        break;
                }
                OS_EXIT_CRITICAL();
                OS_Sched();
                *perr = OS_ERR_PEND_ABORT:
                return (nbr_tasks);
       }
       
       //否则， 没有任务在申请这个信号量, 强行终止这种关系没有意义
       OS_EXIT_CRITICAL();
       *perr = OS_ERR_NONE;
       return (0u); 
}



/*******************************************************************************
                                 信号量查询
*******************************************************************************/
typedef struct os_sem_data {
        INT16U  OSCnt;                          //信号量数目
        OS_PRIO OSEventTbl[OS_EVENT_TBL_SIZE];  //信号量事件就绪表
        OS_PRIO OSEventGrp;                     //信号量事件就绪组
} OS_SEM_DATA;



INT8U OSSemQuery(OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
        INT8U   i;
        OS_PRIO *psrc;
        OS_PRIO *pdest;
        #if OS_CRITICAL_METHOD == 3u
        OS_CPU_SR cpu_sr = 0;
        #endif
        
        #if OS_ARG_CHK_EN > 0u
        if (pevent == (OS_EVNET *)0) {
                return (OS_ERR_PEVENT_NULL);
        }
        if (p_sem_data == (OS_SEM_DATA *)0) {
                return (OS_ERR_PDATA_NULL);
        }
        #endif
        
        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {
                return (OS_ERR_EVENT_TYPE);
        }
        
        OS_ENTER_CRITICAL();
        p_sem_data->OSEventGrp = pevent->OSEventGrp;
        psrc                   = &pevent->OSEventTbl[0];
        pdest                  = &p_sem_data->OSEventTbl[0];
        for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
                *pdest++ = *psrc++;
        }
        p_sem_data->OSCnt = pevnet->OSEvnetCnt;
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
}



/*******************************************************************************
                               信号量设定
*******************************************************************************/
//设置信号量的值
void OSSemSet(OS_EVENT *pevent, INT16 cnt, INT8U *perr)
{
        #if OS_CRITICAL_METHOD == 3u
        OS_CPU_SR cpu_sr = 0;
        #endif
        
        #ifdef OS_SAFETY_CRITICAL
        if (perr == (INT8U *)0) {
                OS_SAFETY_CRITICAL_EXCEPTION();
        }
        #endif
        
        #if OS_ARG_CHK_EN > 0u
        if (pevent == (OS_EVENT *)0) {
                *perr = OS_ERR_PEVENT_NULL;
                return;
        }
        #endif
        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {
                *perr = OS_ERR_EVENT_TYPE;
                return;
        }
        
        
        OS_ENTER_CRITICAL();
        *perr = OS_ERR_NONE;
        
        //See if semaphore already has a count
        if (pevent->OSEventCnt > 0u) {
                pevent->OSEvnetCnt = cnt; //Yes, set it to the new value specified
        } else {
                //See if task(s) waiting?
                if (pevnet->OSEventGrp == 0u) { // No, OK to set the value
                        pevent->OSEventCnt = cnt;
                } else {
                        *perr = OS_ERR_TASK_WAITING;
                }
        }
        OS_EXIT_CRITICAL();
}
