/*******************************************************************************
  函数名称: vTaskDelay()
  输入参数: xTicksToDelay，延时时间
  输出参数: 无
  函数功能: 相对延时函数
*******************************************************************************/
#if (INCLUDE_vTaskDelay == 1)
void vTaskDelay(const TickType_t xTicksToDelay)
{
        BaseType_t xAlreadyYielded = pdFALSE;
        
        //延时时间要大于（0）
        if (xTicksToDelay > (TickType_t)0U) {
                vTaskSupendAll();                       //任务挂起
                //添加当前任务到延时列表中
                prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
                xAlreadyYielded = xTaskResumAll();      //任务恢复
        }
        
        //看是否需要任务切换
        if (xAlreadyYielded == pdFALSE) {
                protYIELD_WITHIN_API();
        }
}

//添加当前任务到延时列表中
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,//要延时的时间
                                            const BaseType_t xCanBlockIndefinitely )
{
        TickType_t xTimeToWake;
        //获取当前系统时钟值
        const TickType_t xConstTickCount = xTickCount;

        #if ( INCLUDE_xTaskAbortDelay == 1 )
        pxCurrentTCB->ucDelayAborted = pdFALSE;
        #endif

        //把当前任务从就绪列表中移出
        if (uxListRemove( &( pxCurrentTCB->xStateListItem)) == (UBaseType_t) 0) {
                portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); 
        } else {
                mtCOVERAGE_TEST_MARKER();
        }

#if ( INCLUDE_vTaskSuspend == 1 )
        if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
                //添加当前任务到挂起列表中
                listINSERT_END(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
        } else {
                xTimeToWake = xConstTickCount + xTicksToWait;
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
                //如果（32位数据溢出）
                if (xTimeToWake < xConstTickCount) {
                        vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
                } else {
                        vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
                        //xNextTaskUnblockTime保存的是下一个任务要唤醒的延时（时间点）
                        if ( xTimeToWake < xNextTaskUnblockTime ) {
                                xNextTaskUnblockTime = xTimeToWake;
                        } else {
                                mtCOVERAGE_TEST_MARKER();
                        }
                }
        }
#else /* INCLUDE_vTaskSuspend */
        xTimeToWake = xConstTickCount + xTicksToWait;

        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );

        if ( xTimeToWake < xConstTickCount ) {
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
        } else {
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );

                if ( xTimeToWake < xNextTaskUnblockTime ) {
                        xNextTaskUnblockTime = xTimeToWake;
                } else {
                        mtCOVERAGE_TEST_MARKER();
                }
        }

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
#endif /* INCLUDE_vTaskSuspend */
}

/*******************************************************************************
  函数名称: vTaskDelayUntil()
  输入参数: xTicksToDelay，延时时间
  输出参数: 无
  函数功能: 绝对延时函数
*******************************************************************************/
#if (INCLUDE_xTaskDelayUntil == 1)
//______________________________________________________________________________
BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
{
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
        
        //挂起所有任务
        vTaskSuspendAll();

        const TickType_t xConstTickCount = xTickCount;

        xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

        if ( xConstTickCount < *pxPreviousWakeTime ) {
                if ( (xTimeToWake < *pxPreviousWakeTime) && (xTimeToWake > xConstTickCount) ) {
                        xShouldDelay = pdTRUE;
                } else {
                        mtCOVERAGE_TEST_MARKER();
                }
        } else {
                if ( (xTimeToWake < *pxPreviousWakeTime) || (xTimeToWake > xConstTickCount) ) {
                        xShouldDelay = pdTRUE;
                } else {
                        mtCOVERAGE_TEST_MARKER();
                }
        }

            
        *pxPreviousWakeTime = xTimeToWake;

        if ( xShouldDelay != pdFALSE ) {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
        } else {
                mtCOVERAGE_TEST_MARKER();
        }
        
        //恢复所有任务
        xAlreadyYielded = xTaskResumeAll();


        if ( xAlreadyYielded == pdFALSE ) {
                portYIELD_WITHIN_API();
        } else {
                mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
}
#endif /* INCLUDE_xTaskDelayUntil */

