
STM32F103ZET6_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002418  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08002608  08002608  00012608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f0  080026f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080026f0  080026f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f0  080026f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f4  080026f4  000126f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080026f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000070  08002768  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08002768  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008439  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c32  00000000  00000000  000284d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0002a108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  0002a808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b71  00000000  00000000  0002ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008034  00000000  00000000  00044991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094ce2  00000000  00000000  0004c9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e16a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002130  00000000  00000000  000e16fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000070 	.word	0x20000070
 800020c:	00000000 	.word	0x00000000
 8000210:	080025f0 	.word	0x080025f0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000074 	.word	0x20000074
 800022c:	080025f0 	.word	0x080025f0

08000230 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000236:	f107 0308 	add.w	r3, r7, #8
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <MX_GPIO_Init+0x5c>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a10      	ldr	r2, [pc, #64]	; (800028c <MX_GPIO_Init+0x5c>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6193      	str	r3, [r2, #24]
 8000250:	4b0e      	ldr	r3, [pc, #56]	; (800028c <MX_GPIO_Init+0x5c>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	f003 0304 	and.w	r3, r3, #4
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PA02_GPIO_Port, LED_PA02_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	2104      	movs	r1, #4
 8000260:	480b      	ldr	r0, [pc, #44]	; (8000290 <MX_GPIO_Init+0x60>)
 8000262:	f000 fc4b 	bl	8000afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PA02_Pin;
 8000266:	2304      	movs	r3, #4
 8000268:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026a:	2301      	movs	r3, #1
 800026c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026e:	2300      	movs	r3, #0
 8000270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000272:	2302      	movs	r3, #2
 8000274:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_PA02_GPIO_Port, &GPIO_InitStruct);
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	4619      	mov	r1, r3
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <MX_GPIO_Init+0x60>)
 800027e:	f000 faa9 	bl	80007d4 <HAL_GPIO_Init>

}
 8000282:	bf00      	nop
 8000284:	3718      	adds	r7, #24
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000
 8000290:	40010800 	.word	0x40010800

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 f968 	bl	800056c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f803 	bl	80002a6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f7ff ffc6 	bl	8000230 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <main+0x10>

080002a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b090      	sub	sp, #64	; 0x40
 80002aa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	2228      	movs	r2, #40	; 0x28
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 fa33 	bl	8001720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c8:	2301      	movs	r3, #1
 80002ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d6:	2301      	movs	r3, #1
 80002d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002da:	2302      	movs	r3, #2
 80002dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fc1c 	bl	8000b2c <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002fa:	f000 f819 	bl	8000330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000302:	2302      	movs	r3, #2
 8000304:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2102      	movs	r1, #2
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fe87 	bl	800102c <HAL_RCC_ClockConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000324:	f000 f804 	bl	8000330 <Error_Handler>
  }
}
 8000328:	bf00      	nop
 800032a:	3740      	adds	r7, #64	; 0x40
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000334:	b672      	cpsid	i
}
 8000336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000338:	e7fe      	b.n	8000338 <Error_Handler+0x8>
	...

0800033c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <HAL_MspInit+0x5c>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a14      	ldr	r2, [pc, #80]	; (8000398 <HAL_MspInit+0x5c>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <HAL_MspInit+0x5c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <HAL_MspInit+0x5c>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <HAL_MspInit+0x5c>)
 8000360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000364:	61d3      	str	r3, [r2, #28]
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <HAL_MspInit+0x5c>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <HAL_MspInit+0x60>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <HAL_MspInit+0x60>)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	40021000 	.word	0x40021000
 800039c:	40010000 	.word	0x40010000

080003a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <NMI_Handler+0x4>

080003a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003aa:	e7fe      	b.n	80003aa <HardFault_Handler+0x4>

080003ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <MemManage_Handler+0x4>

080003b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <BusFault_Handler+0x4>

080003b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <UsageFault_Handler+0x4>

080003be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr

080003ca <SysTick_Handler>:
/* USER CODE BEGIN 1 */
extern void xPortSysTickHandler(void);

//systick中断服务函数
void SysTick_Handler(void)
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	af00      	add	r7, sp, #0
    #if (INCLUDE_xTaskGetSchedulerState  == 1 )
      if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
      {
    #endif  /* INCLUDE_xTaskGetSchedulerState */
        xPortSysTickHandler();
 80003ce:	f001 f95b 	bl	8001688 <xPortSysTickHandler>
    #if (INCLUDE_xTaskGetSchedulerState  == 1 )
      }
    #endif  /* INCLUDE_xTaskGetSchedulerState */
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b086      	sub	sp, #24
 80003da:	af00      	add	r7, sp, #0
 80003dc:	60f8      	str	r0, [r7, #12]
 80003de:	60b9      	str	r1, [r7, #8]
 80003e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
 80003e6:	e00a      	b.n	80003fe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003e8:	f3af 8000 	nop.w
 80003ec:	4601      	mov	r1, r0
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	1c5a      	adds	r2, r3, #1
 80003f2:	60ba      	str	r2, [r7, #8]
 80003f4:	b2ca      	uxtb	r2, r1
 80003f6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	3301      	adds	r3, #1
 80003fc:	617b      	str	r3, [r7, #20]
 80003fe:	697a      	ldr	r2, [r7, #20]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	429a      	cmp	r2, r3
 8000404:	dbf0      	blt.n	80003e8 <_read+0x12>
	}

return len;
 8000406:	687b      	ldr	r3, [r7, #4]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	e009      	b.n	8000436 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	1c5a      	adds	r2, r3, #1
 8000426:	60ba      	str	r2, [r7, #8]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	3301      	adds	r3, #1
 8000434:	617b      	str	r3, [r7, #20]
 8000436:	697a      	ldr	r2, [r7, #20]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	429a      	cmp	r2, r3
 800043c:	dbf1      	blt.n	8000422 <_write+0x12>
	}
	return len;
 800043e:	687b      	ldr	r3, [r7, #4]
}
 8000440:	4618      	mov	r0, r3
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <_close>:

int _close(int file)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	return -1;
 8000450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000454:	4618      	mov	r0, r3
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800046e:	605a      	str	r2, [r3, #4]
	return 0;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <_isatty>:

int _isatty(int file)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
	return 1;
 8000484:	2301      	movs	r3, #1
}
 8000486:	4618      	mov	r0, r3
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
	return 0;
 800049c:	2300      	movs	r3, #0
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004b0:	4a14      	ldr	r2, [pc, #80]	; (8000504 <_sbrk+0x5c>)
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <_sbrk+0x60>)
 80004b4:	1ad3      	subs	r3, r2, r3
 80004b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004bc:	4b13      	ldr	r3, [pc, #76]	; (800050c <_sbrk+0x64>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d102      	bne.n	80004ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <_sbrk+0x64>)
 80004c6:	4a12      	ldr	r2, [pc, #72]	; (8000510 <_sbrk+0x68>)
 80004c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <_sbrk+0x64>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4413      	add	r3, r2
 80004d2:	693a      	ldr	r2, [r7, #16]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d207      	bcs.n	80004e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d8:	f001 f8f8 	bl	80016cc <__errno>
 80004dc:	4603      	mov	r3, r0
 80004de:	220c      	movs	r2, #12
 80004e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004e6:	e009      	b.n	80004fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <_sbrk+0x64>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <_sbrk+0x64>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	4a05      	ldr	r2, [pc, #20]	; (800050c <_sbrk+0x64>)
 80004f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004fa:	68fb      	ldr	r3, [r7, #12]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20010000 	.word	0x20010000
 8000508:	00000400 	.word	0x00000400
 800050c:	2000008c 	.word	0x2000008c
 8000510:	20000358 	.word	0x20000358

08000514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000522:	490d      	ldr	r1, [pc, #52]	; (8000558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000538:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000546:	f7ff ffe5 	bl	8000514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054a:	f001 f8c5 	bl	80016d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054e:	f7ff fea1 	bl	8000294 <main>
  bx lr
 8000552:	4770      	bx	lr
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800055c:	080026f8 	.word	0x080026f8
  ldr r2, =_sbss
 8000560:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000564:	20000354 	.word	0x20000354

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>
	...

0800056c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_Init+0x28>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <HAL_Init+0x28>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057c:	2003      	movs	r0, #3
 800057e:	f000 f8f5 	bl	800076c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000582:	2000      	movs	r0, #0
 8000584:	f000 f808 	bl	8000598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000588:	f7ff fed8 	bl	800033c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40022000 	.word	0x40022000

08000598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_InitTick+0x54>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <HAL_InitTick+0x58>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80005b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f8ff 	bl	80007ba <HAL_SYSTICK_Config>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e00e      	b.n	80005e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b0f      	cmp	r3, #15
 80005ca:	d80a      	bhi.n	80005e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005cc:	2200      	movs	r2, #0
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005d4:	f000 f8d5 	bl	8000782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <HAL_InitTick+0x5c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	e000      	b.n	80005e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000008 	.word	0x20000008
 80005f4:	20000004 	.word	0x20000004

080005f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return uwTick;
 80005fc:	4b02      	ldr	r3, [pc, #8]	; (8000608 <HAL_GetTick+0x10>)
 80005fe:	681b      	ldr	r3, [r3, #0]
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	20000340 	.word	0x20000340

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	; (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db0a      	blt.n	800069a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	b2da      	uxtb	r2, r3
 8000688:	490c      	ldr	r1, [pc, #48]	; (80006bc <__NVIC_SetPriority+0x4c>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	440b      	add	r3, r1
 8000694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000698:	e00a      	b.n	80006b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <__NVIC_SetPriority+0x50>)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	3b04      	subs	r3, #4
 80006a8:	0112      	lsls	r2, r2, #4
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	761a      	strb	r2, [r3, #24]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	f1c3 0307 	rsb	r3, r3, #7
 80006de:	2b04      	cmp	r3, #4
 80006e0:	bf28      	it	cs
 80006e2:	2304      	movcs	r3, #4
 80006e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3304      	adds	r3, #4
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d902      	bls.n	80006f4 <NVIC_EncodePriority+0x30>
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3b03      	subs	r3, #3
 80006f2:	e000      	b.n	80006f6 <NVIC_EncodePriority+0x32>
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43da      	mvns	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	401a      	ands	r2, r3
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43d9      	mvns	r1, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	4313      	orrs	r3, r2
         );
}
 800071e:	4618      	mov	r0, r3
 8000720:	3724      	adds	r7, #36	; 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000738:	d301      	bcc.n	800073e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073a:	2301      	movs	r3, #1
 800073c:	e00f      	b.n	800075e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <SysTick_Config+0x40>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000746:	210f      	movs	r1, #15
 8000748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800074c:	f7ff ff90 	bl	8000670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <SysTick_Config+0x40>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <SysTick_Config+0x40>)
 8000758:	2207      	movs	r2, #7
 800075a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	e000e010 	.word	0xe000e010

0800076c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff49 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000782:	b580      	push	{r7, lr}
 8000784:	b086      	sub	sp, #24
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000794:	f7ff ff5e 	bl	8000654 <__NVIC_GetPriorityGrouping>
 8000798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	6978      	ldr	r0, [r7, #20]
 80007a0:	f7ff ff90 	bl	80006c4 <NVIC_EncodePriority>
 80007a4:	4602      	mov	r2, r0
 80007a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff5f 	bl	8000670 <__NVIC_SetPriority>
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ffb0 	bl	8000728 <SysTick_Config>
 80007c8:	4603      	mov	r3, r0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b08b      	sub	sp, #44	; 0x2c
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007e6:	e179      	b.n	8000adc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007e8:	2201      	movs	r2, #1
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	4013      	ands	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	429a      	cmp	r2, r3
 8000802:	f040 8168 	bne.w	8000ad6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	4aa0      	ldr	r2, [pc, #640]	; (8000a8c <HAL_GPIO_Init+0x2b8>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d05e      	beq.n	80008ce <HAL_GPIO_Init+0xfa>
 8000810:	4a9e      	ldr	r2, [pc, #632]	; (8000a8c <HAL_GPIO_Init+0x2b8>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d875      	bhi.n	8000902 <HAL_GPIO_Init+0x12e>
 8000816:	4a9e      	ldr	r2, [pc, #632]	; (8000a90 <HAL_GPIO_Init+0x2bc>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d058      	beq.n	80008ce <HAL_GPIO_Init+0xfa>
 800081c:	4a9c      	ldr	r2, [pc, #624]	; (8000a90 <HAL_GPIO_Init+0x2bc>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d86f      	bhi.n	8000902 <HAL_GPIO_Init+0x12e>
 8000822:	4a9c      	ldr	r2, [pc, #624]	; (8000a94 <HAL_GPIO_Init+0x2c0>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d052      	beq.n	80008ce <HAL_GPIO_Init+0xfa>
 8000828:	4a9a      	ldr	r2, [pc, #616]	; (8000a94 <HAL_GPIO_Init+0x2c0>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d869      	bhi.n	8000902 <HAL_GPIO_Init+0x12e>
 800082e:	4a9a      	ldr	r2, [pc, #616]	; (8000a98 <HAL_GPIO_Init+0x2c4>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d04c      	beq.n	80008ce <HAL_GPIO_Init+0xfa>
 8000834:	4a98      	ldr	r2, [pc, #608]	; (8000a98 <HAL_GPIO_Init+0x2c4>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d863      	bhi.n	8000902 <HAL_GPIO_Init+0x12e>
 800083a:	4a98      	ldr	r2, [pc, #608]	; (8000a9c <HAL_GPIO_Init+0x2c8>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d046      	beq.n	80008ce <HAL_GPIO_Init+0xfa>
 8000840:	4a96      	ldr	r2, [pc, #600]	; (8000a9c <HAL_GPIO_Init+0x2c8>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d85d      	bhi.n	8000902 <HAL_GPIO_Init+0x12e>
 8000846:	2b12      	cmp	r3, #18
 8000848:	d82a      	bhi.n	80008a0 <HAL_GPIO_Init+0xcc>
 800084a:	2b12      	cmp	r3, #18
 800084c:	d859      	bhi.n	8000902 <HAL_GPIO_Init+0x12e>
 800084e:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <HAL_GPIO_Init+0x80>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	080008cf 	.word	0x080008cf
 8000858:	080008a9 	.word	0x080008a9
 800085c:	080008bb 	.word	0x080008bb
 8000860:	080008fd 	.word	0x080008fd
 8000864:	08000903 	.word	0x08000903
 8000868:	08000903 	.word	0x08000903
 800086c:	08000903 	.word	0x08000903
 8000870:	08000903 	.word	0x08000903
 8000874:	08000903 	.word	0x08000903
 8000878:	08000903 	.word	0x08000903
 800087c:	08000903 	.word	0x08000903
 8000880:	08000903 	.word	0x08000903
 8000884:	08000903 	.word	0x08000903
 8000888:	08000903 	.word	0x08000903
 800088c:	08000903 	.word	0x08000903
 8000890:	08000903 	.word	0x08000903
 8000894:	08000903 	.word	0x08000903
 8000898:	080008b1 	.word	0x080008b1
 800089c:	080008c5 	.word	0x080008c5
 80008a0:	4a7f      	ldr	r2, [pc, #508]	; (8000aa0 <HAL_GPIO_Init+0x2cc>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d013      	beq.n	80008ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008a6:	e02c      	b.n	8000902 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	623b      	str	r3, [r7, #32]
          break;
 80008ae:	e029      	b.n	8000904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	3304      	adds	r3, #4
 80008b6:	623b      	str	r3, [r7, #32]
          break;
 80008b8:	e024      	b.n	8000904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	3308      	adds	r3, #8
 80008c0:	623b      	str	r3, [r7, #32]
          break;
 80008c2:	e01f      	b.n	8000904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	330c      	adds	r3, #12
 80008ca:	623b      	str	r3, [r7, #32]
          break;
 80008cc:	e01a      	b.n	8000904 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d102      	bne.n	80008dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008d6:	2304      	movs	r3, #4
 80008d8:	623b      	str	r3, [r7, #32]
          break;
 80008da:	e013      	b.n	8000904 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d105      	bne.n	80008f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008e4:	2308      	movs	r3, #8
 80008e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	69fa      	ldr	r2, [r7, #28]
 80008ec:	611a      	str	r2, [r3, #16]
          break;
 80008ee:	e009      	b.n	8000904 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008f0:	2308      	movs	r3, #8
 80008f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	69fa      	ldr	r2, [r7, #28]
 80008f8:	615a      	str	r2, [r3, #20]
          break;
 80008fa:	e003      	b.n	8000904 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
          break;
 8000900:	e000      	b.n	8000904 <HAL_GPIO_Init+0x130>
          break;
 8000902:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	2bff      	cmp	r3, #255	; 0xff
 8000908:	d801      	bhi.n	800090e <HAL_GPIO_Init+0x13a>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	e001      	b.n	8000912 <HAL_GPIO_Init+0x13e>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3304      	adds	r3, #4
 8000912:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	2bff      	cmp	r3, #255	; 0xff
 8000918:	d802      	bhi.n	8000920 <HAL_GPIO_Init+0x14c>
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	e002      	b.n	8000926 <HAL_GPIO_Init+0x152>
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	3b08      	subs	r3, #8
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	210f      	movs	r1, #15
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	401a      	ands	r2, r3
 8000938:	6a39      	ldr	r1, [r7, #32]
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	fa01 f303 	lsl.w	r3, r1, r3
 8000940:	431a      	orrs	r2, r3
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	2b00      	cmp	r3, #0
 8000950:	f000 80c1 	beq.w	8000ad6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000954:	4b53      	ldr	r3, [pc, #332]	; (8000aa4 <HAL_GPIO_Init+0x2d0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a52      	ldr	r2, [pc, #328]	; (8000aa4 <HAL_GPIO_Init+0x2d0>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b50      	ldr	r3, [pc, #320]	; (8000aa4 <HAL_GPIO_Init+0x2d0>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800096c:	4a4e      	ldr	r2, [pc, #312]	; (8000aa8 <HAL_GPIO_Init+0x2d4>)
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	089b      	lsrs	r3, r3, #2
 8000972:	3302      	adds	r3, #2
 8000974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000978:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	f003 0303 	and.w	r3, r3, #3
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	220f      	movs	r2, #15
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a46      	ldr	r2, [pc, #280]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d01f      	beq.n	80009d8 <HAL_GPIO_Init+0x204>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a45      	ldr	r2, [pc, #276]	; (8000ab0 <HAL_GPIO_Init+0x2dc>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d019      	beq.n	80009d4 <HAL_GPIO_Init+0x200>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a44      	ldr	r2, [pc, #272]	; (8000ab4 <HAL_GPIO_Init+0x2e0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d013      	beq.n	80009d0 <HAL_GPIO_Init+0x1fc>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a43      	ldr	r2, [pc, #268]	; (8000ab8 <HAL_GPIO_Init+0x2e4>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d00d      	beq.n	80009cc <HAL_GPIO_Init+0x1f8>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a42      	ldr	r2, [pc, #264]	; (8000abc <HAL_GPIO_Init+0x2e8>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d007      	beq.n	80009c8 <HAL_GPIO_Init+0x1f4>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a41      	ldr	r2, [pc, #260]	; (8000ac0 <HAL_GPIO_Init+0x2ec>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d101      	bne.n	80009c4 <HAL_GPIO_Init+0x1f0>
 80009c0:	2305      	movs	r3, #5
 80009c2:	e00a      	b.n	80009da <HAL_GPIO_Init+0x206>
 80009c4:	2306      	movs	r3, #6
 80009c6:	e008      	b.n	80009da <HAL_GPIO_Init+0x206>
 80009c8:	2304      	movs	r3, #4
 80009ca:	e006      	b.n	80009da <HAL_GPIO_Init+0x206>
 80009cc:	2303      	movs	r3, #3
 80009ce:	e004      	b.n	80009da <HAL_GPIO_Init+0x206>
 80009d0:	2302      	movs	r3, #2
 80009d2:	e002      	b.n	80009da <HAL_GPIO_Init+0x206>
 80009d4:	2301      	movs	r3, #1
 80009d6:	e000      	b.n	80009da <HAL_GPIO_Init+0x206>
 80009d8:	2300      	movs	r3, #0
 80009da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009dc:	f002 0203 	and.w	r2, r2, #3
 80009e0:	0092      	lsls	r2, r2, #2
 80009e2:	4093      	lsls	r3, r2
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009ea:	492f      	ldr	r1, [pc, #188]	; (8000aa8 <HAL_GPIO_Init+0x2d4>)
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	3302      	adds	r3, #2
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d006      	beq.n	8000a12 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a04:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	492e      	ldr	r1, [pc, #184]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	600b      	str	r3, [r1, #0]
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	492a      	ldr	r1, [pc, #168]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d006      	beq.n	8000a3a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a2c:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a2e:	685a      	ldr	r2, [r3, #4]
 8000a30:	4924      	ldr	r1, [pc, #144]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	604b      	str	r3, [r1, #4]
 8000a38:	e006      	b.n	8000a48 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a3a:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	4920      	ldr	r1, [pc, #128]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d006      	beq.n	8000a62 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	491a      	ldr	r1, [pc, #104]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	608b      	str	r3, [r1, #8]
 8000a60:	e006      	b.n	8000a70 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	4916      	ldr	r1, [pc, #88]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d025      	beq.n	8000ac8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	4910      	ldr	r1, [pc, #64]	; (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	60cb      	str	r3, [r1, #12]
 8000a88:	e025      	b.n	8000ad6 <HAL_GPIO_Init+0x302>
 8000a8a:	bf00      	nop
 8000a8c:	10320000 	.word	0x10320000
 8000a90:	10310000 	.word	0x10310000
 8000a94:	10220000 	.word	0x10220000
 8000a98:	10210000 	.word	0x10210000
 8000a9c:	10120000 	.word	0x10120000
 8000aa0:	10110000 	.word	0x10110000
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010000 	.word	0x40010000
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	40011000 	.word	0x40011000
 8000ab8:	40011400 	.word	0x40011400
 8000abc:	40011800 	.word	0x40011800
 8000ac0:	40011c00 	.word	0x40011c00
 8000ac4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_GPIO_Init+0x324>)
 8000aca:	68da      	ldr	r2, [r3, #12]
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	4909      	ldr	r1, [pc, #36]	; (8000af8 <HAL_GPIO_Init+0x324>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad8:	3301      	adds	r3, #1
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f47f ae7e 	bne.w	80007e8 <HAL_GPIO_Init+0x14>
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	372c      	adds	r7, #44	; 0x2c
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	40010400 	.word	0x40010400

08000afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	807b      	strh	r3, [r7, #2]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b0c:	787b      	ldrb	r3, [r7, #1]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b12:	887a      	ldrh	r2, [r7, #2]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b18:	e003      	b.n	8000b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	041a      	lsls	r2, r3, #16
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	611a      	str	r2, [r3, #16]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e26c      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 8087 	beq.w	8000c5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b4c:	4b92      	ldr	r3, [pc, #584]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 030c 	and.w	r3, r3, #12
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d00c      	beq.n	8000b72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b58:	4b8f      	ldr	r3, [pc, #572]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 030c 	and.w	r3, r3, #12
 8000b60:	2b08      	cmp	r3, #8
 8000b62:	d112      	bne.n	8000b8a <HAL_RCC_OscConfig+0x5e>
 8000b64:	4b8c      	ldr	r3, [pc, #560]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b70:	d10b      	bne.n	8000b8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b72:	4b89      	ldr	r3, [pc, #548]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d06c      	beq.n	8000c58 <HAL_RCC_OscConfig+0x12c>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d168      	bne.n	8000c58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e246      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b92:	d106      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x76>
 8000b94:	4b80      	ldr	r3, [pc, #512]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a7f      	ldr	r2, [pc, #508]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e02e      	b.n	8000c00 <HAL_RCC_OscConfig+0xd4>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10c      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x98>
 8000baa:	4b7b      	ldr	r3, [pc, #492]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a7a      	ldr	r2, [pc, #488]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	4b78      	ldr	r3, [pc, #480]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a77      	ldr	r2, [pc, #476]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	e01d      	b.n	8000c00 <HAL_RCC_OscConfig+0xd4>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bcc:	d10c      	bne.n	8000be8 <HAL_RCC_OscConfig+0xbc>
 8000bce:	4b72      	ldr	r3, [pc, #456]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a71      	ldr	r2, [pc, #452]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	4b6f      	ldr	r3, [pc, #444]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a6e      	ldr	r2, [pc, #440]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e00b      	b.n	8000c00 <HAL_RCC_OscConfig+0xd4>
 8000be8:	4b6b      	ldr	r3, [pc, #428]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a6a      	ldr	r2, [pc, #424]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b68      	ldr	r3, [pc, #416]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a67      	ldr	r2, [pc, #412]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d013      	beq.n	8000c30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c08:	f7ff fcf6 	bl	80005f8 <HAL_GetTick>
 8000c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fcf2 	bl	80005f8 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b64      	cmp	r3, #100	; 0x64
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e1fa      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c22:	4b5d      	ldr	r3, [pc, #372]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f0      	beq.n	8000c10 <HAL_RCC_OscConfig+0xe4>
 8000c2e:	e014      	b.n	8000c5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c30:	f7ff fce2 	bl	80005f8 <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c38:	f7ff fcde 	bl	80005f8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b64      	cmp	r3, #100	; 0x64
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e1e6      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4a:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f0      	bne.n	8000c38 <HAL_RCC_OscConfig+0x10c>
 8000c56:	e000      	b.n	8000c5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d063      	beq.n	8000d2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c66:	4b4c      	ldr	r3, [pc, #304]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00b      	beq.n	8000c8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c72:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d11c      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x18c>
 8000c7e:	4b46      	ldr	r3, [pc, #280]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d116      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8a:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d005      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x176>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d001      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e1ba      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca2:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	4939      	ldr	r1, [pc, #228]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb6:	e03a      	b.n	8000d2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d020      	beq.n	8000d02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc0:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <HAL_RCC_OscConfig+0x270>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fc97 	bl	80005f8 <HAL_GetTick>
 8000cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ccc:	e008      	b.n	8000ce0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cce:	f7ff fc93 	bl	80005f8 <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d901      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e19b      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f0      	beq.n	8000cce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cec:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	4927      	ldr	r1, [pc, #156]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	600b      	str	r3, [r1, #0]
 8000d00:	e015      	b.n	8000d2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <HAL_RCC_OscConfig+0x270>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fc76 	bl	80005f8 <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d10:	f7ff fc72 	bl	80005f8 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e17a      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f0      	bne.n	8000d10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d03a      	beq.n	8000db0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d019      	beq.n	8000d76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_RCC_OscConfig+0x274>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d48:	f7ff fc56 	bl	80005f8 <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d50:	f7ff fc52 	bl	80005f8 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e15a      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f0      	beq.n	8000d50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f000 faa6 	bl	80012c0 <RCC_Delay>
 8000d74:	e01c      	b.n	8000db0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_RCC_OscConfig+0x274>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fc3c 	bl	80005f8 <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d82:	e00f      	b.n	8000da4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d84:	f7ff fc38 	bl	80005f8 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d908      	bls.n	8000da4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e140      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	42420000 	.word	0x42420000
 8000da0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da4:	4b9e      	ldr	r3, [pc, #632]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1e9      	bne.n	8000d84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 80a6 	beq.w	8000f0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dc2:	4b97      	ldr	r3, [pc, #604]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10d      	bne.n	8000dea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b94      	ldr	r3, [pc, #592]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a93      	ldr	r2, [pc, #588]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b91      	ldr	r3, [pc, #580]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000de6:	2301      	movs	r3, #1
 8000de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dea:	4b8e      	ldr	r3, [pc, #568]	; (8001024 <HAL_RCC_OscConfig+0x4f8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d118      	bne.n	8000e28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000df6:	4b8b      	ldr	r3, [pc, #556]	; (8001024 <HAL_RCC_OscConfig+0x4f8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a8a      	ldr	r2, [pc, #552]	; (8001024 <HAL_RCC_OscConfig+0x4f8>)
 8000dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e02:	f7ff fbf9 	bl	80005f8 <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e0a:	f7ff fbf5 	bl	80005f8 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b64      	cmp	r3, #100	; 0x64
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e0fd      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1c:	4b81      	ldr	r3, [pc, #516]	; (8001024 <HAL_RCC_OscConfig+0x4f8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f0      	beq.n	8000e0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d106      	bne.n	8000e3e <HAL_RCC_OscConfig+0x312>
 8000e30:	4b7b      	ldr	r3, [pc, #492]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	4a7a      	ldr	r2, [pc, #488]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6213      	str	r3, [r2, #32]
 8000e3c:	e02d      	b.n	8000e9a <HAL_RCC_OscConfig+0x36e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x334>
 8000e46:	4b76      	ldr	r3, [pc, #472]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4a75      	ldr	r2, [pc, #468]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e4c:	f023 0301 	bic.w	r3, r3, #1
 8000e50:	6213      	str	r3, [r2, #32]
 8000e52:	4b73      	ldr	r3, [pc, #460]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	4a72      	ldr	r2, [pc, #456]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e58:	f023 0304 	bic.w	r3, r3, #4
 8000e5c:	6213      	str	r3, [r2, #32]
 8000e5e:	e01c      	b.n	8000e9a <HAL_RCC_OscConfig+0x36e>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d10c      	bne.n	8000e82 <HAL_RCC_OscConfig+0x356>
 8000e68:	4b6d      	ldr	r3, [pc, #436]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4a6c      	ldr	r2, [pc, #432]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6213      	str	r3, [r2, #32]
 8000e74:	4b6a      	ldr	r3, [pc, #424]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	4a69      	ldr	r2, [pc, #420]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6213      	str	r3, [r2, #32]
 8000e80:	e00b      	b.n	8000e9a <HAL_RCC_OscConfig+0x36e>
 8000e82:	4b67      	ldr	r3, [pc, #412]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	4a66      	ldr	r2, [pc, #408]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6213      	str	r3, [r2, #32]
 8000e8e:	4b64      	ldr	r3, [pc, #400]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e90:	6a1b      	ldr	r3, [r3, #32]
 8000e92:	4a63      	ldr	r2, [pc, #396]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000e94:	f023 0304 	bic.w	r3, r3, #4
 8000e98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d015      	beq.n	8000ece <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fba9 	bl	80005f8 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fba5 	bl	80005f8 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e0ab      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec0:	4b57      	ldr	r3, [pc, #348]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0ee      	beq.n	8000eaa <HAL_RCC_OscConfig+0x37e>
 8000ecc:	e014      	b.n	8000ef8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ece:	f7ff fb93 	bl	80005f8 <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fb8f 	bl	80005f8 <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e095      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eec:	4b4c      	ldr	r3, [pc, #304]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1ee      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d105      	bne.n	8000f0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000efe:	4b48      	ldr	r3, [pc, #288]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a47      	ldr	r2, [pc, #284]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 8081 	beq.w	8001016 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f14:	4b42      	ldr	r3, [pc, #264]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d061      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69db      	ldr	r3, [r3, #28]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d146      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f28:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <HAL_RCC_OscConfig+0x4fc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fb63 	bl	80005f8 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f36:	f7ff fb5f 	bl	80005f8 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e067      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f0      	bne.n	8000f36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5c:	d108      	bne.n	8000f70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f5e:	4b30      	ldr	r3, [pc, #192]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	492d      	ldr	r1, [pc, #180]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a19      	ldr	r1, [r3, #32]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	430b      	orrs	r3, r1
 8000f82:	4927      	ldr	r1, [pc, #156]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <HAL_RCC_OscConfig+0x4fc>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fb33 	bl	80005f8 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f96:	f7ff fb2f 	bl	80005f8 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e037      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f0      	beq.n	8000f96 <HAL_RCC_OscConfig+0x46a>
 8000fb4:	e02f      	b.n	8001016 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <HAL_RCC_OscConfig+0x4fc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fb1c 	bl	80005f8 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc4:	f7ff fb18 	bl	80005f8 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e020      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f0      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x498>
 8000fe2:	e018      	b.n	8001016 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d101      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e013      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_RCC_OscConfig+0x4f4>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	429a      	cmp	r2, r3
 8001002:	d106      	bne.n	8001012 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800100e:	429a      	cmp	r2, r3
 8001010:	d001      	beq.n	8001016 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40021000 	.word	0x40021000
 8001024:	40007000 	.word	0x40007000
 8001028:	42420060 	.word	0x42420060

0800102c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e0d0      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001040:	4b6a      	ldr	r3, [pc, #424]	; (80011ec <HAL_RCC_ClockConfig+0x1c0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	d910      	bls.n	8001070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104e:	4b67      	ldr	r3, [pc, #412]	; (80011ec <HAL_RCC_ClockConfig+0x1c0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 0207 	bic.w	r2, r3, #7
 8001056:	4965      	ldr	r1, [pc, #404]	; (80011ec <HAL_RCC_ClockConfig+0x1c0>)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4313      	orrs	r3, r2
 800105c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800105e:	4b63      	ldr	r3, [pc, #396]	; (80011ec <HAL_RCC_ClockConfig+0x1c0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d001      	beq.n	8001070 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e0b8      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d020      	beq.n	80010be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	d005      	beq.n	8001094 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001088:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4a58      	ldr	r2, [pc, #352]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 800108e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001092:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a0:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 80010a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ac:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	494d      	ldr	r1, [pc, #308]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d040      	beq.n	800114c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d107      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d115      	bne.n	800110a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e07f      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d107      	bne.n	80010fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ea:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e073      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fa:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e06b      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800110a:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f023 0203 	bic.w	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4936      	ldr	r1, [pc, #216]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	4313      	orrs	r3, r2
 800111a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800111c:	f7ff fa6c 	bl	80005f8 <HAL_GetTick>
 8001120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001122:	e00a      	b.n	800113a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001124:	f7ff fa68 	bl	80005f8 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001132:	4293      	cmp	r3, r2
 8001134:	d901      	bls.n	800113a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e053      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 020c 	and.w	r2, r3, #12
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	429a      	cmp	r2, r3
 800114a:	d1eb      	bne.n	8001124 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <HAL_RCC_ClockConfig+0x1c0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d210      	bcs.n	800117c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115a:	4b24      	ldr	r3, [pc, #144]	; (80011ec <HAL_RCC_ClockConfig+0x1c0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 0207 	bic.w	r2, r3, #7
 8001162:	4922      	ldr	r1, [pc, #136]	; (80011ec <HAL_RCC_ClockConfig+0x1c0>)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_RCC_ClockConfig+0x1c0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e032      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	4916      	ldr	r1, [pc, #88]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	4313      	orrs	r3, r2
 8001198:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d009      	beq.n	80011ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	490e      	ldr	r1, [pc, #56]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011ba:	f000 f821 	bl	8001200 <HAL_RCC_GetSysClockFreq>
 80011be:	4602      	mov	r2, r0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	490a      	ldr	r1, [pc, #40]	; (80011f4 <HAL_RCC_ClockConfig+0x1c8>)
 80011cc:	5ccb      	ldrb	r3, [r1, r3]
 80011ce:	fa22 f303 	lsr.w	r3, r2, r3
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <HAL_RCC_ClockConfig+0x1cc>)
 80011d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_RCC_ClockConfig+0x1d0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9dc 	bl	8000598 <HAL_InitTick>

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40022000 	.word	0x40022000
 80011f0:	40021000 	.word	0x40021000
 80011f4:	08002648 	.word	0x08002648
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000004 	.word	0x20000004

08001200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001200:	b490      	push	{r4, r7}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001208:	1d3c      	adds	r4, r7, #4
 800120a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800120c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001210:	f240 2301 	movw	r3, #513	; 0x201
 8001214:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b04      	cmp	r3, #4
 8001238:	d002      	beq.n	8001240 <HAL_RCC_GetSysClockFreq+0x40>
 800123a:	2b08      	cmp	r3, #8
 800123c:	d003      	beq.n	8001246 <HAL_RCC_GetSysClockFreq+0x46>
 800123e:	e02d      	b.n	800129c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001242:	623b      	str	r3, [r7, #32]
      break;
 8001244:	e02d      	b.n	80012a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	0c9b      	lsrs	r3, r3, #18
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001252:	4413      	add	r3, r2
 8001254:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001258:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	0c5b      	lsrs	r3, r3, #17
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001272:	4413      	add	r3, r2
 8001274:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001278:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800127e:	fb02 f203 	mul.w	r2, r2, r3
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	fbb2 f3f3 	udiv	r3, r2, r3
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
 800128a:	e004      	b.n	8001296 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001290:	fb02 f303 	mul.w	r3, r2, r3
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	623b      	str	r3, [r7, #32]
      break;
 800129a:	e002      	b.n	80012a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800129e:	623b      	str	r3, [r7, #32]
      break;
 80012a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012a2:	6a3b      	ldr	r3, [r7, #32]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc90      	pop	{r4, r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	08002608 	.word	0x08002608
 80012b4:	40021000 	.word	0x40021000
 80012b8:	007a1200 	.word	0x007a1200
 80012bc:	003d0900 	.word	0x003d0900

080012c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <RCC_Delay+0x34>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <RCC_Delay+0x38>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	0a5b      	lsrs	r3, r3, #9
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	fb02 f303 	mul.w	r3, r2, r3
 80012da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012dc:	bf00      	nop
  }
  while (Delay --);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	1e5a      	subs	r2, r3, #1
 80012e2:	60fa      	str	r2, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f9      	bne.n	80012dc <RCC_Delay+0x1c>
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	20000000 	.word	0x20000000
 80012f8:	10624dd3 	.word	0x10624dd3

080012fc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	601a      	str	r2, [r3, #0]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001342:	b480      	push	{r7}
 8001344:	b085      	sub	sp, #20
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6892      	ldr	r2, [r2, #8]
 8001358:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6852      	ldr	r2, [r2, #4]
 8001362:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	d103      	bne.n	8001376 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1e5a      	subs	r2, r3, #1
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800139e:	4b4e      	ldr	r3, [pc, #312]	; (80014d8 <xTaskIncrementTick+0x144>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 8088 	bne.w	80014b8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80013a8:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <xTaskIncrementTick+0x148>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80013b0:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <xTaskIncrementTick+0x148>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d11b      	bne.n	80013f4 <xTaskIncrementTick+0x60>
		{
			taskSWITCH_DELAYED_LISTS();
 80013bc:	4b48      	ldr	r3, [pc, #288]	; (80014e0 <xTaskIncrementTick+0x14c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <xTaskIncrementTick+0x3e>
 80013c6:	f640 12d9 	movw	r2, #2521	; 0x9d9
 80013ca:	4946      	ldr	r1, [pc, #280]	; (80014e4 <xTaskIncrementTick+0x150>)
 80013cc:	4846      	ldr	r0, [pc, #280]	; (80014e8 <xTaskIncrementTick+0x154>)
 80013ce:	f000 f9af 	bl	8001730 <iprintf>
 80013d2:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <xTaskIncrementTick+0x14c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <xTaskIncrementTick+0x158>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a40      	ldr	r2, [pc, #256]	; (80014e0 <xTaskIncrementTick+0x14c>)
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4a42      	ldr	r2, [pc, #264]	; (80014ec <xTaskIncrementTick+0x158>)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <xTaskIncrementTick+0x15c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	4a40      	ldr	r2, [pc, #256]	; (80014f0 <xTaskIncrementTick+0x15c>)
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	f000 f8e4 	bl	80015bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80013f4:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <xTaskIncrementTick+0x160>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d34d      	bcc.n	800149a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <xTaskIncrementTick+0x14c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <xTaskIncrementTick+0x78>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <xTaskIncrementTick+0x7a>
 800140c:	2300      	movs	r3, #0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001412:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <xTaskIncrementTick+0x160>)
 8001414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001418:	601a      	str	r2, [r3, #0]
					break;
 800141a:	e03e      	b.n	800149a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <xTaskIncrementTick+0x14c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	d203      	bcs.n	800143c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001434:	4a2f      	ldr	r2, [pc, #188]	; (80014f4 <xTaskIncrementTick+0x160>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
						break;
 800143a:	e02e      	b.n	800149a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	3304      	adds	r3, #4
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff7e 	bl	8001342 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	3318      	adds	r3, #24
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff75 	bl	8001342 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	2201      	movs	r2, #1
 800145e:	409a      	lsls	r2, r3
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <xTaskIncrementTick+0x164>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4313      	orrs	r3, r2
 8001466:	4a24      	ldr	r2, [pc, #144]	; (80014f8 <xTaskIncrementTick+0x164>)
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4a21      	ldr	r2, [pc, #132]	; (80014fc <xTaskIncrementTick+0x168>)
 8001478:	441a      	add	r2, r3
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3304      	adds	r3, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4610      	mov	r0, r2
 8001482:	f7ff ff3b 	bl	80012fc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <xTaskIncrementTick+0x16c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	429a      	cmp	r2, r3
 8001492:	d3b4      	bcc.n	80013fe <xTaskIncrementTick+0x6a>
						{
							xSwitchRequired = pdTRUE;
 8001494:	2301      	movs	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001498:	e7b1      	b.n	80013fe <xTaskIncrementTick+0x6a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <xTaskIncrementTick+0x16c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a0:	4916      	ldr	r1, [pc, #88]	; (80014fc <xTaskIncrementTick+0x168>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d907      	bls.n	80014c2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80014b2:	2301      	movs	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e004      	b.n	80014c2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <xTaskIncrementTick+0x170>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a11      	ldr	r2, [pc, #68]	; (8001504 <xTaskIncrementTick+0x170>)
 80014c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <xTaskIncrementTick+0x174>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80014ca:	2301      	movs	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80014ce:	697b      	ldr	r3, [r7, #20]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000334 	.word	0x20000334
 80014dc:	2000031c 	.word	0x2000031c
 80014e0:	20000314 	.word	0x20000314
 80014e4:	08002618 	.word	0x08002618
 80014e8:	08002630 	.word	0x08002630
 80014ec:	20000318 	.word	0x20000318
 80014f0:	2000032c 	.word	0x2000032c
 80014f4:	20000330 	.word	0x20000330
 80014f8:	20000320 	.word	0x20000320
 80014fc:	20000094 	.word	0x20000094
 8001500:	20000090 	.word	0x20000090
 8001504:	20000324 	.word	0x20000324
 8001508:	20000328 	.word	0x20000328

0800150c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <vTaskSwitchContext+0x94>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <vTaskSwitchContext+0x98>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001520:	e03a      	b.n	8001598 <vTaskSwitchContext+0x8c>
		xYieldPending = pdFALSE;
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <vTaskSwitchContext+0x98>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <vTaskSwitchContext+0x9c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	f1c3 031f 	rsb	r3, r3, #31
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	491b      	ldr	r1, [pc, #108]	; (80015ac <vTaskSwitchContext+0xa0>)
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <vTaskSwitchContext+0x52>
 8001552:	f640 22f6 	movw	r2, #2806	; 0xaf6
 8001556:	4916      	ldr	r1, [pc, #88]	; (80015b0 <vTaskSwitchContext+0xa4>)
 8001558:	4816      	ldr	r0, [pc, #88]	; (80015b4 <vTaskSwitchContext+0xa8>)
 800155a:	f000 f8e9 	bl	8001730 <iprintf>
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4a10      	ldr	r2, [pc, #64]	; (80015ac <vTaskSwitchContext+0xa0>)
 800156a:	4413      	add	r3, r2
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	3308      	adds	r3, #8
 8001580:	429a      	cmp	r2, r3
 8001582:	d104      	bne.n	800158e <vTaskSwitchContext+0x82>
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <vTaskSwitchContext+0xac>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000334 	.word	0x20000334
 80015a4:	20000328 	.word	0x20000328
 80015a8:	20000320 	.word	0x20000320
 80015ac:	20000094 	.word	0x20000094
 80015b0:	08002618 	.word	0x08002618
 80015b4:	08002630 	.word	0x08002630
 80015b8:	20000090 	.word	0x20000090

080015bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <prvResetNextTaskUnblockTime+0x40>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <prvResetNextTaskUnblockTime+0x14>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <prvResetNextTaskUnblockTime+0x16>
 80015d0:	2300      	movs	r3, #0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d004      	beq.n	80015e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <prvResetNextTaskUnblockTime+0x44>)
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015dc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80015de:	e008      	b.n	80015f2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <prvResetNextTaskUnblockTime+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <prvResetNextTaskUnblockTime+0x44>)
 80015f0:	6013      	str	r3, [r2, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	20000314 	.word	0x20000314
 8001600:	20000330 	.word	0x20000330
	...

08001610 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <pxCurrentTCBConst2>)
 8001612:	6819      	ldr	r1, [r3, #0]
 8001614:	6808      	ldr	r0, [r1, #0]
 8001616:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800161a:	f380 8809 	msr	PSP, r0
 800161e:	f3bf 8f6f 	isb	sy
 8001622:	f04f 0000 	mov.w	r0, #0
 8001626:	f380 8811 	msr	BASEPRI, r0
 800162a:	f04e 0e0d 	orr.w	lr, lr, #13
 800162e:	4770      	bx	lr

08001630 <pxCurrentTCBConst2>:
 8001630:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
	...

08001640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001640:	f3ef 8009 	mrs	r0, PSP
 8001644:	f3bf 8f6f 	isb	sy
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <pxCurrentTCBConst>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001650:	6010      	str	r0, [r2, #0]
 8001652:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001656:	f04f 0050 	mov.w	r0, #80	; 0x50
 800165a:	f380 8811 	msr	BASEPRI, r0
 800165e:	f7ff ff55 	bl	800150c <vTaskSwitchContext>
 8001662:	f04f 0000 	mov.w	r0, #0
 8001666:	f380 8811 	msr	BASEPRI, r0
 800166a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800166e:	6819      	ldr	r1, [r3, #0]
 8001670:	6808      	ldr	r0, [r1, #0]
 8001672:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001676:	f380 8809 	msr	PSP, r0
 800167a:	f3bf 8f6f 	isb	sy
 800167e:	4770      	bx	lr

08001680 <pxCurrentTCBConst>:
 8001680:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop

08001688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800168e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001692:	f383 8811 	msr	BASEPRI, r3
 8001696:	f3bf 8f6f 	isb	sy
 800169a:	f3bf 8f4f 	dsb	sy
 800169e:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 80016a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80016a2:	f7ff fe77 	bl	8001394 <xTaskIncrementTick>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <xPortSysTickHandler+0x40>)
 80016ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	2300      	movs	r3, #0
 80016b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 80016be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	e000ed04 	.word	0xe000ed04

080016cc <__errno>:
 80016cc:	4b01      	ldr	r3, [pc, #4]	; (80016d4 <__errno+0x8>)
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	2000000c 	.word	0x2000000c

080016d8 <__libc_init_array>:
 80016d8:	b570      	push	{r4, r5, r6, lr}
 80016da:	2600      	movs	r6, #0
 80016dc:	4d0c      	ldr	r5, [pc, #48]	; (8001710 <__libc_init_array+0x38>)
 80016de:	4c0d      	ldr	r4, [pc, #52]	; (8001714 <__libc_init_array+0x3c>)
 80016e0:	1b64      	subs	r4, r4, r5
 80016e2:	10a4      	asrs	r4, r4, #2
 80016e4:	42a6      	cmp	r6, r4
 80016e6:	d109      	bne.n	80016fc <__libc_init_array+0x24>
 80016e8:	f000 ff82 	bl	80025f0 <_init>
 80016ec:	2600      	movs	r6, #0
 80016ee:	4d0a      	ldr	r5, [pc, #40]	; (8001718 <__libc_init_array+0x40>)
 80016f0:	4c0a      	ldr	r4, [pc, #40]	; (800171c <__libc_init_array+0x44>)
 80016f2:	1b64      	subs	r4, r4, r5
 80016f4:	10a4      	asrs	r4, r4, #2
 80016f6:	42a6      	cmp	r6, r4
 80016f8:	d105      	bne.n	8001706 <__libc_init_array+0x2e>
 80016fa:	bd70      	pop	{r4, r5, r6, pc}
 80016fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001700:	4798      	blx	r3
 8001702:	3601      	adds	r6, #1
 8001704:	e7ee      	b.n	80016e4 <__libc_init_array+0xc>
 8001706:	f855 3b04 	ldr.w	r3, [r5], #4
 800170a:	4798      	blx	r3
 800170c:	3601      	adds	r6, #1
 800170e:	e7f2      	b.n	80016f6 <__libc_init_array+0x1e>
 8001710:	080026f0 	.word	0x080026f0
 8001714:	080026f0 	.word	0x080026f0
 8001718:	080026f0 	.word	0x080026f0
 800171c:	080026f4 	.word	0x080026f4

08001720 <memset>:
 8001720:	4603      	mov	r3, r0
 8001722:	4402      	add	r2, r0
 8001724:	4293      	cmp	r3, r2
 8001726:	d100      	bne.n	800172a <memset+0xa>
 8001728:	4770      	bx	lr
 800172a:	f803 1b01 	strb.w	r1, [r3], #1
 800172e:	e7f9      	b.n	8001724 <memset+0x4>

08001730 <iprintf>:
 8001730:	b40f      	push	{r0, r1, r2, r3}
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <iprintf+0x2c>)
 8001734:	b513      	push	{r0, r1, r4, lr}
 8001736:	681c      	ldr	r4, [r3, #0]
 8001738:	b124      	cbz	r4, 8001744 <iprintf+0x14>
 800173a:	69a3      	ldr	r3, [r4, #24]
 800173c:	b913      	cbnz	r3, 8001744 <iprintf+0x14>
 800173e:	4620      	mov	r0, r4
 8001740:	f000 f866 	bl	8001810 <__sinit>
 8001744:	ab05      	add	r3, sp, #20
 8001746:	4620      	mov	r0, r4
 8001748:	9a04      	ldr	r2, [sp, #16]
 800174a:	68a1      	ldr	r1, [r4, #8]
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	f000 f981 	bl	8001a54 <_vfiprintf_r>
 8001752:	b002      	add	sp, #8
 8001754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001758:	b004      	add	sp, #16
 800175a:	4770      	bx	lr
 800175c:	2000000c 	.word	0x2000000c

08001760 <std>:
 8001760:	2300      	movs	r3, #0
 8001762:	b510      	push	{r4, lr}
 8001764:	4604      	mov	r4, r0
 8001766:	e9c0 3300 	strd	r3, r3, [r0]
 800176a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800176e:	6083      	str	r3, [r0, #8]
 8001770:	8181      	strh	r1, [r0, #12]
 8001772:	6643      	str	r3, [r0, #100]	; 0x64
 8001774:	81c2      	strh	r2, [r0, #14]
 8001776:	6183      	str	r3, [r0, #24]
 8001778:	4619      	mov	r1, r3
 800177a:	2208      	movs	r2, #8
 800177c:	305c      	adds	r0, #92	; 0x5c
 800177e:	f7ff ffcf 	bl	8001720 <memset>
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <std+0x38>)
 8001784:	6224      	str	r4, [r4, #32]
 8001786:	6263      	str	r3, [r4, #36]	; 0x24
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <std+0x3c>)
 800178a:	62a3      	str	r3, [r4, #40]	; 0x28
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <std+0x40>)
 800178e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <std+0x44>)
 8001792:	6323      	str	r3, [r4, #48]	; 0x30
 8001794:	bd10      	pop	{r4, pc}
 8001796:	bf00      	nop
 8001798:	08002001 	.word	0x08002001
 800179c:	08002023 	.word	0x08002023
 80017a0:	0800205b 	.word	0x0800205b
 80017a4:	0800207f 	.word	0x0800207f

080017a8 <_cleanup_r>:
 80017a8:	4901      	ldr	r1, [pc, #4]	; (80017b0 <_cleanup_r+0x8>)
 80017aa:	f000 b8af 	b.w	800190c <_fwalk_reent>
 80017ae:	bf00      	nop
 80017b0:	08002359 	.word	0x08002359

080017b4 <__sfmoreglue>:
 80017b4:	b570      	push	{r4, r5, r6, lr}
 80017b6:	2568      	movs	r5, #104	; 0x68
 80017b8:	1e4a      	subs	r2, r1, #1
 80017ba:	4355      	muls	r5, r2
 80017bc:	460e      	mov	r6, r1
 80017be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80017c2:	f000 f8c5 	bl	8001950 <_malloc_r>
 80017c6:	4604      	mov	r4, r0
 80017c8:	b140      	cbz	r0, 80017dc <__sfmoreglue+0x28>
 80017ca:	2100      	movs	r1, #0
 80017cc:	e9c0 1600 	strd	r1, r6, [r0]
 80017d0:	300c      	adds	r0, #12
 80017d2:	60a0      	str	r0, [r4, #8]
 80017d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80017d8:	f7ff ffa2 	bl	8001720 <memset>
 80017dc:	4620      	mov	r0, r4
 80017de:	bd70      	pop	{r4, r5, r6, pc}

080017e0 <__sfp_lock_acquire>:
 80017e0:	4801      	ldr	r0, [pc, #4]	; (80017e8 <__sfp_lock_acquire+0x8>)
 80017e2:	f000 b8b3 	b.w	800194c <__retarget_lock_acquire_recursive>
 80017e6:	bf00      	nop
 80017e8:	2000034c 	.word	0x2000034c

080017ec <__sfp_lock_release>:
 80017ec:	4801      	ldr	r0, [pc, #4]	; (80017f4 <__sfp_lock_release+0x8>)
 80017ee:	f000 b8ae 	b.w	800194e <__retarget_lock_release_recursive>
 80017f2:	bf00      	nop
 80017f4:	2000034c 	.word	0x2000034c

080017f8 <__sinit_lock_acquire>:
 80017f8:	4801      	ldr	r0, [pc, #4]	; (8001800 <__sinit_lock_acquire+0x8>)
 80017fa:	f000 b8a7 	b.w	800194c <__retarget_lock_acquire_recursive>
 80017fe:	bf00      	nop
 8001800:	20000347 	.word	0x20000347

08001804 <__sinit_lock_release>:
 8001804:	4801      	ldr	r0, [pc, #4]	; (800180c <__sinit_lock_release+0x8>)
 8001806:	f000 b8a2 	b.w	800194e <__retarget_lock_release_recursive>
 800180a:	bf00      	nop
 800180c:	20000347 	.word	0x20000347

08001810 <__sinit>:
 8001810:	b510      	push	{r4, lr}
 8001812:	4604      	mov	r4, r0
 8001814:	f7ff fff0 	bl	80017f8 <__sinit_lock_acquire>
 8001818:	69a3      	ldr	r3, [r4, #24]
 800181a:	b11b      	cbz	r3, 8001824 <__sinit+0x14>
 800181c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001820:	f7ff bff0 	b.w	8001804 <__sinit_lock_release>
 8001824:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001828:	6523      	str	r3, [r4, #80]	; 0x50
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <__sinit+0x68>)
 800182c:	4a13      	ldr	r2, [pc, #76]	; (800187c <__sinit+0x6c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	62a2      	str	r2, [r4, #40]	; 0x28
 8001832:	42a3      	cmp	r3, r4
 8001834:	bf08      	it	eq
 8001836:	2301      	moveq	r3, #1
 8001838:	4620      	mov	r0, r4
 800183a:	bf08      	it	eq
 800183c:	61a3      	streq	r3, [r4, #24]
 800183e:	f000 f81f 	bl	8001880 <__sfp>
 8001842:	6060      	str	r0, [r4, #4]
 8001844:	4620      	mov	r0, r4
 8001846:	f000 f81b 	bl	8001880 <__sfp>
 800184a:	60a0      	str	r0, [r4, #8]
 800184c:	4620      	mov	r0, r4
 800184e:	f000 f817 	bl	8001880 <__sfp>
 8001852:	2200      	movs	r2, #0
 8001854:	2104      	movs	r1, #4
 8001856:	60e0      	str	r0, [r4, #12]
 8001858:	6860      	ldr	r0, [r4, #4]
 800185a:	f7ff ff81 	bl	8001760 <std>
 800185e:	2201      	movs	r2, #1
 8001860:	2109      	movs	r1, #9
 8001862:	68a0      	ldr	r0, [r4, #8]
 8001864:	f7ff ff7c 	bl	8001760 <std>
 8001868:	2202      	movs	r2, #2
 800186a:	2112      	movs	r1, #18
 800186c:	68e0      	ldr	r0, [r4, #12]
 800186e:	f7ff ff77 	bl	8001760 <std>
 8001872:	2301      	movs	r3, #1
 8001874:	61a3      	str	r3, [r4, #24]
 8001876:	e7d1      	b.n	800181c <__sinit+0xc>
 8001878:	08002658 	.word	0x08002658
 800187c:	080017a9 	.word	0x080017a9

08001880 <__sfp>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	4607      	mov	r7, r0
 8001884:	f7ff ffac 	bl	80017e0 <__sfp_lock_acquire>
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <__sfp+0x84>)
 800188a:	681e      	ldr	r6, [r3, #0]
 800188c:	69b3      	ldr	r3, [r6, #24]
 800188e:	b913      	cbnz	r3, 8001896 <__sfp+0x16>
 8001890:	4630      	mov	r0, r6
 8001892:	f7ff ffbd 	bl	8001810 <__sinit>
 8001896:	3648      	adds	r6, #72	; 0x48
 8001898:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800189c:	3b01      	subs	r3, #1
 800189e:	d503      	bpl.n	80018a8 <__sfp+0x28>
 80018a0:	6833      	ldr	r3, [r6, #0]
 80018a2:	b30b      	cbz	r3, 80018e8 <__sfp+0x68>
 80018a4:	6836      	ldr	r6, [r6, #0]
 80018a6:	e7f7      	b.n	8001898 <__sfp+0x18>
 80018a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80018ac:	b9d5      	cbnz	r5, 80018e4 <__sfp+0x64>
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <__sfp+0x88>)
 80018b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80018b4:	60e3      	str	r3, [r4, #12]
 80018b6:	6665      	str	r5, [r4, #100]	; 0x64
 80018b8:	f000 f847 	bl	800194a <__retarget_lock_init_recursive>
 80018bc:	f7ff ff96 	bl	80017ec <__sfp_lock_release>
 80018c0:	2208      	movs	r2, #8
 80018c2:	4629      	mov	r1, r5
 80018c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80018c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80018cc:	6025      	str	r5, [r4, #0]
 80018ce:	61a5      	str	r5, [r4, #24]
 80018d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80018d4:	f7ff ff24 	bl	8001720 <memset>
 80018d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80018dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80018e0:	4620      	mov	r0, r4
 80018e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018e4:	3468      	adds	r4, #104	; 0x68
 80018e6:	e7d9      	b.n	800189c <__sfp+0x1c>
 80018e8:	2104      	movs	r1, #4
 80018ea:	4638      	mov	r0, r7
 80018ec:	f7ff ff62 	bl	80017b4 <__sfmoreglue>
 80018f0:	4604      	mov	r4, r0
 80018f2:	6030      	str	r0, [r6, #0]
 80018f4:	2800      	cmp	r0, #0
 80018f6:	d1d5      	bne.n	80018a4 <__sfp+0x24>
 80018f8:	f7ff ff78 	bl	80017ec <__sfp_lock_release>
 80018fc:	230c      	movs	r3, #12
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	e7ee      	b.n	80018e0 <__sfp+0x60>
 8001902:	bf00      	nop
 8001904:	08002658 	.word	0x08002658
 8001908:	ffff0001 	.word	0xffff0001

0800190c <_fwalk_reent>:
 800190c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001910:	4606      	mov	r6, r0
 8001912:	4688      	mov	r8, r1
 8001914:	2700      	movs	r7, #0
 8001916:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800191a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800191e:	f1b9 0901 	subs.w	r9, r9, #1
 8001922:	d505      	bpl.n	8001930 <_fwalk_reent+0x24>
 8001924:	6824      	ldr	r4, [r4, #0]
 8001926:	2c00      	cmp	r4, #0
 8001928:	d1f7      	bne.n	800191a <_fwalk_reent+0xe>
 800192a:	4638      	mov	r0, r7
 800192c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001930:	89ab      	ldrh	r3, [r5, #12]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d907      	bls.n	8001946 <_fwalk_reent+0x3a>
 8001936:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800193a:	3301      	adds	r3, #1
 800193c:	d003      	beq.n	8001946 <_fwalk_reent+0x3a>
 800193e:	4629      	mov	r1, r5
 8001940:	4630      	mov	r0, r6
 8001942:	47c0      	blx	r8
 8001944:	4307      	orrs	r7, r0
 8001946:	3568      	adds	r5, #104	; 0x68
 8001948:	e7e9      	b.n	800191e <_fwalk_reent+0x12>

0800194a <__retarget_lock_init_recursive>:
 800194a:	4770      	bx	lr

0800194c <__retarget_lock_acquire_recursive>:
 800194c:	4770      	bx	lr

0800194e <__retarget_lock_release_recursive>:
 800194e:	4770      	bx	lr

08001950 <_malloc_r>:
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001952:	1ccd      	adds	r5, r1, #3
 8001954:	f025 0503 	bic.w	r5, r5, #3
 8001958:	3508      	adds	r5, #8
 800195a:	2d0c      	cmp	r5, #12
 800195c:	bf38      	it	cc
 800195e:	250c      	movcc	r5, #12
 8001960:	2d00      	cmp	r5, #0
 8001962:	4606      	mov	r6, r0
 8001964:	db01      	blt.n	800196a <_malloc_r+0x1a>
 8001966:	42a9      	cmp	r1, r5
 8001968:	d903      	bls.n	8001972 <_malloc_r+0x22>
 800196a:	230c      	movs	r3, #12
 800196c:	6033      	str	r3, [r6, #0]
 800196e:	2000      	movs	r0, #0
 8001970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001972:	f000 fdb1 	bl	80024d8 <__malloc_lock>
 8001976:	4921      	ldr	r1, [pc, #132]	; (80019fc <_malloc_r+0xac>)
 8001978:	680a      	ldr	r2, [r1, #0]
 800197a:	4614      	mov	r4, r2
 800197c:	b99c      	cbnz	r4, 80019a6 <_malloc_r+0x56>
 800197e:	4f20      	ldr	r7, [pc, #128]	; (8001a00 <_malloc_r+0xb0>)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b923      	cbnz	r3, 800198e <_malloc_r+0x3e>
 8001984:	4621      	mov	r1, r4
 8001986:	4630      	mov	r0, r6
 8001988:	f000 fb2a 	bl	8001fe0 <_sbrk_r>
 800198c:	6038      	str	r0, [r7, #0]
 800198e:	4629      	mov	r1, r5
 8001990:	4630      	mov	r0, r6
 8001992:	f000 fb25 	bl	8001fe0 <_sbrk_r>
 8001996:	1c43      	adds	r3, r0, #1
 8001998:	d123      	bne.n	80019e2 <_malloc_r+0x92>
 800199a:	230c      	movs	r3, #12
 800199c:	4630      	mov	r0, r6
 800199e:	6033      	str	r3, [r6, #0]
 80019a0:	f000 fda0 	bl	80024e4 <__malloc_unlock>
 80019a4:	e7e3      	b.n	800196e <_malloc_r+0x1e>
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	1b5b      	subs	r3, r3, r5
 80019aa:	d417      	bmi.n	80019dc <_malloc_r+0x8c>
 80019ac:	2b0b      	cmp	r3, #11
 80019ae:	d903      	bls.n	80019b8 <_malloc_r+0x68>
 80019b0:	6023      	str	r3, [r4, #0]
 80019b2:	441c      	add	r4, r3
 80019b4:	6025      	str	r5, [r4, #0]
 80019b6:	e004      	b.n	80019c2 <_malloc_r+0x72>
 80019b8:	6863      	ldr	r3, [r4, #4]
 80019ba:	42a2      	cmp	r2, r4
 80019bc:	bf0c      	ite	eq
 80019be:	600b      	streq	r3, [r1, #0]
 80019c0:	6053      	strne	r3, [r2, #4]
 80019c2:	4630      	mov	r0, r6
 80019c4:	f000 fd8e 	bl	80024e4 <__malloc_unlock>
 80019c8:	f104 000b 	add.w	r0, r4, #11
 80019cc:	1d23      	adds	r3, r4, #4
 80019ce:	f020 0007 	bic.w	r0, r0, #7
 80019d2:	1ac2      	subs	r2, r0, r3
 80019d4:	d0cc      	beq.n	8001970 <_malloc_r+0x20>
 80019d6:	1a1b      	subs	r3, r3, r0
 80019d8:	50a3      	str	r3, [r4, r2]
 80019da:	e7c9      	b.n	8001970 <_malloc_r+0x20>
 80019dc:	4622      	mov	r2, r4
 80019de:	6864      	ldr	r4, [r4, #4]
 80019e0:	e7cc      	b.n	800197c <_malloc_r+0x2c>
 80019e2:	1cc4      	adds	r4, r0, #3
 80019e4:	f024 0403 	bic.w	r4, r4, #3
 80019e8:	42a0      	cmp	r0, r4
 80019ea:	d0e3      	beq.n	80019b4 <_malloc_r+0x64>
 80019ec:	1a21      	subs	r1, r4, r0
 80019ee:	4630      	mov	r0, r6
 80019f0:	f000 faf6 	bl	8001fe0 <_sbrk_r>
 80019f4:	3001      	adds	r0, #1
 80019f6:	d1dd      	bne.n	80019b4 <_malloc_r+0x64>
 80019f8:	e7cf      	b.n	800199a <_malloc_r+0x4a>
 80019fa:	bf00      	nop
 80019fc:	20000338 	.word	0x20000338
 8001a00:	2000033c 	.word	0x2000033c

08001a04 <__sfputc_r>:
 8001a04:	6893      	ldr	r3, [r2, #8]
 8001a06:	b410      	push	{r4}
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	6093      	str	r3, [r2, #8]
 8001a0e:	da07      	bge.n	8001a20 <__sfputc_r+0x1c>
 8001a10:	6994      	ldr	r4, [r2, #24]
 8001a12:	42a3      	cmp	r3, r4
 8001a14:	db01      	blt.n	8001a1a <__sfputc_r+0x16>
 8001a16:	290a      	cmp	r1, #10
 8001a18:	d102      	bne.n	8001a20 <__sfputc_r+0x1c>
 8001a1a:	bc10      	pop	{r4}
 8001a1c:	f000 bb34 	b.w	8002088 <__swbuf_r>
 8001a20:	6813      	ldr	r3, [r2, #0]
 8001a22:	1c58      	adds	r0, r3, #1
 8001a24:	6010      	str	r0, [r2, #0]
 8001a26:	7019      	strb	r1, [r3, #0]
 8001a28:	4608      	mov	r0, r1
 8001a2a:	bc10      	pop	{r4}
 8001a2c:	4770      	bx	lr

08001a2e <__sfputs_r>:
 8001a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a30:	4606      	mov	r6, r0
 8001a32:	460f      	mov	r7, r1
 8001a34:	4614      	mov	r4, r2
 8001a36:	18d5      	adds	r5, r2, r3
 8001a38:	42ac      	cmp	r4, r5
 8001a3a:	d101      	bne.n	8001a40 <__sfputs_r+0x12>
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	e007      	b.n	8001a50 <__sfputs_r+0x22>
 8001a40:	463a      	mov	r2, r7
 8001a42:	4630      	mov	r0, r6
 8001a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a48:	f7ff ffdc 	bl	8001a04 <__sfputc_r>
 8001a4c:	1c43      	adds	r3, r0, #1
 8001a4e:	d1f3      	bne.n	8001a38 <__sfputs_r+0xa>
 8001a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a54 <_vfiprintf_r>:
 8001a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a58:	460d      	mov	r5, r1
 8001a5a:	4614      	mov	r4, r2
 8001a5c:	4698      	mov	r8, r3
 8001a5e:	4606      	mov	r6, r0
 8001a60:	b09d      	sub	sp, #116	; 0x74
 8001a62:	b118      	cbz	r0, 8001a6c <_vfiprintf_r+0x18>
 8001a64:	6983      	ldr	r3, [r0, #24]
 8001a66:	b90b      	cbnz	r3, 8001a6c <_vfiprintf_r+0x18>
 8001a68:	f7ff fed2 	bl	8001810 <__sinit>
 8001a6c:	4b89      	ldr	r3, [pc, #548]	; (8001c94 <_vfiprintf_r+0x240>)
 8001a6e:	429d      	cmp	r5, r3
 8001a70:	d11b      	bne.n	8001aaa <_vfiprintf_r+0x56>
 8001a72:	6875      	ldr	r5, [r6, #4]
 8001a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a76:	07d9      	lsls	r1, r3, #31
 8001a78:	d405      	bmi.n	8001a86 <_vfiprintf_r+0x32>
 8001a7a:	89ab      	ldrh	r3, [r5, #12]
 8001a7c:	059a      	lsls	r2, r3, #22
 8001a7e:	d402      	bmi.n	8001a86 <_vfiprintf_r+0x32>
 8001a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a82:	f7ff ff63 	bl	800194c <__retarget_lock_acquire_recursive>
 8001a86:	89ab      	ldrh	r3, [r5, #12]
 8001a88:	071b      	lsls	r3, r3, #28
 8001a8a:	d501      	bpl.n	8001a90 <_vfiprintf_r+0x3c>
 8001a8c:	692b      	ldr	r3, [r5, #16]
 8001a8e:	b9eb      	cbnz	r3, 8001acc <_vfiprintf_r+0x78>
 8001a90:	4629      	mov	r1, r5
 8001a92:	4630      	mov	r0, r6
 8001a94:	f000 fb5c 	bl	8002150 <__swsetup_r>
 8001a98:	b1c0      	cbz	r0, 8001acc <_vfiprintf_r+0x78>
 8001a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a9c:	07dc      	lsls	r4, r3, #31
 8001a9e:	d50e      	bpl.n	8001abe <_vfiprintf_r+0x6a>
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aa4:	b01d      	add	sp, #116	; 0x74
 8001aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aaa:	4b7b      	ldr	r3, [pc, #492]	; (8001c98 <_vfiprintf_r+0x244>)
 8001aac:	429d      	cmp	r5, r3
 8001aae:	d101      	bne.n	8001ab4 <_vfiprintf_r+0x60>
 8001ab0:	68b5      	ldr	r5, [r6, #8]
 8001ab2:	e7df      	b.n	8001a74 <_vfiprintf_r+0x20>
 8001ab4:	4b79      	ldr	r3, [pc, #484]	; (8001c9c <_vfiprintf_r+0x248>)
 8001ab6:	429d      	cmp	r5, r3
 8001ab8:	bf08      	it	eq
 8001aba:	68f5      	ldreq	r5, [r6, #12]
 8001abc:	e7da      	b.n	8001a74 <_vfiprintf_r+0x20>
 8001abe:	89ab      	ldrh	r3, [r5, #12]
 8001ac0:	0598      	lsls	r0, r3, #22
 8001ac2:	d4ed      	bmi.n	8001aa0 <_vfiprintf_r+0x4c>
 8001ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ac6:	f7ff ff42 	bl	800194e <__retarget_lock_release_recursive>
 8001aca:	e7e9      	b.n	8001aa0 <_vfiprintf_r+0x4c>
 8001acc:	2300      	movs	r3, #0
 8001ace:	9309      	str	r3, [sp, #36]	; 0x24
 8001ad0:	2320      	movs	r3, #32
 8001ad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ad6:	2330      	movs	r3, #48	; 0x30
 8001ad8:	f04f 0901 	mov.w	r9, #1
 8001adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ae0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001ca0 <_vfiprintf_r+0x24c>
 8001ae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ae8:	4623      	mov	r3, r4
 8001aea:	469a      	mov	sl, r3
 8001aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001af0:	b10a      	cbz	r2, 8001af6 <_vfiprintf_r+0xa2>
 8001af2:	2a25      	cmp	r2, #37	; 0x25
 8001af4:	d1f9      	bne.n	8001aea <_vfiprintf_r+0x96>
 8001af6:	ebba 0b04 	subs.w	fp, sl, r4
 8001afa:	d00b      	beq.n	8001b14 <_vfiprintf_r+0xc0>
 8001afc:	465b      	mov	r3, fp
 8001afe:	4622      	mov	r2, r4
 8001b00:	4629      	mov	r1, r5
 8001b02:	4630      	mov	r0, r6
 8001b04:	f7ff ff93 	bl	8001a2e <__sfputs_r>
 8001b08:	3001      	adds	r0, #1
 8001b0a:	f000 80aa 	beq.w	8001c62 <_vfiprintf_r+0x20e>
 8001b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b10:	445a      	add	r2, fp
 8001b12:	9209      	str	r2, [sp, #36]	; 0x24
 8001b14:	f89a 3000 	ldrb.w	r3, [sl]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a2 	beq.w	8001c62 <_vfiprintf_r+0x20e>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b28:	f10a 0a01 	add.w	sl, sl, #1
 8001b2c:	9304      	str	r3, [sp, #16]
 8001b2e:	9307      	str	r3, [sp, #28]
 8001b30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b34:	931a      	str	r3, [sp, #104]	; 0x68
 8001b36:	4654      	mov	r4, sl
 8001b38:	2205      	movs	r2, #5
 8001b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b3e:	4858      	ldr	r0, [pc, #352]	; (8001ca0 <_vfiprintf_r+0x24c>)
 8001b40:	f000 fcbc 	bl	80024bc <memchr>
 8001b44:	9a04      	ldr	r2, [sp, #16]
 8001b46:	b9d8      	cbnz	r0, 8001b80 <_vfiprintf_r+0x12c>
 8001b48:	06d1      	lsls	r1, r2, #27
 8001b4a:	bf44      	itt	mi
 8001b4c:	2320      	movmi	r3, #32
 8001b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b52:	0713      	lsls	r3, r2, #28
 8001b54:	bf44      	itt	mi
 8001b56:	232b      	movmi	r3, #43	; 0x2b
 8001b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8001b60:	2b2a      	cmp	r3, #42	; 0x2a
 8001b62:	d015      	beq.n	8001b90 <_vfiprintf_r+0x13c>
 8001b64:	4654      	mov	r4, sl
 8001b66:	2000      	movs	r0, #0
 8001b68:	f04f 0c0a 	mov.w	ip, #10
 8001b6c:	9a07      	ldr	r2, [sp, #28]
 8001b6e:	4621      	mov	r1, r4
 8001b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b74:	3b30      	subs	r3, #48	; 0x30
 8001b76:	2b09      	cmp	r3, #9
 8001b78:	d94e      	bls.n	8001c18 <_vfiprintf_r+0x1c4>
 8001b7a:	b1b0      	cbz	r0, 8001baa <_vfiprintf_r+0x156>
 8001b7c:	9207      	str	r2, [sp, #28]
 8001b7e:	e014      	b.n	8001baa <_vfiprintf_r+0x156>
 8001b80:	eba0 0308 	sub.w	r3, r0, r8
 8001b84:	fa09 f303 	lsl.w	r3, r9, r3
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	46a2      	mov	sl, r4
 8001b8c:	9304      	str	r3, [sp, #16]
 8001b8e:	e7d2      	b.n	8001b36 <_vfiprintf_r+0xe2>
 8001b90:	9b03      	ldr	r3, [sp, #12]
 8001b92:	1d19      	adds	r1, r3, #4
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	9103      	str	r1, [sp, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bfbb      	ittet	lt
 8001b9c:	425b      	neglt	r3, r3
 8001b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8001ba2:	9307      	strge	r3, [sp, #28]
 8001ba4:	9307      	strlt	r3, [sp, #28]
 8001ba6:	bfb8      	it	lt
 8001ba8:	9204      	strlt	r2, [sp, #16]
 8001baa:	7823      	ldrb	r3, [r4, #0]
 8001bac:	2b2e      	cmp	r3, #46	; 0x2e
 8001bae:	d10c      	bne.n	8001bca <_vfiprintf_r+0x176>
 8001bb0:	7863      	ldrb	r3, [r4, #1]
 8001bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8001bb4:	d135      	bne.n	8001c22 <_vfiprintf_r+0x1ce>
 8001bb6:	9b03      	ldr	r3, [sp, #12]
 8001bb8:	3402      	adds	r4, #2
 8001bba:	1d1a      	adds	r2, r3, #4
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	9203      	str	r2, [sp, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bfb8      	it	lt
 8001bc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001bc8:	9305      	str	r3, [sp, #20]
 8001bca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001cb0 <_vfiprintf_r+0x25c>
 8001bce:	2203      	movs	r2, #3
 8001bd0:	4650      	mov	r0, sl
 8001bd2:	7821      	ldrb	r1, [r4, #0]
 8001bd4:	f000 fc72 	bl	80024bc <memchr>
 8001bd8:	b140      	cbz	r0, 8001bec <_vfiprintf_r+0x198>
 8001bda:	2340      	movs	r3, #64	; 0x40
 8001bdc:	eba0 000a 	sub.w	r0, r0, sl
 8001be0:	fa03 f000 	lsl.w	r0, r3, r0
 8001be4:	9b04      	ldr	r3, [sp, #16]
 8001be6:	3401      	adds	r4, #1
 8001be8:	4303      	orrs	r3, r0
 8001bea:	9304      	str	r3, [sp, #16]
 8001bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bf0:	2206      	movs	r2, #6
 8001bf2:	482c      	ldr	r0, [pc, #176]	; (8001ca4 <_vfiprintf_r+0x250>)
 8001bf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001bf8:	f000 fc60 	bl	80024bc <memchr>
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d03f      	beq.n	8001c80 <_vfiprintf_r+0x22c>
 8001c00:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <_vfiprintf_r+0x254>)
 8001c02:	bb1b      	cbnz	r3, 8001c4c <_vfiprintf_r+0x1f8>
 8001c04:	9b03      	ldr	r3, [sp, #12]
 8001c06:	3307      	adds	r3, #7
 8001c08:	f023 0307 	bic.w	r3, r3, #7
 8001c0c:	3308      	adds	r3, #8
 8001c0e:	9303      	str	r3, [sp, #12]
 8001c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c12:	443b      	add	r3, r7
 8001c14:	9309      	str	r3, [sp, #36]	; 0x24
 8001c16:	e767      	b.n	8001ae8 <_vfiprintf_r+0x94>
 8001c18:	460c      	mov	r4, r1
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c20:	e7a5      	b.n	8001b6e <_vfiprintf_r+0x11a>
 8001c22:	2300      	movs	r3, #0
 8001c24:	f04f 0c0a 	mov.w	ip, #10
 8001c28:	4619      	mov	r1, r3
 8001c2a:	3401      	adds	r4, #1
 8001c2c:	9305      	str	r3, [sp, #20]
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c34:	3a30      	subs	r2, #48	; 0x30
 8001c36:	2a09      	cmp	r2, #9
 8001c38:	d903      	bls.n	8001c42 <_vfiprintf_r+0x1ee>
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0c5      	beq.n	8001bca <_vfiprintf_r+0x176>
 8001c3e:	9105      	str	r1, [sp, #20]
 8001c40:	e7c3      	b.n	8001bca <_vfiprintf_r+0x176>
 8001c42:	4604      	mov	r4, r0
 8001c44:	2301      	movs	r3, #1
 8001c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c4a:	e7f0      	b.n	8001c2e <_vfiprintf_r+0x1da>
 8001c4c:	ab03      	add	r3, sp, #12
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	462a      	mov	r2, r5
 8001c52:	4630      	mov	r0, r6
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <_vfiprintf_r+0x258>)
 8001c56:	a904      	add	r1, sp, #16
 8001c58:	f3af 8000 	nop.w
 8001c5c:	4607      	mov	r7, r0
 8001c5e:	1c78      	adds	r0, r7, #1
 8001c60:	d1d6      	bne.n	8001c10 <_vfiprintf_r+0x1bc>
 8001c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c64:	07d9      	lsls	r1, r3, #31
 8001c66:	d405      	bmi.n	8001c74 <_vfiprintf_r+0x220>
 8001c68:	89ab      	ldrh	r3, [r5, #12]
 8001c6a:	059a      	lsls	r2, r3, #22
 8001c6c:	d402      	bmi.n	8001c74 <_vfiprintf_r+0x220>
 8001c6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c70:	f7ff fe6d 	bl	800194e <__retarget_lock_release_recursive>
 8001c74:	89ab      	ldrh	r3, [r5, #12]
 8001c76:	065b      	lsls	r3, r3, #25
 8001c78:	f53f af12 	bmi.w	8001aa0 <_vfiprintf_r+0x4c>
 8001c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c7e:	e711      	b.n	8001aa4 <_vfiprintf_r+0x50>
 8001c80:	ab03      	add	r3, sp, #12
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	462a      	mov	r2, r5
 8001c86:	4630      	mov	r0, r6
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <_vfiprintf_r+0x258>)
 8001c8a:	a904      	add	r1, sp, #16
 8001c8c:	f000 f882 	bl	8001d94 <_printf_i>
 8001c90:	e7e4      	b.n	8001c5c <_vfiprintf_r+0x208>
 8001c92:	bf00      	nop
 8001c94:	0800267c 	.word	0x0800267c
 8001c98:	0800269c 	.word	0x0800269c
 8001c9c:	0800265c 	.word	0x0800265c
 8001ca0:	080026bc 	.word	0x080026bc
 8001ca4:	080026c6 	.word	0x080026c6
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	08001a2f 	.word	0x08001a2f
 8001cb0:	080026c2 	.word	0x080026c2

08001cb4 <_printf_common>:
 8001cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cb8:	4616      	mov	r6, r2
 8001cba:	4699      	mov	r9, r3
 8001cbc:	688a      	ldr	r2, [r1, #8]
 8001cbe:	690b      	ldr	r3, [r1, #16]
 8001cc0:	4607      	mov	r7, r0
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	bfb8      	it	lt
 8001cc6:	4613      	movlt	r3, r2
 8001cc8:	6033      	str	r3, [r6, #0]
 8001cca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001cce:	460c      	mov	r4, r1
 8001cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001cd4:	b10a      	cbz	r2, 8001cda <_printf_common+0x26>
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	6033      	str	r3, [r6, #0]
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	0699      	lsls	r1, r3, #26
 8001cde:	bf42      	ittt	mi
 8001ce0:	6833      	ldrmi	r3, [r6, #0]
 8001ce2:	3302      	addmi	r3, #2
 8001ce4:	6033      	strmi	r3, [r6, #0]
 8001ce6:	6825      	ldr	r5, [r4, #0]
 8001ce8:	f015 0506 	ands.w	r5, r5, #6
 8001cec:	d106      	bne.n	8001cfc <_printf_common+0x48>
 8001cee:	f104 0a19 	add.w	sl, r4, #25
 8001cf2:	68e3      	ldr	r3, [r4, #12]
 8001cf4:	6832      	ldr	r2, [r6, #0]
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	dc28      	bgt.n	8001d4e <_printf_common+0x9a>
 8001cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001d00:	1e13      	subs	r3, r2, #0
 8001d02:	6822      	ldr	r2, [r4, #0]
 8001d04:	bf18      	it	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	0692      	lsls	r2, r2, #26
 8001d0a:	d42d      	bmi.n	8001d68 <_printf_common+0xb4>
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	4638      	mov	r0, r7
 8001d10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d14:	47c0      	blx	r8
 8001d16:	3001      	adds	r0, #1
 8001d18:	d020      	beq.n	8001d5c <_printf_common+0xa8>
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	68e5      	ldr	r5, [r4, #12]
 8001d1e:	f003 0306 	and.w	r3, r3, #6
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf18      	it	ne
 8001d26:	2500      	movne	r5, #0
 8001d28:	6832      	ldr	r2, [r6, #0]
 8001d2a:	f04f 0600 	mov.w	r6, #0
 8001d2e:	68a3      	ldr	r3, [r4, #8]
 8001d30:	bf08      	it	eq
 8001d32:	1aad      	subeq	r5, r5, r2
 8001d34:	6922      	ldr	r2, [r4, #16]
 8001d36:	bf08      	it	eq
 8001d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	bfc4      	itt	gt
 8001d40:	1a9b      	subgt	r3, r3, r2
 8001d42:	18ed      	addgt	r5, r5, r3
 8001d44:	341a      	adds	r4, #26
 8001d46:	42b5      	cmp	r5, r6
 8001d48:	d11a      	bne.n	8001d80 <_printf_common+0xcc>
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	e008      	b.n	8001d60 <_printf_common+0xac>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4652      	mov	r2, sl
 8001d52:	4649      	mov	r1, r9
 8001d54:	4638      	mov	r0, r7
 8001d56:	47c0      	blx	r8
 8001d58:	3001      	adds	r0, #1
 8001d5a:	d103      	bne.n	8001d64 <_printf_common+0xb0>
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d64:	3501      	adds	r5, #1
 8001d66:	e7c4      	b.n	8001cf2 <_printf_common+0x3e>
 8001d68:	2030      	movs	r0, #48	; 0x30
 8001d6a:	18e1      	adds	r1, r4, r3
 8001d6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d76:	4422      	add	r2, r4
 8001d78:	3302      	adds	r3, #2
 8001d7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d7e:	e7c5      	b.n	8001d0c <_printf_common+0x58>
 8001d80:	2301      	movs	r3, #1
 8001d82:	4622      	mov	r2, r4
 8001d84:	4649      	mov	r1, r9
 8001d86:	4638      	mov	r0, r7
 8001d88:	47c0      	blx	r8
 8001d8a:	3001      	adds	r0, #1
 8001d8c:	d0e6      	beq.n	8001d5c <_printf_common+0xa8>
 8001d8e:	3601      	adds	r6, #1
 8001d90:	e7d9      	b.n	8001d46 <_printf_common+0x92>
	...

08001d94 <_printf_i>:
 8001d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d98:	460c      	mov	r4, r1
 8001d9a:	7e27      	ldrb	r7, [r4, #24]
 8001d9c:	4691      	mov	r9, r2
 8001d9e:	2f78      	cmp	r7, #120	; 0x78
 8001da0:	4680      	mov	r8, r0
 8001da2:	469a      	mov	sl, r3
 8001da4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001da6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001daa:	d807      	bhi.n	8001dbc <_printf_i+0x28>
 8001dac:	2f62      	cmp	r7, #98	; 0x62
 8001dae:	d80a      	bhi.n	8001dc6 <_printf_i+0x32>
 8001db0:	2f00      	cmp	r7, #0
 8001db2:	f000 80d9 	beq.w	8001f68 <_printf_i+0x1d4>
 8001db6:	2f58      	cmp	r7, #88	; 0x58
 8001db8:	f000 80a4 	beq.w	8001f04 <_printf_i+0x170>
 8001dbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001dc4:	e03a      	b.n	8001e3c <_printf_i+0xa8>
 8001dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001dca:	2b15      	cmp	r3, #21
 8001dcc:	d8f6      	bhi.n	8001dbc <_printf_i+0x28>
 8001dce:	a001      	add	r0, pc, #4	; (adr r0, 8001dd4 <_printf_i+0x40>)
 8001dd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001dd4:	08001e2d 	.word	0x08001e2d
 8001dd8:	08001e41 	.word	0x08001e41
 8001ddc:	08001dbd 	.word	0x08001dbd
 8001de0:	08001dbd 	.word	0x08001dbd
 8001de4:	08001dbd 	.word	0x08001dbd
 8001de8:	08001dbd 	.word	0x08001dbd
 8001dec:	08001e41 	.word	0x08001e41
 8001df0:	08001dbd 	.word	0x08001dbd
 8001df4:	08001dbd 	.word	0x08001dbd
 8001df8:	08001dbd 	.word	0x08001dbd
 8001dfc:	08001dbd 	.word	0x08001dbd
 8001e00:	08001f4f 	.word	0x08001f4f
 8001e04:	08001e71 	.word	0x08001e71
 8001e08:	08001f31 	.word	0x08001f31
 8001e0c:	08001dbd 	.word	0x08001dbd
 8001e10:	08001dbd 	.word	0x08001dbd
 8001e14:	08001f71 	.word	0x08001f71
 8001e18:	08001dbd 	.word	0x08001dbd
 8001e1c:	08001e71 	.word	0x08001e71
 8001e20:	08001dbd 	.word	0x08001dbd
 8001e24:	08001dbd 	.word	0x08001dbd
 8001e28:	08001f39 	.word	0x08001f39
 8001e2c:	680b      	ldr	r3, [r1, #0]
 8001e2e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001e32:	1d1a      	adds	r2, r3, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	600a      	str	r2, [r1, #0]
 8001e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0a4      	b.n	8001f8a <_printf_i+0x1f6>
 8001e40:	6825      	ldr	r5, [r4, #0]
 8001e42:	6808      	ldr	r0, [r1, #0]
 8001e44:	062e      	lsls	r6, r5, #24
 8001e46:	f100 0304 	add.w	r3, r0, #4
 8001e4a:	d50a      	bpl.n	8001e62 <_printf_i+0xce>
 8001e4c:	6805      	ldr	r5, [r0, #0]
 8001e4e:	600b      	str	r3, [r1, #0]
 8001e50:	2d00      	cmp	r5, #0
 8001e52:	da03      	bge.n	8001e5c <_printf_i+0xc8>
 8001e54:	232d      	movs	r3, #45	; 0x2d
 8001e56:	426d      	negs	r5, r5
 8001e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	485e      	ldr	r0, [pc, #376]	; (8001fd8 <_printf_i+0x244>)
 8001e60:	e019      	b.n	8001e96 <_printf_i+0x102>
 8001e62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001e66:	6805      	ldr	r5, [r0, #0]
 8001e68:	600b      	str	r3, [r1, #0]
 8001e6a:	bf18      	it	ne
 8001e6c:	b22d      	sxthne	r5, r5
 8001e6e:	e7ef      	b.n	8001e50 <_printf_i+0xbc>
 8001e70:	680b      	ldr	r3, [r1, #0]
 8001e72:	6825      	ldr	r5, [r4, #0]
 8001e74:	1d18      	adds	r0, r3, #4
 8001e76:	6008      	str	r0, [r1, #0]
 8001e78:	0628      	lsls	r0, r5, #24
 8001e7a:	d501      	bpl.n	8001e80 <_printf_i+0xec>
 8001e7c:	681d      	ldr	r5, [r3, #0]
 8001e7e:	e002      	b.n	8001e86 <_printf_i+0xf2>
 8001e80:	0669      	lsls	r1, r5, #25
 8001e82:	d5fb      	bpl.n	8001e7c <_printf_i+0xe8>
 8001e84:	881d      	ldrh	r5, [r3, #0]
 8001e86:	2f6f      	cmp	r7, #111	; 0x6f
 8001e88:	bf0c      	ite	eq
 8001e8a:	2308      	moveq	r3, #8
 8001e8c:	230a      	movne	r3, #10
 8001e8e:	4852      	ldr	r0, [pc, #328]	; (8001fd8 <_printf_i+0x244>)
 8001e90:	2100      	movs	r1, #0
 8001e92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001e96:	6866      	ldr	r6, [r4, #4]
 8001e98:	2e00      	cmp	r6, #0
 8001e9a:	bfa8      	it	ge
 8001e9c:	6821      	ldrge	r1, [r4, #0]
 8001e9e:	60a6      	str	r6, [r4, #8]
 8001ea0:	bfa4      	itt	ge
 8001ea2:	f021 0104 	bicge.w	r1, r1, #4
 8001ea6:	6021      	strge	r1, [r4, #0]
 8001ea8:	b90d      	cbnz	r5, 8001eae <_printf_i+0x11a>
 8001eaa:	2e00      	cmp	r6, #0
 8001eac:	d04d      	beq.n	8001f4a <_printf_i+0x1b6>
 8001eae:	4616      	mov	r6, r2
 8001eb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8001eb4:	fb03 5711 	mls	r7, r3, r1, r5
 8001eb8:	5dc7      	ldrb	r7, [r0, r7]
 8001eba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001ebe:	462f      	mov	r7, r5
 8001ec0:	42bb      	cmp	r3, r7
 8001ec2:	460d      	mov	r5, r1
 8001ec4:	d9f4      	bls.n	8001eb0 <_printf_i+0x11c>
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d10b      	bne.n	8001ee2 <_printf_i+0x14e>
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	07df      	lsls	r7, r3, #31
 8001ece:	d508      	bpl.n	8001ee2 <_printf_i+0x14e>
 8001ed0:	6923      	ldr	r3, [r4, #16]
 8001ed2:	6861      	ldr	r1, [r4, #4]
 8001ed4:	4299      	cmp	r1, r3
 8001ed6:	bfde      	ittt	le
 8001ed8:	2330      	movle	r3, #48	; 0x30
 8001eda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001ede:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8001ee2:	1b92      	subs	r2, r2, r6
 8001ee4:	6122      	str	r2, [r4, #16]
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	4621      	mov	r1, r4
 8001eea:	4640      	mov	r0, r8
 8001eec:	f8cd a000 	str.w	sl, [sp]
 8001ef0:	aa03      	add	r2, sp, #12
 8001ef2:	f7ff fedf 	bl	8001cb4 <_printf_common>
 8001ef6:	3001      	adds	r0, #1
 8001ef8:	d14c      	bne.n	8001f94 <_printf_i+0x200>
 8001efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001efe:	b004      	add	sp, #16
 8001f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f04:	4834      	ldr	r0, [pc, #208]	; (8001fd8 <_printf_i+0x244>)
 8001f06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001f0a:	680e      	ldr	r6, [r1, #0]
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001f12:	061f      	lsls	r7, r3, #24
 8001f14:	600e      	str	r6, [r1, #0]
 8001f16:	d514      	bpl.n	8001f42 <_printf_i+0x1ae>
 8001f18:	07d9      	lsls	r1, r3, #31
 8001f1a:	bf44      	itt	mi
 8001f1c:	f043 0320 	orrmi.w	r3, r3, #32
 8001f20:	6023      	strmi	r3, [r4, #0]
 8001f22:	b91d      	cbnz	r5, 8001f2c <_printf_i+0x198>
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	f023 0320 	bic.w	r3, r3, #32
 8001f2a:	6023      	str	r3, [r4, #0]
 8001f2c:	2310      	movs	r3, #16
 8001f2e:	e7af      	b.n	8001e90 <_printf_i+0xfc>
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	f043 0320 	orr.w	r3, r3, #32
 8001f36:	6023      	str	r3, [r4, #0]
 8001f38:	2378      	movs	r3, #120	; 0x78
 8001f3a:	4828      	ldr	r0, [pc, #160]	; (8001fdc <_printf_i+0x248>)
 8001f3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f40:	e7e3      	b.n	8001f0a <_printf_i+0x176>
 8001f42:	065e      	lsls	r6, r3, #25
 8001f44:	bf48      	it	mi
 8001f46:	b2ad      	uxthmi	r5, r5
 8001f48:	e7e6      	b.n	8001f18 <_printf_i+0x184>
 8001f4a:	4616      	mov	r6, r2
 8001f4c:	e7bb      	b.n	8001ec6 <_printf_i+0x132>
 8001f4e:	680b      	ldr	r3, [r1, #0]
 8001f50:	6826      	ldr	r6, [r4, #0]
 8001f52:	1d1d      	adds	r5, r3, #4
 8001f54:	6960      	ldr	r0, [r4, #20]
 8001f56:	600d      	str	r5, [r1, #0]
 8001f58:	0635      	lsls	r5, r6, #24
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	d501      	bpl.n	8001f62 <_printf_i+0x1ce>
 8001f5e:	6018      	str	r0, [r3, #0]
 8001f60:	e002      	b.n	8001f68 <_printf_i+0x1d4>
 8001f62:	0671      	lsls	r1, r6, #25
 8001f64:	d5fb      	bpl.n	8001f5e <_printf_i+0x1ca>
 8001f66:	8018      	strh	r0, [r3, #0]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	4616      	mov	r6, r2
 8001f6c:	6123      	str	r3, [r4, #16]
 8001f6e:	e7ba      	b.n	8001ee6 <_printf_i+0x152>
 8001f70:	680b      	ldr	r3, [r1, #0]
 8001f72:	1d1a      	adds	r2, r3, #4
 8001f74:	600a      	str	r2, [r1, #0]
 8001f76:	681e      	ldr	r6, [r3, #0]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4630      	mov	r0, r6
 8001f7c:	6862      	ldr	r2, [r4, #4]
 8001f7e:	f000 fa9d 	bl	80024bc <memchr>
 8001f82:	b108      	cbz	r0, 8001f88 <_printf_i+0x1f4>
 8001f84:	1b80      	subs	r0, r0, r6
 8001f86:	6060      	str	r0, [r4, #4]
 8001f88:	6863      	ldr	r3, [r4, #4]
 8001f8a:	6123      	str	r3, [r4, #16]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f92:	e7a8      	b.n	8001ee6 <_printf_i+0x152>
 8001f94:	4632      	mov	r2, r6
 8001f96:	4649      	mov	r1, r9
 8001f98:	4640      	mov	r0, r8
 8001f9a:	6923      	ldr	r3, [r4, #16]
 8001f9c:	47d0      	blx	sl
 8001f9e:	3001      	adds	r0, #1
 8001fa0:	d0ab      	beq.n	8001efa <_printf_i+0x166>
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	079b      	lsls	r3, r3, #30
 8001fa6:	d413      	bmi.n	8001fd0 <_printf_i+0x23c>
 8001fa8:	68e0      	ldr	r0, [r4, #12]
 8001faa:	9b03      	ldr	r3, [sp, #12]
 8001fac:	4298      	cmp	r0, r3
 8001fae:	bfb8      	it	lt
 8001fb0:	4618      	movlt	r0, r3
 8001fb2:	e7a4      	b.n	8001efe <_printf_i+0x16a>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	4632      	mov	r2, r6
 8001fb8:	4649      	mov	r1, r9
 8001fba:	4640      	mov	r0, r8
 8001fbc:	47d0      	blx	sl
 8001fbe:	3001      	adds	r0, #1
 8001fc0:	d09b      	beq.n	8001efa <_printf_i+0x166>
 8001fc2:	3501      	adds	r5, #1
 8001fc4:	68e3      	ldr	r3, [r4, #12]
 8001fc6:	9903      	ldr	r1, [sp, #12]
 8001fc8:	1a5b      	subs	r3, r3, r1
 8001fca:	42ab      	cmp	r3, r5
 8001fcc:	dcf2      	bgt.n	8001fb4 <_printf_i+0x220>
 8001fce:	e7eb      	b.n	8001fa8 <_printf_i+0x214>
 8001fd0:	2500      	movs	r5, #0
 8001fd2:	f104 0619 	add.w	r6, r4, #25
 8001fd6:	e7f5      	b.n	8001fc4 <_printf_i+0x230>
 8001fd8:	080026cd 	.word	0x080026cd
 8001fdc:	080026de 	.word	0x080026de

08001fe0 <_sbrk_r>:
 8001fe0:	b538      	push	{r3, r4, r5, lr}
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	4d05      	ldr	r5, [pc, #20]	; (8001ffc <_sbrk_r+0x1c>)
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	4608      	mov	r0, r1
 8001fea:	602b      	str	r3, [r5, #0]
 8001fec:	f7fe fa5c 	bl	80004a8 <_sbrk>
 8001ff0:	1c43      	adds	r3, r0, #1
 8001ff2:	d102      	bne.n	8001ffa <_sbrk_r+0x1a>
 8001ff4:	682b      	ldr	r3, [r5, #0]
 8001ff6:	b103      	cbz	r3, 8001ffa <_sbrk_r+0x1a>
 8001ff8:	6023      	str	r3, [r4, #0]
 8001ffa:	bd38      	pop	{r3, r4, r5, pc}
 8001ffc:	20000350 	.word	0x20000350

08002000 <__sread>:
 8002000:	b510      	push	{r4, lr}
 8002002:	460c      	mov	r4, r1
 8002004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002008:	f000 fabe 	bl	8002588 <_read_r>
 800200c:	2800      	cmp	r0, #0
 800200e:	bfab      	itete	ge
 8002010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002012:	89a3      	ldrhlt	r3, [r4, #12]
 8002014:	181b      	addge	r3, r3, r0
 8002016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800201a:	bfac      	ite	ge
 800201c:	6563      	strge	r3, [r4, #84]	; 0x54
 800201e:	81a3      	strhlt	r3, [r4, #12]
 8002020:	bd10      	pop	{r4, pc}

08002022 <__swrite>:
 8002022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002026:	461f      	mov	r7, r3
 8002028:	898b      	ldrh	r3, [r1, #12]
 800202a:	4605      	mov	r5, r0
 800202c:	05db      	lsls	r3, r3, #23
 800202e:	460c      	mov	r4, r1
 8002030:	4616      	mov	r6, r2
 8002032:	d505      	bpl.n	8002040 <__swrite+0x1e>
 8002034:	2302      	movs	r3, #2
 8002036:	2200      	movs	r2, #0
 8002038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800203c:	f000 f9c8 	bl	80023d0 <_lseek_r>
 8002040:	89a3      	ldrh	r3, [r4, #12]
 8002042:	4632      	mov	r2, r6
 8002044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002048:	81a3      	strh	r3, [r4, #12]
 800204a:	4628      	mov	r0, r5
 800204c:	463b      	mov	r3, r7
 800204e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002056:	f000 b869 	b.w	800212c <_write_r>

0800205a <__sseek>:
 800205a:	b510      	push	{r4, lr}
 800205c:	460c      	mov	r4, r1
 800205e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002062:	f000 f9b5 	bl	80023d0 <_lseek_r>
 8002066:	1c43      	adds	r3, r0, #1
 8002068:	89a3      	ldrh	r3, [r4, #12]
 800206a:	bf15      	itete	ne
 800206c:	6560      	strne	r0, [r4, #84]	; 0x54
 800206e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002076:	81a3      	strheq	r3, [r4, #12]
 8002078:	bf18      	it	ne
 800207a:	81a3      	strhne	r3, [r4, #12]
 800207c:	bd10      	pop	{r4, pc}

0800207e <__sclose>:
 800207e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002082:	f000 b8d3 	b.w	800222c <_close_r>
	...

08002088 <__swbuf_r>:
 8002088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208a:	460e      	mov	r6, r1
 800208c:	4614      	mov	r4, r2
 800208e:	4605      	mov	r5, r0
 8002090:	b118      	cbz	r0, 800209a <__swbuf_r+0x12>
 8002092:	6983      	ldr	r3, [r0, #24]
 8002094:	b90b      	cbnz	r3, 800209a <__swbuf_r+0x12>
 8002096:	f7ff fbbb 	bl	8001810 <__sinit>
 800209a:	4b21      	ldr	r3, [pc, #132]	; (8002120 <__swbuf_r+0x98>)
 800209c:	429c      	cmp	r4, r3
 800209e:	d12b      	bne.n	80020f8 <__swbuf_r+0x70>
 80020a0:	686c      	ldr	r4, [r5, #4]
 80020a2:	69a3      	ldr	r3, [r4, #24]
 80020a4:	60a3      	str	r3, [r4, #8]
 80020a6:	89a3      	ldrh	r3, [r4, #12]
 80020a8:	071a      	lsls	r2, r3, #28
 80020aa:	d52f      	bpl.n	800210c <__swbuf_r+0x84>
 80020ac:	6923      	ldr	r3, [r4, #16]
 80020ae:	b36b      	cbz	r3, 800210c <__swbuf_r+0x84>
 80020b0:	6923      	ldr	r3, [r4, #16]
 80020b2:	6820      	ldr	r0, [r4, #0]
 80020b4:	b2f6      	uxtb	r6, r6
 80020b6:	1ac0      	subs	r0, r0, r3
 80020b8:	6963      	ldr	r3, [r4, #20]
 80020ba:	4637      	mov	r7, r6
 80020bc:	4283      	cmp	r3, r0
 80020be:	dc04      	bgt.n	80020ca <__swbuf_r+0x42>
 80020c0:	4621      	mov	r1, r4
 80020c2:	4628      	mov	r0, r5
 80020c4:	f000 f948 	bl	8002358 <_fflush_r>
 80020c8:	bb30      	cbnz	r0, 8002118 <__swbuf_r+0x90>
 80020ca:	68a3      	ldr	r3, [r4, #8]
 80020cc:	3001      	adds	r0, #1
 80020ce:	3b01      	subs	r3, #1
 80020d0:	60a3      	str	r3, [r4, #8]
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	6022      	str	r2, [r4, #0]
 80020d8:	701e      	strb	r6, [r3, #0]
 80020da:	6963      	ldr	r3, [r4, #20]
 80020dc:	4283      	cmp	r3, r0
 80020de:	d004      	beq.n	80020ea <__swbuf_r+0x62>
 80020e0:	89a3      	ldrh	r3, [r4, #12]
 80020e2:	07db      	lsls	r3, r3, #31
 80020e4:	d506      	bpl.n	80020f4 <__swbuf_r+0x6c>
 80020e6:	2e0a      	cmp	r6, #10
 80020e8:	d104      	bne.n	80020f4 <__swbuf_r+0x6c>
 80020ea:	4621      	mov	r1, r4
 80020ec:	4628      	mov	r0, r5
 80020ee:	f000 f933 	bl	8002358 <_fflush_r>
 80020f2:	b988      	cbnz	r0, 8002118 <__swbuf_r+0x90>
 80020f4:	4638      	mov	r0, r7
 80020f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <__swbuf_r+0x9c>)
 80020fa:	429c      	cmp	r4, r3
 80020fc:	d101      	bne.n	8002102 <__swbuf_r+0x7a>
 80020fe:	68ac      	ldr	r4, [r5, #8]
 8002100:	e7cf      	b.n	80020a2 <__swbuf_r+0x1a>
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <__swbuf_r+0xa0>)
 8002104:	429c      	cmp	r4, r3
 8002106:	bf08      	it	eq
 8002108:	68ec      	ldreq	r4, [r5, #12]
 800210a:	e7ca      	b.n	80020a2 <__swbuf_r+0x1a>
 800210c:	4621      	mov	r1, r4
 800210e:	4628      	mov	r0, r5
 8002110:	f000 f81e 	bl	8002150 <__swsetup_r>
 8002114:	2800      	cmp	r0, #0
 8002116:	d0cb      	beq.n	80020b0 <__swbuf_r+0x28>
 8002118:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800211c:	e7ea      	b.n	80020f4 <__swbuf_r+0x6c>
 800211e:	bf00      	nop
 8002120:	0800267c 	.word	0x0800267c
 8002124:	0800269c 	.word	0x0800269c
 8002128:	0800265c 	.word	0x0800265c

0800212c <_write_r>:
 800212c:	b538      	push	{r3, r4, r5, lr}
 800212e:	4604      	mov	r4, r0
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	2200      	movs	r2, #0
 8002136:	4d05      	ldr	r5, [pc, #20]	; (800214c <_write_r+0x20>)
 8002138:	602a      	str	r2, [r5, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	f7fe f968 	bl	8000410 <_write>
 8002140:	1c43      	adds	r3, r0, #1
 8002142:	d102      	bne.n	800214a <_write_r+0x1e>
 8002144:	682b      	ldr	r3, [r5, #0]
 8002146:	b103      	cbz	r3, 800214a <_write_r+0x1e>
 8002148:	6023      	str	r3, [r4, #0]
 800214a:	bd38      	pop	{r3, r4, r5, pc}
 800214c:	20000350 	.word	0x20000350

08002150 <__swsetup_r>:
 8002150:	4b32      	ldr	r3, [pc, #200]	; (800221c <__swsetup_r+0xcc>)
 8002152:	b570      	push	{r4, r5, r6, lr}
 8002154:	681d      	ldr	r5, [r3, #0]
 8002156:	4606      	mov	r6, r0
 8002158:	460c      	mov	r4, r1
 800215a:	b125      	cbz	r5, 8002166 <__swsetup_r+0x16>
 800215c:	69ab      	ldr	r3, [r5, #24]
 800215e:	b913      	cbnz	r3, 8002166 <__swsetup_r+0x16>
 8002160:	4628      	mov	r0, r5
 8002162:	f7ff fb55 	bl	8001810 <__sinit>
 8002166:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <__swsetup_r+0xd0>)
 8002168:	429c      	cmp	r4, r3
 800216a:	d10f      	bne.n	800218c <__swsetup_r+0x3c>
 800216c:	686c      	ldr	r4, [r5, #4]
 800216e:	89a3      	ldrh	r3, [r4, #12]
 8002170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002174:	0719      	lsls	r1, r3, #28
 8002176:	d42c      	bmi.n	80021d2 <__swsetup_r+0x82>
 8002178:	06dd      	lsls	r5, r3, #27
 800217a:	d411      	bmi.n	80021a0 <__swsetup_r+0x50>
 800217c:	2309      	movs	r3, #9
 800217e:	6033      	str	r3, [r6, #0]
 8002180:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002188:	81a3      	strh	r3, [r4, #12]
 800218a:	e03e      	b.n	800220a <__swsetup_r+0xba>
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <__swsetup_r+0xd4>)
 800218e:	429c      	cmp	r4, r3
 8002190:	d101      	bne.n	8002196 <__swsetup_r+0x46>
 8002192:	68ac      	ldr	r4, [r5, #8]
 8002194:	e7eb      	b.n	800216e <__swsetup_r+0x1e>
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <__swsetup_r+0xd8>)
 8002198:	429c      	cmp	r4, r3
 800219a:	bf08      	it	eq
 800219c:	68ec      	ldreq	r4, [r5, #12]
 800219e:	e7e6      	b.n	800216e <__swsetup_r+0x1e>
 80021a0:	0758      	lsls	r0, r3, #29
 80021a2:	d512      	bpl.n	80021ca <__swsetup_r+0x7a>
 80021a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021a6:	b141      	cbz	r1, 80021ba <__swsetup_r+0x6a>
 80021a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021ac:	4299      	cmp	r1, r3
 80021ae:	d002      	beq.n	80021b6 <__swsetup_r+0x66>
 80021b0:	4630      	mov	r0, r6
 80021b2:	f000 f99d 	bl	80024f0 <_free_r>
 80021b6:	2300      	movs	r3, #0
 80021b8:	6363      	str	r3, [r4, #52]	; 0x34
 80021ba:	89a3      	ldrh	r3, [r4, #12]
 80021bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80021c0:	81a3      	strh	r3, [r4, #12]
 80021c2:	2300      	movs	r3, #0
 80021c4:	6063      	str	r3, [r4, #4]
 80021c6:	6923      	ldr	r3, [r4, #16]
 80021c8:	6023      	str	r3, [r4, #0]
 80021ca:	89a3      	ldrh	r3, [r4, #12]
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	81a3      	strh	r3, [r4, #12]
 80021d2:	6923      	ldr	r3, [r4, #16]
 80021d4:	b94b      	cbnz	r3, 80021ea <__swsetup_r+0x9a>
 80021d6:	89a3      	ldrh	r3, [r4, #12]
 80021d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80021dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e0:	d003      	beq.n	80021ea <__swsetup_r+0x9a>
 80021e2:	4621      	mov	r1, r4
 80021e4:	4630      	mov	r0, r6
 80021e6:	f000 f929 	bl	800243c <__smakebuf_r>
 80021ea:	89a0      	ldrh	r0, [r4, #12]
 80021ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80021f0:	f010 0301 	ands.w	r3, r0, #1
 80021f4:	d00a      	beq.n	800220c <__swsetup_r+0xbc>
 80021f6:	2300      	movs	r3, #0
 80021f8:	60a3      	str	r3, [r4, #8]
 80021fa:	6963      	ldr	r3, [r4, #20]
 80021fc:	425b      	negs	r3, r3
 80021fe:	61a3      	str	r3, [r4, #24]
 8002200:	6923      	ldr	r3, [r4, #16]
 8002202:	b943      	cbnz	r3, 8002216 <__swsetup_r+0xc6>
 8002204:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002208:	d1ba      	bne.n	8002180 <__swsetup_r+0x30>
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	0781      	lsls	r1, r0, #30
 800220e:	bf58      	it	pl
 8002210:	6963      	ldrpl	r3, [r4, #20]
 8002212:	60a3      	str	r3, [r4, #8]
 8002214:	e7f4      	b.n	8002200 <__swsetup_r+0xb0>
 8002216:	2000      	movs	r0, #0
 8002218:	e7f7      	b.n	800220a <__swsetup_r+0xba>
 800221a:	bf00      	nop
 800221c:	2000000c 	.word	0x2000000c
 8002220:	0800267c 	.word	0x0800267c
 8002224:	0800269c 	.word	0x0800269c
 8002228:	0800265c 	.word	0x0800265c

0800222c <_close_r>:
 800222c:	b538      	push	{r3, r4, r5, lr}
 800222e:	2300      	movs	r3, #0
 8002230:	4d05      	ldr	r5, [pc, #20]	; (8002248 <_close_r+0x1c>)
 8002232:	4604      	mov	r4, r0
 8002234:	4608      	mov	r0, r1
 8002236:	602b      	str	r3, [r5, #0]
 8002238:	f7fe f906 	bl	8000448 <_close>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	d102      	bne.n	8002246 <_close_r+0x1a>
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	b103      	cbz	r3, 8002246 <_close_r+0x1a>
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	20000350 	.word	0x20000350

0800224c <__sflush_r>:
 800224c:	898a      	ldrh	r2, [r1, #12]
 800224e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002252:	4605      	mov	r5, r0
 8002254:	0710      	lsls	r0, r2, #28
 8002256:	460c      	mov	r4, r1
 8002258:	d458      	bmi.n	800230c <__sflush_r+0xc0>
 800225a:	684b      	ldr	r3, [r1, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	dc05      	bgt.n	800226c <__sflush_r+0x20>
 8002260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	dc02      	bgt.n	800226c <__sflush_r+0x20>
 8002266:	2000      	movs	r0, #0
 8002268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800226c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800226e:	2e00      	cmp	r6, #0
 8002270:	d0f9      	beq.n	8002266 <__sflush_r+0x1a>
 8002272:	2300      	movs	r3, #0
 8002274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002278:	682f      	ldr	r7, [r5, #0]
 800227a:	602b      	str	r3, [r5, #0]
 800227c:	d032      	beq.n	80022e4 <__sflush_r+0x98>
 800227e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002280:	89a3      	ldrh	r3, [r4, #12]
 8002282:	075a      	lsls	r2, r3, #29
 8002284:	d505      	bpl.n	8002292 <__sflush_r+0x46>
 8002286:	6863      	ldr	r3, [r4, #4]
 8002288:	1ac0      	subs	r0, r0, r3
 800228a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800228c:	b10b      	cbz	r3, 8002292 <__sflush_r+0x46>
 800228e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002290:	1ac0      	subs	r0, r0, r3
 8002292:	2300      	movs	r3, #0
 8002294:	4602      	mov	r2, r0
 8002296:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002298:	4628      	mov	r0, r5
 800229a:	6a21      	ldr	r1, [r4, #32]
 800229c:	47b0      	blx	r6
 800229e:	1c43      	adds	r3, r0, #1
 80022a0:	89a3      	ldrh	r3, [r4, #12]
 80022a2:	d106      	bne.n	80022b2 <__sflush_r+0x66>
 80022a4:	6829      	ldr	r1, [r5, #0]
 80022a6:	291d      	cmp	r1, #29
 80022a8:	d82c      	bhi.n	8002304 <__sflush_r+0xb8>
 80022aa:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <__sflush_r+0x108>)
 80022ac:	40ca      	lsrs	r2, r1
 80022ae:	07d6      	lsls	r6, r2, #31
 80022b0:	d528      	bpl.n	8002304 <__sflush_r+0xb8>
 80022b2:	2200      	movs	r2, #0
 80022b4:	6062      	str	r2, [r4, #4]
 80022b6:	6922      	ldr	r2, [r4, #16]
 80022b8:	04d9      	lsls	r1, r3, #19
 80022ba:	6022      	str	r2, [r4, #0]
 80022bc:	d504      	bpl.n	80022c8 <__sflush_r+0x7c>
 80022be:	1c42      	adds	r2, r0, #1
 80022c0:	d101      	bne.n	80022c6 <__sflush_r+0x7a>
 80022c2:	682b      	ldr	r3, [r5, #0]
 80022c4:	b903      	cbnz	r3, 80022c8 <__sflush_r+0x7c>
 80022c6:	6560      	str	r0, [r4, #84]	; 0x54
 80022c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022ca:	602f      	str	r7, [r5, #0]
 80022cc:	2900      	cmp	r1, #0
 80022ce:	d0ca      	beq.n	8002266 <__sflush_r+0x1a>
 80022d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022d4:	4299      	cmp	r1, r3
 80022d6:	d002      	beq.n	80022de <__sflush_r+0x92>
 80022d8:	4628      	mov	r0, r5
 80022da:	f000 f909 	bl	80024f0 <_free_r>
 80022de:	2000      	movs	r0, #0
 80022e0:	6360      	str	r0, [r4, #52]	; 0x34
 80022e2:	e7c1      	b.n	8002268 <__sflush_r+0x1c>
 80022e4:	6a21      	ldr	r1, [r4, #32]
 80022e6:	2301      	movs	r3, #1
 80022e8:	4628      	mov	r0, r5
 80022ea:	47b0      	blx	r6
 80022ec:	1c41      	adds	r1, r0, #1
 80022ee:	d1c7      	bne.n	8002280 <__sflush_r+0x34>
 80022f0:	682b      	ldr	r3, [r5, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0c4      	beq.n	8002280 <__sflush_r+0x34>
 80022f6:	2b1d      	cmp	r3, #29
 80022f8:	d001      	beq.n	80022fe <__sflush_r+0xb2>
 80022fa:	2b16      	cmp	r3, #22
 80022fc:	d101      	bne.n	8002302 <__sflush_r+0xb6>
 80022fe:	602f      	str	r7, [r5, #0]
 8002300:	e7b1      	b.n	8002266 <__sflush_r+0x1a>
 8002302:	89a3      	ldrh	r3, [r4, #12]
 8002304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002308:	81a3      	strh	r3, [r4, #12]
 800230a:	e7ad      	b.n	8002268 <__sflush_r+0x1c>
 800230c:	690f      	ldr	r7, [r1, #16]
 800230e:	2f00      	cmp	r7, #0
 8002310:	d0a9      	beq.n	8002266 <__sflush_r+0x1a>
 8002312:	0793      	lsls	r3, r2, #30
 8002314:	bf18      	it	ne
 8002316:	2300      	movne	r3, #0
 8002318:	680e      	ldr	r6, [r1, #0]
 800231a:	bf08      	it	eq
 800231c:	694b      	ldreq	r3, [r1, #20]
 800231e:	eba6 0807 	sub.w	r8, r6, r7
 8002322:	600f      	str	r7, [r1, #0]
 8002324:	608b      	str	r3, [r1, #8]
 8002326:	f1b8 0f00 	cmp.w	r8, #0
 800232a:	dd9c      	ble.n	8002266 <__sflush_r+0x1a>
 800232c:	4643      	mov	r3, r8
 800232e:	463a      	mov	r2, r7
 8002330:	4628      	mov	r0, r5
 8002332:	6a21      	ldr	r1, [r4, #32]
 8002334:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002336:	47b0      	blx	r6
 8002338:	2800      	cmp	r0, #0
 800233a:	dc06      	bgt.n	800234a <__sflush_r+0xfe>
 800233c:	89a3      	ldrh	r3, [r4, #12]
 800233e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002346:	81a3      	strh	r3, [r4, #12]
 8002348:	e78e      	b.n	8002268 <__sflush_r+0x1c>
 800234a:	4407      	add	r7, r0
 800234c:	eba8 0800 	sub.w	r8, r8, r0
 8002350:	e7e9      	b.n	8002326 <__sflush_r+0xda>
 8002352:	bf00      	nop
 8002354:	20400001 	.word	0x20400001

08002358 <_fflush_r>:
 8002358:	b538      	push	{r3, r4, r5, lr}
 800235a:	690b      	ldr	r3, [r1, #16]
 800235c:	4605      	mov	r5, r0
 800235e:	460c      	mov	r4, r1
 8002360:	b913      	cbnz	r3, 8002368 <_fflush_r+0x10>
 8002362:	2500      	movs	r5, #0
 8002364:	4628      	mov	r0, r5
 8002366:	bd38      	pop	{r3, r4, r5, pc}
 8002368:	b118      	cbz	r0, 8002372 <_fflush_r+0x1a>
 800236a:	6983      	ldr	r3, [r0, #24]
 800236c:	b90b      	cbnz	r3, 8002372 <_fflush_r+0x1a>
 800236e:	f7ff fa4f 	bl	8001810 <__sinit>
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <_fflush_r+0x6c>)
 8002374:	429c      	cmp	r4, r3
 8002376:	d11b      	bne.n	80023b0 <_fflush_r+0x58>
 8002378:	686c      	ldr	r4, [r5, #4]
 800237a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0ef      	beq.n	8002362 <_fflush_r+0xa>
 8002382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002384:	07d0      	lsls	r0, r2, #31
 8002386:	d404      	bmi.n	8002392 <_fflush_r+0x3a>
 8002388:	0599      	lsls	r1, r3, #22
 800238a:	d402      	bmi.n	8002392 <_fflush_r+0x3a>
 800238c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800238e:	f7ff fadd 	bl	800194c <__retarget_lock_acquire_recursive>
 8002392:	4628      	mov	r0, r5
 8002394:	4621      	mov	r1, r4
 8002396:	f7ff ff59 	bl	800224c <__sflush_r>
 800239a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800239c:	4605      	mov	r5, r0
 800239e:	07da      	lsls	r2, r3, #31
 80023a0:	d4e0      	bmi.n	8002364 <_fflush_r+0xc>
 80023a2:	89a3      	ldrh	r3, [r4, #12]
 80023a4:	059b      	lsls	r3, r3, #22
 80023a6:	d4dd      	bmi.n	8002364 <_fflush_r+0xc>
 80023a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023aa:	f7ff fad0 	bl	800194e <__retarget_lock_release_recursive>
 80023ae:	e7d9      	b.n	8002364 <_fflush_r+0xc>
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <_fflush_r+0x70>)
 80023b2:	429c      	cmp	r4, r3
 80023b4:	d101      	bne.n	80023ba <_fflush_r+0x62>
 80023b6:	68ac      	ldr	r4, [r5, #8]
 80023b8:	e7df      	b.n	800237a <_fflush_r+0x22>
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <_fflush_r+0x74>)
 80023bc:	429c      	cmp	r4, r3
 80023be:	bf08      	it	eq
 80023c0:	68ec      	ldreq	r4, [r5, #12]
 80023c2:	e7da      	b.n	800237a <_fflush_r+0x22>
 80023c4:	0800267c 	.word	0x0800267c
 80023c8:	0800269c 	.word	0x0800269c
 80023cc:	0800265c 	.word	0x0800265c

080023d0 <_lseek_r>:
 80023d0:	b538      	push	{r3, r4, r5, lr}
 80023d2:	4604      	mov	r4, r0
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	2200      	movs	r2, #0
 80023da:	4d05      	ldr	r5, [pc, #20]	; (80023f0 <_lseek_r+0x20>)
 80023dc:	602a      	str	r2, [r5, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	f7fe f856 	bl	8000490 <_lseek>
 80023e4:	1c43      	adds	r3, r0, #1
 80023e6:	d102      	bne.n	80023ee <_lseek_r+0x1e>
 80023e8:	682b      	ldr	r3, [r5, #0]
 80023ea:	b103      	cbz	r3, 80023ee <_lseek_r+0x1e>
 80023ec:	6023      	str	r3, [r4, #0]
 80023ee:	bd38      	pop	{r3, r4, r5, pc}
 80023f0:	20000350 	.word	0x20000350

080023f4 <__swhatbuf_r>:
 80023f4:	b570      	push	{r4, r5, r6, lr}
 80023f6:	460e      	mov	r6, r1
 80023f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023fc:	4614      	mov	r4, r2
 80023fe:	2900      	cmp	r1, #0
 8002400:	461d      	mov	r5, r3
 8002402:	b096      	sub	sp, #88	; 0x58
 8002404:	da07      	bge.n	8002416 <__swhatbuf_r+0x22>
 8002406:	2300      	movs	r3, #0
 8002408:	602b      	str	r3, [r5, #0]
 800240a:	89b3      	ldrh	r3, [r6, #12]
 800240c:	061a      	lsls	r2, r3, #24
 800240e:	d410      	bmi.n	8002432 <__swhatbuf_r+0x3e>
 8002410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002414:	e00e      	b.n	8002434 <__swhatbuf_r+0x40>
 8002416:	466a      	mov	r2, sp
 8002418:	f000 f8c8 	bl	80025ac <_fstat_r>
 800241c:	2800      	cmp	r0, #0
 800241e:	dbf2      	blt.n	8002406 <__swhatbuf_r+0x12>
 8002420:	9a01      	ldr	r2, [sp, #4]
 8002422:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002426:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800242a:	425a      	negs	r2, r3
 800242c:	415a      	adcs	r2, r3
 800242e:	602a      	str	r2, [r5, #0]
 8002430:	e7ee      	b.n	8002410 <__swhatbuf_r+0x1c>
 8002432:	2340      	movs	r3, #64	; 0x40
 8002434:	2000      	movs	r0, #0
 8002436:	6023      	str	r3, [r4, #0]
 8002438:	b016      	add	sp, #88	; 0x58
 800243a:	bd70      	pop	{r4, r5, r6, pc}

0800243c <__smakebuf_r>:
 800243c:	898b      	ldrh	r3, [r1, #12]
 800243e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002440:	079d      	lsls	r5, r3, #30
 8002442:	4606      	mov	r6, r0
 8002444:	460c      	mov	r4, r1
 8002446:	d507      	bpl.n	8002458 <__smakebuf_r+0x1c>
 8002448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800244c:	6023      	str	r3, [r4, #0]
 800244e:	6123      	str	r3, [r4, #16]
 8002450:	2301      	movs	r3, #1
 8002452:	6163      	str	r3, [r4, #20]
 8002454:	b002      	add	sp, #8
 8002456:	bd70      	pop	{r4, r5, r6, pc}
 8002458:	466a      	mov	r2, sp
 800245a:	ab01      	add	r3, sp, #4
 800245c:	f7ff ffca 	bl	80023f4 <__swhatbuf_r>
 8002460:	9900      	ldr	r1, [sp, #0]
 8002462:	4605      	mov	r5, r0
 8002464:	4630      	mov	r0, r6
 8002466:	f7ff fa73 	bl	8001950 <_malloc_r>
 800246a:	b948      	cbnz	r0, 8002480 <__smakebuf_r+0x44>
 800246c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002470:	059a      	lsls	r2, r3, #22
 8002472:	d4ef      	bmi.n	8002454 <__smakebuf_r+0x18>
 8002474:	f023 0303 	bic.w	r3, r3, #3
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	81a3      	strh	r3, [r4, #12]
 800247e:	e7e3      	b.n	8002448 <__smakebuf_r+0xc>
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <__smakebuf_r+0x7c>)
 8002482:	62b3      	str	r3, [r6, #40]	; 0x28
 8002484:	89a3      	ldrh	r3, [r4, #12]
 8002486:	6020      	str	r0, [r4, #0]
 8002488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248c:	81a3      	strh	r3, [r4, #12]
 800248e:	9b00      	ldr	r3, [sp, #0]
 8002490:	6120      	str	r0, [r4, #16]
 8002492:	6163      	str	r3, [r4, #20]
 8002494:	9b01      	ldr	r3, [sp, #4]
 8002496:	b15b      	cbz	r3, 80024b0 <__smakebuf_r+0x74>
 8002498:	4630      	mov	r0, r6
 800249a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800249e:	f000 f897 	bl	80025d0 <_isatty_r>
 80024a2:	b128      	cbz	r0, 80024b0 <__smakebuf_r+0x74>
 80024a4:	89a3      	ldrh	r3, [r4, #12]
 80024a6:	f023 0303 	bic.w	r3, r3, #3
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	81a3      	strh	r3, [r4, #12]
 80024b0:	89a0      	ldrh	r0, [r4, #12]
 80024b2:	4305      	orrs	r5, r0
 80024b4:	81a5      	strh	r5, [r4, #12]
 80024b6:	e7cd      	b.n	8002454 <__smakebuf_r+0x18>
 80024b8:	080017a9 	.word	0x080017a9

080024bc <memchr>:
 80024bc:	4603      	mov	r3, r0
 80024be:	b510      	push	{r4, lr}
 80024c0:	b2c9      	uxtb	r1, r1
 80024c2:	4402      	add	r2, r0
 80024c4:	4293      	cmp	r3, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	d101      	bne.n	80024ce <memchr+0x12>
 80024ca:	2000      	movs	r0, #0
 80024cc:	e003      	b.n	80024d6 <memchr+0x1a>
 80024ce:	7804      	ldrb	r4, [r0, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	428c      	cmp	r4, r1
 80024d4:	d1f6      	bne.n	80024c4 <memchr+0x8>
 80024d6:	bd10      	pop	{r4, pc}

080024d8 <__malloc_lock>:
 80024d8:	4801      	ldr	r0, [pc, #4]	; (80024e0 <__malloc_lock+0x8>)
 80024da:	f7ff ba37 	b.w	800194c <__retarget_lock_acquire_recursive>
 80024de:	bf00      	nop
 80024e0:	20000348 	.word	0x20000348

080024e4 <__malloc_unlock>:
 80024e4:	4801      	ldr	r0, [pc, #4]	; (80024ec <__malloc_unlock+0x8>)
 80024e6:	f7ff ba32 	b.w	800194e <__retarget_lock_release_recursive>
 80024ea:	bf00      	nop
 80024ec:	20000348 	.word	0x20000348

080024f0 <_free_r>:
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	4605      	mov	r5, r0
 80024f4:	2900      	cmp	r1, #0
 80024f6:	d043      	beq.n	8002580 <_free_r+0x90>
 80024f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024fc:	1f0c      	subs	r4, r1, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bfb8      	it	lt
 8002502:	18e4      	addlt	r4, r4, r3
 8002504:	f7ff ffe8 	bl	80024d8 <__malloc_lock>
 8002508:	4a1e      	ldr	r2, [pc, #120]	; (8002584 <_free_r+0x94>)
 800250a:	6813      	ldr	r3, [r2, #0]
 800250c:	4610      	mov	r0, r2
 800250e:	b933      	cbnz	r3, 800251e <_free_r+0x2e>
 8002510:	6063      	str	r3, [r4, #4]
 8002512:	6014      	str	r4, [r2, #0]
 8002514:	4628      	mov	r0, r5
 8002516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800251a:	f7ff bfe3 	b.w	80024e4 <__malloc_unlock>
 800251e:	42a3      	cmp	r3, r4
 8002520:	d90a      	bls.n	8002538 <_free_r+0x48>
 8002522:	6821      	ldr	r1, [r4, #0]
 8002524:	1862      	adds	r2, r4, r1
 8002526:	4293      	cmp	r3, r2
 8002528:	bf01      	itttt	eq
 800252a:	681a      	ldreq	r2, [r3, #0]
 800252c:	685b      	ldreq	r3, [r3, #4]
 800252e:	1852      	addeq	r2, r2, r1
 8002530:	6022      	streq	r2, [r4, #0]
 8002532:	6063      	str	r3, [r4, #4]
 8002534:	6004      	str	r4, [r0, #0]
 8002536:	e7ed      	b.n	8002514 <_free_r+0x24>
 8002538:	461a      	mov	r2, r3
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	b10b      	cbz	r3, 8002542 <_free_r+0x52>
 800253e:	42a3      	cmp	r3, r4
 8002540:	d9fa      	bls.n	8002538 <_free_r+0x48>
 8002542:	6811      	ldr	r1, [r2, #0]
 8002544:	1850      	adds	r0, r2, r1
 8002546:	42a0      	cmp	r0, r4
 8002548:	d10b      	bne.n	8002562 <_free_r+0x72>
 800254a:	6820      	ldr	r0, [r4, #0]
 800254c:	4401      	add	r1, r0
 800254e:	1850      	adds	r0, r2, r1
 8002550:	4283      	cmp	r3, r0
 8002552:	6011      	str	r1, [r2, #0]
 8002554:	d1de      	bne.n	8002514 <_free_r+0x24>
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4401      	add	r1, r0
 800255c:	6011      	str	r1, [r2, #0]
 800255e:	6053      	str	r3, [r2, #4]
 8002560:	e7d8      	b.n	8002514 <_free_r+0x24>
 8002562:	d902      	bls.n	800256a <_free_r+0x7a>
 8002564:	230c      	movs	r3, #12
 8002566:	602b      	str	r3, [r5, #0]
 8002568:	e7d4      	b.n	8002514 <_free_r+0x24>
 800256a:	6820      	ldr	r0, [r4, #0]
 800256c:	1821      	adds	r1, r4, r0
 800256e:	428b      	cmp	r3, r1
 8002570:	bf01      	itttt	eq
 8002572:	6819      	ldreq	r1, [r3, #0]
 8002574:	685b      	ldreq	r3, [r3, #4]
 8002576:	1809      	addeq	r1, r1, r0
 8002578:	6021      	streq	r1, [r4, #0]
 800257a:	6063      	str	r3, [r4, #4]
 800257c:	6054      	str	r4, [r2, #4]
 800257e:	e7c9      	b.n	8002514 <_free_r+0x24>
 8002580:	bd38      	pop	{r3, r4, r5, pc}
 8002582:	bf00      	nop
 8002584:	20000338 	.word	0x20000338

08002588 <_read_r>:
 8002588:	b538      	push	{r3, r4, r5, lr}
 800258a:	4604      	mov	r4, r0
 800258c:	4608      	mov	r0, r1
 800258e:	4611      	mov	r1, r2
 8002590:	2200      	movs	r2, #0
 8002592:	4d05      	ldr	r5, [pc, #20]	; (80025a8 <_read_r+0x20>)
 8002594:	602a      	str	r2, [r5, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	f7fd ff1d 	bl	80003d6 <_read>
 800259c:	1c43      	adds	r3, r0, #1
 800259e:	d102      	bne.n	80025a6 <_read_r+0x1e>
 80025a0:	682b      	ldr	r3, [r5, #0]
 80025a2:	b103      	cbz	r3, 80025a6 <_read_r+0x1e>
 80025a4:	6023      	str	r3, [r4, #0]
 80025a6:	bd38      	pop	{r3, r4, r5, pc}
 80025a8:	20000350 	.word	0x20000350

080025ac <_fstat_r>:
 80025ac:	b538      	push	{r3, r4, r5, lr}
 80025ae:	2300      	movs	r3, #0
 80025b0:	4d06      	ldr	r5, [pc, #24]	; (80025cc <_fstat_r+0x20>)
 80025b2:	4604      	mov	r4, r0
 80025b4:	4608      	mov	r0, r1
 80025b6:	4611      	mov	r1, r2
 80025b8:	602b      	str	r3, [r5, #0]
 80025ba:	f7fd ff50 	bl	800045e <_fstat>
 80025be:	1c43      	adds	r3, r0, #1
 80025c0:	d102      	bne.n	80025c8 <_fstat_r+0x1c>
 80025c2:	682b      	ldr	r3, [r5, #0]
 80025c4:	b103      	cbz	r3, 80025c8 <_fstat_r+0x1c>
 80025c6:	6023      	str	r3, [r4, #0]
 80025c8:	bd38      	pop	{r3, r4, r5, pc}
 80025ca:	bf00      	nop
 80025cc:	20000350 	.word	0x20000350

080025d0 <_isatty_r>:
 80025d0:	b538      	push	{r3, r4, r5, lr}
 80025d2:	2300      	movs	r3, #0
 80025d4:	4d05      	ldr	r5, [pc, #20]	; (80025ec <_isatty_r+0x1c>)
 80025d6:	4604      	mov	r4, r0
 80025d8:	4608      	mov	r0, r1
 80025da:	602b      	str	r3, [r5, #0]
 80025dc:	f7fd ff4e 	bl	800047c <_isatty>
 80025e0:	1c43      	adds	r3, r0, #1
 80025e2:	d102      	bne.n	80025ea <_isatty_r+0x1a>
 80025e4:	682b      	ldr	r3, [r5, #0]
 80025e6:	b103      	cbz	r3, 80025ea <_isatty_r+0x1a>
 80025e8:	6023      	str	r3, [r4, #0]
 80025ea:	bd38      	pop	{r3, r4, r5, pc}
 80025ec:	20000350 	.word	0x20000350

080025f0 <_init>:
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f2:	bf00      	nop
 80025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f6:	bc08      	pop	{r3}
 80025f8:	469e      	mov	lr, r3
 80025fa:	4770      	bx	lr

080025fc <_fini>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	bf00      	nop
 8002600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002602:	bc08      	pop	{r3}
 8002604:	469e      	mov	lr, r3
 8002606:	4770      	bx	lr
