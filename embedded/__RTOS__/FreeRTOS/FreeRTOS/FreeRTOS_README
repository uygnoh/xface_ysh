############################################################
### // FreeRTOS 任务切换 //
############################################################
// PendSV异常
        1) 任务切换具体过程是在PendSV中断服务函数里面进行
        2) 如何进入PendSV中断，通过设置 ICSR寄存器Bit28置“1”
        3) 

  
// 任务切换场合
        1) taskYILED()
           vTaskDelay()->portYIELD_WITHIN_API()->portYIELD
        2) SysTick中断任务函数




// PendSV_Handler() 或 xPortPendSVHandler()
        0) 进入异常之前CPU自动压入( xPSR, PC, LR, R12, R3-R0)
        1) 判断是否使用FPU。 如果使用的话将S16-S31入栈。
           EXC_RETURN当处理异常的时候bit4会被CONTROL寄存器的FPCA位替代。
           当断断EXC_RETURN的bit4是否为1，如果为“1”需要保存浮点寄存器。
        2) 手动把{R4-R11, R14}入栈，并保存PSP的值到 pxCurrentTCB
        3) 关闭中断
        4) 调用vTaskSwitchContext, 获取下一个要运行的任务
        5) 打开中断
        6) 获取要切换的任务的栈顶指针
        7) 手动把{R4-R11, R14}出栈
        8) 判断是否使用FPU。 如果使用的话将S16-S31出栈。
           EXC_RETURN当处理异常的时候bit4会被CONTROL寄存器的FPCA位替代。
           当断断EXC_RETURN的bit4是否为1，如果为“1”需要保存浮点寄存器。
        9) 把要切换任务的入口地址给PSP
        
        
__asm void xPortPendSVHandler( void )
{
  extern uxCriticalNesting;
  extern pxCurrentTCB;
  extern vTaskSwitchContext;

  PRESERVE8

  mrs r0, psp
  isb
  /* Get the location of the current TCB. */
  ldr	r3, =pxCurrentTCB
  ldr	r2, [r3]

  /* Is the task using the FPU context?  If so, push high vfp registers. */
  tst r14, #0x10
  it eq
  vstmdbeq r0!, {s16-s31}

  /* Save the core registers. */
  stmdb r0!, {r4-r11, r14}

  /* Save the new top of stack into the first member of the TCB. */
  str r0, [r2]

  stmdb sp!, {r3}
  mov r0, #configMAX_SYSCALL_INTERRUPT_PRIORITY
  msr basepri, r0
  dsb
  isb
  bl vTaskSwitchContext
  mov r0, #0
  msr basepri, r0
  ldmia sp!, {r3}

  /* The first item in pxCurrentTCB is the task top of stack. */
  ldr r1, [r3]
  ldr r0, [r1]

  /* Pop the core registers. */
  ldmia r0!, {r4-r11, r14}

  /* Is the task using the FPU context?  If so, pop the high vfp registers
  too. */
  tst r14, #0x10
  it eq
  vldmiaeq r0!, {s16-s31}

  msr psp, r0
  isb
  #ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata */
	  #if WORKAROUND_PMU_CM001 == 1
		  push { r14 }
		  pop { pc }
		  nop
	  #endif
  #endif

  bx r14
}        
        
############################################################
### // vTaskSwitchContext //
############################################################
1 判断uxSchedulerSuspended是否为pdFALSE, 也就是任务调度器没有被挂起
2 如果任务调度器没有被挂起，查找下一个要运行的任务
3 更新当前任务运行时间
4 调用 taskSELECT_HIGHEST_PRIORITY_TASK()获取下一个要运行的任务
  通用方法
    1）
    2）
  硬件方法
    1）
    2）



void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
		traceTASK_SWITCHED_OUT(); //调试使用

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
				#endif

				/* Add the amount of time the task has been running to the
				accumulated time so far.  The time the task started running was
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
		traceTASK_SWITCHED_IN();

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
