/*******************************************************************************
  函数名称: task2()
  输入参数: pvParameters
  输出参数: 无
  函数功能: 点灯程序
*******************************************************************************/
#if (INCLUDE_vTaskDelay == 1)
void vTaskDelay(const TickType_t xTicksToDelay)
{
        BaseType_t xAlreadyYielded = pdFALSE;
        if (xTicksToDelay > (TickType_t)0U) {
                vTaskSupendAll();
                //添加当前任务到延时列表中
                prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
                xAlreadyYielded = xTaskResumAll();
        }
        if (xAlreadyYielded == pdFALsE)
                protYIELD_WITHIN_API();
}

static void prvAddCurrentTaskToDelayList(
        TickType_t xTicksToWait, 
        const BaseType_t xCanBlockIndefinitely)
{
        TickType_t xTimeToWake;
        //获取当前系统时钟值
        const TickType_t xConstTickCount = xTickCount;
        
        //把当前任务从就绪列表中移出
        if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0)
                protRESET_READY_PRIORITY(pxCurrentTCB->uxPriority, uxTopReadyPriority);
        
        #if (INCLUDE_vTaskSuspend == 1)
        if ((xTicksToWaait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
                vListInsertEnd(&SuspendedTaskList, &(pxCurrentTCB->xStateListItem));
        } else {
                xTimeToWake = xConstTickCount + xTicksToWait;
                listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
                if (xTimeToWake < xConstTickCount) {
                        vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
                }
        }
}
