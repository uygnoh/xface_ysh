/*******************************************************************************
                            ARM-CM 特殊指令
*******************************************************************************/
DSB             // 等待它前边的存储器访问操作执行完毕后才执行后边的指令
ISB             // 清洗流水线，将缓存到流水线的指令进行清洗


CPSIE   I       // PRIMASK   = 0( 开中断 )
CPSID   I       // PRIMASK   = 1( 关中断 )
CPSIE   F       // FAULTMASK = 0( 开异常 )
CPSID   F       // FAULTMASK = 1( 关异常 )


MRS R1, CPSR    // 把CPSR(特殊寄存器)中的内容传送到R1(通用寄存器)中
MSR CPSR, R1    // 把R1(通用寄存器)中的内容传送到CPSR(特殊寄存器)中



/*******************************************************************************
                            ARM-CM 存储加载指令
*******************************************************************************/
// 根据ATPCS规则，我们一般使用FD（FullDescending）类型的数据栈！
// 所以经常使用的指令就有STMFD和LDMFD。这两个指令一般用于进行程序
// 搬移等大规模操作前的cpu现场保护和操作结束后的现场恢复，属于非单
// 一连续的压栈和出栈 
STMFD    SP!, {R4-R11, LR}
LDMFD    SP!, {R4-R11, LR}


LDR R0, =OSRunning
LDR R1, #1      // 把立即数“1”加载到R1寄存器中
STR R1, [R0]    // 把“R1”中的内容存储到[R0]中


MOVW           // 把“16”立即数放到寄存器的低16位，高16位清0
MOVT           // 把“16”立即数放到寄存器的高16位，低16位不受影响           


LDM           // 从一片连续的地址空间中加载多个字到若干寄存器
STM           // 存储若干寄存器中的字到一片连续的地址空间中



/*******************************************************************************
                            ARM-CM 比较跳转指令
*******************************************************************************/
BL      // 转移并连接（Link）。用于呼叫一个子程序，返回地址被存储在LR中
BLX
CBZ     // 比较，如果结果为零(Zero)就转移(只能跳到后面的指令)
