/*******************************************************************************
        => chibios__HAL框架__(hardware abstraction layer)
        http://wiki.csie.ncku.edu.tw/embedded/chibios
*******************************************************************************/

        => portable HAL
//_____________________________________________________________
//The portable HAL (HAL port).
./os/hal/src/
./os/hal/include/


        => MCU的HAL端口层
//_____________________________________________________________
//The HAL port layer for your MCU(您的MCU的HAL端口层).
./os/hal/ports/STM32/STM32F1xx/
./os/hal/ports/STM32/LLD/


        => OSAL（操作系统抽象层简介）
//_____________________________________________________________
//The OSAL（操作系统抽象层简介） layer for your RTOS(您的RTOS的OSAL端口层).
//HAL使用一个名为OSAL的抽象层与底层RTOS（可选）交互。您需要在您的项目中包括用于
//RTOS的OSAL或用于裸机（不带RTOS）的OSAL。
//Chibios中提供了几个OSALS，在您的项目中包括以下内容之一：
        ./os/hal/osal/rt
        ./os/hal/osal/nil
        ./os/hal/osal/os-less/
        ./os/hal/osal/lib/
        ./os/hal/osal/sb/


        => HAL框架配置文件
//_____________________________________________________________
//HAL框架需要一个配置文件，它通常放在项目根目录下，但是它可以放在编译器
//可以访问的任何目录中。文件名为halconf.h，模板可从以下位置获取：
        ./os/hal/templates/halconf.h
        
        
        
        
/*******************************************************************************
        => chibios
*******************************************************************************/
kernel          //OS kernel中與平台無關的部份
port layer      //OS kernel中與結構/編譯器 相關的部份
platform layer  //包含許多device drivers的實作
various         //提供各種額外但不包含在特定組件的工具的函式庫
HAL(hardware abstraction layer) //包含許多抽象的device drivers，
                                //提供普遍的I/O API給不同平台的應用程式


        => 系統狀態(System States)
//_____________________________________________________________
//Init
        1 ChibiOS/RT進行OS初始化之前的狀態， 進行所謂的物理重置
          (physical reset)時也會進到這個狀態
        2 呼叫chSysInit()這個函式進行初始化
        3 在這個狀態裡所有可以發出Maskable Interrupt的sources全部失效
        4 初始化完後進到 Normal
//Normal
        1 初始化完後到達的狀態
        2 在這裡可以執行Thread, 接收並處理任何中斷及呼叫任何system API
//Suspended
        1 在這個狀態裡，無法接收正常中斷(IRQ)，但是可以接收快速中斷(FIQ)
        2 除了可以呼叫chSysDisable()到達Disable狀態，以及chSysEnable()
          到達Normal狀態之外，其他所有system API都不能呼叫
//Disabled
        1 所有可遮罩式中斷資源全部失效，系統僅能處理不可遮罩式中斷(NMI)
        2 除了可以呼叫chSysEnable()到達Normal狀態，以及chSysSuspend()
          到達Suspended狀態之外，其他所有system API都不能呼叫
//Sleep
        1 當系統中沒有其他的Thread要跑時，此時系統會執行一個 idle thread，到達這個狀態
        2 此時系統將處於 low power mode，並等待一個中斷跳出這個狀態
        3 接收到一個IRQ時，將會跑到 SRI 狀態去處理中斷，處理完後會回到 Normal
//S-Locked
        1 在 Normal 的狀態中呼叫 chSysLock() 之後會進入此狀態
        2 此時系統會進入 Kernel locked 的狀態
        3 此時處理器會跑在 thread-privileged mode
        4 在這個狀態裡，無法接收正常中斷(IRQ)，但是可以接收快速中斷(FIQ)
        5 在這個狀態裡可以使用 S class 和 I class 的 API
        6 呼叫 chSysUnlock() 會回到 Normal 狀態
//I-Locked
        1 在 SRI 的狀態中呼叫 chSysLockFromIsr() 之後會進入這個狀態
        2 此時系統會進入 Kernel locked 的狀態
        3 此時處理器會跑在 exception-privileged mode
        4 在這個狀態裡，無法接收正常中斷(IRQ)，但是可以接收快速中斷(FIQ)
        5 在這個狀態裡可以使用 I class 的 API
        6 呼叫 chSysUnlockFromIsr() 會回到 SRI 狀態
//Serving Regular Interuupt(SRI)
        1 處理一個正常中斷 ( IRQ ) 時，會進入這個狀態
        2 此時只有更高等級的中斷能夠進行搶佔
        3 此時處理器會跑在 exception-privileged mode
        4 此時無法呼叫大部分的 system API，
          除非先呼叫 chSysLockFromIsr() 進入 I-Locked state，
          之後才能夠進行其他 API 的呼叫
//Serving Fast Interrupt(SFI)
        1 處理一個快速中斷 ( FIQ ) 時會進入這個狀態
        2 無法呼叫所有 system API
        3 除了 Init , Halted , SNMI , Disabled 之外的任一狀態，
          只要接收到 FIQ 就會跳到這個狀態，處理完後會回到上一狀態
//Serving Non-Maskable Interrupt(SNNI)
        1 處裡一個不可遮罩式的中斷時 (NMI) 會進入這個狀態
        2 無法呼叫所有 system API
        3 除了 Halted 的任一狀態裡只要接收到 NMI，
          或是在 Halted 中收到非同步的 NMI 時就會跳到這個狀態，
          處理完後會回到上一狀態
// Halted
        1 呼叫 chSysHalt() 時會進入這個狀態
        2 所有中斷都不能使用



        => Chibi OS/RT 的中斷類別 
//_____________________________________________________________
//正常中斷 ( Regular Interrupts ):
        1 可遮罩式的中斷
        2 在 GCC Ports / ARM Cortex-Mx / ARMv7-M 的移植版本中，
          優先度等級較低的中斷將被視為正常中斷
        3 無法搶佔部分的 kernel code
        4 在此類的 interrupt handler 裡面可以呼叫 operating system APIs。
//快速中斷 ( Fast Interrupts ):
        1 可遮罩式的中斷
        2 在 GCC Ports / ARM Cortex-Mx / ARMv7-M 的移植版本中，
          優先度等級較高的中斷將被視為快速中斷
        3 可以搶佔 kernel code ，也因此有較短的延遲 ( lantency ) 。
        4 在此類的 interrupt handler 裡面無法呼叫任何一個 operating system API 
//不可遮罩式中斷 ( Non Maskable Interrupts, NMI):
        1 不受OS控制的中斷，擁有最短的延遲 ( lowest latency )



        => Chibi OS/RT 中對 STM32F4XX 系列所支援的中斷
//_____________________________________________________________
        1 共定義了99種中斷
        2 hal_lld.h 中定義了可用的 ISR name 和 對應的 vector name
        3 而在 /os/ports/GCC/ARMCMx/STM32F4xx/vectors.c 中則定義了 
          Interrupt Vector Table 及宣告了處理 Interrupt 的函式
        4 另外在 /os/hal/platforms/STM32F4xx/stm32f4xx.h 
          中有一段 code 定義了 Interrupt number



        => 執行緒(Thread)狀態
//_____________________________________________________________
        Start           //初始的狀態
        Suspended       //Thread剛被create出來時的狀態,尚未決定要被放
                        //進ReadyList等待執行或是直接執行
        Running         //正在執行中的狀態
        Stop            //終止的狀態,到達這個狀態表示Thread被執行完了
        Sleeping        //Thread暫時不進行工作。此時Thread會被暫時移出
                        //ReadyList。等待Mutex解鎖,等待其他Thread執行
                        //完,或是等待接收訊息時都會進入這個狀態。
        Ready           //被放進ReadyList, 等待被執行的狀態



        => 較重要的 member data
//_____________________________________________________________
        p_prio          //Thread priority
        p_ctx           //Processor context, 紀錄 Thread 目前的執行狀態
        p_state         //紀錄 Thread 目前所處於的狀態 (正在執行, 等待被執行, 
                        //等待某一個 Mutex 被解鎖….等)
        p_preempt       //記錄這個 Thread 還有多少個 tick 可以用來執行
        p_waiting       //一個單向的 Thread linked list。 當有其他 Thread 
                        //欲等待此 Thread 執行完時, 這些 Thread 就會被塞進
                        //這個 waiting list 裡面
        p_msgqueue      //一個雙向的 Thread linked list。 用來存放欲傳給此 
                        //Thread 訊息的 Thread (詳見後面 IPC 的部分)。
        p_mtxlist       //Mutex 結構，用來存放此 Thread 目前佔有的 Mutex



/*******************************************************************************
        =>  ChibiOS 有 2 種創造 Thread 的方式: 靜態 ( static ) 和動態 ( dynamic)
*******************************************************************************/
        => 靜態
//_____________________________________________________________
//首先利用  WORKING_AREA(Thread_Name, stack_size) 
//這個 macro 去配置一塊記憶體給 Thread
        1 包括這條 Thread 所需要的 stack memory , Thread 自己本身存 
          stucture data 用的 memory
        2 還有 external context, internal context (詳見後面 context switch 的部分)
          和 interrupt stack(用來 serve interrupt 用的)
//接著呼叫 chThdCreateStatic() 來創造一個靜態的 Thread
        //chThdCreateStatic () 裡面會呼叫到一行 chSchWakeupS
        (tp = chThdCreateI(wsp, size, prio, pf, arg), RDY_OK);
        chThdCreateI() 會將這個 Thread 的資料結構做好初始化 
        (包括設定好 priority, 初始的 function pointer…等等)
        //chSchWakeupS() 則是會比對新建的 Thread, 與目前的 Thread 哪個 priority 比較高,
         並決定新建的 Thread 是可以立刻開始跑或是要被放入 ready list。


        => 動態
//_____________________________________________________________
//可利用 chThdCreateFromHeap() 或是 chThdCreateFromMemoryPool() 來動態新增 Thread
//From heap:
    從Heap中動態配置一塊記憶體
    Create 時間不固定，但宣告的working area 大小是彈性的 
    (相同大小的記憶體下 memory pool 較快，1/2倍左右)
    相當於malloc & free
    Heap 易存在 memory fragmentation 的問題
    需要針對每一個thread release，需要多次操作
//From memory pool
    從Memory pool 中動態配置一塊記憶體
    Create時間固定，宣告的working area 大小是固定的 
    （相同大小->THREAD_STACK_SIZE 下，比heap快，2倍左右)
    不易存在memory fragmentation 的問題
    可直接release memory pool，一次操作就好
    
    
    
/*******************************************************************************
        =>  行程間通訊 ( Inter-Process Communication, IPC ) ^
*******************************************************************************/


        => Mutex
//_____________________________________________________________
//實作 Mutex (假設有 Thread A 欲鎖住一個 Mutex)
1 先判斷這個 Mutex 有無其他 Thread 鎖著
2 沒有的話就直接鎖住
3 有的話會再判斷鎖住這個 Mutex 的 Thread ( 假設為Thread B ), 
  它的 priority 有沒有比 Thread A 大
4 如果比 Thread A 大, 則 Thread A 會按照其 priority 被塞進這個 Mutex 的 m_queue 裡, 
  與其他 Thread 一起等待這個 Mutex 被解鎖
5 如果比 Thread A 小, 則會先將 Thread B 的 priority 提升至跟 Thread A 一樣的 level, 
  並做 Reschedule 的動作，讓 Thread B 快點執行完。至於 Thread A 則會按照其 priority 
  被塞進這個 Mutex 的 m_queue 裡, 與其他 Thread 一起等待這個 Mutex 被解鎖。



        => Synchronous Messages
//_____________________________________________________________
//ChibiOS/RT之中，Thread與Thread之間也有所謂的同步訊息傳送/接收機制
//傳送者 ( Sender )
  呼叫 chMsgSend() 來傳送訊息
  此時會被塞進接收者的 p_msgqueue 裡面(等待接收者提取訊息)
  判斷接收者的狀態，並喚醒接收者，告知訊息已傳送，可以起來接收訊息了
  傳送者自己本身會進入某種睡眠狀態 ( THD_STATE_SNDMSGQ )
  接收者收到訊息後，會呼叫 chMsgRelease() 喚醒傳送者，告知訊息傳遞已經結束，可以起來了

//接收者 ( Reciever )
  呼叫 chMsgWait() 來等待接收訊息
  此時會先進入某種睡眠狀態 ( THD_STATE_WTMSG )
  直到被傳送者喚醒後，會從自己的 p_msgqueue 裡面提取訊息接收
  最後把傳送者的狀態設成 ( THD_STATE_SNDMSG )，並呼叫 chMsgRelease()喚醒傳送者，
  告知訊息傳遞已經結束，可以起來了







    
    

