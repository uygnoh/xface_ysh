###########################################################
### ChibiOS项目
###########################################################
% ChibiOS项目现在拥有四种软件产品组合，可以单独使用或联合使用。
它现在计算两个不同的内核：
第一个是RT，现在名称  ChibiOS / RT  仅指RT; 
第二个是另一个OS，它可以被认为是RT的子集，被设计为有史以来最小的RTOS，并被命名为  ChibiOS / NIL）。

% HAL（硬件抽象层）已重命名为ChibiOS / HAL。

% 从最新版本开始，ChibiOS还包括一组新的复杂驱动程序：它的名称是ChibiOS / EX，代表外部外围设备。



###########################################################
### chibios | RT | NIL | LIB | SB | HAL
###########################################################
% ChibiOS/RT
% 该设计是为功能完备的RTOS设计的，出发点在于性能完善和代码量大小合适。
1 高性能
2 静态的体系结构
3 强大的调试功能
4 代码库清理
5 与CMSIS RTOS的兼容性比较好


% ChibiOS/NIL
% NIL的设计思想是适合资源非常小的设备。
系统很小，最小配置可以在低于1KB的ram上运行。
小的内存管理，小的线程，信号量管理
全静态的架构


% ChibiOS/LIB
% 作为一个额外的库，可以被ChibiOS/RT与
% ChibiOS/NIL共同使用，是操作系统的扩展功能
1 二值信号量
2 邮箱
3 fifo
4 动态线程
5 内存堆管理
6 内存池管理


% ChibiOS/SB
% 该扩展主要是针对 Cortex-M3, M4 and M7内核。
% 其主要的作用是可以让应用独立的运行在一个沙盒里。
这种沙盒应用是支持两种，一种是静态的内存，一种是动态的内存。


% ChibiOS/HAL
% 系统的硬件抽象层，该抽象层可以让系统和驱动进行很好的对接，
% 应用程序使用起来更加容易。主要特定：
将硬件抽象出来，应用程序可以不用管驱动的具体实现
支持大多数的MCU外设
能够支持RT和NIL
方便移植


###########################################################
### chibios 中断处理
###########################################################
% 在Chibios中，有三种类型的中断。
1 Regular Interrupts: 也就是定期中断，这种中断模式下，
  可屏蔽的中断源不能被抢占，但是需要按照特定的规则来编写这种中断的处理函数。
2 Fast Interrupts: 可以快速相应的中断，可抢占资源。
3 Non Maskable Interrupts: 系统中正常的中断处理。

在RTOS中，比较关键的地方就是确定性与稳定性。确定性一般就是表示处理
中断的时间尽可能短而且时间可预测，一定程度上，中断响应时间也是评判一个RTOS的性能的重要指标。



###########################################################
### chibios 系统状态
###########################################################
Init:       系统初始化阶段，这个阶段中，所有可屏蔽的中断都无法响应。
            当系统处于该状态时，除了chSysInit()可以被调用，其他的API都无法被使用。
Normal:     正常状态，当前状态下所有的系统中断可以响应，并且线程正常的运行。
Suspended:  系统挂起状态，这种状态下，只有FIQ可以响应，普通的中断不能响应，
            并且不能使用chSysDisable（）或chSysEnable（）之外的任何系统API来更改状态。
Disabled:   系统处于该状态时，所有的中断都不能被响应，
            无法使用chSysSuspend（）或chSysEnable（）之外的任何系统API来更改状态。
Sleep:      与体系架构相关的低功耗模式，空闲线程进入该模式后，等待事件重新唤醒变成Normal状态。
S-Locked:   内核已锁定，常规中断源已禁用。快速中断源使能。在这种状态下可以调用S类和I类API。
I-Locked:   内核被锁定，常规中断源被禁用。I-Class API可从此状态调用。
SRI:        全称为Serving Regular Interrupt，不能访问任何系统API，
            但是可以使用chSysLockFromIsr（）切换到I-Locked状态，
            然后调用任何I-Class API。中断处理程序在某些体系结构上可以抢占，
            因此在调用系统API之前切换到I锁定状态非常重要。
            
            
###########################################################
### chibios 调度机制
###########################################################            
% 基本上在大部分的RTOS的设计上，线程的状态都是这些。在执行调度策略的时候，
% 也是非常简单，就是将高优先级的线程挂载在调度器的双向链表上，按照优先级的高低进行，
% 数字越小，优先级越低。 如果有同等优先级，则按照时间片轮循的方式进行。           
            
            
            
            
            
            
            
            
            
            
            
            
