/*******************************************************************************
        => STM32F4x__高级定时器__钟源选择
*******************************************************************************/
  1 内部时钟源（CK_INT）
//_________________________________________________________
TIMx_SMCR（SMS=000）      //工作在内部时钟源模式



  2 外部时钟模式1 //外部通道输入引脚TINx（x=1，2）
//_________________________________________________________
TIMx_SMCR（SMS=111）      //工作在外部时钟模式“1”
                         //有“2”个来自于定时器输入通道的时钟信号，分别是
                         //（TIMx_CH1, TIMx_CH2）分别对应（TI1FP1, TI2FP2）
TIMx_CCMR1（IC1F[7:4]）   //捕获比较寄存器1, (输入捕获1滤波器)
                         //此位域定义TI1输入采样频率适于TI1的数字滤波器带宽
                         //数字滤波器由计数器组成，每N个事件才视为一个有效边沿
TIMx_CR1（CKD[9:8]）      //时钟分频， 此位域指示定时时钟（CK_INT）频率与死区发生器
                         //及数字滤波器（ETR，TIx）所使用的死区及采样时钟（fDTS）之间的分频比



  3 外部时钟模式2 //外部触发输入ETR
//_________________________________________________________
TIMx_SMCR（ECE=1）        //使用外部时钟源模式2


  4 内部触发输入  //ITRx, 使用一个定时器作为另一个定时器的预分频器
//_________________________________________________________
TIMx定时器从内部连接在一起，以实现定时器同步级联。 当某个定时器配置为主模式时，
可以对另一个配置为从模式的定时器的计数器执行复位，启动，停止操作或为其提供时钟。



/*******************************************************************************
        => STM32F4x__高级定时器__控制器
*******************************************************************************/
1 触发器控制器
        //用来针对片内外设输出触发信号，为其它定时器提供时钟和触发DAC/ADC转换
2 从模式控制器
        //可以控制计数器复位， 启动， 递增、递减，计数
3 编码器接口



/*******************************************************************************
        => STM32F4x__高级定时器__时基单元
*******************************************************************************/
TIMx_CNT                //计数器
TIMx_PSC                //预分频器
TIMx_ARR                //自动重装载寄存器
TIMx_RCR                //复计数寄存器

UEV                     //更新事件
TIMx_SR ( UIF  )        //更新中断
TIMx_EGR( UG   )        //更新事件生成
TIMx_CR1( URS  )        //更新请求
TIMx_CR1( UDIS )        //禁止更新事件



/*******************************************************************************
        => STM32F4x__高级定时器__输入捕获
*******************************************************************************/
TI1F_ED                 //上升沿和下降沿都检测
TRC                     //
CCxIF                   //发生捕获事件，会将相应的CCxIF标志位置“1”
                        //通过软件向CCxIF写入“0”来级CCxIF清零。
CCxOF                   //如果发生捕获事件时CCxIF标志已经被置“1”，则将重复捕获标志
                        //CCxOF置“1”。 向CCxOF写入“0”后会清除它


   
/*******************************************************************************
        => STM32F4x__高级定时器__PWM输入模式
*******************************************************************************/                     
PWM输入模式就是用定时器功能测量PWM波的周期和占空比。
定时器本身就有PWM输入这个模式，非常方便检查PWM波形信息。 PWM输入是定时器输入捕获模式的一个特例。
//两个ICx信号被映射至同一个TIx输入， 这2个ICx信号为边沿有效，但是极性相反
//以输入通道“TI1”为例，PWM信号由输入通道“TI1”进入，
//信号被分为2路（TI1FP1, TI1FP2）， 根据程序设置的触发输入一路为周期，另一路就是占空比。
//确定触发信号，设置极性，可选择上升沿或下降沿捕获，那么另一路硬件自动配置为相反的极性捕获
//实例
//_________________________________________________________
1 PWM信号由“TI1”进入， 配置（TI1FP1）为触发信号，上升沿捕获
2 从模式控制器配置为“复位模式”（TIMx_SMCR->SMS=100）
3 当上升没来的时候（IC1和IC2）同时捕获，计数器（TIMx_CNT）清零
4 到下降沿来的时候（IC2）捕获，计数器（TIMx_CNT）的值被锁存到捕获寄存器（CCR2）中
5 到下一个上升沿时（IC1）捕获，计数器（TIMx_CNT）的值被锁存到捕获寄存器（CCR1）中
6 其中CCR2测量的是脉宽，CCR1测量的是周期



/*******************************************************************************
        => STM32F4x__高级定时器__输出比较
*******************************************************************************/
TIMx_CCMRx（OCxM[2:0]）//配置输出比较（工作模式）
    000         //冻结
    001         //TIMx_CNT与TIMx_CCRx匹配时， OCxREF信号强制变为高电平
    010         //TIMx_CNT与TIMx_CCRx匹配时， OCxREF信号强制变为低电平
    011         //TIMx_CNT=TIMxCCRx时，电平翻转
    100         //OCxREF信号强制变为低电平
    101         //OCxREF信号强制变为高电平
    110         //PWM1
    111         //PWM2


//输出比较模式的配置步骤
//_________________________________________________________
1 选择计数器的时钟源（内部，外部，预分频器）
2 在TIMx_ARR和TIMx_CCRx寄存器中写入所需数据
3 如果需要生成中断请求，则需将（CCxIE=1）
4 选择输出模式，例如：
        //当CNT与CCRx匹配时，写入（OCxM=011），以翻转OCx输出引脚
        //写入（OCxPE=0）以禁止预装载寄存器
        //写入（CCxP =0）以选择高电平有效极性
        //写入（CCxE =1）以使能输出
5 通过将TIMx_CRx寄存器中的（CEN=1）来使能计数器


//输出比较__PWM__模式的配置步骤
//_________________________________________________________ 
TIMx_ARR                //自动重装载寄存器，确定频率（周期）
TIMx_CCRx               //捕获比较寄存器，确定占空比


//输出比较__中心对齐注意事项
//_________________________________________________________ 
不建议在使用中心对齐模式时，对计数器执行写操作，否则将发生意想不到的效果。
在启动计数器前通过软件生成更新（将TIMx_EGR寄存器的UG位置“1”），并且不
要在计数器运行过程中对其执行操作。



/*******************************************************************************
        => STM32F4x__高级定时器__互补输出和死区时间
*******************************************************************************/



/*******************************************************************************
        => STM32F4x__高级定时器__刹车功能
*******************************************************************************/
  TIM1_TIM8(TIMx_CR2)
//_________________________________________________________ 
OIS1N[9]        //输出空闲状态1（OC1N输出）Output Idle state 1（OC1N output）
   0            、、当（MOE=0）时，经过死区时间后（OC1N=0）
   1            、、当（MOE=0）时，经过死区时间后（OC1N=1）
OIS1 [8]        //输出空闲状态1（OC1输出 ）Output Idle state 1（OC1 output ）
   0            、、当（MOE=0）时，经过死区时间后（OC1=0）
   1            、、当（MOE=0）时，经过死区时间后（OC1=1）


  TIM1_TIM8(TIMx_BDTR)
//_________________________________________________________ 
MOE[15]         //主输出使能（Main output enable）
                //只要（刹车输入为有效状态），此位由硬件异步清零。 
                //此位由软件置“1”， 也可以根据AOE位状态自动置“1”
   0            、、OC和OCN输出禁止或被强制为空闲状态
   1            、、如果OC和OCN输出的相应使能位（TIMx_CCER寄存器的CCxE和CCxNE）
                、、位均置“1”， 则使能OC和OCN输出
AOE[14]         //自动输出使能（Automatic output enable）
   0            、、MOE只能由软件置“1”
   1            ..可以由软件置“1”， 也可以在发生下一次更新事件时自动置“1”
OSSR[11]        //运行模式下的关闭状态选择（Off-state selection for Run mode）
                //此位在（MOE=1）时作用于配置为输出模式且具有互补输出的通道。
                //如果定时器没有互补输出，则不存在OSSR。
   0            、、处于无效状态时，禁止OC/OCN输出（OC/OCN使能输出信号=0）
   1            、、处于无效状态时，一旦CCxE=1或CCxNE=1，便使能OC/OCN输出将其设为无效电平。
                、、然后设置OC/OCN使能输出信号=1
OSSI[10]        //空闲模式下的关闭状态选择（Off-state selection for Idle mode）
                //此位在（MOE=0）时作用于配置为输出的通道
   0            、、处于无效状态时，禁止OC/OCN输出（OC/OCN使能输出信号=0）
   1            、、处于无效状态时，一旦CCxE=1或CCxNE=1，便使能OC/OCN输出首先强制为其空闲电平
                、、然后设置OC/OCN使能输出信号=1



/*******************************************************************************
        => STM32F4x__高级定时器__COM事件
*******************************************************************************/
对于一个给定的通道，设置TIMx_CCMRx寄存器中对应的OCxCE位为“1”，能够用（ETRF输入端）的高电平
把（OCxREF信号）位低，OCxREF信号将保持为低直到发生下一次更新事件（UEV）。
//例如： ETRF信号可以连接到一个比较器的输出，用于控制电流。 这时ETRF必须配置如下：
1 外部触发预分频必须处于关闭状态： TIMxSMCR（ETPS[1:0]=00）
2 必须禁止外部时钟模式2： TIMx_SMCR寄存器中的（ECE=0）
3 外部触发极性（ETP）和外部触发滤波器（ETF）可以根据需要配置


