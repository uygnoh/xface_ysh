/*******************************************************************************
        => STM32F10x__TIM__基本定时器__
*******************************************************************************/
void TIM7_IRQHandler(void)
{
        if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET) {
                time++;
                TIM_ClearITPendingBit(TIM6, TIM_FLAG_Update);
        }
}

void nvic_setup(void)
{
        NVIC_InitTypeDef Y;
        NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
        Y.NVIC_IRQChannel                   = TIM6_IRQn;        //设置中断来源
        Y.NVIC_IRQChannelPreemptionPriority = 0;                //抢占优先级
        Y.NVIC_IRQChannelSubPriority        = 0;                //响应优先级
        Y.NVIC_IRQChannelCmd                = ENABLE;           //使能中断
        NVIC_Init(&Y);
}


void basic_timer6_setup(void)
{
        TIM_TimeBaseInitTypeDef Y;                      //设置定时器（内部时钟）
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
        Y.TIM_Period         = (1000-1);                //设置定时器（自动重装载）值
        Y.TIM_Prescaler      = (72-1);                  //设置定时器（预分频系数）
        //Y.TIM_ClockDivsion = TIM_CKD_DIV1;            //时钟分频因子
        //Y.TIM_CounterMode  = TIM_CounterMode_UP;      //设置定时器（计数模式）
        //Y.Tim_RepetitionCounter = 0;                  //设置定时器（重复计数值）
        TIM_TimeBaseInit(TIM6, &Y);                     //定时器初始化
        TIM_ClearFlag(TIM6, TIM_FLAG_Update);           //清除定时器（中断标志）
        TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);      //打开定时器（中断）
        TIM_Cmd(TIM6, ENABLE);                          //使能定时器
}

int main(void)
{
        nvic_setup();
        basic_timer6_setup();
        while (1) {
                if (time == 1000) {
                        time = 0;
                        LED_01 = ~LED_01;
                }
        }
}



/*******************************************************************************
        => STM32F10x__TIM1__高级定时器__
        => PWM互补输出和带有刹车功能控制
*******************************************************************************/
static void timer1_gpio_setup(void) 
{
        GPIO_InitTypeDef GPIO_InitStructure;

        // 输出比较通道 GPIO 初始化
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
        GPIO_InitStructure.GPIO_Pin   =  GPIO_Pin_8;
        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_Init(GPIOA, &GPIO_InitStructure);

        // 输出比较通 （道互补通道） GPIO初始化
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
        GPIO_InitStructure.GPIO_Pin   =  GPIO_Pin_13;
        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_Init(GPIOB, &GPIO_InitStructure);

        // 输出比较通道 （刹车通道） GPIO 初始化
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB);
        GPIO_InitStructure.GPIO_Pin   =  GPIO_Pin_12;
        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_Init(GPIOB, &GPIO_InitStructure);
        // BKIN引脚默认先输出低电平
        GPIO_ResetBits(GPIOB, GPIO_Pin_12);
}


//PWM信号周期和占空比的计算（ARR ：自动重装载寄存器的值）
//_________________________________________________________
// 
// CLK_cnt：计数器的时钟，等于 Fck_int / (psc+1) = 72M/(psc+1)
// PWM 信号的周期 T = (ARR+1) * (1/CLK_cnt) = (ARR+1)*(PSC+1) / 72M
// 占空比P = CCR / (ARR+1)
//_________________________________________________________
static void timer1_mode_setup(void)
{
        TIM_TimeBaseInitTypeDef         TIM_TimeBaseStructure;
        TIM_OCInitTypeDef               TIM_OCInitStructure;
        TIM_BDTRInitTypeDef             TIM_BDTRInitStructure;
        
        // 开启定时器时钟,即内部时钟CK_INT=72M
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);


        /*--------------------时基结构体初始化-------------------------*/
        // 自动重装载寄存器的值，累计TIM_Period+1个频率后产生一个更新或者中断
        TIM_TimeBaseStructure.TIM_Period = (8-1);	
        // 驱动CNT计数器的时钟 = Fck_int/(psc+1)
        TIM_TimeBaseStructure.TIM_Prescaler = (9-1);	
        // 时钟分频因子 ，配置死区时间时需要用到
        TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;		
        // 计数器计数模式，设置为向上计数
        TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;		
        // 重复计数器的值，没用到不用管
        TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;	
        // 初始化定时器
        TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);


        /*--------------------输出比较结构体初始化-------------------*/
        // 配置为PWM模式1
        TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
        // 输出使能
        TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
        // 互补输出使能
        TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable; 
        // 设置占空比大小（设置CCR的值）
        TIM_OCInitStructure.TIM_Pulse = 4;
        // 输出通道电平极性配置
        TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
        // 互补输出通道电平极性配置
        TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
        // 输出通道空闲电平极性配置
        TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
        // 互补输出通道空闲电平极性配置
        TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;
        TIM_OC1Init(TIM1, &TIM_OCInitStructure);
        TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);


        /*-------------------刹车和死区结构体初始化-------------------*/
        // 有关刹车和死区结构体的成员具体可参考BDTR寄存器的描述
        TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
        TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
        TIM_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_1;
        // 输出比较信号死区时间配置，具体如何计算可参考 BDTR:UTG[7:0]的描述
        // 这里配置的死区时间为152ns
        TIM_BDTRInitStructure.TIM_DeadTime = 11;
        TIM_BDTRInitStructure.TIM_Break = TIM_Break_Enable;
        // 当BKIN引脚检测到高电平的时候，输出比较信号被禁止，就好像是刹车一样
        TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
        TIM_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Enable;
        TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);

        // 使能计数器
        TIM_Cmd(TIM1, ENABLE);	
        // 主输出使能，当使用的是通用定时器时，这句不需要
        TIM_CtrlPWMOutputs(TIM1, ENABLE);
}
