/*******************************************************************************
                              RP2040 环境变量设置
*******************************************************************************/
https://www.digikey.com/en/maker/projects/raspberry-pi-pico-and-rp2040-cc-part-2-debugging-with-vs-code/470abc7efb07432b82c95f6f67f184c0
echo $PICO_SDK_PATH
~/VSARM/sdk/pico/pico-sdk



/*******************************************************************************
                              https://pico.org.cn/
*******************************************************************************/
pico sdk doxygen        //Pico函数库


//touch main.c
___________________________________________________________
#include "pico/stdlib.h"

int main(void)
{
        const uint led_pin = 25;
        
        gpio_init(led_pin);
        gpio_set_dir(led_pin, GPIO_OUT);
        
        while (true) {
                gpio_put(led_pin, true);
                sleep_ms(1000);
                gpio_put(led_pin, false);
                sleep_ms(1000);
        }
}



//touch CMakeList.txt
___________________________________________________________
# Set minimum required version of CMake
cmake_minimum_required(VERSION 3.12)

# Include build functions from Pico SDK
include($ENV{PICO_SDK_PATH}/external/pico_sdk_import.cmake)

# Set name of project (as PROJECT_NAME) and C/C++ standards
project(blink C CXX ASM)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

# Creates a pico-sdk subdirectory in our project for the libraries
pico_sdk_init()

# Tell CMake where to find the executable source file
add_executable(${PROJECT_NAME}
        main.c
)

# Create map/bin/hex/uf2 files
pico_add_extra_outputs(${PROJECT_NAME})

# Link to pico_stdlib (gpio, time, etc. functions)
target_link_libraries(${PROJECT_NAME}
        pico_stdlib
)

# Enable usb output, disable uart output
pico_enable_stdio_usb(${PROJECT_NAME} 1)
pico_enable_stdio_uart(${PROJECT_NAME} 0)
