/*******************************************************************************
                                MSP430 复位系统
*******************************************************************************/
| POR(Power On Reset) //上电复位信号, 一定会产生上电清除信号
|_____________________________________________________________|
| 1 上电                                                       |
| 2 RST低电平                                                  |
|_____________________________________________________________|
|
|
| PUC(Power Up Clear) //上电清除信号
|_____________________________________________________________|
| 1 POR信号产生时                                               |
| 2 启动看门狗时，看门狗定时器计数满                                |
| 3 看门狗写入错误安全参数值                                       |
| 4 片内Flash写入错误安全参数                                     |
|_____________________________________________________________|
|
|
| //上电复位初始状态
|_____________________________________________________________|
| 1 /RST引脚被设置为复位模式                                      |
| 2 所有IO引脚被设置为输入                                        |
| 3 外围模块初始化                                               |
| 4 状态寄存器复位                                               |
| 5 看门狗激活，进入工作模式                                       |
| 6 程序计数器PC装入“0xFFFE”处的地址，从此地址开始执行程序             |
|_____________________________________________________________|



/*******************************************************************************
                                MSP430-G2553-时钟系统
*******************************************************************************/
LFXT1_Oscillator //外部低频/高频晶振接入(32.768KHz, 450KHz~8MHz)
XT2_Oscillator   //外部高频晶振接入(450KHz~8MHz)
DCOCLK           //内部数控RC振荡器()
VLOCLK           //内部低速时钟(12KHz)
__________________________________________________________
MCLK             //主时钟信号
ACLK             //辅助时钟信号
SMCLK            //子系统时钟信号



|  MSP430-G2553内部数控RC振荡器时钟
| //设置MCLK频率，使用“DCOCLK”内部数控RC振荡器，更改主时钟频率
| //MSP430出厂自动校准了4个频率点( 1MHz, 8MHz, 12MHz, 16MHz )
|__________________________________________________________
int main(void)
{
        WDTCTL  = WDTPW | WDTHOLD;      //关闭看门狗定时器
        DCOCTL  = CALDCO_16MHz;         //设置DCO的频率为16MHz
        BCSCTL1 = CALBC1_16MHz;
        return 0;
}



/*******************************************************************************
                           MSP430-G2553-Interrupt
*******************************************************************************/
MSP430中的“一元中断”  //CPU进入中断服务程序中会自动清除相应的中断标志位
MSP430中的“多元中断”  //CPU进入中断服务程序需要用户根据需要清除相应的中断标志位
“GIE”全局中为控制位   //当CPU进入中断服务程序中会自动关闭它，即出中断服务程序会自动打开它



| //P1端口和P2端口中的每个引脚都有中断功能，此功能由“PxIFG, PxIE, PxIES”这三个寄存器配置 |
|____________________________________________________________________________|
|  PxIFG        //中断标志寄存器                                                |
|    0          无中断等待                                                     |
|    1          一个中断等待                                                    |
|  PxIE         //中断全能寄存器                                                |       
|    0          中断被禁用                                                      |
|    1          中断被启用                                                      |
|  PxIES        //中断边沿选择寄存器                                              |
|    0          用一个低电平到高电平转换来设定PxIFGx标志(上升沿)                      |
|    1          用一个高电平到低电平转换来设定PxIFGx标志(下降沿)                     |
|____________________________________________________________________________|
int main(void)
{
        WDTCTL = WDTPW | WDTHOLD;       //关闭看门狗定时器
        P1DIR |= BIT6;                  //初始化LDE所在的IO引脚P1.6为输出
        P1OUT &= ~BIT6;                 //初始化LDE所在的IO引脚P1.6为低电平，LED灭
        P1DIR &= ~BIT3;                 //初始化按键所在的IO引脚P1.3为输入
        P1REN |= BIT3;                  //使能P1.3引脚上的上拉电阻
        P1OUT |= BIT3;  
        P1IE  |= BIT3;                  //打开P1.3引脚的中断
        P1IES |= BIT3;                  //配置为下降沿触发
        P1IFG &= ~BIT3;                 //清除P1.3引脚的中断标志位
        __bis_SR_register(GIE);         //打开全局中断
        while (1) {
        }

}
#pragma vector=PORT1_VECTOR
__interrupt void PORT1_ISR(void)
{
        if (P1IFG & BIT3) {     //判断是否为P1.3引脚产生的中断
                P1IFG &= ~BIT3; //清除P1.3引脚的中断标志位
                P1OUT ^= BIT6;  //翻转P1.6引脚上的电平
        }
}



| //串口中断程序
|______________________________________________________________
const uint8_t combuf[10] = {0};
uint8_t rx_flag;
void clock_setup(void)
{
        DCOCTL    = CALDCO_1MHZ;        //配置DCO为1MHz
        BCSCTL1   = CALBC1_1MHZ;
        BCSCTL2  &= ~SELS;              //配置SMCLK的时钟源为DCO
        BCSCTL2  &= ~(DIVS0 | DIVS1);   //配置SMCLK的分频系数为“1”
}
void uart_setup(void)
{
        UCA0CTL1 |= UCSWRST;            //** 复位USCI_Ax **
        UCA0CTL0 &= ~UCSYNC;            //选择USCI_Ax为UART模式(8N1)
        UCA0CTL1 |= UCSSEL1;            //配置UART时钟源为“SMCLK”
        UCA0BR0   = 0x68;               //9600@1MHz
        UCA0BR1   = 0x00;
        UCA0MCTL  = 1 << 1;
        P1SEL    |= BIT1 + BIT2;        //使能端口复用功能 
        P1SEL2   |= BIT1 + BIT2;
        UCA0CTL1 &= ~UCSWRST;           //** 清除复位位，使能UART **
        
        IE2      |= UCA0RXIE;           //接收中断使能
        IFG2     &= ~UCA0RXIFG;         //清除接收中断标志位
}
int main(void)
{
        WDTCTL    = WDTPW | WDTHOLD;    //关闭看门狗定时器
        clock_setup();
        uart_setup();
        P1DIR    |= BIT0;               //P1.0引脚配置为输出功能
        P1OUT    &= ~BIT0;              //P1.0引脚配置为输出低电平
        __bis_SR_register(GIE);         //打开总中断
        while (1) {
                if (rx_flag) {
                        rx_flag = 0;   //标志位清零，防止重复执行
                        execute(combuff);//执行命令
                }
        }
        return 0;
}
#pragma vector=USCIAB0RX_VECTOR
__interrupt void UART_RX_ISR(void)
{
        static uint8_t cnt = 0;
        //检测是否是USCI_A0的接收中断，( USCI_A0和USCI_B0接收中断共享一向量 )
        if (IFG2 & UCA0RXIFG)   
        {
                IFG2 &= ~UCA0RXIFG;             //清除中断标志位
                combuff[cnt++] = UCA0RXBUF;     //保存命令
                cnt %= 20;                      //导致缓冲区溢出
                if (combuff[cnt -1 ] == '\n') { //如果检测到命令结束符（以换行作为命令结束）
                        cnt = 0;                //复位计数器
                        rx_flag = 1;           //命令接收完毕
                }
        }
}

void execute(uint8_t *combuff)
{
        const uint8_t charbuf[10] = {0x11, 0x22, 0x33, 0x00, 0xFF};
        if (combuf[0] == charbuf[0]) {         //命令码“11”
                uart_send_str("0x11", 10);
        } else if (combuf[1] == charbuf[1]) {  //命令码“22”
                uart_send_str("0x22", 10);
        } else if (combuf[2] == charbuf[2]) {  //命令码“33”
                uart_send_str("0x33", 10);
        } else if (combuf[3] == charbuf[3]) {  //命令码“00”，关闭LED
                uart_send_str("0x00", 10);
                P1OUT &= ~BIT0;
        } else if (combuf[4] == charbuf[4]) {  //命令码“FF”，打开LED
                uart_send_str("0xFF", 10);
                P1OUT |= BIT0;
        } else {
                uart_send_str("command error", 10);
        }
}



/*******************************************************************************
                              MSP430-G2553-UART
*******************************************************************************/
#include <msp430g2553.h>
int main(void)
{
        WDTCTL    = WDTPW | WDTHOLD;    //关闭看门狗定时器
        DCOCTL    = CALDCO_1MHZ;        //配置DCO为1MHz
        BCSCTL1   = CALBC1_1MHZ;
        BCSCTL2  &= ~SELS;              //配置SMCLK的时钟源为DCO
        BCSCTL2  &= ~(DIVS0 | DIVS1);   //配置SMCLK的分频系数为“1”
        
        UCA0CTL1 |= UCSWRST;            //** 复位USCI_Ax **
        UCA0CTL0  = 0x00;               //8位数据位，无校验，1位停止位
        UCA0CTL1 |= UCSSEL1;            //配置UART时钟源为SMCLK
        UCA0BR0   = 0x68;               //9600@1MHz
        UCA0BR1   = 0x00;
        UCA0MCTL  = 1 << 1;
        P1SEL    |= BIT1 + BIT2;        //使能端口利用功能
        P1SEL2   |= BIT1 + BIT2;
        UCA0CTL1 &= ~UCSWRST;           //** 清除复位位，使能UART **
        
        //使用串口发送“0x55”
        while (1) {
                UCA0TXBUF = 0x55;
                __delay_cycles(500000);
        }
        return 0;
}



/*******************************************************************************
                              MSP430-G2553-GPIO 点灯程序 
*******************************************************************************/
#include <msp430g2553.h>
/*
    x->代表端口, y->指的是具体的IO管脚
    
    PxDIR__xxxx xxxx__ ( 0->输入, 1->输出 )
    PxOUT__xxxx xxxx__ ( 0->低电平, 1->高电平 )
    
    | 上拉与下拉电阻配置，用于输入方式
    |________________________________________|
    | PxIN ( * 输入数据寄存器，这个寄存器为只读 )  |
    | PxREN.y (0->关闭电阻, 1->打开电阻)        |
    | PxOUT.y (0->下拉模式, 1->上拉模式)        |
    |________________________________________|
*/
int main(void)
{
        WDTCTL = WDTPW | WDTHOLD;       //关闭看门狗定时器
        P1DIR |= BIT0;                  //P1.0设置为输出
        P1OUT |= BIT0;                  //P1.0设置为高电平“1”
        while (1) {
                // “^”按位异或运算, 相同为“0”，不同为“1”
                //           xxxx xxx1
                //           xxxx xxx1
                //________________________________
                //           xxxx xxx0
                P1OUT ^= BIT0;
                // 延时500ms
                __delay_cycles(500000);
        }
        return 0;
}



/*******************************************************************************
                           MSP430-G2553-TIMER 定时器
*******************************************************************************/
//使用中断方法，定时1秒时间，定时器时钟频率为“1MHz”
int main(void)
{
        WDTCTL   = WDTPW | WDTHOLD;     //Stop watchdog timer
        P1DIR   |= BIT6;                //设置P1.6为输出
        TA1CTL  |= TASSEL_2;            //设置时钟源为SMCLK
        TA1CTL  |= MC_1;                //设置工作模式为向上计数
        TA1CCR0  = 4999;                //设置定时时间
        TA1CTL  |= TAIE;                //打开TAIFG中断
        __bis_SR_register(GIE);         //打开全局中断
        while (1) {
                if (flag = 1) {
                        flag = 0;
                        P1OUT ^= BIT6;
                }
        }
}
#pragma vector=TIMER1_A1_VECTOR
__interrupt void Time_Tick(void)
{
        static uint8_t cnt = 0;
        switch (TAIV) {         //定时器A中断向量
        case 0x02: break;
        case 0x04: break;
        case 0x0A:              //定时器A1溢出中断标志位
                cnt++;
                if (cnt == 20) {
                        cnt = 0;
                        flag = 1;
                }
                break;
        }
        default: break;
}




/*******************************************************************************
                           MSP430-G2553-TIMER PWM 呼吸灯
*******************************************************************************/
int main(void)
{
        unsigned int cnt = 0;
        WDTCTL     = WDTPW + WDTHOLD;   //Stop watchdog timer
        DCOCTL     = CALDCO_1MHZ;       //配置DCO频率为1MHz
        DCSCTL1    = CALBC1_1MHZ;
        P1DIR     &= ~BIT6;             //初始化P1.6为输入
        TA1CTL    |= TASSEL1;           //设置时钟源为“SMCLK”
        TA1CTL    |= MCO | MC1;         //设置工作模式为“Up/Down”
        
        //占空比: (TACCR0 - TACCR2) / TACCR0
        //输出信号频率: SMCLK / (TACCR0 + 1) / 2
        
        TA1CCR0    = 0x00FF;            //设置TA1CCR0为“0x00FF”，保存计数值最大值
        TA1CCR2    = 0x00FF;            //设置TA1CCR2为“0x00FF”，设置比较值
        TA1CCTL0  &= ~CAP;              //设置为比较模式
        TA1CCTL2  &= ~CAP;
        TA1CCTL2  |= OUTMOD_6;          //设置比较输出模式，模式6
        P2SEL     |= BIT5;              //设置IO复用，P2.5输出PWM波
        P2DIR     |= BIT5;
        while (1) {
                for (cnt = 0; cnt < 0x00FF; cnt++) {
                        TA1CCR2 = cnt;
                        __delay_cycles(5000);
                }
                for (cnt = 0x00FF; cnt > 0; cnt--) {
                        TA1CCR2 = cnt;
                        __delay_cycles(5000);
                }
        }
        return 0;   
}
