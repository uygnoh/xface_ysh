/*******************************************************************************
        => 数码管
        本程序驱动一位共阳极数码管
*******************************************************************************/
MOVC A, @A+DPTR         //从DPTR开始偏移A个地址的数读取到A中，
                        //@是寄存器间接寻址前缀，类似于指针指向后面寄存器的指针
                        //DPTR一般为数据段的首地址。
MOVC A, @A+PC           //从PC指令地址开始偏移A相地址数读取到A中
                        //PC为当前指令地址
CJNE R0, #16, LOOP      //CJNE表示不相等，则转移

                   
                        
MAIN:
        MOV  DPTR, #TABLE
        MOV  R0, #0
LOOP:   
        MOV  A, R0
        MOVC A, @A+DPTR
        MOV  P0, A
        CALL DELAY_1S
        INC  R0
        CJNE R0, #16, LOOP
        JMP  MAIN

TABLE:  ;//共阳极数码管编码表（0~F）
        DB   0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8
        DB   0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8e


    
/*******************************************************************************
        => 数码管
        本程序驱动 2 位共阳极数码管(00~99)
*******************************************************************************/
        ORG     0000H
START:
        MOV     R0, #0
        MOV     DPTR, #TABLE
LOOP_00:
        CALL    CHANGE
        INC     R0                      ;//R0++
        CJNE    R0, #100, LOOP_00       ;//CJNZ是不相等，则转移
        JMP     START

        
;//____________________________________________________________
;//
;//____________________________________________________________
CHANGE:
        MOV     A, R0                   ;//A = R0
        MOV     B, #10                  ;//B = 10
        DIV     AB                      ;//用A中的值除以B中的值，整数在A， 余数在B
        MOV     R1, A                   ;//R1中是十位
        MOV     R2, B                   ;//R2中是个位
        MOV     R3, #50                 ;//（导通速率）多次显示, 增加显示亮度
LOOP_01:
        MOV     A, R2
        CALL    DISPLAY
        CLR     P1.1
        CALL    DELAY_10MS
        SETB    P1.1
        
        MOV     A, R1
        CALL    DISPLAY
        CLR     P1.0
        CALL    DELAY_10MS
        SETB    P1.0
        DJNZ    R3, LOOP_01;
        RET

      
;//____________________________________________________________
;//显示子程序 
;//____________________________________________________________    
DISPLAY:
        MOVC    A, @A+DPTR
        MOV     P0, A
        RET
        
        
;//____________________________________________________________
;//10ms延时子程序
;//____________________________________________________________
DELAY_10MS:
        MOV     R6, #20
LOOP_80:
        MOV     R7, #248
        DJNZ    R7, $
        DJNZ    R6, LOOP_80



/*******************************************************************************
        => 4位__数码管动态扫描（显示：1234）
*******************************************************************************/
MAIN:
        MOV  DPTR, #TABLE
LOOP_00:                        ;//第 1 位数码管显示
        CLR  P1.0
        MOV  A, #1
        MOVC A, @A+DPTR
        MOV  P0, A
        CALL DELAY
        SETB P1.0
LOOP_01:                        ;//第 2 位数码管显示
        CLR  P1.1
        MOV  A, #2
        MOVC A, @A+DPTR
        MOV  P0, A
        CALL DELAY
        SETB P1.1
LOOP_02:                        ;//第 3 位数码管显示
        CLR  P1.2
        MOV  A, #3
        MOVC A, @A+DPTR
        MOV  P0, A
        CALL DELAY
        SETB P1.2
LOOP_03:                        ;//第 4 位数码管显示
        CLR  P1.3
        MOV  A, #4
        MOVC A, @A+DPTR
        MOV  P0, A
        CALL DELAY
        SETB P1.3
        JMP  MAIN

DELAY:  
        MOV  R5, #5
LOOP_80:
        MOV  R6, #10
LOOP_90:
        MOV  R7, #50
        DJNZ R7, $
        DJNZ R6, LOOP_90
        DJNZ R5, LOOP_80
        RET
TABLE:  ;//共阳极数码管编码表（0~F）
        DB   0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8
        DB   0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8e
        END



/*******************************************************************************
        => 使用4位数码管作为显示器，利用循环扫描方式循环显示（0000 ~ 9999）
        => 本程序最大值是： 65535
*******************************************************************************/
        ORG     0000H
        LJMP    MAIN
        ORG     0030H
MAIN:
        MOV     DPTR, #9999
        MOV     R1, DPH                 ;//先放高位，再放低位
        MOV     R0, DPL                 ;//这两句话是不能乱的
        CALL    HEX2BCD
        LCALL   DISPLAY
        RET

      
;//____________________________________________________________
;//0xFFFF <===> 65535
;//R4的低 4 位存放（6）万位
;//R3的高 4 位存放（5）千位， 低 4 位存放（5）百位
;//R2的高 4 位存放（3）十位， 低 4 位存放（5）个位
;//DA 十进制调整指令__________________________
;//如果低 4 位大于9， 那么就加上（6），且（AC = 1）
;//如果高 4 位大于9， 那么就加上（6），且（CY = 1）
;//    0   1   0   1      0   1   1   0         (56H)
;//    0   1   1   0      0   1   1   1         (67H)
;//________________________________________       +
;//    1   0   1   1      1   1   0   1         (BDH)
;// 十进制BCD码转换（高4位和低4位分别加上6）            
;      0   1   1   0      0   1   1   0         (66H)
;//________________________________________       +
;  1   0   0   1   0      0   0   1   1
;      
;//____________________________________________________________
/*
下面是要将（个十百千万）位存放到以（30H）为起始的内存单元中
如果程序不是太复杂，可以不使用下面的指令。
        MOV     A, R2
        MOV     B, #16
        DIV     AB
        MOV     31H, A
        MOV     30H, B
        
        MOV     A, R3
        MOV     B, #16
        DIV     AB
        MOV     33H, A
        MOV     32H, B
        
        MOV     34H, R4
*/
;//____________________________________________________________
HEX2BCD:
        MOV     R2, #00H
        MOV     R3, #00H
        MOV     R4, #00h
        MOV     R5, #10H        ;//循环 16 次
LOOP_00:
        CLR     C
        MOV     A, R0
        RLC     A
        MOV     R0, A
        MOV     R1, A
        RLC     A
        MOV     R1, A           ;//将 16 位二进制数循环左移一位，最高位移入CY中
        
        
        MOV     A, R2           ;//R2存储（十位，个位）
        ADDC    A, R2           ;//自身相加，并加上CY位
        DA      A               ;//十进制调整指令，十位超出时会产生进位
        MOV     R2, A
        
        MOV     A, R3           ;//R3存储（千位，百位）
        ADDC    A, R3           ;//自身相加，并加上CY位
        DA      A               ;//十进制调整指令，十位超出时会产生进位
        MOV     R3, A
        
        MOV     A, R4           ;//R4中只存储万位（不会超过7），不需要十进制调整指令
        ADDC    A, R4           ;//自身相加，并加上CY位
        MOV     R4, A
        
        DJNZ    R5, LOOP_00
        RET


;//____________________________________________________________
;//数码管动态扫描显示程序
;//____________________________________________________________  
DISPLAY:
        MOV     DPTR, #TABLE
        MOV     R7, #50         ;//显示导通率
        
        MOV     A, R4
        MOVC    A, @A+DPTR
        MOV     P0, A
        CLR     P1.0            ;//打开（万）位显示
        ACALL   DELAY_10MS      ;//调用（10ms）延时子程序
        SETB    P1.0            ;//关闭（万）位显示
        
        MOV     A, R3
        SWAP    A
        ANL     A, #0FH
        MOVC    A, @A+DPTR
        MOV     P0, A
        CLR     P1.1            ;//打开（千）位显示
        ACALL   DELAY_10MS      ;//调用（10ms）延时子程序
        SETB    P1.1            ;//关闭（千）位显示
        
        MOV     A, R3
        ANL     A, #0FH
        MOVC    A, @A+DPTR
        MOV     P0, A
        CLR     P1.2            ;//打开（百）位显示
        ACALL   DELAY_10MS      ;//调用（10ms）延时子程序
        SETB    P1.2            ;//关闭（百）位显示
        
        MOV     A, R2
        SWAP    A
        ANL     A, #0FH
        MOVC    A, @A+DPTR
        MOV     P0, A
        CLR     P1.3            ;//打开（十）位显示
        ACALL   DELAY_10MS      ;//调用（10ms）延时子程序
        SETB    P1.3            ;//关闭（十）位显示
        
        MOV     A, R2
        ANL     A, #0FH
        MOVC    A, @A+DPTR
        MOV     P0, A
        CLR     P1.4            ;//打开（个）位显示
        ACALL   DELAY_10MS      ;//调用（10ms）延时子程序
        SETB    P1.4            ;//关闭（个）位显示
        
        DJNZ    R7, DISPLAY



;//____________________________________________________________
;//10ms延时子程序
;//____________________________________________________________
DELAY_10MS:
        MOV     R6, #2
LOOP_80:
        MOV     R7, #248
        DJNZ    R7, $
        DJNZ    R6, LOOP_80
        RET


;//____________________________________________________________
;//共阳极数码管编码表（0~F）
;//____________________________________________________________
TABLE:
        DB   0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8
        DB   0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8e
        END
