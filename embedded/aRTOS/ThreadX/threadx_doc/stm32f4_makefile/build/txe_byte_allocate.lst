ARM GAS  /tmp/cc9fAob8.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"txe_byte_allocate.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._txe_byte_allocate,"ax",%progbits
  18              		.align	1
  19              		.global	_txe_byte_allocate
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_txe_byte_allocate:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/txe_byte_allocate.c"
   1:ThreadX/common/src/txe_byte_allocate.c **** /**************************************************************************/
   2:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
   3:ThreadX/common/src/txe_byte_allocate.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
   5:ThreadX/common/src/txe_byte_allocate.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/txe_byte_allocate.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/txe_byte_allocate.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/txe_byte_allocate.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  10:ThreadX/common/src/txe_byte_allocate.c **** /**************************************************************************/
  11:ThreadX/common/src/txe_byte_allocate.c **** 
  12:ThreadX/common/src/txe_byte_allocate.c **** 
  13:ThreadX/common/src/txe_byte_allocate.c **** /**************************************************************************/
  14:ThreadX/common/src/txe_byte_allocate.c **** /**************************************************************************/
  15:ThreadX/common/src/txe_byte_allocate.c **** /**                                                                       */
  16:ThreadX/common/src/txe_byte_allocate.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/txe_byte_allocate.c **** /**                                                                       */
  18:ThreadX/common/src/txe_byte_allocate.c **** /**   Byte Memory                                                         */
  19:ThreadX/common/src/txe_byte_allocate.c **** /**                                                                       */
  20:ThreadX/common/src/txe_byte_allocate.c **** /**************************************************************************/
  21:ThreadX/common/src/txe_byte_allocate.c **** /**************************************************************************/
  22:ThreadX/common/src/txe_byte_allocate.c **** 
  23:ThreadX/common/src/txe_byte_allocate.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/txe_byte_allocate.c **** 
  25:ThreadX/common/src/txe_byte_allocate.c **** 
  26:ThreadX/common/src/txe_byte_allocate.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/txe_byte_allocate.c **** 
  28:ThreadX/common/src/txe_byte_allocate.c **** #include "tx_api.h"
  29:ThreadX/common/src/txe_byte_allocate.c **** #include "tx_initialize.h"
  30:ThreadX/common/src/txe_byte_allocate.c **** #include "tx_thread.h"
  31:ThreadX/common/src/txe_byte_allocate.c **** #include "tx_timer.h"
ARM GAS  /tmp/cc9fAob8.s 			page 2


  32:ThreadX/common/src/txe_byte_allocate.c **** #include "tx_byte_pool.h"
  33:ThreadX/common/src/txe_byte_allocate.c **** 
  34:ThreadX/common/src/txe_byte_allocate.c **** 
  35:ThreadX/common/src/txe_byte_allocate.c **** /**************************************************************************/
  36:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  37:ThreadX/common/src/txe_byte_allocate.c **** /*  FUNCTION                                               RELEASE        */
  38:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  39:ThreadX/common/src/txe_byte_allocate.c **** /*    _txe_byte_allocate                                  PORTABLE C      */
  40:ThreadX/common/src/txe_byte_allocate.c **** /*                                                           6.1          */
  41:ThreadX/common/src/txe_byte_allocate.c **** /*  AUTHOR                                                                */
  42:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  43:ThreadX/common/src/txe_byte_allocate.c **** /*    William E. Lamie, Microsoft Corporation                             */
  44:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  45:ThreadX/common/src/txe_byte_allocate.c **** /*  DESCRIPTION                                                           */
  46:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  47:ThreadX/common/src/txe_byte_allocate.c **** /*    This function checks for errors in allocate bytes function call.    */
  48:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  49:ThreadX/common/src/txe_byte_allocate.c **** /*  INPUT                                                                 */
  50:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  51:ThreadX/common/src/txe_byte_allocate.c **** /*    pool_ptr                          Pointer to pool control block     */
  52:ThreadX/common/src/txe_byte_allocate.c **** /*    memory_ptr                        Pointer to place allocated bytes  */
  53:ThreadX/common/src/txe_byte_allocate.c **** /*                                        pointer                         */
  54:ThreadX/common/src/txe_byte_allocate.c **** /*    memory_size                       Number of bytes to allocate       */
  55:ThreadX/common/src/txe_byte_allocate.c **** /*    wait_option                       Suspension option                 */
  56:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  57:ThreadX/common/src/txe_byte_allocate.c **** /*  OUTPUT                                                                */
  58:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  59:ThreadX/common/src/txe_byte_allocate.c **** /*    TX_POOL_ERROR                     Invalid memory pool pointer       */
  60:ThreadX/common/src/txe_byte_allocate.c **** /*    TX_PTR_ERROR                      Invalid destination pointer       */
  61:ThreadX/common/src/txe_byte_allocate.c **** /*    TX_WAIT_ERROR                     Invalid wait option               */
  62:ThreadX/common/src/txe_byte_allocate.c **** /*    TX_CALLER_ERROR                   Invalid caller of this function   */
  63:ThreadX/common/src/txe_byte_allocate.c **** /*    TX_SIZE_ERROR                     Invalid size of memory request    */
  64:ThreadX/common/src/txe_byte_allocate.c **** /*    status                            Actual completion status          */
  65:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  66:ThreadX/common/src/txe_byte_allocate.c **** /*  CALLS                                                                 */
  67:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  68:ThreadX/common/src/txe_byte_allocate.c **** /*    _tx_byte_allocate                 Actual byte allocate function     */
  69:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  70:ThreadX/common/src/txe_byte_allocate.c **** /*  CALLED BY                                                             */
  71:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  72:ThreadX/common/src/txe_byte_allocate.c **** /*    Application Code                                                    */
  73:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  74:ThreadX/common/src/txe_byte_allocate.c **** /*  RELEASE HISTORY                                                       */
  75:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  76:ThreadX/common/src/txe_byte_allocate.c **** /*    DATE              NAME                      DESCRIPTION             */
  77:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  78:ThreadX/common/src/txe_byte_allocate.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  79:ThreadX/common/src/txe_byte_allocate.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  80:ThreadX/common/src/txe_byte_allocate.c **** /*                                            resulting in version 6.1    */
  81:ThreadX/common/src/txe_byte_allocate.c **** /*                                                                        */
  82:ThreadX/common/src/txe_byte_allocate.c **** /**************************************************************************/
  83:ThreadX/common/src/txe_byte_allocate.c **** UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
  84:ThreadX/common/src/txe_byte_allocate.c ****                                     ULONG memory_size,  ULONG wait_option)
  85:ThreadX/common/src/txe_byte_allocate.c **** {
  28              		.loc 1 85 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc9fAob8.s 			page 3


  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40              	.LVL1:
  86:ThreadX/common/src/txe_byte_allocate.c **** 
  87:ThreadX/common/src/txe_byte_allocate.c **** UINT            status;
  88:ThreadX/common/src/txe_byte_allocate.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
  89:ThreadX/common/src/txe_byte_allocate.c **** TX_THREAD       *thread_ptr;
  90:ThreadX/common/src/txe_byte_allocate.c **** #endif
  91:ThreadX/common/src/txe_byte_allocate.c **** 
  92:ThreadX/common/src/txe_byte_allocate.c **** 
  93:ThreadX/common/src/txe_byte_allocate.c ****     /* Default status to success.  */
  94:ThreadX/common/src/txe_byte_allocate.c ****     status =  TX_SUCCESS;
  95:ThreadX/common/src/txe_byte_allocate.c **** 
  96:ThreadX/common/src/txe_byte_allocate.c ****     /* Check for an invalid byte pool pointer.  */
  97:ThreadX/common/src/txe_byte_allocate.c ****     if (pool_ptr == TX_NULL)
  41              		.loc 1 97 0
  42 0002 0446     		mov	r4, r0
  43 0004 40B3     		cbz	r0, .L6
  98:ThreadX/common/src/txe_byte_allocate.c ****     {
  99:ThreadX/common/src/txe_byte_allocate.c **** 
 100:ThreadX/common/src/txe_byte_allocate.c ****         /* Byte pool pointer is invalid, return appropriate error code.  */
 101:ThreadX/common/src/txe_byte_allocate.c ****         status =  TX_POOL_ERROR;
 102:ThreadX/common/src/txe_byte_allocate.c ****     }
 103:ThreadX/common/src/txe_byte_allocate.c **** 
 104:ThreadX/common/src/txe_byte_allocate.c ****     /* Now check for invalid pool ID.  */
 105:ThreadX/common/src/txe_byte_allocate.c ****     else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
  44              		.loc 1 105 0
  45 0006 0568     		ldr	r5, [r0]
  46 0008 1C48     		ldr	r0, .L18
  47              	.LVL2:
  48 000a 8542     		cmp	r5, r0
  49 000c 11D0     		beq	.L15
 106:ThreadX/common/src/txe_byte_allocate.c ****     {
 107:ThreadX/common/src/txe_byte_allocate.c **** 
 108:ThreadX/common/src/txe_byte_allocate.c ****         /* Byte pool pointer is invalid, return appropriate error code.  */
 109:ThreadX/common/src/txe_byte_allocate.c ****         status =  TX_POOL_ERROR;
  50              		.loc 1 109 0
  51 000e 0220     		movs	r0, #2
  52              	.L2:
  53              	.LVL3:
 110:ThreadX/common/src/txe_byte_allocate.c ****     }
 111:ThreadX/common/src/txe_byte_allocate.c **** 
 112:ThreadX/common/src/txe_byte_allocate.c ****     /* Check for an invalid destination for return pointer.  */
 113:ThreadX/common/src/txe_byte_allocate.c ****     else if (memory_ptr == TX_NULL)
 114:ThreadX/common/src/txe_byte_allocate.c ****     {
 115:ThreadX/common/src/txe_byte_allocate.c **** 
 116:ThreadX/common/src/txe_byte_allocate.c ****         /* Null destination pointer, return appropriate error.  */
 117:ThreadX/common/src/txe_byte_allocate.c ****         status =  TX_PTR_ERROR;
 118:ThreadX/common/src/txe_byte_allocate.c ****     }
 119:ThreadX/common/src/txe_byte_allocate.c **** 
ARM GAS  /tmp/cc9fAob8.s 			page 4


 120:ThreadX/common/src/txe_byte_allocate.c ****     /* Check for an invalid memory size.  */
 121:ThreadX/common/src/txe_byte_allocate.c ****     else if (memory_size == ((ULONG) 0))
 122:ThreadX/common/src/txe_byte_allocate.c ****     {
 123:ThreadX/common/src/txe_byte_allocate.c **** 
 124:ThreadX/common/src/txe_byte_allocate.c ****         /* Error in size, return appropriate error.  */
 125:ThreadX/common/src/txe_byte_allocate.c ****         status =  TX_SIZE_ERROR;
 126:ThreadX/common/src/txe_byte_allocate.c ****     }
 127:ThreadX/common/src/txe_byte_allocate.c **** 
 128:ThreadX/common/src/txe_byte_allocate.c ****     /* Determine if the size is greater than the pool size.  */
 129:ThreadX/common/src/txe_byte_allocate.c ****     else if (memory_size > pool_ptr -> tx_byte_pool_size)
 130:ThreadX/common/src/txe_byte_allocate.c ****     {
 131:ThreadX/common/src/txe_byte_allocate.c **** 
 132:ThreadX/common/src/txe_byte_allocate.c ****         /* Error in size, return appropriate error.  */
 133:ThreadX/common/src/txe_byte_allocate.c ****         status =  TX_SIZE_ERROR;
 134:ThreadX/common/src/txe_byte_allocate.c ****     }
 135:ThreadX/common/src/txe_byte_allocate.c **** 
 136:ThreadX/common/src/txe_byte_allocate.c ****     else
 137:ThreadX/common/src/txe_byte_allocate.c ****     {
 138:ThreadX/common/src/txe_byte_allocate.c **** 
 139:ThreadX/common/src/txe_byte_allocate.c ****         /* Check for a wait option error.  Only threads are allowed any form of
 140:ThreadX/common/src/txe_byte_allocate.c ****            suspension.  */
 141:ThreadX/common/src/txe_byte_allocate.c ****         if (wait_option != TX_NO_WAIT)
 142:ThreadX/common/src/txe_byte_allocate.c ****         {
 143:ThreadX/common/src/txe_byte_allocate.c **** 
 144:ThreadX/common/src/txe_byte_allocate.c ****             /* Is call from ISR or Initialization?  */
 145:ThreadX/common/src/txe_byte_allocate.c ****             if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 146:ThreadX/common/src/txe_byte_allocate.c ****             {
 147:ThreadX/common/src/txe_byte_allocate.c **** 
 148:ThreadX/common/src/txe_byte_allocate.c ****                 /* A non-thread is trying to suspend, return appropriate error code.  */
 149:ThreadX/common/src/txe_byte_allocate.c ****                 status =  TX_WAIT_ERROR;
 150:ThreadX/common/src/txe_byte_allocate.c ****             }
 151:ThreadX/common/src/txe_byte_allocate.c ****         }
 152:ThreadX/common/src/txe_byte_allocate.c ****     }
 153:ThreadX/common/src/txe_byte_allocate.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
 154:ThreadX/common/src/txe_byte_allocate.c **** 
 155:ThreadX/common/src/txe_byte_allocate.c ****     /* Check for timer execution.  */
 156:ThreadX/common/src/txe_byte_allocate.c ****     if (status == TX_SUCCESS)
 157:ThreadX/common/src/txe_byte_allocate.c ****     {
 158:ThreadX/common/src/txe_byte_allocate.c **** 
 159:ThreadX/common/src/txe_byte_allocate.c ****         /* Pickup thread pointer.  */
 160:ThreadX/common/src/txe_byte_allocate.c ****         TX_THREAD_GET_CURRENT(thread_ptr)
 161:ThreadX/common/src/txe_byte_allocate.c **** 
 162:ThreadX/common/src/txe_byte_allocate.c ****         /* Check for invalid caller of this function.  First check for a calling thread.  */
 163:ThreadX/common/src/txe_byte_allocate.c ****         if (thread_ptr == &_tx_timer_thread)
 164:ThreadX/common/src/txe_byte_allocate.c ****         {
 165:ThreadX/common/src/txe_byte_allocate.c **** 
 166:ThreadX/common/src/txe_byte_allocate.c ****             /* Invalid caller of this function, return appropriate error code.  */
 167:ThreadX/common/src/txe_byte_allocate.c ****             status =  TX_CALLER_ERROR;
 168:ThreadX/common/src/txe_byte_allocate.c ****         }
 169:ThreadX/common/src/txe_byte_allocate.c ****     }
 170:ThreadX/common/src/txe_byte_allocate.c **** #endif
 171:ThreadX/common/src/txe_byte_allocate.c **** 
 172:ThreadX/common/src/txe_byte_allocate.c ****     /* Is everything still okay?  */
 173:ThreadX/common/src/txe_byte_allocate.c ****     if (status == TX_SUCCESS)
  54              		.loc 1 173 0
  55 0010 68B9     		cbnz	r0, .L4
  56              	.LBB8:
ARM GAS  /tmp/cc9fAob8.s 			page 5


  57              	.LBB9:
  58              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
ARM GAS  /tmp/cc9fAob8.s 			page 6


  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
ARM GAS  /tmp/cc9fAob8.s 			page 7


 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/cc9fAob8.s 			page 8


 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
ARM GAS  /tmp/cc9fAob8.s 			page 9


 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/cc9fAob8.s 			page 10


 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
ARM GAS  /tmp/cc9fAob8.s 			page 11


 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
ARM GAS  /tmp/cc9fAob8.s 			page 12


 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
ARM GAS  /tmp/cc9fAob8.s 			page 13


 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
  59              		.loc 2 477 0
  60              		.syntax unified
  61              	@ 477 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  62 0012 EFF30585 		 MRS  r5,IPSR 
  63              	@ 0 "" 2
  64              		.thumb
  65              		.syntax unified
  66              	.LBE9:
  67              	.LBE8:
 174:ThreadX/common/src/txe_byte_allocate.c ****     {
 175:ThreadX/common/src/txe_byte_allocate.c **** 
 176:ThreadX/common/src/txe_byte_allocate.c ****         /* Check for interrupt call.  */
 177:ThreadX/common/src/txe_byte_allocate.c ****         if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
  68              		.loc 1 177 0
  69 0016 1A4E     		ldr	r6, .L18+4
  70 0018 3668     		ldr	r6, [r6]
  71 001a 3543     		orrs	r5, r6, r5
  72 001c 07D0     		beq	.L4
  73              	.LBB10:
  74              	.LBB11:
  75              		.loc 2 477 0
  76              		.syntax unified
  77              	@ 477 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  78 001e EFF30586 		 MRS  r6,IPSR 
  79              	@ 0 "" 2
  80              		.thumb
  81              		.syntax unified
  82              	.LBE11:
  83              	.LBE10:
 178:ThreadX/common/src/txe_byte_allocate.c ****         {
 179:ThreadX/common/src/txe_byte_allocate.c **** 
 180:ThreadX/common/src/txe_byte_allocate.c ****             /* Now, make sure the call is from an interrupt and not initialization.  */
 181:ThreadX/common/src/txe_byte_allocate.c ****             if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
  84              		.loc 1 181 0
ARM GAS  /tmp/cc9fAob8.s 			page 14


  85 0022 174D     		ldr	r5, .L18+4
  86 0024 2D68     		ldr	r5, [r5]
  87 0026 3543     		orrs	r5, r5, r6
  88 0028 B5F1F03F 		cmp	r5, #-252645136
  89 002c 24D3     		bcc	.L16
  90              	.LVL4:
  91              	.L4:
 182:ThreadX/common/src/txe_byte_allocate.c ****             {
 183:ThreadX/common/src/txe_byte_allocate.c **** 
 184:ThreadX/common/src/txe_byte_allocate.c ****                 /* Invalid caller of this function, return appropriate error code.  */
 185:ThreadX/common/src/txe_byte_allocate.c ****                 status =  TX_CALLER_ERROR;
 186:ThreadX/common/src/txe_byte_allocate.c ****             }
 187:ThreadX/common/src/txe_byte_allocate.c ****         }
 188:ThreadX/common/src/txe_byte_allocate.c ****     }
 189:ThreadX/common/src/txe_byte_allocate.c **** 
 190:ThreadX/common/src/txe_byte_allocate.c ****     /* Determine if everything is okay.  */
 191:ThreadX/common/src/txe_byte_allocate.c ****     if (status == TX_SUCCESS)
  92              		.loc 1 191 0
  93 002e F8B1     		cbz	r0, .L17
  94              	.LVL5:
  95              	.L1:
 192:ThreadX/common/src/txe_byte_allocate.c ****     {
 193:ThreadX/common/src/txe_byte_allocate.c **** 
 194:ThreadX/common/src/txe_byte_allocate.c ****         /* Call actual byte memory allocate function.  */
 195:ThreadX/common/src/txe_byte_allocate.c ****         status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 196:ThreadX/common/src/txe_byte_allocate.c ****     }
 197:ThreadX/common/src/txe_byte_allocate.c **** 
 198:ThreadX/common/src/txe_byte_allocate.c ****     /* Return completion status.  */
 199:ThreadX/common/src/txe_byte_allocate.c ****     return(status);
 200:ThreadX/common/src/txe_byte_allocate.c **** }
  96              		.loc 1 200 0
  97 0030 70BD     		pop	{r4, r5, r6, pc}
  98              	.LVL6:
  99              	.L15:
 113:ThreadX/common/src/txe_byte_allocate.c ****     {
 100              		.loc 1 113 0
 101 0032 99B1     		cbz	r1, .L8
 121:ThreadX/common/src/txe_byte_allocate.c ****     {
 102              		.loc 1 121 0
 103 0034 A2B1     		cbz	r2, .L9
 129:ThreadX/common/src/txe_byte_allocate.c ****     {
 104              		.loc 1 129 0
 105 0036 E069     		ldr	r0, [r4, #28]
 106 0038 9042     		cmp	r0, r2
 107 003a 13D3     		bcc	.L10
 141:ThreadX/common/src/txe_byte_allocate.c ****         {
 108              		.loc 1 141 0
 109 003c 2BB1     		cbz	r3, .L3
 110              	.LBB12:
 111              	.LBB13:
 112              		.loc 2 477 0
 113              		.syntax unified
 114              	@ 477 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 115 003e EFF30580 		 MRS  r0,IPSR 
 116              	@ 0 "" 2
 117              		.thumb
 118              		.syntax unified
ARM GAS  /tmp/cc9fAob8.s 			page 15


 119              	.LBE13:
 120              	.LBE12:
 145:ThreadX/common/src/txe_byte_allocate.c ****             {
 121              		.loc 1 145 0
 122 0042 0F4D     		ldr	r5, .L18+4
 123 0044 2D68     		ldr	r5, [r5]
 124 0046 2843     		orrs	r0, r5, r0
 125 0048 0ED1     		bne	.L11
 126              	.L3:
 160:ThreadX/common/src/txe_byte_allocate.c **** 
 127              		.loc 1 160 0
 128 004a 0E48     		ldr	r0, .L18+8
 129 004c 0568     		ldr	r5, [r0]
 130              	.LVL7:
 163:ThreadX/common/src/txe_byte_allocate.c ****         {
 131              		.loc 1 163 0
 132 004e 0E48     		ldr	r0, .L18+12
 133 0050 8542     		cmp	r5, r0
 134 0052 0BD0     		beq	.L12
 135 0054 0020     		movs	r0, #0
 136 0056 DBE7     		b	.L2
 137              	.LVL8:
 138              	.L6:
 101:ThreadX/common/src/txe_byte_allocate.c ****     }
 139              		.loc 1 101 0
 140 0058 0220     		movs	r0, #2
 141              	.LVL9:
 142 005a D9E7     		b	.L2
 143              	.L8:
 117:ThreadX/common/src/txe_byte_allocate.c ****     }
 144              		.loc 1 117 0
 145 005c 0320     		movs	r0, #3
 146 005e D7E7     		b	.L2
 147              	.L9:
 125:ThreadX/common/src/txe_byte_allocate.c ****     }
 148              		.loc 1 125 0
 149 0060 0520     		movs	r0, #5
 150 0062 D5E7     		b	.L2
 151              	.L10:
 133:ThreadX/common/src/txe_byte_allocate.c ****     }
 152              		.loc 1 133 0
 153 0064 0520     		movs	r0, #5
 154 0066 D3E7     		b	.L2
 155              	.L11:
 149:ThreadX/common/src/txe_byte_allocate.c ****             }
 156              		.loc 1 149 0
 157 0068 0420     		movs	r0, #4
 158 006a D1E7     		b	.L2
 159              	.LVL10:
 160              	.L12:
 167:ThreadX/common/src/txe_byte_allocate.c ****         }
 161              		.loc 1 167 0
 162 006c 1320     		movs	r0, #19
 163 006e DEE7     		b	.L4
 164              	.LVL11:
 165              	.L17:
 166 0070 2046     		mov	r0, r4
ARM GAS  /tmp/cc9fAob8.s 			page 16


 167              	.LVL12:
 195:ThreadX/common/src/txe_byte_allocate.c ****     }
 168              		.loc 1 195 0
 169 0072 FFF7FEFF 		bl	_tx_byte_allocate
 170              	.LVL13:
 171 0076 DBE7     		b	.L1
 172              	.LVL14:
 173              	.L16:
 185:ThreadX/common/src/txe_byte_allocate.c ****             }
 174              		.loc 1 185 0
 175 0078 1320     		movs	r0, #19
 176              	.LVL15:
 199:ThreadX/common/src/txe_byte_allocate.c **** }
 177              		.loc 1 199 0
 178 007a D9E7     		b	.L1
 179              	.L19:
 180              		.align	2
 181              	.L18:
 182 007c 45545942 		.word	1113150533
 183 0080 00000000 		.word	_tx_thread_system_state
 184 0084 00000000 		.word	_tx_thread_current_ptr
 185 0088 00000000 		.word	_tx_timer_thread
 186              		.cfi_endproc
 187              	.LFE8:
 189              		.text
 190              	.Letext0:
 191              		.file 3 "/usr/include/newlib/sys/lock.h"
 192              		.file 4 "/usr/include/newlib/sys/_types.h"
 193              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 194              		.file 6 "/usr/include/newlib/sys/reent.h"
 195              		.file 7 "/usr/include/newlib/stdlib.h"
 196              		.file 8 "ThreadX/common/inc/tx_api.h"
 197              		.file 9 "ThreadX/common/inc/tx_initialize.h"
 198              		.file 10 "ThreadX/common/inc/tx_thread.h"
 199              		.file 11 "ThreadX/common/inc/tx_timer.h"
 200              		.file 12 "ThreadX/common/inc/tx_byte_pool.h"
ARM GAS  /tmp/cc9fAob8.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 txe_byte_allocate.c
     /tmp/cc9fAob8.s:18     .text._txe_byte_allocate:0000000000000000 $t
     /tmp/cc9fAob8.s:25     .text._txe_byte_allocate:0000000000000000 _txe_byte_allocate
     /tmp/cc9fAob8.s:182    .text._txe_byte_allocate:000000000000007c $d

UNDEFINED SYMBOLS
_tx_byte_allocate
_tx_thread_system_state
_tx_thread_current_ptr
_tx_timer_thread
