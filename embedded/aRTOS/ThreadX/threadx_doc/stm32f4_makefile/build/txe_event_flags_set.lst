ARM GAS  /tmp/ccYLxVVA.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"txe_event_flags_set.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._txe_event_flags_set,"ax",%progbits
  18              		.align	1
  19              		.global	_txe_event_flags_set
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_txe_event_flags_set:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/txe_event_flags_set.c"
   1:ThreadX/common/src/txe_event_flags_set.c **** /**************************************************************************/
   2:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
   3:ThreadX/common/src/txe_event_flags_set.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
   5:ThreadX/common/src/txe_event_flags_set.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/txe_event_flags_set.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/txe_event_flags_set.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/txe_event_flags_set.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  10:ThreadX/common/src/txe_event_flags_set.c **** /**************************************************************************/
  11:ThreadX/common/src/txe_event_flags_set.c **** 
  12:ThreadX/common/src/txe_event_flags_set.c **** 
  13:ThreadX/common/src/txe_event_flags_set.c **** /**************************************************************************/
  14:ThreadX/common/src/txe_event_flags_set.c **** /**************************************************************************/
  15:ThreadX/common/src/txe_event_flags_set.c **** /**                                                                       */
  16:ThreadX/common/src/txe_event_flags_set.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/txe_event_flags_set.c **** /**                                                                       */
  18:ThreadX/common/src/txe_event_flags_set.c **** /**   Event Flags                                                         */
  19:ThreadX/common/src/txe_event_flags_set.c **** /**                                                                       */
  20:ThreadX/common/src/txe_event_flags_set.c **** /**************************************************************************/
  21:ThreadX/common/src/txe_event_flags_set.c **** /**************************************************************************/
  22:ThreadX/common/src/txe_event_flags_set.c **** 
  23:ThreadX/common/src/txe_event_flags_set.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/txe_event_flags_set.c **** 
  25:ThreadX/common/src/txe_event_flags_set.c **** 
  26:ThreadX/common/src/txe_event_flags_set.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/txe_event_flags_set.c **** 
  28:ThreadX/common/src/txe_event_flags_set.c **** #include "tx_api.h"
  29:ThreadX/common/src/txe_event_flags_set.c **** #include "tx_event_flags.h"
  30:ThreadX/common/src/txe_event_flags_set.c **** 
  31:ThreadX/common/src/txe_event_flags_set.c **** 
ARM GAS  /tmp/ccYLxVVA.s 			page 2


  32:ThreadX/common/src/txe_event_flags_set.c **** /**************************************************************************/
  33:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  34:ThreadX/common/src/txe_event_flags_set.c **** /*  FUNCTION                                               RELEASE        */
  35:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  36:ThreadX/common/src/txe_event_flags_set.c **** /*    _txe_event_flags_set                                PORTABLE C      */
  37:ThreadX/common/src/txe_event_flags_set.c **** /*                                                           6.1          */
  38:ThreadX/common/src/txe_event_flags_set.c **** /*  AUTHOR                                                                */
  39:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  40:ThreadX/common/src/txe_event_flags_set.c **** /*    William E. Lamie, Microsoft Corporation                             */
  41:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  42:ThreadX/common/src/txe_event_flags_set.c **** /*  DESCRIPTION                                                           */
  43:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  44:ThreadX/common/src/txe_event_flags_set.c **** /*    This function checks for errors in the set event flags function     */
  45:ThreadX/common/src/txe_event_flags_set.c **** /*    call.                                                               */
  46:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  47:ThreadX/common/src/txe_event_flags_set.c **** /*  INPUT                                                                 */
  48:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  49:ThreadX/common/src/txe_event_flags_set.c **** /*    group_ptr                         Pointer to group control block    */
  50:ThreadX/common/src/txe_event_flags_set.c **** /*    flags_to_set                      Event flags to set                */
  51:ThreadX/common/src/txe_event_flags_set.c **** /*    set_option                        Specified either AND or OR        */
  52:ThreadX/common/src/txe_event_flags_set.c **** /*                                        operation on the event flags    */
  53:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  54:ThreadX/common/src/txe_event_flags_set.c **** /*  OUTPUT                                                                */
  55:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  56:ThreadX/common/src/txe_event_flags_set.c **** /*    TX_GROUP_ERROR                    Invalid event flags group pointer */
  57:ThreadX/common/src/txe_event_flags_set.c **** /*    TX_OPTION_ERROR                   Invalid set option                */
  58:ThreadX/common/src/txe_event_flags_set.c **** /*    status                            Actual completion status          */
  59:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  60:ThreadX/common/src/txe_event_flags_set.c **** /*  CALLS                                                                 */
  61:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  62:ThreadX/common/src/txe_event_flags_set.c **** /*    _tx_event_flags_set               Actual set event flags function   */
  63:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  64:ThreadX/common/src/txe_event_flags_set.c **** /*  CALLED BY                                                             */
  65:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  66:ThreadX/common/src/txe_event_flags_set.c **** /*    Application Code                                                    */
  67:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  68:ThreadX/common/src/txe_event_flags_set.c **** /*  RELEASE HISTORY                                                       */
  69:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  70:ThreadX/common/src/txe_event_flags_set.c **** /*    DATE              NAME                      DESCRIPTION             */
  71:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  72:ThreadX/common/src/txe_event_flags_set.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  73:ThreadX/common/src/txe_event_flags_set.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  74:ThreadX/common/src/txe_event_flags_set.c **** /*                                            resulting in version 6.1    */
  75:ThreadX/common/src/txe_event_flags_set.c **** /*                                                                        */
  76:ThreadX/common/src/txe_event_flags_set.c **** /**************************************************************************/
  77:ThreadX/common/src/txe_event_flags_set.c **** UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
  78:ThreadX/common/src/txe_event_flags_set.c **** {
  28              		.loc 1 78 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  79:ThreadX/common/src/txe_event_flags_set.c **** 
  80:ThreadX/common/src/txe_event_flags_set.c **** UINT        status;
  81:ThreadX/common/src/txe_event_flags_set.c **** 
  82:ThreadX/common/src/txe_event_flags_set.c **** 
  83:ThreadX/common/src/txe_event_flags_set.c ****     /* Default status to success.  */
ARM GAS  /tmp/ccYLxVVA.s 			page 3


  84:ThreadX/common/src/txe_event_flags_set.c ****     status =  TX_SUCCESS;
  85:ThreadX/common/src/txe_event_flags_set.c **** 
  86:ThreadX/common/src/txe_event_flags_set.c ****     /* Check for an invalid event flag group pointer.  */
  87:ThreadX/common/src/txe_event_flags_set.c ****     if (group_ptr == TX_NULL)
  33              		.loc 1 87 0
  34 0000 60B1     		cbz	r0, .L4
  78:ThreadX/common/src/txe_event_flags_set.c **** 
  35              		.loc 1 78 0
  36 0002 10B5     		push	{r4, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 4, -8
  40              		.cfi_offset 14, -4
  41 0004 0346     		mov	r3, r0
  88:ThreadX/common/src/txe_event_flags_set.c ****     {
  89:ThreadX/common/src/txe_event_flags_set.c **** 
  90:ThreadX/common/src/txe_event_flags_set.c ****         /* Event flags group pointer is invalid, return appropriate error code.  */
  91:ThreadX/common/src/txe_event_flags_set.c ****         status =  TX_GROUP_ERROR;
  92:ThreadX/common/src/txe_event_flags_set.c ****     }
  93:ThreadX/common/src/txe_event_flags_set.c **** 
  94:ThreadX/common/src/txe_event_flags_set.c ****     /* Now check for invalid event flag group ID.  */
  95:ThreadX/common/src/txe_event_flags_set.c ****     else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
  42              		.loc 1 95 0
  43 0006 0468     		ldr	r4, [r0]
  44 0008 0748     		ldr	r0, .L11
  45              	.LVL1:
  46 000a 8442     		cmp	r4, r0
  47 000c 08D1     		bne	.L5
  96:ThreadX/common/src/txe_event_flags_set.c ****     {
  97:ThreadX/common/src/txe_event_flags_set.c **** 
  98:ThreadX/common/src/txe_event_flags_set.c ****         /* Event flags group pointer is invalid, return appropriate error code.  */
  99:ThreadX/common/src/txe_event_flags_set.c ****         status =  TX_GROUP_ERROR;
 100:ThreadX/common/src/txe_event_flags_set.c ****     }
 101:ThreadX/common/src/txe_event_flags_set.c ****     else
 102:ThreadX/common/src/txe_event_flags_set.c ****     {
 103:ThreadX/common/src/txe_event_flags_set.c **** 
 104:ThreadX/common/src/txe_event_flags_set.c ****         /* Check for invalid set option.  */
 105:ThreadX/common/src/txe_event_flags_set.c ****         if (set_option != TX_AND)
  48              		.loc 1 105 0
  49 000e 022A     		cmp	r2, #2
  50 0010 00D0     		beq	.L3
 106:ThreadX/common/src/txe_event_flags_set.c ****         {
 107:ThreadX/common/src/txe_event_flags_set.c **** 
 108:ThreadX/common/src/txe_event_flags_set.c ****             if (set_option != TX_OR)
  51              		.loc 1 108 0
  52 0012 3AB9     		cbnz	r2, .L6
  53              	.L3:
  54 0014 1846     		mov	r0, r3
 109:ThreadX/common/src/txe_event_flags_set.c ****             {
 110:ThreadX/common/src/txe_event_flags_set.c **** 
 111:ThreadX/common/src/txe_event_flags_set.c ****                 /* Invalid set events option, return appropriate error.  */
 112:ThreadX/common/src/txe_event_flags_set.c ****                 status =  TX_OPTION_ERROR;
 113:ThreadX/common/src/txe_event_flags_set.c ****             }
 114:ThreadX/common/src/txe_event_flags_set.c ****         }
 115:ThreadX/common/src/txe_event_flags_set.c ****     }
 116:ThreadX/common/src/txe_event_flags_set.c **** 
 117:ThreadX/common/src/txe_event_flags_set.c ****     /* Determine if everything is okay.  */
ARM GAS  /tmp/ccYLxVVA.s 			page 4


 118:ThreadX/common/src/txe_event_flags_set.c ****     if (status == TX_SUCCESS)
 119:ThreadX/common/src/txe_event_flags_set.c ****     {
 120:ThreadX/common/src/txe_event_flags_set.c **** 
 121:ThreadX/common/src/txe_event_flags_set.c ****         /* Call actual event flags set function.  */
 122:ThreadX/common/src/txe_event_flags_set.c ****         status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
  55              		.loc 1 122 0
  56 0016 FFF7FEFF 		bl	_tx_event_flags_set
  57              	.LVL2:
  58 001a 02E0     		b	.L1
  59              	.LVL3:
  60              	.L4:
  61              	.LCFI1:
  62              		.cfi_def_cfa_offset 0
  63              		.cfi_restore 4
  64              		.cfi_restore 14
  91:ThreadX/common/src/txe_event_flags_set.c ****     }
  65              		.loc 1 91 0
  66 001c 0620     		movs	r0, #6
  67              	.LVL4:
 123:ThreadX/common/src/txe_event_flags_set.c ****     }
 124:ThreadX/common/src/txe_event_flags_set.c **** 
 125:ThreadX/common/src/txe_event_flags_set.c ****     /* Return completion status.  */
 126:ThreadX/common/src/txe_event_flags_set.c ****     return(status);
 127:ThreadX/common/src/txe_event_flags_set.c **** }
  68              		.loc 1 127 0
  69 001e 7047     		bx	lr
  70              	.LVL5:
  71              	.L5:
  72              	.LCFI2:
  73              		.cfi_def_cfa_offset 8
  74              		.cfi_offset 4, -8
  75              		.cfi_offset 14, -4
  99:ThreadX/common/src/txe_event_flags_set.c ****     }
  76              		.loc 1 99 0
  77 0020 0620     		movs	r0, #6
  78              	.LVL6:
  79              	.L1:
  80              		.loc 1 127 0
  81 0022 10BD     		pop	{r4, pc}
  82              	.LVL7:
  83              	.L6:
 112:ThreadX/common/src/txe_event_flags_set.c ****             }
  84              		.loc 1 112 0
  85 0024 0820     		movs	r0, #8
  86              	.LVL8:
 126:ThreadX/common/src/txe_event_flags_set.c **** }
  87              		.loc 1 126 0
  88 0026 FCE7     		b	.L1
  89              	.L12:
  90              		.align	2
  91              	.L11:
  92 0028 4E445644 		.word	1146504270
  93              		.cfi_endproc
  94              	.LFE8:
  96              		.text
  97              	.Letext0:
  98              		.file 2 "/usr/include/newlib/sys/lock.h"
ARM GAS  /tmp/ccYLxVVA.s 			page 5


  99              		.file 3 "/usr/include/newlib/sys/_types.h"
 100              		.file 4 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 101              		.file 5 "/usr/include/newlib/sys/reent.h"
 102              		.file 6 "/usr/include/newlib/stdlib.h"
 103              		.file 7 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
 104              		.file 8 "ThreadX/common/inc/tx_api.h"
 105              		.file 9 "ThreadX/common/inc/tx_event_flags.h"
ARM GAS  /tmp/ccYLxVVA.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 txe_event_flags_set.c
     /tmp/ccYLxVVA.s:18     .text._txe_event_flags_set:0000000000000000 $t
     /tmp/ccYLxVVA.s:25     .text._txe_event_flags_set:0000000000000000 _txe_event_flags_set
     /tmp/ccYLxVVA.s:92     .text._txe_event_flags_set:0000000000000028 $d

UNDEFINED SYMBOLS
_tx_event_flags_set
