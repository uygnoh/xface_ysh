ARM GAS  /tmp/ccoFWmYD.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_thread_shell_entry.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_thread_shell_entry,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_thread_shell_entry
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_thread_shell_entry:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_thread_shell_entry.c"
   1:ThreadX/common/src/tx_thread_shell_entry.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
   3:ThreadX/common/src/tx_thread_shell_entry.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
   5:ThreadX/common/src/tx_thread_shell_entry.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_thread_shell_entry.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_thread_shell_entry.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_thread_shell_entry.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  10:ThreadX/common/src/tx_thread_shell_entry.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_thread_shell_entry.c **** 
  12:ThreadX/common/src/tx_thread_shell_entry.c **** 
  13:ThreadX/common/src/tx_thread_shell_entry.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_thread_shell_entry.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_thread_shell_entry.c **** /**                                                                       */
  16:ThreadX/common/src/tx_thread_shell_entry.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_thread_shell_entry.c **** /**                                                                       */
  18:ThreadX/common/src/tx_thread_shell_entry.c **** /**   Thread                                                              */
  19:ThreadX/common/src/tx_thread_shell_entry.c **** /**                                                                       */
  20:ThreadX/common/src/tx_thread_shell_entry.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_thread_shell_entry.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_thread_shell_entry.c **** 
  23:ThreadX/common/src/tx_thread_shell_entry.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_thread_shell_entry.c **** 
  25:ThreadX/common/src/tx_thread_shell_entry.c **** 
  26:ThreadX/common/src/tx_thread_shell_entry.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_thread_shell_entry.c **** 
  28:ThreadX/common/src/tx_thread_shell_entry.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_thread_shell_entry.c **** #include "tx_thread.h"
  30:ThreadX/common/src/tx_thread_shell_entry.c **** 
  31:ThreadX/common/src/tx_thread_shell_entry.c **** 
ARM GAS  /tmp/ccoFWmYD.s 			page 2


  32:ThreadX/common/src/tx_thread_shell_entry.c **** /**************************************************************************/
  33:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  34:ThreadX/common/src/tx_thread_shell_entry.c **** /*  FUNCTION                                               RELEASE        */
  35:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  36:ThreadX/common/src/tx_thread_shell_entry.c **** /*    _tx_thread_shell_entry                              PORTABLE C      */
  37:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                           6.1          */
  38:ThreadX/common/src/tx_thread_shell_entry.c **** /*  AUTHOR                                                                */
  39:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  40:ThreadX/common/src/tx_thread_shell_entry.c **** /*    William E. Lamie, Microsoft Corporation                             */
  41:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  42:ThreadX/common/src/tx_thread_shell_entry.c **** /*  DESCRIPTION                                                           */
  43:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  44:ThreadX/common/src/tx_thread_shell_entry.c **** /*    This function calls the specified entry function of the thread.  It */
  45:ThreadX/common/src/tx_thread_shell_entry.c **** /*    also provides a place for the thread's entry function to return.    */
  46:ThreadX/common/src/tx_thread_shell_entry.c **** /*    If the thread returns, this function places the thread in a         */
  47:ThreadX/common/src/tx_thread_shell_entry.c **** /*    "COMPLETED" state.                                                  */
  48:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  49:ThreadX/common/src/tx_thread_shell_entry.c **** /*  INPUT                                                                 */
  50:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  51:ThreadX/common/src/tx_thread_shell_entry.c **** /*    None                                                                */
  52:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  53:ThreadX/common/src/tx_thread_shell_entry.c **** /*  OUTPUT                                                                */
  54:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  55:ThreadX/common/src/tx_thread_shell_entry.c **** /*    None                                                                */
  56:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  57:ThreadX/common/src/tx_thread_shell_entry.c **** /*  CALLS                                                                 */
  58:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  59:ThreadX/common/src/tx_thread_shell_entry.c **** /*    thread_entry                      Thread's entry function           */
  60:ThreadX/common/src/tx_thread_shell_entry.c **** /*    _tx_thread_system_suspend         Thread suspension routine         */
  61:ThreadX/common/src/tx_thread_shell_entry.c **** /*    _tx_thread_system_ni_suspend      Non-interruptable suspend thread  */
  62:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  63:ThreadX/common/src/tx_thread_shell_entry.c **** /*  CALLED BY                                                             */
  64:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  65:ThreadX/common/src/tx_thread_shell_entry.c **** /*    Initial thread stack frame                                          */
  66:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  67:ThreadX/common/src/tx_thread_shell_entry.c **** /*  RELEASE HISTORY                                                       */
  68:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  69:ThreadX/common/src/tx_thread_shell_entry.c **** /*    DATE              NAME                      DESCRIPTION             */
  70:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  71:ThreadX/common/src/tx_thread_shell_entry.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  72:ThreadX/common/src/tx_thread_shell_entry.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  73:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                            resulting in version 6.1    */
  74:ThreadX/common/src/tx_thread_shell_entry.c **** /*                                                                        */
  75:ThreadX/common/src/tx_thread_shell_entry.c **** /**************************************************************************/
  76:ThreadX/common/src/tx_thread_shell_entry.c **** VOID  _tx_thread_shell_entry(VOID)
  77:ThreadX/common/src/tx_thread_shell_entry.c **** {
  28              		.loc 1 77 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 38B5     		push	{r3, r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 3, -16
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
ARM GAS  /tmp/ccoFWmYD.s 			page 3


  78:ThreadX/common/src/tx_thread_shell_entry.c **** 
  79:ThreadX/common/src/tx_thread_shell_entry.c **** TX_INTERRUPT_SAVE_AREA
  80:ThreadX/common/src/tx_thread_shell_entry.c **** 
  81:ThreadX/common/src/tx_thread_shell_entry.c **** TX_THREAD       *thread_ptr;
  82:ThreadX/common/src/tx_thread_shell_entry.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
  83:ThreadX/common/src/tx_thread_shell_entry.c **** VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
  84:ThreadX/common/src/tx_thread_shell_entry.c **** #endif
  85:ThreadX/common/src/tx_thread_shell_entry.c **** 
  86:ThreadX/common/src/tx_thread_shell_entry.c **** 
  87:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Pickup thread pointer.  */
  88:ThreadX/common/src/tx_thread_shell_entry.c ****     TX_THREAD_GET_CURRENT(thread_ptr)
  39              		.loc 1 88 0
  40 0002 194B     		ldr	r3, .L6
  41 0004 1C68     		ldr	r4, [r3]
  42              	.LVL0:
  43              	.LBB21:
  44              	.LBB22:
  45              	.LBB23:
  46              	.LBB24:
  47              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
ARM GAS  /tmp/ccoFWmYD.s 			page 4


  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccoFWmYD.s 			page 5


  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccoFWmYD.s 			page 6


 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
ARM GAS  /tmp/ccoFWmYD.s 			page 7


 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
ARM GAS  /tmp/ccoFWmYD.s 			page 8


 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
ARM GAS  /tmp/ccoFWmYD.s 			page 9


 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
ARM GAS  /tmp/ccoFWmYD.s 			page 10


 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccoFWmYD.s 			page 11


 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
ARM GAS  /tmp/ccoFWmYD.s 			page 12


 494:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  48              		.loc 2 539 0
  49              		.syntax unified
  50              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  51 0006 EFF31082 		MRS  r2, PRIMASK 
  52              	@ 0 "" 2
  53              		.thumb
  54              		.syntax unified
  55              	.LBE24:
  56              	.LBE23:
 540:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
ARM GAS  /tmp/ccoFWmYD.s 			page 13


 542:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
 567:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
 569:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
 571:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  57              		.loc 2 575 0
  58              		.syntax unified
  59              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  60 000a 72B6     		CPSID i
  61              	@ 0 "" 2
  62              		.thumb
  63              		.syntax unified
  64              	.LBE22:
  65              	.LBE21:
  89:ThreadX/common/src/tx_thread_shell_entry.c **** 
  90:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Perform any additional activities for tool or user purpose.  */
  91:ThreadX/common/src/tx_thread_shell_entry.c ****     TX_THREAD_STARTED_EXTENSION(thread_ptr)
  92:ThreadX/common/src/tx_thread_shell_entry.c **** 
  93:ThreadX/common/src/tx_thread_shell_entry.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
  94:ThreadX/common/src/tx_thread_shell_entry.c **** 
  95:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Disable interrupts.  */
  96:ThreadX/common/src/tx_thread_shell_entry.c ****     TX_DISABLE
  97:ThreadX/common/src/tx_thread_shell_entry.c **** 
  98:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Pickup the entry/exit application callback routine.  */
  99:ThreadX/common/src/tx_thread_shell_entry.c ****     entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
  66              		.loc 1 99 0
  67 000c D4F8AC30 		ldr	r3, [r4, #172]
  68              	.LVL1:
ARM GAS  /tmp/ccoFWmYD.s 			page 14


  69              	.LBB25:
  70              	.LBB26:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  71              		.loc 2 562 0
  72              		.syntax unified
  73              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  74 0010 82F31088 		MSR  PRIMASK,r2
  75              	@ 0 "" 2
  76              		.thumb
  77              		.syntax unified
  78              	.LBE26:
  79              	.LBE25:
 100:ThreadX/common/src/tx_thread_shell_entry.c **** 
 101:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Restore interrupts.  */
 102:ThreadX/common/src/tx_thread_shell_entry.c ****     TX_RESTORE
 103:ThreadX/common/src/tx_thread_shell_entry.c **** 
 104:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Determine if an application callback routine is specified.  */
 105:ThreadX/common/src/tx_thread_shell_entry.c ****     if (entry_exit_notify != TX_NULL)
  80              		.loc 1 105 0
  81 0014 13B1     		cbz	r3, .L2
 106:ThreadX/common/src/tx_thread_shell_entry.c ****     {
 107:ThreadX/common/src/tx_thread_shell_entry.c **** 
 108:ThreadX/common/src/tx_thread_shell_entry.c ****         /* Yes, notify application that this thread has been entered!  */
 109:ThreadX/common/src/tx_thread_shell_entry.c ****         (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
  82              		.loc 1 109 0
  83 0016 0021     		movs	r1, #0
  84 0018 2046     		mov	r0, r4
  85 001a 9847     		blx	r3
  86              	.LVL2:
  87              	.L2:
 110:ThreadX/common/src/tx_thread_shell_entry.c ****     }
 111:ThreadX/common/src/tx_thread_shell_entry.c **** #endif
 112:ThreadX/common/src/tx_thread_shell_entry.c **** 
 113:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Call current thread's entry function.  */
 114:ThreadX/common/src/tx_thread_shell_entry.c ****     (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
  88              		.loc 1 114 0
  89 001c 636C     		ldr	r3, [r4, #68]
  90 001e A06C     		ldr	r0, [r4, #72]
  91 0020 9847     		blx	r3
  92              	.LVL3:
 115:ThreadX/common/src/tx_thread_shell_entry.c **** 
 116:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Suspend thread with a "completed" state.  */
 117:ThreadX/common/src/tx_thread_shell_entry.c **** 
 118:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Determine if the application is using mutexes.  */
 119:ThreadX/common/src/tx_thread_shell_entry.c ****     if (_tx_thread_mutex_release != TX_NULL)
  93              		.loc 1 119 0
  94 0022 124B     		ldr	r3, .L6+4
  95 0024 1B68     		ldr	r3, [r3]
  96 0026 0BB1     		cbz	r3, .L3
 120:ThreadX/common/src/tx_thread_shell_entry.c ****     {
 121:ThreadX/common/src/tx_thread_shell_entry.c **** 
 122:ThreadX/common/src/tx_thread_shell_entry.c ****         /* Yes, call the mutex release function via a function pointer that
 123:ThreadX/common/src/tx_thread_shell_entry.c ****            is setup during mutex initialization.  */
 124:ThreadX/common/src/tx_thread_shell_entry.c ****         (_tx_thread_mutex_release)(thread_ptr);
  97              		.loc 1 124 0
  98 0028 2046     		mov	r0, r4
  99 002a 9847     		blx	r3
ARM GAS  /tmp/ccoFWmYD.s 			page 15


 100              	.LVL4:
 101              	.L3:
 102              	.LBB27:
 103              	.LBB28:
 104              	.LBB29:
 105              	.LBB30:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 106              		.loc 2 539 0
 107              		.syntax unified
 108              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 109 002c EFF31081 		MRS  r1, PRIMASK 
 110              	@ 0 "" 2
 111              		.thumb
 112              		.syntax unified
 113              	.LBE30:
 114              	.LBE29:
 115              		.loc 2 575 0
 116              		.syntax unified
 117              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 118 0030 72B6     		CPSID i
 119              	@ 0 "" 2
 120              		.thumb
 121              		.syntax unified
 122              	.LBE28:
 123              	.LBE27:
 125:ThreadX/common/src/tx_thread_shell_entry.c ****     }
 126:ThreadX/common/src/tx_thread_shell_entry.c **** 
 127:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Lockout interrupts while the thread state is setup.  */
 128:ThreadX/common/src/tx_thread_shell_entry.c ****     TX_DISABLE
 129:ThreadX/common/src/tx_thread_shell_entry.c **** 
 130:ThreadX/common/src/tx_thread_shell_entry.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
 131:ThreadX/common/src/tx_thread_shell_entry.c **** 
 132:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Pickup the entry/exit application callback routine again.  */
 133:ThreadX/common/src/tx_thread_shell_entry.c ****     entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 124              		.loc 1 133 0
 125 0032 D4F8AC50 		ldr	r5, [r4, #172]
 126              	.LVL5:
 134:ThreadX/common/src/tx_thread_shell_entry.c **** #endif
 135:ThreadX/common/src/tx_thread_shell_entry.c **** 
 136:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Set the status to suspending, in order to indicate the suspension
 137:ThreadX/common/src/tx_thread_shell_entry.c ****        is in progress.  */
 138:ThreadX/common/src/tx_thread_shell_entry.c ****     thread_ptr -> tx_thread_state =  TX_COMPLETED;
 127              		.loc 1 138 0
 128 0036 0123     		movs	r3, #1
 129 0038 2363     		str	r3, [r4, #48]
 139:ThreadX/common/src/tx_thread_shell_entry.c **** 
 140:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Thread state change.  */
 141:ThreadX/common/src/tx_thread_shell_entry.c ****     TX_THREAD_STATE_CHANGE(thread_ptr, TX_COMPLETED)
 142:ThreadX/common/src/tx_thread_shell_entry.c **** 
 143:ThreadX/common/src/tx_thread_shell_entry.c **** #ifdef TX_NOT_INTERRUPTABLE
 144:ThreadX/common/src/tx_thread_shell_entry.c **** 
 145:ThreadX/common/src/tx_thread_shell_entry.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
 146:ThreadX/common/src/tx_thread_shell_entry.c **** 
 147:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Determine if an application callback routine is specified.  */
 148:ThreadX/common/src/tx_thread_shell_entry.c ****     if (entry_exit_notify != TX_NULL)
 149:ThreadX/common/src/tx_thread_shell_entry.c ****     {
 150:ThreadX/common/src/tx_thread_shell_entry.c **** 
ARM GAS  /tmp/ccoFWmYD.s 			page 16


 151:ThreadX/common/src/tx_thread_shell_entry.c ****         /* Yes, notify application that this thread has exited!  */
 152:ThreadX/common/src/tx_thread_shell_entry.c ****         (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 153:ThreadX/common/src/tx_thread_shell_entry.c ****     }
 154:ThreadX/common/src/tx_thread_shell_entry.c **** #endif
 155:ThreadX/common/src/tx_thread_shell_entry.c **** 
 156:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Perform any additional activities for tool or user purpose.  */
 157:ThreadX/common/src/tx_thread_shell_entry.c ****     TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 158:ThreadX/common/src/tx_thread_shell_entry.c **** 
 159:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Call actual non-interruptable thread suspension routine.  */
 160:ThreadX/common/src/tx_thread_shell_entry.c ****     _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
 161:ThreadX/common/src/tx_thread_shell_entry.c **** 
 162:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Restore interrupts.  */
 163:ThreadX/common/src/tx_thread_shell_entry.c ****     TX_RESTORE
 164:ThreadX/common/src/tx_thread_shell_entry.c **** #else
 165:ThreadX/common/src/tx_thread_shell_entry.c **** 
 166:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Set the suspending flag. */
 167:ThreadX/common/src/tx_thread_shell_entry.c ****     thread_ptr -> tx_thread_suspending =  TX_TRUE;
 130              		.loc 1 167 0
 131 003a A363     		str	r3, [r4, #56]
 168:ThreadX/common/src/tx_thread_shell_entry.c **** 
 169:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Setup for no timeout period.  */
 170:ThreadX/common/src/tx_thread_shell_entry.c ****     thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 132              		.loc 1 170 0
 133 003c 0023     		movs	r3, #0
 134 003e E364     		str	r3, [r4, #76]
 171:ThreadX/common/src/tx_thread_shell_entry.c **** 
 172:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Temporarily disable preemption.  */
 173:ThreadX/common/src/tx_thread_shell_entry.c ****     _tx_thread_preempt_disable++;
 135              		.loc 1 173 0
 136 0040 0B4A     		ldr	r2, .L6+8
 137 0042 1368     		ldr	r3, [r2]
 138 0044 0133     		adds	r3, r3, #1
 139 0046 1360     		str	r3, [r2]
 140              	.LBB31:
 141              	.LBB32:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 142              		.loc 2 562 0
 143              		.syntax unified
 144              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 145 0048 81F31088 		MSR  PRIMASK,r1
 146              	@ 0 "" 2
 147              		.thumb
 148              		.syntax unified
 149              	.LBE32:
 150              	.LBE31:
 151              	.LBB33:
 152              	.LBB34:
 153              	.LBB35:
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 154              		.loc 2 303 0
 155              		.syntax unified
 156              	@ 303 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 157 004c EFF31483 		 MRS  r3,CONTROL 
 158              	@ 0 "" 2
 159              		.thumb
 160              		.syntax unified
 161              	.LBE35:
ARM GAS  /tmp/ccoFWmYD.s 			page 17


 162              	.LBE34:
 174:ThreadX/common/src/tx_thread_shell_entry.c **** 
 175:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Restore interrupts.  */
 176:ThreadX/common/src/tx_thread_shell_entry.c ****     TX_RESTORE
 177:ThreadX/common/src/tx_thread_shell_entry.c **** 
 178:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Perform any additional activities for tool or user purpose.  */
 179:ThreadX/common/src/tx_thread_shell_entry.c ****     TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 163              		.loc 1 179 0
 164 0050 23F00403 		bic	r3, r3, #4
 165              	.LVL6:
 166              	.LBB36:
 167              	.LBB37:
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 168              		.loc 2 309 0
 169              		.syntax unified
 170              	@ 309 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 171 0054 83F31488 		 MSR  CONTROL,r3
 172              	@ 0 "" 2
 173              	.LVL7:
 174              		.thumb
 175              		.syntax unified
 176              	.LBE37:
 177              	.LBE36:
 178              	.LBE33:
 180:ThreadX/common/src/tx_thread_shell_entry.c **** 
 181:ThreadX/common/src/tx_thread_shell_entry.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
 182:ThreadX/common/src/tx_thread_shell_entry.c **** 
 183:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Determine if an application callback routine is specified.  */
 184:ThreadX/common/src/tx_thread_shell_entry.c ****     if (entry_exit_notify != TX_NULL)
 179              		.loc 1 184 0
 180 0058 15B1     		cbz	r5, .L4
 185:ThreadX/common/src/tx_thread_shell_entry.c ****     {
 186:ThreadX/common/src/tx_thread_shell_entry.c **** 
 187:ThreadX/common/src/tx_thread_shell_entry.c ****         /* Yes, notify application that this thread has exited!  */
 188:ThreadX/common/src/tx_thread_shell_entry.c ****         (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 181              		.loc 1 188 0
 182 005a 0121     		movs	r1, #1
 183 005c 2046     		mov	r0, r4
 184 005e A847     		blx	r5
 185              	.LVL8:
 186              	.L4:
 189:ThreadX/common/src/tx_thread_shell_entry.c ****     }
 190:ThreadX/common/src/tx_thread_shell_entry.c **** #endif
 191:ThreadX/common/src/tx_thread_shell_entry.c **** 
 192:ThreadX/common/src/tx_thread_shell_entry.c ****     /* Call actual thread suspension routine.  */
 193:ThreadX/common/src/tx_thread_shell_entry.c ****     _tx_thread_system_suspend(thread_ptr);
 187              		.loc 1 193 0
 188 0060 2046     		mov	r0, r4
 189 0062 FFF7FEFF 		bl	_tx_thread_system_suspend
 190              	.LVL9:
 194:ThreadX/common/src/tx_thread_shell_entry.c **** #endif
 195:ThreadX/common/src/tx_thread_shell_entry.c **** 
 196:ThreadX/common/src/tx_thread_shell_entry.c **** 
 197:ThreadX/common/src/tx_thread_shell_entry.c **** #ifdef TX_SAFETY_CRITICAL
 198:ThreadX/common/src/tx_thread_shell_entry.c **** 
 199:ThreadX/common/src/tx_thread_shell_entry.c ****     /* If we ever get here, raise safety critical exception.  */
 200:ThreadX/common/src/tx_thread_shell_entry.c ****     TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
ARM GAS  /tmp/ccoFWmYD.s 			page 18


 201:ThreadX/common/src/tx_thread_shell_entry.c **** #endif
 202:ThreadX/common/src/tx_thread_shell_entry.c **** }
 191              		.loc 1 202 0
 192 0066 38BD     		pop	{r3, r4, r5, pc}
 193              	.LVL10:
 194              	.L7:
 195              		.align	2
 196              	.L6:
 197 0068 00000000 		.word	_tx_thread_current_ptr
 198 006c 00000000 		.word	_tx_thread_mutex_release
 199 0070 00000000 		.word	_tx_thread_preempt_disable
 200              		.cfi_endproc
 201              	.LFE8:
 203              		.text
 204              	.Letext0:
 205              		.file 3 "/usr/include/newlib/sys/lock.h"
 206              		.file 4 "/usr/include/newlib/sys/_types.h"
 207              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 208              		.file 6 "/usr/include/newlib/sys/reent.h"
 209              		.file 7 "/usr/include/newlib/stdlib.h"
 210              		.file 8 "ThreadX/common/inc/tx_api.h"
 211              		.file 9 "ThreadX/common/inc/tx_thread.h"
ARM GAS  /tmp/ccoFWmYD.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_thread_shell_entry.c
     /tmp/ccoFWmYD.s:18     .text._tx_thread_shell_entry:0000000000000000 $t
     /tmp/ccoFWmYD.s:25     .text._tx_thread_shell_entry:0000000000000000 _tx_thread_shell_entry
     /tmp/ccoFWmYD.s:197    .text._tx_thread_shell_entry:0000000000000068 $d

UNDEFINED SYMBOLS
_tx_thread_system_suspend
_tx_thread_current_ptr
_tx_thread_mutex_release
_tx_thread_preempt_disable
