ARM GAS  /tmp/cctLTyl2.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_thread_terminate.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_thread_terminate,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_thread_terminate
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_thread_terminate:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_thread_terminate.c"
   1:ThreadX/common/src/tx_thread_terminate.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
   3:ThreadX/common/src/tx_thread_terminate.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
   5:ThreadX/common/src/tx_thread_terminate.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_thread_terminate.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_thread_terminate.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_thread_terminate.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  10:ThreadX/common/src/tx_thread_terminate.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_thread_terminate.c **** 
  12:ThreadX/common/src/tx_thread_terminate.c **** 
  13:ThreadX/common/src/tx_thread_terminate.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_thread_terminate.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_thread_terminate.c **** /**                                                                       */
  16:ThreadX/common/src/tx_thread_terminate.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_thread_terminate.c **** /**                                                                       */
  18:ThreadX/common/src/tx_thread_terminate.c **** /**   Thread                                                              */
  19:ThreadX/common/src/tx_thread_terminate.c **** /**                                                                       */
  20:ThreadX/common/src/tx_thread_terminate.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_thread_terminate.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_thread_terminate.c **** 
  23:ThreadX/common/src/tx_thread_terminate.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_thread_terminate.c **** 
  25:ThreadX/common/src/tx_thread_terminate.c **** 
  26:ThreadX/common/src/tx_thread_terminate.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_thread_terminate.c **** 
  28:ThreadX/common/src/tx_thread_terminate.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_thread_terminate.c **** #include "tx_trace.h"
  30:ThreadX/common/src/tx_thread_terminate.c **** #include "tx_thread.h"
  31:ThreadX/common/src/tx_thread_terminate.c **** #include "tx_timer.h"
ARM GAS  /tmp/cctLTyl2.s 			page 2


  32:ThreadX/common/src/tx_thread_terminate.c **** 
  33:ThreadX/common/src/tx_thread_terminate.c **** 
  34:ThreadX/common/src/tx_thread_terminate.c **** /**************************************************************************/
  35:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  36:ThreadX/common/src/tx_thread_terminate.c **** /*  FUNCTION                                               RELEASE        */
  37:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  38:ThreadX/common/src/tx_thread_terminate.c **** /*    _tx_thread_terminate                                PORTABLE C      */
  39:ThreadX/common/src/tx_thread_terminate.c **** /*                                                           6.1          */
  40:ThreadX/common/src/tx_thread_terminate.c **** /*  AUTHOR                                                                */
  41:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  42:ThreadX/common/src/tx_thread_terminate.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  44:ThreadX/common/src/tx_thread_terminate.c **** /*  DESCRIPTION                                                           */
  45:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  46:ThreadX/common/src/tx_thread_terminate.c **** /*    This function handles application thread terminate requests.  Once  */
  47:ThreadX/common/src/tx_thread_terminate.c **** /*    a thread is terminated, it cannot be executed again unless it is    */
  48:ThreadX/common/src/tx_thread_terminate.c **** /*    deleted and recreated.                                              */
  49:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  50:ThreadX/common/src/tx_thread_terminate.c **** /*  INPUT                                                                 */
  51:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  52:ThreadX/common/src/tx_thread_terminate.c **** /*    thread_ptr                            Pointer to thread to suspend  */
  53:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  54:ThreadX/common/src/tx_thread_terminate.c **** /*  OUTPUT                                                                */
  55:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  56:ThreadX/common/src/tx_thread_terminate.c **** /*    status                                Return completion status      */
  57:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  58:ThreadX/common/src/tx_thread_terminate.c **** /*  CALLS                                                                 */
  59:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  60:ThreadX/common/src/tx_thread_terminate.c **** /*    _tx_timer_system_deactivate           Timer deactivate function     */
  61:ThreadX/common/src/tx_thread_terminate.c **** /*    _tx_thread_system_suspend             Actual thread suspension      */
  62:ThreadX/common/src/tx_thread_terminate.c **** /*    _tx_thread_system_ni_suspend          Non-interruptable suspend     */
  63:ThreadX/common/src/tx_thread_terminate.c **** /*                                            thread                      */
  64:ThreadX/common/src/tx_thread_terminate.c **** /*    _tx_thread_system_preempt_check       Check for preemption          */
  65:ThreadX/common/src/tx_thread_terminate.c **** /*    Suspend Cleanup Routine               Suspension cleanup function   */
  66:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  67:ThreadX/common/src/tx_thread_terminate.c **** /*  CALLED BY                                                             */
  68:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  69:ThreadX/common/src/tx_thread_terminate.c **** /*    Application code                                                    */
  70:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  71:ThreadX/common/src/tx_thread_terminate.c **** /*  RELEASE HISTORY                                                       */
  72:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  73:ThreadX/common/src/tx_thread_terminate.c **** /*    DATE              NAME                      DESCRIPTION             */
  74:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  75:ThreadX/common/src/tx_thread_terminate.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  76:ThreadX/common/src/tx_thread_terminate.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  77:ThreadX/common/src/tx_thread_terminate.c **** /*                                            resulting in version 6.1    */
  78:ThreadX/common/src/tx_thread_terminate.c **** /*                                                                        */
  79:ThreadX/common/src/tx_thread_terminate.c **** /**************************************************************************/
  80:ThreadX/common/src/tx_thread_terminate.c **** UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
  81:ThreadX/common/src/tx_thread_terminate.c **** {
  28              		.loc 1 81 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
ARM GAS  /tmp/cctLTyl2.s 			page 3


  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 0446     		mov	r4, r0
  41              	.LVL1:
  42              	.LBB70:
  43              	.LBB71:
  44              	.LBB72:
  45              	.LBB73:
  46              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
ARM GAS  /tmp/cctLTyl2.s 			page 4


  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
ARM GAS  /tmp/cctLTyl2.s 			page 5


 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/cctLTyl2.s 			page 6


 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  /tmp/cctLTyl2.s 			page 7


 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
ARM GAS  /tmp/cctLTyl2.s 			page 8


 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
ARM GAS  /tmp/cctLTyl2.s 			page 9


 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
ARM GAS  /tmp/cctLTyl2.s 			page 10


 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
ARM GAS  /tmp/cctLTyl2.s 			page 11


 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
ARM GAS  /tmp/cctLTyl2.s 			page 12


 502:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 528:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  47              		.loc 2 539 0
  48              		.syntax unified
  49              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  50 0004 EFF31085 		MRS  r5, PRIMASK 
  51              	@ 0 "" 2
  52              		.thumb
  53              		.syntax unified
  54              	.LBE73:
  55              	.LBE72:
 540:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
ARM GAS  /tmp/cctLTyl2.s 			page 13


 550:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
 567:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
 569:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
 571:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  56              		.loc 2 575 0
  57              		.syntax unified
  58              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
  59 0008 72B6     		CPSID i
  60              	@ 0 "" 2
  61              		.thumb
  62              		.syntax unified
  63              	.LBE71:
  64              	.LBE70:
  82:ThreadX/common/src/tx_thread_terminate.c **** 
  83:ThreadX/common/src/tx_thread_terminate.c **** TX_INTERRUPT_SAVE_AREA
  84:ThreadX/common/src/tx_thread_terminate.c **** 
  85:ThreadX/common/src/tx_thread_terminate.c **** VOID        (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequen
  86:ThreadX/common/src/tx_thread_terminate.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
  87:ThreadX/common/src/tx_thread_terminate.c **** VOID        (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT id);
  88:ThreadX/common/src/tx_thread_terminate.c **** #endif
  89:ThreadX/common/src/tx_thread_terminate.c **** UINT        status;
  90:ThreadX/common/src/tx_thread_terminate.c **** ULONG       suspension_sequence;
  91:ThreadX/common/src/tx_thread_terminate.c **** 
  92:ThreadX/common/src/tx_thread_terminate.c **** 
  93:ThreadX/common/src/tx_thread_terminate.c ****     /* Default to successful completion.  */
  94:ThreadX/common/src/tx_thread_terminate.c ****     status =  TX_SUCCESS;
  95:ThreadX/common/src/tx_thread_terminate.c **** 
  96:ThreadX/common/src/tx_thread_terminate.c ****     /* Lockout interrupts while the thread is being terminated.  */
  97:ThreadX/common/src/tx_thread_terminate.c ****     TX_DISABLE
  98:ThreadX/common/src/tx_thread_terminate.c **** 
  99:ThreadX/common/src/tx_thread_terminate.c ****     /* Deactivate thread timer, if active.  */
 100:ThreadX/common/src/tx_thread_terminate.c ****     _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
  65              		.loc 1 100 0
  66 000a 4C30     		adds	r0, r0, #76
  67              	.LVL2:
ARM GAS  /tmp/cctLTyl2.s 			page 14


  68 000c FFF7FEFF 		bl	_tx_timer_system_deactivate
  69              	.LVL3:
 101:ThreadX/common/src/tx_thread_terminate.c **** 
 102:ThreadX/common/src/tx_thread_terminate.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 103:ThreadX/common/src/tx_thread_terminate.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_TERMINATE, thread_ptr, thread_ptr -> tx_thread_state, T
 104:ThreadX/common/src/tx_thread_terminate.c **** 
 105:ThreadX/common/src/tx_thread_terminate.c ****     /* Log this kernel call.  */
 106:ThreadX/common/src/tx_thread_terminate.c ****     TX_EL_THREAD_TERMINATE_INSERT
 107:ThreadX/common/src/tx_thread_terminate.c **** 
 108:ThreadX/common/src/tx_thread_terminate.c ****     /* Is the thread already terminated?  */
 109:ThreadX/common/src/tx_thread_terminate.c ****     if (thread_ptr -> tx_thread_state == TX_TERMINATED)
  70              		.loc 1 109 0
  71 0010 236B     		ldr	r3, [r4, #48]
  72 0012 022B     		cmp	r3, #2
  73 0014 4FD0     		beq	.L16
 110:ThreadX/common/src/tx_thread_terminate.c ****     {
 111:ThreadX/common/src/tx_thread_terminate.c **** 
 112:ThreadX/common/src/tx_thread_terminate.c ****         /* Restore interrupts.  */
 113:ThreadX/common/src/tx_thread_terminate.c ****         TX_RESTORE
 114:ThreadX/common/src/tx_thread_terminate.c **** 
 115:ThreadX/common/src/tx_thread_terminate.c ****         /* Return success since thread is already terminated.  */
 116:ThreadX/common/src/tx_thread_terminate.c ****         status =  TX_SUCCESS;
 117:ThreadX/common/src/tx_thread_terminate.c ****     }
 118:ThreadX/common/src/tx_thread_terminate.c **** 
 119:ThreadX/common/src/tx_thread_terminate.c ****     /* Check the specified thread's current status.  */
 120:ThreadX/common/src/tx_thread_terminate.c ****     else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
  74              		.loc 1 120 0
  75 0016 012B     		cmp	r3, #1
  76 0018 00F09580 		beq	.L4
 121:ThreadX/common/src/tx_thread_terminate.c ****     {
 122:ThreadX/common/src/tx_thread_terminate.c **** 
 123:ThreadX/common/src/tx_thread_terminate.c ****         /* Disable preemption.  */
 124:ThreadX/common/src/tx_thread_terminate.c ****         _tx_thread_preempt_disable++;
  77              		.loc 1 124 0
  78 001c 4B49     		ldr	r1, .L19
  79 001e 0A68     		ldr	r2, [r1]
  80 0020 0132     		adds	r2, r2, #1
  81 0022 0A60     		str	r2, [r1]
 125:ThreadX/common/src/tx_thread_terminate.c **** 
 126:ThreadX/common/src/tx_thread_terminate.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
 127:ThreadX/common/src/tx_thread_terminate.c **** 
 128:ThreadX/common/src/tx_thread_terminate.c ****         /* Pickup the entry/exit application callback routine.  */
 129:ThreadX/common/src/tx_thread_terminate.c ****         entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
  82              		.loc 1 129 0
  83 0024 D4F8AC60 		ldr	r6, [r4, #172]
  84              	.LVL4:
 130:ThreadX/common/src/tx_thread_terminate.c **** #endif
 131:ThreadX/common/src/tx_thread_terminate.c **** 
 132:ThreadX/common/src/tx_thread_terminate.c ****         /* Check to see if the thread is currently ready.  */
 133:ThreadX/common/src/tx_thread_terminate.c ****         if (thread_ptr -> tx_thread_state == TX_READY)
  85              		.loc 1 133 0
  86 0028 002B     		cmp	r3, #0
  87 002a 4ED1     		bne	.L5
 134:ThreadX/common/src/tx_thread_terminate.c ****         {
 135:ThreadX/common/src/tx_thread_terminate.c **** 
 136:ThreadX/common/src/tx_thread_terminate.c ****             /* Set the state to terminated.  */
 137:ThreadX/common/src/tx_thread_terminate.c ****             thread_ptr -> tx_thread_state =  TX_TERMINATED;
ARM GAS  /tmp/cctLTyl2.s 			page 15


  88              		.loc 1 137 0
  89 002c 0223     		movs	r3, #2
  90 002e 2363     		str	r3, [r4, #48]
 138:ThreadX/common/src/tx_thread_terminate.c **** 
 139:ThreadX/common/src/tx_thread_terminate.c ****             /* Thread state change.  */
 140:ThreadX/common/src/tx_thread_terminate.c ****             TX_THREAD_STATE_CHANGE(thread_ptr, TX_TERMINATED)
 141:ThreadX/common/src/tx_thread_terminate.c **** 
 142:ThreadX/common/src/tx_thread_terminate.c **** #ifdef TX_NOT_INTERRUPTABLE
 143:ThreadX/common/src/tx_thread_terminate.c **** 
 144:ThreadX/common/src/tx_thread_terminate.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
 145:ThreadX/common/src/tx_thread_terminate.c **** 
 146:ThreadX/common/src/tx_thread_terminate.c ****             /* Determine if an application callback routine is specified.  */
 147:ThreadX/common/src/tx_thread_terminate.c ****             if (entry_exit_notify != TX_NULL)
 148:ThreadX/common/src/tx_thread_terminate.c ****             {
 149:ThreadX/common/src/tx_thread_terminate.c **** 
 150:ThreadX/common/src/tx_thread_terminate.c ****                 /* Yes, notify application that this thread has exited!  */
 151:ThreadX/common/src/tx_thread_terminate.c ****                 (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 152:ThreadX/common/src/tx_thread_terminate.c ****             }
 153:ThreadX/common/src/tx_thread_terminate.c **** #endif
 154:ThreadX/common/src/tx_thread_terminate.c **** 
 155:ThreadX/common/src/tx_thread_terminate.c ****             /* Call actual non-interruptable thread suspension routine.  */
 156:ThreadX/common/src/tx_thread_terminate.c ****             _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
 157:ThreadX/common/src/tx_thread_terminate.c **** #else
 158:ThreadX/common/src/tx_thread_terminate.c **** 
 159:ThreadX/common/src/tx_thread_terminate.c ****             /* Set the suspending flag.  */
 160:ThreadX/common/src/tx_thread_terminate.c ****             thread_ptr -> tx_thread_suspending =  TX_TRUE;
  91              		.loc 1 160 0
  92 0030 0123     		movs	r3, #1
  93 0032 A363     		str	r3, [r4, #56]
 161:ThreadX/common/src/tx_thread_terminate.c **** 
 162:ThreadX/common/src/tx_thread_terminate.c ****             /* Setup for no timeout period.  */
 163:ThreadX/common/src/tx_thread_terminate.c ****             thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
  94              		.loc 1 163 0
  95 0034 0023     		movs	r3, #0
  96 0036 E364     		str	r3, [r4, #76]
 164:ThreadX/common/src/tx_thread_terminate.c **** 
 165:ThreadX/common/src/tx_thread_terminate.c ****             /* Disable preemption.  */
 166:ThreadX/common/src/tx_thread_terminate.c ****             _tx_thread_preempt_disable++;
  97              		.loc 1 166 0
  98 0038 0B68     		ldr	r3, [r1]
  99 003a 0133     		adds	r3, r3, #1
 100 003c 0B60     		str	r3, [r1]
 101              	.LVL5:
 102              	.LBB74:
 103              	.LBB75:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104              		.loc 2 562 0
 105              		.syntax unified
 106              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 107 003e 85F31088 		MSR  PRIMASK,r5
 108              	@ 0 "" 2
 109              	.LVL6:
 110              		.thumb
 111              		.syntax unified
 112              	.LBE75:
 113              	.LBE74:
 114              	.LBB76:
ARM GAS  /tmp/cctLTyl2.s 			page 16


 115              	.LBB77:
 116              	.LBB78:
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 117              		.loc 2 477 0
 118              		.syntax unified
 119              	@ 477 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 120 0042 EFF30583 		 MRS  r3,IPSR 
 121              	@ 0 "" 2
 122              		.thumb
 123              		.syntax unified
 124              	.LBE78:
 125              	.LBE77:
 167:ThreadX/common/src/tx_thread_terminate.c **** 
 168:ThreadX/common/src/tx_thread_terminate.c ****             /* Since the thread is currently ready, we don't need to
 169:ThreadX/common/src/tx_thread_terminate.c ****                worry about calling the suspend cleanup routine!  */
 170:ThreadX/common/src/tx_thread_terminate.c **** 
 171:ThreadX/common/src/tx_thread_terminate.c ****             /* Restore interrupts.  */
 172:ThreadX/common/src/tx_thread_terminate.c ****             TX_RESTORE
 173:ThreadX/common/src/tx_thread_terminate.c **** 
 174:ThreadX/common/src/tx_thread_terminate.c ****             /* Perform any additional activities for tool or user purpose.  */
 175:ThreadX/common/src/tx_thread_terminate.c ****             TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 126              		.loc 1 175 0
 127 0046 424A     		ldr	r2, .L19+4
 128 0048 1268     		ldr	r2, [r2]
 129              	.LVL7:
 130 004a 1343     		orrs	r3, r2, r3
 131              	.LVL8:
 132 004c 03D1     		bne	.L6
 133              		.loc 1 175 0 is_stmt 0 discriminator 1
 134 004e 414B     		ldr	r3, .L19+8
 135 0050 1B68     		ldr	r3, [r3]
 136 0052 A342     		cmp	r3, r4
 137 0054 32D0     		beq	.L17
 138              	.L6:
 139              	.LBB79:
 140              		.loc 1 175 0 discriminator 4
 141 0056 404B     		ldr	r3, .L19+12
 142 0058 1B68     		ldr	r3, [r3]
 143              	.LVL9:
 144 005a 13F0010F 		tst	r3, #1
 145 005e 0CD0     		beq	.L7
 146              	.LBB80:
 147              	.LBB81:
 148              	.LBB82:
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 149              		.loc 2 303 0 is_stmt 1
 150              		.syntax unified
 151              	@ 303 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 152 0060 EFF31483 		 MRS  r3,CONTROL 
 153              	@ 0 "" 2
 154              	.LVL10:
 155              		.thumb
 156              		.syntax unified
 157              	.LBE82:
 158              	.LBE81:
 159              		.loc 1 175 0
 160 0064 03F00403 		and	r3, r3, #4
ARM GAS  /tmp/cctLTyl2.s 			page 17


 161              	.LVL11:
 162              		.syntax unified
 163              	@ 175 "ThreadX/common/src/tx_thread_terminate.c" 1
 164 0068 B0EE400A 		VMOV.F32 s0, s0
 165              	@ 0 "" 2
 166              		.thumb
 167              		.syntax unified
 168 006c 2BB9     		cbnz	r3, .L7
 169              	.LBB83:
 170              	.LBB84:
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 171              		.loc 2 303 0
 172              		.syntax unified
 173              	@ 303 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 174 006e EFF31483 		 MRS  r3,CONTROL 
 175              	@ 0 "" 2
 176              	.LVL12:
 177              		.thumb
 178              		.syntax unified
 179              	.LBE84:
 180              	.LBE83:
 181              		.loc 1 175 0
 182 0072 23F00403 		bic	r3, r3, #4
 183              	.LVL13:
 184              	.LBB85:
 185              	.LBB86:
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 186              		.loc 2 309 0
 187              		.syntax unified
 188              	@ 309 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 189 0076 83F31488 		 MSR  CONTROL,r3
 190              	@ 0 "" 2
 191              	.LVL14:
 192              		.thumb
 193              		.syntax unified
 194              	.L7:
 195              	.LBE86:
 196              	.LBE85:
 197              	.LBE80:
 198              	.LBE79:
 199              	.LBE76:
 176:ThreadX/common/src/tx_thread_terminate.c **** 
 177:ThreadX/common/src/tx_thread_terminate.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
 178:ThreadX/common/src/tx_thread_terminate.c **** 
 179:ThreadX/common/src/tx_thread_terminate.c ****             /* Determine if an application callback routine is specified.  */
 180:ThreadX/common/src/tx_thread_terminate.c ****             if (entry_exit_notify != TX_NULL)
 200              		.loc 1 180 0
 201 007a 16B1     		cbz	r6, .L8
 181:ThreadX/common/src/tx_thread_terminate.c ****             {
 182:ThreadX/common/src/tx_thread_terminate.c **** 
 183:ThreadX/common/src/tx_thread_terminate.c ****                 /* Yes, notify application that this thread has exited!  */
 184:ThreadX/common/src/tx_thread_terminate.c ****                 (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 202              		.loc 1 184 0
 203 007c 0121     		movs	r1, #1
 204 007e 2046     		mov	r0, r4
 205 0080 B047     		blx	r6
 206              	.LVL15:
ARM GAS  /tmp/cctLTyl2.s 			page 18


 207              	.L8:
 185:ThreadX/common/src/tx_thread_terminate.c ****             }
 186:ThreadX/common/src/tx_thread_terminate.c **** #endif
 187:ThreadX/common/src/tx_thread_terminate.c **** 
 188:ThreadX/common/src/tx_thread_terminate.c ****             /* Call actual thread suspension routine.  */
 189:ThreadX/common/src/tx_thread_terminate.c ****             _tx_thread_system_suspend(thread_ptr);
 208              		.loc 1 189 0
 209 0082 2046     		mov	r0, r4
 210 0084 FFF7FEFF 		bl	_tx_thread_system_suspend
 211              	.LVL16:
 212              	.LBB92:
 213              	.LBB93:
 214              	.LBB94:
 215              	.LBB95:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 216              		.loc 2 539 0
 217              		.syntax unified
 218              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 219 0088 EFF31083 		MRS  r3, PRIMASK 
 220              	@ 0 "" 2
 221              		.thumb
 222              		.syntax unified
 223              	.LBE95:
 224              	.LBE94:
 225              		.loc 2 575 0
 226              		.syntax unified
 227              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 228 008c 72B6     		CPSID i
 229              	@ 0 "" 2
 230              		.thumb
 231              		.syntax unified
 232              	.L9:
 233              	.LVL17:
 234              	.LBE93:
 235              	.LBE92:
 236              	.LBB96:
 237              	.LBB97:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 238              		.loc 2 562 0
 239              		.syntax unified
 240              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 241 008e 83F31088 		MSR  PRIMASK,r3
 242              	@ 0 "" 2
 243              	.LVL18:
 244              		.thumb
 245              		.syntax unified
 246              	.LBE97:
 247              	.LBE96:
 190:ThreadX/common/src/tx_thread_terminate.c **** 
 191:ThreadX/common/src/tx_thread_terminate.c ****             /* Disable interrupts.  */
 192:ThreadX/common/src/tx_thread_terminate.c ****             TX_DISABLE
 193:ThreadX/common/src/tx_thread_terminate.c **** #endif
 194:ThreadX/common/src/tx_thread_terminate.c ****         }
 195:ThreadX/common/src/tx_thread_terminate.c ****         else
 196:ThreadX/common/src/tx_thread_terminate.c ****         {
 197:ThreadX/common/src/tx_thread_terminate.c **** 
 198:ThreadX/common/src/tx_thread_terminate.c ****             /* Change the state to terminated.  */
ARM GAS  /tmp/cctLTyl2.s 			page 19


 199:ThreadX/common/src/tx_thread_terminate.c ****             thread_ptr -> tx_thread_state =    TX_TERMINATED;
 200:ThreadX/common/src/tx_thread_terminate.c **** 
 201:ThreadX/common/src/tx_thread_terminate.c ****             /* Thread state change.  */
 202:ThreadX/common/src/tx_thread_terminate.c ****             TX_THREAD_STATE_CHANGE(thread_ptr, TX_TERMINATED)
 203:ThreadX/common/src/tx_thread_terminate.c **** 
 204:ThreadX/common/src/tx_thread_terminate.c ****             /* Set the suspending flag.  This prevents the thread from being
 205:ThreadX/common/src/tx_thread_terminate.c ****                resumed before the cleanup routine is executed.  */
 206:ThreadX/common/src/tx_thread_terminate.c ****             thread_ptr -> tx_thread_suspending =  TX_TRUE;
 207:ThreadX/common/src/tx_thread_terminate.c **** 
 208:ThreadX/common/src/tx_thread_terminate.c ****             /* Pickup the cleanup routine address.  */
 209:ThreadX/common/src/tx_thread_terminate.c ****             suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 210:ThreadX/common/src/tx_thread_terminate.c **** 
 211:ThreadX/common/src/tx_thread_terminate.c **** #ifndef TX_NOT_INTERRUPTABLE
 212:ThreadX/common/src/tx_thread_terminate.c **** 
 213:ThreadX/common/src/tx_thread_terminate.c ****             /* Pickup the suspension sequence number that is used later to verify that the
 214:ThreadX/common/src/tx_thread_terminate.c ****                cleanup is still necessary.  */
 215:ThreadX/common/src/tx_thread_terminate.c ****             suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 216:ThreadX/common/src/tx_thread_terminate.c **** #else
 217:ThreadX/common/src/tx_thread_terminate.c **** 
 218:ThreadX/common/src/tx_thread_terminate.c ****             /* When not interruptable is selected, the suspension sequence is not used - just set t
 219:ThreadX/common/src/tx_thread_terminate.c ****             suspension_sequence =  ((ULONG) 0);
 220:ThreadX/common/src/tx_thread_terminate.c **** #endif
 221:ThreadX/common/src/tx_thread_terminate.c **** 
 222:ThreadX/common/src/tx_thread_terminate.c **** #ifndef TX_NOT_INTERRUPTABLE
 223:ThreadX/common/src/tx_thread_terminate.c **** 
 224:ThreadX/common/src/tx_thread_terminate.c ****             /* Restore interrupts.  */
 225:ThreadX/common/src/tx_thread_terminate.c ****             TX_RESTORE
 226:ThreadX/common/src/tx_thread_terminate.c **** #endif
 227:ThreadX/common/src/tx_thread_terminate.c **** 
 228:ThreadX/common/src/tx_thread_terminate.c ****             /* Call any cleanup routines.  */
 229:ThreadX/common/src/tx_thread_terminate.c ****             if (suspend_cleanup != TX_NULL)
 230:ThreadX/common/src/tx_thread_terminate.c ****             {
 231:ThreadX/common/src/tx_thread_terminate.c **** 
 232:ThreadX/common/src/tx_thread_terminate.c ****                 /* Yes, there is a function to call.  */
 233:ThreadX/common/src/tx_thread_terminate.c ****                 (suspend_cleanup)(thread_ptr, suspension_sequence);
 234:ThreadX/common/src/tx_thread_terminate.c ****             }
 235:ThreadX/common/src/tx_thread_terminate.c **** 
 236:ThreadX/common/src/tx_thread_terminate.c **** #ifndef TX_NOT_INTERRUPTABLE
 237:ThreadX/common/src/tx_thread_terminate.c **** 
 238:ThreadX/common/src/tx_thread_terminate.c ****             /* Disable interrupts.  */
 239:ThreadX/common/src/tx_thread_terminate.c ****             TX_DISABLE
 240:ThreadX/common/src/tx_thread_terminate.c **** #endif
 241:ThreadX/common/src/tx_thread_terminate.c **** 
 242:ThreadX/common/src/tx_thread_terminate.c ****             /* Clear the suspending flag.  */
 243:ThreadX/common/src/tx_thread_terminate.c ****             thread_ptr -> tx_thread_suspending =  TX_FALSE;
 244:ThreadX/common/src/tx_thread_terminate.c **** 
 245:ThreadX/common/src/tx_thread_terminate.c **** #ifndef TX_NOT_INTERRUPTABLE
 246:ThreadX/common/src/tx_thread_terminate.c **** 
 247:ThreadX/common/src/tx_thread_terminate.c ****             /* Restore interrupts.  */
 248:ThreadX/common/src/tx_thread_terminate.c ****             TX_RESTORE
 249:ThreadX/common/src/tx_thread_terminate.c **** #endif
 250:ThreadX/common/src/tx_thread_terminate.c **** 
 251:ThreadX/common/src/tx_thread_terminate.c ****             /* Perform any additional activities for tool or user purpose.  */
 252:ThreadX/common/src/tx_thread_terminate.c ****             TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 253:ThreadX/common/src/tx_thread_terminate.c **** 
 254:ThreadX/common/src/tx_thread_terminate.c **** #ifndef TX_DISABLE_NOTIFY_CALLBACKS
 255:ThreadX/common/src/tx_thread_terminate.c **** 
ARM GAS  /tmp/cctLTyl2.s 			page 20


 256:ThreadX/common/src/tx_thread_terminate.c ****             /* Determine if an application callback routine is specified.  */
 257:ThreadX/common/src/tx_thread_terminate.c ****             if (entry_exit_notify != TX_NULL)
 258:ThreadX/common/src/tx_thread_terminate.c ****             {
 259:ThreadX/common/src/tx_thread_terminate.c **** 
 260:ThreadX/common/src/tx_thread_terminate.c ****                 /* Yes, notify application that this thread has exited!  */
 261:ThreadX/common/src/tx_thread_terminate.c ****                 (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 262:ThreadX/common/src/tx_thread_terminate.c ****             }
 263:ThreadX/common/src/tx_thread_terminate.c **** #endif
 264:ThreadX/common/src/tx_thread_terminate.c **** 
 265:ThreadX/common/src/tx_thread_terminate.c **** #ifndef TX_NOT_INTERRUPTABLE
 266:ThreadX/common/src/tx_thread_terminate.c **** 
 267:ThreadX/common/src/tx_thread_terminate.c ****             /* Disable interrupts.  */
 268:ThreadX/common/src/tx_thread_terminate.c ****             TX_DISABLE
 269:ThreadX/common/src/tx_thread_terminate.c **** #endif
 270:ThreadX/common/src/tx_thread_terminate.c ****         }
 271:ThreadX/common/src/tx_thread_terminate.c **** 
 272:ThreadX/common/src/tx_thread_terminate.c **** #ifndef TX_NOT_INTERRUPTABLE
 273:ThreadX/common/src/tx_thread_terminate.c **** 
 274:ThreadX/common/src/tx_thread_terminate.c ****         /* Restore interrupts.  */
 275:ThreadX/common/src/tx_thread_terminate.c ****         TX_RESTORE
 276:ThreadX/common/src/tx_thread_terminate.c **** #endif
 277:ThreadX/common/src/tx_thread_terminate.c **** 
 278:ThreadX/common/src/tx_thread_terminate.c ****         /* Determine if the application is using mutexes.  */
 279:ThreadX/common/src/tx_thread_terminate.c ****         if (_tx_thread_mutex_release != TX_NULL)
 248              		.loc 1 279 0
 249 0092 324B     		ldr	r3, .L19+16
 250              	.LVL19:
 251 0094 1B68     		ldr	r3, [r3]
 252 0096 0BB1     		cbz	r3, .L14
 280:ThreadX/common/src/tx_thread_terminate.c ****         {
 281:ThreadX/common/src/tx_thread_terminate.c **** 
 282:ThreadX/common/src/tx_thread_terminate.c ****             /* Yes, call the mutex release function via a function pointer that
 283:ThreadX/common/src/tx_thread_terminate.c ****                is setup during initialization.  */
 284:ThreadX/common/src/tx_thread_terminate.c ****             (_tx_thread_mutex_release)(thread_ptr);
 253              		.loc 1 284 0
 254 0098 2046     		mov	r0, r4
 255 009a 9847     		blx	r3
 256              	.LVL20:
 257              	.L14:
 258              	.LBB98:
 259              	.LBB99:
 260              	.LBB100:
 261              	.LBB101:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 262              		.loc 2 539 0
 263              		.syntax unified
 264              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 265 009c EFF31081 		MRS  r1, PRIMASK 
 266              	@ 0 "" 2
 267              		.thumb
 268              		.syntax unified
 269              	.LBE101:
 270              	.LBE100:
 271              		.loc 2 575 0
 272              		.syntax unified
 273              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 274 00a0 72B6     		CPSID i
ARM GAS  /tmp/cctLTyl2.s 			page 21


 275              	@ 0 "" 2
 276              		.thumb
 277              		.syntax unified
 278              	.LBE99:
 279              	.LBE98:
 285:ThreadX/common/src/tx_thread_terminate.c ****         }
 286:ThreadX/common/src/tx_thread_terminate.c **** 
 287:ThreadX/common/src/tx_thread_terminate.c **** #ifndef TX_NOT_INTERRUPTABLE
 288:ThreadX/common/src/tx_thread_terminate.c **** 
 289:ThreadX/common/src/tx_thread_terminate.c ****         /* Disable interrupts.  */
 290:ThreadX/common/src/tx_thread_terminate.c ****         TX_DISABLE
 291:ThreadX/common/src/tx_thread_terminate.c **** #endif
 292:ThreadX/common/src/tx_thread_terminate.c **** 
 293:ThreadX/common/src/tx_thread_terminate.c ****         /* Enable preemption.  */
 294:ThreadX/common/src/tx_thread_terminate.c ****         _tx_thread_preempt_disable--;
 280              		.loc 1 294 0
 281 00a2 2A4A     		ldr	r2, .L19
 282 00a4 1368     		ldr	r3, [r2]
 283 00a6 013B     		subs	r3, r3, #1
 284 00a8 1360     		str	r3, [r2]
 285              	.LBB102:
 286              	.LBB103:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 287              		.loc 2 562 0
 288              		.syntax unified
 289              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 290 00aa 81F31088 		MSR  PRIMASK,r1
 291              	@ 0 "" 2
 292              	.LVL21:
 293              		.thumb
 294              		.syntax unified
 295              	.L3:
 296              	.LBE103:
 297              	.LBE102:
 295:ThreadX/common/src/tx_thread_terminate.c **** 
 296:ThreadX/common/src/tx_thread_terminate.c ****         /* Restore interrupts.  */
 297:ThreadX/common/src/tx_thread_terminate.c ****         TX_RESTORE
 298:ThreadX/common/src/tx_thread_terminate.c ****     }
 299:ThreadX/common/src/tx_thread_terminate.c ****     else
 300:ThreadX/common/src/tx_thread_terminate.c ****     {
 301:ThreadX/common/src/tx_thread_terminate.c **** 
 302:ThreadX/common/src/tx_thread_terminate.c ****         /* Restore interrupts.  */
 303:ThreadX/common/src/tx_thread_terminate.c ****         TX_RESTORE
 304:ThreadX/common/src/tx_thread_terminate.c ****     }
 305:ThreadX/common/src/tx_thread_terminate.c **** 
 306:ThreadX/common/src/tx_thread_terminate.c ****     /* Check for preemption.  */
 307:ThreadX/common/src/tx_thread_terminate.c ****     _tx_thread_system_preempt_check();
 298              		.loc 1 307 0
 299 00ae FFF7FEFF 		bl	_tx_thread_system_preempt_check
 300              	.LVL22:
 308:ThreadX/common/src/tx_thread_terminate.c **** 
 309:ThreadX/common/src/tx_thread_terminate.c ****     /* Return completion status.  */
 310:ThreadX/common/src/tx_thread_terminate.c ****     return(status);
 311:ThreadX/common/src/tx_thread_terminate.c **** }
 301              		.loc 1 311 0
 302 00b2 0020     		movs	r0, #0
 303 00b4 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/cctLTyl2.s 			page 22


 304              	.LVL23:
 305              	.L16:
 306              	.LBB104:
 307              	.LBB105:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 308              		.loc 2 562 0
 309              		.syntax unified
 310              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 311 00b6 85F31088 		MSR  PRIMASK,r5
 312              	@ 0 "" 2
 313              	.LVL24:
 314              		.thumb
 315              		.syntax unified
 316              	.LBE105:
 317              	.LBE104:
 318 00ba F8E7     		b	.L3
 319              	.LVL25:
 320              	.L17:
 321              	.LBB106:
 322              	.LBB87:
 323              	.LBB88:
 324              	.LBB89:
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 325              		.loc 2 303 0
 326              		.syntax unified
 327              	@ 303 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 328 00bc EFF31483 		 MRS  r3,CONTROL 
 329              	@ 0 "" 2
 330              		.thumb
 331              		.syntax unified
 332              	.LBE89:
 333              	.LBE88:
 175:ThreadX/common/src/tx_thread_terminate.c **** 
 334              		.loc 1 175 0
 335 00c0 23F00403 		bic	r3, r3, #4
 336              	.LVL26:
 337              	.LBB90:
 338              	.LBB91:
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 339              		.loc 2 309 0
 340              		.syntax unified
 341              	@ 309 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 342 00c4 83F31488 		 MSR  CONTROL,r3
 343              	@ 0 "" 2
 344              		.thumb
 345              		.syntax unified
 346 00c8 D7E7     		b	.L7
 347              	.LVL27:
 348              	.L5:
 349              	.LBE91:
 350              	.LBE90:
 351              	.LBE87:
 352              	.LBE106:
 199:ThreadX/common/src/tx_thread_terminate.c **** 
 353              		.loc 1 199 0
 354 00ca 0223     		movs	r3, #2
 355 00cc 2363     		str	r3, [r4, #48]
ARM GAS  /tmp/cctLTyl2.s 			page 23


 206:ThreadX/common/src/tx_thread_terminate.c **** 
 356              		.loc 1 206 0
 357 00ce 0123     		movs	r3, #1
 358 00d0 A363     		str	r3, [r4, #56]
 209:ThreadX/common/src/tx_thread_terminate.c **** 
 359              		.loc 1 209 0
 360 00d2 A36E     		ldr	r3, [r4, #104]
 361              	.LVL28:
 215:ThreadX/common/src/tx_thread_terminate.c **** #else
 362              		.loc 1 215 0
 363 00d4 D4F8B010 		ldr	r1, [r4, #176]
 364              	.LVL29:
 365              	.LBB107:
 366              	.LBB108:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 367              		.loc 2 562 0
 368              		.syntax unified
 369              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 370 00d8 85F31088 		MSR  PRIMASK,r5
 371              	@ 0 "" 2
 372              	.LVL30:
 373              		.thumb
 374              		.syntax unified
 375              	.LBE108:
 376              	.LBE107:
 229:ThreadX/common/src/tx_thread_terminate.c ****             {
 377              		.loc 1 229 0
 378 00dc 0BB1     		cbz	r3, .L10
 233:ThreadX/common/src/tx_thread_terminate.c ****             }
 379              		.loc 1 233 0
 380 00de 2046     		mov	r0, r4
 381 00e0 9847     		blx	r3
 382              	.LVL31:
 383              	.L10:
 384              	.LBB109:
 385              	.LBB110:
 386              	.LBB111:
 387              	.LBB112:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 388              		.loc 2 539 0
 389              		.syntax unified
 390              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 391 00e2 EFF31083 		MRS  r3, PRIMASK 
 392              	@ 0 "" 2
 393              		.thumb
 394              		.syntax unified
 395              	.LBE112:
 396              	.LBE111:
 397              		.loc 2 575 0
 398              		.syntax unified
 399              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 400 00e6 72B6     		CPSID i
 401              	@ 0 "" 2
 402              		.thumb
 403              		.syntax unified
 404              	.LBE110:
 405              	.LBE109:
ARM GAS  /tmp/cctLTyl2.s 			page 24


 243:ThreadX/common/src/tx_thread_terminate.c **** 
 406              		.loc 1 243 0
 407 00e8 0022     		movs	r2, #0
 408 00ea A263     		str	r2, [r4, #56]
 409              	.LBB113:
 410              	.LBB114:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 411              		.loc 2 562 0
 412              		.syntax unified
 413              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 414 00ec 83F31088 		MSR  PRIMASK,r3
 415              	@ 0 "" 2
 416              		.thumb
 417              		.syntax unified
 418              	.LBE114:
 419              	.LBE113:
 420              	.LBB115:
 421              	.LBB116:
 422              	.LBB117:
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 423              		.loc 2 477 0
 424              		.syntax unified
 425              	@ 477 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 426 00f0 EFF30583 		 MRS  r3,IPSR 
 427              	@ 0 "" 2
 428              		.thumb
 429              		.syntax unified
 430              	.LBE117:
 431              	.LBE116:
 252:ThreadX/common/src/tx_thread_terminate.c **** 
 432              		.loc 1 252 0
 433 00f4 164A     		ldr	r2, .L19+4
 434 00f6 1268     		ldr	r2, [r2]
 435              	.LVL32:
 436 00f8 1343     		orrs	r3, r2, r3
 437              	.LVL33:
 438 00fa 03D1     		bne	.L11
 252:ThreadX/common/src/tx_thread_terminate.c **** 
 439              		.loc 1 252 0 is_stmt 0 discriminator 1
 440 00fc 154B     		ldr	r3, .L19+8
 441 00fe 1B68     		ldr	r3, [r3]
 442 0100 A342     		cmp	r3, r4
 443 0102 19D0     		beq	.L18
 444              	.L11:
 445              	.LBB118:
 252:ThreadX/common/src/tx_thread_terminate.c **** 
 446              		.loc 1 252 0 discriminator 4
 447 0104 144B     		ldr	r3, .L19+12
 448 0106 1B68     		ldr	r3, [r3]
 449              	.LVL34:
 450 0108 13F0010F 		tst	r3, #1
 451 010c 0CD0     		beq	.L12
 452              	.LBB119:
 453              	.LBB120:
 454              	.LBB121:
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 455              		.loc 2 303 0 is_stmt 1
ARM GAS  /tmp/cctLTyl2.s 			page 25


 456              		.syntax unified
 457              	@ 303 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 458 010e EFF31483 		 MRS  r3,CONTROL 
 459              	@ 0 "" 2
 460              	.LVL35:
 461              		.thumb
 462              		.syntax unified
 463              	.LBE121:
 464              	.LBE120:
 252:ThreadX/common/src/tx_thread_terminate.c **** 
 465              		.loc 1 252 0
 466 0112 03F00403 		and	r3, r3, #4
 467              	.LVL36:
 468              		.syntax unified
 469              	@ 252 "ThreadX/common/src/tx_thread_terminate.c" 1
 470 0116 B0EE400A 		VMOV.F32 s0, s0
 471              	@ 0 "" 2
 472              		.thumb
 473              		.syntax unified
 474 011a 2BB9     		cbnz	r3, .L12
 475              	.LBB122:
 476              	.LBB123:
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 477              		.loc 2 303 0
 478              		.syntax unified
 479              	@ 303 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 480 011c EFF31483 		 MRS  r3,CONTROL 
 481              	@ 0 "" 2
 482              	.LVL37:
 483              		.thumb
 484              		.syntax unified
 485              	.LBE123:
 486              	.LBE122:
 252:ThreadX/common/src/tx_thread_terminate.c **** 
 487              		.loc 1 252 0
 488 0120 23F00403 		bic	r3, r3, #4
 489              	.LVL38:
 490              	.LBB124:
 491              	.LBB125:
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 492              		.loc 2 309 0
 493              		.syntax unified
 494              	@ 309 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 495 0124 83F31488 		 MSR  CONTROL,r3
 496              	@ 0 "" 2
 497              	.LVL39:
 498              		.thumb
 499              		.syntax unified
 500              	.L12:
 501              	.LBE125:
 502              	.LBE124:
 503              	.LBE119:
 504              	.LBE118:
 505              	.LBE115:
 257:ThreadX/common/src/tx_thread_terminate.c ****             {
 506              		.loc 1 257 0
 507 0128 16B1     		cbz	r6, .L13
ARM GAS  /tmp/cctLTyl2.s 			page 26


 261:ThreadX/common/src/tx_thread_terminate.c ****             }
 508              		.loc 1 261 0
 509 012a 0121     		movs	r1, #1
 510 012c 2046     		mov	r0, r4
 511 012e B047     		blx	r6
 512              	.LVL40:
 513              	.L13:
 514              	.LBB131:
 515              	.LBB132:
 516              	.LBB133:
 517              	.LBB134:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 518              		.loc 2 539 0
 519              		.syntax unified
 520              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 521 0130 EFF31083 		MRS  r3, PRIMASK 
 522              	@ 0 "" 2
 523              		.thumb
 524              		.syntax unified
 525              	.LBE134:
 526              	.LBE133:
 527              		.loc 2 575 0
 528              		.syntax unified
 529              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 530 0134 72B6     		CPSID i
 531              	@ 0 "" 2
 532              		.thumb
 533              		.syntax unified
 534 0136 AAE7     		b	.L9
 535              	.L18:
 536              	.LBE132:
 537              	.LBE131:
 538              	.LBB135:
 539              	.LBB126:
 540              	.LBB127:
 541              	.LBB128:
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 542              		.loc 2 303 0
 543              		.syntax unified
 544              	@ 303 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 545 0138 EFF31483 		 MRS  r3,CONTROL 
 546              	@ 0 "" 2
 547              		.thumb
 548              		.syntax unified
 549              	.LBE128:
 550              	.LBE127:
 252:ThreadX/common/src/tx_thread_terminate.c **** 
 551              		.loc 1 252 0
 552 013c 23F00403 		bic	r3, r3, #4
 553              	.LVL41:
 554              	.LBB129:
 555              	.LBB130:
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 556              		.loc 2 309 0
 557              		.syntax unified
 558              	@ 309 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 559 0140 83F31488 		 MSR  CONTROL,r3
ARM GAS  /tmp/cctLTyl2.s 			page 27


 560              	@ 0 "" 2
 561              		.thumb
 562              		.syntax unified
 563 0144 F0E7     		b	.L12
 564              	.LVL42:
 565              	.L4:
 566              	.LBE130:
 567              	.LBE129:
 568              	.LBE126:
 569              	.LBE135:
 570              	.LBB136:
 571              	.LBB137:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 572              		.loc 2 562 0
 573              		.syntax unified
 574              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 575 0146 85F31088 		MSR  PRIMASK,r5
 576              	@ 0 "" 2
 577              		.thumb
 578              		.syntax unified
 579 014a B0E7     		b	.L3
 580              	.L20:
 581              		.align	2
 582              	.L19:
 583 014c 00000000 		.word	_tx_thread_preempt_disable
 584 0150 00000000 		.word	_tx_thread_system_state
 585 0154 00000000 		.word	_tx_thread_current_ptr
 586 0158 34EF00E0 		.word	-536809676
 587 015c 00000000 		.word	_tx_thread_mutex_release
 588              	.LBE137:
 589              	.LBE136:
 590              		.cfi_endproc
 591              	.LFE8:
 593              		.text
 594              	.Letext0:
 595              		.file 3 "/usr/include/newlib/sys/lock.h"
 596              		.file 4 "/usr/include/newlib/sys/_types.h"
 597              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 598              		.file 6 "/usr/include/newlib/sys/reent.h"
 599              		.file 7 "/usr/include/newlib/stdlib.h"
 600              		.file 8 "ThreadX/common/inc/tx_api.h"
 601              		.file 9 "ThreadX/common/inc/tx_thread.h"
 602              		.file 10 "ThreadX/common/inc/tx_timer.h"
ARM GAS  /tmp/cctLTyl2.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_thread_terminate.c
     /tmp/cctLTyl2.s:18     .text._tx_thread_terminate:0000000000000000 $t
     /tmp/cctLTyl2.s:25     .text._tx_thread_terminate:0000000000000000 _tx_thread_terminate
     /tmp/cctLTyl2.s:583    .text._tx_thread_terminate:000000000000014c $d

UNDEFINED SYMBOLS
_tx_timer_system_deactivate
_tx_thread_system_suspend
_tx_thread_system_preempt_check
_tx_thread_preempt_disable
_tx_thread_system_state
_tx_thread_current_ptr
_tx_thread_mutex_release
