ARM GAS  /tmp/ccKsskGJ.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tx_thread_create.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._tx_thread_create,"ax",%progbits
  18              		.align	1
  19              		.global	_tx_thread_create
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_tx_thread_create:
  26              	.LFB8:
  27              		.file 1 "ThreadX/common/src/tx_thread_create.c"
   1:ThreadX/common/src/tx_thread_create.c **** /**************************************************************************/
   2:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
   3:ThreadX/common/src/tx_thread_create.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
   5:ThreadX/common/src/tx_thread_create.c **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/common/src/tx_thread_create.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/common/src/tx_thread_create.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/common/src/tx_thread_create.c **** /*       and in the root directory of this software.                      */
   9:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  10:ThreadX/common/src/tx_thread_create.c **** /**************************************************************************/
  11:ThreadX/common/src/tx_thread_create.c **** 
  12:ThreadX/common/src/tx_thread_create.c **** 
  13:ThreadX/common/src/tx_thread_create.c **** /**************************************************************************/
  14:ThreadX/common/src/tx_thread_create.c **** /**************************************************************************/
  15:ThreadX/common/src/tx_thread_create.c **** /**                                                                       */
  16:ThreadX/common/src/tx_thread_create.c **** /** ThreadX Component                                                     */
  17:ThreadX/common/src/tx_thread_create.c **** /**                                                                       */
  18:ThreadX/common/src/tx_thread_create.c **** /**   Thread                                                              */
  19:ThreadX/common/src/tx_thread_create.c **** /**                                                                       */
  20:ThreadX/common/src/tx_thread_create.c **** /**************************************************************************/
  21:ThreadX/common/src/tx_thread_create.c **** /**************************************************************************/
  22:ThreadX/common/src/tx_thread_create.c **** 
  23:ThreadX/common/src/tx_thread_create.c **** #define TX_SOURCE_CODE
  24:ThreadX/common/src/tx_thread_create.c **** 
  25:ThreadX/common/src/tx_thread_create.c **** 
  26:ThreadX/common/src/tx_thread_create.c **** /* Include necessary system files.  */
  27:ThreadX/common/src/tx_thread_create.c **** 
  28:ThreadX/common/src/tx_thread_create.c **** #include "tx_api.h"
  29:ThreadX/common/src/tx_thread_create.c **** #include "tx_trace.h"
  30:ThreadX/common/src/tx_thread_create.c **** #include "tx_thread.h"
  31:ThreadX/common/src/tx_thread_create.c **** #include "tx_initialize.h"
ARM GAS  /tmp/ccKsskGJ.s 			page 2


  32:ThreadX/common/src/tx_thread_create.c **** 
  33:ThreadX/common/src/tx_thread_create.c **** 
  34:ThreadX/common/src/tx_thread_create.c **** /**************************************************************************/
  35:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  36:ThreadX/common/src/tx_thread_create.c **** /*  FUNCTION                                               RELEASE        */
  37:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  38:ThreadX/common/src/tx_thread_create.c **** /*    _tx_thread_create                                   PORTABLE C      */
  39:ThreadX/common/src/tx_thread_create.c **** /*                                                           6.1.8        */
  40:ThreadX/common/src/tx_thread_create.c **** /*  AUTHOR                                                                */
  41:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  42:ThreadX/common/src/tx_thread_create.c **** /*    William E. Lamie, Microsoft Corporation                             */
  43:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  44:ThreadX/common/src/tx_thread_create.c **** /*  DESCRIPTION                                                           */
  45:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  46:ThreadX/common/src/tx_thread_create.c **** /*    This function creates a thread and places it on the list of created */
  47:ThreadX/common/src/tx_thread_create.c **** /*    threads.                                                            */
  48:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  49:ThreadX/common/src/tx_thread_create.c **** /*  INPUT                                                                 */
  50:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  51:ThreadX/common/src/tx_thread_create.c **** /*    thread_ptr                            Thread control block pointer  */
  52:ThreadX/common/src/tx_thread_create.c **** /*    name                                  Pointer to thread name string */
  53:ThreadX/common/src/tx_thread_create.c **** /*    entry_function                        Entry function of the thread  */
  54:ThreadX/common/src/tx_thread_create.c **** /*    entry_input                           32-bit input value to thread  */
  55:ThreadX/common/src/tx_thread_create.c **** /*    stack_start                           Pointer to start of stack     */
  56:ThreadX/common/src/tx_thread_create.c **** /*    stack_size                            Stack size in bytes           */
  57:ThreadX/common/src/tx_thread_create.c **** /*    priority                              Priority of thread            */
  58:ThreadX/common/src/tx_thread_create.c **** /*                                            (default 0-31)              */
  59:ThreadX/common/src/tx_thread_create.c **** /*    preempt_threshold                     Preemption threshold          */
  60:ThreadX/common/src/tx_thread_create.c **** /*    time_slice                            Thread time-slice value       */
  61:ThreadX/common/src/tx_thread_create.c **** /*    auto_start                            Automatic start selection     */
  62:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  63:ThreadX/common/src/tx_thread_create.c **** /*  OUTPUT                                                                */
  64:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  65:ThreadX/common/src/tx_thread_create.c **** /*    return status                         Thread create return status   */
  66:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  67:ThreadX/common/src/tx_thread_create.c **** /*  CALLS                                                                 */
  68:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  69:ThreadX/common/src/tx_thread_create.c **** /*    _tx_thread_stack_build                Build initial thread stack    */
  70:ThreadX/common/src/tx_thread_create.c **** /*    _tx_thread_system_resume              Resume automatic start thread */
  71:ThreadX/common/src/tx_thread_create.c **** /*    _tx_thread_system_ni_resume           Noninterruptable resume thread*/
  72:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  73:ThreadX/common/src/tx_thread_create.c **** /*  CALLED BY                                                             */
  74:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  75:ThreadX/common/src/tx_thread_create.c **** /*    Application Code                                                    */
  76:ThreadX/common/src/tx_thread_create.c **** /*    _tx_timer_initialize                  Create system timer thread    */
  77:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  78:ThreadX/common/src/tx_thread_create.c **** /*  RELEASE HISTORY                                                       */
  79:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  80:ThreadX/common/src/tx_thread_create.c **** /*    DATE              NAME                      DESCRIPTION             */
  81:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  82:ThreadX/common/src/tx_thread_create.c **** /*  05-19-2020      William E. Lamie        Initial Version 6.0           */
  83:ThreadX/common/src/tx_thread_create.c **** /*  09-30-2020      William E. Lamie        Modified comment(s), and      */
  84:ThreadX/common/src/tx_thread_create.c **** /*                                            changed stack calculations  */
  85:ThreadX/common/src/tx_thread_create.c **** /*                                            to use ALIGN_TYPE integers, */
  86:ThreadX/common/src/tx_thread_create.c **** /*                                            resulting in version 6.1    */
  87:ThreadX/common/src/tx_thread_create.c **** /*  06-02-2021      William E. Lamie        Modified comment(s), and      */
  88:ThreadX/common/src/tx_thread_create.c **** /*                                            supported TX_MISRA_ENABLE,  */
ARM GAS  /tmp/ccKsskGJ.s 			page 3


  89:ThreadX/common/src/tx_thread_create.c **** /*  08-02-2021      Scott Larson            Removed unneeded cast,        */
  90:ThreadX/common/src/tx_thread_create.c **** /*                                            resulting in version 6.1.8  */
  91:ThreadX/common/src/tx_thread_create.c **** /*                                                                        */
  92:ThreadX/common/src/tx_thread_create.c **** /**************************************************************************/
  93:ThreadX/common/src/tx_thread_create.c **** UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), UL
  94:ThreadX/common/src/tx_thread_create.c ****                             VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_thresh
  95:ThreadX/common/src/tx_thread_create.c ****                             ULONG time_slice, UINT auto_start)
  96:ThreadX/common/src/tx_thread_create.c **** {
  28              		.loc 1 96 0
  29              		.cfi_startproc
  30              		@ args = 24, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 40
  36              		.cfi_offset 3, -40
  37              		.cfi_offset 4, -36
  38              		.cfi_offset 5, -32
  39              		.cfi_offset 6, -28
  40              		.cfi_offset 7, -24
  41              		.cfi_offset 8, -20
  42              		.cfi_offset 9, -16
  43              		.cfi_offset 10, -12
  44              		.cfi_offset 11, -8
  45              		.cfi_offset 14, -4
  46 0004 0446     		mov	r4, r0
  47 0006 8B46     		mov	fp, r1
  48 0008 9246     		mov	r10, r2
  49 000a 9946     		mov	r9, r3
  50 000c 0A9D     		ldr	r5, [sp, #40]
  51 000e 0B9E     		ldr	r6, [sp, #44]
  52 0010 DDF83080 		ldr	r8, [sp, #48]
  53 0014 0E9F     		ldr	r7, [sp, #56]
  54              	.LVL1:
  97:ThreadX/common/src/tx_thread_create.c **** 
  98:ThreadX/common/src/tx_thread_create.c **** TX_INTERRUPT_SAVE_AREA
  99:ThreadX/common/src/tx_thread_create.c **** 
 100:ThreadX/common/src/tx_thread_create.c **** TX_THREAD               *next_thread;
 101:ThreadX/common/src/tx_thread_create.c **** TX_THREAD               *previous_thread;
 102:ThreadX/common/src/tx_thread_create.c **** TX_THREAD               *saved_thread_ptr;
 103:ThreadX/common/src/tx_thread_create.c **** UINT                    saved_threshold =  ((UINT) 0);
 104:ThreadX/common/src/tx_thread_create.c **** UCHAR                   *temp_ptr;
 105:ThreadX/common/src/tx_thread_create.c **** 
 106:ThreadX/common/src/tx_thread_create.c **** #ifdef TX_ENABLE_STACK_CHECKING
 107:ThreadX/common/src/tx_thread_create.c **** ALIGN_TYPE              new_stack_start;
 108:ThreadX/common/src/tx_thread_create.c **** ALIGN_TYPE              updated_stack_start;
 109:ThreadX/common/src/tx_thread_create.c **** #endif
 110:ThreadX/common/src/tx_thread_create.c **** 
 111:ThreadX/common/src/tx_thread_create.c **** #ifndef TX_DISABLE_STACK_FILLING
 112:ThreadX/common/src/tx_thread_create.c **** 
 113:ThreadX/common/src/tx_thread_create.c ****     /* Set the thread stack to a pattern prior to creating the initial
 114:ThreadX/common/src/tx_thread_create.c ****        stack frame.  This pattern is used by the stack checking routines
 115:ThreadX/common/src/tx_thread_create.c ****        to see how much has been used.  */
 116:ThreadX/common/src/tx_thread_create.c ****     TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
  55              		.loc 1 116 0
  56 0016 3246     		mov	r2, r6
ARM GAS  /tmp/ccKsskGJ.s 			page 4


  57              	.LVL2:
  58 0018 EF21     		movs	r1, #239
  59              	.LVL3:
  60 001a 2846     		mov	r0, r5
  61              	.LVL4:
  62 001c FFF7FEFF 		bl	memset
  63              	.LVL5:
 117:ThreadX/common/src/tx_thread_create.c **** #endif
 118:ThreadX/common/src/tx_thread_create.c **** 
 119:ThreadX/common/src/tx_thread_create.c **** #ifdef TX_ENABLE_STACK_CHECKING
 120:ThreadX/common/src/tx_thread_create.c **** 
 121:ThreadX/common/src/tx_thread_create.c ****     /* Ensure that there are two ULONG of 0xEF patterns at the top and
 122:ThreadX/common/src/tx_thread_create.c ****        bottom of the thread's stack. This will be used to check for stack
 123:ThreadX/common/src/tx_thread_create.c ****        overflow conditions during run-time.  */
 124:ThreadX/common/src/tx_thread_create.c ****     stack_size =  ((stack_size/(sizeof(ULONG))) * (sizeof(ULONG))) - (sizeof(ULONG));
 125:ThreadX/common/src/tx_thread_create.c **** 
 126:ThreadX/common/src/tx_thread_create.c ****     /* Ensure the starting stack address is evenly aligned.  */
 127:ThreadX/common/src/tx_thread_create.c **** #ifdef TX_MISRA_ENABLE
 128:ThreadX/common/src/tx_thread_create.c ****     new_stack_start = TX_POINTER_TO_ULONG_CONVERT(stack_start);
 129:ThreadX/common/src/tx_thread_create.c **** #else
 130:ThreadX/common/src/tx_thread_create.c ****     new_stack_start =  TX_POINTER_TO_ALIGN_TYPE_CONVERT(stack_start);
 131:ThreadX/common/src/tx_thread_create.c **** #endif /* TX_MISRA_ENABLE */
 132:ThreadX/common/src/tx_thread_create.c ****     updated_stack_start =  (((new_stack_start) + ((sizeof(ULONG)) - ((ULONG) 1)) ) & (~((sizeof(ULO
 133:ThreadX/common/src/tx_thread_create.c **** 
 134:ThreadX/common/src/tx_thread_create.c ****     /* Determine if the starting stack address is different.  */
 135:ThreadX/common/src/tx_thread_create.c ****     if (new_stack_start != updated_stack_start)
 136:ThreadX/common/src/tx_thread_create.c ****     {
 137:ThreadX/common/src/tx_thread_create.c **** 
 138:ThreadX/common/src/tx_thread_create.c ****         /* Yes, subtract another ULONG from the size to avoid going past the stack area.  */
 139:ThreadX/common/src/tx_thread_create.c ****         stack_size =  stack_size - (sizeof(ULONG));
 140:ThreadX/common/src/tx_thread_create.c ****     }
 141:ThreadX/common/src/tx_thread_create.c **** 
 142:ThreadX/common/src/tx_thread_create.c ****     /* Update the starting stack pointer.  */
 143:ThreadX/common/src/tx_thread_create.c **** #ifdef TX_MISRA_ENABLE
 144:ThreadX/common/src/tx_thread_create.c ****     stack_start = TX_ULONG_TO_POINTER_CONVERT(updated_stack_start);
 145:ThreadX/common/src/tx_thread_create.c **** #else
 146:ThreadX/common/src/tx_thread_create.c ****     stack_start =  TX_ALIGN_TYPE_TO_POINTER_CONVERT(updated_stack_start);
 147:ThreadX/common/src/tx_thread_create.c **** #endif /* TX_MISRA_ENABLE */
 148:ThreadX/common/src/tx_thread_create.c **** #endif
 149:ThreadX/common/src/tx_thread_create.c **** 
 150:ThreadX/common/src/tx_thread_create.c ****     /* Prepare the thread control block prior to placing it on the created
 151:ThreadX/common/src/tx_thread_create.c ****        list.  */
 152:ThreadX/common/src/tx_thread_create.c **** 
 153:ThreadX/common/src/tx_thread_create.c ****     /* Initialize thread control block to all zeros.  */
 154:ThreadX/common/src/tx_thread_create.c ****     TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
  64              		.loc 1 154 0
  65 0020 B422     		movs	r2, #180
  66 0022 0021     		movs	r1, #0
  67 0024 2046     		mov	r0, r4
  68 0026 FFF7FEFF 		bl	memset
  69              	.LVL6:
 155:ThreadX/common/src/tx_thread_create.c **** 
 156:ThreadX/common/src/tx_thread_create.c ****     /* Place the supplied parameters into the thread's control block.  */
 157:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_name =              name_ptr;
  70              		.loc 1 157 0
  71 002a C4F828B0 		str	fp, [r4, #40]
 158:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_entry =             entry_function;
ARM GAS  /tmp/ccKsskGJ.s 			page 5


  72              		.loc 1 158 0
  73 002e C4F844A0 		str	r10, [r4, #68]
 159:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_entry_parameter =   entry_input;
  74              		.loc 1 159 0
  75 0032 C4F84890 		str	r9, [r4, #72]
 160:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_stack_start =       stack_start;
  76              		.loc 1 160 0
  77 0036 E560     		str	r5, [r4, #12]
 161:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_stack_size =        stack_size;
  78              		.loc 1 161 0
  79 0038 6661     		str	r6, [r4, #20]
 162:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_priority =          priority;
  80              		.loc 1 162 0
  81 003a C4F82C80 		str	r8, [r4, #44]
 163:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_user_priority =     priority;
  82              		.loc 1 163 0
  83 003e C4F89480 		str	r8, [r4, #148]
 164:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_time_slice =        time_slice;
  84              		.loc 1 164 0
  85 0042 A761     		str	r7, [r4, #24]
 165:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_new_time_slice =    time_slice;
  86              		.loc 1 165 0
  87 0044 E761     		str	r7, [r4, #28]
 166:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
  88              		.loc 1 166 0
  89 0046 2023     		movs	r3, #32
  90 0048 C4F89C30 		str	r3, [r4, #156]
  91              	.LVL7:
 167:ThreadX/common/src/tx_thread_create.c **** 
 168:ThreadX/common/src/tx_thread_create.c ****     /* Calculate the end of the thread's stack area.  */
 169:ThreadX/common/src/tx_thread_create.c ****     temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 170:ThreadX/common/src/tx_thread_create.c ****     temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
  92              		.loc 1 170 0
  93 004c 013E     		subs	r6, r6, #1
  94 004e 3544     		add	r5, r5, r6
  95              	.LVL8:
 171:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
  96              		.loc 1 171 0
  97 0050 2561     		str	r5, [r4, #16]
 172:ThreadX/common/src/tx_thread_create.c **** 
 173:ThreadX/common/src/tx_thread_create.c **** #ifndef TX_DISABLE_PREEMPTION_THRESHOLD
 174:ThreadX/common/src/tx_thread_create.c **** 
 175:ThreadX/common/src/tx_thread_create.c ****     /* Preemption-threshold is enabled, setup accordingly.  */
 176:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
  98              		.loc 1 176 0
  99 0052 0D9B     		ldr	r3, [sp, #52]
 100 0054 E363     		str	r3, [r4, #60]
 177:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 101              		.loc 1 177 0
 102 0056 C4F89830 		str	r3, [r4, #152]
 178:ThreadX/common/src/tx_thread_create.c **** #else
 179:ThreadX/common/src/tx_thread_create.c **** 
 180:ThreadX/common/src/tx_thread_create.c ****     /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
 181:ThreadX/common/src/tx_thread_create.c ****     if (priority != preempt_threshold)
 182:ThreadX/common/src/tx_thread_create.c ****     {
 183:ThreadX/common/src/tx_thread_create.c **** 
 184:ThreadX/common/src/tx_thread_create.c ****         /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
ARM GAS  /tmp/ccKsskGJ.s 			page 6


 185:ThreadX/common/src/tx_thread_create.c ****            disable all preemption.  */
 186:ThreadX/common/src/tx_thread_create.c ****         thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 187:ThreadX/common/src/tx_thread_create.c ****         thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 188:ThreadX/common/src/tx_thread_create.c ****     }
 189:ThreadX/common/src/tx_thread_create.c ****     else
 190:ThreadX/common/src/tx_thread_create.c ****     {
 191:ThreadX/common/src/tx_thread_create.c **** 
 192:ThreadX/common/src/tx_thread_create.c ****         /* Preemption-threshold is not specified, just setup with the priority.  */
 193:ThreadX/common/src/tx_thread_create.c ****         thread_ptr -> tx_thread_preempt_threshold =       priority;
 194:ThreadX/common/src/tx_thread_create.c ****         thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 195:ThreadX/common/src/tx_thread_create.c ****     }
 196:ThreadX/common/src/tx_thread_create.c **** #endif
 197:ThreadX/common/src/tx_thread_create.c **** 
 198:ThreadX/common/src/tx_thread_create.c ****     /* Now fill in the values that are required for thread initialization.  */
 199:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 103              		.loc 1 199 0
 104 005a 0323     		movs	r3, #3
 105 005c 2363     		str	r3, [r4, #48]
 200:ThreadX/common/src/tx_thread_create.c **** 
 201:ThreadX/common/src/tx_thread_create.c ****     /* Setup the necessary fields in the thread timer block.  */
 202:ThreadX/common/src/tx_thread_create.c ****     TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 106              		.loc 1 202 0
 107 005e 2C4B     		ldr	r3, .L10
 108 0060 6365     		str	r3, [r4, #84]
 109 0062 A465     		str	r4, [r4, #88]
 203:ThreadX/common/src/tx_thread_create.c **** 
 204:ThreadX/common/src/tx_thread_create.c ****     /* Perform any additional thread setup activities for tool or user purpose.  */
 205:ThreadX/common/src/tx_thread_create.c ****     TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)
 206:ThreadX/common/src/tx_thread_create.c **** 
 207:ThreadX/common/src/tx_thread_create.c ****     /* Call the target specific stack frame building routine to build the
 208:ThreadX/common/src/tx_thread_create.c ****        thread's initial stack and to setup the actual stack pointer in the
 209:ThreadX/common/src/tx_thread_create.c ****        control block.  */
 210:ThreadX/common/src/tx_thread_create.c ****     _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 110              		.loc 1 210 0
 111 0064 2B49     		ldr	r1, .L10+4
 112 0066 2046     		mov	r0, r4
 113 0068 FFF7FEFF 		bl	_tx_thread_stack_build
 114              	.LVL9:
 115              	.LBB20:
 116              	.LBB21:
 117              	.LBB22:
 118              	.LBB23:
 119              		.file 2 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h"
   1:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
ARM GAS  /tmp/ccKsskGJ.s 			page 7


  15:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.10       */
  30:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  60:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  61:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  62:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  63:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  64:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  65:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  66:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  67:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  69:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  70:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  71:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
ARM GAS  /tmp/ccKsskGJ.s 			page 8


  72:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  73:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  74:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  75:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  77:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  78:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  80:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  81:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  83:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  84:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  85:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  86:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  87:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  89:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  90:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  91:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  92:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  93:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
  94:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  95:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
  97:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
  98:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
  99:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 100:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 102:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 103:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 104:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 105:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 106:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 108:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 109:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 110:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 111:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 112:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 113:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 114:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 115:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 116:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 117:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 118:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 119:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 120:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 121:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 122:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 123:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 124:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 126:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 127:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 128:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
ARM GAS  /tmp/ccKsskGJ.s 			page 9


 129:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 130:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 131:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 132:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 133:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 134:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 135:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 136:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 137:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 138:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 139:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 140:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 141:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 142:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 143:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 144:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 145:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 146:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 147:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 148:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 149:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 150:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 151:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 153:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 154:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 155:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 156:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 157:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0x0a800024)
 158:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 159:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 160:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** */
 161:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 162:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 163:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 164:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((ULONG *) 0xE0001004)
 165:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 166:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 167:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 168:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 169:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 170:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 171:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 172:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 173:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 176:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 177:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 178:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 179:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 180:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 181:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 182:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 184:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 185:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccKsskGJ.s 			page 10


 186:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 187:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 188:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 189:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 191:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 192:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 194:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 196:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 197:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 198:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 199:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 200:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 201:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 202:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 203:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 204:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 205:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 206:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 208:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 209:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 210:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 211:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 212:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 213:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 214:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 215:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 216:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 218:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 220:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 221:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 222:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 223:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 224:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 225:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 226:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 227:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 228:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 229:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 230:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 231:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 232:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 233:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 234:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 235:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 237:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 238:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 239:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 240:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 241:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 242:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  /tmp/ccKsskGJ.s 			page 11


 243:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 244:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 245:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 246:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 247:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 248:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 249:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 250:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 253:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 254:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 256:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 257:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 258:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 259:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 260:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 261:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 262:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 265:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 266:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 267:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 268:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 269:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 270:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 271:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 272:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 273:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 274:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 276:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 277:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 278:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 279:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 280:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 281:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 282:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 283:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 284:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 285:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 286:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 288:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 289:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 290:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 291:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 292:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 293:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 294:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 295:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 296:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 297:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 298:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
ARM GAS  /tmp/ccKsskGJ.s 			page 12


 300:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 301:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 302:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 303:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 304:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 305:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 306:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 307:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 308:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 309:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 310:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 311:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 312:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 313:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 314:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 315:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 316:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 317:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 318:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 319:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 320:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 321:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 322:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 325:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 326:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 327:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 328:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 329:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 330:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 331:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 333:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 334:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 335:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 337:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 338:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 339:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 340:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 341:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 342:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 343:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 345:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 346:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 347:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 348:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 349:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 350:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 351:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 352:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 353:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 354:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 355:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 356:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
ARM GAS  /tmp/ccKsskGJ.s 			page 13


 357:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 358:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 359:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 360:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 361:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 362:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 363:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 364:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 365:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 366:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 367:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 368:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 369:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 370:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 371:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 372:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 373:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 374:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 375:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 376:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 377:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 378:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 379:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 380:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 381:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((ULONG *) 0xE000EF34);  
 382:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 383:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 384:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 385:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 386:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 387:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 388:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 389:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 390:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 391:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 392:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 393:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 394:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 395:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 396:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 397:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 398:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 399:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 400:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 401:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 402:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 403:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 404:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 405:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 406:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 407:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 408:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 409:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 410:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 411:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 412:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 413:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
ARM GAS  /tmp/ccKsskGJ.s 			page 14


 414:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 415:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 416:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 417:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 418:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 419:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 420:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 421:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 422:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 423:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 424:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 425:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 426:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 427:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 428:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 429:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 430:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 431:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 432:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 433:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 434:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 435:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 436:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 437:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 438:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 439:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 440:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 441:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 442:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 443:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 444:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 445:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 446:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 447:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 448:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 449:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 450:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 452:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 453:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 454:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 455:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 456:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 457:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 458:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 459:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 460:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 461:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 463:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 464:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 465:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 466:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 467:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 468:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 469:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 470:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
ARM GAS  /tmp/ccKsskGJ.s 			page 15


 471:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 472:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 473:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 475:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 476:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 478:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 479:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 480:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 482:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 483:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 484:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 485:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 486:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 487:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 488:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 489:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 490:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 491:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 492:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 493:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 494:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 496:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 497:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 498:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 499:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 500:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 502:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 503:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 504:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 505:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 506:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 507:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 509:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 510:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 511:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 512:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 514:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 515:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 516:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 517:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 518:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 519:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 520:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 521:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 522:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 523:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 524:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 526:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
ARM GAS  /tmp/ccKsskGJ.s 			page 16


 528:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 529:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 530:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 531:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 532:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 533:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 534:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 535:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 536:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 537:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 538:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 120              		.loc 2 539 0
 121              		.syntax unified
 122              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 123 006c EFF31081 		MRS  r1, PRIMASK 
 124              	@ 0 "" 2
 125              		.thumb
 126              		.syntax unified
 127              	.LBE23:
 128              	.LBE22:
 540:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 541:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 542:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 543:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 544:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 545:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 546:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 548:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 549:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 550:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 551:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 552:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 553:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 554:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 555:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 557:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 558:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 559:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 560:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 561:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 563:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 564:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** }
 565:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 566:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
 567:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** {
 568:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
 569:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 570:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
 571:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** 
 572:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 573:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 574:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 575:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
ARM GAS  /tmp/ccKsskGJ.s 			page 17


 129              		.loc 2 575 0
 130              		.syntax unified
 131              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 132 0070 72B6     		CPSID i
 133              	@ 0 "" 2
 134              		.thumb
 135              		.syntax unified
 136              	.LBE21:
 137              	.LBE20:
 211:ThreadX/common/src/tx_thread_create.c **** 
 212:ThreadX/common/src/tx_thread_create.c **** #ifdef TX_ENABLE_STACK_CHECKING
 213:ThreadX/common/src/tx_thread_create.c **** 
 214:ThreadX/common/src/tx_thread_create.c ****     /* Setup the highest usage stack pointer.  */
 215:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
 216:ThreadX/common/src/tx_thread_create.c **** #endif
 217:ThreadX/common/src/tx_thread_create.c **** 
 218:ThreadX/common/src/tx_thread_create.c ****     /* Prepare to make this thread a member of the created thread list.  */
 219:ThreadX/common/src/tx_thread_create.c ****     TX_DISABLE
 220:ThreadX/common/src/tx_thread_create.c **** 
 221:ThreadX/common/src/tx_thread_create.c ****     /* Load the thread ID field in the thread control block.  */
 222:ThreadX/common/src/tx_thread_create.c ****     thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 138              		.loc 1 222 0
 139 0072 294B     		ldr	r3, .L10+8
 140 0074 2360     		str	r3, [r4]
 223:ThreadX/common/src/tx_thread_create.c **** 
 224:ThreadX/common/src/tx_thread_create.c ****     /* Place the thread on the list of created threads.  First,
 225:ThreadX/common/src/tx_thread_create.c ****        check for an empty list.  */
 226:ThreadX/common/src/tx_thread_create.c ****     if (_tx_thread_created_count == TX_EMPTY)
 141              		.loc 1 226 0
 142 0076 294B     		ldr	r3, .L10+12
 143 0078 1B68     		ldr	r3, [r3]
 144 007a FBB9     		cbnz	r3, .L2
 227:ThreadX/common/src/tx_thread_create.c ****     {
 228:ThreadX/common/src/tx_thread_create.c **** 
 229:ThreadX/common/src/tx_thread_create.c ****         /* The created thread list is empty.  Add thread to empty list.  */
 230:ThreadX/common/src/tx_thread_create.c ****         _tx_thread_created_ptr =                    thread_ptr;
 145              		.loc 1 230 0
 146 007c 284B     		ldr	r3, .L10+16
 147 007e 1C60     		str	r4, [r3]
 231:ThreadX/common/src/tx_thread_create.c ****         thread_ptr -> tx_thread_created_next =      thread_ptr;
 148              		.loc 1 231 0
 149 0080 C4F88840 		str	r4, [r4, #136]
 232:ThreadX/common/src/tx_thread_create.c ****         thread_ptr -> tx_thread_created_previous =  thread_ptr;
 150              		.loc 1 232 0
 151 0084 C4F88C40 		str	r4, [r4, #140]
 152              	.L3:
 233:ThreadX/common/src/tx_thread_create.c ****     }
 234:ThreadX/common/src/tx_thread_create.c ****     else
 235:ThreadX/common/src/tx_thread_create.c ****     {
 236:ThreadX/common/src/tx_thread_create.c **** 
 237:ThreadX/common/src/tx_thread_create.c ****         /* This list is not NULL, add to the end of the list.  */
 238:ThreadX/common/src/tx_thread_create.c ****         next_thread =  _tx_thread_created_ptr;
 239:ThreadX/common/src/tx_thread_create.c ****         previous_thread =  next_thread -> tx_thread_created_previous;
 240:ThreadX/common/src/tx_thread_create.c **** 
 241:ThreadX/common/src/tx_thread_create.c ****         /* Place the new thread in the list.  */
 242:ThreadX/common/src/tx_thread_create.c ****         next_thread -> tx_thread_created_previous =  thread_ptr;
 243:ThreadX/common/src/tx_thread_create.c ****         previous_thread -> tx_thread_created_next =  thread_ptr;
ARM GAS  /tmp/ccKsskGJ.s 			page 18


 244:ThreadX/common/src/tx_thread_create.c **** 
 245:ThreadX/common/src/tx_thread_create.c ****         /* Setup this thread's created links.  */
 246:ThreadX/common/src/tx_thread_create.c ****         thread_ptr -> tx_thread_created_previous =  previous_thread;
 247:ThreadX/common/src/tx_thread_create.c ****         thread_ptr -> tx_thread_created_next =      next_thread;
 248:ThreadX/common/src/tx_thread_create.c ****     }
 249:ThreadX/common/src/tx_thread_create.c **** 
 250:ThreadX/common/src/tx_thread_create.c ****     /* Increment the thread created count.  */
 251:ThreadX/common/src/tx_thread_create.c ****     _tx_thread_created_count++;
 153              		.loc 1 251 0
 154 0088 244A     		ldr	r2, .L10+12
 155 008a 1368     		ldr	r3, [r2]
 156 008c 0133     		adds	r3, r3, #1
 157 008e 1360     		str	r3, [r2]
 252:ThreadX/common/src/tx_thread_create.c **** 
 253:ThreadX/common/src/tx_thread_create.c ****     /* If trace is enabled, register this object.  */
 254:ThreadX/common/src/tx_thread_create.c ****     TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG
 255:ThreadX/common/src/tx_thread_create.c **** 
 256:ThreadX/common/src/tx_thread_create.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 257:ThreadX/common/src/tx_thread_create.c ****     TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVE
 258:ThreadX/common/src/tx_thread_create.c **** 
 259:ThreadX/common/src/tx_thread_create.c ****     /* Register thread in the thread array structure.  */
 260:ThreadX/common/src/tx_thread_create.c ****     TX_EL_THREAD_REGISTER(thread_ptr)
 261:ThreadX/common/src/tx_thread_create.c **** 
 262:ThreadX/common/src/tx_thread_create.c ****     /* Log this kernel call.  */
 263:ThreadX/common/src/tx_thread_create.c ****     TX_EL_THREAD_CREATE_INSERT
 264:ThreadX/common/src/tx_thread_create.c **** 
 265:ThreadX/common/src/tx_thread_create.c **** #ifndef TX_NOT_INTERRUPTABLE
 266:ThreadX/common/src/tx_thread_create.c **** 
 267:ThreadX/common/src/tx_thread_create.c ****     /* Temporarily disable preemption.  */
 268:ThreadX/common/src/tx_thread_create.c ****     _tx_thread_preempt_disable++;
 158              		.loc 1 268 0
 159 0090 244A     		ldr	r2, .L10+20
 160 0092 1368     		ldr	r3, [r2]
 161 0094 0133     		adds	r3, r3, #1
 162 0096 1360     		str	r3, [r2]
 269:ThreadX/common/src/tx_thread_create.c **** #endif
 270:ThreadX/common/src/tx_thread_create.c **** 
 271:ThreadX/common/src/tx_thread_create.c ****     /* Determine if an automatic start was requested.  If so, call the resume
 272:ThreadX/common/src/tx_thread_create.c ****        thread function and then check for a preemption condition.  */
 273:ThreadX/common/src/tx_thread_create.c ****     if (auto_start == TX_AUTO_START)
 163              		.loc 1 273 0
 164 0098 0F9B     		ldr	r3, [sp, #60]
 165 009a 012B     		cmp	r3, #1
 166 009c 27D1     		bne	.L4
 167              	.LBB24:
 168              	.LBB25:
 477:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 169              		.loc 2 477 0
 170              		.syntax unified
 171              	@ 477 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 172 009e EFF30582 		 MRS  r2,IPSR 
 173              	@ 0 "" 2
 174              		.thumb
 175              		.syntax unified
 176              	.LBE25:
 177              	.LBE24:
 274:ThreadX/common/src/tx_thread_create.c ****     {
ARM GAS  /tmp/ccKsskGJ.s 			page 19


 275:ThreadX/common/src/tx_thread_create.c **** 
 276:ThreadX/common/src/tx_thread_create.c ****         /* Determine if the create call is being called from initialization.  */
 277:ThreadX/common/src/tx_thread_create.c ****         if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 178              		.loc 1 277 0
 179 00a2 214B     		ldr	r3, .L10+24
 180 00a4 1B68     		ldr	r3, [r3]
 181 00a6 1343     		orrs	r3, r3, r2
 182 00a8 B3F1F03F 		cmp	r3, #-252645136
 183 00ac 13D3     		bcc	.L7
 278:ThreadX/common/src/tx_thread_create.c ****         {
 279:ThreadX/common/src/tx_thread_create.c **** 
 280:ThreadX/common/src/tx_thread_create.c ****             /* Yes, this create call was made from initialization.  */
 281:ThreadX/common/src/tx_thread_create.c **** 
 282:ThreadX/common/src/tx_thread_create.c ****             /* Pickup the current thread execute pointer, which corresponds to the
 283:ThreadX/common/src/tx_thread_create.c ****                highest priority thread ready to execute.  Interrupt lockout is
 284:ThreadX/common/src/tx_thread_create.c ****                not required, since interrupts are assumed to be disabled during
 285:ThreadX/common/src/tx_thread_create.c ****                initialization.  */
 286:ThreadX/common/src/tx_thread_create.c ****             saved_thread_ptr =  _tx_thread_execute_ptr;
 184              		.loc 1 286 0
 185 00ae 1F4B     		ldr	r3, .L10+28
 186 00b0 1D68     		ldr	r5, [r3]
 187              	.LVL10:
 287:ThreadX/common/src/tx_thread_create.c **** 
 288:ThreadX/common/src/tx_thread_create.c ****             /* Determine if there is thread ready for execution.  */
 289:ThreadX/common/src/tx_thread_create.c ****             if (saved_thread_ptr != TX_NULL)
 188              		.loc 1 289 0
 189 00b2 D5B1     		cbz	r5, .L8
 290:ThreadX/common/src/tx_thread_create.c ****             {
 291:ThreadX/common/src/tx_thread_create.c **** 
 292:ThreadX/common/src/tx_thread_create.c ****                 /* Yes, a thread is ready for execution when initialization completes.  */
 293:ThreadX/common/src/tx_thread_create.c **** 
 294:ThreadX/common/src/tx_thread_create.c ****                 /* Save the current preemption-threshold.  */
 295:ThreadX/common/src/tx_thread_create.c ****                 saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 190              		.loc 1 295 0
 191 00b4 EE6B     		ldr	r6, [r5, #60]
 192              	.LVL11:
 296:ThreadX/common/src/tx_thread_create.c **** 
 297:ThreadX/common/src/tx_thread_create.c ****                 /* For initialization, temporarily set the preemption-threshold to the
 298:ThreadX/common/src/tx_thread_create.c ****                    priority level to make sure the highest-priority thread runs once
 299:ThreadX/common/src/tx_thread_create.c ****                    initialization is complete.  */
 300:ThreadX/common/src/tx_thread_create.c ****                 saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_pr
 193              		.loc 1 300 0
 194 00b6 EB6A     		ldr	r3, [r5, #44]
 195 00b8 EB63     		str	r3, [r5, #60]
 196 00ba 0EE0     		b	.L5
 197              	.LVL12:
 198              	.L2:
 238:ThreadX/common/src/tx_thread_create.c ****         previous_thread =  next_thread -> tx_thread_created_previous;
 199              		.loc 1 238 0
 200 00bc 184B     		ldr	r3, .L10+16
 201 00be 1B68     		ldr	r3, [r3]
 202              	.LVL13:
 239:ThreadX/common/src/tx_thread_create.c **** 
 203              		.loc 1 239 0
 204 00c0 D3F88C20 		ldr	r2, [r3, #140]
 205              	.LVL14:
 242:ThreadX/common/src/tx_thread_create.c ****         previous_thread -> tx_thread_created_next =  thread_ptr;
ARM GAS  /tmp/ccKsskGJ.s 			page 20


 206              		.loc 1 242 0
 207 00c4 C3F88C40 		str	r4, [r3, #140]
 243:ThreadX/common/src/tx_thread_create.c **** 
 208              		.loc 1 243 0
 209 00c8 C2F88840 		str	r4, [r2, #136]
 246:ThreadX/common/src/tx_thread_create.c ****         thread_ptr -> tx_thread_created_next =      next_thread;
 210              		.loc 1 246 0
 211 00cc C4F88C20 		str	r2, [r4, #140]
 247:ThreadX/common/src/tx_thread_create.c ****     }
 212              		.loc 1 247 0
 213 00d0 C4F88830 		str	r3, [r4, #136]
 214 00d4 D8E7     		b	.L3
 215              	.LVL15:
 216              	.L7:
 103:ThreadX/common/src/tx_thread_create.c **** UCHAR                   *temp_ptr;
 217              		.loc 1 103 0
 218 00d6 0026     		movs	r6, #0
 301:ThreadX/common/src/tx_thread_create.c ****             }
 302:ThreadX/common/src/tx_thread_create.c ****         }
 303:ThreadX/common/src/tx_thread_create.c ****         else
 304:ThreadX/common/src/tx_thread_create.c ****         {
 305:ThreadX/common/src/tx_thread_create.c **** 
 306:ThreadX/common/src/tx_thread_create.c ****             /* Simply set the saved thread pointer to NULL.  */
 307:ThreadX/common/src/tx_thread_create.c ****             saved_thread_ptr =  TX_NULL;
 219              		.loc 1 307 0
 220 00d8 3546     		mov	r5, r6
 221              	.LVL16:
 222              	.L5:
 223              	.LBB26:
 224              	.LBB27:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 225              		.loc 2 562 0
 226              		.syntax unified
 227              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 228 00da 81F31088 		MSR  PRIMASK,r1
 229              	@ 0 "" 2
 230              	.LVL17:
 231              		.thumb
 232              		.syntax unified
 233              	.LBE27:
 234              	.LBE26:
 308:ThreadX/common/src/tx_thread_create.c ****         }
 309:ThreadX/common/src/tx_thread_create.c **** 
 310:ThreadX/common/src/tx_thread_create.c **** #ifdef TX_NOT_INTERRUPTABLE
 311:ThreadX/common/src/tx_thread_create.c **** 
 312:ThreadX/common/src/tx_thread_create.c ****         /* Perform any additional activities for tool or user purpose.  */
 313:ThreadX/common/src/tx_thread_create.c ****         TX_THREAD_CREATE_EXTENSION(thread_ptr)
 314:ThreadX/common/src/tx_thread_create.c **** 
 315:ThreadX/common/src/tx_thread_create.c ****         /* Resume the thread!  */
 316:ThreadX/common/src/tx_thread_create.c ****         _tx_thread_system_ni_resume(thread_ptr);
 317:ThreadX/common/src/tx_thread_create.c **** 
 318:ThreadX/common/src/tx_thread_create.c ****         /* Restore previous interrupt posture.  */
 319:ThreadX/common/src/tx_thread_create.c ****         TX_RESTORE
 320:ThreadX/common/src/tx_thread_create.c **** #else
 321:ThreadX/common/src/tx_thread_create.c **** 
 322:ThreadX/common/src/tx_thread_create.c ****         /* Restore previous interrupt posture.  */
 323:ThreadX/common/src/tx_thread_create.c ****         TX_RESTORE
ARM GAS  /tmp/ccKsskGJ.s 			page 21


 324:ThreadX/common/src/tx_thread_create.c **** 
 325:ThreadX/common/src/tx_thread_create.c ****         /* Perform any additional activities for tool or user purpose.  */
 326:ThreadX/common/src/tx_thread_create.c ****         TX_THREAD_CREATE_EXTENSION(thread_ptr)
 327:ThreadX/common/src/tx_thread_create.c **** 
 328:ThreadX/common/src/tx_thread_create.c ****         /* Call the resume thread function to make this thread ready.  */
 329:ThreadX/common/src/tx_thread_create.c ****         _tx_thread_system_resume(thread_ptr);
 235              		.loc 1 329 0
 236 00de 2046     		mov	r0, r4
 237 00e0 FFF7FEFF 		bl	_tx_thread_system_resume
 238              	.LVL18:
 330:ThreadX/common/src/tx_thread_create.c **** #endif
 331:ThreadX/common/src/tx_thread_create.c **** 
 332:ThreadX/common/src/tx_thread_create.c ****         /* Determine if the thread's preemption-threshold needs to be restored.  */
 333:ThreadX/common/src/tx_thread_create.c ****         if (saved_thread_ptr != TX_NULL)
 239              		.loc 1 333 0
 240 00e4 85B1     		cbz	r5, .L6
 334:ThreadX/common/src/tx_thread_create.c ****         {
 335:ThreadX/common/src/tx_thread_create.c **** 
 336:ThreadX/common/src/tx_thread_create.c ****             /* Yes, restore the previous highest-priority thread's preemption-threshold. This
 337:ThreadX/common/src/tx_thread_create.c ****                can only happen if this routine is called from initialization.  */
 338:ThreadX/common/src/tx_thread_create.c ****             saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 241              		.loc 1 338 0
 242 00e6 EE63     		str	r6, [r5, #60]
 243 00e8 0EE0     		b	.L6
 244              	.LVL19:
 245              	.L8:
 103:ThreadX/common/src/tx_thread_create.c **** UCHAR                   *temp_ptr;
 246              		.loc 1 103 0
 247 00ea 0026     		movs	r6, #0
 248              	.LVL20:
 249 00ec F5E7     		b	.L5
 250              	.LVL21:
 251              	.L4:
 252              	.LBB28:
 253              	.LBB29:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 254              		.loc 2 562 0
 255              		.syntax unified
 256              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 257 00ee 81F31088 		MSR  PRIMASK,r1
 258              	@ 0 "" 2
 259              	.LVL22:
 260              		.thumb
 261              		.syntax unified
 262              	.LBE29:
 263              	.LBE28:
 264              	.LBB30:
 265              	.LBB31:
 266              	.LBB32:
 267              	.LBB33:
 539:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 268              		.loc 2 539 0
 269              		.syntax unified
 270              	@ 539 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 271 00f2 EFF31081 		MRS  r1, PRIMASK 
 272              	@ 0 "" 2
 273              		.thumb
ARM GAS  /tmp/ccKsskGJ.s 			page 22


 274              		.syntax unified
 275              	.LBE33:
 276              	.LBE32:
 277              		.loc 2 575 0
 278              		.syntax unified
 279              	@ 575 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 280 00f6 72B6     		CPSID i
 281              	@ 0 "" 2
 282              		.thumb
 283              		.syntax unified
 284              	.LBE31:
 285              	.LBE30:
 339:ThreadX/common/src/tx_thread_create.c ****         }
 340:ThreadX/common/src/tx_thread_create.c ****     }
 341:ThreadX/common/src/tx_thread_create.c ****     else
 342:ThreadX/common/src/tx_thread_create.c ****     {
 343:ThreadX/common/src/tx_thread_create.c **** 
 344:ThreadX/common/src/tx_thread_create.c **** #ifdef TX_NOT_INTERRUPTABLE
 345:ThreadX/common/src/tx_thread_create.c **** 
 346:ThreadX/common/src/tx_thread_create.c ****         /* Perform any additional activities for tool or user purpose.  */
 347:ThreadX/common/src/tx_thread_create.c ****         TX_THREAD_CREATE_EXTENSION(thread_ptr)
 348:ThreadX/common/src/tx_thread_create.c **** 
 349:ThreadX/common/src/tx_thread_create.c ****         /* Restore interrupts.  */
 350:ThreadX/common/src/tx_thread_create.c ****         TX_RESTORE
 351:ThreadX/common/src/tx_thread_create.c **** #else
 352:ThreadX/common/src/tx_thread_create.c **** 
 353:ThreadX/common/src/tx_thread_create.c ****         /* Restore interrupts.  */
 354:ThreadX/common/src/tx_thread_create.c ****         TX_RESTORE
 355:ThreadX/common/src/tx_thread_create.c **** 
 356:ThreadX/common/src/tx_thread_create.c ****         /* Perform any additional activities for tool or user purpose.  */
 357:ThreadX/common/src/tx_thread_create.c ****         TX_THREAD_CREATE_EXTENSION(thread_ptr)
 358:ThreadX/common/src/tx_thread_create.c **** 
 359:ThreadX/common/src/tx_thread_create.c ****         /* Disable interrupts.  */
 360:ThreadX/common/src/tx_thread_create.c ****         TX_DISABLE
 361:ThreadX/common/src/tx_thread_create.c **** 
 362:ThreadX/common/src/tx_thread_create.c ****         /* Re-enable preemption.  */
 363:ThreadX/common/src/tx_thread_create.c ****         _tx_thread_preempt_disable--;
 286              		.loc 1 363 0
 287 00f8 0A4A     		ldr	r2, .L10+20
 288 00fa 1368     		ldr	r3, [r2]
 289 00fc 013B     		subs	r3, r3, #1
 290 00fe 1360     		str	r3, [r2]
 291              	.LBB34:
 292              	.LBB35:
 562:ThreadX/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 293              		.loc 2 562 0
 294              		.syntax unified
 295              	@ 562 "ThreadX/ports/cortex_m4/gnu/inc/tx_port.h" 1
 296 0100 81F31088 		MSR  PRIMASK,r1
 297              	@ 0 "" 2
 298              		.thumb
 299              		.syntax unified
 300              	.LBE35:
 301              	.LBE34:
 364:ThreadX/common/src/tx_thread_create.c **** 
 365:ThreadX/common/src/tx_thread_create.c ****         /* Restore interrupts.  */
 366:ThreadX/common/src/tx_thread_create.c ****         TX_RESTORE
ARM GAS  /tmp/ccKsskGJ.s 			page 23


 367:ThreadX/common/src/tx_thread_create.c **** 
 368:ThreadX/common/src/tx_thread_create.c ****         /* Check for preemption.  */
 369:ThreadX/common/src/tx_thread_create.c ****         _tx_thread_system_preempt_check();
 302              		.loc 1 369 0
 303 0104 FFF7FEFF 		bl	_tx_thread_system_preempt_check
 304              	.LVL23:
 305              	.L6:
 370:ThreadX/common/src/tx_thread_create.c **** #endif
 371:ThreadX/common/src/tx_thread_create.c ****     }
 372:ThreadX/common/src/tx_thread_create.c **** 
 373:ThreadX/common/src/tx_thread_create.c ****     /* Always return a success.  */
 374:ThreadX/common/src/tx_thread_create.c ****     return(TX_SUCCESS);
 375:ThreadX/common/src/tx_thread_create.c **** }
 306              		.loc 1 375 0
 307 0108 0020     		movs	r0, #0
 308 010a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 309              	.LVL24:
 310              	.L11:
 311 010e 00BF     		.align	2
 312              	.L10:
 313 0110 00000000 		.word	_tx_thread_timeout
 314 0114 00000000 		.word	_tx_thread_shell_entry
 315 0118 44524854 		.word	1414025796
 316 011c 00000000 		.word	_tx_thread_created_count
 317 0120 00000000 		.word	_tx_thread_created_ptr
 318 0124 00000000 		.word	_tx_thread_preempt_disable
 319 0128 00000000 		.word	_tx_thread_system_state
 320 012c 00000000 		.word	_tx_thread_execute_ptr
 321              		.cfi_endproc
 322              	.LFE8:
 324              		.text
 325              	.Letext0:
 326              		.file 3 "/usr/include/newlib/sys/lock.h"
 327              		.file 4 "/usr/include/newlib/sys/_types.h"
 328              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 329              		.file 6 "/usr/include/newlib/sys/reent.h"
 330              		.file 7 "/usr/include/newlib/stdlib.h"
 331              		.file 8 "ThreadX/common/inc/tx_api.h"
 332              		.file 9 "ThreadX/common/inc/tx_thread.h"
 333              		.file 10 "ThreadX/common/inc/tx_initialize.h"
 334              		.file 11 "/usr/include/newlib/string.h"
 335              		.file 12 "<built-in>"
ARM GAS  /tmp/ccKsskGJ.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tx_thread_create.c
     /tmp/ccKsskGJ.s:18     .text._tx_thread_create:0000000000000000 $t
     /tmp/ccKsskGJ.s:25     .text._tx_thread_create:0000000000000000 _tx_thread_create
     /tmp/ccKsskGJ.s:313    .text._tx_thread_create:0000000000000110 $d

UNDEFINED SYMBOLS
memset
_tx_thread_stack_build
_tx_thread_system_resume
_tx_thread_system_preempt_check
_tx_thread_timeout
_tx_thread_shell_entry
_tx_thread_created_count
_tx_thread_created_ptr
_tx_thread_preempt_disable
_tx_thread_system_state
_tx_thread_execute_ptr
