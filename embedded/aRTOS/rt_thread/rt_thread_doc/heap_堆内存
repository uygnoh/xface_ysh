//______________________________________________________________________________
//      => RT-Thread 动态内存堆 HEAP
//______________________________________________________________________________
        栈(stack)        // 由编译器自动分配释放
        堆(heap)         // 由程序员分配释放
        
        

        // Image$$RW_IRAM1$$ZI$$Limit是一个链接器导出的符号，
        // 代表ZI段的结束， 也就是程序执行区的RAM结束后的地址，
        // 反过来也就是我们执行区的RAM未使用的区域的起始地址
        rt_system_heap_init((void *)HEAP_BEGIN, (void *)HEAP_END);
        HEAP_BEGIN = (void *)&Image$$RW_IRAM1$$ZI$$Limit
        
        
        // 在已分配内存块的基础上重新分配内存块的大小（增加或减小）
        // 在增加的情况下，原来的内存块数据保持不变
        // 在缩小的情况下，原来的内存块数据被自动截断
        void *rt_realloc(void *rmem, rt_size_t newsize)
        
        
        // 从内存堆中分配连续内存地址的多个内存块
        // 内存分配大小 = count * size
        void *rt_calloc(rt_size_t count, rt_size_t size)
 

        
//______________________________________________________________________________
//      => RT-Thread 动态内存分配程序
//______________________________________________________________________________
void thread00_entry(void *parameter)
{
        int i;
        char *ptr = RT_NULL;                    // 内存块指针
        for (i = 0; ; i++) {
                ptr = rt_malloc(1 << i);        // 每次分配（1 << i）大小字节数的空间
                if (ptr != RT_NULL) {
                        rt_kprintf("get  memory: %d byte\n", (1 << i));
                        rt_free(ptr);
                        rt_kprintf("free memory: %d byte\n", (1 << i));
                        ptr = RT_NULL;
                } else {
                        rt_kprintf("try to get %d byte memory failed!\n", (1 << i));
                        return;
                }
        }
}



//______________________________________________________________________________
//      => 动态内存堆使用注意点
//______________________________________________________________________________
        1 内存复位
        // 当我们每次申请到新的内存块后，建议对所申请到的内存块进行清零操作
        ptr = rt_malloc(10);            // 内存分配
        rt_memset(ptr, 0, 10);          // 内存清零
        
        
        2 内存泄漏
        // 内存泄漏（Memory Leak）是指程序中已动态分配的堆内存由于某种原因
        // 程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至
        // 系统崩溃等严重后果
        rt_malloc, rt_free      // 它们要配套使用
