/*******************************************************************************
        => ChibiOS__SD__串行驱动程序
        => https://www.playembedded.org/blog/stm32-usart-chibios-serial/
*******************************************************************************/
  串行驱动程序使用 I/O队列缓冲输入和输出流，这提供了一个主要优点：
  用户应用程序不必连续服务中断请求， 因为驱动程序在数据交换内部执行此操作，
  在这些缓冲区中存储数据。此机制允许轻松实现生产者 - 消费者模式，而无需应用
  程序端的任何努力：在此方案中，驱动程序填充缓冲区并且用户应用程序使用数据。
  如果应用程序以比生产速率更快的速度消耗数据，则这种模式不会丢失任何字节，并
  且考虑到串行波特率和典型的STM32核心速度，这种情况很容易实现。


// 串行驱动程序的每个API都以前缀“sd”开头。
// 函数名称为驼峰式，预处理器常量为大写，变量为小写
//_____________________________________________________________
#include "mcuconf.h"
#define HAL_USE_SERIAL                  TRUE
#define STM32_SERIAL_USE_USART1         TRUE


// 串行驱动程序对象
//_____________________________________________________________
#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
        SerialDriver SD1;
#endif


//ChibiOS \ HAL中的每个驱动程序都实现了一个有限状态机，因此它适用于串行驱动程序。
//驱动程序的当前状态存储在名为state的字段中的对象内（您可以使用结构语法作为示例SD2.state访问它）



//sdInit();
//_____________________________________________________________
sdInit仅初始化与串行驱动程序相关的变量和对象。用户不得将初始化与配置混淆



//配置串口驱动
//_____________________________________________________________
void sdStart(SerialDriver *sdp, const SerialConfig *config);
//在开始串行通信之前，用户应用程序应至少调用此函数一次。其目的是配置外设，这涉及我们引入的所
//有可配置性的设置：波特率，奇偶校验位，停止位长度，编码等。
所述sdStart函数接收两个参数是一个指向我们要启动（例如＆SD1，SD2及或任何是我们要使用USART）
和一个指向其表示相关的配置结构的串行驱动器的对象。此结构包含与底层硬件严格相关的所有依赖项。这
意味着从STM32系列转移到具有不同底层硬件的另一个系列，我们很可能必须对这些配置结构应用一些更改
void sdStop(SerialDriver *sdp)
启动功能通常启用外设时钟。在某些应用中（特别是那些针对低功耗的应用），在不使用时保持外设时钟
是不可取的。因此，我们可以使用另一个功能来停止驱动器并停止外设时钟：停止



//配置结构
//_____________________________________________________________
配置结构由两个独立的部分组成：第一部分在所有类型的硬件中保持不变，第二部分严格依赖于硬件
sdStart(&SD2, NULL);
//这是串行驱动程序的特性，当接收到NULL配置时，它以为STM32定义的默认配置开始
static const SerialConfig default_config = {
        SERIAL_DEFAULT_BITRATE,
        0,
        USART_CR2_STOP1_BITS,
        0
};
//这种配置意味着没有特性，1位停止，没有硬件流控制，
//8位数据大小和波特率等于SERIAL_DEFAULT_BITRATE，它在项目HAL配置文件中定义为38400bps。





/*******************************************************************************
        => ChibiOS__驱动程序
*******************************************************************************/
/* Configuring PC6 as AF8 assigning it to USART6_TX. */
palSetPadMode(GPIOC, 6, PAL_MODE_ALTERNATE(8));
/* Configuring PC7 as AF8 assigning it to USART6_RX. */
palSetPadMode(GPIOC, 7, PAL_MODE_ALTERNATE(8));
