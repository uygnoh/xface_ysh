/*******************************************************************************
        => ChibiOS__pal__端口抽象层
        => $CHIBOS/os/hal/include/hal_pal.h
        => http://wiki.csie.ncku.edu.tw/embedded/chibios
*******************************************************************************/

// PAL驱动程序的每个API都以前缀“pal”开头。 函数名称为驼峰式，
// 预处理器常量为大写，变量为小写。 在这里，我们必须花一些关
// 于模式的话。 PAL设计用于许多微控制器，并带有一组适用于每
// 个微控制器的通用模式。      ______微控制器通用模式______
//_____________________________________________________________   

0       PAL_MODE_RESET                  // 表示重置后状态。 请注意，此状态取决于硬件;
1       PAL_MODE_UNCONNECTED            // 表示未连接焊盘的安全状态，取决于硬件;
2       PAL_MODE_INPUT                  // 代表输入，没有上拉\下电阻;
3       PAL_MODE_INPUT_PULLUP           // 表示带上拉电阻的输入;
4       PAL_MODE_INPUT_PULLDOWN         // 表示带下拉电阻的输入;
5       PAL_MODE_INPUT_ANALOG           // 代表适合模拟采样的输入;
6       PAL_MODE_OUTPUT_PUSHPULL        // 代表具有推挽网络的输出;
7       PAL_MODE_OUTPUT_OPENDRAIN       // 用于带开漏网络的输出;
//当然这些模式是通用的，不能映射STM32微控制器的所有模式。因此，STM32还有一些额外的特定模式，
//可以混合到之前以获得所有需要的模式。 例如，我们有一个额外的模式来处理备用函数：
        PAL_MODE_ALTERNATE（n）。


// 对于端口速度：
//_____________________________________________________________   
        PAL_STM32_OSPEED_LOWEST
        PAL_STM32_OSPEED_MID1
        PAL_STM32_OSPEED_MID2
        PAL_STM32_OSPEED_HIGHEST


// 对于上拉\下行配置：
//_____________________________________________________________   
        PAL_STM32_PUPDR_FLOATING
        PAL_STM32_PUPDR_PULLUP
        PAL_STM32_PUPDR_PULLDOWN
        
        
// 推挽输出
//_____________________________________________________________
// 推挽输出能够输出大的电流，可以实现亮灯、驱动外部芯片等功能，下面我们以连接在
// 板子上PA9上的LED为例子，通过配置该IO为输出并设置输出电平为高电平来点亮这个
// LED，需要用到的有palSetPad和palClearPad：
        palSetPadMode(GPIOA, 9, PAL_MODE_OUTPUT_PUSHPULL);
        palSetPad(GPIOA, 9);
        palClearPad(GPIOA, 9);


// 上拉输入
//_____________________________________________________________
// 上拉输入常常用于检测外部按键，这里我们以链接了外部按键的PC13为例，通过配置该
// IO为上拉输入并读取该IO口来检测按键，需要用到的函数是palReadPad这个宏函数：
        palSetPadMode(GPIOC, 13, PAL_MODE_INPUT_PULLUP);
        if (palReadPad(GPIOC, 13) == PAL_LOW) {
                printf("按钮被按下！\r\n");
                //等待按键释放
                while ((padReadPad(GPIOC, 13) == PAL_LOW);
        }


// 复用设置
//_____________________________________________________________   
// 对于使用硬件的I2C、SPI等设备，需要进行AF配置的，那么就需要配置为复用模式，这
// 里以串口为例，比如PA0和PA1作为UART4的TX和RX复用，那么可以配置如下：
        palSetPadMode(GPIOA, 0, PAL_MODE_ALTERNATE(7));
        palSetPadMode(GPIOA, 1, PAL_MODE_ALTERNATE(7));
        
        
        
/*******************************************************************************
        => https://www.playembedded.org/blog/stm32-gpio-chibios-pal/
*******************************************************************************/
// Enables the PAL subsystem.
//_____________________________________________________________   
#if !defined(HAL_USE_PAL) || defined(__DOXYGEN__)
#define HAL_USE_PAL                 TRUE
#endif



// STM32 Nucleo F401RE board.h file
//_____________________________________________________________   
// IO pins assignments.
#define GPIOA_ARD_A0                0U
#define GPIOA_ADC1_IN0              0U
#define GPIOA_ARD_A1                1U
#define GPIOA_ADC1_IN1              1U
#define GPIOA_ARD_D1                2U
#define GPIOA_USART2_TX             2U
#define GPIOA_ARD_D0                3U
#define GPIOA_USART2_RX             3U
#define GPIOA_ARD_A2                4U
#define GPIOA_ADC1_IN4              4U
#define GPIOA_LED_GREEN             5U
#define GPIOA_ARD_D13               5U
#define GPIOA_ARD_D12               6U
#define GPIOA_ARD_D11               7U
#define GPIOA_ARD_D7                8U
#define GPIOA_ARD_D8                9U
#define GPIOA_ARD_D2                10U
#define GPIOA_OTG_FS_DM             11U
#define GPIOA_OTG_FS_DP             12U
#define GPIOA_SWDIO                 13U
#define GPIOA_SWCLK                 14U
#define GPIOA_PIN15                 15U
// 以下3种方等价
palClearPad(GPIOA, 5);
palClearPad(GPIOA, GPIOA_LED_GREEN);
palClearPad(GPIOA, GPIOA_ARD_D13);


// IO pins assignments.
#define LINE_ARD_A0                 PAL_LINE(GPIOA, 0U)
#define LINE_ADC1_IN0               PAL_LINE(GPIOA, 0U)
#define LINE_ARD_A1                 PAL_LINE(GPIOA, 1U)
#define LINE_ADC1_IN1               PAL_LINE(GPIOA, 1U)
#define LINE_ARD_D1                 PAL_LINE(GPIOA, 2U)
#define LINE_USART2_TX              PAL_LINE(GPIOA, 2U)
#define LINE_ARD_D0                 PAL_LINE(GPIOA, 3U)
#define LINE_USART2_RX              PAL_LINE(GPIOA, 3U)
#define LINE_ARD_A2                 PAL_LINE(GPIOA, 4U)
#define LINE_ADC1_IN4               PAL_LINE(GPIOA, 4U)
#define LINE_LED_GREEN              PAL_LINE(GPIOA, 5U)
#define LINE_ARD_D13                PAL_LINE(GPIOA, 5U)
#define LINE_ARD_D12                PAL_LINE(GPIOA, 6U)
#define LINE_ARD_D11                PAL_LINE(GPIOA, 7U)
#define LINE_ARD_D7                 PAL_LINE(GPIOA, 8U)
#define LINE_ARD_D8                 PAL_LINE(GPIOA, 9U)
#define LINE_ARD_D2                 PAL_LINE(GPIOA, 10U)
#define LINE_OTG_FS_DM              PAL_LINE(GPIOA, 11U)
#define LINE_OTG_FS_DP              PAL_LINE(GPIOA, 12U)
#define LINE_SWDIO                  PAL_LINE(GPIOA, 13U)
#define LINE_SWCLK                  PAL_LINE(GPIOA, 14U)
// 以下2种方等价
palClearPad(GPIOA, GPIOA_LED_GREEN);
palClearLine(LINE_LED_GREEN);
