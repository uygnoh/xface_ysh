/*******************************************************************************
        => RISC-V
*******************************************************************************/
// RISC-V 工作模式
// ____________________________________________________________
        00      User       mode         // U-用户模式
        01      Supervisor mode         // S-监管者模式
        10      Hypervisor mode         // H-超级管理员模式
        11      Machine    mode         // M-机器模式
        
        
        
// Trap
// ____________________________________________________________
        注意：在RISC-V架构中，进入异常、NMI或者中断也被统称为Trap
        
        
        
// Bumblebee 内核支持两个特权模式(Privilege Modes)
// ____________________________________________________________
        1 机器模式(Machine Mode)是必须的模式,该 Privilege Mode 的编码是 0x3
        2 用户模式(User Mode)可配置的模式,   该 Privilege Mode 的编码是 0x0
        
        
        
// CSR => Control and Status Rgister
// ____________________________________________________________
        CSR寄存器RISC-V的架构中定义了一些控制和状态寄存器
        用于配置或记录一些处理器核的运行状态。CSR寄存器是处
        理器核内部的寄存器，使用其专有的 12 位地址编码空间
        
        
        
/*******************************************************************************
        => Bumblebee 内核机器子模式(Machine Sub-Mode)
*******************************************************************************/ 
        
// CSR寄存器（msubm->TYP）
// ____________________________________________________________
        Bumblebee 内核的 Machine Mode 
        可能处于四种不同的状态下,将之称之为机器子模式(Machine Sub-Mode):
  1     // 正常机器模式(该 Machine Sub-Mode 的编码是 0x0):
           处理器内核被复位之后,处于此子模式之下。处理器复位后
  2     // 中断处理模式(该 Machine Sub-Mode 的编码是 0x1):
           响应中断后处理器内核处于此状态。
           如果不产生异常、NMI、中断,则一直正常运行于此模式之下。
  3     // 异常处理模式(该 Machine Sub-Mode 的编码是 0x2):
           响应异常后处理器内核处于此状态。
  4     // NMI 处理模式(该 Machine Sub-Mode 的编码是 0x3):
           响应 NMI 后处理器内核处于此状态。



/*******************************************************************************
        => Bumblebee 中断系统使用
*******************************************************************************/
        Bumblebee在机器模式下处理异常和中断，可选用RISC-V默认的PLIC中断控制器
        或者Bumblebee改进的中为控制器来处理中断，对过CSR寄存器（mtvec[5:0]）
        MODE = b000000          // 使用PLIC
        MODE = b000011          // 使用ECLIC
        // Set the interrupt processing mode to ECLIC mode
        li      t0, 0x3f
        csrc    CSR_MTVEC, t0
        csrs    CSR_MTVEC, 0x3
        
        
        // NMI
        // ____________________________________________________________
        
   
        
/*******************************************************************************
        => Bumblebee 异常处理流程
*******************************************************************************/
// mepc Machine Exception Program Counter
// ____________________________________________________________
        Bumblebee 内核退出异常时的返回地址由 CSR 寄存器 mepc保存。
        在进入异常时,硬件将自动更新 mepc 寄存器的值,该寄存器将作为退出异常的
        返回地址,在异常结束之后,能够使用它保存的 PC 值回到之前被异常停止执行的程序点。


// mtval Machine Trap Value Register
// ____________________________________________________________
        Bumblebee 内核在进入异常时,硬件将自动更新 CSR 寄存器 mtval,
        以反映引起当前异常的存储器访问地址或者指令编码:


// msstatus Machine Status Register      
// ____________________________________________________________ 
        mstatus 寄存器用于Bumblebee 内核在进入异常时,硬件将自动更新
        CSR 寄存器 mstatus(Machine Status Register)的某些域
        
        
// 更新 Privilege Mode
// ____________________________________________________________ 
        异常需要在机器模式(Machine Mode)下处理,在进入异常时,
        处理器内核的 Privilege Mode 被更新为机器模式。
        
        
// 更新 Machine Sub-Mode
// ____________________________________________________________ 
        Bumblebee 内核的 Machine Sub-Mode 实时反映在 CSR 寄存器 
        msubm.TYP 域中。 在进入异常时,处理器内核的 Machine Sub-Mode 
        被更新为异常处理模式
        
        
        
/*******************************************************************************
        => gdv32f103 启动流程
*******************************************************************************/
// risc-crt0.s
// ____________________________________________________________ 
_start:
        ......
        la      a0, trap_entry          // 将异常处理入口地址装入寄存器
        csrw    mtvec, a0               // 将a0寄存器的值写入到mtvec寄存器
        csrw    mcause, x0              // 将0定入到mcause寄存器

        ja      t1, _init               // t1 = _init， 将标签地址装入t1寄存器
        jalr    t1                      // pc = t1, 将t1中的值赋给程序计数器PC

// _init
// ____________________________________________________________ 
void _init() {
        SystemInit();                   // 初始化系统时钟
        eclic_init(ECLIC_NUM_INTERRUPTS);// 初始化ECLIC
        eclic_mode_enable();            // 启动ECLIC
}
        
// SystemInit
// ____________________________________________________________ 
void SystemInit(void) {
        RCU_CTL |= RCU_CTL_IRC8MEN;     // 选择内部时钟源RC8M
        ......
        RCU_INT  = 0x00FF0000U;         // 关闭时钟中断
        system_clock_config();          // 设置时钟
}    
        
        
        
// entry.s  非向量中断响应
// ____________________________________________________________ 




// GD32VF1xx_Startup.s  向量中断  
// ____________________________________________________________ 
        
        
        

