###########################################################
### Vimscript Normal命令
###########################################################
目前为止我们已经介绍了几个最为常用的Vimscript命令，
但都跟日常中在normal模式下处理文本的方式无关。 
有没有一种办法能把我们的脚本跟日常的文本编辑命令结合起来呢？
% 答案显然是肯定的。之前我们已经见过normal命令，是时候更详细地介绍它了。
% Vim将把你的光标移到当前文件的最后一行，就像是在normal模式里按下G。
:normal G

% Vim将移动到文件的第一行(gg)并删除它(dd)。
% normal命令简单地接受一串键值并当作是在normal模式下输入的。就是那么简单！
:normal ggdd


% 避免映射
执行下面的命令来映射G键到别的东西：
现在在normal模式按下G将删除一整行。
:nnoremap G dd

Vim将删除当前行。normal命令将顾及当前的所有映射。
这意味着我们需要给normal提供类似于nnoremap之于nmap的版本，
 否则我们没法使用它——考虑到我们猜测不了用户的映射方式。
:normal G

幸好Vim真的有这样的命令叫normal!。执行这个命令：
这次Vim将移动光标到文件底部，即使G已经被映射了。
在写Vim脚本时，你应该_总是_使用normal!，_永不_使用normal。不要信任用户在~/.vimrc中的映射。
:normal! G


% 特殊字符
如果你使用normal!一段时间了，就很可能注意到一个问题。试试下面的命令：
:normal! /foo<cr>

第一眼看上去它应该会开始搜索foo，但你将看到它不会正常工作。 问题在于normal!不会解析像<cr>那样的特殊字符序列。
于是，Vim认为你想要搜索字符串序列"foo"，没有意识到你甚至按下了回车来进行搜索！ 
(译注：原文为you even pressed return to perform the search! 
按后文的意思应该是没有按下return,待问作者) 我们将在下一章讨论如何应对这个问题。



% 练习
阅读:help normal。在最后部分，你将获得关于下一章主题的提示。


% 附加题
如果你还没准备好面对挑战，跳过这一节。如果你够胆，祝你好运！
重温:help normal关于undo的部分。尝试设计一个删除两行却能单独撤销每次删除的映射。
 建议从nnoremap <leader>d dddd开始吧。
这次你并不真的需要normal!(nnoremap就够了)， 但是它揭示了一点：
有时阅读一个Vim命令的文档可以激发关于别的内容的奇思妙想。
如果你未尝使用过helpgrep命令，那就是时候用上它了。阅读:help helpgrep。 留心关于怎样在匹配内容中浏览的部分。
暂时先别纠结模式(patterns)，我们很快就要谈到它们。 现在只需了解你可以用类似foo.*bar来查找文档中包括该正则模式的行。
不幸的是，helpgrep会不时给你带来挫折感，因为为了找到某些词，你需要懂得去搜索某些词。 
我会帮你省下些无用功，这次你得查找到一种手工修改Vim的撤销序列的方法， 这样你映射的两个删除才能独立地撤销。
在以后你要灵活变通(pragmatic)。有时在你迷惘徘徊的时候，Google一下，你就知道。





###########################################################
### Vimscript 执行normal!
###########################################################
既然已经学了execute和normal!，我们就可以深入探讨一个Vimscript惯用法。 执行下面的命令：
:execute "normal! gg/foo\<cr>dd"
% 这将移动到文件的开头，查找foo的首次出现的地方，并删掉那一行。
% 之前我们尝试过用normal!来执行一个搜索命令却无法输入必须的回车来开始进行搜索。 结合execute和normal!将解决这个问题。
% execute允许你创建命令，因而你能够使用Vim普通的转义字符串来生成你需要的"打不出"的字符。 尝试下面的命令：
:execute "normal! mqA;\<esc>`q"

% 这个命令做了什么？让我们掰开来讲：
% :execute "normal! ..."  ：执行命令序列，一如它们是在normal模式下输入的，忽略所有映射， 并替换转义字符串。
    mq      ：保存当前位置到标记"q"。
    A       ：移动到当前行的末尾并在最后一个字符后进入insert模式。
    ;       ：我们现在位于insert模式，所以仅仅是写入了一个";"。
    \<esc>  ：这是一个表示Esc键的转义字符串序列，把我们带离insert模式。
    `q      ：回到标记"q"所在的位置。
% 看上去有点绕，不过它真的很有用：它在当前行的末尾补上一个分号并保持光标不动。 
% 在写Javascript，C或其他以分号作为语句分隔符的语言时，一旦忘记加上分号，这样的映射将助你一臂之力。


% 练习
重读:help expr-quote(你之前应该看过)来提醒你怎么用execute通过转义字符串传递特殊字符给normal!。
在翻开下一章之前，放下本书休息一下。吃一个三明治或喝一杯咖啡(译注：或者茶！)， 喂一下你的宠物——如果你有的话。


