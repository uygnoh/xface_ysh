/*******************************************************************************
        => 条件编译指令
*******************************************************************************/
        #               // 空指令
        #include        // 包含一个源码文件
        #define         // 宏定义
        #undef          // 取消已定义的宏
        #if             // 如果给定的条件位真，则编译下面的代码
        #elif           // 如果前面 #if 给定的条件为假，当前条件为真，则编译下面的代码
        #endif          // 条件编译结束
        #else           // 如果前面 #if 给定的条件都为假，则编译下面的代码
        #error          // 停止编译，并显示错误信息
        #ifdef          // 如果宏已定义，则编译下面的代码
        #ifndef         // 如果宏没有定义，则编译下面的代码
        #if defined(x)  // 如果 x 被定义过，则编译下面的代码(建议使用这种方法！！！)
        #if !defined(x) // 如果 x 没有被定义过，则编译下面的代码(建议使用这种方法！！！)
        #line           // #line 使您可以修改编译器的行号以及（可选）错误和警告的文件名输出
        #pragma         // #pragma的作用是：用于给编辑器提供特殊的指令，说明如何编译包含杂注的文件



        // 防止重复定义
        #ifndef __COMMON_H__
        #define __COMMON_H__

        #endif



/*******************************************************************************
        => macro 宏
*******************************************************************************/
        #define SWAP1(a, b) \
        {                   \
            int t = a;      \
            a = b;          \
            b = t;          \
        }                   

        /* SWAP2 这种算法的缺陷为，当a和b的数值很大时，可能出现溢出 */
        #define SWAP2(a, b) \
        {                   \
            a = a+b;        \
            b = a-b;        \
            a = a-b;        \
        }			

        /* SWAP3 采用按位异或运算，效率是非常高的 */
        #define SWAP3(a, b) \
        {                   \
            a = a^b;        \
            b = a^b;        \
            a = a^b;        \
        }		

